(* Nov 2010 *)


(* Desktop init.                                *)

let set_load_path() = (   load_path:= 
     let dir = (Sys.getenv "FLYSPECK_DIR") in
     let jdir = Filename.concat dir "../jHOLLight" in
      dir::jdir::(!load_path));;

let general_init() = 
  let _ = set_load_path() in
    needs "strictbuild.hl";;

general_init();;
(* #load "unix.cma";; (* dynamic loading not supported *) *)

(* Build.build_all();; *)
flyspeck_needs"build.hl";;
reneeds "strictbuild.hl";;

(* map reneeds Build.build_sequence;; *)
let _ = set_load_path() in
  build_silent();;
build_and_report();;
Debug.silent:=true;; (* don't print debug error messages *)
reset();;

let new_build_silent_ignore ignores = 
  let loaded = try_do (fun s -> flyspeck_needs s; s) 
    (filter (fun s -> not (mem s ignores)) Build.build_sequence) in
  let unloaded = filter(not o already_loaded) Build.build_sequence in
    (loaded,unloaded);;

new_build_silent_ignore ["general/serialization.hl"];;



new_build_silent();;
new_build_silent();;

(* searching *)

let open_search =
  let _ = flyspeck_needs "general/print_types.hl" in
  let _ = flyspeck_needs "general/tactics.hl" in
  let _ = flyspeck_needs "general/hales_tactic.hl" in
  let _ = reneeds "../usr/thales/search/searching.hl" in
  let _ = reneeds "../usr/thales/search/init_search.hl" in ();;

open Searching;;
open Hales_tactic;;

(* END LOCAL BUILD *)

(*
let prove_by_refinement_bak = prove_by_refinement;;
let prove_bak = prove;;
let ISPECL_bak = ISPECL;;
*)

let prove_by_refinement=prove_by_refinement_bak;;
let prove = prove_bak;;
let ISPECL = ISPECL_bak;;

let ISPECL = Debug.verbose_thm ISPECL;;

State_manager.neutralize_state ();;

let prove_by_refinement(t,s) =
  let _ = report ("proving: "^string_of_term t) in
  let p = Prove_by_refinement.prove_by_refinement(t,s) in
  let _ = report ("proof done") in
    p;;

let prove(t,s) =
  let _ = report ("proving: "^string_of_term t) in
  let p = Hol_pervasives.prove(t,s) in
  let _ = report ("proof done") in
    p;;

let prove = Hol_pervasives.prove;;
let prove_by_refinement = Prove_by_refinement.prove_by_refinement;;

(* SEARCH *)

help "ABBREV_TAC";;
help "help";;
help_grep "ASM";;
help_grep "apropos";;
help_flag 'i' "r.*w";;
help_flag 'l' "search";;
help_flag '?' "";;
help_flag 'd' "face";;

help "apropos_searching";;
help "apropos_types";;


(* load misc files *)


(* fin *)
