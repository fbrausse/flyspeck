(* continuation of pent.hl
   Dimer calculations *)



(* ******************************************************************************** *)
(* BMIEZDS test that comes up in dimer contraction of middle edge AA' to contact.
   We want to show that if edges are at most 2.1. and
   AA'B triangle, B is a double pointer, angles beta+gamma<= 0.941
   Then area > 1.345.  *)

  (* See Diagram BMIEZDS  *)
(* ******************************************************************************** *)

let areaBMIEZDS xbeta beta xgamma gamma = 
  let ellxb = ellx xbeta beta in
  let ellxc = ellx xgamma gamma in
  let hb = xbeta - iee in
  let hc = xgamma - iee in
  let rb = isqrt (hb * hb + irho * irho) in
  let rc = isqrt (hc * hc + irho * irho) in
  let phib = iarc one ellxb rb in
  let phic = iarc one ellxc rc in
  let angleB = m (2.0 *. pi /. 5.0) + phib + phic in
    ellxb * ellxc * isin (angleB) / two;;

let opedgeBMIEZDS xbeta beta xgamma gamma = 
  let ellxb = ellx xbeta beta in
  let ellxc = ellx xgamma gamma in
  let hb = xbeta - iee in
  let hc = xgamma - iee in
  let rb = isqrt (hb * hb + irho * irho) in
  let rc = isqrt (hc * hc + irho * irho) in
  let phib = iarc one ellxb rb in
  let phic = iarc one ellxc rc in
  let angleB = m (2.0 *. pi /. 5.0) + phib + phic in
    iloc ellxb ellxc angleB;;

let oneopBM abx = 
  let [xbeta;beta;xgamma;gamma] = abx in 
  let ab = beta+gamma in
    if m (0.313) >>> ab then true
    else
      try
	let opedge = opedgeBMIEZDS xbeta beta xgamma gamma in
	  (opedge >>> m 2.1) 	  
      with | Unstable -> false;;

let oneareaBM abx = 
  let [xbeta;beta;xgamma;gamma] = abx in 
  let ab = beta+gamma in
    if m (0.313) >>> ab then true
    else
      try
	let ar = areaBMIEZDS xbeta beta xgamma gamma in
	let opedge = opedgeBMIEZDS xbeta beta xgamma gamma in
	  (ar >>> m 1.345) or (opedge >>> m 2.1)  	  
      with | Unstable -> false;;

mktest("oneopBM",fun() ->
	 recurseltofinish oneopBM 
	   [[(mk_interval (0.0, ee)); 
	     (mk_interval(0.0,0.313));
	     (mk_interval (0.0, ee)); 
	     (mk_interval(0.0,0.313))]]);; 

mktest("oneareaBM",fun()->
	 recurseltofinish oneareaBM 
	   [[(mk_interval (ee,2.0*. ee)); 
	     (mk_interval(0.0,0.313));
	     (mk_interval (0.0,2.0 *. ee)); 
	     (mk_interval(0.0,0.313))]]);; 

opedgeBMIEZDS (m 0.5877) (m 0.2347) (m 0.0) (m 0.078);;

(* end BMIEZDS *)


(* ******************************************************************************** *)
(* ISOCELES calculations, subcritical.
   Assume the subcritical is "2C", but not "3C".
   On subcritical side, we assume we have an isoceles triangle (two long edges)
   We show that the two long edges are never less than 1.76.
   We show that the area is never less than 1.265. (was 1.27)
   We show that the longitudinal angles theta, theta' are ...
*)
(* ******************************************************************************** *)

let slider h = 
  let trho = two * irho in
  let alpha = iatan (h / trho) in
  let m = isqrt (h * h + trho * trho) in
    (m,alpha);;

slider (m 0.0);;
ellx (two * iee) (m (2.0 *. pi /. 5.0));;
thetax (two * iee) (m (2.0 *. pi /. 5.0));;


(* Case SS = slider+slider *)

let slider_slider h1 h2 = 
  let (m1,alpha1) = slider h1 in
  let (m2,alpha2) = slider h2 in
  let beta = m (2.0 *. pi /. 5.0) + alpha1 + alpha2 in
    (m1,m2,(iloc m1 m2 beta),alpha1,alpha2);;

let ellthetax xalpha alpha sgn =  (* swap if false *)
  let (el,th,th') = thetax xalpha alpha in
  let (th,th') = if sgn then (th,th') else (th',th) in
    (el,th,th');;

let one_two_isoceles sgnalpha sgnbeta xs =
  let [xalpha; alpha;  xbeta; beta] = xs in
    try
      let (elalpha,thABC,thBAC) = ellthetax xalpha alpha sgnalpha in
      let (elgamma,thCBA,thBCA) = ellthetax xbeta beta sgnbeta in
      let arcB = iarc_mono elalpha elgamma elalpha in
      let arcC = arcB in
      let arcA = iarc_mono elalpha elalpha elgamma in
      let pB = periodize_pent (thBAC+thBCA +arcB) in
      let a = areamin_acute elalpha elalpha elgamma in
      let has0 x = (x.lo <= 0.0) && (0.0 <= x.hi) in
      let neg x = (x.hi <= 0.0) in
      let pos x = (x.lo >= 0.0) in
      let negr x = neg x && (x.lo +. pi /. 5.0 >= 0.0) in
      let old_sumt x = (x.lo >> 0.15) in (* was 0.2 nix, alpha open out condition *)
      let sumt x = (x.lo >> 0.18) in (* was 0.2 nix, alpha open out condition *)
(*      let minedge = m 1.74 in  was 1.76 nix, was 1.75 nix, was 1.74 nix *)
      let minarea = 1.265 in (* was 1.27 nix *)
	if elgamma >>> elalpha then true
	else if not(exists has0 pB) then true
	else if (a >> adl) then true
	else
	  let thACB = - thABC - arcA in
	  let thCAB = - thCBA - arcC in
	    if not(pet elalpha thACB thCAB) then true
	    else 
	      let m2 = m 0.2 in
	      let thACBm2 = periodize_pent (thACB + m2) in
	      let thCABm2 = periodize_pent (thCAB + m2) in
	      let thACBs = periodize_pent (thACB) in
	      let thsum = periodize_pent (thACB + thCAB) in
	      let isopin = 
		((a >> minarea) && 
		   (forall sumt thsum) &&
		   (forall neg thACBm2) &&
		   (forall neg thCABm2)
		) in
	      let symtj_type = 
		((a >> 1.28) && (elalpha.lo >> 1.78) &&
		   (forall pos thACBs) && (forall negr thsum)) in
		isopin or symtj_type
    with Unstable -> false;;

let init_1_2_iso = [[(mk_interval (0.0,2.0*. ee));(mk_interval (0.0,2.0 *. pi /. 5.0));(mk_interval (0.0,2.0*. ee));(mk_interval (0.0,2.0 *. pi /. 5.0))]];;


let isott = recurseltofinish (one_two_isoceles true true) init_1_2_iso (* 53684627,true *);; (* (232983, true) *)


let isotf = recurseltofinish (one_two_isoceles true false) init_1_2_iso;; (* (55492767, true) *) (*  (953901, true) *)

let isoft = recurseltofinish (one_two_isoceles false true) init_1_2_iso;; (* (4176583, true) *) (* (1083813, true) *)

let isoff = recurseltofinish (one_two_isoceles false false) init_1_2_iso;; (* (53688491, true) *)  (* (398189, true) *)


(* if dACsub thetaACBsub thetaCABsub are the edge data for subcritical,
   and dACcomp thetaACBcomp thetaCABcomp are the data for the compensator.
   then dACsub = dACcomp, thetaACBsub = - thetaACBcomp, thetaCABsub = -thetaCABcomp
   So we must negate the theta conditions.

   Note the conditions are symmetrical in thetaACB and thetaCAB.
*)


let compensator_canfit_isopin thetaACBcomp thetaCABcomp = 
  let thACB = - thetaACBcomp in
  let thCAB = - thetaCABcomp in
  let m2 = m 0.2 in
  let thACBm2 = periodize_pent (thACB + m2) in
  let thCABm2 = periodize_pent (thCAB + m2) in
  let thsum = periodize_pent (thACB + thCAB) in
  let neg x = (x.lo <= 0.0) in (* NB x.hi becomes x.lo here *)
  let sumt x = (x.hi >= 0.18) in 
		(
		   (exists sumt thsum) &&
		   (exists neg thACBm2) &&
		   (exists neg thCABm2)
		);;

(* XX need to add compensator_canfit_isotj *)

let compensator_canfit is_isopin thetaACBcomp thetaCABcomp = 
  if is_isopin then compensator_canfit_isopin thetaACBcomp thetaCABcomp
  else failwith "not implemented";;

let one_isocompensator sgnalpha sgnbeta is_isopin xs =
  let [xalpha; alpha;  xbeta; beta] = xs in
    try
      let areamin_subcritical_iso = 
	if is_isopin then (* was 1.265 *) 1.275 (* experiment XX *) else 1.28 in
      let atarget = adl +. (adl -. areamin_subcritical_iso) in
      let (dAB,thABC,thBAC) = ellthetax xalpha alpha sgnalpha in
      let (dBC,thCBA,thBCA) = ellthetax xbeta beta sgnbeta in
      let bAC = 
	if is_isopin then mk 1.72 1.79 else mk 1.78 1.79 in
      let v = fillout dAB thABC thBAC dBC thBCA thCBA bAC in
	if v = None then true
	else 
	  let Some (_,_,_,dAC,thACB,thCAB) = v in
	  let a = areamin_acute dAB dBC dAC in
	    if a >> atarget then true
	    else
	      if not(compensator_canfit is_isopin thACB thCAB) then true
	      else false
    with Unstable -> false;;

let isocompttt = recurseltofinish (one_isocompensator true true true) init_1_2_iso;; (* (217557, true) *)

(* running gives ce *)
let isocomptft = recurseltofinish (one_isocompensator true false true) init_1_2_iso;; 

(* not needed by symmetry 
let isocompftt = recurseltofinish (one_isocompensator false true) init_1_2_iso;; 
*)

let isocompfft = recurseltofinish (one_isocompensator false false) init_1_2_iso;; 


(* Math'ca plots *)

let ce = [(0.,8.75868279178e-09);(0.116198960418,0.116198969781);(0.320723405696,0.320723414455);(0.692119529332,0.692119538695)];;
let delAcoordinates sgnalpha sgnbeta ce = 
  let low (x,_) = m x in
  let [xalpha;alpha;xbeta;beta] = (* map (low) *) map mk_interval ce in
  let (dAB,thABC,thBAC) = ellthetax xalpha alpha sgnalpha in
  let (dBC,thCBA,thBCA) = ellthetax xbeta beta sgnbeta in
  let bAC = mk 1.72 1.79 in
  let v = fillout dAB thABC thBAC dBC thBCA thCBA bAC in
  let _ = not (v = None) or failwith "delAcoordinates" in
  let Some (_,_,_,dAC,thACB,thCAB) = v in
    (dAB.lo,dAC.lo,dBC.lo,thABC.lo,thBAC.lo,thCAB.lo);;

delAcoordinates true false ce;;
