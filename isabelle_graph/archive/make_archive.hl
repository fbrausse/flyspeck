(* ========================================================================== *)
(* FLYSPECK - ISABELLE CODE                                              *)
(*                                                                            *)
(* Chapter:  Tame graph generation                                           *)
(* Author:  Thomas Hales     *)
(* Date: Jan 23, 2014                                                *)
(* ========================================================================== *)

(*
Generate the tame archive files Tri.ML Quad.ML Pent.ML Hex.ML
from the java-generated data.

Convert Tri.ML etc. from ML format back into Ocaml lists.

The files Tri.ML,... were generated on Jan 24, 2014.
*)

flyspeck_needs "../glpk/glpk_link.ml";;
flyspeck_needs "../glpk/tame_archive/lpproc.ml";;

module Make_archive = struct

let tame = Glpk_link.strip_archive (!Lpproc.archiveraw);;

let _ = 
  (List.length tame = 19713);; (* as of Jan 2014. *)

let tame_list = map Glpk_link.convert_to_list tame;;

let (tame3,tame4,tame5,tame6) =
  let ord a b = if (a < b) then 1 else if (a > b) then -1 else 0 in
  let msize t = hd(uniq(List.sort ord (map List.length t))) in
  let pt = partition in
  let (t3,t_gt3) = pt (fun (_,t) -> msize t = 3) tame_list in
  let (t4,t_gt4) = pt (fun (_,t) -> msize t = 4) t_gt3 in
  let (t5,t_gt5) = pt (fun (_,t) -> msize t = 5) t_gt4 in
  let (t6,t_gt6) = pt (fun (_,t) -> msize t = 6) t_gt5 in
  let _ = t_gt6 = [] or failwith "empty list expected" in
    (t3,t4,t5,t6);;

(* based on Jan 23, 2014 values *)

let _ = 
  let _ = List.length tame3 = 9 or failwith "missing3" in
  let _ = List.length tame4 = 1251 or failwith "missing4" in
  let _ = List.length tame5 = 16080 or failwith "missing5" in
  let _ = List.length tame6 = 2373 or failwith "missing6" in
  ();;

let ml_string name ss = 
  let p = Printf.sprintf in
  let join s = Flyspeck_lib.unsplit s (fun x -> x) in
  let il s = p "[%s]" (join "," (map string_of_int s)) in
  let il2 s = p "[%s]" (join ",\n   " (map il s)) in
  let il3 s = (join ",\n\n" (map il2 s)) in
    p "val %s = [\n%s\n];" name (il3 (map snd ss));;

(*
ml_string "Tri" tame3;;

report (ml_string "Tri" tame3);;
*)


let f3_out =  Filename.temp_file "Tri" ".ML";;
let f4_out =  Filename.temp_file "Quad" ".ML";;
let f5_out =  Filename.temp_file "Pent" ".ML";;
let f6_out =  Filename.temp_file "Hex" ".ML";;

let save_out () = 
  let outfile = Flyspeck_lib.output_filestring in
  let _ = outfile f3_out (ml_string "Tri" tame3) in
  let _ = outfile f4_out (ml_string "Quad" tame4) in
  let _ = outfile f5_out (ml_string "Pent" tame5) in
  let _ = outfile f6_out (ml_string "Hex" tame6) in ();;

(* To save permanently, copy f3_out to Tri.ML etc. *)

(* RELOAD archives by converting ML to ocaml *)

let archive_dir = 
 Filename.concat (Filename.concat (flyspeck_dir) Filename.parent_dir_name) 
 "isabelle_graph/archive";;

(* translate commas to semicolons in lists.
   translate "val Tri = " to "let arc3 = " etc.
   creates arc3 = [[ ... ] ...] *)

let convert_archive filename ext =  
  let (ic,oc) = Unix.open_process(sprintf 
     "cat %s | tr 'A-Z' 'a-z'| sed 's/;/;;/g'| sed 's/,/;/g'| sed 's/val *[a-z]*/let arc%d/g' " 
     filename ext) in
  let s = Flyspeck_lib.load_and_close_channel false ic in
  let _ = Unix.close_process (ic,oc) in
  let ss = Flyspeck_lib.join_space s in
    Flyspeck_lib.eval_command ~silent:true ss;;

(*
convert_archive f3_out 3;;
arc3 = map snd tame3;;

convert_archive f3_out 3;;
arc3 = map snd tame3;;

convert_archive f3_out 3;;
arc3 = map snd tame3;;

convert_archive f6_out 6;;
arc6 = map snd tame6;;
*)


 end;;
