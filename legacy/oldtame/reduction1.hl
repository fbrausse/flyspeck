(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Tame Hypermap                                           *)
(* Author:  Thomas Hales     *)
(* Date: May 5, 2014                                                 *)
(* ========================================================================== *)

(* The main result is restricted_hypermaps_are_planegraphs_reduction1,
   One of the final reductions related to the hypermap supplement,
   relating the Bauer-Nipkow results to hypermaps.
*)

module Reduction1 = struct

open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Hypermap;;



let mem_enumAppend_pow = prove_by_refinement(
  `!us k iss nmax a. MEM a iss /\ LAST a <= HD us /\ LAST us <= nmax /\
    (!i. SUC i < sizel us ==> EL i us <= EL (SUC i) us) /\ sizel us = k /\
      ~(k=0) ==>
      MEM (cat a us) ((enumAppend nmax POWER k) iss)`,
  (* {{{ proof *)
  [
  MATCH_MP_TAC LISTR_INDUCT;
  CONJ_TAC;
    REWRITE_TAC[Seq.size;LENGTH];
    BY(MESON_TAC[]);
  REWRITE_TAC[Seq.size_rcons];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `?k'. SUC k' = k` (C SUBGOAL_THEN MP_TAC);
    TYPIFY `PRE k` EXISTS_TAC;
    BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "k";
  TYPIFY `k' =0` ASM_CASES_TAC;
    ASM_REWRITE_TAC[arith `SUC 0 = 1`];
    REWRITE_TAC[POWER_1];
    TYPIFY `sizel t = 0` (C SUBGOAL_THEN MP_TAC);
      BY(ASM_TAC THEN ARITH_TAC);
    REWRITE_TAC[Seq.size_eq0];
    DISCH_TAC THEN REPEAT (FIRST_X_ASSUM_ST `rcons` MP_TAC) THEN ASM_REWRITE_TAC[Seq.rcons;HD;LAST] THEN REPEAT WEAKER_STRIP_TAC;
    MATCH_MP_TAC mem_enumAppend;
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[Hypermap.COM_POWER];
  RULE_ASSUM_TAC(REWRITE_RULE[LAST_rcons;arith `SUC i = SUC j <=> i = j`;arith `SUC i < SUC j <=> i < j`]);
  TYPIFY `~(t = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[GSYM Seq.size_eq0] THEN ASM_REWRITE_TAC[]);
  TYPIFY `LAST (a:num list) <= HD t` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `HD` MP_TAC;
    BY(ASM_REWRITE_TAC[hd_rcons]);
  TYPIFY `LAST t <= h:num` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM (C INTRO_TAC [`PRE (sizel t)`]);
    ASM_REWRITE_TAC[];
    ANTS_TAC;
      BY(ASM_TAC THEN ARITH_TAC);
    TYPIFY `SUC (PRE k') = sizel t` (C SUBGOAL_THEN SUBST1_TAC);
      BY(ASM_TAC THEN ARITH_TAC);
    REWRITE_TAC[el_rcons_size];
    GMATCH_SIMP_TAC el_rcons;
    CONJ_TAC;
      BY(ASM_TAC THEN ARITH_TAC);
    TYPIFY `PRE k' = sizel t - 1` (C SUBGOAL_THEN SUBST1_TAC);
      BY(ASM_TAC THEN ARITH_TAC);
    REWRITE_TAC[Seq.size] THEN GMATCH_SIMP_TAC (GSYM LAST_EL);
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `MEM (cat a t) ((enumAppend nmax POWER k') iss)` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM MATCH_MP_TAC;
    ASM_REWRITE_TAC[];
    CONJ2_TAC;
      REPEAT WEAKER_STRIP_TAC;
      FIRST_X_ASSUM (C INTRO_TAC [`i`]);
      ASM_REWRITE_TAC[];
      SUBANTS_TAC;
        BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
      DISCH_TAC;
      REPEAT (GMATCH_SIMP_TAC el_rcons);
      BY(ASM_REWRITE_TAC[]);
    BY(ASM_TAC THEN ARITH_TAC);
  ONCE_REWRITE_TAC[o_THM];
  REWRITE_TAC[GSYM Seq.rcons_cat];
  REWRITE_TAC[GSYM Seq.cats1];
  MATCH_MP_TAC mem_enumAppend;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC LAST_cat;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let mem_enumerator = prove_by_refinement(
  `!xs inner outer.  
    sizel xs = inner /\ 3 <= inner /\ HD xs = 0 /\ LAST xs = outer - 1 /\
      (!i. SUC i < sizel xs ==> EL i xs <= EL (SUC i) xs) /\
      EL (inner - 2) xs <= outer - 2 ==> MEM xs (enumerator inner outer)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[enumerator;LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[MEM_MAP];
  TYPIFY `BUTLAST (TL xs)` EXISTS_TAC;
  CONJ2_TAC;
    FIRST_X_ASSUM_ST `LAST` (SUBST1_TAC o GSYM);
    TYPIFY `LAST xs  = LAST (TL xs)` (C SUBGOAL_THEN SUBST1_TAC);
      MATCH_MP_TAC LAST_TL;
      BY(ASM_TAC THEN ARITH_TAC);
    GMATCH_SIMP_TAC APPEND_BUTLAST_LAST;
    REWRITE_TAC[APPEND_SING];
    FIRST_X_ASSUM_ST `0` (SUBST1_TAC o GSYM);
    GMATCH_SIMP_TAC (GSYM CONS_HD_TL);
    TYPIFY `sizel xs = LENGTH xs` (C SUBGOAL_THEN ASSUME_TAC);
      BY(REWRITE_TAC[Seq.size]);
    TYPIFY `~(sizel xs = 0) /\ ~(LENGTH (TL xs) = 0)` (C SUBGOAL_THEN ASSUME_TAC);
      GMATCH_SIMP_TAC LENGTH_TL;
      REWRITE_TAC[GSYM Seq.size_eq0];
      BY(ASM_TAC THEN ARITH_TAC);
    BY(ASM_MESON_TAC[Seq.size_eq0;Seq.size]);
  TYPIFY `inner = 3` ASM_CASES_TAC;
    ASM_REWRITE_TAC[arith `n - n = 0`;POWER_0;I_THM];
    INTRO_TAC Basics.LENGTH3 [`xs`];
    ANTS_TAC;
      BY(ASM_MESON_TAC[Seq.size]);
    DISCH_THEN SUBST1_TAC;
    REWRITE_TAC[TL;BUTLAST;NOT_CONS_NIL];
    REWRITE_TAC[enumBase];
    REWRITE_TAC[MEM_MAP];
    REWRITE_TAC[CONS_11];
    TYPIFY `EL 1 xs` EXISTS_TAC;
    REWRITE_TAC[Tame_list.upt0;Seq.mem_iota];
    REWRITE_TAC[arith `0 <= n`];
    FIRST_X_ASSUM_ST `EL` MP_TAC THEN ASM_REWRITE_TAC[arith ` 3 - 2 = 1`];
    BY(ARITH_TAC);
  TYPIFY `sizel (BUTLAST (TL xs)) = inner - 2` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[GSYM Seq2.butlast_BUTLAST;Seq2.size_butlast];
    GMATCH_SIMP_TAC size_tail;
    BY(ASM_TAC THEN ARITH_TAC);
  INTRO_TAC CONS_HD_TL [`BUTLAST (TL xs)`];
  SUBANTS_TAC;
    REWRITE_TAC[GSYM Seq.size_eq0];
    BY(ASM_TAC THEN ARITH_TAC);
  DISCH_TAC;
  DISCH_THEN SUBST1_TAC;
  ONCE_REWRITE_TAC[GSYM Seq.cat1s];
  MATCH_MP_TAC mem_enumAppend_pow;
  nCONJ_TAC 5;
    BY(ASM_TAC THEN ARITH_TAC);
  nCONJ_TAC 4;
    GMATCH_SIMP_TAC size_tail;
    BY(ASM_TAC THEN ARITH_TAC);
  ASM_REWRITE_TAC[LAST];
  REWRITE_TAC[GSYM EL];
  REWRITE_TAC[RIGHT_AND_FORALL_THM];
  GEN_TAC;
  TYPIFY `SUC i < inner - 3 ==> SUC (SUC i) < sizel (TL xs) /\ SUC (SUC (SUC i)) < sizel (TL xs)` (C SUBGOAL_THEN ASSUME_TAC);
    DISCH_TAC;
    REPEAT (GMATCH_SIMP_TAC size_tail);
    ASM_REWRITE_TAC[];
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  ASM_SIMP_TAC[EL_BUTLAST];
  REPEAT (GMATCH_SIMP_TAC EL_BUTLAST);
  POP_ASSUM kill;
  TYPIFY_GOAL_THEN `SUC (SUC 0) < sizel (TL xs) /\  SUC 0 < sizel (TL xs)` (unlist REWRITE_TAC);
    REPEAT (GMATCH_SIMP_TAC size_tail);
    ASM_REWRITE_TAC[];
    BY(REPEAT (FIRST_X_ASSUM_ST `3` MP_TAC) THEN ARITH_TAC);
  GMATCH_SIMP_TAC (GSYM LAST_TL);
  CONJ_TAC;
    ASM_REWRITE_TAC[];
    BY(REPEAT (FIRST_X_ASSUM_ST `3` MP_TAC) THEN ARITH_TAC);
  GMATCH_SIMP_TAC LAST_EL;
  ASM_REWRITE_TAC[];
  ASM_REWRITE_TAC[lower_case];
  GMATCH_SIMP_TAC EL_BUTLAST;
  CONJ_TAC;
    GMATCH_SIMP_TAC size_tail;
    BY(ASM_REWRITE_TAC[] THEN REPEAT (FIRST_X_ASSUM_ST `3` MP_TAC) THEN ARITH_TAC);
  REWRITE_TAC[EL_TL];
  NUM_REDUCE_TAC;
  REWRITE_TAC[arith `n + 1 = SUC n`];
  TYPIFY `SUC (inner - 2 - 1) = inner - 2` (C SUBGOAL_THEN SUBST1_TAC);
    BY(FIRST_X_ASSUM_ST `3 <= inner` MP_TAC THEN ARITH_TAC);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    REWRITE_TAC[enumBase;MEM_MAP;Tame_list.upt0;Seq.mem_iota;CONS_11];
    TYPIFY `EL 1 xs` EXISTS_TAC;
    REWRITE_TAC[arith `0 <= n`];
    TYPIFY `EL 1 xs <= outer - 2` ENOUGH_TO_SHOW_TAC;
      BY(ARITH_TAC);
    INTRO_TAC f_mono_pair [`\i. EL i xs`;`sizel xs`];
    ASM_REWRITE_TAC[];
    ANTS_TAC;
      BY(ASM_MESON_TAC[]);
    DISCH_THEN (C INTRO_TAC [`inner-2`;`1`]);
    ASM_REWRITE_TAC[];
    ANTS_TAC;
      BY(FIRST_X_ASSUM_ST `3 <= inner` MP_TAC THEN ARITH_TAC);
    BY(FIRST_X_ASSUM_ST `EL (inner-2)` MP_TAC THEN ARITH_TAC);
  CONJ_TAC;
    TYPIFY `2 = SUC 1` (C SUBGOAL_THEN SUBST1_TAC);
      BY(ARITH_TAC);
    FIRST_X_ASSUM MATCH_MP_TAC;
    ASM_REWRITE_TAC[];
    BY(FIRST_X_ASSUM_ST `3 <= inner` MP_TAC THEN ARITH_TAC);
  DISCH_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  ASM_REWRITE_TAC[];
  BY(FIRST_X_ASSUM MP_TAC THEN ARITH_TAC)
   ]);;
  (* }}} *)

let iota_enumerator = prove_by_refinement(
  `!l. 3 <= l ==> MEM (iota 0 l) (enumerator (l) l)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC mem_enumerator;
  ASM_REWRITE_TAC[Seq.size_iota];
  REWRITE_TAC[GSYM EL];
  REWRITE_TAC[RIGHT_AND_FORALL_THM;LEFT_AND_FORALL_THM];
  GEN_TAC;
  GMATCH_SIMP_TAC LAST_EL;
  REWRITE_TAC[GSYM Seq.size_eq0;Seq.size_iota];
  ASM_SIMP_TAC[el_iota;arith `SUC i < l ==> i < l`;arith `3 <= l ==> 0 < l`];
  REWRITE_TAC[GSYM Seq.size;Seq.size_iota];
  ASM_SIMP_TAC[el_iota;arith `3 <= l ==> l - 1 < l`;arith `3<=l ==> l-2 < l`];
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let dart_neighbors = prove_by_refinement(
  `!g w v. 
    all (uniq) (fgraph g) /\
    good_faces_v3 g /\
    vertices_set2 g = elements_of_list (fgraph g) ==>
    (v IN (vertices_set2 g) /\
	      w IN set_of_list (neighbors g v) <=>
    MEM (v,w) (list_of_darts (fgraph g)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[IN_SET_OF_LIST;neighbors;MEM_MAP;good_faces;facesAt_v2];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[EQ_EXPAND];
  CONJ_TAC THEN REPEAT WEAKER_STRIP_TAC;
    POP_ASSUM MP_TAC;
    GMATCH_SIMP_TAC nextVertex_next_el;
    POP_ASSUM MP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`v`]) THEN ASM_REWRITE_TAC[] THEN ONCE_REWRITE_TAC[Seq.perm_eq_sym];
    DISCH_THEN (ASSUME_TAC o MATCH_MP Seq.perm_eq_mem);
    ASM_REWRITE_TAC[];
    REWRITE_TAC[MEM_FILTER];
    SIMP_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC next_el_list_pairs_eq [`v`;`FST x`];
    ASM_REWRITE_TAC[];
    ANTS_TAC;
      FIRST_X_ASSUM_ST `uniq` MP_TAC THEN REWRITE_TAC[GSYM Seq.allP;fgraph;MEM_MAP];
      DISCH_THEN MATCH_MP_TAC;
      BY(ASM_MESON_TAC[]);
    DISCH_TAC;
    MATCH_MP_TAC List_hypermap.dart_in_darts;
    REWRITE_TAC[fgraph;MEM_MAP];
    BY(ASM_MESON_TAC[]);
  TYPIFY` MEM v (list_of_elements (fgraph g))` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.mem_list_of_elements];
    BY(ASM_MESON_TAC[]);
  SUBCONJ_TAC;
    BY(ASM_REWRITE_TAC[List_hypermap.elements_of_list;IN_SET_OF_LIST]);
  TYPIFY `!x v. v IN vertices_set2 g ==> (MEM x (facesAt g v) <=> MEM x (FILTER (\f. MEM v (FST f)) (faces g)))` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`v'`]);
    ASM_REWRITE_TAC[];
    DISCH_THEN (ASSUME_TAC o MATCH_MP Seq.perm_eq_mem);
    BY(ASM_REWRITE_TAC[]);
  DISCH_TAC;
  FIRST_X_ASSUM_ST `list_of_darts` MP_TAC;
  REWRITE_TAC[Rxokskc.MEM_LIST_DARTS];
  ASM_SIMP_TAC[];
  REWRITE_TAC[MEM_FILTER;fgraph;MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `(=)` (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "x";
  TYPIFY `x'` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[List_hypermap.mem_list_pairs_exists]);
  DISCH_TAC;
  ASM_SIMP_TAC[nextVertex_next_el];
  MATCH_MP_TAC List_hypermap.mem_list_pairs_explicit;
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `all` MP_TAC THEN REWRITE_TAC[fgraph;GSYM Seq.allP];
  DISCH_THEN MATCH_MP_TAC;
  MATCH_MP_TAC MEMf_MAP;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let duplicateEdge_next = prove_by_refinement(
  `!g f v w. uniq (FST f) /\ MEM v (FST f) /\ MEM w (FST f) /\
    MEM (FST f) (fgraph g) /\
    all (uniq) (fgraph g) /\
    good_faces_v3 g /\
    vertices_set2 g = elements_of_list (fgraph g)
    ==>
    (duplicateEdge g f v w <=>
       ~(v=w) /\ ~(w = next_el (FST f) v) /\ ~(v = next_el (FST f) w) /\
    MEM (v,w) (list_of_darts (fgraph g))       
    )`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[duplicateEdge];
  REWRITE_TAC[CONJ_ASSOC];
  GMATCH_SIMP_TAC directedLength_next;
  ASM_REWRITE_TAC[];
  TYPIFY `v=w` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `~(w=next_el (FST f) v)` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `~(v=next_el (FST f) w)` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  INTRO_TAC dart_neighbors [`g`;`w`;`v`];
  ASM_REWRITE_TAC[];
  DISCH_THEN (SUBST1_TAC o GSYM);
  TYPIFY `w IN set_of_list (neighbors g v)` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  REWRITE_TAC[List_hypermap.elements_of_list;IN_SET_OF_LIST];
  REWRITE_TAC[List_hypermap.list_of_elements;Seq.mem_undup];
  BY(ASM_MESON_TAC[Seq2.mem_flatten])
  ]);;
  (* }}} *)

let containsUnacceptableEdgeSnd_explicit = prove_by_refinement(
  `!N e v. (!i. SUC i < sizel e ==> (EL i e <= EL (SUC i) e)) /\
     (~(e=[]) ==> ((v < HD e) <=> ~(v = HD e))) ==>
    (containsUnacceptableEdgeSnd N v e <=> 
    (2 <= sizel e /\ 
       (((~(v = HD e) /\ ~(HD e = EL 1 e) /\ N (HD e) (EL 1 e))) \/
    (?i. SUC (SUC i) < sizel e /\ ~(EL i e = EL (SUC i) e) /\
      ~(EL (SUC i) e = EL (SUC (SUC i)) e) /\ N (EL (SUC i) e) (EL (SUC (SUC i)) e)))))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC THEN REWRITE_TAC[containsUnacceptableEdgeSnd];
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(2 <= 0)`]);
  REPEAT WEAKER_STRIP_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[Seq2.size1;arith `~(2 <= 1)`];
  REWRITE_TAC[LET_THM;HD;EL;TL;Seq.size_cons];
  COND_CASES_TAC THEN ASM_REWRITE_TAC[EL];
    ASM_REWRITE_TAC[arith `2 <= SUC n <=> ~(n = 0)`;Seq.size_eq0];
    DISJ1_TAC;
    BY(ASM_SIMP_TAC[EL;arith `1 = SUC 0`;TL;arith `h < u:num ==> ~(h = u)`]);
  RULE_ASSUM_TAC (REWRITE_RULE[NOT_CONS_NIL;HD]);
  FIRST_X_ASSUM GMATCH_SIMP_TAC;
  ASM_REWRITE_TAC[];
  nCONJ_TAC 1;
    FIRST_X_ASSUM (C INTRO_TAC [`0`]);
    ASM_REWRITE_TAC[EL;HD;TL;Seq.size_cons;arith `SUC 0 < SUC n <=> ~(n=0)`;Seq.size_eq0];
    BY(ARITH_TAC);
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`SUC i`]);
    BY(ASM_REWRITE_TAC[EL;TL;Seq.size_cons;arith `SUC n < SUC m <=> n < m`]);
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  COMMENT "size1";
  TYPIFY `sizel t  = 1` ASM_CASES_TAC;
    ASM_REWRITE_TAC[arith `~(2 <= 1)`;arith `2 <= SUC 1`;arith `~(SUC (SUC i) < SUC 1)`];
    ASM_REWRITE_TAC[arith `1 = SUC 0`;EL;TL;HD];
    REPEAT WEAKER_STRIP_TAC;
    BY(FIRST_X_ASSUM_ST ` ( /\ )` MP_TAC THEN ASM_REWRITE_TAC[]);
  TYPIFY `2 <= sizel t` (C SUBGOAL_THEN ASSUME_TAC);
    TYPIFY `~(sizel t = 0)` (C SUBGOAL_THEN MP_TAC);
      BY(ASM_REWRITE_TAC[Seq.size_eq0]);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  TYPIFY `2 <= SUC (sizel t)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  ASM_REWRITE_TAC[];
  TYPIFY `~(h = HD t) /\ ~(HD t = EL 1 t) /\ N (HD t) (EL 1 t)` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
    DISJ2_TAC;
    TYPIFY `0` EXISTS_TAC;
    POP_ASSUM MP_TAC;
    ASM_SIMP_TAC[EL;TL;HD;arith `1 = SUC 0`];
    DISCH_TAC;
    BY(REPLICATE_TAC 3 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
  TYPIFY `(?i. SUC (SUC i) < sizel t /\      ~(EL i t = EL (SUC i) t) /\      ~(EL (SUC i) t = EL (SUC (SUC i)) t) /\      N (EL (SUC i) t) (EL (SUC (SUC i)) t))` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
    POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
    DISJ2_TAC;
    TYPIFY `SUC i` EXISTS_TAC;
    REPLICATE_TAC 3 (POP_ASSUM MP_TAC) THEN ASM_SIMP_TAC[EL;TL;HD];
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  REWRITE_TAC[DE_MORGAN_THM];
  CONJ_TAC;
    FIRST_X_ASSUM_ST `a /\ N h (HD t)` MP_TAC;
    BY(ASM_SIMP_TAC[DE_MORGAN_THM;EL;TL;arith `1 = SUC 0`;HD]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `i=0` ASM_CASES_TAC;
    POP_ASSUM (ASSUME_TAC o GSYM);
    FULL_EXPAND_TAC "i";
    FIRST_X_ASSUM_ST `N (HD t) (EL 1 t)` MP_TAC THEN REWRITE_TAC[];
    BY(REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ASM_SIMP_TAC[arith `1 = SUC 0`;HD;TL;EL]);
  TYPIFY `?j. i = SUC j` (C SUBGOAL_THEN MP_TAC);
    TYPIFY `PRE i` EXISTS_TAC;
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "i";
  FIRST_X_ASSUM_ST `?i. P i` MP_TAC THEN REWRITE_TAC[];
  TYPIFY `j` EXISTS_TAC;
  REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ASM_SIMP_TAC[HD;TL;EL];
  BY(POP_ASSUM MP_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let containsUnacceptableEdge_explicit = prove_by_refinement(
  `!N e. (!i. SUC i < sizel e ==> (EL i e <= EL (SUC i) e)) ==>
    (containsUnacceptableEdge N e <=> 
    (2 <= sizel e /\ 
       ((~(HD e = EL 1 e) /\ N (HD e) (EL 1 e)) \/
    (?i. SUC (SUC i) < sizel e /\ ~(EL i e = EL (SUC i) e) /\
      ~(EL (SUC i) e = EL (SUC (SUC i)) e) /\ N (EL (SUC i) e) (EL (SUC (SUC i)) e))))) `,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC THEN REWRITE_TAC[containsUnacceptableEdge];
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(SUC i < 0)`;arith `~(2 <= 0)`]);
  REPEAT WEAKER_STRIP_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[Seq2.size1;arith `~(2 <= 1)`];
  REWRITE_TAC[LET_THM;HD;EL;TL;Seq.size_cons];
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    CONJ_TAC;
      BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN REWRITE_TAC[GSYM Seq.size_eq0] THEN ARITH_TAC);
    DISJ1_TAC;
    ASM_REWRITE_TAC[arith `1 = SUC 0`;EL;TL;HD];
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  GMATCH_SIMP_TAC containsUnacceptableEdgeSnd_explicit;
  nCONJ_TAC 0;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [ `SUC i`]);
    BY(ASM_SIMP_TAC[EL;TL;HD;Seq.size_cons;arith `SUC m < SUC n <=> m < n`]);
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    POP_ASSUM kill;
    FIRST_X_ASSUM (C INTRO_TAC [`0`]);
    ASM_SIMP_TAC[EL;TL;HD;Seq.size_cons;arith `SUC 0 < SUC n <=> ~(n=0)`;Seq.size_eq0];
    BY(ARITH_TAC);
  DISCH_TAC;
  TYPIFY `~(2 <= SUC (sizel t))` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
    TYPIFY_GOAL_THEN `~(2 <= sizel t)` (unlist REWRITE_TAC);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  RULE_ASSUM_TAC (REWRITE_RULE[]);
  ASM_REWRITE_TAC[];
  TYPIFY `~(2 <= sizel t)` ASM_CASES_TAC;
    TYPIFY `sizel t = 1` (C SUBGOAL_THEN ASSUME_TAC);
      BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
    ASM_REWRITE_TAC[arith `~(SUC (SUC i) < SUC 1)`];
    ASM_SIMP_TAC[arith `1 = SUC 0`;EL;HD;TL];
    BY(ASM_MESON_TAC[]);
  RULE_ASSUM_TAC (REWRITE_RULE[]);
  ASM_REWRITE_TAC[];
  (FIRST_X_ASSUM_ST `containsUnacceptableEdge` kill);
  TYPIFY `~(h = HD t) /\ ~(HD t = EL 1 t) /\ N (HD t) (EL 1 t)` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
    DISJ2_TAC;
    TYPIFY `0` EXISTS_TAC;
    POP_ASSUM MP_TAC;
    ASM_SIMP_TAC[EL;TL;HD;arith `1=SUC 0`];
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  TYPIFY ` ~(h = EL 1 (h :: t)) /\ N h (EL 1 (h :: t))` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
    POP_ASSUM MP_TAC;
    ASM_SIMP_TAC[arith `1 = SUC 0`;EL;TL;HD];
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[EQ_EXPAND];
  REPEAT STRIP_TAC;
    TYPIFY `SUC i` EXISTS_TAC;
    BY(REPLICATE_TAC 3 (POP_ASSUM MP_TAC) THEN ASM_SIMP_TAC[EL;TL;HD;arith `SUC m < SUC n <=> m < n`]);
  TYPIFY `i=0` ASM_CASES_TAC;
    POP_ASSUM (ASSUME_TAC o GSYM);
    FULL_EXPAND_TAC "i";
    REPLICATE_TAC 10 (POP_ASSUM MP_TAC) THEN ASM_SIMP_TAC[arith `1 = SUC 0`;HD;TL;EL];
    BY(ASM_MESON_TAC[]);
  TYPIFY `?j. SUC j = i` (C SUBGOAL_THEN MP_TAC);
    TYPIFY `PRE i` EXISTS_TAC;
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "i";
  TYPIFY `j` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  BY(REPLICATE_TAC 10 (POP_ASSUM MP_TAC) THEN ASM_SIMP_TAC[HD;TL;EL;arith `SUC m < SUC n <=> m < n`])
  ]);;
  (* }}} *)

let showDups0_mono = prove_by_refinement(
  `!vs vs' f v w. uniq f /\ MEM v f /\
    vs' = MAP the (filter isSome vs) /\
    (!i. SUC i < sizel vs' ==> indexf v (EL i vs') f < indexf v (EL (SUC i) vs') f) /\ 
    (~(vs' = []) ==> indexf v w f <= indexf v (HD vs') f) ==>
    (!i. SUC i < sizel vs ==> 
       indexf v (EL i (showDups0 w vs)) f <= 
       indexf v (EL (SUC i) (showDups0 w vs)) f)
    `,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC THEN REWRITE_TAC[showDups0];
    REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[Seq.filter_nil];
    BY(POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[Seq.size;LENGTH;arith `~(SUC n < 0)`]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `~(t = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(FIRST_X_ASSUM_ST `SUC` MP_TAC THEN ASM_MESON_TAC[Seq.size_cons;arith `SUC i < SUC n ==> ~(n=0)`;Seq.size_eq0]);
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `MAP` MP_TAC THEN ASM_REWRITE_TAC[Seq.filter_cons;Ssrbool.isSome];
    ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN DISCH_TAC THEN FULL_EXPAND_TAC "vs'";
    TYPIFY `i=0` ASM_CASES_TAC;
      POP_ASSUM (ASSUME_TAC o GSYM) THEN FULL_EXPAND_TAC "i";
      REWRITE_TAC[EL;HD;TL];
      INTRO_TAC list_CASES [`t`] THEN ASM_REWRITE_TAC[];
      ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "t";
      REWRITE_TAC[showDups0];
      COND_CASES_TAC THEN ASM_REWRITE_TAC[HD];
        BY(ARITH_TAC);
      FIRST_X_ASSUM_ST `indexf` MP_TAC THEN REWRITE_TAC[Seq.filter_cons];
      ASM_REWRITE_TAC[not_isSome_NONE];
      GMATCH_SIMP_TAC HD_MAP;
      BY(REWRITE_TAC[MAP;HD;NOT_CONS_NIL]);
    TYPIFY `?j. SUC j = i` (C SUBGOAL_THEN MP_TAC);
      TYPIFY `PRE i` EXISTS_TAC;
      BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
    REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "i";
    REWRITE_TAC[EL;TL];
    REWRITE_TAC[GSYM EL];
    FIRST_X_ASSUM (C INTRO_TAC [`MAP the (filter isSome t)`;`f`;`v`;`w`]);
    ASM_REWRITE_TAC[];
    DISCH_THEN MATCH_MP_TAC;
    FIRST_X_ASSUM_ST `sizel` MP_TAC THEN ASM_SIMP_TAC[Seq.size_cons];
    BY((ARITH_TAC));
  FIRST_X_ASSUM_ST `MAP` MP_TAC THEN ASM_REWRITE_TAC[Seq.filter_cons;not_isSome_NONE];
  REWRITE_TAC[MAP];
  ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN DISCH_TAC THEN FULL_EXPAND_TAC "vs'";
  FIRST_X_ASSUM (C INTRO_TAC [`MAP the (filter isSome t)`;`f`;`v`;`the h`]);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    CONJ2_TAC;
      DISCH_TAC;
      (FIRST_X_ASSUM (C INTRO_TAC [`0`]));
      ASM_REWRITE_TAC[Seq.size_cons;arith `SUC 0 < SUC n <=> ~(n=0)`;Seq.size_eq0];
      REWRITE_TAC[EL;HD;TL];
      BY(ARITH_TAC);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`SUC i'`]);
    REWRITE_TAC[EL;HD;TL];
    DISCH_THEN MATCH_MP_TAC;
    ASM_REWRITE_TAC[Seq.size_cons];
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  DISCH_TAC;
  TYPIFY `i > 0` ASM_CASES_TAC;
    TYPIFY `?j. SUC j = i` (C SUBGOAL_THEN MP_TAC);
      TYPIFY `PRE i` EXISTS_TAC;
      BY(ASM_TAC THEN ARITH_TAC);
    REPEAT WEAKER_STRIP_TAC;
    FULL_EXPAND_TAC "i";
    REWRITE_TAC[EL;HD;TL];
    REWRITE_TAC[GSYM EL];
    FIRST_X_ASSUM MATCH_MP_TAC;
    REPLICATE_TAC 3 (POP_ASSUM kill);
    FIRST_X_ASSUM_ST `sizel` MP_TAC;
    BY(REWRITE_TAC[Seq.size_cons] THEN ARITH_TAC);
  TYPIFY `0=i` (C SUBGOAL_THEN ASSUME_TAC);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  FULL_EXPAND_TAC "i";
  REWRITE_TAC[EL;HD;TL];
  REPLICATE_TAC 4 (POP_ASSUM kill);
  FIRST_X_ASSUM_ST `MAP` (C INTRO_TAC [`0`]);
  REWRITE_TAC[EL;HD;TL;Seq.size_cons];
  FIRST_X_ASSUM_ST `indexf` kill;
  REWRITE_TAC[arith `SUC 0 < SUC n <=> ~(n = 0)`;Seq.size_eq0];
  DISCH_TAC;
  INTRO_TAC list_CASES [`t`] THEN ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "t";
  REWRITE_TAC[showDups0];
  COND_CASES_TAC THEN ASM_REWRITE_TAC[HD];
    BY(ARITH_TAC);
  FIRST_X_ASSUM_ST `MAP` MP_TAC;
  ASM_REWRITE_TAC[Seq.filter_cons;not_isSome_NONE;MAP;NOT_CONS_NIL];
  REWRITE_TAC[HD];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let enum_of_VertexList_mono = prove_by_refinement(
  `!vs vs' f v.  HD vs = SOME v /\
    uniq f /\ MEM v f /\
    vs' = MAP the (filter isSome vs) /\
    (!i. SUC i < sizel vs'
          ==> indexf v (EL i vs') f < indexf v (EL (SUC i) vs') f) ==>
    (!i. SUC i < sizel vs
      ==> EL i (enum_of_VertexList f v vs) <=
          EL (SUC i) (enum_of_VertexList f v vs))`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC THEN REWRITE_TAC[enum_of_VertexList];
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(SUC i < 0)`]);
  REWRITE_TAC[Seq.size_cons;showDups;showDups0];
  REPEAT WEAKER_STRIP_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[HD;not_some_none]);
  RULE_ASSUM_TAC(REWRITE_RULE[HD]);
  ASM_REWRITE_TAC[the_some];
  REPEAT (GMATCH_SIMP_TAC EL_MAP);
  ASM_REWRITE_TAC[lower_case;Seq.size_cons;size_showDups0];
  CONJ_TAC;
    BY(ASM_TAC THEN ARITH_TAC);
  REWRITE_TAC[MAP];
  TYPIFY `i=0` ASM_CASES_TAC;
    ASM_REWRITE_TAC[EL;HD;TL];
    ASM_SIMP_TAC[indexf_refl];
    BY(ARITH_TAC);
  TYPIFY `?j. SUC j = i` (C SUBGOAL_THEN MP_TAC);
    TYPIFY `PRE i` EXISTS_TAC;
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "i";
  REWRITE_TAC[EL;HD;TL];
  REWRITE_TAC[GSYM EL];
  INTRO_TAC showDups0_mono [`t`;`MAP the (filter isSome t)`;`f`;`v`;`v`];
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC indexf_refl;
  ASM_REWRITE_TAC[arith `0 <= n`];
  ANTS_TAC;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`SUC i`]);
    ASM_REWRITE_TAC[Seq.size_cons];
    ASM_REWRITE_TAC[Seq.size_cons;EL;HD;TL;MAP;Seq.filter_cons;Ssrbool.isSome];
    DISCH_THEN MATCH_MP_TAC;
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  DISCH_THEN MATCH_MP_TAC;
  BY(REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ARITH_TAC)
  ]);;
  (* }}} *)

let el_showDups0 = prove_by_refinement(
  `!t v f h j. j < sizel t /\ isSome (EL j t) ==> 
    EL j (MAP (\u. indexf v u f) (showDups0 (the h) t)) = 
      indexf v (the (EL j t)) f`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(j<0)`]);
  REWRITE_TAC[showDups0;Seq.size_cons] THEN REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM MP_TAC;
  INTRO_TAC (ONCE_REWRITE_RULE[EQ_SYM_EQ] num_CASES) [`j`];
  COND_CASES_TAC THEN ASM_REWRITE_TAC[] THEN DISCH_THEN DISJ_CASES_TAC THEN POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "j" THEN ASM_REWRITE_TAC[] THEN FIRST_X_ASSUM_ST `isSome` MP_TAC THEN SIMP_TAC[EL;TL;HD;Ssrbool.isSome;MAP];
    DISCH_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    ASM_REWRITE_TAC[];
    BY(ASM_TAC THEN ARITH_TAC);
  DISCH_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  ASM_REWRITE_TAC[];
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let el_enum_of_vertex_list = prove_by_refinement(
  `!vs f v i. i < sizel vs /\ isSome (EL i vs) ==>
    EL i (enum_of_VertexList f v vs) = indexf v (the (EL i vs)) f`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC THEN REWRITE_TAC[enum_of_VertexList];
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(i <0)`]);
  REWRITE_TAC[showDups;EL;TL;HD;Seq.size_cons;showDups0];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[COND_ID];
  INTRO_TAC num_CASES [`i`];
  DISCH_THEN DISJ_CASES_TAC;
    ASM_REWRITE_TAC[HD;EL];
    BY(ASM_REWRITE_TAC[HD;MAP;HD_MAP]);
  POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "i";
  TYPIFY `n` (RENAME_TAC "j");
  TYPIFY `EL (SUC j) (MAP (\u. indexf v u f) (if h = NONE  then the h :: showDups0 (the h) t  else the h :: showDups0 (the h) t)) = EL j  (MAP (\u. indexf v u f) (showDups0 (the h) t))` (C SUBGOAL_THEN SUBST1_TAC);
    BY(COND_CASES_TAC THEN ASM_REWRITE_TAC[HD;TL;EL;MAP]);
  REWRITE_TAC[EL;TL;MAP];
  GMATCH_SIMP_TAC el_showDups0;
  ASM_TAC THEN SIMP_TAC[EL;TL];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let showDups0_bound = prove_by_refinement(
  `!vs u v f r k.  
    k < sizel vs /\
    indexf v u f <= r /\
   (!i. i <= k /\ 
    isSome (EL i vs) ==>indexf v (the (EL i vs)) f <= r) ==>
    (!i. i <= k ==> indexf v (EL i (showDups0 u vs)) f <= r)`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(k < 0)`]);
  REWRITE_TAC[Seq.size_cons];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[showDups0];
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    INTRO_TAC num_CASES [`i`];
    DISCH_THEN DISJ_CASES_TAC;
      BY(ASM_REWRITE_TAC[HD;EL;TL]);
    ASM_REWRITE_TAC[];
    POP_ASSUM MP_TAC THEN (ONCE_REWRITE_TAC[EQ_SYM_EQ]) THEN REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "i";
    REWRITE_TAC[EL;TL];
    FIRST_X_ASSUM (C INTRO_TAC [`u`;`v`;`f`;`r`;`n`]);
    ASM_REWRITE_TAC[];
    ANTS_TAC;
      CONJ_TAC;
        BY(ASM_TAC THEN ARITH_TAC);
      REPEAT WEAKER_STRIP_TAC;
      FIRST_X_ASSUM (C INTRO_TAC [`SUC i`]);
      REWRITE_TAC[EL;TL];
      DISCH_THEN MATCH_MP_TAC;
      ASM_REWRITE_TAC[];
      BY(ASM_TAC THEN ARITH_TAC);
    DISCH_THEN MATCH_MP_TAC;
    BY(ARITH_TAC);
  INTRO_TAC num_CASES [`i`];
  DISCH_THEN DISJ_CASES_TAC;
    ASM_REWRITE_TAC[EL;HD];
    FIRST_X_ASSUM (C INTRO_TAC [`0`]);
    REWRITE_TAC[EL;HD];
    DISCH_THEN MATCH_MP_TAC;
    ASM_REWRITE_TAC[not_isSome_NONE];
    BY(ARITH_TAC);
  POP_ASSUM MP_TAC THEN ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "i";
  REWRITE_TAC[EL;TL];
  FIRST_X_ASSUM (C INTRO_TAC [`the h`;`v`;`f`;`r`;`n`]);
  ANTS_TAC;
    SUBCONJ_TAC;
      BY(ASM_TAC THEN ARITH_TAC);
    DISCH_TAC;
    CONJ_TAC;
      FIRST_X_ASSUM (C INTRO_TAC [`0`]);
      BY(ASM_REWRITE_TAC[arith `0 <= k`;EL;HD;not_isSome_NONE]);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`SUC i`]);
    ASM_SIMP_TAC[EL;TL];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_TAC THEN ARITH_TAC);
  DISCH_THEN MATCH_MP_TAC;
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let enum_bound = prove_by_refinement(
  `!vs v f r k.  
    k < sizel vs /\
    (~(vs = []) ==> (isSome (HD vs))) /\
   (!i. i <= k /\ 
    isSome (EL i vs) ==>indexf v (the (EL i vs)) f <= r) ==>
    (!i. i <= k ==> EL i (enum_of_VertexList f v vs) <= r)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[enum_of_VertexList];
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(k < 0)`]);
  REWRITE_TAC[Seq.size_cons;EL;HD;TL;showDups;NOT_CONS_NIL];
  REWRITE_TAC[not_isSome_NONE];
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC EL_MAP;
  REWRITE_TAC[lower_case];
  REWRITE_TAC[size_showDups0];
  CONJ_TAC;
    BY(ASM_TAC THEN REWRITE_TAC[Seq.size_cons] THEN ARITH_TAC);
  INTRO_TAC showDups0_bound [`h::t`;`the h`;`v`;`f`;`r`;`i`];
  ANTS_TAC;
    REWRITE_TAC[Seq.size_cons];
    SUBCONJ_TAC;
      BY(ASM_TAC THEN ARITH_TAC);
    DISCH_TAC;
    CONJ_TAC;
      FIRST_X_ASSUM (C INTRO_TAC [`0`]);
      BY(ASM_SIMP_TAC[arith `0 <= k`;EL;HD]);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    CONJ_TAC;
      BY(ASM_TAC THEN ARITH_TAC);
    BY(ASM_MESON_TAC[not_isSome_NONE]);
  DISCH_THEN MATCH_MP_TAC;
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let filter_el = prove_by_refinement(
  `!vs  f vs' i j. (vs' = filter f vs) /\
    i < j /\ j < sizel vs /\ 
       f (EL i vs) /\ f (EL j vs) ==>
    (?r s. r < s /\ s < sizel vs' /\ 
     EL i vs = EL r vs' /\ EL j vs = EL s vs')`,  
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(j < 0)`]);
  REWRITE_TAC[Seq.filter_cons;Seq.size_cons];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC num_CASES [`i`];
  ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN REPEAT STRIP_TAC THEN FULL_EXPAND_TAC "i";
    INTRO_TAC num_CASES [`j`];
    ASM_SIMP_TAC[arith `0 < j ==> ~(j=0)`];
    ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "j";
    ASM_TAC THEN REWRITE_TAC[EL;HD;TL];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `filter` MP_TAC THEN ASM_REWRITE_TAC[];
    DISCH_TAC;
    TYPIFY `0` EXISTS_TAC;
    REWRITE_TAC[EL;HD;TL];
    TYPIFY `MEM (EL n t) (filter f t)` (C SUBGOAL_THEN ASSUME_TAC);
      ASM_REWRITE_TAC[Seq.mem_filter];
      MATCH_MP_TAC MEM_EL;
      BY(REWRITE_TAC[lower_case] THEN ASM_TAC THEN ARITH_TAC);
    RULE_ASSUM_TAC(REWRITE_RULE[MEM_EXISTS_EL]);
    FIRST_X_ASSUM MP_TAC THEN REWRITE_TAC[lower_case] THEN REPEAT WEAKER_STRIP_TAC;
    TYPIFY `SUC i` EXISTS_TAC;
    ASM_REWRITE_TAC[EL;TL;Seq.size_cons];
    BY(ASM_TAC THEN ARITH_TAC);
  INTRO_TAC num_CASES [`j`];
  ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN REPEAT STRIP_TAC THEN FULL_EXPAND_TAC "j";
    BY(FIRST_X_ASSUM_ST `n < 0` MP_TAC THEN ARITH_TAC);
  RULE_ASSUM_TAC(REWRITE_RULE[EL;HD;TL]);
  FIRST_X_ASSUM (C INTRO_TAC [`f`;`filter f t`;`n`;`n'`]);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(ASM_TAC THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[EL;TL;HD];
  COND_CASES_TAC;
    GEXISTL_TAC [`SUC r`;`SUC s`];
    ASM_REWRITE_TAC[EL;TL;HD;Seq.size_cons];
    BY(ASM_TAC THEN ARITH_TAC);
  GEXISTL_TAC [`r`;`s`];
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let enum_of_VertexList_enumerator = prove_by_refinement(
  `!vs vs' f (v:A) inner outer.
    2 <= sizel vs' /\
        2 <= outer /\
    sizel vs = inner /\
    sizel f = outer /\
    vs' = MAP the (filter (isSome) vs) /\
    3 <= inner /\
    uniq f /\          MEM v f /\
    image_hideDups vs /\
    HD vs = SOME v /\
    isSome (LAST vs) /\
    (!i. SUC i < sizel vs' 
       ==> indexf v (EL i vs') f < indexf v (EL (SUC i) vs') f) /\
    indexf v (the (LAST vs)) f  = outer  - 1 /\
    all (\t. MEM t f) vs' 
  ==>
    MEM (enum_of_VertexList f v vs) (enumerator inner outer)
    `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `all (\t. MEM (the t) f) (filter isSome vs)` (C SUBGOAL_THEN ASSUME_TAC);
    TYPIFY `all (\t. MEM (the t) f) (filter isSome vs) = all (\t. MEM t f) vs'` ENOUGH_TO_SHOW_TAC;
      BY(ASM_REWRITE_TAC[]);
    FIRST_X_ASSUM kill;
    ASM_REWRITE_TAC[GSYM Seq.allP];
    ASM_REWRITE_TAC[GSYM Seq.allP;Seq.mem_filter;MEM_MAP];
    BY(ASM_MESON_TAC[]);
  MATCH_MP_TAC mem_enumerator;
  ASM_REWRITE_TAC[size_enum_of_VertexList];
  GMATCH_SIMP_TAC hd_enum_of_vertexlist;
  ASM_REWRITE_TAC[];
  INTRO_TAC enum_of_VertexList_mono [`vs`;`vs'`;`f`;`v`];
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[];
  DISCH_THEN kill;
  ASM_SIMP_TAC[GSYM Seq.size_eq0;arith `3 <= i ==> ~(i=0)`];
  SUBCONJ_TAC;
    FIRST_X_ASSUM_ST `outer-1` (SUBST1_TAC o GSYM);
    FIRST_X_ASSUM_ST `LAST` MP_TAC;
    REPEAT (GMATCH_SIMP_TAC LAST_EL) THEN REWRITE_TAC[lower_case];
    REWRITE_TAC[size_enum_of_VertexList;GSYM Seq.size_eq0];
    SUBCONJ_TAC;
      BY(ASM_TAC THEN ARITH_TAC);
    DISCH_TAC THEN ASM_REWRITE_TAC[];
    DISCH_TAC;
    GMATCH_SIMP_TAC el_enum_of_vertex_list;
    ASM_REWRITE_TAC[];
    BY(ASM_TAC THEN ARITH_TAC);
  (DISCH_TAC);
  COMMENT "last step";
  COMMENT "restarting here";
  INTRO_TAC enum_bound [`vs`;`v`;`f`;`outer - 2`;`inner- 2`];
  ASM_REWRITE_TAC[];
  REWRITE_TAC[RIGHT_IMP_FORALL_THM];
  REWRITE_TAC[IMP_IMP_THM];
  DISCH_THEN MATCH_MP_TAC;
  REWRITE_TAC[arith `n <= n:num`];
  CONJ_TAC;
    BY(FIRST_X_ASSUM_ST `3` MP_TAC THEN ARITH_TAC);
  REWRITE_TAC[Ssrbool.isSome];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC f_mono_lt_pair [`\i. indexf v (EL i vs') f`;`sizel vs'`];
  REWRITE_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  DISCH_TAC;
  COMMENT "older potential way to do it";
  MATCH_MP_TAC (arith `2 <= out /\ a < out - 1 ==> a <= out - 2`);
  ASM_REWRITE_TAC[];
  TYPIFY `~(vs = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[GSYM Seq.size_eq0;arith `3 <= i ==> ~(i=0)`]);
  TYPIFY `~(filter isSome vs = [])` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.mem_not_nil];
    TYPIFY `HD vs` EXISTS_TAC;
    REWRITE_TAC[Seq.mem_filter];
    ASM_REWRITE_TAC[Ssrbool.isSome];
    FIRST_X_ASSUM_ST `SOME v` (SUBST1_TAC o GSYM);
    BY(ASM_SIMP_TAC[MEM_HD]);
  INTRO_TAC last_filter [`isSome:(A)option -> bool`;`vs`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `LAST vs' = the (LAST (filter isSome vs))` (C SUBGOAL_THEN MP_TAC);
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC LAST_MAP;
    BY(ASM_REWRITE_TAC[]);
  DISCH_TAC;
  INTRO_TAC filter_el [`vs`;`isSome:(A)option ->bool`;`filter isSome vs`;`i`;`inner - 1`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    nCONJ_TAC 2;
      TYPIFY `EL (inner - 1) vs = LAST vs` ENOUGH_TO_SHOW_TAC;
        BY(DISCH_THEN SUBST1_TAC THEN ASM_REWRITE_TAC[]);
      BY(GMATCH_SIMP_TAC LAST_EL THEN ASM_REWRITE_TAC[lower_case]);
    ASM_REWRITE_TAC[];
    BY(FIRST_X_ASSUM_ST `3` MP_TAC THEN FIRST_X_ASSUM_ST `(<=):num->num->bool` MP_TAC THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `!i. i < sizel (filter isSome vs) ==> the (EL i (filter isSome vs)) = EL i vs'` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    GMATCH_SIMP_TAC EL_MAP;
    BY(ASM_REWRITE_TAC[lower_case]);
  FIRST_ASSUM GMATCH_SIMP_TAC;
  nCONJ_TAC 0;
    BY(REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
  nCONJ_TAC 1;
    TYPIFY `outer - 1 = indexf v (EL s vs') f` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN SUBST1_TAC;
      FIRST_X_ASSUM MATCH_MP_TAC;
      BY(ASM_REWRITE_TAC[Seq.size_map;lower_case]);
    TYPIFY `EL s vs' = the (LAST vs)` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN SUBST1_TAC;
      BY(ASM_REWRITE_TAC[]);
    TYPIFY `LAST vs = EL (inner - 1) vs` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN SUBST1_TAC;
      FIRST_X_ASSUM_ST `EL (inner - 1)` SUBST1_TAC;
      FIRST_X_ASSUM GMATCH_SIMP_TAC;
      BY(ASM_REWRITE_TAC[]);
    GMATCH_SIMP_TAC LAST_EL;
    BY(ASM_REWRITE_TAC[lower_case]);
  BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN SIMP_TAC[])
  ]);;
  (* }}} *)

(* was enum_suc_is_some *)
(* let enum_suc_is_some = 0;; *)

let showdups0_suc_is_some = prove_by_refinement(
  `!vs f v v0 i. SUC i < sizel vs /\
    ~(EL i (showDups0 v0 vs) = 
	EL (SUC i) (showDups0 v0 vs)) 
  ==> isSome (EL (SUC i) vs)`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(SUC i < 0)`]);
  REWRITE_TAC[Seq.size_cons];
  REWRITE_TAC[showDups0];
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM MP_TAC;
  TYPIFY `~(t = [])` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `sizel` MP_TAC;
    BY(REWRITE_TAC[GSYM Seq.size_eq0] THEN ARITH_TAC);
  INTRO_TAC num_CASES [`i`];
  DISCH_THEN DISJ_CASES_TAC;
    ASM_REWRITE_TAC[EL;HD;TL];
    COND_CASES_TAC THEN ASM_REWRITE_TAC[HD;TL];
      INTRO_TAC list_CASES [`t`] THEN ASM_REWRITE_TAC[];
      WEAKER_STRIP_TAC;
      POP_ASSUM MP_TAC THEN ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN DISCH_TAC THEN FULL_EXPAND_TAC "t";
      REWRITE_TAC[showDups0];
      REWRITE_TAC[HD];
      BY(MESON_TAC[HD;Tame_list.not_isSome_NONE]);
    INTRO_TAC list_CASES [`t`] THEN ASM_REWRITE_TAC[];
    WEAKER_STRIP_TAC;
    POP_ASSUM MP_TAC THEN ONCE_REWRITE_TAC[EQ_SYM_EQ] THEN DISCH_TAC THEN FULL_EXPAND_TAC "t";
    REWRITE_TAC[showDups0];
    REWRITE_TAC[HD];
    BY(MESON_TAC[HD;Tame_list.not_isSome_NONE]);
  FIRST_X_ASSUM (MP_TAC o GSYM) THEN REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "i";
  REWRITE_TAC[EL;TL];
  REWRITE_TAC[GSYM EL];
  FIRST_X_ASSUM MATCH_MP_TAC;
  TYPIFY `SUC n < sizel t` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_TAC THEN ARITH_TAC);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Seq.cons_uniq];
  ASM_SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `EL` MP_TAC THEN COND_CASES_TAC THEN ASM_REWRITE_TAC[EL;TL];
    BY(ASM_MESON_TAC[MEM]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `the h` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  ]);;
  (* }}} *)

let enum_suc_is_some = prove_by_refinement(
  `!vs f v i. SUC i < sizel vs /\
    ~(EL i (enum_of_VertexList f v vs) = 
	EL (SUC i) (enum_of_VertexList f v vs)) 
  ==> isSome (EL (SUC i) vs)`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[Seq.size;LENGTH;arith `~(SUC i < 0)`]);
  REWRITE_TAC[Seq.size_cons];
  REWRITE_TAC[enum_of_VertexList;showDups];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC showdups0_suc_is_some;
  TYPIFY `the h` EXISTS_TAC;
  SUBCONJ_TAC;
    BY(ASM_TAC THEN REWRITE_TAC[Seq.size_cons] THEN ARITH_TAC);
  DISCH_TAC;
  DISCH_TAC;
  FIRST_X_ASSUM_ST `~` MP_TAC;
  REWRITE_TAC[];
  REPEAT (GMATCH_SIMP_TAC EL_MAP);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[lower_case];
  REWRITE_TAC[size_showDups0];
  BY(REWRITE_TAC[Seq.size_cons] THEN ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let containsUnacceptableDuplicateEdge_explicit = prove_by_refinement(
  `!g f e v vs. 
    (!i. SUC i < sizel e ==> (EL i e <= EL (SUC i) e)) /\
    e = enum_of_VertexList (FST f) v vs /\
    2 <= sizel vs /\
      MEM (FST f) (fgraph g) /\
       all (uniq) (fgraph g) /\
      uniq (FST f) /\
      all (\t. MEM t (FST f)) (MAP the (filter isSome vs)) /\
      good_faces_v3 g /\
      vertices_set2 g = elements_of_list (fgraph g) /\
	HD vs = SOME v /\
	~(?i. SUC i < sizel vs /\
       isSome (EL i vs) /\ 
       isSome (EL (SUC i) vs) /\
     (let u1 = the (EL i vs) in
      let u2 = the (EL (SUC i) vs) in
	~(u1 = u2) /\
	  ~(u1 = next_el (FST f) u2) /\
	  ~(u2 = next_el (FST f) u1) /\
	  MEM (u1,u2) (list_of_darts (fgraph g)))
     )
  ==>
    (~containsUnacceptableEdge
           (\i j.
                duplicateEdge g f (nextVertices f i v) (nextVertices f j v))
           e )`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM MP_TAC;
  ASM_SIMP_TAC[containsUnacceptableEdge_explicit;size_enum_of_VertexList;GSYM EL];
  ONCE_REWRITE_TAC[DE_MORGAN_THM];
  TYPIFY `!u. isSome u /\ MEM u vs ==> MEM (the u)  (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `filter` MP_TAC;
    REWRITE_TAC[GSYM Seq.allP;MEM_MAP;Seq.mem_filter];
    BY(ASM_MESON_TAC[]);
  CONJ_TAC;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `?` MP_TAC;
    REWRITE_TAC[];
    TYPIFY `0` EXISTS_TAC;
    ASM_SIMP_TAC[arith `2 <= sizel vs ==> SUC 0 < sizel vs`];
    NUM_REDUCE_TAC;
    REPEAT LET_TAC;
    FIRST_X_ASSUM_ST `nextVertices` MP_TAC;
    REPEAT (GMATCH_SIMP_TAC el_enum_of_vertex_list);
    TYPIFY_GOAL_THEN `0 < sizel vs /\ 1 < sizel vs` (unlist REWRITE_TAC);
      BY(FIRST_X_ASSUM_ST `2` MP_TAC THEN ARITH_TAC);
    nCONJ_TAC 1;
      BY(ASM_REWRITE_TAC[ EL;Ssrbool.isSome]);
    nCONJ_TAC 0;
      REWRITE_TAC[arith `1  = SUC 0`];
      MATCH_MP_TAC enum_suc_is_some;
      GEXISTL_TAC [`FST f`;`v`];
      BY(ASM_SIMP_TAC[arith `SUC 0 = 1`;arith `2 <= s ==> 1 < s`]);
    ASM_REWRITE_TAC[];
    REPEAT (GMATCH_SIMP_TAC nextVertices_indexf);
    (GMATCH_SIMP_TAC duplicateEdge_next);
    ASM_REWRITE_TAC[];
    ASM_SIMP_TAC[];
    FULL_EXPAND_TAC "u1";
    FULL_EXPAND_TAC "u2";
    TYPIFY `v = the (EL 0 vs)` (C SUBGOAL_THEN SUBST1_TAC);
      ASM_REWRITE_TAC[EL];
      BY(ASM_REWRITE_TAC[the_some]);
    TYPIFY `MEM (EL 0 vs) vs /\ MEM (EL 1 vs) vs` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[]);
    REPEAT (GMATCH_SIMP_TAC MEM_EL);
    BY(REWRITE_TAC[lower_case] THEN FIRST_X_ASSUM_ST `2` MP_TAC THEN ARITH_TAC);
  COMMENT "last case";
  REWRITE_TAC[NOT_EXISTS_THM];
  GEN_TAC;
  FIRST_X_ASSUM_ST `~` MP_TAC;
  REWRITE_TAC[NOT_EXISTS_THM];
  DISCH_THEN (C INTRO_TAC [`SUC i`]);
  REPEAT LET_TAC;
  ASM_SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `MEM` MP_TAC;
  ASM_SIMP_TAC[];
  FIRST_X_ASSUM_ST `nextVertices` MP_TAC;
  REPEAT (GMATCH_SIMP_TAC el_enum_of_vertex_list);
  TYPIFY `SUC (SUC i) < sizel vs /\ (SUC i) < sizel vs` (C SUBGOAL_THEN ASSUME_TAC);
    BY(FIRST_X_ASSUM_ST `sizel` MP_TAC THEN ARITH_TAC);
  ASM_SIMP_TAC[];
  nCONJ_TAC 0;
    MATCH_MP_TAC enum_suc_is_some;
    GEXISTL_TAC [`FST f`;`v`];
    BY(ASM_SIMP_TAC[]);
  nCONJ_TAC 1;
    MATCH_MP_TAC enum_suc_is_some;
    GEXISTL_TAC [`FST f`;`v`];
    BY(ASM_SIMP_TAC[]);
  ASM_REWRITE_TAC[];
  REPEAT (GMATCH_SIMP_TAC nextVertices_indexf);
  (GMATCH_SIMP_TAC duplicateEdge_next);
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[];
  FULL_EXPAND_TAC "u1";
  FULL_EXPAND_TAC "u2";
  TYPIFY `v = the (EL 0 vs)` (C SUBGOAL_THEN SUBST1_TAC);
    ASM_REWRITE_TAC[EL];
    BY(ASM_REWRITE_TAC[the_some]);
  TYPIFY `isSome (EL 0 vs) /\ MEM (EL 0 vs) vs /\ MEM (EL (SUC i) vs) vs /\ MEM (EL (SUC (SUC i)) vs) vs` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  CONJ_TAC;
    BY(ASM_REWRITE_TAC[EL;Ssrbool.isSome]);
  REPEAT (GMATCH_SIMP_TAC MEM_EL);
  BY(REWRITE_TAC[lower_case] THEN ASM_REWRITE_TAC[] THEN FIRST_X_ASSUM_ST `2` MP_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

(*
let containsDuplicateEdge = prove_by_refinement(
  `!N e v vs. (!i. SUC i < sizel e ==> (EL i e <= EL (SUC i) e)) /\
  vs = indexToVertexList f v e /\ X ==>
    (~containsDuplicateEdge g f v e)`,
  (* {{{ proof *)
  [
  rt[containsDuplicateEdge]
  st/r
  ...
  ]);;
  (* }}} *)
*)

let enumeration_vertex_list_lemma = prove_by_refinement(
  `!v f g vs vs'.
    vs' = MAP the (filter (isSome) vs) /\
    HD vs' = v /\
    3 <= sizel vs /\
    2 <= sizel (FST f) /\
    HD vs = SOME v /\
    isSome (HD vs) /\
    isSome (LAST vs) /\
    2 <= sizel (MAP the (filter isSome vs)) /\
    indexf v (the (LAST vs)) (FST f) = sizel (FST f) - 1 /\
    uniq (FST f) /\
    MEM v (FST f) /\
    image_hideDups vs /\
    MEM (FST f) (fgraph g) /\
    all uniq (fgraph g) /\
    good_faces_v3 g /\
    vertices_set2 g = elements_of_list (fgraph g) /\
       all (\t. MEM t (FST f)) (MAP the (filter isSome vs)) /\
    (!i. SUC i < sizel vs' ==> 
       indexf v (EL i vs') (FST f) < indexf v (EL (SUC i) vs') (FST f)) /\
    (!i. (let d = (the (EL i vs),the (EL (SUC i) vs)) in
       isSome (EL i vs) /\ isSome (EL (SUC i) vs) /\
       SUC i < sizel vs /\ MEM d (list_of_darts (fgraph g)) ==>
	 MEM d (list_pairs (FST f))))
    ==>
    (?e. MEM e (enumerator (sizel vs) (LENGTH (FST f))) /\
       ~containsDuplicateEdge g f v e /\
       vs = indexToVertexList f v e)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `all (\t. MEM (the t) (FST f)) (filter isSome vs)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_REWRITE_TAC[GSYM all_mem_filter]);
  TYPED_ABBREV_TAC `e = enum_of_VertexList (FST f) v vs`;
  TYPIFY `e` EXISTS_TAC;
  nCONJ_TAC 2;
    FULL_EXPAND_TAC "e";
    GMATCH_SIMP_TAC indexToVertexList_enum;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    FULL_EXPAND_TAC "e";
    MATCH_MP_TAC enum_of_VertexList_enumerator;
    TYPIFY `vs'` EXISTS_TAC;
    ASM_REWRITE_TAC[GSYM Seq.size];
    BY(ASM_REWRITE_TAC[size_indexToVertexList;size_enum_of_VertexList]);
  REWRITE_TAC[containsDuplicateEdge];
  MATCH_MP_TAC containsUnacceptableDuplicateEdge_explicit;
  TYPIFY `vs` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[size_indexToVertexList];
  nCONJ_TAC 1;
    FULL_EXPAND_TAC "e";
    REWRITE_TAC[size_enum_of_VertexList];
    BY(FIRST_X_ASSUM_ST `3` MP_TAC THEN ARITH_TAC);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    FULL_EXPAND_TAC "e";
    INTRO_TAC enum_of_VertexList_mono [`vs`;`vs'`;`FST f`;`v`];
    REWRITE_TAC[size_enum_of_VertexList];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[NOT_EXISTS_THM];
  GEN_TAC;
  REPEAT LET_TAC;
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`i`]);
  LET_TAC;
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `EL` MP_TAC);
  FIRST_X_ASSUM_ST `indexToVertexList` (MP_TAC o GSYM) THEN SIMP_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `~MEM d (list_pairs (FST f))` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "d";
    DISCH_TAC;
    INTRO_TAC List_hypermap.mem_list_pairs_explicit [`u1`;`u2`;`FST f`];
    BY(ASM_REWRITE_TAC[]);
  FIRST_X_ASSUM_ST `SUC` MP_TAC THEN ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `SUC i < sizel e` MP_TAC) THEN FULL_EXPAND_TAC "e" THEN ASM_SIMP_TAC[size_enum_of_VertexList];
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "d";
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let enumeration_vertex_list = prove_by_refinement(
  `!v f g vs vs'.
    MAP the (filter (isSome) vs) = vs' /\
    3 <= sizel vs /\
    HD vs = SOME v /\
    isSome (LAST vs) /\
      prev_el (FST f) v = the (LAST vs) /\
    MEM (FST f) (fgraph g) /\
    all uniq (fgraph g) /\
    good_faces_v3 g /\
    vertices_set2 g = elements_of_list (fgraph g) /\
    all (\t. MEM t (FST f)) (MAP the (filter isSome vs)) /\
    (!i. SUC i < sizel vs' ==> 
       indexf v (EL i vs') (FST f) < indexf v (EL (SUC i) vs') (FST f)) /\
    (!i. (let d = (the (EL i vs),the (EL (SUC i) vs)) in
       isSome (EL i vs) /\ isSome (EL (SUC i) vs) /\
       SUC i < sizel vs /\ MEM d (list_of_darts (fgraph g)) ==>
	 MEM d (list_pairs (FST f))))
    ==>
    (?e. MEM e (enumerator (sizel vs) (LENGTH (FST f))) /\
       ~containsDuplicateEdge g f v e /\
       vs = indexToVertexList f v e)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC enumeration_vertex_list_lemma;
  TYPIFY `vs'` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  POP_ASSUM kill;
  REWRITE_TAC[image_hideDups];
  TYPIFY `~(vs = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[arith `3 <= s ==> ~(s = 0)`;GSYM Seq.size_eq0]);
  ASM_REWRITE_TAC[Ssrbool.isSome];
  TYPIFY `uniq (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `all uniq` MP_TAC;
    BY(REWRITE_TAC[GSYM Seq.allP] THEN ASM_MESON_TAC[]);
  nCONJ_TAC 0;
    FULL_EXPAND_TAC "vs'";
    FIRST_X_ASSUM_ST `HD` MP_TAC;
    INTRO_TAC list_CASES [`vs`] THEN ASM_REWRITE_TAC[];
    WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[Seq.filter_cons;HD];
    DISCH_THEN SUBST1_TAC;
    BY(REWRITE_TAC[Ssrbool.isSome;MAP;HD;the_some]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 3;
    FIRST_X_ASSUM_ST `all` MP_TAC THEN REWRITE_TAC[GSYM Seq.allP];
    DISCH_THEN MATCH_MP_TAC;
    TYPIFY `v = the (SOME v)` (C SUBGOAL_THEN SUBST1_TAC);
      BY(REWRITE_TAC[the_some]);
    MATCH_MP_TAC MEMf_MAP;
    REWRITE_TAC[Seq.mem_filter];
    BY(ASM_MESON_TAC[Ssrbool.isSome;MEM_HD]);
  ASM_REWRITE_TAC[];
  TYPIFY `MEM (LAST vs) vs` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[MEM_LAST]);
  nCONJ_TAC 2;
    FIRST_X_ASSUM_ST `the (LAST vs)` (SUBST1_TAC o GSYM);
    MATCH_MP_TAC indexf_prev;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC Seq2.next_prev_id;
    ASM_REWRITE_TAC[];
    BY(ASM_SIMP_TAC[Seq2.mem_prev_el]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 2;
    REWRITE_TAC[unadj_alt];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `~(EL i vs' = EL (SUC i) vs')` ENOUGH_TO_SHOW_TAC;
      FULL_EXPAND_TAC "vs'";
      REWRITE_TAC[];
      REPEAT (GMATCH_SIMP_TAC EL_MAP);
      ASM_SIMP_TAC[the_inj];
      BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN REWRITE_TAC[lower_case] THEN ARITH_TAC);
    TYPIFY `sizel vs' = sizel (filter isSome vs)` (C SUBGOAL_THEN ASSUME_TAC);
      FULL_EXPAND_TAC "vs'";
      BY(REWRITE_TAC[lower_case;Seq.size_map]);
    BY(ASM_MESON_TAC[ (arith `a < b:num ==> ~(a = b)`)]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[arith `2 <= n <=> 1 < n`];
  INTRO_TAC filter_el [`vs`;`isSome:(num)option->bool`;`filter isSome vs`;`0`;`sizel vs - 1`];
  ANTS_TAC;
    ASM_REWRITE_TAC[EL;Ssrbool.isSome];
    REWRITE_TAC[Seq.size];
    GMATCH_SIMP_TAC (GSYM LAST_EL);
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    ASM_REWRITE_TAC[GSYM Seq.size_eq0;lower_case];
    BY(FIRST_X_ASSUM_ST `3` MP_TAC THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC;
  SUBCONJ2_TAC;
    FULL_EXPAND_TAC "vs'";
    REWRITE_TAC[Seq.size_map;lower_case];
    BY(REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
  DISCH_TAC;
  (GMATCH_SIMP_TAC sizel_gt_1);
  GEXISTL_TAC [`the (EL 0 vs)`;`the (EL (sizel vs  - 1) vs)`];
  FIRST_X_ASSUM_ST `all` MP_TAC;
  REWRITE_TAC[GSYM Seq.allP;MEM_MAP];
  DISCH_THEN (REPEAT o GMATCH_SIMP_TAC);
  TYPIFY `(!(u:(num)option) xs. MEM u xs ==> (?x. MEM x xs /\ the u = the x))` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[]);
  DISCH_THEN (REPEAT o GMATCH_SIMP_TAC);
  REWRITE_TAC[Seq.mem_filter];
  REPEAT (GMATCH_SIMP_TAC mem_el_index);
  TYPIFY `EL (sizel vs - 1) vs = LAST vs` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC ( LAST_EL);
    BY(ASM_REWRITE_TAC[lower_case]);
  nCONJ_TAC 4;
    GMATCH_SIMP_TAC the_inj;
    CONJ_TAC;
      POP_ASSUM MP_TAC THEN SIMP_TAC[EL];
      BY(ASM_REWRITE_TAC[Ssrbool.isSome]);
    POP_ASSUM kill;
    INTRO_TAC f_mono_lt_pair [`\i. indexf v (EL i vs') (FST f)`;`sizel vs'`];
    ASM_REWRITE_TAC[];
    DISCH_THEN (C INTRO_TAC [`s`;`r`]);
    ASM_REWRITE_TAC[];
    FULL_EXPAND_TAC "vs'";
    ASM_REWRITE_TAC[lower_case;Seq.size_map];
    REWRITE_TAC[upper_case];
    REPEAT (GMATCH_SIMP_TAC EL_MAP);
    ASM_REWRITE_TAC[lower_case];
    CONJ_TAC;
      BY(REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `indexf` MP_TAC THEN ASM_REWRITE_TAC[];
    BY(ARITH_TAC);
  REPLICATE_TAC 2 (FIRST_X_ASSUM_ST `filter` kill);
  ASM_REWRITE_TAC[];
  ASM_REWRITE_TAC[EL;Ssrbool.isSome];
  BY(FIRST_X_ASSUM_ST `3` MP_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let generatePolygon_criteria = prove_by_refinement(
  `!v f g vs vs'.
         MAP the (filter isSome vs) = vs' /\
         3 <= sizel vs /\
         HD vs = SOME v /\
         isSome (LAST vs) /\
         prev_el (FST f) v = the (LAST vs) /\
         MEM (FST f) (fgraph g) /\
         all uniq (fgraph g) /\
	 good_faces_v3 g /\
         vertices_set2 g = elements_of_list (fgraph g) /\
         all (\t. MEM t (FST f)) (MAP the (filter isSome vs)) /\
         (!i. SUC i < sizel vs'
              ==> indexf v (EL i vs') (FST f) <
                  indexf v (EL (SUC i) vs') (FST f)) /\
         (!i. (let d = the (EL i vs),the (EL (SUC i) vs) in
              isSome (EL i vs) /\
              isSome (EL (SUC i) vs) /\
              SUC i < sizel vs /\
              MEM d (list_of_darts (fgraph g))
              ==> MEM d (list_pairs (FST f))))
         ==> (MEM (subdivFace g f vs) (generatePolygon (sizel vs) v f g) )`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC enumeration_vertex_list [`v`;`f`;`g`;`vs`;`vs'`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[generatePolygon;GSYM filter_FILTER];
  REPEAT LET_TAC;
  REWRITE_TAC[ MEM_MAP];
  FULL_EXPAND_TAC "vertexLists";
  REWRITE_TAC[MEM_MAP];
  FULL_EXPAND_TAC "enumeration'";
  REWRITE_TAC[Seq.mem_filter];
  TYPIFY `vs` EXISTS_TAC;
  REWRITE_TAC[];
  TYPIFY `e` EXISTS_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let size_rotate_to = prove_by_refinement(
  `!vs v. MEM v vs /\ uniq vs ==> sizel (rotate_to vs v) = sizel vs`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl];
  BY(REWRITE_TAC[Seq.size_rot])
  ]);;
  (* }}} *)

let all_some_generatePolygon = prove_by_refinement(
  `!v f g vs.
      MAP SOME (rotate_to (FST f) v) = vs /\
      3 <= sizel (FST f) /\
      MEM v (FST f) /\
      MEM (FST f) (fgraph g) /\
      all uniq (fgraph g) /\
      good_faces_v3 g /\
      vertices_set2 g = elements_of_list (fgraph g) 
	  ==>
	 MEM (subdivFace g f vs) (generatePolygon (sizel vs) v f g) 
	  `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC generatePolygon_criteria;
  TYPED_ABBREV_TAC `vs' = rotate_to (FST f) v`;
  TYPIFY `vs'` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  nCONJ_TAC 0;
    FULL_EXPAND_TAC "vs'";
    FULL_EXPAND_TAC "vs";
    REWRITE_TAC[lower_case;Seq.filter_map;Seq.preim];
    REWRITE_TAC[upper_case;GSYM MAP_o];
    TYPIFY `the o SOME = (I:num->num)` (C SUBGOAL_THEN SUBST1_TAC);
      BY(REWRITE_TAC[FUN_EQ_THM;I_THM;o_THM;the_some]);
    REWRITE_TAC[MAP_I;I_THM];
    REWRITE_TAC[lower_case;Seq.all_filterP];
    BY(REWRITE_TAC[GSYM Seq.allP;Ssrbool.isSome]);
  TYPIFY `uniq (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPIFY `sizel vs = sizel (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "vs";
    REWRITE_TAC[lower_case;Seq.size_map];
    FIRST_X_ASSUM_ST `MAP` kill;
    FULL_EXPAND_TAC "vs'";
    BY(ASM_SIMP_TAC[size_rotate_to]);
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `MAP` MP_TAC;
  DISCH_THEN BURY_TAC;
  TYPIFY `~(vs' = [])` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "vs'";
    REWRITE_TAC[GSYM Seq.size_eq0];
    ASM_SIMP_TAC[size_rotate_to];
    BY(FIRST_X_ASSUM_ST `3` MP_TAC THEN ARITH_TAC);
  TYPIFY `HD vs' =  v` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "vs'";
    BY(REWRITE_TAC[hd_rotate_to]);
  nCONJ_TAC 0;
    FULL_EXPAND_TAC "vs";
    GMATCH_SIMP_TAC HD_MAP;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  TYPIFY `~(vs = [])` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[GSYM Seq.size_eq0];
    BY(ASM_SIMP_TAC[arith `3 <= n ==> ~(n=0)`]);
  TYPIFY `MEM (LAST vs) vs` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[MEM_LAST]);
  nCONJ_TAC 2;
    FULL_EXPAND_TAC "vs'";
    ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl];
    BY(REWRITE_TAC[GSYM Seq.allP;Seq.mem_rot]);
  ASM_REWRITE_TAC[];
  TYPIFY `!u. MEM u vs ==> isSome u` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    POP_ASSUM MP_TAC;
    FULL_EXPAND_TAC "vs";
    BY(MESON_TAC[MEM_MAP;Ssrbool.isSome]);
  nCONJ_TAC 0;
    BY(ASM_SIMP_TAC[]);
  ASM_REWRITE_TAC[];
  TYPIFY `uniq vs'` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "vs'";
    BY(ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl;Seq.rot_uniq]);
  nCONJ_TAC 0;
    TYPIFY `prev_el (FST f) v = prev_el (vs') v` (C SUBGOAL_THEN SUBST1_TAC);
      FULL_EXPAND_TAC "vs'";
      ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl];
      BY(ASM_SIMP_TAC[ Seq2.prev_el_rot_eq]);
    FULL_EXPAND_TAC "v";
    GMATCH_SIMP_TAC Seq2.prev_el_hd;
    TYPIFY `LAST vs'` EXISTS_TAC;
    GMATCH_SIMP_TAC last_LAST;
    ASM_REWRITE_TAC[Seq.size_eq0;arith `0 < n <=> ~(n=0)`];
    FULL_EXPAND_TAC "vs";
    GMATCH_SIMP_TAC LAST_MAP;
    BY(ASM_REWRITE_TAC[the_some]);
  ASM_REWRITE_TAC[];
  TYPIFY `!i. i < sizel vs' ==> indexf v (EL i vs') (FST f) = i` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `indexf v (EL i vs') (FST f) = indexf v (EL i vs') vs'` (C SUBGOAL_THEN SUBST1_TAC);
      FULL_EXPAND_TAC "vs'";
      ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl];
      INTRO_TAC (GSYM indexf_rotn) [`indexl v (FST f)`;`v`];
      DISCH_THEN GMATCH_SIMP_TAC;
      ASM_REWRITE_TAC[];
      INTRO_TAC (GSYM Seq.mem_rot) [`indexl v (FST f)`;`FST f`];
      DISCH_THEN (unlist ONCE_REWRITE_TAC);
      GMATCH_SIMP_TAC mem_el_index;
      POP_ASSUM MP_TAC;
      BY(ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl;Seq.index_size]);
    FULL_EXPAND_TAC "v";
    GMATCH_SIMP_TAC indexf_hd;
    GMATCH_SIMP_TAC mem_el_index;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC index_el;
    BY(ASM_REWRITE_TAC[]);
  nCONJ_TAC 0;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `indexf` (REPEAT o GMATCH_SIMP_TAC);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  ASM_REWRITE_TAC[];
  COMMENT "last case";
  GEN_TAC;
  REWRITE_TAC[LET_THM] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `!i. i < sizel vs ==> the (EL i  vs) = EL i vs'` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    FULL_EXPAND_TAC "vs";
    GMATCH_SIMP_TAC EL_MAP;
    REWRITE_TAC[the_some];
    BY(POP_ASSUM MP_TAC THEN SIMP_TAC[lower_case;Seq.size_map]);
  POP_ASSUM (REPEAT o GMATCH_SIMP_TAC);
  ASM_SIMP_TAC[arith `SUC i < n ==> i < n`];
  TYPIFY_GOAL_THEN `!d. MEM d (list_pairs (FST f)) <=> MEM d (list_pairs vs')` (unlist REWRITE_TAC);
    GEN_TAC;
    FULL_EXPAND_TAC "vs'";
    ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl];
    REWRITE_TAC[GSYM List_hypermap.rot_list_pairs];
    BY(REWRITE_TAC[Seq.mem_rot]);
  TYPIFY `sizel vs' = sizel vs` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "vs";
    BY(REWRITE_TAC[lower_case;Seq.size_map]);
  TYPIFY `EL (SUC i) vs' = next_el vs' (EL i vs')` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN SUBST1_TAC;
    MATCH_MP_TAC next_el_list_pairs_eq;
    ASM_REWRITE_TAC[];
    MATCH_MP_TAC MEM_EL;
    BY(ASM_SIMP_TAC[lower_case;arith `SUC i < n ==> i < n`]);
  GMATCH_SIMP_TAC next_el_el;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let mem_rotate_to2 = prove_by_refinement(
  `!vs v u. MEM v vs /\ uniq vs ==> (MEM u vs <=> MEM u (rotate_to vs v))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl];
  BY(REWRITE_TAC[Seq.mem_rot])
  ]);;
  (* }}} *)

let rotate_subdivFace0_alt = prove_by_refinement(
  `!k vs v f g.
         0 < k /\ k <= sizel (FST f) /\
         dropl (sizel (FST f) - k) (MAP SOME (rotate_to (FST f) v)) = vs /\
         3 <= sizel (FST f) /\
         MEM v (FST f) /\
         MEM (FST f) (fgraph g) /\
         all uniq (fgraph g) 
        ==>
     (f,g) = subdivFace0_alt g f (the (HD vs)) 0 (TL vs)`,
  (* {{{ proof *)
  [
  INDUCT_TAC;
    BY(REWRITE_TAC[arith `~(0 < 0)`]);
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  TYPED_ABBREV_TAC `rs = MAP SOME (rotate_to (FST f) v)`;
  TYPIFY `uniq (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPIFY `sizel rs = sizel (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "rs";
    REWRITE_TAC[lower_case;Seq.size_map];
    BY(ASM_SIMP_TAC[size_rotate_to]);
  INTRO_TAC (GSYM num_CASES) [`k`];
  REPEAT STRIP_TAC THEN FULL_EXPAND_TAC "k";
    TYPIFY `TL vs = []` ENOUGH_TO_SHOW_TAC;
      BY(DISCH_TAC THEN ASM_REWRITE_TAC[subdivFace0_alt]);
    FULL_EXPAND_TAC "vs";
    GMATCH_SIMP_TAC tl_drop;
    REWRITE_TAC[drop_drop];
    ASM_REWRITE_TAC[drop_eq_nil];
    BY(FIRST_X_ASSUM_ST `3` MP_TAC THEN ARITH_TAC);
  TYPIFY `TL vs = dropl (sizel (FST f) - (SUC n)) rs` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC tl_drop;
    FULL_EXPAND_TAC "vs";
    REWRITE_TAC[drop_drop];
    ASM_REWRITE_TAC[drop_eq_nil];
    ASM_SIMP_TAC[arith `3 <= n ==> ~(n <= n - SUC (SUC i))`];
    REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
    FIRST_X_ASSUM_ST `3` MP_TAC;
    FIRST_X_ASSUM_ST `SUC (SUC n) <= m` MP_TAC;
    BY(ARITH_TAC);
  ASM_REWRITE_TAC[];
  TYPED_ABBREV_TAC `vs' = dropl (sizel (FST f) - SUC n) rs`;
  FIRST_X_ASSUM (C INTRO_TAC [`vs'`;`v`;`f`;`g`]);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(FIRST_X_ASSUM_ST `SUC (SUC n) <= m` MP_TAC THEN ARITH_TAC);
  DISCH_TAC;
  INTRO_TAC (list_CASES) [`vs'`];
  REPEAT STRIP_TAC;
    BY(ASM_REWRITE_TAC[subdivFace0_alt]);
  POP_ASSUM (ASSUME_TAC o GSYM) THEN FULL_EXPAND_TAC "vs'";
  (REWRITE_TAC[subdivFace0_alt]);
  TYPIFY `isSome h /\ nextVertex f (the (HD vs)) = the h` ENOUGH_TO_SHOW_TAC;
    SIMP_TAC[not_isSome_NONE];
    REWRITE_TAC[LET_THM];
    DISCH_TAC;
    BY(ASM_REWRITE_TAC[HD;TL]);
  GMATCH_SIMP_TAC nextVertex_next_el;
  TYPIFY `HD (TL vs) = h` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_REWRITE_TAC[HD]);
  FULL_EXPAND_TAC "h";
  REWRITE_TAC[GSYM EL];
  FULL_EXPAND_TAC "vs";
  REPEAT (GMATCH_SIMP_TAC el_drop);
  TYPIFY `!i. i < sizel (FST f) ==> EL i rs = SOME (EL i (rotate_to (FST f) v))` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    REPLICATE_TAC 4 (FIRST_X_ASSUM_ST `HD` kill);
    FULL_EXPAND_TAC "rs";
    GMATCH_SIMP_TAC EL_MAP;
    BY(ASM_SIMP_TAC[lower_case;size_rotate_to]);
  FIRST_X_ASSUM (REPEAT o GMATCH_SIMP_TAC);
  ASM_REWRITE_TAC[the_some;Ssrbool.isSome];
  REPLICATE_TAC 5 (POP_ASSUM kill);
  TYPIFY `MEM (EL (0 + sizel (FST f) - SUC (SUC n)) (rotate_to (FST f) v)) (rotate_to (FST f) v)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEM_EL;
    ASM_SIMP_TAC[lower_case;size_rotate_to];
    BY(ASM_TAC THEN ARITH_TAC);
  FIRST_ASSUM MP_TAC;
  GMATCH_SIMP_TAC (GSYM mem_rotate_to2);
  ASM_SIMP_TAC[];
  TYPIFY `next_el (FST f) = next_el (rotate_to (FST f) v)` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[FUN_EQ_THM];
    ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl];
    BY(ASM_SIMP_TAC[Seq2.next_el_rot_eq]);
  DISCH_TAC;
  GMATCH_SIMP_TAC next_el_el;
  REWRITE_TAC[];
  ASM_SIMP_TAC[size_rotate_to];
  REWRITE_TAC[arith `SUC (0 + n) = SUC 0 + n`];
  ASM_SIMP_TAC[Pwssrat.rotate_rot_indexl;Seq.rot_uniq];
  BY(FIRST_X_ASSUM_ST `SUC (SUC n) <= m` MP_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let rotate_subdivFaceFinal = prove_by_refinement(
  `!vs v f g. (MAP SOME (rotate_to (FST f) v)) = vs /\
         3 <= sizel (FST f) /\
         MEM v (FST f) /\
         MEM (FST f) (fgraph g) /\
         all uniq (fgraph g)
         ==> 
   subdivFaceFinal g f vs = makeFaceFinal f g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[subdivFaceFinal];
  REPEAT WEAKER_STRIP_TAC;
  REPEAT LET_TAC;
  POP_ASSUM MP_TAC;
  GMATCH_SIMP_TAC (GSYM rotate_subdivFace0_alt);
  SIMP_TAC[PAIR_EQ];
  GEXISTL_TAC [`sizel (FST f)`;`v`];
  ASM_REWRITE_TAC[];
  BY(ASM_SIMP_TAC[arith `3 <= n ==> 0 < n`;arith `n <= n:num`;arith `n - n = 0`;Seq.drop0])
  ]);;
  (* }}} *)

let subdivFace0_final = prove_by_refinement(
  `!vos f g n hh. ( \ (f,g). makeFaceFinal f g) 
    (subdivFace0_alt g f hh n vos) = 
    subdivFace0 g f hh n vos`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC THEN REWRITE_TAC[subdivFace0;subdivFace0_alt];
  REPEAT WEAKER_STRIP_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
  REPEAT LET_TAC;
  BY(COND_CASES_TAC THEN ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let subdivFaceFinal_eq = prove_by_refinement(
  `!vos g f. ~(vos = []) ==> subdivFace g f vos = subdivFaceFinal g f vos`,
  (* {{{ proof *)
  [
  REWRITE_TAC[subdivFaceFinal;subdivFace;LET_THM];
  GEN_TAC;
  REWRITE_TAC[RIGHT_FORALL_IMP_THM];
  DISCH_TAC;
  TYPIFY `?h vos'. vos = h::vos'` (C SUBGOAL_THEN MP_TAC);
    BY(ASM_MESON_TAC[list_CASES]);
  WEAKER_STRIP_TAC;
  BY(ASM_REWRITE_TAC[HD;TL;subdivFace0_final])
  ]);;
  (* }}} *)

let mem_makeFaceFinal_generatePolygon = prove_by_refinement(
  `!f g v. 3 <= sizel (FST f) /\ MEM v (FST f) /\
         MEM (FST f) (fgraph g) /\
         all uniq (fgraph g) /\
	 good_faces_v3 g /\
	 vertices_set2 g = elements_of_list (fgraph g)    
      ==>
      MEM (makeFaceFinal f g) (generatePolygon (sizel (FST f)) v f g)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `vs = MAP SOME (rotate_to (FST f) v)`;
  INTRO_TAC (GSYM rotate_subdivFaceFinal) [`vs`;`v`;`f`;`g`];
  ASM_SIMP_TAC[];
  DISCH_THEN kill;
  GMATCH_SIMP_TAC (GSYM subdivFaceFinal_eq);
  ONCE_REWRITE_TAC[EQ_SYM_EQ];
  TYPIFY `uniq (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPIFY `sizel vs = sizel (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "vs";
    REWRITE_TAC[Seq.size_map;lower_case];
    BY(ASM_SIMP_TAC[ size_rotate_to]);
  ASM_SIMP_TAC[GSYM Seq.size_eq0];
  ASM_SIMP_TAC[arith `3 <= n ==> ~(n=0)`];
  FIRST_ASSUM (SUBST1_TAC o GSYM);
  MATCH_MP_TAC all_some_generatePolygon;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

(* if vs = full face, then MEM subdiv generatePolygon,
     and subdivFace = mk1face final on g. *)

let oldvertex = prove_by_refinement(
  `!L N g.
    good_list L /\
    normal_list L N /\
    match_quotient_list g L N /\
    vertices_set2 g = elements_of_list (fgraph g) ==>
    set_of_list (MAP FST (flatten N)) = vertices_set2 g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list];
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  BY(ASM_SIMP_TAC[quotient_list_elements])
  ]);;
  (* }}} *)

let set_of_list_newvertex = prove_by_refinement(
  `!L r x. good_list L /\ 
    MEM x (list_of_darts L) ==>
    set_of_list (newvertex L r x) = 
    IMAGE FST { t | MEM t (find_face L x) /\ ~MEM t r}`,
  (* {{{ proof *)
  [
  REWRITE_TAC[newvertex;LET_THM;EXTENSION;IN_SET_OF_LIST];
  REWRITE_TAC[MEM_MAP;IN_IMAGE;IN_ELIM_THM];
  REWRITE_TAC[Seq.mem_filter];
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC Pwssrat.rotate_rot_indexl;
  REWRITE_TAC[Seq.mem_rot];
  CONJ2_TAC;
    BY(MESON_TAC[]);
  ASM_REWRITE_TAC[GSYM List_hypermap.dart_in_face];
  MATCH_MP_TAC List_hypermap.uniq_find_face;
  BY(ASM_MESON_TAC[good_list])
  ]);;
  (* }}} *)

let oldnew_vertex_disjoint = prove_by_refinement(
  `!L N r x. good_list L /\
    good_list_nodes L /\
    transform_assumption_v2 L /\
    marked_list L N r x 
    ==>
    set_of_list (MAP FST (flatten N)) INTER set_of_list (newvertex L r x)
    = {}`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC set_of_list_newvertex;
  ASM_REWRITE_TAC[EXTENSION;IN_IMAGE;IN_ELIM_THM;IN_SET_OF_LIST;IN_INTER;NOT_IN_EMPTY];
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[Pplhulj.marked_list_of_dart]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM x'' (flatten N)` (C SUBGOAL_THEN ASSUME_TAC);
    PROOF_BY_CONTR_TAC;
    FIRST_X_ASSUM_ST `MAP` MP_TAC;
    ASM_REWRITE_TAC[MEM_MAP;Seq2.mem_flatten];
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC MEM_hypermap_of_list_node [`L`;`x''`;`x'''`];
    SUBANTS_TAC;
      ASM_REWRITE_TAC[];
      MATCH_MP_TAC List_hypermap.mem_find_face_imp_mem_darts;
      BY(ASM_MESON_TAC[]);
    DISCH_TAC;
    ASM_REWRITE_TAC[];
    TYPIFY `normal_list L N` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[marked_list]);
    TYPIFY `MEM x''' (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
      FIRST_ASSUM_ST `normal_list` (ASSUME_TAC o MATCH_MP normal_list_list_of_darts);
      BY(ASM_MESON_TAC[Seq.allP;Seq2.mem_flatten]);
    ASM_REWRITE_TAC[];
    DISCH_TAC;
    FIRST_ASSUM_ST `normal_list` MP_TAC;
    REWRITE_TAC[normal_list];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `x'' IN node (hypermap_of_list L) x'''` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[lemma_node_identity;node_refl]);
    FIRST_X_ASSUM (C INTRO_TAC [`x'''`]);
    ANTS_TAC;
      BY(ASM_MESON_TAC[Seq2.mem_flatten]);
    REWRITE_TAC[SUBSET;IN_SET_OF_LIST;Seq2.mem_flatten];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`x''`]);
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[Seq2.mem_flatten]);
  INTRO_TAC Obdatyb.OBDATYB [`L`;`N`;`r`;`x`;`x''`];
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let vertices_normal_list = prove_by_refinement(
  `!g L N. good_list L /\ normal_list L N /\
    match_quotient_list g L N /\
    vertices_set2 g = elements_of_list (fgraph g) ==>
     (set_of_list (MAP FST (flatten N))) = 
	set_of_list (iota 0 (countVertices g))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list];
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC (GSYM quotient_list_elements);
  TYPIFY `L` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `quotient_list` (SUBST1_TAC o GSYM);
  FIRST_X_ASSUM (SUBST1_TAC o GSYM);
  REWRITE_TAC[vertices_set2;vertices_graph;upt0];
  ]);;
  (* }}} *)

(* was card_vertices_set2 *)
(* let card_vertices_set2 = 0;; *)

let card_vertices_normal_list = prove_by_refinement(
  `!g L N. good_list L /\ normal_list L N /\
    match_quotient_list g L N /\
    vertices_set2 g = elements_of_list (fgraph g) ==>
    CARD (set_of_list (MAP FST (flatten N))) = countVertices g`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC vertices_normal_list;
  TYPIFY `g` EXISTS_TAC THEN ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(ASM_MESON_TAC[]);
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  BY(REWRITE_TAC[Seq.size_iota;Seq.iota_uniq])
  ]);;
  (* }}} *)

let simple_list = prove_by_refinement(
  `!L u v x. 
    good_list L /\
    good_list_nodes L /\
    MEM x (list_of_darts L) /\
    MEM u (find_face L x) /\ MEM v (find_face L x) /\
    FST u = FST v /\
    all uniq L  ==>
    u = v`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC good_face_rep [`L`;`find_face L x`];
  ANTS_TAC;
    ASM_SIMP_TAC[simple_hypermap_uniq];
    MATCH_MP_TAC List_hypermap.mem_find_face;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of_unique [`L`;`f0`;`FST u`;`u`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    FULL_EXPAND_TAC "f0";
    CONJ_TAC;
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    CONJ_TAC;
      BY(ASM_MESON_TAC[List_hypermap.mem_find_face_imp_mem_darts]);
    TYPIFY `find_face L x = find_face L u` (C SUBGOAL_THEN SUBST1_TAC);
      ONCE_REWRITE_TAC[EQ_SYM_EQ];
      MATCH_MP_TAC List_hypermap.mem_find_face_imp_faces_eq;
      ASM_REWRITE_TAC[];
      BY(ASM_MESON_TAC[good_list]);
    BY(REWRITE_TAC[List_hypermap.find_face_alt;fst_list_pairs]);
  INTRO_TAC dart_of_unique [`L`;`f0`;`FST v`;`v`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    FULL_EXPAND_TAC "f0";
    CONJ_TAC;
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    CONJ_TAC;
      BY(ASM_MESON_TAC[List_hypermap.mem_find_face_imp_mem_darts]);
    TYPIFY `find_face L x = find_face L v` (C SUBGOAL_THEN SUBST1_TAC);
      ONCE_REWRITE_TAC[EQ_SYM_EQ];
      MATCH_MP_TAC List_hypermap.mem_find_face_imp_faces_eq;
      ASM_REWRITE_TAC[];
      BY(ASM_MESON_TAC[good_list]);
    BY(REWRITE_TAC[List_hypermap.find_face_alt;fst_list_pairs]);
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let newvertex_uniq = prove_by_refinement(
  `!L r x. MEM x (list_of_darts L) /\
    good_list L /\
    good_list_nodes L /\
    all uniq L
  ==> uniq (newvertex L r x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[newvertex;LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `uniq (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[good_list]);
  MATCH_MP_TAC uniq_map;
  GMATCH_SIMP_TAC Seq.filter_uniq;
  REWRITE_TAC[Seq.mem_filter];
  REPEAT (GMATCH_SIMP_TAC Pwssrat.rotate_rot_indexl);
  REWRITE_TAC[Seq.mem_rot;Seq.rot_uniq];
  ASM_REWRITE_TAC[GSYM List_hypermap.dart_in_face];
  ASM_SIMP_TAC[List_hypermap.uniq_find_face];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC simple_list;
  GEXISTL_TAC [`L`;`x`];
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let rotate_to_map = prove_by_refinement(
  `!phi f x. uniq f /\ MEM x f /\ inj_on phi (set_of_list f) ==>
    rotate_to (MAP phi f) (phi x) = MAP phi (rotate_to f x)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REPEAT (GMATCH_SIMP_TAC Pwssrat.rotate_rot_indexl);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    CONJ_TAC;
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    REWRITE_TAC[lower_case];
    GMATCH_SIMP_TAC Seq.map_inj_in_uniq;
    ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `inj_on` MP_TAC THEN REWRITE_TAC[inj_on;IN_ELIM_SET_OF_LIST];
    BY(ASM_MESON_TAC[]);
  GMATCH_SIMP_TAC indexl_map;
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(ASM_MESON_TAC[inj_on;IN_ELIM_SET_OF_LIST]);
  BY(REWRITE_TAC[lower_case;Seq.map_rot])
  ]);;
  (* }}} *)

let map_newvertex = prove_by_refinement(
  `!phi L r x. 
    good_list L /\
    MEM x (list_of_darts L) /\
    (set_of_list r SUBSET (darts_of_list L)) /\
    inj_on phi (elements_of_list L) ==>
    newvertex (MAP (MAP phi) L) 
    (MAP (\x. (phi (FST x)), (phi (SND x))) r)  (phi (FST x), phi (SND x)) 
      = MAP phi (newvertex L r x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[newvertex];
  REWRITE_TAC[LET_THM;GSYM MAP_o];
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC find_face_map;
  ASM_REWRITE_TAC[];
  INTRO_TAC (rotate_to_map) [`\d. phi (FST d),phi (SND d)`;`find_face L x`;`x`];
  REWRITE_TAC[];
  DISCH_THEN GMATCH_SIMP_TAC;
  GMATCH_SIMP_TAC List_hypermap.uniq_find_face;
  REWRITE_TAC[GSYM List_hypermap.dart_in_face];
  INTRO_TAC inj_on_dart_of_list [`phi`;`L`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  CONJ_TAC;
    BY(ASM_MESON_TAC[good_list]);
  CONJ_TAC;
    MATCH_MP_TAC inj_on_subset;
    TYPIFY `darts_of_list L` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[SUBSET;IN_SET_OF_LIST;List_hypermap.darts_of_list];
    BY(ASM_MESON_TAC[List_hypermap.mem_find_face_imp_mem_darts]);
  REWRITE_TAC[lower_case;Seq.filter_map;Seq.preim];
  TYPED_ABBREV_TAC `l = rotate_to (find_face L x) x`;
  TYPIFY `filter  (\x. ~MEM (phi (FST x),phi (SND x)) (map (\x. phi (FST x),phi (SND x)) r)) l = filter (\d. ~MEM d r) l` (C SUBGOAL_THEN SUBST1_TAC);
    MATCH_MP_TAC (REWRITE_RULE[IMP_IMP_THM] Seq.eq_in_filter);
    REWRITE_TAC[upper_case];
    REPEAT WEAKER_STRIP_TAC;
    REWRITE_TAC[EQ_EXPAND];
    REPEAT STRIP_TAC;
      FIRST_X_ASSUM_ST `MAP` MP_TAC;
      REWRITE_TAC[];
      TYPIFY `phi (FST x'),phi (SND x') = (\x. phi (FST x),phi (SND x)) x'` (C SUBGOAL_THEN SUBST1_TAC);
        BY(REWRITE_TAC[]);
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    POP_ASSUM MP_TAC;
    REWRITE_TAC[MEM_MAP];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `inj_on` MP_TAC;
    REWRITE_TAC[inj_on];
    DISCH_THEN (C INTRO_TAC [`x'`;`x''`]);
    ASM_REWRITE_TAC[];
    DISCH_THEN MP_TAC THEN ANTS_TAC;
      CONJ_TAC;
        REWRITE_TAC[List_hypermap.darts_of_list;IN_ELIM_SET_OF_LIST];
        REPLICATE_TAC 3 (FIRST_X_ASSUM_ST `MEM` MP_TAC);
        FULL_EXPAND_TAC "l";
        GMATCH_SIMP_TAC Pwssrat.rotate_rot_indexl;
        REWRITE_TAC[Seq.mem_rot];
        CONJ_TAC;
          GMATCH_SIMP_TAC List_hypermap.uniq_find_face;
          CONJ_TAC;
            BY(ASM_MESON_TAC[good_list]);
          BY(ASM_REWRITE_TAC[GSYM List_hypermap.dart_in_face]);
        BY(ASM_MESON_TAC[List_hypermap.mem_find_face_imp_mem_darts]);
      FIRST_X_ASSUM_ST `SUBSET` MP_TAC THEN REWRITE_TAC[SUBSET;IN_SET_OF_LIST];
      BY(ASM_MESON_TAC[IN]);
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[upper_case;GSYM MAP_o];
  MATCH_MP_TAC MAP_EQ;
  BY(REWRITE_TAC[lower_case;GSYM Seq.allP;o_THM])
  ]);;
  (* }}} *)

let match_quotient_list_map = prove_by_refinement(
  `!g L N f. 
   is_edge_nondegenerate (hypermap_of_list L) /\
    all uniq L /\
    good_list L /\ normal_list L N /\
   (!x. MEM x (MAP FST (flatten N)) ==> f x = x) /\
    inj_on f (elements_of_list L) ==>
    match_quotient_list g (MAP (MAP f) L) (MAP (MAP (\u. f (FST u),f (SND u))) N) = match_quotient_list g L N`,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `iso_list (L,N) (MAP (MAP f) L, (MAP (MAP (\u. f (FST u),f (SND u))) N))` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[iso_list];
    BY(TYPIFY `f` EXISTS_TAC THEN ASM_REWRITE_TAC[]);
  TYPIFY `(filter (final_list (MAP (MAP f) L)) (MAP (MAP (\u. f (FST u),f (SND u))) N)) = MAP (MAP (\u. f (FST u),f (SND u)) ) (filter (final_list L) N)` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[Seq.filter_map;lower_case;Seq.preim];
    AP_TERM_TAC;
    MATCH_MP_TAC (REWRITE_RULE[IMP_IMP_THM] Seq.eq_in_filter);
    REWRITE_TAC[upper_case];
    GEN_TAC;
    DISCH_TAC;
    INTRO_TAC iso_list_final_list_eq [`L`;`MAP (MAP f) L`;`N`;`MAP (MAP (\u. f (FST u),f (SND u))) N`;`x`;`(MAP (\u. f (FST u),f (SND u)) x)`];
    DISCH_THEN MATCH_MP_TAC;
    ASM_REWRITE_TAC[iso_list;CONS_11];
    BY(TYPIFY `f` EXISTS_TAC THEN ASM_REWRITE_TAC[CONS_11;MAP]);
  TYPIFY `quotient_list (MAP (MAP f) L) (MAP (MAP (\u. f (FST u),f (SND u))) N) = quotient_list L N` (C SUBGOAL_THEN SUBST1_TAC);
    INTRO_TAC isop_list_quotient [`f`;`L`;`N`;`MAP (MAP f) L`;`MAP (MAP (\u. f (FST u),f (SND u))) N`];
    ASM_REWRITE_TAC[];
    ANTS_TAC;
      BY(ASM_REWRITE_TAC[isop_list]);
    ASM_REWRITE_TAC[isop_list];
    DISCH_THEN (unlist REWRITE_TAC);
    TYPIFY `MAP (MAP f) (quotient_list L N) = MAP I (quotient_list L N)` (C SUBGOAL_THEN SUBST1_TAC);
      MATCH_MP_TAC MAP_EQ;
      REWRITE_TAC[lower_case;GSYM Seq.allP;I_THM];
      REPEAT WEAKER_STRIP_TAC;
      TYPIFY `MAP f x = MAP I x` ENOUGH_TO_SHOW_TAC;
        BY(SIMP_TAC[MAP_I;I_THM;upper_case]);
      MATCH_MP_TAC MAP_EQ;
      REWRITE_TAC[lower_case;GSYM Seq.allP;I_THM];
      X_GENv_TAC "d";
      DISCH_TAC;
      TYPIFY `d IN (elements_of_list (quotient_list L N))` (C SUBGOAL_THEN ASSUME_TAC);
        REWRITE_TAC[List_hypermap.elements_of_list;List_hypermap.list_of_elements;IN_SET_OF_LIST;Seq.mem_undup;Seq2.mem_flatten];
        BY(ASM_MESON_TAC[]);
      FIRST_X_ASSUM MP_TAC;
      GMATCH_SIMP_TAC quotient_list_elements;
      ASM_REWRITE_TAC[];
      BY(ASM_REWRITE_TAC[IN_SET_OF_LIST]);
    BY(REWRITE_TAC[I_THM;MAP_I]);
  TYPIFY `fgraph g = quotient_list L N` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `(MAP (MAP (\u. f (FST u),f (SND u))) (filter (final_list L) N)) = MAP I (filter (final_list L) N)` (C SUBGOAL_THEN MP_TAC);
    MATCH_MP_TAC MAP_EQ;
    REWRITE_TAC[lower_case;GSYM Seq.allP];
    REPEAT WEAKER_STRIP_TAC;
    ONCE_REWRITE_TAC[GSYM MAP_I];
    REWRITE_TAC[upper_case];
    MATCH_MP_TAC MAP_EQ;
    REWRITE_TAC[lower_case;GSYM Seq.allP;I_THM];
    X_GENv_TAC "d";
    DISCH_TAC;
    INTRO_TAC final_list_snd_is_fst [`L`;`N`;`x`;`d`];
    ASM_REWRITE_TAC[];
    ANTS_TAC;
      BY(FIRST_X_ASSUM_ST `filter` MP_TAC THEN REWRITE_TAC[Seq.mem_filter]);
    DISCH_TAC;
    REWRITE_TAC[PAIR_EQ2];
    CONJ2_TAC;
      BY(ASM_MESON_TAC[]);
    FIRST_X_ASSUM MATCH_MP_TAC;
    MATCH_MP_TAC MEMf_MAP;
    REWRITE_TAC[Seq2.mem_flatten];
    TYPIFY `x` EXISTS_TAC;
    BY(ASM_MESON_TAC[Seq.mem_filter]);
  REWRITE_TAC[MAP_I;I_THM];
  DISCH_THEN SUBST1_TAC;
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let iso_list_newvertex_lemma = prove_by_refinement(
  `!L N r x g. 
    good_list L /\
    is_edge_nondegenerate (hypermap_of_list L) /\
    all uniq L /\
    good_list_nodes L /\
    transform_assumption_v2 L /\
    marked_list L N r x /\
    match_quotient_list g L N /\
    vertices_set2 g = elements_of_list (fgraph g) 
   ==>
    (?L' N' r' x'. 
         iso_list (L,([x]::r::N)) (L',([x']::r'::N')) /\
	 match_quotient_list g L' N' /\
	 newvertex_prepped L' N' r' x')
    `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `normal_list L N` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_list]);
  INTRO_TAC oldnew_vertex_disjoint [`L`;`N`;`r`;`x`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  REWRITE_TAC[iso_list];
  TYPED_ABBREV_TAC `s1 = set_of_list (MAP FST (flatten N))`;
  TYPED_ABBREV_TAC `s2 = set_of_list (newvertex L r x)`;
  TYPED_ABBREV_TAC `s3 = elements_of_list L DIFF (s1 UNION s2)`;
  TYPIFY `s1 INTER s3 = {} /\ s2 INTER s3 = {}` (C SUBGOAL_THEN ASSUME_TAC);
    BY(POP_ASSUM MP_TAC THEN SET_TAC[]);
  TYPIFY `s1 SUBSET (elements_of_list L)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "s1";
    GMATCH_SIMP_TAC (GSYM quotient_list_elements);
    TYPIFY `L` EXISTS_TAC THEN ASM_REWRITE_TAC[];
    MATCH_MP_TAC elements_of_list_quotient_list;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `MEM x (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC Pplhulj.marked_list_of_dart;
    BY(ASM_MESON_TAC[]);
  TYPIFY `s2 SUBSET (elements_of_list L)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "s2";
    ASM_SIMP_TAC[SUBSET;set_of_list_newvertex;IN_IMAGE;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC;
    REWRITE_TAC[List_hypermap.elements_of_list;IN_SET_OF_LIST];
    REWRITE_TAC[List_hypermap.mem_list_of_elements];
    TYPIFY `SND x''` EXISTS_TAC;
    ASM_REWRITE_TAC[GSYM PAIR];
    BY(ASM_MESON_TAC[List_hypermap.mem_find_face_imp_mem_darts]);
  TYPIFY `elements_of_list L = s1 UNION s2 UNION s3` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_TAC THEN SET_TAC[]);
  TYPED_ABBREV_TAC `fs1 = (I:num->num)`;
  TYPED_ABBREV_TAC `n = CARD s1`;
  COMMENT "redo here";
  TYPIFY `?fs2. BIJ fs2 s2 (set_of_list (iota n (CARD s2))) /\ iota n (CARD s2) =  MAP fs2 (newvertex L r x)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "s2";
    MATCH_MP_TAC uniq_bij_map;
    REWRITE_TAC[Seq.size_iota;Seq.iota_uniq];
    GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
    MATCH_MP_TAC newvertex_uniq;
    BY(ASM_REWRITE_TAC[]);
  COMMENT "redone";
  FIRST_X_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `n' = CARD s1 + CARD s2`;
  TYPIFY `?fs3. BIJ fs3 s3 (set_of_list (iota n' (CARD s3)))` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC Counting_spheres.BIJ_EXTENDS_INJ [`s3`;`set_of_list (iota n' (CARD s3))`;`{}:num->bool`;`fs1`];
    ASM_REWRITE_TAC[INJ_EMPTY];
    ANTS_TAC;
      CONJ_TAC;
        FULL_EXPAND_TAC "s3";
        MATCH_MP_TAC FINITE_DIFF;
        BY(REWRITE_TAC[List_hypermap.elements_of_list;FINITE_SET_OF_LIST]);
      REWRITE_TAC[List_hypermap.elements_of_list;FINITE_SET_OF_LIST];
      CONJ_TAC;
        BY(SET_TAC[]);
      GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
      REWRITE_TAC[Seq.size_iota];
      BY(REWRITE_TAC[Seq.iota_uniq]);
    REPEAT WEAKER_STRIP_TAC;
    BY(ASM_MESON_TAC[]);
  POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC inj_on_union3 [`fs1`;`fs2`;`fs3`;`s1`;`s2`;`s3`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    CONJ_TAC;
      REWRITE_TAC[inj_on];
      FULL_EXPAND_TAC "fs1";
      BY(SIMP_TAC[I_THM]);
    CONJ_TAC;
      BY(ASM_MESON_TAC[INJ_inj_on;BIJ]);
    CONJ_TAC;
      BY(ASM_MESON_TAC[INJ_inj_on;BIJ]);
    RULE_ASSUM_TAC(REWRITE_RULE[set_of_list_iota_alt]);
    FULL_EXPAND_TAC "fs1" THEN REWRITE_TAC[I_THM];
    FULL_EXPAND_TAC "n'";
    FULL_EXPAND_TAC "n";
    FIRST_X_ASSUM_ST `flatten` MP_TAC;
    INTRO_TAC card_vertices_normal_list [`g`;`L`;`N`];
    ASM_REWRITE_TAC[];
    INTRO_TAC vertices_normal_list [`g`;`L`;`N`];
    ASM_REWRITE_TAC[];
    DISCH_THEN SUBST1_TAC;
    DISCH_TAC;
    DISCH_TAC;
    TYPIFY `!x1. x1 IN s1 ==> x1 < CARD s1` (C SUBGOAL_THEN ASSUME_TAC);
      FULL_EXPAND_TAC "s1";
      REWRITE_TAC[IN_SET_OF_LIST;Seq.mem_iota];
      BY(REPEAT WEAKER_STRIP_TAC THEN ASM_TAC THEN ARITH_TAC);
    REPEAT (FIRST_X_ASSUM_ST `BIJ` MP_TAC) THEN REWRITE_TAC[BIJ;SURJ;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC;
    REPEAT CONJ_TAC THEN REPEAT WEAKER_STRIP_TAC;
        TYPIFY `x1 < CARD s1 /\ CARD s1 <= fs2 x2` (C SUBGOAL_THEN MP_TAC);
          BY(ASM_MESON_TAC[]);
        BY(ASM_REWRITE_TAC[] THEN ARITH_TAC);
      TYPIFY `x1 < CARD s1 /\ CARD s1 + CARD s2 <= fs3 x3` (C SUBGOAL_THEN MP_TAC);
        BY(ASM_MESON_TAC[]);
      BY(ASM_REWRITE_TAC[] THEN ARITH_TAC);
    TYPIFY `fs2 x2 < CARD s1 + CARD s2 /\ CARD s1 + CARD s2 <= fs3 x3` (C SUBGOAL_THEN MP_TAC);
      BY(ASM_MESON_TAC[]);
    BY(ASM_REWRITE_TAC[] THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MAP (MAP f) L` EXISTS_TAC;
  TYPED_ABBREV_TAC `nf = (\u. f (FST u),f (SND u))`;
  GEXISTL_TAC [`MAP (MAP nf) N`;`MAP nf r`;`nf x`];
  CONJ_TAC;
    TYPIFY `f` EXISTS_TAC THEN ASM_REWRITE_TAC[MAP;CONS_11];
    BY(FULL_EXPAND_TAC "nf" THEN REWRITE_TAC[]);
  COMMENT "newvertex_prepped";
  SUBCONJ2_TAC;
    REWRITE_TAC[newvertex_prepped];
    TYPIFY `final_list (MAP (MAP f) L) (MAP nf r)` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
    (REWRITE_TAC[LET_THM]);
    TYPIFY `sizel (undup (MAP FST (flatten N))) = n` (C SUBGOAL_THEN SUBST1_TAC);
      FULL_EXPAND_TAC "n";
      FULL_EXPAND_TAC "s1";
      GMATCH_SIMP_TAC (GSYM Seq2.card_set_of_list_uniq);
      REWRITE_TAC[Seq.undup_uniq];
      BY(REWRITE_TAC[Seq2.set_of_list_undup]);
    TYPIFY `newvertex (MAP (MAP f) L) (MAP nf r) (nf x) = MAP fs2 (newvertex L r x)` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN SUBST1_TAC;
      FIRST_X_ASSUM_ST `newvertex` (SUBST1_TAC o GSYM);
      REWRITE_TAC[Seq.size_iota];
      REWRITE_TAC[GSYM MAP_flatten;GSYM MAP_o;FST_o_FST];
      FULL_EXPAND_TAC "nf" THEN REWRITE_TAC[FST_o_FST];
      ASM_REWRITE_TAC[MAP_o];
      TYPIFY `sizel (undup (MAP f (MAP FST (flatten N)))) = n` (C SUBGOAL_THEN SUBST1_TAC) THEN REWRITE_TAC[];
      FULL_EXPAND_TAC "n";
      FULL_EXPAND_TAC "s1";
      GMATCH_SIMP_TAC (GSYM Seq2.card_set_of_list_uniq);
      REWRITE_TAC[Seq.undup_uniq];
      REWRITE_TAC[Seq2.set_of_list_undup];
      TYPIFY_GOAL_THEN `!u. set_of_list (MAP f u) = IMAGE f (set_of_list u)` (unlist REWRITE_TAC);
        BY(REWRITE_TAC[SET_OF_LIST_MAP]);
      ASM_REWRITE_TAC[];
      AP_TERM_TAC;
      REWRITE_TAC[EXTENSION;IN_IMAGE];
      BY(ASM_MESON_TAC[I_THM]);
    INTRO_TAC map_newvertex [`f`;`L`;`r`;`x`];
    FULL_EXPAND_TAC "nf";
    TYPIFY `MAP fs2 (newvertex L r x) = MAP f (newvertex L r x)` (C SUBGOAL_THEN SUBST1_TAC);
      MATCH_MP_TAC MAP_EQ;
      REWRITE_TAC[lower_case;GSYM Seq.allP];
      REWRITE_TAC[GSYM IN_SET_OF_LIST];
      BY(ASM_MESON_TAC[]);
    DISCH_THEN MATCH_MP_TAC;
    ASM_REWRITE_TAC[];
    TYPIFY `MEM r N` (C SUBGOAL_THEN ASSUME_TAC);
      BY(FIRST_X_ASSUM_ST `marked_list` MP_TAC THEN MESON_TAC[marked_list]);
    REWRITE_TAC[SUBSET;List_hypermap.darts_of_list;IN_SET_OF_LIST];
    BY(ASM_MESON_TAC[normal_list_list_of_darts;Seq.allP;Seq2.mem_flatten]);
  (DISCH_TAC);
  FULL_EXPAND_TAC "nf";
  GMATCH_SIMP_TAC match_quotient_list_map;
  ASM_REWRITE_TAC[];
  FULL_EXPAND_TAC "s1";
  FIRST_X_ASSUM_ST `flatten` MP_TAC;
  REWRITE_TAC[IN_SET_OF_LIST];
  FULL_EXPAND_TAC "fs1";
  BY(REWRITE_TAC[I_THM])
  ]);;
  (* }}} *)

let SHXWKXQ = iso_list_newvertex_lemma;;

let final_face_seed = prove_by_refinement(
  `!p. filter SND (faces (Seed p)) = [upt 0 (maxGon p),T]`,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[SEED;graphl;LET_THM;faces;GRAPH;filter_rec])
  ]);;
  (* }}} *)

let face_iota = prove_by_refinement(
  `!L f. 
    all uniq L /\
    MEM f0 L ==>
    (?phi L'. isop_list phi (L,[]) (L',[]) /\ MAP phi f0 = iota 0 (sizel f0))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[isop_list;MAP];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC uniq_bij_map [`f0`;`iota 0 (sizel f0)`];
  REWRITE_TAC[Seq.size_iota;Seq.iota_uniq];
  ANTS_TAC;
    BY(ASM_MESON_TAC[Seq.allP]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC Counting_spheres.INJ_EXTENSION [`elements_of_list L`;`0..(CARD (elements_of_list L))`;`set_of_list f0`;`f`];
  ANTS_TAC;
    REWRITE_TAC[FINITE_NUMSEG;CARD_NUMSEG];
    nCONJ_TAC 3;
      BY(ARITH_TAC);
    nCONJ_TAC 2;
      BY(REWRITE_TAC[List_hypermap.elements_of_list;FINITE_SET_OF_LIST]);
    ASM_REWRITE_TAC[];
    TYPIFY `CARD (elements_of_list L) = sizel (list_of_elements L)` (C SUBGOAL_THEN ASSUME_TAC);
      REWRITE_TAC[List_hypermap.elements_of_list];
      GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
      BY(REWRITE_TAC[List_hypermap.uniq_list_of_elements]);
    SUBCONJ2_TAC;
      REWRITE_TAC[SUBSET;IN_SET_OF_LIST;List_hypermap.elements_of_list];
      REWRITE_TAC[List_hypermap.list_of_elements;Seq.mem_undup];
      BY(ASM_MESON_TAC[Seq2.mem_flatten]);
    DISCH_TAC;
    TYPIFY `CARD (set_of_list f0) <= CARD (elements_of_list L)` (C SUBGOAL_THEN ASSUME_TAC);
      MATCH_MP_TAC CARD_SUBSET;
      BY(ASM_REWRITE_TAC[]);
    TYPIFY `set_of_list (iota 0 (sizel f0)) SUBSET (0.. CARD (elements_of_list L))` (C SUBGOAL_THEN ASSUME_TAC);
      REWRITE_TAC[set_of_list_iota_alt;SUBSET;IN_NUMSEG;IN_ELIM_THM];
      REPEAT WEAKER_STRIP_TAC;
      REWRITE_TAC[arith `0 <= x`];
      TYPIFY `CARD (set_of_list f0) = sizel f0` (C SUBGOAL_THEN ASSUME_TAC);
        MATCH_MP_TAC Seq2.card_set_of_list_uniq;
        BY(ASM_MESON_TAC[Seq.allP]);
      BY(ASM_TAC THEN ARITH_TAC);
    FIRST_X_ASSUM_ST `BIJ` MP_TAC THEN REWRITE_TAC[BIJ;INJ];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    BY(ASM_TAC THEN SET_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  GEXISTL_TAC [`j`;`MAP (MAP j) L`];
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(ASM_MESON_TAC[INJ_inj_on]);
  MATCH_MP_TAC MAP_EQ;
  REWRITE_TAC[lower_case;GSYM Seq.allP];
  BY(ASM_MESON_TAC[IN_SET_OF_LIST])
  ]);;
  (* }}} *)

let UYOUIXG = prove_by_refinement(
  `!L f .  is_restricted (hypermap_of_list L) /\
    all uniq L /\
    good_list L /\ 
    good_list_nodes L /\
    MEM f (list_of_faces L) 
    ==>
     (?L' N' r. iso_list (L,[f;r]) (L',N') /\
	normal_list L' N' /\ 
	match_quotient_list (Seed (sizel f -3)) L' N')`,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list;fgraph_seed;maxGon;final_face_seed];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[MAP;o_THM;FST];
  REWRITE_TAC[set_of_list;SING_SUBSET;IN_SET_OF_LIST];
  INTRO_TAC face_rep [`L`;`f`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC face_iota [`L`;`f0`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `L'` EXISTS_TAC;
  FIRST_ASSUM_ST `isop_list` MP_TAC THEN REWRITE_TAC[isop_list] THEN REWRITE_TAC[MAP] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[map_good_list]);
  TYPIFY `iso_list (L,[]) (L',[])` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[iso_list;MAP];
    BY(ASM_MESON_TAC[]);
  TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
  TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_restricted [`L`;`L'`];
    DISCH_THEN MATCH_MP_TAC;
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[iso_list_sym_nil]);
  TYPIFY `~(f = [])` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "f";
    ASM_REWRITE_TAC[List_hypermap.list_pairs_empty];
    BY(ASM_MESON_TAC[good_list;Seq.allP]);
  TYPIFY `MEM (HD f) (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.list_of_darts_alt;Seq.mem_undup;Seq2.mem_flatten];
    TYPIFY `f` EXISTS_TAC THEN ASM_REWRITE_TAC[];
    BY(ASM_SIMP_TAC[ MEM_HD]);
  INTRO_TAC Auqtzyz_list.AUQTZYZ_list [`L`;`f`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  GEXISTL_TAC[ `MAP (MAP (\u. phi (FST u),phi (SND u))) [f;r]`;`r`];
  SUBCONJ_TAC;
    REWRITE_TAC[iso_list];
    BY(TYPIFY `phi` EXISTS_TAC THEN ASM_REWRITE_TAC[]);
  DISCH_TAC;
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[iso_list_normal]);
  DISCH_TAC;
  TYPIFY `3 <= sizel f` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[is_restricted_size_face]);
  TYPIFY `sizel f - 3 + 3 = sizel f` (C SUBGOAL_THEN SUBST1_TAC);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  COMMENT "final_list";
  TYPIFY `sizel f = sizel f0` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "f0";
    BY(REWRITE_TAC[Seq.size_map;lower_case]);
  TYPIFY `final_list (MAP (MAP phi) L) (MAP (\u. phi (FST u),phi (SND u)) f)` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_final_list [`L`;`L'`;`[f;r]`;`MAP (MAP (\u. phi (FST u),phi (SND u))) [f;r]`;`f`;`MAP (\u. phi (FST u),phi (SND u)) f`];
    ASM_REWRITE_TAC[MEM];
    DISCH_THEN MATCH_MP_TAC;
    ASM_SIMP_TAC[final_list_face];
    ASM_REWRITE_TAC[iso_list];
    BY(TYPIFY `phi` EXISTS_TAC THEN ASM_REWRITE_TAC[MAP;CONS_11]);
  CONJ_TAC;
    REWRITE_TAC[Seq.filter_cons;MAP];
    COND_CASES_TAC;
      REWRITE_TAC[MEM];
      DISJ1_TAC;
      ASM_REWRITE_TAC[upt0];
      FIRST_X_ASSUM_ST `iota` (SUBST1_TAC o GSYM);
      BY(ASM_REWRITE_TAC[map_list_pairs]);
    PROOF_BY_CONTR_TAC THEN POP_ASSUM kill;
    BY(POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[]);
  COMMENT "quotient_list";
  ASM_REWRITE_TAC[];
  INTRO_TAC iso_list_quotient [`L`;`[f;r]`;`L'`;`MAP (MAP (\u. phi (FST u),phi (SND u))) [f;r]`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[is_restricted]);
  DISCH_TAC;
  INTRO_TAC iso_list_imp_dih2k [`quotient_list L [f;r]`;`quotient_list L' (MAP (MAP (\u. phi (FST u),phi (SND u))) [f;r])`];
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[dih2k_list];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `u = iota 0 (sizel f0)` ENOUGH_TO_SHOW_TAC;
    BY(DISCH_THEN SUBST1_TAC THEN REWRITE_TAC[]);
  POP_ASSUM MP_TAC THEN REWRITE_TAC[quotient_list_core];
  REWRITE_TAC[MAP;CONS_11];
  REPEAT WEAKER_STRIP_TAC;
  (FULL_EXPAND_TAC "u");
  GMATCH_SIMP_TAC final_list_core;
  ASM_REWRITE_TAC[];
  nCONJ_TAC 0;
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 1;
    BY(ASM_MESON_TAC[is_restricted]);
  ASM_REWRITE_TAC[];
  TYPIFY `!u. MEM u f ==> darts_of_list L u` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.darts_of_list;IN_ELIM_SET_OF_LIST];
    REWRITE_TAC[List_hypermap.list_of_darts_alt;Seq2.mem_flatten];
    BY(ASM_MESON_TAC[]);
  TYPIFY `uniq f` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[List_hypermap.uniq_face]);
  nCONJ_TAC 1;
    REWRITE_TAC[lower_case] THEN GMATCH_SIMP_TAC Seq.map_inj_in_uniq;
    INTRO_TAC inj_on_dart_of_list [`phi`;`L`];
    ASM_REWRITE_TAC[];
    REWRITE_TAC[inj_on];
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    REWRITE_TAC[GSYM Seq.allP];
    REWRITE_TAC[MEM_MAP];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[List_hypermap.list_of_darts_alt;Seq.mem_undup;Seq2.mem_flatten];
    TYPIFY `MAP (\u. phi (FST u),phi (SND u)) f` EXISTS_TAC THEN ASM_REWRITE_TAC[];
    TYPIFY `MEM x' (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[List_hypermap.darts_of_list;IN_ELIM_SET_OF_LIST]);
    SUBCONJ2_TAC;
      TYPIFY_GOAL_THEN `(phi (FST (x')),phi (SND x')) = (\x. phi (FST x),phi (SND x)) (x')` SUBST1_TAC;
        BY(ASM_REWRITE_TAC[]);
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    DISCH_TAC;
    TYPIFY `find_face L' (phi (FST (x')),phi (SND (x'))) = MAP (\u. phi (FST u),phi (SND u)) f` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN (SUBST1_TAC o GSYM);
      ASM_REWRITE_TAC[] THEN MATCH_MP_TAC List_hypermap.mem_find_face;
      REWRITE_TAC[map_list_of_darts];
      TYPIFY_GOAL_THEN `(phi (FST (x')),phi (SND (x'))) = (\x. phi (FST x),phi (SND x)) (x')` SUBST1_TAC;
        BY(REWRITE_TAC[]);
      (MATCH_MP_TAC MEMf_MAP);
      BY(ASM_REWRITE_TAC[]);
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC find_face_map;
    (ASM_REWRITE_TAC[]);
    AP_TERM_TAC;
    GMATCH_SIMP_TAC List_hypermap.find_face_eq;
    ASM_SIMP_TAC[];
    BY(ASM_MESON_TAC[good_list]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[GSYM MAP_o;FST_o_FST];
  REWRITE_TAC[MAP_o];
  BY(ASM_REWRITE_TAC[MAP_o])
  ]);;
  (* }}} *)

(* subdivFaceFinal_eq was here *)

let subdivFace0_alt_mem = prove_by_refinement(
  `!vs g f r n.  MEM f (faces g) ==> 
    (let fg' = subdivFace0_alt g f r n vs in
       MEM (FST fg') (faces (SND fg')))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_THM];
  LIST_INDUCT_TAC THEN ASM_SIMP_TAC[subdivFace0_alt];
  REPEAT WEAKER_STRIP_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  LET_TAC;
  LET_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  REPEAT LET_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  INTRO_TAC MEM_splitFace2 [`g`;`r`;`v`;`f`;`ws`];
  ASM_REWRITE_TAC[];
  LET_TAC;
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let splitFace_finals = prove_by_refinement(
  `!g r v f ws. ~SND f ==>
    finals (SND (SND (splitFace g r v f ws))) = finals g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[splitFace;finals];
  REPEAT WEAKER_STRIP_TAC;
  REPEAT LET_TAC;
  REWRITE_TAC[faces_graph];
  FIRST_X_ASSUM_ST `split_face` MP_TAC THEN ONCE_REWRITE_TAC[PAIR_EQ2];
  REWRITE_TAC[];
  REWRITE_TAC[split_face];
  REPEAT LET_TAC;
  REWRITE_TAC[];
  REWRITE_TAC[lower_case];
  REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "f1" THEN FULL_EXPAND_TAC "f2";
  REWRITE_TAC[Seq.filter_cat];
  REWRITE_TAC[FACE];
  REWRITE_TAC[filter_rec;Seq.cats0];
  GMATCH_SIMP_TAC filter_replace;
  ASM_REWRITE_TAC[GSYM Seq.allP;MEM];
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  BY(FIRST_X_ASSUM MP_TAC THEN ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let split_face_nonfinal1 = prove_by_refinement(
  `!f u v ws. (let f1,f2 = split_face f u v ws in ~(SND f1))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[split_face];
  LET_TAC THEN POP_ASSUM MP_TAC THEN REPEAT LET_TAC;
  ONCE_REWRITE_TAC[PAIR_EQ2];
  REWRITE_TAC[FACE];
  BY(REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "f1" THEN POP_ASSUM MP_TAC THEN REWRITE_TAC[])
  ]);;
  (* }}} *)

let split_face_nonfinal2 = prove_by_refinement(
  `!f u v ws. (let f1,f2 = split_face f u v ws in ~(SND f2))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[split_face];
  LET_TAC THEN POP_ASSUM MP_TAC THEN REPEAT LET_TAC;
  ONCE_REWRITE_TAC[PAIR_EQ2];
  REWRITE_TAC[FACE];
  BY(REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "f2" THEN POP_ASSUM MP_TAC THEN REWRITE_TAC[])
  ]);;
  (* }}} *)

let subdivFace0_alt_finals = prove_by_refinement(
  `!vs g f u n. MEM f (faces g) /\ ~SND f ==>
     (finals g) =  (finals (SND (subdivFace0_alt g f u n vs)))`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC THEN REWRITE_TAC[subdivFace0_alt];
  REPEAT WEAKER_STRIP_TAC;
  REPEAT LET_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `finals g = finals g'` (C SUBGOAL_THEN SUBST1_TAC);
    FIRST_X_ASSUM_ST `splitFace` MP_TAC;
    ONCE_REWRITE_TAC[PAIR_EQ2];
    REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM MP_TAC THEN ONCE_REWRITE_TAC[PAIR_EQ2] THEN REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "g'";
    BY(ASM_MESON_TAC[splitFace_finals]);
  FIRST_X_ASSUM MATCH_MP_TAC;
  INTRO_TAC splitFace_split_face [`g`;`u`;`v`;`f`;`ws`;`f1`;`f2`;`g'`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  INTRO_TAC split_face_nonfinal2 [`f`;`u`;`v`;`ws`];
  LET_TAC;
  DISCH_TAC;
  CONJ2_TAC;
    RULE_ASSUM_TAC (ONCE_REWRITE_RULE[PAIR_EQ2]);
    RULE_ASSUM_TAC (REWRITE_RULE[]);
    ASM_SIMP_TAC[];
    DISCH_TAC;
    BY(ASM_MESON_TAC[]);
  INTRO_TAC MEM_splitFace2 [`g`;`u`;`v`;`f`;`ws`];
  ASM_REWRITE_TAC[] THEN LET_TAC;
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let size_filter_replace_mono = prove_by_refinement(
  `!P xs x x'. MEM x xs /\ ~P x /\ P x' ==>
    sizel (filter P xs) < sizel (filter P (replace x [x'] xs))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC THEN REWRITE_TAC[replace;MEM;filter_rec];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM DISJ_CASES_TAC THEN ASM_REWRITE_TAC[];
    COND_CASES_TAC THEN ASM_REWRITE_TAC[];
      BY(ASM_MESON_TAC[]);
    ASM_REWRITE_TAC[lower_case;Seq.cat1s;filter_rec;Seq.size_cons];
    BY(ARITH_TAC);
  REPEAT COND_CASES_TAC THEN ASM_REWRITE_TAC[lower_case;Seq.cat1s;filter_rec;Seq.size_cons;arith `SUC m < SUC n <=> m < n`];
        BY(ASM_MESON_TAC[]);
      BY(ASM_MESON_TAC[]);
    BY(ARITH_TAC);
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let makeFaceFinal_mono = prove_by_refinement(
  `!g f. MEM f (faces g) /\ ~(SND f) ==>
    sizel (finals g) < sizel (finals (makeFaceFinal f g))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[makeFaceFinal;finals;faces_graph;makeFaceFinalFaceList];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[lower_case];
  MATCH_MP_TAC size_filter_replace_mono;
  BY(ASM_REWRITE_TAC[snd_setFinal])
  ]);;
  (* }}} *)

let subdivFace0_alt_final = prove_by_refinement(
  `!vs g f h n. ~SND f ==> ~(SND (FST (subdivFace0_alt g f h n vs)))`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC THEN REWRITE_TAC[subdivFace0_alt];
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM MP_TAC THEN REPEAT LET_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  FIRST_X_ASSUM MATCH_MP_TAC;
  INTRO_TAC splitFace_split_face [`g`;`h'`;`v`;`f`;`ws`;`f1`;`f2`;`g'`];
  ASM_REWRITE_TAC[];
  INTRO_TAC split_face_nonfinal2 [`f`;`h'`;`v`;`ws`];
  LET_TAC;
  ONCE_REWRITE_TAC[PAIR_EQ2];
  REWRITE_TAC[];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let generatePolygon_mono = prove_by_refinement(
  `!i v g f fs g' p.
    planegraph g /\
    ~finalGraph g /\
    nonFinals g = fs /\
    minimalFace fs = f /\
    MEM g' (generatePolygon i v f g) ==>
    sizel (finals g) < sizel (finals g')
    `,
  (* {{{ proof *)
  [
  REWRITE_TAC[generatePolygon;LET_THM;MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC subdivFaceFinal_eq;
  REWRITE_TAC[indexToVertexList_nil];
  SUBCONJ_TAC;
    MATCH_MP_TAC enumerator_nil;
    FIRST_X_ASSUM_ST `MEM` MP_TAC;
    BY(MESON_TAC[MEM_FILTER]);
  REWRITE_TAC[subdivFaceFinal];
  DISCH_TAC;
  LET_TAC;
  TYPED_ABBREV_TAC `vs = (TL (indexToVertexList f v x'))`;
  TYPED_ABBREV_TAC `h = (the (HD (indexToVertexList f v x')))`;
  INTRO_TAC subdivFace0_alt_finals [`vs`;`g`;`f`;`h`;`0`];
  SUBANTS_TAC;
    INTRO_TAC (* Dpzgbyf. *) mem_minimalFace_nonFinals [`g`];
    ANTS_TAC;
      BY(ASM_MESON_TAC[finalGraph]);
    ASM_SIMP_TAC[];
    FIRST_X_ASSUM_ST `nonFinals` MP_TAC THEN REWRITE_TAC[nonFinals];
    DISCH_TAC THEN FULL_EXPAND_TAC "fs";
    REWRITE_TAC[MEM_FILTER];
    BY(SIMP_TAC[]);
  SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `x = a,b` MP_TAC;
  ONCE_REWRITE_TAC[PAIR_EQ2];
  REWRITE_TAC[];
  (REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[]);
  MATCH_MP_TAC makeFaceFinal_mono;
  INTRO_TAC subdivFace0_alt_mem [`vs`;`g`;`f`;`h`;`0`];
  ASM_REWRITE_TAC[];
  ASM_REWRITE_TAC[LET_THM];
  DISCH_THEN (unlist REWRITE_TAC);
  FULL_EXPAND_TAC "f'";
  MATCH_MP_TAC subdivFace0_alt_final;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let poioj = prove_by_refinement(
  `!L N.
    good_list L /\
    normal_list L N /\
    is_edge_nondegenerate (hypermap_of_list L) /\
    all uniq L /\
    (!x. MEM x (MAP list_pairs (quotient_list L N)) ==>
      MEM x (filter (final_list L) N)) ==> 
    all (final_list L) N`,
  (* {{{ proof *)
  [
  REWRITE_TAC[quotient_list_core;GSYM MAP_o];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[GSYM Seq.allP];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`list_pairs (core L x)`]);
  ANTS_TAC;
    REWRITE_TAC[ MEM_MAP;o_THM];
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[Seq.mem_filter];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `list_pairs (core L x) = x` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  TYPIFY `?d. MEM d x /\ MEM d (list_pairs (core L x))` ENOUGH_TO_SHOW_TAC;
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `uniq (flatten N)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[normal_list]);
    BY(ASM_MESON_TAC[List_hypermap.uniq_sublist_unique]);
  INTRO_TAC parts_list_pairs [`L`;`N`;`x`];
  ASM_REWRITE_TAC[];
  REWRITE_TAC[core];
  TYPIFY `MAP (\x. FST (HD x)) (parts L x) = MAP (FST o HD) (parts L x)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(MATCH_MP_TAC MAP_EQ THEN REWRITE_TAC[lower_case;GSYM Seq.allP;o_THM]);
  DISCH_THEN SUBST1_TAC;
  TYPIFY `LAST (LAST (parts L x))` EXISTS_TAC;
  TYPIFY `uniq x /\ ~(x=[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil;Seq.allP;Seq2.mem_flatten]);
  SUBCONJ2_TAC;
    MATCH_MP_TAC MEMf_MAP;
    MATCH_MP_TAC MEM_LAST;
    BY(ASM_MESON_TAC[parts_nonnil]);
  DISCH_TAC;
  TYPIFY `!d. MEM d (MAP LAST (parts L x)) ==> MEM d x` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[MEM_MAP];
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `x = flatten (parts L x)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_MESON_TAC[parts_flatten]);
  REWRITE_TAC[Seq2.mem_flatten];
  TYPIFY `x'` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC MEM_LAST;
  BY(ASM_MESON_TAC[parts_uniq_nonnil])
  ]);;
  (* }}} *)

let match_quotient_list_finalGraph = prove_by_refinement(
  `!g L N. 
               good_list L /\
            normal_list L N /\
            is_edge_nondegenerate (hypermap_of_list L) /\
            all uniq L /\
            connected_hypermap (hypermap_of_list L) /\
            ~(N = []) /\
    match_quotient_list g L N /\
    finalGraph g ==>  
     (hypermap_of_list (fgraph g)) =  (hypermap_of_list L)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list];
  REWRITE_TAC[upper_case;GSYM finals];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC finalGraph_filter [`g`] THEN ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_X_ASSUM_ST `FILTER` MP_TAC THEN ASM_REWRITE_TAC[SUBSET;IN_SET_OF_LIST];
  ASM_REWRITE_TAC[MAP_o;GSYM fgraph];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC hypermap_of_quotient_list_final;
  ASM_REWRITE_TAC[];
  CONJ2_TAC;
    BY(ASM_REWRITE_TAC[upper_case]);
  MATCH_MP_TAC poioj;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[lower_case])
  ]);;
  (* }}} *)

let restricted_match_finalGraph = prove_by_refinement(
  `!g L N.
         good_list L /\
         good_list_nodes L /\
         normal_list L N /\
         is_restricted (hypermap_of_list L) /\
         match_quotient_list g L N /\
         finalGraph g /\
         ~(N = []) 
         ==> hypermap_of_list (fgraph g) = hypermap_of_list L`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC match_quotient_list_finalGraph [`g`;`L`;`N`];
  DISCH_THEN MATCH_MP_TAC;
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(ASM_MESON_TAC[is_restricted]);
  BY(ASM_MESON_TAC[simple_hypermap_uniq;is_restricted])
  ]);;
  (* }}} *)

let bounded_size_finals = prove_by_refinement(
  `!L. 
     good_list L /\
     good_list_nodes L /\
     is_restricted (hypermap_of_list L) ==>
    (?n.  !g L' N'.
       iso_list (L,[]) (L',[]) /\
       normal_list L' N' /\
       match_quotient_list g L' N' ==>
       sizel (finals g) <= n)
    `,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list];
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `n = sizel (list_of_darts L)`;
  TYPIFY `n` EXISTS_TAC;
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `sizel (list_of_darts L') = sizel (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `iso_list` MP_TAC;
    REWRITE_TAC[iso_list;MAP];
    REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
    ASM_SIMP_TAC[ inj_on_list_of_darts];
    BY(ASM_REWRITE_TAC[Seq.size_map;lower_case]);
  INTRO_TAC normal_list_size_bound [`L'`;`N'`];
  ASM_REWRITE_TAC[];
  TYPIFY `sizel (finals g) <= sizel N'` ENOUGH_TO_SHOW_TAC;
    BY(ARITH_TAC);
  MATCH_MP_TAC LE_TRANS;
  TYPIFY `CARD (set_of_list (undup (filter (final_list L') N')))` EXISTS_TAC;
  CONJ2_TAC;
    GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
    REWRITE_TAC[Seq.undup_uniq];
    MATCH_MP_TAC LE_TRANS;
    TYPIFY `sizel (filter (final_list L') N')` EXISTS_TAC;
    REWRITE_TAC[Seq.size_undup];
    BY(REWRITE_TAC[GSYM Seq.count_filter;Seq.count_size]);
  MATCH_MP_TAC LE_TRANS;
  TYPIFY `CARD (set_of_list (MAP (list_pairs o FST) (filter SND (faces g))))` EXISTS_TAC;
  CONJ2_TAC;
    MATCH_MP_TAC CARD_SUBSET;
    BY(ASM_REWRITE_TAC[FINITE_SET_OF_LIST;Seq2.set_of_list_undup]);
  REWRITE_TAC[GSYM finals;upper_case];
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  REWRITE_TAC[lower_case;Seq.size_map;arith `n:num <= n`];
  REWRITE_TAC[finals];
  REWRITE_TAC[lower_case];
  GMATCH_SIMP_TAC Seq.map_inj_in_uniq;
  GMATCH_SIMP_TAC Seq.filter_uniq;
  TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list]);
  TYPIFY `iso_list (L',[]) (L,[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_sym_nil]);
  TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_restricted]);
  TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
  CONJ_TAC;
    INTRO_TAC Seq.map_uniq [`FST:((num)list)#bool->(num)list`];
    DISCH_THEN MATCH_MP_TAC;
    ASM_REWRITE_TAC[upper_case;GSYM fgraph];
    MATCH_MP_TAC List_hypermap.good_list_uniq;
    MATCH_MP_TAC good_list_quotient;
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  REWRITE_TAC[Seq.mem_filter;o_THM];
  REWRITE_TAC[FORALL_PAIR_THM];
  SIMP_TAC[PAIR_EQ];
  BY(MESON_TAC[List_hypermap.list_pairs_inj])
  ]);;
  (* }}} *)

let foldr_maxn_exists = prove_by_refinement(
  `!xs. ~(xs = []) ==> (?n. MEM n xs /\ n = foldr maxn 0 xs)`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC THEN REWRITE_TAC[Seq.foldr;MEM;NOT_CONS_NIL];
  TYPIFY `~(t =[])` ASM_CASES_TAC;
    FIRST_X_ASSUM_ST `MEM` MP_TAC THEN ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
    TYPIFY `maxn h n` EXISTS_TAC;
    CONJ2_TAC;
      BY(ASM_MESON_TAC[]);
    REWRITE_TAC[Ssrnat.maxn];
    BY(ASM_MESON_TAC[]);
  RULE_ASSUM_TAC (REWRITE_RULE[]);
  ASM_REWRITE_TAC[MEM;Seq.foldr;Ssrnat.maxn];
  TYPIFY `h` EXISTS_TAC;
  BY(REWRITE_TAC[arith `~(h < 0)`])
  ]);;
  (* }}} *)

let seed_finals = prove_by_refinement(
  `!p. finals (Seed p) = [iota 0 (maxGon p),T]`,
  (* {{{ proof *)
  [
  REWRITE_TAC[SEED;finals;graphl;LET_THM;faces_graph];
  BY(REWRITE_TAC[FILTER;upt0])
  ]);;
  (* }}} *)

(* let seed_planeGraphP = 0;; *)

let seed_planegraphP = prove_by_refinement(
  `!p. planegraphP p (Seed p)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[planegraphP];
  BY(REWRITE_TAC[RTranCl_REFL])
  ]);;
  (* }}} *)

let seed_size_v_gt_1 = prove_by_refinement(
  `!p. all
 (\v. sizel (filter (MEM v) (fgraph (Seed p)))  > 1)
   (flatten (fgraph (Seed p)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[fgraph_seed;Seq.flatten_cons;Seq.flatten0;Seq.cats0];
  REWRITE_TAC[Seq.all_cat];
  REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[Seq.filter_cons;Seq.filter_nil;Seq.mem_rev];
  REWRITE_TAC[Seq.size;LENGTH];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let all_final_list_dart = prove_by_refinement(
  `!L N. good_list L /\
            connected_hypermap (hypermap_of_list L) /\
            ~(N = []) /\
            normal_list L N /\
            all (final_list L) N  ==> 
    set_of_list (final_dart_list L N) = darts_of_list L`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC (GSYM final_list_complete);
  TYPIFY `N` EXISTS_TAC;
  ASM_REWRITE_TAC[final_dart_list];
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(ASM_REWRITE_TAC[Seq.all_filterP])
  ]);;
  (* }}} *)

(*
let connected_final_list_flag_list = prove_by_refinement(
  `!L N. good_list L /\
            connected_hypermap (hypermap_of_list L) /\
            ~(N = []) /\
            normal_list L N /\
            all (final_list L) N ==> flag_list L N`,
  (* {{{ proof *)
  [
  rt[flag_list]
  st/r
  asimp[all_final_list_dart;sym IN_SET_OF_LIST]
  conj2
  rt[IN_SET_OF_LIST]
  amt[Seq.allP]
  rt[List_hypermap.darts_of_list;IN_SET_OF_LIST;SUBSET]
  st/r
  ...
  ]);;
  (* }}} *)
*)

let contour_list_connected_flag_list_condition = prove_by_refinement(
  `!L N.
    (!u v.
       MEM u (final_dart_list L N) /\ MEM v (final_dart_list L N) ==>
       contour_list_connected_v2 L (set_of_list(final_dart_list L N)) u v) ==>
    (!u v.
              MEM u (final_dart_list L N) /\ MEM v (final_dart_list L N)
              ==> (?s. contour_list L s /\
                       ~(s = []) /\
                       HD s = u /\
                       LAST s = v /\
                       set_of_list s SUBSET set_of_list (final_dart_list L N)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[contour_list_connected];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`u`;`v`]) THEN REPEAT WEAKER_STRIP_TAC;
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let contour_list_connected_refl = prove_by_refinement(
  `!L X u. u IN X /\ MEM u (list_of_darts L) ==> 
    contour_list_connected_v2 L X u u`,
  (* {{{ proof *)
  [
  REWRITE_TAC[contour_list_connected];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `[u]` EXISTS_TAC;
  REWRITE_TAC[NOT_CONS_NIL;HD;LAST;SUBSET;IN_SET_OF_LIST;MEM];
  CONJ2_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[contour_list];
  REWRITE_TAC[Seq.size;LENGTH;arith `~(SUC i < SUC 0)`];
  REWRITE_TAC[GSYM Seq.allP;MEM];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let contour_list_connected_trans = prove_by_refinement(
  `!L X u v w. contour_list_connected_v2 L X u v /\ 
    contour_list_connected_v2 L X v w ==>
    contour_list_connected_v2 L X u w`,
  (* {{{ proof *)
  [
  REWRITE_TAC[contour_list_connected];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `cat s (TL s')` EXISTS_TAC;
  nCONJ_TAC 0;
    BY(ASM_REWRITE_TAC[cat_eq_nil]);
  nCONJ_TAC 1;
    GMATCH_SIMP_TAC hd_cat;
    BY(ASM_REWRITE_TAC[]);
  nCONJ_TAC 2;
    TYPIFY `TL s' = []` ASM_CASES_TAC THEN ASM_REWRITE_TAC[Seq.cats0];
      POP_ASSUM MP_TAC THEN ASM_SIMP_TAC[tl_eq_nil];
      DISCH_THEN (ASSUME_TAC o GSYM);
      BY(ASM_MESON_TAC[LAST_CLAUSES]);
    GMATCH_SIMP_TAC last_cat;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC Aq56.TL_LAST;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 1;
    REPEAT (FIRST_X_ASSUM_ST `SUBSET` MP_TAC) THEN REWRITE_TAC[SUBSET;IN_SET_OF_LIST;Seq.mem_cat];
    BY(ASM_MESON_TAC[MEM_TL]);
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `contour_list` MP_TAC) THEN REWRITE_TAC[contour_list];
  REWRITE_TAC[Seq.size_cat;Seq.all_cat];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(REPEAT (FIRST_X_ASSUM_ST `all` MP_TAC) THEN REWRITE_TAC[GSYM Seq.allP] THEN ASM_MESON_TAC[MEM_TL]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[upper_case;EL_APPEND];
  REWRITE_TAC[lower_case];
  TYPIFY `~(sizel s =0)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_REWRITE_TAC[Seq.size_eq0]);
  REPEAT COND_CASES_TAC THEN ASM_REWRITE_TAC[];
        BY(ASM_MESON_TAC[]);
      TYPIFY `sizel s - 1 = i` (C SUBGOAL_THEN ASSUME_TAC);
        BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
      FULL_EXPAND_TAC "i";
      TYPIFY `SUC (sizel s - 1) - sizel s = 0` (C SUBGOAL_THEN SUBST1_TAC);
        BY(REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
      REWRITE_TAC[GSYM EL];
      TYPIFY `EL (sizel s - 1) s = LAST s` (C SUBGOAL_THEN SUBST1_TAC);
        BY(GMATCH_SIMP_TAC LAST_EL THEN ASM_REWRITE_TAC[lower_case]);
      ASM_REWRITE_TAC[];
      REPLICATE_TAC 3 (POP_ASSUM kill);
      TYPIFY `v = EL 0 s'` (C SUBGOAL_THEN SUBST1_TAC);
        BY(ASM_MESON_TAC[EL]);
      TYPIFY `0 < sizel (TL s')` (C SUBGOAL_THEN ASSUME_TAC);
        BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
      POP_ASSUM MP_TAC THEN GMATCH_SIMP_TAC size_tail;
      SUBCONJ_TAC;
        BY(ASM_SIMP_TAC[Seq.size_eq0]);
      ASM_SIMP_TAC[arith `0 < n - 1 <=> 1 < n`];
      REPEAT WEAKER_STRIP_TAC;
      FIRST_X_ASSUM MATCH_MP_TAC;
      BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
    BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN ARITH_TAC);
  ASM_SIMP_TAC[arith `~( i < n) ==> SUC i - n = SUC (i - n)`];
  REWRITE_TAC[GSYM EL];
  FIRST_X_ASSUM MATCH_MP_TAC;
  FIRST_X_ASSUM_ST `TL` MP_TAC;
  GMATCH_SIMP_TAC size_tail;
  ASM_REWRITE_TAC[Seq.size_eq0];
  BY(REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN ARITH_TAC)
  ]);;
  (* }}} *)

let final_list_connected_lemma = prove_by_refinement(
  `!i L N r u v. MEM u r /\ MEM v r /\ MEM r N /\ final_list L r /\
   normal_list L N /\ uniq r /\
  indexf u v r  = i /\ i < sizel r ==>
    contour_list_connected_v2 L (set_of_list r) u v`,
  (* {{{ proof *)
  [
  MATCH_MP_TAC COMPLETE_INDUCT;
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `j  = 0` ASM_CASES_TAC;
    TYPIFY `u = v` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[indexf0]);
    ASM_REWRITE_TAC[];
    MATCH_MP_TAC contour_list_connected_refl;
    ASM_REWRITE_TAC[IN_SET_OF_LIST];
    INTRO_TAC normal_list_list_of_darts [`L`;`N`];
    ASM_REWRITE_TAC[GSYM Seq.allP;Seq2.mem_flatten];
    DISCH_THEN MATCH_MP_TAC;
    TYPIFY `r` EXISTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  COMMENT "j pos";
  MATCH_MP_TAC contour_list_connected_trans;
  INTRO_TAC num_CASES [`j`];
  ASM_REWRITE_TAC[];
  DISCH_THEN (ASSUME_TAC o GSYM) THEN FULL_EXPAND_TAC "j";
  POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `(f_list L POWER n) u` EXISTS_TAC;
  INTRO_TAC final_list_power_fn [`n`;`L`;`r`];
  ASM_REWRITE_TAC[GSYM Seq.allP];
  DISCH_TAC;
  TYPIFY `MEM ((f_list L POWER n) u) r` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[Pwssrat.MEM_POWER_NEXT_EL]);
  RULE_ASSUM_TAC (REWRITE_RULE[IMP_IMP_THM;RIGHT_IMP_FORALL_THM]);
  CONJ_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    GEXISTL_TAC [`n`;`N`] THEN ASM_REWRITE_TAC[];
    ASM_SIMP_TAC[];
    nCONJ_TAC 0;
      BY(ASM_TAC THEN ARITH_TAC);
    nCONJ_TAC 2;
      BY(ASM_TAC THEN ARITH_TAC);
    ASM_REWRITE_TAC[];
    MATCH_MP_TAC next_eln_indexf;
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[arith `SUC i < r ==> i < r`]);
  COMMENT "last case";
  FIRST_X_ASSUM_ST `contour_list_connected_v2` kill;
  REWRITE_TAC[contour_list_connected];
  TYPIFY `[(f_list L POWER n) u;v]` EXISTS_TAC;
  REWRITE_TAC[NOT_CONS_NIL;HD;LAST_CLAUSES;SUBSET;IN_SET_OF_LIST;MEM];
  CONJ2_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[contour_list];
  CONJ_TAC;
    REWRITE_TAC[GSYM Seq.allP;MEM];
    BY(ASM_MESON_TAC[Seq.allP;normal_list_list_of_darts;Seq2.mem_flatten]);
  ASM_SIMP_TAC[one_step_list;Seq.size;LENGTH;arith `SUC i < SUC (SUC 0) <=> i = 0`];
  REPEAT WEAKER_STRIP_TAC THEN REWRITE_TAC[EL;HD;TL];
  DISJ1_TAC;
  INTRO_TAC final_list [`L`;`r`];
  ASM_REWRITE_TAC[GSYM Seq.allP];
  DISCH_THEN GMATCH_SIMP_TAC;
  CONJ_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[Hypermap.COM_POWER_FUNCTION];
  BY(ASM_MESON_TAC[indexf_n])
  ]);;
  (* }}} *)

let final_list_connected = prove_by_refinement(
  `!L N r u v.
    MEM u r /\  MEM v r /\
         MEM r N /\
         final_list L r /\
         normal_list L N 
         ==> contour_list_connected_v2 L (set_of_list r) u v`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC final_list_connected_lemma;
  GEXISTL_TAC [`indexf u v r`;`N`];
  ASM_REWRITE_TAC[];
  INTRO_TAC normal_list_uniq_nonnil [`L`;`N`;`r`];
  ASM_SIMP_TAC[];
  DISCH_TAC;
  BY(ASM_MESON_TAC[indexf_lt_sizel])
  ]);;
  (* }}} *)

let contour_list_connected_subset = prove_by_refinement(
  `!L X Y u v. contour_list_connected_v2 L X u v /\ X SUBSET Y ==>
    contour_list_connected_v2 L Y u v`,
  (* {{{ proof *)
  [
  REWRITE_TAC[contour_list_connected];
  REPEAT WEAKER_STRIP_TAC THEN TYPIFY `s` EXISTS_TAC THEN ASM_REWRITE_TAC[];
  BY(ASM_TAC THEN SET_TAC[])
  ]);;
  (* }}} *)

(* 
let not_mem_transpose_seed = prove_by_refinement(
  `!p d. MEM d (list_of_darts (fgraph (Seed p))) ==> 
    ~(MEM (SND d,FST d) (find_face (fgraph (Seed p)) d))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[SEED;graphl;LET_THM;fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_darts_cons;List_hypermap.list_of_darts_nil];
  REWRITE_TAC[Seq.mem_cat];
  REWRITE_TAC[Tame_defs.upt;maxGon;REVERSE_rev];
  REPEAT GEN_TAC;
  TYPIFY_GOAL_THEN `(p+3)-0 = p+3` SUBST1_TAC;
    BY(ARITH_TAC);
  TYPIFY `?i j. d = (i,j)` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[PAIR_SURJECTIVE]);
  WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[List_hypermap.find_face_alt];
  REWRITE_TAC[list_pairs_iota];
  REPEAT (GMATCH_SIMP_TAC list_pairs_rev_iota);
  REWRITE_TAC[MEM];
  REWRITE_TAC[arith `0 < p + 3 /\ (p+3)- 1 = p+2 /\ (i + 1 = p + 3 <=> i = p+ 2) /\ (i + 1 < p + 3 <=> i < p + 2)`];
  REPEAT STRIP_TAC;
        BY(ASM_TAC THEN ARITH_TAC);
      BY(ASM_REWRITE_TAC[]);
    BY(ASM_REWRITE_TAC[]);
  DISJ1_TAC;
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)
*)

let final_dart_list_quotient_list = prove_by_refinement(
  `!L N d. 
   normal_list L N /\
  is_edge_nondegenerate (hypermap_of_list L) /\
  good_list L /\
  all uniq L /\
   MEM d (final_dart_list L N) ==> MEM d (list_of_darts (quotient_list L N))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[final_dart_list;Seq2.mem_flatten;Seq.mem_filter];
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC mem_list_of_darts_quotient;
  ASM_REWRITE_TAC[];
  GEXISTL_TAC [`[d]`;`l`];
  GMATCH_SIMP_TAC final_list_parts;
  ASM_REWRITE_TAC[LAST_CLAUSES;MEM_MAP];
  CONJ2_TAC;
    BY(ASM_MESON_TAC[]);
  CONJ_TAC;
    INTRO_TAC normal_list_list_of_darts [`L`;`N`];
    ASM_REWRITE_TAC[GSYM Seq.allP;Seq2.mem_flatten];
    BY(ASM_MESON_TAC[]);
  BY(ASM_MESON_TAC[normal_list_uniq_nonnil])
  ]);;
  (* }}} *)

let quotient_list_eq_cons = prove_by_refinement(
  `!L N a b. quotient_list L N = [a;b] ==>
    (?r1 r2. N = [r1;r2])`,
  (* {{{ proof *)
  [
  REWRITE_TAC[quotient_list_core];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `sizel N = 2` (C SUBGOAL_THEN ASSUME_TAC);
    TYPIFY `sizel [a;b] = 2` ENOUGH_TO_SHOW_TAC;
      FIRST_X_ASSUM (SUBST1_TAC o GSYM);
      BY(REWRITE_TAC[lower_case;Seq.size_map]);
    REWRITE_TAC[Seq.size;LENGTH];
    BY(ARITH_TAC);
  MATCH_MP_TAC size2_cons;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let mem_map_last = prove_by_refinement(
  `!xs d. ~(xs  = []) /\
    all (\x. ~(x = [])) xs /\ MEM d (MAP LAST xs) ==> MEM d (flatten xs)`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[]);
  REWRITE_TAC[Seq.all_cons;MAP;MEM;Seq2.mem_flatten];
  REPEAT STRIP_TAC;
    ASM_REWRITE_TAC[];
    TYPIFY `h` EXISTS_TAC;
    BY(ASM_SIMP_TAC[MEM_LAST]);
  FIRST_X_ASSUM (C INTRO_TAC [`d`]);
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    MATCH_MP_TAC Dangeyj.mem_imp_not_nil;
    BY(ASM_MESON_TAC[MEM_MAP]);
  REWRITE_TAC[Seq2.mem_flatten];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let contour_list_connected_f_list = prove_by_refinement(
  `!L X v. v IN X /\ f_list L v IN X /\
    MEM v (list_of_darts L) ==>
    contour_list_connected_v2 L X v (f_list L v)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[contour_list_connected];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `[v;f_list L v]` EXISTS_TAC;
  ASM_REWRITE_TAC[HD;LAST;contour_list;SUBSET;IN_SET_OF_LIST;MEM;NOT_CONS_NIL];
  TYPIFY `MEM (f_list L v) (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[Pwssrat.men_f_list_darts]);
  nCONJ_TAC 0;
    ASM_REWRITE_TAC[GSYM Seq.allP;MEM];
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  CONJ2_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[one_step_list;Seq.size_cons];
  REWRITE_TAC[Seq.size;LENGTH;arith `SUC i < SUC (SUC 0) <=> i = 0`];
  BY(REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[EL;HD;TL])
  ]);;
  (* }}} *)

let contour_list_connected_fe_list = prove_by_refinement(
  `!L X v. good_list L /\ v IN X /\ f_list L (e_list v) IN X /\
    MEM v (list_of_darts L) ==>
    contour_list_connected_v2 L X v (f_list L (e_list v))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[contour_list_connected];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `[v;f_list L (e_list v)]` EXISTS_TAC;
  ASM_REWRITE_TAC[HD;LAST;contour_list;SUBSET;IN_SET_OF_LIST;MEM;NOT_CONS_NIL];
  TYPIFY `MEM (f_list L (e_list v)) (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Pwssrat.men_f_list_darts;good_list_e_list]);
  nCONJ_TAC 0;
    ASM_REWRITE_TAC[GSYM Seq.allP;MEM];
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  CONJ2_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[one_step_list;Seq.size_cons];
  REWRITE_TAC[Seq.size;LENGTH;arith `SUC i < SUC (SUC 0) <=> i = 0`];
  BY(REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[EL;HD;TL])
  ]);;
  (* }}} *)

let contour_list_connected_mem = prove_by_refinement(
  `!L X u v. contour_list_connected_v2 L X u v ==>
    MEM u (list_of_darts L) /\
    MEM v (list_of_darts L) /\
    u IN X /\
    v IN X
  `,
  (* {{{ proof *)
  [
  REWRITE_TAC[contour_list_connected;contour_list;GSYM Seq.allP;SUBSET;IN_SET_OF_LIST];
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_MESON_TAC[MEM_HD;MEM_LAST])
  ]);;
  (* }}} *)

let contour_list_connected_f_list_right = prove_by_refinement(
  `!L X u v. contour_list_connected_v2 L X u v /\  (f_list L v) IN X ==>
    contour_list_connected_v2 L X u (f_list L v)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC contour_list_connected_trans;
  TYPIFY `v` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC contour_list_connected_f_list;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[contour_list_connected_mem])
  ]);;
  (* }}} *)

let contour_list_connected_fe_list_right = prove_by_refinement(
  `!L X u v. good_list L /\
    contour_list_connected_v2 L X u v /\  (f_list L (e_list v)) IN X ==>
    contour_list_connected_v2 L X u (f_list L (e_list v))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC contour_list_connected_trans;
  TYPIFY `v` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC contour_list_connected_fe_list;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[contour_list_connected_mem])
  ]);;
  (* }}} *)

let final_dart_list_final_list = prove_by_refinement(
  `!L N d. uniq (flatten N) /\
    MEM d (final_dart_list L N) ==> final_list L (find_list N d)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[final_dart_list;Seq2.mem_flatten;Seq.mem_filter];
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC find_list_uniq;
  TYPIFY `l` EXISTS_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let flag_list_seed = prove_by_refinement(
  `!p L N. normal_list L N /\ 
      is_edge_nondegenerate (hypermap_of_list L) /\
  good_list L /\
  all uniq L /\
    connected_hypermap (hypermap_of_list L) /\
    match_quotient_list (Seed p) L N ==>
    flag_list L N`,
  (* {{{ proof *)
  [
  REWRITE_TAC[flag_list;match_quotient_list;final_face_seed;fgraph_seed];
  REWRITE_TAC[MAP;o_THM];
  REWRITE_TAC[SUBSET;IN_SET_OF_LIST;MEM];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `?r1 r2. N = [r1;r2]` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC quotient_list_eq_cons;
    BY(ASM_MESON_TAC[]);
  POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  PROOF_BY_CONTR_TAC;
  FIRST_X_ASSUM_ST `iota` MP_TAC THEN ASM_REWRITE_TAC[quotient_list_core;MAP;CONS_11];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `uniq (flatten N)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list]);
  TYPIFY `MEM (p + 2,0) (list_pairs (upt 0 (maxGon p)))` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[Tame_defs.upt;maxGon];
    REWRITE_TAC[list_pairs_iota];
    BY(ARITH_TAC);
  COMMENT "final r1";
  TYPIFY `final_list L r1` (C SUBGOAL_THEN ASSUME_TAC);
    TYPIFY `find_list N (p+2,0) = r1` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN (SUBST1_TAC o GSYM);
      MATCH_MP_TAC final_dart_list_final_list;
      ASM_REWRITE_TAC[final_dart_list;Seq2.mem_flatten];
      TYPIFY `list_pairs (upt 0 (maxGon p))` EXISTS_TAC;
      SUBCONJ_TAC;
        BY(ASM_MESON_TAC[]);
      DISCH_TAC;
      BY(ASM_REWRITE_TAC[]);
    MATCH_MP_TAC find_list_uniq;
    ASM_REWRITE_TAC[MEM];
    TYPIFY `MEM (list_pairs (upt 0 (maxGon p))) (filter (final_list L) N)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[]);
    POP_ASSUM MP_TAC THEN REWRITE_TAC[Seq.mem_filter];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `r1 = (list_pairs (upt 0 (maxGon p)))` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[]);
    PROOF_BY_CONTR_TAC;
    FIRST_X_ASSUM_ST `MEM` MP_TAC THEN ASM_REWRITE_TAC[MEM];
    INTRO_TAC list_pairs_core [`L`;`N`;`r2`];
    ASM_REWRITE_TAC[MEM];
    DISCH_TAC;
    DISCH_TAC;
    TYPIFY `MEM (1,0) (MAP LAST (parts L r2))` (C SUBGOAL_THEN ASSUME_TAC);
      FIRST_X_ASSUM_ST `MAP` (SUBST1_TAC o GSYM);
      FIRST_X_ASSUM_ST `core` (SUBST1_TAC o GSYM);
      GMATCH_SIMP_TAC list_pairs_rev_iota;
      BY(REWRITE_TAC[maxGon] THEN ARITH_TAC);
    TYPIFY `MEM (1,0) r2` (C SUBGOAL_THEN ASSUME_TAC);
      INTRO_TAC parts_flatten [`L`;`r2`];
      SUBANTS_TAC;
        BY(ASM_MESON_TAC[MEM;normal_list_uniq_nonnil]);
      DISCH_TAC;
      DISCH_THEN (SUBST1_TAC o GSYM);
      MATCH_MP_TAC mem_map_last;
      ASM_REWRITE_TAC[];
      BY(ASM_MESON_TAC[parts_nonnil;parts_all_nonnil]);
    POP_ASSUM MP_TAC;
    FULL_EXPAND_TAC "r2";
    REWRITE_TAC[Tame_defs.upt];
    REWRITE_TAC[list_pairs_iota];
    REWRITE_TAC[maxGon];
    BY(ARITH_TAC);
  TYPIFY `!r'. MEM r' N /\ ~final_list L r' ==> r' = r2` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[MEM];
    BY(ASM_MESON_TAC[]);
  TYPIFY `!r'. MEM r' N ==> list_pairs (core L r') = MAP LAST (parts L r')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[list_pairs_core]);
  TYPIFY `!r' d. MEM r' N /\ MEM d (list_pairs (core L r')) ==> MEM d r'` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC parts_flatten [`L`;`r'`];
    SUBANTS_TAC;
      BY(ASM_MESON_TAC[MEM;normal_list_uniq_nonnil]);
    DISCH_TAC;
    DISCH_THEN (SUBST1_TAC o GSYM);
    MATCH_MP_TAC mem_map_last;
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[parts_nonnil;parts_all_nonnil]);
  TYPIFY `!y. MEM y (list_pairs (core L r2)) ==> MEM (e_list y) r1` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[FORALL_PAIR_THM;List_hypermap.e_list];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    ASM_REWRITE_TAC[MEM];
    POP_ASSUM MP_TAC;
    REPEAT ( FIRST_X_ASSUM_ST `core` (SUBST1_TAC o GSYM));
    REWRITE_TAC[list_pairs_iota];
    GMATCH_SIMP_TAC list_pairs_rev_iota;
    BY(REWRITE_TAC[maxGon] THEN ARITH_TAC);
  FIRST_X_ASSUM_ST `final_dart_list` MP_TAC;
  REWRITE_TAC[];
  CONJ2_TAC;
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `MEM (e_list y) r1` ENOUGH_TO_SHOW_TAC;
      ASM_REWRITE_TAC[final_dart_list;Seq2.mem_flatten;Seq.mem_filter;MEM];
      BY(ASM_MESON_TAC[]);
    FIRST_X_ASSUM MATCH_MP_TAC;
    GMATCH_SIMP_TAC list_pairs_core;
    CONJ_TAC;
      BY(TYPIFY `N` EXISTS_TAC THEN ASM_REWRITE_TAC[MEM]);
    REWRITE_TAC[MEM_MAP];
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "split on final_list r2";
  TYPIFY `final_list L r2` ASM_CASES_TAC;
    TYPIFY `all (final_list L) N` (C SUBGOAL_THEN ASSUME_TAC);
      ASM_REWRITE_TAC[GSYM Seq.allP;MEM];
      BY(ASM_MESON_TAC[]);
    INTRO_TAC all_final_list_dart [`L`;`N`];
    ANTS_TAC;
      BY(ASM_MESON_TAC[NOT_CONS_NIL]);
    DISCH_TAC;
    TYPIFY `MEM u (list_of_darts L) /\ MEM v (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[IN_SET_OF_LIST;List_hypermap.darts_of_list]);
    TYPIFY `?s. contour_list L s /\ ~(s = []) /\ HD s = u /\ LAST s = v` ENOUGH_TO_SHOW_TAC;
      REPEAT WEAKER_STRIP_TAC;
      TYPIFY `s` EXISTS_TAC;
      nCONJ_TAC 4;
        FIRST_X_ASSUM_ST `contour_list` MP_TAC THEN REWRITE_TAC[contour_list;GSYM Seq.allP];
        BY(ASM_MESON_TAC[IN_SET_OF_LIST;List_hypermap.darts_of_list]);
      BY(ASM_REWRITE_TAC[]);
    TYPED_ABBREV_TAC `S = { w | MEM w (list_of_darts L) /\ (?s. contour_list L s /\ ~(s = []) /\ HD s = u /\ LAST s = w) }`;
    TYPIFY `S = darts_of_list L` ENOUGH_TO_SHOW_TAC;
      DISCH_TAC;
      TYPIFY `v IN S` (C SUBGOAL_THEN MP_TAC);
        BY(ASM_REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST]);
      FULL_EXPAND_TAC "S";
      REWRITE_TAC[IN_ELIM_THM];
      BY(MESON_TAC[]);
    ASM_SIMP_TAC[GSYM List_hypermap.components_hypermap_of_list];
    MATCH_MP_TAC connected_induction;
    ASM_REWRITE_TAC[];
    nCONJ_TAC 0;
      ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;SUBSET];
      FULL_EXPAND_TAC "S";
      REWRITE_TAC[IN_ELIM_THM;List_hypermap.darts_of_list;IN_SET_OF_LIST];
      BY(MESON_TAC[]);
    ASM_REWRITE_TAC[];
    CONJ_TAC;
      REWRITE_TAC[EXTENSION;NOT_IN_EMPTY;NOT_FORALL_THM];
      TYPIFY `u` EXISTS_TAC;
      FULL_EXPAND_TAC "S";
      ASM_REWRITE_TAC[IN_ELIM_THM];
      INTRO_TAC contour_list_connected_refl [`L`;`{u}`;`u`];
      ASM_REWRITE_TAC[contour_list_connected;IN_INSERT];
      BY(MESON_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `MEM x (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
      FULL_EXPAND_TAC "S";
      BY(POP_ASSUM MP_TAC THEN REWRITE_TAC[IN_ELIM_THM] THEN SIMP_TAC[]);
    TYPIFY `{w | (?s. contour_list L s /\ ~(s = []) /\ HD s = u /\ LAST s = w)} = S` (C SUBGOAL_THEN ASSUME_TAC);
      FULL_EXPAND_TAC "S";
      REWRITE_TAC[EXTENSION;IN_ELIM_THM];
      GEN_TAC;
      TYPIFY `!s. contour_list L s /\ ~(s=[]) ==> MEM (LAST s) (list_of_darts L)` ENOUGH_TO_SHOW_TAC;
        BY(MESON_TAC[]);
      REWRITE_TAC[contour_list;GSYM Seq.allP];
      BY(MESON_TAC[MEM_LAST]);
    ASM_SIMP_TAC[face_map_list];
    ASM_SIMP_TAC[inverse_node_map_list];
    TYPIFY `contour_list_connected_v2 L (darts_of_list L) u x` (C SUBGOAL_THEN ASSUME_TAC);
      FIRST_X_ASSUM_ST `x IN S` MP_TAC;
      POP_ASSUM kill;
      FULL_EXPAND_TAC "S";
      REWRITE_TAC[IN_ELIM_THM;contour_list_connected];
      REPEAT WEAKER_STRIP_TAC;
      TYPIFY `s` EXISTS_TAC THEN ASM_REWRITE_TAC[];
      FIRST_X_ASSUM_ST `contour_list` MP_TAC THEN REWRITE_TAC[contour_list;GSYM Seq.allP;SUBSET;IN_SET_OF_LIST;List_hypermap.darts_of_list];
      BY(SIMP_TAC[]);
    TYPIFY `contour_list_connected_v2 L (darts_of_list L) u (f_list L x) /\ contour_list_connected_v2 L (darts_of_list L) u (f_list L (e_list x))` ENOUGH_TO_SHOW_TAC;
      FULL_EXPAND_TAC "S";
      REWRITE_TAC[contour_list_connected;IN_ELIM_THM];
      BY(MESON_TAC[]);
    CONJ_TAC;
      MATCH_MP_TAC contour_list_connected_f_list_right;
      ASM_REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST];
      BY(ASM_SIMP_TAC[Pwssrat.men_f_list_darts]);
    MATCH_MP_TAC contour_list_connected_fe_list_right;
    ASM_REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST];
    BY(ASM_MESON_TAC[Pwssrat.men_f_list_darts;good_list_e_list]);
  COMMENT "last case ~final_list L r2";
  TYPIFY `MEM u r1 /\ MEM v r1` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT (FIRST_X_ASSUM_ST `final_dart_list` MP_TAC);
    ASM_REWRITE_TAC[final_dart_list;Seq2.mem_flatten;Seq.mem_filter;MEM];
    BY(ASM_MESON_TAC[]);
  INTRO_TAC final_list_connected [`L`;`N`;`r1`;`u`;`v`];
  ASM_REWRITE_TAC[MEM;final_dart_list;Seq2.mem_flatten;Seq.mem_filter;MEM];
  REWRITE_TAC[contour_list_connected];
  REWRITE_TAC[SUBSET;IN_SET_OF_LIST];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `s` EXISTS_TAC THEN ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let max_finals_g_exists = prove_by_refinement(
  `!L p.      good_list L /\
     good_list_nodes L /\
     foldr maxn 0 (MAP sizel L) - 3 = p /\
     is_restricted (hypermap_of_list L) ==>
   (?g' L' N'.  
      match_quotient_list g' L' N' /\
      normal_list L' N' /\
      all uniq (quotient_list L' N') /\
      ~(N' = []) /\
      iso_list (L,[]) (L',[]) /\
        planegraphP p g' /\
          vertices_set2 g' = elements_of_list (fgraph g')  /\
       good_faces_v3 g' /\
   flag_list L' N' /\
   all (\v. sizel (filter (MEM v) (quotient_list L' N')) > 1)
   (flatten (quotient_list L' N')) /\
   (!g'' L'' N''.
      match_quotient_list g'' L'' N'' /\
      normal_list L'' N'' /\
      all uniq (quotient_list L'' N'') /\
      ~(N'' = []) /\
      iso_list (L,[]) (L'',[]) /\
        planegraphP p g'' /\
          vertices_set2 g'' = elements_of_list (fgraph g'')  /\
       good_faces_v3 g''  /\
   flag_list L'' N'' /\
   all (\v. sizel (filter (MEM v) (quotient_list L'' N'')) > 1)
   (flatten (quotient_list L'' N''))
       ==>
   sizel (finals g'') <= sizel (finals g')))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `S = IMAGE (\ u. sizel (finals (FST u))) { (g',L',N') | match_quotient_list g' L' N' /\     normal_list L' N' /\  all uniq (quotient_list L' N') /\    ~(N' = []) /\     iso_list (L,[]) (L',[]) /\     planegraphP p g' /\     vertices_set2 g' = elements_of_list (fgraph g') /\     good_faces_v3 g' /\ flag_list L' N' /\    all (\v. sizel (filter (MEM v) (quotient_list L' N')) > 1)   (flatten (quotient_list L' N'))}`;
  INTRO_TAC Rogers.NUM_FINITE_IMP_MAX_EXISTS [`S`];
  TYPIFY `FINITE S /\ ~(S = {})` ENOUGH_TO_SHOW_TAC;
    SIMP_TAC[];
    DISCH_THEN kill;
    FULL_EXPAND_TAC "S";
    POP_ASSUM kill;
    REWRITE_TAC[IN_IMAGE;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC;
    GEXISTL_TAC [`g'`;`L'`;`N'`];
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `/\` MP_TAC THEN ASM_REWRITE_TAC[];
    DISCH_THEN MATCH_MP_TAC;
    TYPIFY `g'',L'',N''` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    GEXISTL_TAC [`g''`;`L''`;`N''`];
    BY(ASM_REWRITE_TAC[]);
  CONJ_TAC;
    FULL_EXPAND_TAC "S";
    MATCH_MP_TAC FINITE_SUBSET;
    INTRO_TAC bounded_size_finals [`L`];
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `0..n` EXISTS_TAC;
    REWRITE_TAC[FINITE_NUMSEG];
    REWRITE_TAC[SUBSET;IN_IMAGE;IN_ELIM_THM;IN_NUMSEG;arith `0 <= n`];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[EXTENSION;NOT_IN_EMPTY;NOT_FORALL_THM];
  FULL_EXPAND_TAC "S";
  REWRITE_TAC[IN_ELIM_THM;IN_IMAGE];
  (COMMENT "seed exists");
  REBIND_TAC (`x:num`,"n");
  INTRO_TAC foldr_maxn_exists [`MAP sizel L`];
  REWRITE_TAC[MAP_EQ_NIL];
  ASM_REWRITE_TAC[MEM_MAP];
  ANTS_TAC;
    MATCH_MP_TAC is_restricted_nonnil;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x` (RENAME_TAC "l");
  TYPIFY `sizel l -3 = p` (C SUBGOAL_THEN MP_TAC);
    REPLICATE_TAC 2 (FIRST_X_ASSUM MP_TAC) THEN ASM_REWRITE_TAC[];
    FULL_EXPAND_TAC "p";
    BY(MESON_TAC[]);
  REPLICATE_TAC 2 (POP_ASSUM kill);
  DISCH_TAC;
  TYPIFY `1` EXISTS_TAC;
  TYPED_ABBREV_TAC `f = list_pairs l`;
  INTRO_TAC UYOUIXG [`L`;`f`];
  ANTS_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[List_hypermap.list_of_faces;MEM_MAP];
    CONJ2_TAC;
      BY(ASM_MESON_TAC[]);
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `g' = Seed (sizel f - 3)`;
  TYPIFY `g',L',N'` EXISTS_TAC;
  REWRITE_TAC[];
  SUBCONJ_TAC;
    FULL_EXPAND_TAC "g'";
    REWRITE_TAC[seed_finals];
    REWRITE_TAC[Seq.size;LENGTH];
    BY(ARITH_TAC);
  DISCH_TAC;
  GEXISTL_TAC [`g'`;`L'`;`N'`];
  ASM_REWRITE_TAC[];
  FULL_EXPAND_TAC "g'";
  COMMENT "add all uniq quot";
  CONJ_TAC;
    FIRST_X_ASSUM_ST `IMAGE` kill;
    FIRST_X_ASSUM_ST `match_quotient_list` MP_TAC;
    REWRITE_TAC[match_quotient_list];
    BY(ASM_MESON_TAC[ all_uniq_seed]);
  nCONJ_TAC 4;
    REPEAT WEAKER_STRIP_TAC;
    REWRITE_TAC[good_faces];
    REPEAT WEAKER_STRIP_TAC;
    ONCE_REWRITE_TAC[Seq.perm_eq_sym];
    TYPIFY `(facesAt (Seed (sizel f - 3)) v) = (facesAt_v2 (Seed (sizel f - 3)) v)` ENOUGH_TO_SHOW_TAC;
      BY(MESON_TAC[Seq.perm_eq_refl]);
    REWRITE_TAC[facesAt_v2];
    MATCH_MP_TAC good_facesAt_seed;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  (REWRITE_TAC[good_vertices_set2_seed]);
  nCONJ_TAC 2;
    TYPIFY `sizel f - 3 = p` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN SUBST1_TAC;
      BY(REWRITE_TAC[seed_planegraphP]);
    FULL_EXPAND_TAC "p";
    FULL_EXPAND_TAC "f";
    BY(REWRITE_TAC[List_hypermap.size_list_pairs]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 1;
    FIRST_X_ASSUM_ST `iso_list` MP_TAC THEN REWRITE_TAC[iso_list;MAP];
    BY(MESON_TAC[]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 0;
    REPLICATE_TAC 2( FIRST_X_ASSUM_ST `iso_list` MP_TAC);
    REWRITE_TAC[iso_list;MAP] THEN REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `MAP` kill;
    BY(FIRST_X_ASSUM_ST `MAP` MP_TAC THEN ASM_REWRITE_TAC[NOT_CONS_NIL]);
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `x=x` kill);
  nCONJ_TAC 1;
    FIRST_X_ASSUM_ST `1` (SUBST1_TAC o GSYM);
    FIRST_X_ASSUM_ST `match_quotient_list` MP_TAC THEN REWRITE_TAC[match_quotient_list] THEN REPEAT WEAKER_STRIP_TAC;
    POP_ASSUM (SUBST1_TAC o GSYM);
    BY(REWRITE_TAC[ seed_size_v_gt_1]);
  ASM_REWRITE_TAC[];
  COMMENT "flag_list";
  MATCH_MP_TAC flag_list_seed;
  TYPIFY `sizel f - 3` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `iso_list (L',[]) (L,[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(MATCH_MP_TAC iso_list_sym_nil THEN ASM_REWRITE_TAC[]);
  TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list]);
  TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_restricted]);
  TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
  ASM_SIMP_TAC[GSYM simple_hypermap_uniq];
  BY(ASM_MESON_TAC[is_restricted])
  ]);;
  (* }}} *)


(*
let max_finals_g_exists = prove_by_refinement(
  `!L p.      good_list L /\
     good_list_nodes L /\
     foldr maxn 0 (MAP sizel L) - 3 = p /\
     is_restricted (hypermap_of_list L) ==>
   (?g' L' N'.  
      match_quotient_list g' L' N' /\
      normal_list L' N' /\
      all uniq (quotient_list L' N') /\
      ~(N' = []) /\
      iso_list (L,[]) (L',[]) /\
        planegraphP p g' /\
          vertices_set2 g' = elements_of_list (fgraph g')  /\
   (!v. v IN vertices_set2 g'
              ==> facesAt g' v = FILTER (\f. MEM v (FST f)) (faces g')) /\    
   (!g'' L'' N''.
      match_quotient_list g'' L'' N'' /\
      normal_list L'' N'' /\
      all uniq (quotient_list L'' N'') /\
      ~(N'' = []) /\
      iso_list (L,[]) (L'',[]) /\
        planegraphP p g'' /\
          vertices_set2 g'' = elements_of_list (fgraph g'')  /\
   (!v. v IN vertices_set2 g''
              ==> facesAt g'' v = FILTER (\f. MEM v (FST f)) (faces g'')) ==>
   sizel (finals g'') <= sizel (finals g')))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `S = IMAGE (\ u. sizel (finals (FST u))) { (g',L',N') | match_quotient_list g' L' N' /\     normal_list L' N' /\  all uniq (quotient_list L' N') /\    ~(N' = []) /\     iso_list (L,[]) (L',[]) /\     planegraphP p g' /\     vertices_set2 g' = elements_of_list (fgraph g') /\     (!v. v IN vertices_set2 g'          ==> facesAt g' v = FILTER (\f. MEM v (FST f)) (faces g'))}`;
  INTRO_TAC Rogers.NUM_FINITE_IMP_MAX_EXISTS [`S`];
  TYPIFY `FINITE S /\ ~(S = {})` ENOUGH_TO_SHOW_TAC;
    SIMP_TAC[];
    DISCH_THEN kill;
    FULL_EXPAND_TAC "S";
    POP_ASSUM kill;
    REWRITE_TAC[IN_IMAGE;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC;
    GEXISTL_TAC [`g'`;`L'`;`N'`];
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `/\` MP_TAC THEN ASM_REWRITE_TAC[];
    DISCH_THEN MATCH_MP_TAC;
    TYPIFY `g'',L'',N''` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    GEXISTL_TAC [`g''`;`L''`;`N''`];
    BY(ASM_REWRITE_TAC[]);
  CONJ_TAC;
    FULL_EXPAND_TAC "S";
    MATCH_MP_TAC FINITE_SUBSET;
    INTRO_TAC bounded_size_finals [`L`];
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `0..n` EXISTS_TAC;
    REWRITE_TAC[FINITE_NUMSEG];
    REWRITE_TAC[SUBSET;IN_IMAGE;IN_ELIM_THM;IN_NUMSEG;arith `0 <= n`];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[EXTENSION;NOT_IN_EMPTY;NOT_FORALL_THM];
  FULL_EXPAND_TAC "S";
  REWRITE_TAC[IN_ELIM_THM;IN_IMAGE];
  (COMMENT "seed exists");
  REBIND_TAC (`x:num`,"n");
  INTRO_TAC foldr_maxn_exists [`MAP sizel L`];
  REWRITE_TAC[MAP_EQ_NIL];
  ASM_REWRITE_TAC[MEM_MAP];
  ANTS_TAC;
    MATCH_MP_TAC is_restricted_nonnil;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x` (RENAME_TAC "l");
  TYPIFY `sizel l -3 = p` (C SUBGOAL_THEN MP_TAC);
    REPLICATE_TAC 2 (FIRST_X_ASSUM MP_TAC) THEN ASM_REWRITE_TAC[];
    FULL_EXPAND_TAC "p";
    BY(MESON_TAC[]);
  REPLICATE_TAC 2 (POP_ASSUM kill);
  DISCH_TAC;
  TYPIFY `1` EXISTS_TAC;
  TYPED_ABBREV_TAC `f = list_pairs l`;
  INTRO_TAC UYOUIXG [`L`;`f`];
  ANTS_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[List_hypermap.list_of_faces;MEM_MAP];
    CONJ2_TAC;
      BY(ASM_MESON_TAC[]);
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `g' = Seed (sizel f - 3)`;
  TYPIFY `g',L',N'` EXISTS_TAC;
  REWRITE_TAC[];
  SUBCONJ_TAC;
    FULL_EXPAND_TAC "g'";
    REWRITE_TAC[seed_finals];
    REWRITE_TAC[Seq.size;LENGTH];
    BY(ARITH_TAC);
  DISCH_TAC;
  GEXISTL_TAC [`g'`;`L'`;`N'`];
  ASM_REWRITE_TAC[];
  FULL_EXPAND_TAC "g'";
  COMMENT "add all uniq quot";
  CONJ_TAC;
    FIRST_X_ASSUM_ST `IMAGE` kill;
    FIRST_X_ASSUM_ST `match_quotient_list` MP_TAC;
    REWRITE_TAC[match_quotient_list];
    BY(ASM_MESON_TAC[ all_uniq_seed]);
  nCONJ_TAC 4;
    REPEAT WEAKER_STRIP_TAC;
    MATCH_MP_TAC good_facesAt_seed;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  (REWRITE_TAC[good_vertices_set2_seed]);
  nCONJ_TAC 2;
    TYPIFY `sizel f - 3 = p` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN SUBST1_TAC;
      BY(REWRITE_TAC[seed_planegraphP]);
    FULL_EXPAND_TAC "p";
    FULL_EXPAND_TAC "f";
    BY(REWRITE_TAC[List_hypermap.size_list_pairs]);
  ASM_REWRITE_TAC[];
  SUBCONJ2_TAC;
    FIRST_X_ASSUM_ST `iso_list` MP_TAC THEN REWRITE_TAC[iso_list;MAP];
    BY(MESON_TAC[]);
  DISCH_TAC;
  REPLICATE_TAC 2( FIRST_X_ASSUM_ST `iso_list` MP_TAC);
  REWRITE_TAC[iso_list;MAP] THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `MAP` kill;
  BY(FIRST_X_ASSUM_ST `MAP` MP_TAC THEN ASM_REWRITE_TAC[NOT_CONS_NIL])
  ]);;
  (* }}} *)
*)

let minimalFace_nonnil = prove_by_refinement(
  `!g L N.
    good_list L /\
    is_edge_nondegenerate (hypermap_of_list L) /\
    all uniq L /\
    normal_list L N /\
    match_quotient_list g L N /\ ~finalGraph g ==>
    ~(FST (minimalFace (nonFinals g)) = [])`,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list];
  REWRITE_TAC[fgraph];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC minimalFace_face [`g`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `MEM (FST (minimalFace (nonFinals g))) (quotient_list L N)` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `quotient_list` (SUBST1_TAC o GSYM);
    BY(ASM_MESON_TAC[MEM_MAP]);
  POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `good_list (quotient_list L N)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC good_list_quotient;
    BY(ASM_REWRITE_TAC[]);
  POP_ASSUM MP_TAC;
  REWRITE_TAC[good_list];
  REWRITE_TAC[GSYM Seq.allP];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

(* next_el_list_pairs_eq was here *)


(* replaced with all_some_generatePolygon:
  and mem_makeFaceFinal_generatePolygon

let not_containsDuplicateEdge_iota = prove_by_refinement(
  `!g f v. ~containsDuplicateEdge g f v (iota 0 (sizel (FST f)))`,
  (* {{{ proof *)
  [
  rt[containsDuplicateEdge]
  rt[containsUnacceptableEdge]
  ...
  ]);;
  (* }}} *)

containsUnacceptableEdge;;

let iota_generatePolygon = prove_by_refinement(
  `!g f v n. 
  (let vs = indexToVertexList f v (iota 0 (sizel (FST f))) in
    MEM (subdivFace g f vs) (generatePolygon (SUC (sizel (FST f))) v f g))`,
  (* {{{ proof *)
  [
  st/r then rt[generatePolygon]
  repeat LET_TAC
  rt[ETA_AX]
  mmp MEMf_MAP
  fexp "vertexLists"
  fexp "vs"
  rt[ETA_AX]
  mmp MEMf_MAP
  fexp "enumeration'"
  rt[MEM_FILTER]
  fexp "enumeration"
  ...
  ]);;
  (* }}} *)

*)

(* final_dart_list_final_list was here *)


(* we put ~final_list L r into the hypotheses.
   If ~finalGraph g /\ final_list L r, then we
  produce a matched list using a trivial_enumeration on generatePolygon
  enumeration
*)

let HKBGWJI = prove_by_refinement(
  `!L N r x g.
    good_list L /\
    good_list_nodes L /\
    is_restricted (hypermap_of_list L) /\
    normal_list L N /\
    ~(finalGraph g) /\
    ~final_list L r /\
    all uniq (quotient_list L N) /\
    all (\v. sizel (filter (MEM v) (quotient_list L N)) > 1) 
       (flatten (quotient_list L N)) /\
    flag_list L N /\
    match_quotient_list g L N /\
    (r,x) = loop_choice g L N ==>
  marked_list L N r x`,
  (* {{{ proof *)
  [
  REWRITE_TAC[marked_list;LET_THM];
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[flag_list_s_flag_list];
  POP_ASSUM MP_TAC THEN REWRITE_TAC[loop_choice] THEN REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "r'";
  INTRO_TAC (* Dpzgbyf. *) mem_minimalFace_nonFinals [`g`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[finalGraph]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC mem_minimalVertex [`g`;`f`];
  TYPIFY `    is_edge_nondegenerate (hypermap_of_list L) /\     all uniq L` (C SUBGOAL_THEN ASSUME_TAC);
    CONJ_TAC;
      BY(ASM_MESON_TAC[is_restricted]);
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[minimalFace_nonnil]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `nextVertex` MP_TAC;
  ASM_SIMP_TAC[nextVertex_next_el];
  DISCH_TAC;
  INTRO_TAC next_el_list_pairs_eq [`v`;`FST f`];
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `LAST` (ASSUME_TAC o GSYM);
  ASM_REWRITE_TAC[];
  TYPIFY `all uniq (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[nonFinals_fgraph]);
  TYPIFY `uniq (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  ASM_REWRITE_TAC[] THEN DISCH_TAC;
  FULL_EXPAND_TAC "p";
  TYPIFY `MEM d (list_of_darts (fgraph g))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Rxokskc.MEM_LIST_DARTS]);
  TYPIFY `MEM d (list_of_darts (quotient_list L N))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  FIRST_ASSUM MP_TAC;
  GMATCH_SIMP_TAC mem_list_of_darts_quotient THEN ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `uniq r' /\ ~(r' = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
  TYPIFY `MEM (LAST p) r' /\ uniq (flatten N)` (C SUBGOAL_THEN MP_TAC);
    CONJ_TAC;
      INTRO_TAC parts_flatten [`L`;`r'`];
      ASM_REWRITE_TAC[];
      DISCH_THEN (SUBST1_TAC o GSYM);
      REWRITE_TAC[Seq2.mem_flatten];
      TYPIFY `p` EXISTS_TAC;
      ASM_REWRITE_TAC[];
      MATCH_MP_TAC MEM_LAST;
      BY(ASM_MESON_TAC[parts_uniq_nonnil]);
    BY(ASM_MESON_TAC[normal_list]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `r = r'` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `x = x` kill;
    FULL_EXPAND_TAC "r";
    MATCH_MP_TAC find_list_uniq;
    BY(ASM_REWRITE_TAC[]);
  FULL_EXPAND_TAC "r'";
  ASM_REWRITE_TAC[];
  TYPIFY `uniq p /\ ~(p = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[parts_uniq_nonnil]);
  TYPIFY `MEM (LAST p) p` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[MEM_LAST]);
  FIRST_X_ASSUM_ST `d = LAST p` (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "d";
  TYPIFY `find_list (parts L r) (LAST p) = p` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC find_list_uniq;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC parts_flatten;
    BY(ASM_REWRITE_TAC[]);
  REPEAT (FIRST_X_ASSUM_ST `x = x` kill);
  TYPIFY `LAST p = x` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "x";
    BY(ASM_REWRITE_TAC[]);
  FULL_EXPAND_TAC "x";
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[normal_list_parts_next_last]);
  DISCH_TAC;
  COMMENT "last subgoal";
  MATCH_MP_TAC final_dart_list_final_list;
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `flag_list` MP_TAC THEN REWRITE_TAC[flag_list] THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let loop_choice_props = prove_by_refinement(
  `!L N r x g f v.
    good_list L /\
    good_list_nodes L /\
    is_restricted (hypermap_of_list L) /\
    normal_list L N /\
    ~(finalGraph g) /\
    all uniq (quotient_list L N) /\
    match_quotient_list g L N /\
    minimalFace (nonFinals g) = f /\
    minimalVertex g f = v /\
    (r,x) = loop_choice g L N ==>
    (MEM r N /\
    MEM x r /\
    MEM x (list_of_darts (fgraph g)) /\
    (v,next_el (FST f) v) = x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[marked_list;LET_THM];
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[flag_list_s_flag_list];
  POP_ASSUM MP_TAC THEN REWRITE_TAC[loop_choice] THEN REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "r'";
  INTRO_TAC (* Dpzgbyf. *) mem_minimalFace_nonFinals [`g`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[finalGraph]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC mem_minimalVertex [`g`;`f`];
  TYPIFY `    is_edge_nondegenerate (hypermap_of_list L) /\     all uniq L` (C SUBGOAL_THEN ASSUME_TAC);
    CONJ_TAC;
      BY(ASM_MESON_TAC[is_restricted]);
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[minimalFace_nonnil]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `f = f'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[]);
  FULL_EXPAND_TAC "f'";
  TYPIFY `v = v'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[]);
  FULL_EXPAND_TAC "v'";
  FIRST_X_ASSUM_ST `nextVertex` MP_TAC;
  ASM_SIMP_TAC[nextVertex_next_el];
  DISCH_TAC;
  INTRO_TAC next_el_list_pairs_eq [`v`;`FST f`];
  ASM_REWRITE_TAC[];
  TYPIFY `all uniq (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[nonFinals_fgraph]);
  TYPIFY `uniq (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  ASM_REWRITE_TAC[] THEN DISCH_TAC;
  FULL_EXPAND_TAC "p";
  TYPIFY `MEM d (list_of_darts (fgraph g))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Rxokskc.MEM_LIST_DARTS]);
  TYPIFY `MEM d (list_of_darts (quotient_list L N))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  FIRST_ASSUM MP_TAC;
  GMATCH_SIMP_TAC mem_list_of_darts_quotient THEN ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `uniq r' /\ ~(r' = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
  TYPIFY `MEM (LAST p) r' /\ uniq (flatten N)` (C SUBGOAL_THEN MP_TAC);
    CONJ_TAC;
      INTRO_TAC parts_flatten [`L`;`r'`];
      ASM_REWRITE_TAC[];
      DISCH_THEN (SUBST1_TAC o GSYM);
      REWRITE_TAC[Seq2.mem_flatten];
      TYPIFY `p` EXISTS_TAC;
      ASM_REWRITE_TAC[];
      MATCH_MP_TAC MEM_LAST;
      BY(ASM_MESON_TAC[parts_uniq_nonnil]);
    BY(ASM_MESON_TAC[normal_list]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `r = r'` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT (FIRST_X_ASSUM_ST `x = x` kill);
    FULL_EXPAND_TAC "r";
    MATCH_MP_TAC find_list_uniq;
    BY(ASM_REWRITE_TAC[]);
  FULL_EXPAND_TAC "r'";
  ASM_REWRITE_TAC[];
  TYPIFY `uniq p /\ ~(p = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[parts_uniq_nonnil]);
  TYPIFY `MEM (LAST p) p` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[MEM_LAST]);
  FIRST_X_ASSUM_ST `d = LAST p` (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "d";
  TYPIFY `find_list (parts L r) (LAST p) = p` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC find_list_uniq;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC parts_flatten;
    BY(ASM_REWRITE_TAC[]);
  REPEAT (FIRST_X_ASSUM_ST `x = x` kill);
  TYPIFY `LAST p = x` (C SUBGOAL_THEN ASSUME_TAC);
    BY((ASM_REWRITE_TAC[]));
  FULL_EXPAND_TAC "x";
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

(*
let loop_choice_props2 = prove_by_refinement(
  `!L N r x g f v.
    good_list L /\
    good_list_nodes L /\
    is_restricted (hypermap_of_list L) /\
    normal_list L N /\
    ~(finalGraph g) /\
    all uniq (quotient_list L N) /\
    match_quotient_list g L N /\
    minimalFace (nonFinals g) = f /\
    minimalVertex g f = v /\
    (r,x) = loop_choice g L N ==>
    (MEM r N /\
    MEM x r /\
    MEM x (list_of_darts (fgraph g)) /\
    (v,next_el (FST f) v) = x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[marked_list;LET_THM];
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[flag_list_s_flag_list];
  POP_ASSUM MP_TAC THEN REWRITE_TAC[loop_choice] THEN REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "r'";
  INTRO_TAC (* Dpzgbyf. *) mem_minimalFace_nonFinals [`g`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[finalGraph]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC mem_minimalVertex [`g`;`f`];
  TYPIFY `    is_edge_nondegenerate (hypermap_of_list L) /\     all uniq L` (C SUBGOAL_THEN ASSUME_TAC);
    CONJ_TAC;
      BY(ASM_MESON_TAC[is_restricted]);
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[minimalFace_nonnil]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `f = f'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[]);
  FULL_EXPAND_TAC "f'";
  TYPIFY `v = v'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[]);
  FULL_EXPAND_TAC "v'";
  FIRST_X_ASSUM_ST `nextVertex` MP_TAC;
  ASM_SIMP_TAC[nextVertex_next_el];
  DISCH_TAC;
  INTRO_TAC next_el_list_pairs_eq [`v`;`FST f`];
  ASM_REWRITE_TAC[];
  TYPIFY `all uniq (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[nonFinals_fgraph]);
  TYPIFY `uniq (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  ASM_REWRITE_TAC[] THEN DISCH_TAC;
  FULL_EXPAND_TAC "p";
  TYPIFY `MEM d (list_of_darts (fgraph g))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Rxokskc.MEM_LIST_DARTS]);
  TYPIFY `MEM d (list_of_darts (quotient_list L N))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  FIRST_ASSUM MP_TAC;
  GMATCH_SIMP_TAC mem_list_of_darts_quotient THEN ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `uniq r' /\ ~(r' = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
  TYPIFY `MEM (LAST p) r' /\ uniq (flatten N)` (C SUBGOAL_THEN MP_TAC);
    CONJ_TAC;
      INTRO_TAC parts_flatten [`L`;`r'`];
      ASM_REWRITE_TAC[];
      DISCH_THEN (SUBST1_TAC o GSYM);
      REWRITE_TAC[Seq2.mem_flatten];
      TYPIFY `p` EXISTS_TAC;
      ASM_REWRITE_TAC[];
      MATCH_MP_TAC MEM_LAST;
      BY(ASM_MESON_TAC[parts_uniq_nonnil]);
    BY(ASM_MESON_TAC[normal_list]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `r = r'` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT (FIRST_X_ASSUM_ST `x = x` kill);
    FULL_EXPAND_TAC "r";
    MATCH_MP_TAC find_list_uniq;
    BY(ASM_REWRITE_TAC[]);
  FULL_EXPAND_TAC "r'";
  ASM_REWRITE_TAC[];
  TYPIFY `uniq p /\ ~(p = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[parts_uniq_nonnil]);
  TYPIFY `MEM (LAST p) p` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[MEM_LAST]);
  FIRST_X_ASSUM_ST `d = LAST p` (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "d";
  TYPIFY `find_list (parts L r) (LAST p) = p` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC find_list_uniq;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC parts_flatten;
    BY(ASM_REWRITE_TAC[]);
  REPEAT (FIRST_X_ASSUM_ST `x = x` kill);
  TYPIFY `LAST p = x` (C SUBGOAL_THEN ASSUME_TAC);
    BY((ASM_REWRITE_TAC[]));
  FULL_EXPAND_TAC "x";
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)
*)

let RTranCl_trans = prove_by_refinement(
  `!suc (g0:A) g1 g2. g0,g1 IN RTranCl suc /\ MEM g2 (suc g1) ==>
    g0,g2 IN RTranCl suc`,
  (* {{{ proof *)
  [
  REWRITE_TAC[RTranCl;CURRY_DEF;UNCURRY_DEF;IN;RTC_REFL];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC RTC_RULES [`(\ (x:A) (y:A). MEM y (suc x))`];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  TYPIFY `g1` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC RTC_INC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let planegraphP_trans = prove_by_refinement(
  `!g g' p. planegraphP p g /\    
    MEM g' (next_plane p g) ==>
    planegraphP p g'`,
  (* {{{ proof *)
  [
  REWRITE_TAC[planegraphP];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC RTranCl_trans;
  TYPIFY `g` EXISTS_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let makeFaceFinal_planegraphP = prove_by_refinement(
  `!f g p v. planegraphP p g /\
    ~(finalGraph g) /\
    minimalFace (nonFinals g) = f /\
    minimalVertex g f = v /\
    3 <= sizel (FST f) /\
    sizel (FST f) <= p + 3 /\
    MEM v (FST f) /\
    MEM (FST f) (fgraph g) /\
    all uniq (fgraph g) /\
    good_faces_v3 g /\ 
    vertices_set2 g = elements_of_list (fgraph g) 
    ==> planegraphP p (makeFaceFinal f g)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[finalGraph];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC planegraphP_trans;
  TYPIFY `g` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[next_plane];
  REPEAT LET_TAC;
  TYPIFY `f = f'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[]);
  FULL_EXPAND_TAC "f'";
  TYPIFY `v = v'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[]);
  FULL_EXPAND_TAC "v'";
  ASM_REWRITE_TAC[Seq2.mem_flatten];
  TYPIFY `generatePolygon (sizel (FST f)) v f g` EXISTS_TAC;
  REWRITE_TAC[MEM_MAP];
  CONJ_TAC;
    TYPIFY `sizel (FST f)` EXISTS_TAC;
    REWRITE_TAC[Tame_defs.upt;Seq.mem_iota];
    TYPIFY `3 + SUC (maxGon p) - 3 = p+4` (C SUBGOAL_THEN SUBST1_TAC);
      REWRITE_TAC[maxGon];
      BY(ARITH_TAC);
    BY(ASM_SIMP_TAC[arith `n <= p+3 ==> n < p+4`]);
  MATCH_MP_TAC mem_makeFaceFinal_generatePolygon;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let sizel_faceListAt_seed = prove_by_refinement(
  `!p. sizel (faceListAt (Seed p)) = countVertices (Seed p)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[SEED;graphl;LET_THM;FACE_LIST_AT;countVertices];
  BY(REWRITE_TAC[upper_case;LENGTH_REPLICATE])
  ]);;
  (* }}} *)

let sizel_faceListAt = prove_by_refinement(
  `!g. planegraph g ==>
    sizel (faceListAt g) = countVertices g`,
  (* {{{ proof *)
  [
  MATCH_MP_TAC Dpzgbyf.planegraph_induct;
  REWRITE_TAC[sizel_faceListAt_seed];
  REPEAT GEN_TAC;
  REPEAT LET_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM (MP_TAC o (MATCH_MP Dpzgbyf.MEM_generatePolygon));
  REWRITE_TAC[subdivFace];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM SUBST1_TAC;
  INTRO_TAC Dpzgbyf.subdivFace0_induct [`\g. sizel (faceListAt g) = countVertices g`];
  REWRITE_TAC[IMP_IMP_THM];
  DISCH_THEN MATCH_MP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[faceListAt_makeFaceFinal;countVertices_makeFaceFinal];
  CONJ_TAC;
    BY(REWRITE_TAC[lower_case;Seq.size_map]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[splitFace];
  REPEAT LET_TAC;
  POP_ASSUM MP_TAC THEN REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "g''";
  REWRITE_TAC[countVertices;FACE_LIST_AT];
  POP_ASSUM kill;
  FULL_EXPAND_TAC "Fs'''''";
  REWRITE_TAC[lower_case;Seq.size_cat];
  FULL_EXPAND_TAC "Fs''''";
  MATCH_MP_TAC (arith `a = a' /\ b = b' ==> (a + b = a' + b':num)`);
  CONJ2_TAC;
    BY(REWRITE_TAC[upper_case;LENGTH_REPLICATE]);
  FULL_EXPAND_TAC "n'";
  REPEAT (FIRST_X_ASSUM_ST `x=x` kill);
  FIRST_X_ASSUM_ST `sizel Fs = countVertices g'` (SUBST1_TAC o GSYM);
  REWRITE_TAC[size_replacefacesAt];
  FULL_EXPAND_TAC "Fs'''";
  REWRITE_TAC[size_replacefacesAt];
  FULL_EXPAND_TAC "Fs''";
  REWRITE_TAC[size_replacefacesAt];
  FULL_EXPAND_TAC "Fs'";
  BY(REWRITE_TAC[size_replacefacesAt])
  ]);;
  (* }}} *)

let perm_eq_replace_hd = prove_by_refinement(
  `!x f s. MEM x s ==> (?s'. perm_eq s s' /\ HD s' = x /\ perm_eq (replace x f s) (replace x f s'))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC cat_to_fst [`x`;`s`];
  ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  GEXISTL_TAC [`cat b a`];
  ASM_REWRITE_TAC[];
  ONCE_REWRITE_TAC[Seq.perm_catC];
  REWRITE_TAC[Seq.perm_eq_refl];
  SUBCONJ_TAC;
    BY(ASM_SIMP_TAC[hd_cat]);
  DISCH_TAC;
  TYPIFY `replace (HD b) f (cat b a) = replace (HD (cat b a)) f (cat b a)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_MESON_TAC[]);
  GMATCH_SIMP_TAC replace_hd;
  GMATCH_SIMP_TAC replace_cat2;
  GMATCH_SIMP_TAC replace_hd;
  ASM_REWRITE_TAC[cat_eq_nil];
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[]);
  DISCH_TAC;
  GMATCH_SIMP_TAC cat_tl;
  ASM_REWRITE_TAC[];
  TYPIFY `perm_eq (cat a (cat f (TL b))) (cat (cat f (TL b)) a)` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[Seq.perm_catC;Seq.perm_eq_refl]);
  BY(SIMP_TAC[Seq.catA])
  ]);;
  (* }}} *)

let perm_eq_replace = prove_by_refinement(
  `!f g (a:A) b. perm_eq f g ==> perm_eq (replace a b f) (replace a b g)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM a f <=> MEM a g` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.perm_eq_mem]);
  TYPIFY `~MEM a f` ASM_CASES_TAC;
    REPEAT (GMATCH_SIMP_TAC replace_id);
    BY(ASM_MESON_TAC[]);
  REPEAT (POP_ASSUM MP_TAC) THEN SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC perm_eq_replace_hd [`a`;`b`;`f`];
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC perm_eq_replace_hd [`a`;`b`;`g`];
  ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `perm_eq s' s''` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.perm_eq_trans;Seq.perm_eq_sym]);
  TYPIFY `perm_eq (replace a b s') (replace a b s'')` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[Seq.perm_eq_trans;Seq.perm_eq_sym]);
  TYPIFY `!f g. perm_eq f g /\ HD f = a /\ HD g = a ==> perm_eq (replace a b f) (replace a b g)` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  REPEAT (POP_ASSUM kill);
  REPEAT GEN_TAC;
  TYPIFY `f  = []` ASM_CASES_TAC;
    BY(ASM_MESON_TAC[replace;Seq2.perm_eq0l]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `~(g = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.size_eq0;Seq.perm_eq_size]);
  TYPIFY_GOAL_THEN `replace a b f = cat b (TL f) /\ replace a b g = cat b (TL g)` (unlist REWRITE_TAC);
    BY(ASM_MESON_TAC[replace_hd]);
  REWRITE_TAC[Seq.perm_cat2l];
  BY(ASM_MESON_TAC[Seq.perm_cons;CONS_HD_TL])
  ]);;
  (* }}} *)

let facesAt_filter_makeFaceFinal = prove_by_refinement(
  `!g g' f. 
   makeFaceFinal f g = g' /\
    planegraph g /\
    good_faces_v3 g 
  ==>
    good_faces_v3 g'
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[facesAt;good_faces];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `v IN vertices_set2 g` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[vertices_set2_makeFaceFinal]);
  FULL_EXPAND_TAC "g'";
  REWRITE_TAC[faceListAt_makeFaceFinal;faces_makeFaceFinal];
  GMATCH_SIMP_TAC EL_MAP;
  REWRITE_TAC[lower_case];
  GMATCH_SIMP_TAC sizel_faceListAt;
  ASM_REWRITE_TAC[];
  (ASM_REWRITE_TAC[vertices_set2_countVertices]);
  FIRST_X_ASSUM (C INTRO_TAC [`v`]) THEN ASM_REWRITE_TAC[];
  REWRITE_TAC[facesAt_v2];
  REWRITE_TAC[lower_case;faces_makeFaceFinal];
  REWRITE_TAC[makeFaceFinalFaceList];
  REWRITE_TAC[mem_fst_setFinal];
  DISCH_TAC;
  MATCH_MP_TAC perm_eq_replace;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let is_restricted_size_face2 = prove_by_refinement(
  `!L f. good_list L /\
  is_restricted (hypermap_of_list L) /\
    MEM f (list_of_faces L) ==>
    3 <= sizel f /\ sizel f <= foldr maxn 0 (MAP sizel L)`,
  (* {{{ proof *)
  [
  ONCE_REWRITE_TAC[GSYM map_size_list_of_faces];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC is_restricted_size_face [`L`;`f`];
  ASM_SIMP_TAC[];
  DISCH_TAC;
  MATCH_MP_TAC foldr_size_max;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

(* list_pairs_core was here *)

let final_list_quotient_list_rot = prove_by_refinement(
  `!L N fq r v. 
    good_list L /\
    is_edge_nondegenerate (hypermap_of_list L) /\
    final_list L r /\ 
    MEM v fq /\
    uniq fq /\
    MEM (v,next_el fq v) r /\ MEM r N /\
    normal_list L N /\
    all uniq L /\ 
    MEM fq (quotient_list L N) ==>
    (MAP FST r = fq /\ (?n. MEM (rot n fq) L))
    `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `x = v,next_el fq v`;
  TYPIFY `uniq r /\ ~(r = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
  TYPIFY `MEM x (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_list_of_darts;Seq.allP;Seq2.mem_flatten]);
  INTRO_TAC final_list_rot [`L`;`r`;`x`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC final_list_core [`L`;`r`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[normal_list_list_of_darts;Seq.allP;Seq2.mem_flatten]);
  DISCH_TAC;
  FIRST_ASSUM_ST `quotient_list` MP_TAC;
  REWRITE_TAC[quotient_list_core];
  REWRITE_TAC[MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x'` (RENAME_TAC "r1");
  INTRO_TAC good_list_quotient [`L`;`N`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `r1 = r` ENOUGH_TO_SHOW_TAC;
    ASM_SIMP_TAC[];
    ASM_REWRITE_TAC[GSYM Seq.map_rot;lower_case];
    DISCH_TAC;
    TYPIFY `n` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    INTRO_TAC fst_list_of_faces [`L`];
    TYPED_ABBREV_TAC `f = find_face L x`;
    DISCH_THEN (SUBST1_TAC o GSYM);
    REWRITE_TAC[upper_case];
    MATCH_MP_TAC MEMf_MAP;
    FULL_EXPAND_TAC "f";
    MATCH_MP_TAC List_hypermap.mem_find_face;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `MEM x r1` ENOUGH_TO_SHOW_TAC;
    REPEAT WEAKER_STRIP_TAC;
    MATCH_MP_TAC List_hypermap.uniq_sublist_unique;
    GEXISTL_TAC [`N`;`x`];
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[normal_list]);
  REPEAT (TYPIFY `r` (C FIRST_X_VAR kill));
  TYPIFY `MEM x (list_pairs (core L r1))` (C SUBGOAL_THEN MP_TAC);
    FIRST_X_ASSUM_ST `core` (SUBST1_TAC o GSYM);
    FULL_EXPAND_TAC "x";
    MATCH_MP_TAC next_el_list_pairs_eq;
    BY(ASM_REWRITE_TAC[]);
  GMATCH_SIMP_TAC list_pairs_core;
  CONJ_TAC;
    BY(TYPIFY `N` EXISTS_TAC THEN ASM_REWRITE_TAC[]);
  REWRITE_TAC[MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC parts_uniq_nonnil [`L`;`N`;`r1`;`x'`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  BY(ASM_SIMP_TAC[MEM_LAST])
  ]);;
  (* }}} *)

let mem_faces_makeFaceFinal = prove_by_refinement(
  `!g f f'. 
     (MEM f' (filter SND (faces (makeFaceFinal f g))) ==> 
    (f' = setFinal f) \/ MEM f' (filter SND (faces g)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[makeFaceFinal;faces_graph;makeFaceFinalFaceList];
  GEN_TAC;
  TYPED_ABBREV_TAC `vs = faces g`;
  TYPIFY `vs` SPEC1_TAC;
  POP_ASSUM kill;
  LIST_INDUCT_TAC THEN REWRITE_TAC[replace;Seq.filter_nil;MEM];
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM MP_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[MEM;Seq.filter_cons];
    COND_CASES_TAC THEN ASM_REWRITE_TAC[MEM;lower_case;Seq.filter_cat;Seq.mem_cat];
      REWRITE_TAC[Seq.filter_cons;Seq.filter_nil;snd_setFinal;MEM];
      BY(MESON_TAC[]);
    BY(REWRITE_TAC[Seq.filter_cons;Seq.filter_nil;snd_setFinal;MEM]);
  COND_CASES_TAC THEN ASM_REWRITE_TAC[MEM];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let mem_makeFaceFinal_planeGraphP_etc = prove_by_refinement(
  `!g L N p.  
    ~finalGraph g /\
    all uniq (fgraph g) /\
    good_list L /\
    normal_list L N /\
    ~(N=[]) /\
    planegraphP p g /\
    foldr maxn 0 (MAP sizel L) - 3 = p /\
    match_quotient_list g L N /\
    is_restricted (hypermap_of_list L) /\
    all uniq (quotient_list L N) /\
    final_list L (FST (loop_choice g L N)) /\
    good_list L /\
    good_list_nodes L /\
    vertices_set2 g = elements_of_list (fgraph g) /\
    good_faces_v3 g 
    ==> (?g'. 
	   match_quotient_list g' L N /\
	   planegraphP p g' /\
	   vertices_set2 g' = elements_of_list (fgraph g') /\
	good_faces_v3 g' /\
	  sizel (finals g) < sizel (finals g'))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `rx = loop_choice g L N`;
  TYPED_ABBREV_TAC `f = minimalFace (nonFinals g)`;
  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_minimalFace_fgraph]);
  TYPIFY `makeFaceFinal f g` EXISTS_TAC;
  TYPED_ABBREV_TAC `v = minimalVertex (g) f`;
  INTRO_TAC loop_choice_props [`L`;`N`;`FST rx`;`SND rx`;`g`;`f`;`v`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `is_edge_nondegenerate (hypermap_of_list L)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[is_restricted]);
  TYPIFY `all uniq L` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[simple_hypermap_all_uniq;is_restricted]);
  INTRO_TAC final_list_rot [`L`;`FST rx`;`SND rx`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
    MATCH_MP_TAC list_of_darts_quotient_darts;
    TYPIFY `N` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[match_quotient_list]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `sizel (FST rx) = sizel (find_face L (SND rx))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(POP_ASSUM (SUBST1_TAC o GSYM) THEN REWRITE_TAC[Seq.size_rot]);
  TYPIFY `MEM (find_face L (SND rx)) (list_of_faces L)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[List_hypermap.mem_find_face]);
  TYPED_ABBREV_TAC `f' = find_face L (SND rx)`;
  INTRO_TAC is_restricted_size_face2 [`L`;`f'`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  INTRO_TAC Dpzgbyf.planegraph_all_nonempty [`g`];
  ANTS_TAC;
    MATCH_MP_TAC Dpzgbyf.DPZGBYF;
    BY(ASM_MESON_TAC[planegraph_P]);
  DISCH_TAC;
  TYPIFY `~(FST f = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPIFY `MEM v (FST f)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "v";
    MATCH_MP_TAC mem_minimalVertex;
    BY(ASM_REWRITE_TAC[]);
  INTRO_TAC final_list_quotient_list_rot [`L`;`N`;`FST f`;`FST rx`;`v`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    SUBCONJ2_TAC;
      BY(ASM_MESON_TAC[match_quotient_list]);
    BY(ASM_MESON_TAC[Seq.allP]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `3 <= sizel (FST f) /\ sizel (FST f) <= p + 3` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC is_restricted_size_face [`L`;`list_pairs (rot n' (FST f))`];
    ASM_REWRITE_TAC[];
    SUBANTS_TAC;
      REWRITE_TAC[List_hypermap.list_of_faces];
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    REWRITE_TAC[List_hypermap.size_list_pairs;Seq.size_rot];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    INTRO_TAC foldr_size_max [`L`;`rot n' (FST f)`];
    ASM_REWRITE_TAC[];
    REWRITE_TAC[Seq.size_rot];
    BY(REPEAT (FIRST_X_ASSUM_ST `3` MP_TAC) THEN ARITH_TAC);
  nCONJ_TAC 1;
    MATCH_MP_TAC makeFaceFinal_planegraphP;
    BY(TYPIFY `v` EXISTS_TAC THEN ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  TYPIFY `planegraph (makeFaceFinal f g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(POP_ASSUM MP_TAC THEN MESON_TAC[planegraph_P]);
  TYPIFY `planegraph (g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REPEAT (FIRST_X_ASSUM_ST `planegraphP` MP_TAC) THEN MESON_TAC[planegraph_P]);
  nCONJ_TAC 2;
    MATCH_MP_TAC facesAt_filter_makeFaceFinal;
    GEXISTL_TAC [`g`;`f`];
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 1;
    REWRITE_TAC[vertices_set2_makeFaceFinal];
    BY(ASM_REWRITE_TAC[fgraph_makeFaceFinal]);
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC makeFaceFinal_mono;
  INTRO_TAC (* Dpzgbyf. *) mem_minimalFace_nonFinals [`g`] THEN ASM_REWRITE_TAC[GSYM finalGraph];
  REWRITE_TAC[nonFinals;MEM_FILTER];
  SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "match_quotient_list";
  REWRITE_TAC[match_quotient_list];
  ASM_REWRITE_TAC[fgraph_makeFaceFinal];
  nCONJ_TAC 1;
    BY(ASM_MESON_TAC[match_quotient_list]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[SUBSET;IN_SET_OF_LIST];
  GEN_TAC;
  REWRITE_TAC[MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (ASSUME_TAC o MATCH_MP mem_faces_makeFaceFinal);
  TYPIFY `FST (setFinal f) = FST f` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[fst_setFinal]);
  TYPIFY `MEM x' (filter SND (faces g))` ASM_CASES_TAC;
    FIRST_X_ASSUM_ST `match_quotient_list` MP_TAC;
    REWRITE_TAC[match_quotient_list];
    REWRITE_TAC[SUBSET;IN_SET_OF_LIST];
    REPEAT WEAKER_STRIP_TAC THEN FIRST_X_ASSUM MATCH_MP_TAC;
    BY(REWRITE_TAC[MEM_MAP] THEN REPLICATE_TAC 5 (POP_ASSUM MP_TAC) THEN MESON_TAC[]);
  FIRST_X_ASSUM_ST ` \/ ` MP_TAC THEN ASM_REWRITE_TAC[];
  DISCH_THEN (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "x'";
  ASM_REWRITE_TAC[o_THM];
  TYPIFY `list_pairs (FST f) = FST rx` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN SUBST1_TAC;
    BY(ASM_REWRITE_TAC[Seq.mem_filter]);
  TYPED_ABBREV_TAC `r = FST rx`;
  FIRST_X_ASSUM_ST `MAP FST r = FST f` (ASSUME_TAC o GSYM);
  ASM_REWRITE_TAC[];
  TYPIFY `?m. rot m f' = r` (C SUBGOAL_THEN MP_TAC);
    ONCE_REWRITE_TAC[rot_sym];
    BY(TYPIFY `n` EXISTS_TAC THEN ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC THEN FULL_EXPAND_TAC "r";
  REWRITE_TAC[Seq.map_rot;lower_case];
  REWRITE_TAC[GSYM List_hypermap.rot_list_pairs];
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  FIRST_X_ASSUM_ST `list_of_faces` MP_TAC;
  REWRITE_TAC[List_hypermap.list_of_faces];
  REWRITE_TAC[MEM_MAP] THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  BY(REWRITE_TAC[upper_case;fst_list_pairs])
  ]);;
  (* }}} *)

(* let minimalVertex_in_minimalFace = 0;; *)
(* use mem_minimalVertex :
let minimalVertex_in_minimalFace = prove_by_refinement(
  `!g. 
     (let f = minimalFace (nonFinals g) in
	~(FST f = []) ==> MEM (minimalVertex g f) (FST f))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LET_TAC;
  REWRITE_TAC[minimalVertex];
  BY(ASM_SIMP_TAC[ mem_minimal_el])
  ]);;
  (* }}} *)
*)

let loop_choice_crit = prove_by_refinement(
  `!g L N f v w r p x.
     good_list L /\
         good_list_nodes L /\
         is_restricted (hypermap_of_list L) /\
         normal_list L N /\
         ~finalGraph g /\
         all uniq (quotient_list L N) /\
         match_quotient_list g L N /\
    minimalFace (nonFinals g) = f /\
    minimalVertex g f = v /\
    next_el (FST f) v = w /\
    (v,w) = x /\
    MEM x r /\
    MEM r N /\
    MEM x (list_of_darts (fgraph g)) ==>
    loop_choice g L N = r,x
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ONCE_REWRITE_TAC[PAIR_EQ2];
  REWRITE_TAC[FST;SND];
  TYPED_ABBREV_TAC `r' = FST (loop_choice g L N)`;
  TYPED_ABBREV_TAC `x' = SND (loop_choice g L N)`;
  INTRO_TAC loop_choice_props [`L`;`N`;`r'`;`x'`;`g`;`f`;`v`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    ONCE_REWRITE_TAC[PAIR_EQ2];
    BY(ASM_REWRITE_TAC[FST;SND]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC loop_choice [`g`;`L`;`N`];
  ASM_REWRITE_TAC[LET_THM];
  INTRO_TAC minimalFace_nonnil [`g`;`L`;`N`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[is_restricted;is_restricted_all_uniq]);
  DISCH_TAC THEN DISCH_TAC;
  FULL_EXPAND_TAC "x'";
  INTRO_TAC nextVertex_next_el [`f`;`v`];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[ mem_minimalVertex]);
  ASM_SIMP_TAC[];
  FULL_EXPAND_TAC "r'";
  SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC find_list_uniq;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[normal_list])
  ]);;
  (* }}} *)

let marked_list_x_quotient = prove_by_refinement(
  `!L N r x. normal_list L N /\
            is_edge_nondegenerate (hypermap_of_list L) /\
            good_list L /\
            all uniq L /\
    marked_list L N r x ==> 
    MEM x (list_of_darts (quotient_list L N))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[list_of_darts_quotient];
  TYPIFY `MEM x r /\ MEM r N` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_list]);
  TYPIFY `uniq r /\ ~(r = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
  TYPIFY `MEM x (flatten (parts L r))` (C SUBGOAL_THEN MP_TAC);
    BY(ASM_SIMP_TAC[ parts_flatten]);
  REWRITE_TAC[Seq2.mem_flatten] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `l` (RENAME_TAC "p");
  TYPIFY `LAST p = x` (C SUBGOAL_THEN ASSUME_TAC);
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    PROOF_BY_CONTR_TAC;
    INTRO_TAC parts_next_unlast [`L`;`r`];
    ASM_REWRITE_TAC[GSYM Seq.allP];
    DISCH_THEN (C INTRO_TAC [`p`]) THEN ASM_REWRITE_TAC[];
    DISCH_THEN (C INTRO_TAC [`x`]) THEN ASM_REWRITE_TAC[];
    TYPIFY `next_el r x = f_list L x` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[marked_list]);
    POP_ASSUM MP_TAC THEN INTRO_TAC next_el_parts_unlast [`L`;`r`;`p`;`x`];
    ASM_SIMP_TAC[];
    TYPIFY `MEM x (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[Pplhulj.marked_list_of_dart]);
    BY(ASM_MESON_TAC[edge_nondeg_f_xor_ni]);
  FULL_EXPAND_TAC "x";
  MATCH_MP_TAC MEMf_MAP;
  REWRITE_TAC[Seq2.mem_flatten;MEM_MAP];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let iso_list_x = prove_by_refinement(
  `!g L N r x L' N' r' x'.
    normal_list L N /\
         is_edge_nondegenerate (hypermap_of_list L) /\
         good_list L /\
         all uniq L /\
    normal_list L' N' /\
         is_edge_nondegenerate (hypermap_of_list L') /\
         good_list L' /\
         all uniq L' /\
    marked_list L N r x /\
    marked_list L' N' r' x' /\
    match_quotient_list g L N /\
    match_quotient_list g L' N' /\
   iso_list (L,([x] :: r :: N)) (L',([x'] :: r' :: N')) ==>
    x = x'`,
  (* {{{ proof *)
  [
  REWRITE_TAC[match_quotient_list];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `quotient_list L' N' = quotient_list L N` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[]);
  INTRO_TAC marked_list_x_quotient [`L`;`N`;`r`;`x`];
  INTRO_TAC marked_list_x_quotient [`L'`;`N'`;`r'`;`x'`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `?phi. isop_list phi (L,([x] :: r :: N)) (L',([x'] :: r' :: N'))` (C SUBGOAL_THEN MP_TAC);
    BY(ASM_MESON_TAC[isop_list_iso_list]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC isop_list_quotient [`phi`;`L`;`N`;`L'`;`N'`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    POP_ASSUM MP_TAC THEN REWRITE_TAC[isop_list;CONS_11;MAP];
    BY(MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  FIRST_ASSUM MP_TAC THEN REWRITE_TAC[isop_list];
  REWRITE_TAC[MAP];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC inj_on_list_of_darts [`quotient_list L N`;`phi`];
  ASM_REWRITE_TAC[];
  POP_ASSUM (SUBST1_TAC o GSYM);
  FIRST_X_ASSUM_ST `[x]::r::N` MP_TAC;
  REWRITE_TAC[isop_list;MAP;CONS_11];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `MAP (\u. phi (FST u),phi (SND u)) (list_of_darts (quotient_list L N)) = MAP I (list_of_darts (quotient_list L N))` (C SUBGOAL_THEN MP_TAC);
    ASM_REWRITE_TAC[MAP_I;I_THM];
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[map_id_eq];
  REWRITE_TAC[I_THM;GSYM Seq.allP];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let iso_list_loop_choice = prove_by_refinement(
  `!g L N r x L' N' r' x'. 
    good_list L /\
    good_list_nodes L /\
    is_restricted (hypermap_of_list L) /\
    normal_list L N /\
    ~finalGraph g /\
    match_quotient_list g L N /\
    match_quotient_list g L' N' /\
    all uniq (quotient_list L N) /\
    good_list (quotient_list L N) /\
    marked_list L N r x /\ marked_list L' N' r' x' /\
    iso_list (L,([x] :: r :: N)) (L',([x'] :: r' :: N')) /\
    r,x = loop_choice g L N ==>
    (x = x') /\ (loop_choice g L' N' = r',x')
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `f = minimalFace (nonFinals g)`;
  TYPED_ABBREV_TAC `v = minimalVertex g f`;
  INTRO_TAC loop_choice_props [`L`;`N`;`r`;`x`;`g`;`f`;`v`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC minimalFace_nonnil [`g`;`L`;`N`];
  SUBANTS_TAC;
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[is_restricted;is_restricted_all_uniq]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC mem_minimalVertex[`g`;`f`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPED_ABBREV_TAC `r'' = FST (loop_choice g L' N')`;
  TYPED_ABBREV_TAC `x'' = SND (loop_choice g L' N')`;
  INTRO_TAC loop_choice_props [`L'`;`N'`;`r''`;`x''`;`g`;`f`;`v`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    TYPIFY `iso_list (L,[]) (L',[])` (C SUBGOAL_THEN ASSUME_TAC);
      BY(FIRST_X_ASSUM_ST `iso_list` MP_TAC THEN REWRITE_TAC[iso_list;MAP;CONS_11] THEN MESON_TAC[]);
    TYPIFY `iso_list (L',[]) (L,[])` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[iso_list_sym_nil]);
    TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[iso_list_good_list]);
    TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[iso_list_restricted]);
    TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
    ASM_REWRITE_TAC[];
    CONJ_TAC;
      BY(ASM_MESON_TAC[marked_list]);
    CONJ_TAC;
      FIRST_X_ASSUM_ST `marked_list` MP_TAC THEN REWRITE_TAC[LET_THM;marked_list];
      BY(SIMP_TAC[]);
    ONCE_REWRITE_TAC[PAIR_EQ2];
    BY(ASM_REWRITE_TAC[FST;SND]);
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "x''";
  TYPIFY `loop_choice g L' N' = r',x'` ENOUGH_TO_SHOW_TAC;
    SIMP_TAC[];
    POP_ASSUM kill;
    FULL_EXPAND_TAC "x";
    ONCE_REWRITE_TAC[PAIR_EQ2];
    BY(SIMP_TAC[FST;SND]);
  MATCH_MP_TAC loop_choice_crit;
  GEXISTL_TAC [`f`;`v`;`next_el (FST f) v`];
  ASM_REWRITE_TAC[];
  TYPIFY `x' = x` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  INTRO_TAC iso_list_x [`g`;`L`;`N`;`r`;`x`;`L'`;`N'`;`r'`;`x'`];
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[is_restricted;is_restricted_all_uniq])
  ]);;
  (* }}} *)

(*
let restricted_hypermaps_are_planegraphs_reduction1 = prove_by_refinement(
  `generatePolygon_reduction_v6  /\
    (!(L:((num)list)list). good_list L /\ good_list_nodes L ==>
  	   transform_assumption_v2 L) // AQ
  ==>
    restricted_hypermaps_are_planegraphs_v4`,
  (* {{{ proof *)
  [
  REWRITE_TAC[restricted_hypermaps_are_planegraphs;planegraph_PlaneGraphs];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[good_graph;planegraph_P];
  TYPIFY `Ln` (RENAME_TAC "L");
  TYPED_ABBREV_TAC `p = foldr maxn 0 (MAP sizel L) - 3`;
  INTRO_TAC max_finals_g_exists [`L`;`p`];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `g'` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `fgraph g' = quotient_list L' N'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 0;
    BY(ASM_MESON_TAC[]);
  TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list]);
  TYPIFY `iso_list (L',[]) (L,[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_sym_nil]);
  TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_restricted]);
  TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
  TYPIFY `is_edge_nondegenerate (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[is_restricted]);
  TYPIFY `all uniq L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  nCONJ_TAC 2;
    MATCH_MP_TAC good_list_quotient;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 1;
    MATCH_MP_TAC good_list_nodes_quotient;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  INTRO_TAC restricted_match_finalGraph [`g'`;`L'`;`N'`];
  ASM_REWRITE_TAC[];
  DISCH_THEN GMATCH_SIMP_TAC;
  GMATCH_SIMP_TAC GNBEVVU;
  CONJ_TAC;
    BY(ASM_MESON_TAC[]);
  COMMENT "~finalGraph g'";
  PROOF_BY_CONTR_TAC;
  TYPED_ABBREV_TAC `rx = loop_choice g' L' N'`;
  TYPED_ABBREV_TAC `r = FST rx`;
  TYPED_ABBREV_TAC `x = SND rx`;
  TYPIFY `foldr maxn 0 (MAP sizel L') - 3 = p` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_size [`L`;`L'`];
    BY(ASM_SIMP_TAC[]);
  TYPIFY `!L'':((num)list)list. iso_list (L,[]) (L'',[]) <=> iso_list (L',[]) (L'',[])` (C SUBGOAL_THEN ASSUME_TAC);
    GEN_TAC;
    MATCH_MP_TAC iso_list_snd;
    BY(ASM_REWRITE_TAC[]);
  FIRST_X_ASSUM_ST `facesAt` MP_TAC THEN ASM_REWRITE_TAC[];
  DISCH_TAC;
  COMMENT "kill L";
  TYPIFY `L` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `L'` (RENAME_TAC "L");
  TYPIFY `N'` (RENAME_TAC "N");
  TYPIFY `g'` (RENAME_TAC "g");
  COMMENT "do finalList L r case";
  TYPIFY `final_list L r` ASM_CASES_TAC;
    INTRO_TAC mem_makeFaceFinal_planeGraphP_etc [`g`;`L`;`N`;`p`];
    ANTS_TAC;
      BY(ASM_REWRITE_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    POP_ASSUM MP_TAC THEN REWRITE_TAC[arith `~(m < n:num) <=> n <= m`];
    FIRST_X_ASSUM MATCH_MP_TAC;
    GEXISTL_TAC [`L`;`N`];
    BY(ASM_REWRITE_TAC[iso_list_refl]);
  COMMENT "root. now prep next step";
  INTRO_TAC iso_list_newvertex_lemma [`L`;`N`;`r`;`x`;`g`];
  ASM_REWRITE_TAC[];
  DISCH_THEN MP_TAC;
  SUBANTS_TAC;
    SUBCONJ_TAC;
      FIRST_X_ASSUM MATCH_MP_TAC;
      BY(ASM_REWRITE_TAC[]);
    DISCH_TAC;
    MATCH_MP_TAC HKBGWJI;
    TYPIFY `g` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    BY(FULL_EXPAND_TAC "rx" THEN FULL_EXPAND_TAC "r" THEN FULL_EXPAND_TAC "x" THEN REWRITE_TAC[PAIR]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `iso_list (L,[]) (L',[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(FIRST_X_ASSUM_ST `iso_list` MP_TAC THEN REWRITE_TAC[iso_list;MAP;CONS_11] THEN MESON_TAC[]);
  TYPIFY `iso_list (L',[]) (L,[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_sym_nil]);
  TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list]);
  TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_restricted]);
  TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
  TYPIFY `marked_list L' N' r' x'` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC Meeixjo.MEEIXJO [`L`;`N`;`L'`;`N'`;`r`;`r'`;`x`;`x'`];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `normal_list L' N'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_list]);
  TYPIFY `iso_list (L,(r::N)) (L',(r'::N'))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_cons]);
  TYPIFY `~final_list L' r'` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_final_list_eq [`L`;`L'`;`N`;`N'`;`r`;`r'`];
    ASM_SIMP_TAC[];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  COMMENT "kill L";
  TYPIFY `foldr maxn 0 (MAP sizel L') - 3 = p` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_size [`L`;`L'`];
    BY(ASM_SIMP_TAC[]);
  TYPIFY `!L'':((num)list)list. iso_list (L,[]) (L'',[]) <=> iso_list (L',[]) (L'',[])` (C SUBGOAL_THEN ASSUME_TAC);
    GEN_TAC;
    MATCH_MP_TAC iso_list_snd;
    BY(ASM_REWRITE_TAC[]);
  FIRST_X_ASSUM_ST `facesAt` MP_TAC THEN ASM_REWRITE_TAC[];
  DISCH_TAC;
  INTRO_TAC iso_list_loop_choice [`g`;`L`;`N`;`r`;`x`;`L'`;`N'`;`r'`;`x'`];
  ANTS_TAC;
    ASM_REWRITE_TAC[];
    ONCE_REWRITE_TAC[PAIR_EQ2];
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "x'";
  TYPIFY `L` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `N` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `r` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `L'` (RENAME_TAC "L");
  TYPIFY `N'` (RENAME_TAC "N");
  TYPIFY `r'` (RENAME_TAC "r");
  COMMENT "add generatePolygon_reduction";
  TYPED_ABBREV_TAC `fs = nonFinals g`;
  TYPED_ABBREV_TAC `f = minimalFace fs`;
  TYPED_ABBREV_TAC `v = minimalVertex g f`;
  TYPED_ABBREV_TAC `k = transform_count L N r x`;
  TYPED_ABBREV_TAC `N' = ntrans L N r x k`;
  FIRST_X_ASSUM_ST `generatePolygon_reduction_v6` MP_TAC;
  REWRITE_TAC[generatePolygon_reduction];
  DISCH_THEN (C INTRO_TAC [`L`;`N`;`N'`;`g`;`p`;`fs`;`f`;`v`;`k`;`r`;`x`]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "now bring in the maximality";
  FIRST_X_ASSUM (C INTRO_TAC [`g'`;`L`;`N'`]);
  ASM_REWRITE_TAC[];
  INTRO_TAC generatePolygon_mono [`i`;`v`;`g`;`f`;`fs`;`g'`;`p`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[planegraph_P]);
  SIMP_TAC[arith `n < m:num ==> ~(m <= n)`];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[iso_list_refl];
  nCONJ_TAC 3;
    MATCH_MP_TAC planegraphP_trans;
    TYPIFY `g` EXISTS_TAC THEN ASM_REWRITE_TAC[];
    ASM_REWRITE_TAC[next_plane;LET_THM];
    COND_CASES_TAC;
      BY(ASM_MESON_TAC[finalGraph]);
    REWRITE_TAC[Seq2.mem_flatten;MEM_MAP;Tame_defs.upt;Seq.mem_iota];
    REWRITE_TAC[maxGon;arith `i < 3 + SUC (p+3) - 3 <=> i <= p+3`];
    BY(ASM_MESON_TAC[maxGon]);
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM (C INTRO_TAC [`L`]);
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  INTRO_TAC AQIUNPP3 [`L`;`k`;`N`;`r`;`x`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_ASSUM MP_TAC THEN REWRITE_TAC[marked_list] THEN REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `LET_END` MP_TAC) THEN REWRITE_TAC[LET_THM] THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  CONJ_TAC;
    DISCH_THEN (MP_TAC o MATCH_MP MEM_EXTENSION);
    BY(ASM_MESON_TAC[MEM]);
  FIRST_X_ASSUM MATCH_MP_TAC;
  MATCH_MP_TAC Kbwpbhq.final_list_transform_count;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)
*)

let restricted_hypermaps_are_planegraphs_reduction1 = prove_by_refinement(
  `generatePolygon_reduction_v6  /\
    (!(L:((num)list)list). good_list L /\ good_list_nodes L ==>
  	   transform_assumption_v2 L) // AQ
  ==>
    restricted_hypermaps_are_planegraphs_v4`,
  (* {{{ proof *)
  [
  REWRITE_TAC[restricted_hypermaps_are_planegraphs;planegraph_PlaneGraphs];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[good_graph;planegraph_P];
  TYPIFY `Ln` (RENAME_TAC "L");
  TYPED_ABBREV_TAC `p = foldr maxn 0 (MAP sizel L) - 3`;
  INTRO_TAC max_finals_g_exists [`L`;`p`];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `g'` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `fgraph g' = quotient_list L' N'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[match_quotient_list]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 0;
    BY(ASM_MESON_TAC[]);
  TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list]);
  TYPIFY `iso_list (L',[]) (L,[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_sym_nil]);
  TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_restricted]);
  TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
  TYPIFY `is_edge_nondegenerate (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[is_restricted]);
  TYPIFY `all uniq L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  nCONJ_TAC 2;
    MATCH_MP_TAC good_list_quotient;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  nCONJ_TAC 1;
    MATCH_MP_TAC good_list_nodes_quotient;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  INTRO_TAC restricted_match_finalGraph [`g'`;`L'`;`N'`];
  ASM_REWRITE_TAC[];
  DISCH_THEN GMATCH_SIMP_TAC;
  GMATCH_SIMP_TAC GNBEVVU;
  CONJ_TAC;
    BY(ASM_MESON_TAC[]);
  COMMENT "~finalGraph g'";
  PROOF_BY_CONTR_TAC;
  TYPED_ABBREV_TAC `rx = loop_choice g' L' N'`;
  TYPED_ABBREV_TAC `r = FST rx`;
  TYPED_ABBREV_TAC `x = SND rx`;
  TYPIFY `foldr maxn 0 (MAP sizel L') - 3 = p` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_size [`L`;`L'`];
    BY(ASM_SIMP_TAC[]);
  TYPIFY `!L'':((num)list)list. iso_list (L,[]) (L'',[]) <=> iso_list (L',[]) (L'',[])` (C SUBGOAL_THEN ASSUME_TAC);
    GEN_TAC;
    MATCH_MP_TAC iso_list_snd;
    BY(ASM_REWRITE_TAC[]);
  FIRST_X_ASSUM_ST `flag_list` MP_TAC THEN ASM_REWRITE_TAC[];
  DISCH_TAC;
  COMMENT "kill L";
  TYPIFY `L` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `L'` (RENAME_TAC "L");
  TYPIFY `N'` (RENAME_TAC "N");
  TYPIFY `g'` (RENAME_TAC "g");
  COMMENT "do finalList L r case";
  TYPIFY `final_list L r` ASM_CASES_TAC;
    INTRO_TAC mem_makeFaceFinal_planeGraphP_etc [`g`;`L`;`N`;`p`];
    ANTS_TAC;
      BY(ASM_REWRITE_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    POP_ASSUM MP_TAC THEN REWRITE_TAC[arith `~(m < n:num) <=> n <= m`];
    FIRST_X_ASSUM MATCH_MP_TAC;
    GEXISTL_TAC [`L`;`N`];
    BY(ASM_REWRITE_TAC[iso_list_refl]);
  COMMENT "root. now prep next step";
  INTRO_TAC iso_list_newvertex_lemma [`L`;`N`;`r`;`x`;`g`];
  ASM_REWRITE_TAC[];
  DISCH_THEN MP_TAC;
  SUBANTS_TAC;
    SUBCONJ_TAC;
      FIRST_X_ASSUM MATCH_MP_TAC;
      BY(ASM_REWRITE_TAC[]);
    DISCH_TAC;
    MATCH_MP_TAC HKBGWJI;
    TYPIFY `g` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    BY(FULL_EXPAND_TAC "rx" THEN FULL_EXPAND_TAC "r" THEN FULL_EXPAND_TAC "x" THEN REWRITE_TAC[PAIR]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `iso_list (L,[]) (L',[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(FIRST_X_ASSUM_ST `iso_list` MP_TAC THEN REWRITE_TAC[iso_list;MAP;CONS_11] THEN MESON_TAC[]);
  TYPIFY `iso_list (L',[]) (L,[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_sym_nil]);
  TYPIFY `good_list L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list]);
  TYPIFY `is_restricted (hypermap_of_list L')` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_restricted]);
  TYPIFY `good_list_nodes L'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_good_list_nodes]);
  TYPIFY `marked_list L' N' r' x'` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC Meeixjo.MEEIXJO [`L`;`N`;`L'`;`N'`;`r`;`r'`;`x`;`x'`];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `normal_list L' N'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_list]);
  TYPIFY `iso_list (L,(r::N)) (L',(r'::N'))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[iso_list_cons]);
  TYPIFY `~final_list L' r'` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_final_list_eq [`L`;`L'`;`N`;`N'`;`r`;`r'`];
    ASM_SIMP_TAC[];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  COMMENT "kill L";
  TYPIFY `foldr maxn 0 (MAP sizel L') - 3 = p` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC iso_list_size [`L`;`L'`];
    BY(ASM_SIMP_TAC[]);
  TYPIFY `!L'':((num)list)list. iso_list (L,[]) (L'',[]) <=> iso_list (L',[]) (L'',[])` (C SUBGOAL_THEN ASSUME_TAC);
    GEN_TAC;
    MATCH_MP_TAC iso_list_snd;
    BY(ASM_REWRITE_TAC[]);
  FIRST_X_ASSUM_ST `flag_list` MP_TAC THEN ASM_REWRITE_TAC[];
  DISCH_TAC;
  INTRO_TAC iso_list_loop_choice [`g`;`L`;`N`;`r`;`x`;`L'`;`N'`;`r'`;`x'`];
  ANTS_TAC;
    ASM_REWRITE_TAC[];
    ONCE_REWRITE_TAC[PAIR_EQ2];
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "x'";
  TYPIFY `L` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `N` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `r` (REPEAT o (C FIRST_X_VAR kill));
  TYPIFY `L'` (RENAME_TAC "L");
  TYPIFY `N'` (RENAME_TAC "N");
  TYPIFY `r'` (RENAME_TAC "r");
  COMMENT "add generatePolygon_reduction";
  TYPED_ABBREV_TAC `fs = nonFinals g`;
  TYPED_ABBREV_TAC `f = minimalFace fs`;
  TYPED_ABBREV_TAC `v = minimalVertex g f`;
  TYPED_ABBREV_TAC `k = transform_count L N r x`;
  TYPED_ABBREV_TAC `N' = ntrans L N r x k`;
  FIRST_X_ASSUM_ST `generatePolygon_reduction_v6` MP_TAC;
  REWRITE_TAC[generatePolygon_reduction];
  DISCH_THEN (C INTRO_TAC [`L`;`N`;`N'`;`g`;`p`;`fs`;`f`;`v`;`k`;`r`;`x`]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "now bring in the maximality";
  FIRST_X_ASSUM (C INTRO_TAC [`g'`;`L`;`N'`]);
  ASM_REWRITE_TAC[];
  INTRO_TAC generatePolygon_mono [`i`;`v`;`g`;`f`;`fs`;`g'`;`p`];
  ASM_REWRITE_TAC[];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[planegraph_P]);
  SIMP_TAC[arith `n < m:num ==> ~(m <= n)`];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[iso_list_refl];
  nCONJ_TAC 3;
    MATCH_MP_TAC planegraphP_trans;
    TYPIFY `g` EXISTS_TAC THEN ASM_REWRITE_TAC[];
    ASM_REWRITE_TAC[next_plane;LET_THM];
    COND_CASES_TAC;
      BY(ASM_MESON_TAC[finalGraph]);
    REWRITE_TAC[Seq2.mem_flatten;MEM_MAP;Tame_defs.upt;Seq.mem_iota];
    REWRITE_TAC[maxGon;arith `i < 3 + SUC (p+3) - 3 <=> i <= p+3`];
    BY(ASM_MESON_TAC[maxGon]);
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM (C INTRO_TAC [`L`]);
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  INTRO_TAC AQIUNPP3 [`L`;`k`;`N`;`r`;`x`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_ASSUM MP_TAC THEN REWRITE_TAC[marked_list] THEN REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `LET_END` MP_TAC) THEN REWRITE_TAC[LET_THM] THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  CONJ_TAC;
    DISCH_THEN (MP_TAC o MATCH_MP MEM_EXTENSION);
    BY(ASM_MESON_TAC[MEM]);
  FIRST_X_ASSUM MATCH_MP_TAC;
  MATCH_MP_TAC Kbwpbhq.final_list_transform_count;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)



end;;
