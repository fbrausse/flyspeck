(* January 2014 cut from tame/WMLNYMD.hl *)
(*
  let new_definition' t = 
    if has_stv t 
    then (Print_types.print_term_types t; failwith "new_definition has stv") 
    else new_definition t;;
*)

(*
let good_list_card_node = prove_by_refinement(
  `!L (x:A#A). good_list L /\ good_list_nodes L /\ x IN darts_of_list L ==>
    CARD (node (hypermap_of_list L) x) = sizel (filter (MEM (FST x)) L)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[List_hypermap.good_list_node];
typ `FINITE {FST x,y | y | FST x,y IN darts_of_list L} /\ BIJ SND {FST x,y | y | FST x,y IN darts_of_list L} {y | FST x,y IN darts_of_list L}` sat
    CONJ_TAC;
      MATCH_MP_TAC FINITE_SUBSET;
      TYPIFY `dart(hypermap_of_list L)` EXISTS_TAC;
      CONJ_TAC;
        BY(REWRITE_TAC[Hypermap.node_map_and_darts]);
      REWRITE_TAC[SUBSET;IN_ELIM_THM];
      REPEAT WEAKER_STRIP_TAC;
      ASM_REWRITE_TAC[];
      GMATCH_SIMP_TAC dart_hypermap_of_list;
      BY(ASM_REWRITE_TAC[GSYM List_hypermap.darts_of_list]);
    REWRITE_TAC[BIJ];
    SUBCONJ_TAC;
      REWRITE_TAC[INJ;IN_ELIM_THM];
      CONJ_TAC;
        REPEAT WEAKER_STRIP_TAC;
        BY(ASM_REWRITE_TAC[]);
      REPEAT WEAKER_STRIP_TAC;
      ASM_REWRITE_TAC[];
      FIRST_X_ASSUM MP_TAC;
      BY(ASM_REWRITE_TAC[PAIR_EQ]);
    REWRITE_TAC[SURJ;INJ;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `(FST x,x')` EXISTS_TAC;
    REWRITE_TAC[];
    TYPIFY `x'` EXISTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `CARD {FST x,y | y | FST x,y IN darts_of_list L} = CARD {y | FST x,y IN darts_of_list L}` (C SUBGOAL_THEN SUBST1_TAC);
    MATCH_MP_TAC Misc_defs_and_lemmas.BIJ_CARD;
    EXISTS_TAC `SND:A#A->A`;
art[]
  COMMENT "2";
  TYPIFY `sizel (filter (MEM (FST x)) L)  = CARD (set_of_list (filter (MEM (FST x)) L))` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
    MATCH_MP_TAC Seq.filter_uniq;
    MATCH_MP_TAC List_hypermap.good_list_uniq;
    BY(ASM_REWRITE_TAC[])
    typ `FINITE {y | FST x, y IN darts_of_list L}` sat
amt[Misc_defs_and_lemmas.FINITE_BIJ]
mmp Misc_defs_and_lemmas.BIJ_CARD
art[]
rt[Seq2.set_of_list_filter]
  ]);;
  (* }}} *)
*)


(*
let tame11_correspondence = prove_by_refinement(
 `!L. tame_11a (hypermap_of_list L) /\ 
   tame_11b (hypermap_of_list L) /\
   tame_12o (hypermap_of_list L) /\
   good_list L /\ 
   good_list_nodes L 
   ==>
  tame11a_list L /\ tame11b_list L`,
  (* {{{ proof *)
  [
  ASM_REWRITE_TAC[tame11a_list;tame11b_list;tame_12o;tame_11b;tame_11a;Tame_defs.node_exceptional_face;Tame_defs.exceptional_face;node_type_exceptional_face];
st/r
mmp (MESON[] `(!v. r v ==> (P v /\ Q v)) ==> ((!v. r v ==> P v) /\ (!v. r v ==> Q v))`)
st/r
asimp[finalGraph_except]
comment "cases"
condcases
  typ `?d. MEM d (list_of_darts (fgraph g)) /\ CARD (node (hypermap_of_list (fgraph g)) d) = LENGTH (FILTER (\f. MEM v (  FST f)) (faces g))` ets
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (sub1 o GSYM)
intro dart_hypermap_of_list [`fgraph g`]
art[]
dt
fxast `MEM` mp
art[GSYM IN_SET_OF_LIST]
amt[arith `m >= 3 <=> 3 <= m`]


  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC fgraph_Faces;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `~(  FST f = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPED_ABBREV_TAC `ff =   FST f`;
  TYPIFY `MEM (HD ff) ff` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPED_ABBREV_TAC `L = fgraph g`;
  TYPED_ABBREV_TAC `d = HD (list_pairs ff)`;
  TYPIFY `d` EXISTS_TAC;
  TYPIFY `sizel (list_pairs ff) = sizel (ff)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[List_hypermap.size_list_pairs]);
  INTRO_TAC List_hypermap.list_pairs_empty [`ff`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `MEM d (list_pairs ff)` (C SUBGOAL_THEN ASSUME_TAC);
    EXPAND_TAC "d";
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `find_face L d = list_pairs ff` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.find_face_alt];
    AP_TERM_TAC;
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    MATCH_MP_TAC List_hypermap.find_pair_list_unique;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Seq.size];
  REWRITE_TAC[List_hypermap.dart_in_find_pair_list];
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[List_hypermap.find_face_alt];
  DISCH_THEN SUBST1_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)
*)

g `tame_11a H /\ tame_11b H /\ tame_12o H /\ tame_13a H`;;

rt[tame_11a;tame_11b;tame_12o;tame_13a]
rt[admissible_weight;total_weight;node_type_exceptional_face;node_exceptional_face]
rt[exceptional_face;type_of_node;adm_1;adm_2;adm_3]
rt[set_of_triangles_meeting_node;set_of_quadrilaterals_meeting_node;set_of_exceptional_meeting_node]

tame9a;;
tame10;;
set_of_triangles_meeting_node;;
face_set;;

g `tame11a_list L /\ tame11b_list L /\ tame12o_list L /\ tame13a_list L`;;
rt[tame11a_list;tame11b_list;tame12o_list;tame13a_list]
rt[vertextype_list;admissible1_list;admissible2_list;admissible3_list]

(* dart_of has problems when the hypermap is not simple.
   dart_of always picks out the first matching dart in a given face.
   In the non-simple situation, there may be multiple matches.
*)


type_of `facesAt_list`;;
