(* 
   May 2012, definitions no longer needed in
   primary verifications of flyspeck.
*)

(*
deprecated May 2012:

arclength_x_345
taum_hexall_x
dih_hexall_x
 dih1_hexall_x
 upper_dih_hexall_x
 delta_hexall_x
delta4_hexall_x
eulerA_hexall_x
factor345_hexall_x
law_cosines_234_x
law_cosines_126_x
delta_template_B_x
dih_template_B_x
taum_template_B_x
delta_top_x
tau_lowform_x
tau_m_diff_quotient
tau_m_diff_quotient2

*)


(*
7/29/2009:
  * normball deprecated. Replace normball x r with ball(x,r)
  * rect deprecated. Use interval instead.
  * wedge is now defined by Harrison using azim.  He has proved a lemma giving the equivalence with the previous definition.
  * azim in defined by Harrison.
  * directed_angle is now defined through complex Arg.
  * definition of polar cycle has been changed (again).
  * a lemma is needed relating atn2 to Arg.
  * cone -> cone0
  * deprecated: volume_props.
*)


(* deleted obsolete definitions 2/7/2010 svn 1471:
    obsolete definitions:
    obsolete: rad2_y, d3, mk_vec3, real3_of_triple, triple_of_real3,
    obsolete: conv, radius -> norm(vector[x;y]),
    obsolete: polar_angle -> Arg(vector[x;y]),
    obsolete: polar_c, less_polar, min_polar,
    obsolete: iter_SPEC, iter -> ITER,
    obsolete: azim_cycle_hyp_def, azim_cycle_spec, azim_cycle_def,
    obsolete: rogers, rogers0, azim_hyp_def, azim_spec, azim_def,

    2011-08-01.
    obsolete: polar_cycle
*)

(* terms moved to Harrison's flyspeck.ml
NULLSET_RULES,
solid_triangle, ellipsoid, conic_cap, frustum, frustt,
primitive, MEASURABLE_RULES, solid, coplanar, cross, wedge, azim,
*)


(* (now voronoi_open) let voronoi = new_definition `voronoi v S = { x | !w. ((S w) /\ ~(w=v)) ==> (dist( x, v) < dist( x, w)) }`;; *)


(*  DEPRECATED, 2011-08-01, not used

let directed_angle = new_definition `directed_angle (x,y) (x',y') =
  Arg (complex(x',y') / complex(x,y))`;;

let cyclic_order = new_definition `cyclic_order v u w =
    ((directed_angle v u < directed_angle v w) \/
    ((directed_angle v u = directed_angle v w) /\ (radius u <= radius w)))`;;

let polar_cycle = new_definition `polar_cycle V v =
   if (V SUBSET {v}) then v else (@ u. ~(u=v) /\ V u /\
  (!w.  ~(w = v) /\ V w   ==> cyclic_order v u w))`;;
*)


(*
let sol_euler_y =  `sol_euler_y y1 y2 y3 y4 y5 y6 = 
  (let a = y1*y2*y3 + y1*(y2*y2 + y3*y3 - y4*y4)/ &2 + 
     y2*(y1*y1 + y3*y3 - y5*y5)/ &2 + y3*(y1*y1 + y2*y2 - y6*y6)/ &2 in
  &2 * atn2( &2 * a, sqrt (delta_y y1 y2 y3 y4 y5 y6)))`;;

let sol_euler_y =  `sol_euler_y = y_of_x sol_euler_x`;;
*)


(*
let acs_sqrt_x1 = new_definition `acs_sqrt_x1 (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
  acs (sqrt(x1))`;;

let acs_sqrt_x2 = new_definition `acs_sqrt_x2 (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
  acs (sqrt(x2))`;;
*)


(* deprecated

let solRy = new_definition `solRy y1 y2 y6 c = solR (y1/ &2) (eta_y y1 y2 y6) c`;;

let dihRy = new_definition `dihRy y1 y2 y6 c = dihR (y1/ &2) (eta_y y1 y2 y6) c`;;
*)

(* deprecated *)

let arclength_x_345 = new_definition `arclength_x_345  (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = arclength (sqrt x3) (sqrt x4) (sqrt x5)`;;


(*
let tauq_x = new_definition
  `tauq_x x1 x2 x3 x4 x5 x6 x7 x8 x9 = 
    tauq (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) (sqrt x7)  (sqrt x8)  (sqrt x9)`;;
*)


let taum_hexall_x = new_definition 
  `taum_hexall_x  x14 x12 x23  x1 x2 x3 x4 x5 (x6:real) = 
   taum_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12) + 
     flat_term_x x2`;;


(* deprecated *)

let dih_hexall_x = new_definition `dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x2 x4 ((&2 * h0) pow 2) x14 x12 - 
   dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let dih1_hexall_x = new_definition `dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let upper_dih_hexall_x = new_definition `upper_dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x2 x4 ((&2 * h0) pow 2) x14 x12 - 
   upper_dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let delta_hexall_x = new_definition `delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   delta_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let delta4_hexall_x = new_definition `delta4_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   delta_x4 x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

(*
let euler_ap = new_definition `euler_ap y1  y2 y3 y4 y5 y6 = 
  y1*y2*y3 + y1*(y2*y2 + y3*y3 - y4*y4)/ &2 + y2*(y1*y1 + y3*y3 - y5*y5)/ &2 + 
   y3*(y1*y1 + y2*y2 - y6*y6)/ &2`;;
*)

let eulerA_hexall_x = new_definition `eulerA_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   eulerA_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;


let factor345_hexall_x = new_definition `factor345_hexall_x c (x1:real) (x2:real) x3 x4 x5 (x6:real) = 
   x5 -x3 -x4 + &2 * c * sqrt(x3) * sqrt(x4)`;;

let law_cosines_234_x = new_definition 
 `law_cosines_234_x c (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   x4 -x2 -x3 + &2 * c * sqrt(x2) * sqrt(x3)`;;

let law_cosines_126_x = new_definition 
 `law_cosines_126_x c (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   x6 -x1 -x2 + &2 * c * sqrt(x1) * sqrt(x2)`;;

(* -- not used
let taum_sub156_x = new_definition 
 `taum_sub156_x x1s x5s x6s (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
      taum_x x1s x2 x3 x4 x5s x6s`;;
*)


(* DEPRECATED.
let tau_nullform_x = new_definition
  `tau_nullform_x x1 x2 x3 x4 x5 x6 =
    rho (sqrt x1) * pi - (pi + sol0) + 
    sqp(delta_x x1 x2 x3 x4 x5 x6) * tau_residual_x x1 x2 x3 x4 x5 x6`;;
*)


(* deprecated *)

let delta_template_B_x = new_definition 
 `delta_template_B_x x15 x45 x34 x12      x1 x2 x3 x4 x5 (x6:real) = 
  (let x23 = x12 in
    let x13 = edge_flat2_x x2 x1 x3  (&0)   x23 x12 in
    let x14 = edge_flat2_x x5 x1 x4  (&0)   x45 x15 in 
      (delta_x x1 x3 x4 x34 x14 x13))`;;


let dih_template_B_x = new_definition 
 `dih_template_B_x x15 x45 x34 x12 x25      x1 x2 x3 x4 x5 (x6:real) = 
  (let x23 = x12 in
    let x13 = edge_flat2_x x2 x1 x3  (&0)   x23 x12 in
    let x14 = edge_flat2_x x5 x1 x4  (&0)   x45 x15 in 
      (dih_x x1 x2 x5 x25 x15 x12 - dih_x x1 x3 x4 x34 x14 x13))`;;

let taum_template_B_x = new_definition 
 `taum_template_B_x x15 x45 x34 x12      x1 x2 x3 x4 x5 (x6:real) = 
  (let x23 = x12 in
    let x13 = edge_flat2_x x2 x1 x3  (&0)   x23 x12 in
    let x14 = edge_flat2_x x5 x1 x4  (&0)   x45 x15 in 
      (taum_x x1 x3 x4 x34 x14 x13 +flat_term_x x2 + flat_term_x x5))`;;



(* No longer needed.... deprecated. *)
let delta_top_x = new_definition
  `delta_top_x (a:real) (x1:real) (x2:real) (x3:real) (x4:real) 
    (x5:real) (x6:real) (x7:real) (x8:real) (x9:real)   =
   delta_y (sqrt x4) (sqrt x9) (sqrt x6) a (sqrt x5) (sqrt x8)`;;


(* tau_lowform_x intended for use when dih1 > pi/2, dih2, dih3 < pi/2, 
   tau_residual <0,
   Then tau_lowform_x is a lower bound on tau (that is graceful when delta->0).
*)

let tau_lowform_x = new_definition
  `tau_lowform_x x1 x2 x3 x4 x5 x6 =
  (let d = delta_x x1 x2 x3 x4 x5 x6 in
    (rho (sqrt x1) * pi - (pi + sol0) + 
    sqp d * rhazim_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
    sqn d * rhazim2_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
    sqn d * rhazim3_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6))`;;


let tau_m_diff_quotient = new_definition
  `tau_m_diff_quotient (y1:real) (y2:real) (y3:real) (y4:real) (y5:real) (y6:real)  = 
    (let eps = #0.000001 in
    (taum (y1 + eps) y2 y3 y4 y5 y6 - taum y1 y2 y3 y4 y5 y6)/eps)`;;

let tau_m_diff_quotient2 = new_definition
  `tau_m_diff_quotient2 (y1:real) (y2:real) (y3:real) (y4:real) (y5:real) (y6:real)  = 
  (let eps = #0.000001 in
   (taum (y1 + eps) y2 y3 y4 y5 y6 - taum y1 y2 y3 y4 y5 y6 
    + taum (y1 - eps) y2 y3 y4 y5 y6)/(eps pow 2))`;;
