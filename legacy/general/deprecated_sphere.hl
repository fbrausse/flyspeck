(* 
   May 2012, definitions no longer needed in
   primary verifications of flyspeck.
*)

(*
deprecated May 2012:

arclength_x_345
taum_hexall_x
dih_hexall_x
 dih1_hexall_x
 upper_dih_hexall_x
 delta_hexall_x
delta4_hexall_x
eulerA_hexall_x
factor345_hexall_x
law_cosines_234_x
law_cosines_126_x
delta_template_B_x
dih_template_B_x
taum_template_B_x
delta_top_x
tau_lowform_x
tau_m_diff_quotient
tau_m_diff_quotient2

*)


(*
7/29/2009:
  * normball deprecated. Replace normball x r with ball(x,r)
  * rect deprecated. Use interval instead.
  * wedge is now defined by Harrison using azim.  He has proved a lemma giving the equivalence with the previous definition.
  * azim in defined by Harrison.
  * directed_angle is now defined through complex Arg.
  * definition of polar cycle has been changed (again).
  * a lemma is needed relating atn2 to Arg.
  * cone -> cone0
  * deprecated: volume_props.
*)


(* deleted obsolete definitions 2/7/2010 svn 1471:
    obsolete definitions:
    obsolete: rad2_y, d3, mk_vec3, real3_of_triple, triple_of_real3,
    obsolete: conv, radius -> norm(vector[x;y]),
    obsolete: polar_angle -> Arg(vector[x;y]),
    obsolete: polar_c, less_polar, min_polar,
    obsolete: iter_SPEC, iter -> ITER,
    obsolete: azim_cycle_hyp_def, azim_cycle_spec, azim_cycle_def,
    obsolete: rogers, rogers0, azim_hyp_def, azim_spec, azim_def,

    2011-08-01.
    obsolete: polar_cycle
*)

(* terms moved to Harrison's flyspeck.ml
NULLSET_RULES,
solid_triangle, ellipsoid, conic_cap, frustum, frustt,
primitive, MEASURABLE_RULES, solid, coplanar, cross, wedge, azim,
*)


(* (now voronoi_open) let voronoi = new_definition `voronoi v S = { x | !w. ((S w) /\ ~(w=v)) ==> (dist( x, v) < dist( x, w)) }`;; *)


(*  DEPRECATED, 2011-08-01, not used

let directed_angle = new_definition `directed_angle (x,y) (x',y') =
  Arg (complex(x',y') / complex(x,y))`;;

let cyclic_order = new_definition `cyclic_order v u w =
    ((directed_angle v u < directed_angle v w) \/
    ((directed_angle v u = directed_angle v w) /\ (radius u <= radius w)))`;;

let polar_cycle = new_definition `polar_cycle V v =
   if (V SUBSET {v}) then v else (@ u. ~(u=v) /\ V u /\
  (!w.  ~(w = v) /\ V w   ==> cyclic_order v u w))`;;
*)


(*
let sol_euler_y =  `sol_euler_y y1 y2 y3 y4 y5 y6 = 
  (let a = y1*y2*y3 + y1*(y2*y2 + y3*y3 - y4*y4)/ &2 + 
     y2*(y1*y1 + y3*y3 - y5*y5)/ &2 + y3*(y1*y1 + y2*y2 - y6*y6)/ &2 in
  &2 * atn2( &2 * a, sqrt (delta_y y1 y2 y3 y4 y5 y6)))`;;

let sol_euler_y =  `sol_euler_y = y_of_x sol_euler_x`;;
*)


(*
let acs_sqrt_x1 = new_definition `acs_sqrt_x1 (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
  acs (sqrt(x1))`;;

let acs_sqrt_x2 = new_definition `acs_sqrt_x2 (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
  acs (sqrt(x2))`;;
*)


(* deprecated

let solRy = new_definition `solRy y1 y2 y6 c = solR (y1/ &2) (eta_y y1 y2 y6) c`;;

let dihRy = new_definition `dihRy y1 y2 y6 c = dihR (y1/ &2) (eta_y y1 y2 y6) c`;;
*)

(* deprecated *)

let arclength_x_345 = new_definition `arclength_x_345  (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = arclength (sqrt x3) (sqrt x4) (sqrt x5)`;;


(*
let tauq_x = new_definition
  `tauq_x x1 x2 x3 x4 x5 x6 x7 x8 x9 = 
    tauq (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) (sqrt x7)  (sqrt x8)  (sqrt x9)`;;
*)


let taum_hexall_x = new_definition 
  `taum_hexall_x  x14 x12 x23  x1 x2 x3 x4 x5 (x6:real) = 
   taum_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12) + 
     flat_term_x x2`;;


(* deprecated *)

let dih_hexall_x = new_definition `dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x2 x4 ((&2 * h0) pow 2) x14 x12 - 
   dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let dih1_hexall_x = new_definition `dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let upper_dih_hexall_x = new_definition `upper_dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x2 x4 ((&2 * h0) pow 2) x14 x12 - 
   upper_dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let delta_hexall_x = new_definition `delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   delta_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

let delta4_hexall_x = new_definition `delta4_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   delta_x4 x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;

(*
let euler_ap = new_definition `euler_ap y1  y2 y3 y4 y5 y6 = 
  y1*y2*y3 + y1*(y2*y2 + y3*y3 - y4*y4)/ &2 + y2*(y1*y1 + y3*y3 - y5*y5)/ &2 + 
   y3*(y1*y1 + y2*y2 - y6*y6)/ &2`;;
*)

let eulerA_hexall_x = new_definition `eulerA_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   eulerA_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;


let factor345_hexall_x = new_definition `factor345_hexall_x c (x1:real) (x2:real) x3 x4 x5 (x6:real) = 
   x5 -x3 -x4 + &2 * c * sqrt(x3) * sqrt(x4)`;;

let law_cosines_234_x = new_definition 
 `law_cosines_234_x c (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   x4 -x2 -x3 + &2 * c * sqrt(x2) * sqrt(x3)`;;

let law_cosines_126_x = new_definition 
 `law_cosines_126_x c (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   x6 -x1 -x2 + &2 * c * sqrt(x1) * sqrt(x2)`;;

(* -- not used
let taum_sub156_x = new_definition 
 `taum_sub156_x x1s x5s x6s (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
      taum_x x1s x2 x3 x4 x5s x6s`;;
*)


(* DEPRECATED.
let tau_nullform_x = new_definition
  `tau_nullform_x x1 x2 x3 x4 x5 x6 =
    rho (sqrt x1) * pi - (pi + sol0) + 
    sqp(delta_x x1 x2 x3 x4 x5 x6) * tau_residual_x x1 x2 x3 x4 x5 x6`;;
*)


(* deprecated *)

let delta_template_B_x = new_definition 
 `delta_template_B_x x15 x45 x34 x12      x1 x2 x3 x4 x5 (x6:real) = 
  (let x23 = x12 in
    let x13 = edge_flat2_x x2 x1 x3  (&0)   x23 x12 in
    let x14 = edge_flat2_x x5 x1 x4  (&0)   x45 x15 in 
      (delta_x x1 x3 x4 x34 x14 x13))`;;


let dih_template_B_x = new_definition 
 `dih_template_B_x x15 x45 x34 x12 x25      x1 x2 x3 x4 x5 (x6:real) = 
  (let x23 = x12 in
    let x13 = edge_flat2_x x2 x1 x3  (&0)   x23 x12 in
    let x14 = edge_flat2_x x5 x1 x4  (&0)   x45 x15 in 
      (dih_x x1 x2 x5 x25 x15 x12 - dih_x x1 x3 x4 x34 x14 x13))`;;

let taum_template_B_x = new_definition 
 `taum_template_B_x x15 x45 x34 x12      x1 x2 x3 x4 x5 (x6:real) = 
  (let x23 = x12 in
    let x13 = edge_flat2_x x2 x1 x3  (&0)   x23 x12 in
    let x14 = edge_flat2_x x5 x1 x4  (&0)   x45 x15 in 
      (taum_x x1 x3 x4 x34 x14 x13 +flat_term_x x2 + flat_term_x x5))`;;



(* No longer needed.... deprecated. *)
let delta_top_x = new_definition
  `delta_top_x (a:real) (x1:real) (x2:real) (x3:real) (x4:real) 
    (x5:real) (x6:real) (x7:real) (x8:real) (x9:real)   =
   delta_y (sqrt x4) (sqrt x9) (sqrt x6) a (sqrt x5) (sqrt x8)`;;


(* tau_lowform_x intended for use when dih1 > pi/2, dih2, dih3 < pi/2, 
   tau_residual <0,
   Then tau_lowform_x is a lower bound on tau (that is graceful when delta->0).
*)

let tau_lowform_x = new_definition
  `tau_lowform_x x1 x2 x3 x4 x5 x6 =
  (let d = delta_x x1 x2 x3 x4 x5 x6 in
    (rho (sqrt x1) * pi - (pi + sol0) + 
    sqp d * rhazim_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
    sqn d * rhazim2_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
    sqn d * rhazim3_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6))`;;


let tau_m_diff_quotient = new_definition
  `tau_m_diff_quotient (y1:real) (y2:real) (y3:real) (y4:real) (y5:real) (y6:real)  = 
    (let eps = #0.000001 in
    (taum (y1 + eps) y2 y3 y4 y5 y6 - taum y1 y2 y3 y4 y5 y6)/eps)`;;

let tau_m_diff_quotient2 = new_definition
  `tau_m_diff_quotient2 (y1:real) (y2:real) (y3:real) (y4:real) (y5:real) (y6:real)  = 
  (let eps = #0.000001 in
   (taum (y1 + eps) y2 y3 y4 y5 y6 - taum y1 y2 y3 y4 y5 y6 
    + taum (y1 - eps) y2 y3 y4 y5 y6)/(eps pow 2))`;;

(* deleted 2013-08-18 *)

let delta_y_LC = new_definition
`delta_y_LC (y1:real) (y2:real) (y3:real) (y4:real) (y5:real) (y6:real) = 
  delta_y y1 y2 y3 y4 y5 y6`;;

let mardih_x = new_definition `mardih_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x1 / #2.0) * dih_x x1 x2 x3 x4 x5 x6`;;

let mardih2_x = new_definition `mardih2_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x2 / #2.0) * dih2_x x1 x2 x3 x4 x5 x6`;;

let mardih3_x = new_definition `mardih3_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x3 / #2.0) * dih3_x x1 x2 x3 x4 x5 x6`;;

let mardih4_x = new_definition `mardih4_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x4 / #2.0) * dih4_x x1 x2 x3 x4 x5 x6`;;

let mardih5_x = new_definition `mardih5_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x5 / #2.0) * dih5_x x1 x2 x3 x4 x5 x6`;;

let mardih6_x = new_definition `mardih6_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x6 / #2.0) * dih6_x x1 x2 x3 x4 x5 x6`;;

(* c++ associations:
  ("mardih_x","marchalDih");  ("mardih2_x","marchalDih2");  
  ("mardih3_x","marchalDih3");
  ("mardih4_x","marchalDih4");  ("mardih5_x","marchalDih5"); 
  ("mardih6_x","marchalDih6");
*)

(*
(*
num1 is based on the following Mathematica calculation. It is the
numerator of the a-partial derivative of taumarE.
num2 is the numerator of second a-partial
formal proof: derived_form_sum_dih444
*)

taumarE = e1 Dihedral[2, 2, 2, a, b, c] + e2 Dihedral[2, 2, 2, b, c, a] + 
          e3 Dihedral[2, 2, 2, c, a, b];

afac = a (16 - a^2);
sd = Sqrt[Delta[2, 2, 2, a, b, c]];
abcsub = {a -> 2.1, b -> 2.2, c -> 2.3, e1 -> 5.5, e2 -> 5.6, 
    e3 -> 5.7, ssd -> sd, aafac -> afac};
abcsq = {a -> Sqrt[a2], b -> Sqrt[b2], c -> Sqrt[c2]};


taumarE1 = 4 a afac e1/(aafac ssd);
taumarE2 = 4 (-8 b^2 + a^2 (-8 + b^2) + 8 c^2) e2/(aafac ssd) ;
taumarE3 = 4 (-8 c^2 + a^2 (-8 + c^2) + 8 b^2) e3/(aafac ssd);
(D[taumarE, a] - taumarE1 - taumarE2 - taumarE3 //. abcsub) // Chop (*0*)

num1e = aafac ssd (taumarE1 + taumarE2 + taumarE3) // Together // Simplify;
num1sqI = -4*(a2^2*e1 + 8*(
    b2 - c2)*(e2 - e3) - a2*(16*e1 + (-8 + b2)*e2 + (-8 + c2)*e3)); (* num1 
    in sphere.hl *)
(num1e /. abcsq) - num1sqI (*0*)

(* second derivatives *)
taumarE1D2calc = D[Dihedral[2, 2, 2, a, b, c], {a, 
    2}] // Together // Simplify;
taumarE1D2 = -(16*(-a^4 + (b^2 - c^2)^2)) afac^2 /(aafac^2 ssd^3);
(taumarE1D2calc - taumarE1D2 //. abcsub) // Chop



taumarE2D2calc = D[Dihedral[2, 2, 2, b, c, a], {a, 2}] // Together //
             Simplify;
taumarE2D2 = -(8*(6*a^8*(-8 + b^2) + 256*(
      b^2 - c^2)^3 + a^6*(b^4*(-8 + c^2) - 16*b^2*(3 + c^2) + 16*(
                  16 + 9*c^2)) - 16*a^2*(b^6 + b^4*(
                80 - 13*c^2) - 3*c^4*(16 + c^2) + b^2*
                c^2*(-32 + 
                  15*c^2)) + 2*a^4*(b^6 + b^4*(56 - 
                      10*c^2) - 24*c^2*(16 + 3*c^2) + b^2*(
                      384 + 16*c^2 + 9*c^4))))/(aafac^2 ssd^3);
(taumarE2D2calc - taumarE2D2 //. abcsub) // Chop

taumarE3D2calc = D[Dihedral[2, 2, 2, c, a, b], {a, 
                      2}] // Together // Simplify;
taumarE3D2 = -(8*(-256*(b^2 - c^2)^3 + 6*a^8*(-8 + c^2) + 16*a^2*
                   (3*b^6 + b^4*(48 - 15*c^2) - c^4*(80 + c^2) + b^2*
                      c^2*(32 + 13*c^2)) +
                a^6*(b^2*(144 - 16*c^2 + c^4) - 8*(-32 + 6*c^2 + c^4)) + 2*
a^4*(9*b^4*(-8 + c^2) + c^2*(384 + 56*c^2 + c^4) - 2*b^2*(192 - 8*
      c^2 + 5*c^4))))/(aafac^2 ssd^3);
(taumarE3D2calc - taumarE3D2 //. abcsub) // Chop

taumarD2num = (e1 taumarE1D2 + e2 taumarE2D2 + e3 
            taumarE3D2) (aafac^2 ssd^3) // Simplify
taumarD2numDef = (taumarD2num /. abcsq) // HolForm;  (* num2 in sphere.hl *)

(((D[taumarE, {a, 2}]) aafac^2 ssd^3 - taumarD2num) //. abcsub) // Chop

(* analysis near a2 -> 16 *)
{"near a2->16", DeltaX[4,
       4, 4, 16, b2, c2] // Factor, (num1sqI /. a2 -> 16) // Factor,
  ((taumarD2num /. abcsq) /. a2 -> 16) // Factor}


*)
let num2 = new_definition `num2 e1 e2 e3 a2 b2 c2 =
  (&8 * ((&2 * ((a2 pow 5) * e1)) + (((-- &256) * (((b2 + ((-- &1) * c2)) pow 3)  
 * (e2 + ((-- &1) * e3)))) + (((-- &1) * ((a2 pow 3) * ((&2 * (((-- &256) +  
 ((b2 pow 2) + (((-- &2) * (b2 * c2)) + (c2 pow 2)))) * e1)) + (((((b2 pow 2)  
 * ((-- &8) + c2)) + (((-- &16) * (b2 * (&3 + c2))) + (&16 * (&16 + (&9 *  
 c2))))) * e2) + (((b2 * (&144 + (((-- &16) * c2) + (c2 pow 2)))) + ((-- &8) *  
 ((-- &32) + ((&6 * c2) + (c2 pow 2))))) * e3))))) + (((a2 pow 4) * (((-- &64)  
 * e1) + ((-- &6) * ((((-- &8) + b2) * e2) + (((-- &8) + c2) * e3))))) + (((--  
 &2) * ((a2 pow 2) * ((b2 + ((-- &1) * c2)) * (((b2 pow 2) * e2) + ((&8 * (c2  
 * ((&4 * e1) + ((&9 * e2) + ((-- &7) * e3))))) + ((&384 * (e2 + ((-- &1) *  
 e3))) + (((-- &1) * ((c2 pow 2) * e3)) + (b2 * (((-- &32) * e1) + (((&56 +  
 ((-- &9) * c2)) * e2) + (&9 * (((-- &8) + c2) * e3)))))))))))) + (&16 * (a2 *  
 ((b2 + ((-- &1) * c2)) * (((b2 pow 2) * (e2 + ((-- &3) * e3))) + (((-- &4) *  
 (b2 * ((&8 * e1) + ((((-- &20) + (&3 * c2)) * e2) + ((-- &3) * (((-- &4) +  
 c2) * e3)))))) + (c2 * ((&32 * e1) + ((&3 * ((&16 + c2) * e2)) + ((-- &1) *  
 ((&80 + c2) * e3))))))))))))))))`;;

let rat1 = new_definition `rat1 e1 e2 e3 a2 b2 c2 = 
  num1 e1 e2 e3 a2 b2 c2 / 
    (sqrt(delta_x (&4) (&4) (&4) a2 b2 c2) * sqrt(a2) * (&16 - a2))`;;

let rat2 = new_definition `rat2 e1 e2 e3 a2 b2 c2 = 
  num2 e1 e2 e3 a2 b2 c2 / 
    (((sqrt(delta_x (&4) (&4) (&4) a2 b2 c2)) pow 3) * a2 * ((&16 - a2) pow 2))`;;

(* num1^2 - #0.01 * num2 *)

let num_combo1 = new_definition `num_combo1 e1 e2 e3 a2 b2 c2 =
((&2 / &25) * (((-- &2) * ((a2 pow 5) * e1)) + ((&256 * (((b2 + ((-- &1) *  
c2)) pow 3) * (e2 + ((-- &1) * e3)))) + (((a2 pow 3) * ((&2 * (((-- &256) +  
((b2 pow 2) + (((-- &2) * (b2 * c2)) + (c2 pow 2)))) * e1)) + (((((b2 pow 2)  
* ((-- &8) + c2)) + (((-- &16) * (b2 * (&3 + c2))) + (&16 * (&16 + (&9 *  
c2))))) * e2) + (((b2 * (&144 + (((-- &16) * c2) + (c2 pow 2)))) + ((-- &8) *  
((-- &32) + ((&6 * c2) + (c2 pow 2))))) * e3)))) + ((&2 * ((a2 pow 4) * ((&32  
* e1) + (&3 * ((((-- &8) + b2) * e2) + (((-- &8) + c2) * e3)))))) + ((&200 *  
((((a2 pow 2) * e1) + ((&8 * ((b2 + ((-- &1) * c2)) * (e2 + ((-- &1) * e3))))  
+ ((-- &1) * (a2 * ((&16 * e1) + ((((-- &8) + b2) * e2) + (((-- &8) + c2) *  
e3))))))) pow 2)) + ((&2 * ((a2 pow 2) * ((b2 + ((-- &1) * c2)) * (((b2 pow 2)  
* e2) + ((&8 * (c2 * ((&4 * e1) + ((&9 * e2) + ((-- &7) * e3))))) + ((&384 *  
(e2 + ((-- &1) * e3))) + (((-- &1) * ((c2 pow 2) * e3)) + (b2 * (((-- &32) *  
e1) + (((&56 + ((-- &9) * c2)) * e2) + (&9 * (((-- &8) + c2) *  
e3)))))))))))) + ((-- &16) * (a2 * ((b2 + ((-- &1) * c2)) * (((b2 pow 2) *  
(e2 + ((-- &3) * e3))) + (((-- &4) * (b2 * ((&8 * e1) + ((((-- &20) + (&3 *  
c2)) * e2) + ((-- &3) * (((-- &4) + c2) * e3)))))) + (c2 * ((&32 * e1) + ((&3  
* ((&16 + c2) * e2)) + ((-- &1) * ((&80 + c2) * e3)))))))))))))))))`;;
