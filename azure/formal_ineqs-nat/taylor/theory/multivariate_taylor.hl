open Hol_core
open Ssreflect
open Binomial
open Vectors
open Topology
open Derivatives
open Convex
open Dimension
open Realanalysis
open Ssrfun
open Ssrbool
open Ssrnat
open Taylor_interval
open Interval_arith
include Multivariate_taylor2
(* Section Diff2Arith *)
Sections.begin_section "Diff2Arith";;
(Sections.add_section_var (mk_var ("f", (`:real^N -> real`))); Sections.add_section_var (mk_var ("g", (`:real^N -> real`))));;
(Sections.add_section_var (mk_var ("x", (`:real^N`))));;
(Sections.add_section_var (mk_var ("domain", (`:real^N#real^N`))));;

(* Lemma differentiable_local_at *)
let differentiable_local_at = Sections.section_proof ["s";"f";"g";"x"]
`f differentiable at x ==>	open s ==> x IN s ==> (!y. y IN s ==> g y = f y) ==>
		g differentiable at x`
[
   ((((use_arg_then2 ("OPEN_CONTAINS_BALL", [OPEN_CONTAINS_BALL]))(thm_tac (new_rewrite [] [])))) THEN (move ["df"]) THEN (move ["open_s"]) THEN (move ["xs"]) THEN (move ["eq"]));
   ((((fun arg_tac -> (use_arg_then2 ("open_s", [])) (fun fst_arg -> (use_arg_then2 ("xs", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["d"])) THEN (case THEN (move ["d0"]))) THEN (((((use_arg_then2 ("SUBSET", [SUBSET]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_BALL", [IN_BALL]))(thm_tac (new_rewrite [] []))))) THEN (move ["in_ball"])));
   ((((fun arg_tac -> (use_arg_then2 ("DIFFERENTIABLE_TRANSFORM_AT", [DIFFERENTIABLE_TRANSFORM_AT])) (fun fst_arg -> (use_arg_then2 ("f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] []))))));
   (((use_arg_then2 ("d", [])) (term_tac exists_tac)) THEN (((((use_arg_then2 ("d0", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (move ["z"]) THEN (move ["dzx"])) THEN ((((use_arg_then2 ("eq", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("in_ball", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIST_SYM", [DIST_SYM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Section Point *)
Sections.begin_section "Point";;

(* Lemma diff2_scale *)
let diff2_scale = Sections.section_proof ["f";"c"]
`diff2 f x ==> diff2 (\x. c * f x) x`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]));
   (((use_arg_then2 ("s", [])) (term_tac exists_tac)) THEN (((((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) THEN (move ["z"]) THEN (move ["zs"])));
   ((THENL_FIRST) ((((use_arg_then2 ("f_lift_scale", [f_lift_scale]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_CMUL", [DIFFERENTIABLE_CMUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((BETA_TAC THEN (move ["i"])) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("differentiable_local_at", [differentiable_local_at])) (fun fst_arg -> (use_arg_then2 ("s", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`lift o (\x. c * partial i f x)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)));
   ((THENL_FIRST) ((((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("zs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_scale", [f_lift_scale]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_CMUL", [DIFFERENTIABLE_CMUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) ((repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (move ["ys"])) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial_scale", [partial_scale]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("LIFT_CMUL", [LIFT_CMUL]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_neg *)
let diff2_neg = Sections.section_proof ["f"]
`diff2 f x ==> diff2 (\x. --f x) x`
[
   (((DISCH_THEN (fun snd_th -> (fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2_scale", [diff2_scale])) (fun fst_arg -> (use_arg_then2 ("f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`--(&1)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN (((use_arg_then2 ("REAL_NEG_MINUS1", [REAL_NEG_MINUS1]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Section Composite *)
Sections.begin_section "Composite";;

(* Lemma has_derivative_uni_compose *)
let has_derivative_uni_compose = Sections.section_proof ["u";"f";"u'";"f'";"x"]
`(lift o f has_derivative f') (at x) ==>
	(u has_real_derivative u') (atreal (f x)) ==>
	(lift o u o f has_derivative (\x. u' % f' x)) (at x)`
[
   (BETA_TAC THEN (move ["df"]) THEN (move ["du"]));
   ((fun arg_tac -> arg_tac (Arg_term (`lift o u o f = (lift o u o drop) o (lift o f)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then2 ("eq_ext", [eq_ext]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("LIFT_DROP", [LIFT_DROP]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`(\x. u' % f' x) = (\x. u' % x) o f'`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))) (((((use_arg_then2 ("eq_ext", [eq_ext]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (done_tac)));
   (((((use_arg_then2 ("DIFF_CHAIN_AT", [DIFF_CHAIN_AT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL HAS_REAL_FRECHET_DERIVATIVE_AT)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff_uni_compose *)
let diff_uni_compose = Sections.section_proof ["u";"f";"x"]
`lift o f differentiable at x ==> 
	u real_differentiable atreal (f x) ==>
	lift o u o f differentiable at x`
[
   (((repeat_tactic 1 9 (((use_arg_then2 ("differentiable", [differentiable]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("real_differentiable", [real_differentiable]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["f'"])) THEN (move ["df"]) THEN (case THEN (move ["u'"])) THEN (move ["du"]));
   (((fun arg_tac -> arg_tac (Arg_term (`\x. u' % f' x`))) (term_tac exists_tac)) THEN ((use_arg_then2 ("has_derivative_uni_compose", [has_derivative_uni_compose])) (thm_tac apply_tac)) THEN (done_tac));
];;

(* Lemma diff2_uni_compose *)
let diff2_uni_compose = Sections.section_proof ["u";"f"]
`diff2 f x ==> nth_diff_strong 2 u (f x) ==> diff2 (u o f) x`
[
   (((repeat_tactic 1 9 (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("nth_diff_strong2_eq", [nth_diff_strong2_eq]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]) THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["fxt"])) THEN (move ["du"]));
   ((fun arg_tac -> arg_tac (Arg_term (`{z | z IN s /\ (lift o f) z IN (IMAGE lift t)}`))) (term_tac (set_tac "r")));
   ((fun arg_tac -> arg_tac (Arg_term (`open r`))) (term_tac (have_gen_tac [](move ["open_r"]))));
   ((((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("CONTINUOUS_OPEN_PREIMAGE", [CONTINUOUS_OPEN_PREIMAGE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_OPEN", [REAL_OPEN]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("open_t", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] []))))));
   (((use_arg_then2 ("DIFFERENTIABLE_IMP_CONTINUOUS_ON", [DIFFERENTIABLE_IMP_CONTINUOUS_ON])) (thm_tac apply_tac)) THEN ((((use_arg_then2 ("differentiable_on", [differentiable_on]))(thm_tac (new_rewrite [] [])))) THEN (move ["y"]) THEN (move ["ys"])) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))));
   (((((use_arg_then2 ("DIFFERENTIABLE_AT_WITHIN", [DIFFERENTIABLE_AT_WITHIN]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) (((use_arg_then2 ("r", [])) (term_tac exists_tac)) THEN ((((use_arg_then2 ("open_r", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("LIFT_IN_IMAGE_LIFT", [LIFT_IN_IMAGE_LIFT]))(thm_tac (new_rewrite [] []))))) THEN (split_tac)) (((use_arg_then2 ("x", [])) (term_tac exists_tac)) THEN (done_tac)));
   (BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["z"])) THEN (case THEN ((case THEN (move ["zs"])) THEN (move ["fzt"]))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("diff_uni_compose", [diff_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"]));
   (((use_arg_then2 ("differentiable_local_at", [differentiable_local_at])) (thm_tac apply_tac)) THEN (((use_arg_then2 ("r", [])) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`lift o (\y. derivative u (f y) * partial i f y)`))) (term_tac exists_tac))));
   ((((use_arg_then2 ("open_r", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("differentiable_mul", [differentiable_mul]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (use_arg_then2 ("o_THM", [o_THM])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`derivative u`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN ((((use_arg_then2 ("diff_uni_compose", [diff_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) (((((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("LIFT_IN_IMAGE_LIFT", [LIFT_IN_IMAGE_LIFT]))(thm_tac (new_rewrite [] [])))))) THEN (split_tac)) (((use_arg_then2 ("z", [])) (term_tac exists_tac)) THEN (done_tac)));
   (BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["p"])) THEN (case THEN ((case THEN (move ["ps"])) THEN (move ["fpt"]))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("partial_uni_compose", [partial_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2_inv_compose *)
let diff2_inv_compose = Sections.section_proof []
`~(f x = &0) ==> diff2 f x ==> diff2 (inv o f) x`
[
   ((BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2_inv", [diff2_inv])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["du"]) THEN (move ["df"])) THEN (((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2_sqrt_compose *)
let diff2_sqrt_compose = Sections.section_proof []
`&0 < f x ==> diff2 f x ==> diff2 (sqrt o f) x`
[
   ((BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2_sqrt", [diff2_sqrt])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["du"]) THEN (move ["df"])) THEN (((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2_atn_compose *)
let diff2_atn_compose = Sections.section_proof []
`diff2 f x ==> diff2 (atn o f) x`
[
   ((BETA_TAC THEN (move ["df"])) THEN ((((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_atn", [diff2_atn]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_cos_compose *)
let diff2_cos_compose = Sections.section_proof []
`diff2 f x ==> diff2 (cos o f) x`
[
   ((BETA_TAC THEN (move ["df"])) THEN ((((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_cos", [diff2_cos]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_sin_compose *)
let diff2_sin_compose = Sections.section_proof []
`diff2 f x ==> diff2 (sin o f) x`
[
   ((BETA_TAC THEN (move ["df"])) THEN ((((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_sin", [diff2_sin]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_exp_compose *)
let diff2_exp_compose = Sections.section_proof []
`diff2 f x ==> diff2 (exp o f) x`
[
   ((BETA_TAC THEN (move ["df"])) THEN ((((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_exp", [diff2_exp]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_log_compose *)
let diff2_log_compose = Sections.section_proof []
`&0 < f x ==> diff2 f x ==> diff2 (log o f) x`
[
   ((BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2_log", [diff2_log])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["du"]) THEN (move ["df"])) THEN (((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2_acs_compose *)
let diff2_acs_compose = Sections.section_proof []
`abs (f x) < &1 ==> diff2 f x ==> diff2 (acs o f) x`
[
   ((BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2_acs", [diff2_acs])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["du"]) THEN (move ["df"])) THEN (((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2_asn_compose *)
let diff2_asn_compose = Sections.section_proof []
`abs (f x) < &1 ==> diff2 f x ==> diff2 (asn o f) x`
[
   ((BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2_asn", [diff2_asn])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["du"]) THEN (move ["df"])) THEN (((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2_matan_compose *)
let diff2_matan_compose = Sections.section_proof []
`-- &1 < f x ==> diff2 f x ==> diff2 (matan o f) x`
[
   ((BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2_matan", [diff2_matan])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["du"]) THEN (move ["df"])) THEN (((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Finalization of the section Composite *)
let has_derivative_uni_compose = Sections.finalize_theorem has_derivative_uni_compose;;
let diff_uni_compose = Sections.finalize_theorem diff_uni_compose;;
let diff2_uni_compose = Sections.finalize_theorem diff2_uni_compose;;
let diff2_inv_compose = Sections.finalize_theorem diff2_inv_compose;;
let diff2_sqrt_compose = Sections.finalize_theorem diff2_sqrt_compose;;
let diff2_atn_compose = Sections.finalize_theorem diff2_atn_compose;;
let diff2_cos_compose = Sections.finalize_theorem diff2_cos_compose;;
let diff2_sin_compose = Sections.finalize_theorem diff2_sin_compose;;
let diff2_exp_compose = Sections.finalize_theorem diff2_exp_compose;;
let diff2_log_compose = Sections.finalize_theorem diff2_log_compose;;
let diff2_acs_compose = Sections.finalize_theorem diff2_acs_compose;;
let diff2_asn_compose = Sections.finalize_theorem diff2_asn_compose;;
let diff2_matan_compose = Sections.finalize_theorem diff2_matan_compose;;
Sections.end_section "Composite";;

(* Lemma diff2_add *)
let diff2_add = Sections.section_proof ["f";"g"]
`diff2 f x ==> diff2 g x ==> diff2 (\x. f x + g x) x`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]) THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["ys"])) THEN (move ["dg"]));
   (((fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (term_tac exists_tac)) THEN (((((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("ys", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) THEN (move ["z"]) THEN (case THEN ((move ["zs"]) THEN (move ["zt"])))));
   ((((use_arg_then2 ("f_lift_add", [f_lift_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_ADD", [DIFFERENTIABLE_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN ((((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((BETA_TAC THEN (move ["i"])) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("differentiable_local_at", [differentiable_local_at])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`lift o (\x. partial i f x + partial i g x)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)));
   ((((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("zt", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("zs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_add", [f_lift_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_ADD", [DIFFERENTIABLE_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN ((((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN ((move ["ys"]) THEN (move ["yt"])))) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial_add", [partial_add]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("LIFT_ADD", [LIFT_ADD]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_sub *)
let diff2_sub = Sections.section_proof ["f";"g"]
`diff2 f x ==> diff2 g x ==> diff2 (\x. f x - g x) x`
[
   ((BETA_TAC THEN (move ["d2f"]) THEN (move ["d2g"])) THEN ((((use_arg_then2 ("real_sub", [real_sub]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_add", [diff2_add]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("diff2_neg", [diff2_neg]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_mul *)
let diff2_mul = Sections.section_proof ["f";"g"]
`diff2 f x ==> diff2 g x ==> diff2 (\x. f x * g x) x`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]) THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["ys"])) THEN (move ["dg"]));
   (((fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (term_tac exists_tac)) THEN (((((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("ys", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) THEN (move ["z"]) THEN (case THEN ((move ["zs"]) THEN (move ["zt"])))));
   (((((use_arg_then2 ("differentiable_mul", [differentiable_mul]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"]));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("differentiable_local_at", [differentiable_local_at])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`lift o (\x. partial i f x * g x + f x * partial i g x)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac));
   ((((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("zt", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("zs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_add", [f_lift_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_ADD", [DIFFERENTIABLE_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("differentiable_mul", [differentiable_mul]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN ((repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN ((move ["ys"]) THEN (move ["yt"])))) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial_mul", [partial_mul]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("LIFT_ADD", [LIFT_ADD]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section Point *)
let diff2_scale = Sections.finalize_theorem diff2_scale;;
let diff2_neg = Sections.finalize_theorem diff2_neg;;
let has_derivative_uni_compose = Sections.finalize_theorem has_derivative_uni_compose;;
let diff_uni_compose = Sections.finalize_theorem diff_uni_compose;;
let diff2_uni_compose = Sections.finalize_theorem diff2_uni_compose;;
let diff2_inv_compose = Sections.finalize_theorem diff2_inv_compose;;
let diff2_sqrt_compose = Sections.finalize_theorem diff2_sqrt_compose;;
let diff2_atn_compose = Sections.finalize_theorem diff2_atn_compose;;
let diff2_cos_compose = Sections.finalize_theorem diff2_cos_compose;;
let diff2_sin_compose = Sections.finalize_theorem diff2_sin_compose;;
let diff2_exp_compose = Sections.finalize_theorem diff2_exp_compose;;
let diff2_log_compose = Sections.finalize_theorem diff2_log_compose;;
let diff2_acs_compose = Sections.finalize_theorem diff2_acs_compose;;
let diff2_asn_compose = Sections.finalize_theorem diff2_asn_compose;;
let diff2_matan_compose = Sections.finalize_theorem diff2_matan_compose;;
let diff2_add = Sections.finalize_theorem diff2_add;;
let diff2_sub = Sections.finalize_theorem diff2_sub;;
let diff2_mul = Sections.finalize_theorem diff2_mul;;
Sections.end_section "Point";;

(* Section Domain *)
Sections.begin_section "Domain";;
(Sections.add_section_hyp "d2f" (`diff2_domain domain f`));;

(* Lemma diff2_domain_scale *)
let diff2_domain_scale = Sections.section_proof ["c"]
`diff2_domain domain (\x. c * f x)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_scale", [diff2_scale]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_neg *)
let diff2_domain_neg = Sections.section_proof []
`diff2_domain domain (\x. --f x)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_neg", [diff2_neg]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(Sections.add_section_var (mk_var ("bounds", (`:real#real`))));;

(* Lemma diff2_domain_inv_compose *)
let diff2_domain_inv_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_not_zero bounds ==> diff2_domain domain (inv o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2_inv_compose", [diff2_inv_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_not_zero", [interval_arith_not_zero])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_sqrt_compose *)
let diff2_domain_sqrt_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_pos bounds ==> diff2_domain domain (sqrt o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2_sqrt_compose", [diff2_sqrt_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_pos", [interval_arith_pos])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_atn_compose *)
let diff2_domain_atn_compose = Sections.section_proof []
`diff2_domain domain (atn o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_atn_compose", [diff2_atn_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_cos_compose *)
let diff2_domain_cos_compose = Sections.section_proof []
`diff2_domain domain (cos o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_cos_compose", [diff2_cos_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_sin_compose *)
let diff2_domain_sin_compose = Sections.section_proof []
`diff2_domain domain (sin o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_sin_compose", [diff2_sin_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_exp_compose *)
let diff2_domain_exp_compose = Sections.section_proof []
`diff2_domain domain (exp o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_exp_compose", [diff2_exp_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_log_compose *)
let diff2_domain_log_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_pos bounds ==> diff2_domain domain (log o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2_log_compose", [diff2_log_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_pos", [interval_arith_pos])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_acs_compose *)
let diff2_domain_acs_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	iabs bounds < &1 ==> diff2_domain domain (acs o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2_acs_compose", [diff2_acs_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_abs", [interval_arith_abs])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_asn_compose *)
let diff2_domain_asn_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	iabs bounds < &1 ==> diff2_domain domain (asn o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2_asn_compose", [diff2_asn_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_abs", [interval_arith_abs])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_matan_compose *)
let diff2_domain_matan_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_gt (-- &1) bounds ==> diff2_domain domain (matan o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2_matan_compose", [diff2_matan_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_gt", [interval_arith_gt])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(Sections.add_section_hyp "d2g" (`diff2_domain domain g`));;

(* Lemma diff2_domain_add *)
let diff2_domain_add = Sections.section_proof []
`diff2_domain domain (\x. f x + g x)`
[
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["d2g"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_add", [diff2_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2_domain_sub *)
let diff2_domain_sub = Sections.section_proof []
`diff2_domain domain (\x. f x - g x)`
[
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["d2g"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_sub", [diff2_sub]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2_domain_mul *)
let diff2_domain_mul = Sections.section_proof []
`diff2_domain domain (\x. f x * g x)`
[
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["d2g"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2_mul", [diff2_mul]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Finalization of the section Domain *)
let diff2_domain_scale = Sections.finalize_theorem diff2_domain_scale;;
let diff2_domain_neg = Sections.finalize_theorem diff2_domain_neg;;
let diff2_domain_inv_compose = Sections.finalize_theorem diff2_domain_inv_compose;;
let diff2_domain_sqrt_compose = Sections.finalize_theorem diff2_domain_sqrt_compose;;
let diff2_domain_atn_compose = Sections.finalize_theorem diff2_domain_atn_compose;;
let diff2_domain_cos_compose = Sections.finalize_theorem diff2_domain_cos_compose;;
let diff2_domain_sin_compose = Sections.finalize_theorem diff2_domain_sin_compose;;
let diff2_domain_exp_compose = Sections.finalize_theorem diff2_domain_exp_compose;;
let diff2_domain_log_compose = Sections.finalize_theorem diff2_domain_log_compose;;
let diff2_domain_acs_compose = Sections.finalize_theorem diff2_domain_acs_compose;;
let diff2_domain_asn_compose = Sections.finalize_theorem diff2_domain_asn_compose;;
let diff2_domain_matan_compose = Sections.finalize_theorem diff2_domain_matan_compose;;
let diff2_domain_add = Sections.finalize_theorem diff2_domain_add;;
let diff2_domain_sub = Sections.finalize_theorem diff2_domain_sub;;
let diff2_domain_mul = Sections.finalize_theorem diff2_domain_mul;;
Sections.end_section "Domain";;

(* Section SecondPartial *)
Sections.begin_section "SecondPartial";;

(* Lemma diff2_imp_diff *)
let diff2_imp_diff = Sections.section_proof ["f";"x"]
`diff2 f x ==> (lift o f) differentiable at x`
[
   (((((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_imp_partial_diff *)
let diff2_imp_partial_diff = Sections.section_proof ["f";"i";"x"]
`diff2 f x ==> (lift o partial i f) differentiable at x`
[
   (((((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma partial_local *)
let partial_local = Sections.section_proof ["s";"f";"g";"i";"x"]
`(lift o f) differentiable at x ==>
	open s ==> x IN s ==> (!y:real^N. y IN s ==> f y = g y) ==>
	partial i f x = partial i g x`
[
   ((BETA_TAC THEN (move ["df"]) THEN (move ["open_s"]) THEN (move ["xs"]) THEN (move ["eq"])) THEN (repeat_tactic 1 9 (((use_arg_then2 ("partial", [partial]))(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then2 ("derivative_unique", [derivative_unique])) (disch_tac [])) THEN (clear_assumption "derivative_unique") THEN (DISCH_THEN apply_tac)) THEN (((use_arg_then2 ("HAS_REAL_DERIVATIVE_LOCAL", [HAS_REAL_DERIVATIVE_LOCAL])) (disch_tac [])) THEN (clear_assumption "HAS_REAL_DERIVATIVE_LOCAL") THEN (DISCH_THEN apply_tac)));
   (((fun arg_tac -> arg_tac (Arg_term (`g o (\t. x + t % basis i)`))) (term_tac exists_tac)) THEN (split_tac));
   ((((use_arg_then2 ("has_derivative_alt", [has_derivative_alt])) (disch_tac [])) THEN (clear_assumption "has_derivative_alt") THEN (DISCH_THEN apply_tac)) THEN ((use_arg_then2 ("diff_imp_real_diff", [diff_imp_real_diff])) (thm_tac apply_tac)) THEN ((((use_arg_then2 ("diff_direction", [diff_direction]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("differentiable_local_at", [differentiable_local_at])) (fun fst_arg -> (use_arg_then2 ("s", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`lift o f`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac apply_tac));
   (((simp_tac) THEN (((use_arg_then2 ("VECTOR_MUL_LZERO", [VECTOR_MUL_LZERO]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("VECTOR_ADD_RID", [VECTOR_ADD_RID]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) THEN (move ["y"]) THEN (move ["ys"]));
   (((repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("eq", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("open_contains_open_interval", [open_contains_open_interval])) (fun fst_arg -> (use_arg_then2 ("open_s", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("xs", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`basis i:real^N`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["a"])) THEN (case THEN (move ["b"])) THEN (case THEN (move ["ab0"]))) THEN ((((use_arg_then2 ("SUBSET", [SUBSET]))(thm_tac (new_rewrite [] [])))) THEN (move ["sub"])));
   (((fun arg_tac -> arg_tac (Arg_term (`real_interval (a, b)`))) (term_tac exists_tac)) THEN (((((use_arg_then2 ("ab0", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_OPEN_REAL_INTERVAL", [REAL_OPEN_REAL_INTERVAL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) THEN (move ["y"]) THEN (move ["y_in"])));
   (((repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then2 ("eq", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("sub", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_IMAGE", [IN_IMAGE]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ((use_arg_then2 ("y", [])) (term_tac exists_tac)) THEN (done_tac));
];;
(Sections.add_section_var (mk_var ("i", (`:num`))); Sections.add_section_var (mk_var ("j", (`:num`))));;

(* Lemma second_partial_scale *)
let second_partial_scale = Sections.section_proof ["f";"c"]
`diff2 f x ==> partial2 i j (\x. c * f x) x = c * partial2 i j f x`
[
   ((BETA_TAC THEN (move ["d2f"])) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("partial2", [partial2]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial_scale", [partial_scale]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("diff2_imp_partial_diff", [diff2_imp_partial_diff]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("EQ_SYM_EQ", [EQ_SYM_EQ]))(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"])));
   (((use_arg_then2 ("partial_local", [partial_local])) (thm_tac apply_tac)) THEN ((use_arg_then2 ("s", [])) (term_tac exists_tac)) THEN ((((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_scale", [f_lift_scale]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_CMUL", [DIFFERENTIABLE_CMUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((BETA_TAC THEN (move ["y"]) THEN (move ["ys"])) THEN ((((use_arg_then2 ("partial_scale", [partial_scale]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma second_partial_neg *)
let second_partial_neg = Sections.section_proof ["f"]
`diff2 f x ==> partial2 i j (\x. --f x) x = --partial2 i j f x`
[
   (((DISCH_THEN (fun snd_th -> (fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("second_partial_scale", [second_partial_scale])) (fun fst_arg -> (use_arg_then2 ("f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`--(&1)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_NEG_MINUS1", [REAL_NEG_MINUS1]))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma second_partial_add *)
let second_partial_add = Sections.section_proof ["f";"g"]
`diff2 f x ==> diff2 g x ==> 
	partial2 i j (\x. f x + g x) x = partial2 i j f x + partial2 i j g x`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]) THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["ys"])) THEN (move ["dg"]));
   (((repeat_tactic 1 9 (((use_arg_then2 ("partial2", [partial2]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial_add", [partial_add]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("EQ_SYM_EQ", [EQ_SYM_EQ]))(thm_tac (new_rewrite [] []))))) THEN ((use_arg_then2 ("partial_local", [partial_local])) (thm_tac apply_tac)));
   (((fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (term_tac exists_tac)) THEN ((((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("ys", []))(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then2 ("f_lift_add", [f_lift_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_ADD", [DIFFERENTIABLE_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN ((((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((BETA_TAC THEN (move ["z"]) THEN (case THEN ((move ["zs"]) THEN (move ["zt"])))) THEN ((((use_arg_then2 ("partial_add", [partial_add]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma second_partial_sub *)
let second_partial_sub = Sections.section_proof ["f";"g"]
`diff2 f x ==> diff2 g x ==> 
	partial2 i j (\x. f x - g x) x = partial2 i j f x - partial2 i j g x`
[
   ((BETA_TAC THEN (move ["d2f"]) THEN (move ["d2g"])) THEN ((((use_arg_then2 ("real_sub", [real_sub]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("second_partial_add", [second_partial_add]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("diff2_neg", [diff2_neg]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("second_partial_neg", [second_partial_neg]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("real_sub", [real_sub]))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma second_partial_mul *)
let second_partial_mul = Sections.section_proof ["f";"g"]
`diff2 f x ==> diff2 g x ==> 
	partial2 i j (\x. f x * g x) x = (partial2 i j f x * g x + partial j f x * partial i g x) +
		(partial i f x * partial j g x + f x * partial2 i j g x)`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]) THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["ys"])) THEN (move ["dg"]));
   ((repeat_tactic 1 9 (((use_arg_then2 ("partial2", [partial2]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("partial_mul", [partial_mul]))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("partial_add", [partial_add]))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (repeat_tactic 0 1 (((use_arg_then2 ("EQ_SYM_EQ", [EQ_SYM_EQ]))(thm_tac (new_rewrite [] []))))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("differentiable_mul", [differentiable_mul]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN ((repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((use_arg_then2 ("partial_local", [partial_local])) (thm_tac apply_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (term_tac exists_tac)) THEN ((((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("ys", []))(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then2 ("f_lift_add", [f_lift_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_ADD", [DIFFERENTIABLE_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("differentiable_mul", [differentiable_mul]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN ((repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((BETA_TAC THEN (move ["z"]) THEN (case THEN ((move ["zs"]) THEN (move ["zt"])))) THEN ((((use_arg_then2 ("partial_mul", [partial_mul]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("dg", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma second_partial_uni_compose *)
let second_partial_uni_compose = Sections.section_proof ["f";"u"]
`diff2 f x ==> nth_diff_strong 2 u (f x) ==>
	partial2 i j (u o f) x = (nth_derivative 2 u (f x) * partial i f x) * partial j f x +
				derivative u (f x) * partial2 i j f x`
[
   (((repeat_tactic 1 9 (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("nth_diff_strong2_eq", [nth_diff_strong2_eq]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]) THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["fxt"])) THEN (move ["du"]));
   ((fun arg_tac -> arg_tac (Arg_term (`{z | z IN s /\ (lift o f) z IN (IMAGE lift t)}`))) (term_tac (set_tac "r")));
   ((fun arg_tac -> arg_tac (Arg_term (`open r`))) (term_tac (have_gen_tac [](move ["open_r"]))));
   ((((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("CONTINUOUS_OPEN_PREIMAGE", [CONTINUOUS_OPEN_PREIMAGE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_OPEN", [REAL_OPEN]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("open_t", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] []))))));
   (((use_arg_then2 ("DIFFERENTIABLE_IMP_CONTINUOUS_ON", [DIFFERENTIABLE_IMP_CONTINUOUS_ON])) (thm_tac apply_tac)) THEN ((((use_arg_then2 ("differentiable_on", [differentiable_on]))(thm_tac (new_rewrite [] [])))) THEN (move ["y"]) THEN (move ["ys"])) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))));
   (((((use_arg_then2 ("DIFFERENTIABLE_AT_WITHIN", [DIFFERENTIABLE_AT_WITHIN]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((repeat_tactic 1 9 (((use_arg_then2 ("partial2", [partial2]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("nth_derivative2", [nth_derivative2]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("partial_uni_compose", [partial_uni_compose]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((fun arg_tac -> (use_arg_then2 ("o_THM", [o_THM])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`derivative u`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial_mul", [partial_mul]))(gsym_then (thm_tac (new_rewrite [] []))))));
   (((((use_arg_then2 ("diff_uni_compose", [diff_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((use_arg_then2 ("partial_local", [partial_local])) (thm_tac apply_tac)) THEN ((use_arg_then2 ("r", [])) (term_tac exists_tac)) THEN ((((use_arg_then2 ("open_r", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] []))))));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("LIFT_IN_IMAGE_LIFT", [LIFT_IN_IMAGE_LIFT]))(thm_tac (new_rewrite [] []))))) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["z"])) THEN (case THEN ((case THEN (move ["zs"])) THEN (move ["fpz"]))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then2 ("partial_uni_compose", [partial_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_LAST) (split_tac) (((use_arg_then2 ("x", [])) (term_tac exists_tac)) THEN (done_tac)));
   (((use_arg_then2 ("differentiable_local_at", [differentiable_local_at])) (thm_tac apply_tac)) THEN (((use_arg_then2 ("r", [])) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`lift o (\y. derivative u (f y) * partial j f y)`))) (term_tac exists_tac))));
   ((((use_arg_then2 ("open_r", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("differentiable_mul", [differentiable_mul]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (use_arg_then2 ("o_THM", [o_THM])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`derivative u`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN ((((use_arg_then2 ("diff_uni_compose", [diff_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) (((((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("LIFT_IN_IMAGE_LIFT", [LIFT_IN_IMAGE_LIFT]))(thm_tac (new_rewrite [] [])))))) THEN (split_tac)) (((use_arg_then2 ("x", [])) (term_tac exists_tac)) THEN (done_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["p"])) THEN (case THEN ((case THEN (move ["ps"])) THEN (move ["fpt"]))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then2 ("partial_uni_compose", [partial_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("du", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Finalization of the section SecondPartial *)
let diff2_imp_diff = Sections.finalize_theorem diff2_imp_diff;;
let diff2_imp_partial_diff = Sections.finalize_theorem diff2_imp_partial_diff;;
let partial_local = Sections.finalize_theorem partial_local;;
let second_partial_scale = Sections.finalize_theorem second_partial_scale;;
let second_partial_neg = Sections.finalize_theorem second_partial_neg;;
let second_partial_add = Sections.finalize_theorem second_partial_add;;
let second_partial_sub = Sections.finalize_theorem second_partial_sub;;
let second_partial_mul = Sections.finalize_theorem second_partial_mul;;
let second_partial_uni_compose = Sections.finalize_theorem second_partial_uni_compose;;
Sections.end_section "SecondPartial";;

(* Finalization of the section Diff2Arith *)
let differentiable_local_at = Sections.finalize_theorem differentiable_local_at;;
let diff2_scale = Sections.finalize_theorem diff2_scale;;
let diff2_neg = Sections.finalize_theorem diff2_neg;;
let has_derivative_uni_compose = Sections.finalize_theorem has_derivative_uni_compose;;
let diff_uni_compose = Sections.finalize_theorem diff_uni_compose;;
let diff2_uni_compose = Sections.finalize_theorem diff2_uni_compose;;
let diff2_inv_compose = Sections.finalize_theorem diff2_inv_compose;;
let diff2_sqrt_compose = Sections.finalize_theorem diff2_sqrt_compose;;
let diff2_atn_compose = Sections.finalize_theorem diff2_atn_compose;;
let diff2_cos_compose = Sections.finalize_theorem diff2_cos_compose;;
let diff2_sin_compose = Sections.finalize_theorem diff2_sin_compose;;
let diff2_exp_compose = Sections.finalize_theorem diff2_exp_compose;;
let diff2_log_compose = Sections.finalize_theorem diff2_log_compose;;
let diff2_acs_compose = Sections.finalize_theorem diff2_acs_compose;;
let diff2_asn_compose = Sections.finalize_theorem diff2_asn_compose;;
let diff2_matan_compose = Sections.finalize_theorem diff2_matan_compose;;
let diff2_add = Sections.finalize_theorem diff2_add;;
let diff2_sub = Sections.finalize_theorem diff2_sub;;
let diff2_mul = Sections.finalize_theorem diff2_mul;;
let diff2_domain_scale = Sections.finalize_theorem diff2_domain_scale;;
let diff2_domain_neg = Sections.finalize_theorem diff2_domain_neg;;
let diff2_domain_inv_compose = Sections.finalize_theorem diff2_domain_inv_compose;;
let diff2_domain_sqrt_compose = Sections.finalize_theorem diff2_domain_sqrt_compose;;
let diff2_domain_atn_compose = Sections.finalize_theorem diff2_domain_atn_compose;;
let diff2_domain_cos_compose = Sections.finalize_theorem diff2_domain_cos_compose;;
let diff2_domain_sin_compose = Sections.finalize_theorem diff2_domain_sin_compose;;
let diff2_domain_exp_compose = Sections.finalize_theorem diff2_domain_exp_compose;;
let diff2_domain_log_compose = Sections.finalize_theorem diff2_domain_log_compose;;
let diff2_domain_acs_compose = Sections.finalize_theorem diff2_domain_acs_compose;;
let diff2_domain_asn_compose = Sections.finalize_theorem diff2_domain_asn_compose;;
let diff2_domain_matan_compose = Sections.finalize_theorem diff2_domain_matan_compose;;
let diff2_domain_add = Sections.finalize_theorem diff2_domain_add;;
let diff2_domain_sub = Sections.finalize_theorem diff2_domain_sub;;
let diff2_domain_mul = Sections.finalize_theorem diff2_domain_mul;;
let diff2_imp_diff = Sections.finalize_theorem diff2_imp_diff;;
let diff2_imp_partial_diff = Sections.finalize_theorem diff2_imp_partial_diff;;
let partial_local = Sections.finalize_theorem partial_local;;
let second_partial_scale = Sections.finalize_theorem second_partial_scale;;
let second_partial_neg = Sections.finalize_theorem second_partial_neg;;
let second_partial_add = Sections.finalize_theorem second_partial_add;;
let second_partial_sub = Sections.finalize_theorem second_partial_sub;;
let second_partial_mul = Sections.finalize_theorem second_partial_mul;;
let second_partial_uni_compose = Sections.finalize_theorem second_partial_uni_compose;;
Sections.end_section "Diff2Arith";;

(* Section Diff2c *)
Sections.begin_section "Diff2c";;

(* Lemma real_cont_at_local *)
let real_cont_at_local = Sections.section_proof ["f";"g";"x";"s"]
`g real_continuous at x ==> open s ==> x IN s ==>
	(!y. y IN s ==> f y = g y) ==> f real_continuous at x`
[
   ((repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL real_continuous_at)))(thm_tac (new_rewrite [] []))))) THEN (move ["g_cont"]) THEN (move ["open_s"]) THEN (move ["xs"]) THEN (move ["f_eq_g"]) THEN (move ["e"]) THEN (move ["e_gt0"]));
   (((fun arg_tac -> (use_arg_then2 ("OPEN_CONTAINS_BALL", [OPEN_CONTAINS_BALL])) (fun fst_arg -> (use_arg_then2 ("s", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN ((((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("ball", [ball]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("SUBSET", [SUBSET]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   (((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then2 ("xs", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)) THEN BETA_TAC THEN (case THEN (move ["d0"])) THEN (case THEN (move ["d0_gt0"])) THEN (move ["sub_s"]));
   (((fun arg_tac -> (use_arg_then2 ("g_cont", [])) (fun fst_arg -> (use_arg_then2 ("e_gt0", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["d1"])) THEN (case THEN (move ["d1_gt0"])) THEN (move ["dist_cond"]));
   ((fun arg_tac -> arg_tac (Arg_term (`min d0 d1`))) (term_tac exists_tac));
   (((repeat_tactic 1 9 (((use_arg_then2 ("REAL_LT_MIN", [REAL_LT_MIN]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("d1_gt0", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d0_gt0", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["y"]) THEN (case THEN ((move ["yd0"]) THEN (move ["yd1"]))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("f_eq_g", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((((use_arg_then2 ("sub_s", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIST_SYM", [DIST_SYM]))(thm_tac (new_rewrite [] []))))) THEN ((use_arg_then2 ("y", [])) (term_tac exists_tac)) THEN (done_tac));
   (((use_arg_then2 ("dist_cond", [])) (disch_tac [])) THEN (clear_assumption "dist_cond") THEN (exact_tac));
];;

(* Lemma real_cont_atreal_local *)
let real_cont_atreal_local = Sections.section_proof ["v";"u";"t";"x"]
`v real_continuous atreal x ==> real_open t ==> x IN t ==>
	(!y. y IN t ==> u y = v y) ==> u real_continuous atreal x`
[
   (repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS_ATREAL)))(thm_tac (new_rewrite [] [])))));
   (((repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then2 ("REAL_OPEN", [REAL_OPEN]))(thm_tac (new_rewrite [] []))))) THEN (move ["vc"]) THEN (move ["open_t"]) THEN (move ["xt"]) THEN (move ["v_eq_u"]));
   ((use_arg_then2 ("real_cont_at_local", [real_cont_at_local])) (thm_tac apply_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`v o drop`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`IMAGE lift t`))) (term_tac exists_tac)));
   ((((((use_arg_then2 ("open_t", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("vc", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("LIFT_IN_IMAGE_LIFT", [LIFT_IN_IMAGE_LIFT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("xt", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("IN_IMAGE_LIFT_DROP", [IN_IMAGE_LIFT_DROP]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))))) THEN (move ["y"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("v_eq_u", [])) (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (done_tac));
];;
(Sections.add_section_type (mk_var ("f", (`:real^N -> real`))); Sections.add_section_type (mk_var ("g", (`:real^N -> real`))));;
(Sections.add_section_var (mk_var ("x", (`:real^N`))));;
(Sections.add_section_var (mk_var ("domain", (`:real^N#real^N`))));;

(* Section Point *)
Sections.begin_section "Point";;

(* Lemma diff2c_scale *)
let diff2c_scale = Sections.section_proof ["f";"c"]
`diff2c f x ==> diff2c (\x. c * f x) x`
[
   (((repeat_tactic 1 9 (((use_arg_then2 ("diff2c", [diff2c]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ((move ["d2f"]) THEN (move ["p2c"])))) THEN (((((use_arg_then2 ("diff2_scale", [diff2_scale]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["j"])));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("p2c", [])) (fun fst_arg -> (use_arg_then2 ("i", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("j", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["p2ij"])));
   ((use_arg_then2 ("real_cont_at_local", [real_cont_at_local])) (thm_tac apply_tac));
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2_eq_diff2_on_open", [diff2_eq_diff2_on_open]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["d2s"])));
   (((fun arg_tac -> arg_tac (Arg_term (`(\x. c * partial2 j i f x)`))) (term_tac exists_tac)) THEN ((use_arg_then2 ("s", [])) (term_tac exists_tac)));
   ((THENL_FIRST) (((use_arg_then2 ("REAL_CONTINUOUS_LMUL", [REAL_CONTINUOUS_LMUL]))(thm_tac (new_rewrite [] [])))) ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (done_tac)));
   (((((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["y"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("d2s", [])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["d2y"]));
   ((((use_arg_then2 ("second_partial_scale", [second_partial_scale]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2c_neg *)
let diff2c_neg = Sections.section_proof ["f"]
`diff2c f x ==> diff2c (\x. --f x) x`
[
   (((DISCH_THEN (fun snd_th -> (fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2c_scale", [diff2c_scale])) (fun fst_arg -> (use_arg_then2 ("f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`--(&1)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN (((use_arg_then2 ("REAL_NEG_MINUS1", [REAL_NEG_MINUS1]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Section Composite *)
Sections.begin_section "Composite";;

(* Lemma nth_diff_strong_eq_on_open *)
let nth_diff_strong_eq_on_open = Sections.section_proof ["n";"u";"x"]
`nth_diff_strong n u x ==>
	?s. real_open s /\ x IN s /\ (!y. y IN s ==> nth_diff_strong n u y)`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("nth_diff_strong", [nth_diff_strong]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["xt"])) THEN (move ["dt"]));
   (((use_arg_then2 ("t", [])) (term_tac exists_tac)) THEN (((((use_arg_then2 ("xt", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("open_t", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["y"]) THEN (move ["yt"])));
   (((use_arg_then2 ("t", [])) (term_tac exists_tac)) THEN (done_tac));
];;

(* Lemma diff2_imp_cont *)
let diff2_imp_cont = Sections.section_proof ["f";"x"]
`diff2 f x ==> f real_continuous at x`
[
   ((((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]));
   (((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_IMP_CONTINUOUS_AT", [DIFFERENTIABLE_IMP_CONTINUOUS_AT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_imp_partial_cont *)
let diff2_imp_partial_cont = Sections.section_proof ["f";"i";"x"]
`diff2 f x ==> (partial i f) real_continuous at x`
[
   ((((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["df"]));
   (((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_IMP_CONTINUOUS_AT", [DIFFERENTIABLE_IMP_CONTINUOUS_AT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("df", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_uni_compose *)
let diff2c_uni_compose = Sections.section_proof ["u";"f";"x"]
`diff2c f x ==> nth_diff_strong 2 u (f x) ==>
	(nth_derivative 2 u) real_continuous atreal (f x) ==> diff2c (u o f) x`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c", [diff2c]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["d2f"])) THEN (move ["p2c"]) THEN (move ["d2u"]) THEN (move ["u2c"]));
   (((((use_arg_then2 ("diff2_uni_compose", [diff2_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2u", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["j"]));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("p2c", [])) (fun fst_arg -> (use_arg_then2 ("i", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("j", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["p2ij"])));
   ((use_arg_then2 ("real_cont_at_local", [real_cont_at_local])) (thm_tac apply_tac));
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2_eq_diff2_on_open", [diff2_eq_diff2_on_open]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["d2s"])));
   (((fun arg_tac -> (use_arg_then2 ("nth_diff_strong_eq_on_open", [nth_diff_strong_eq_on_open])) (fun fst_arg -> (use_arg_then2 ("d2u", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["fxt"])) THEN (move ["d2t"]));
   ((fun arg_tac -> arg_tac (Arg_term (`{z | z IN s /\ (lift o f) z IN (IMAGE lift t)}`))) (term_tac (set_tac "r")));
   ((fun arg_tac -> arg_tac (Arg_term (`open r`))) (term_tac (have_gen_tac [](move ["open_r"]))));
   ((((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("CONTINUOUS_OPEN_PREIMAGE", [CONTINUOUS_OPEN_PREIMAGE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_OPEN", [REAL_OPEN]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("open_t", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("open_s", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] []))))));
   (((use_arg_then2 ("DIFFERENTIABLE_IMP_CONTINUOUS_ON", [DIFFERENTIABLE_IMP_CONTINUOUS_ON])) (thm_tac apply_tac)) THEN ((((use_arg_then2 ("differentiable_on", [differentiable_on]))(thm_tac (new_rewrite [] [])))) THEN (move ["y"]) THEN (move ["ys"])) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))));
   (((use_arg_then2 ("DIFFERENTIABLE_AT_WITHIN", [DIFFERENTIABLE_AT_WITHIN]))(thm_tac (new_rewrite [] []))));
   ((((fun arg_tac -> (use_arg_then2 ("d2s", [])) (fun fst_arg -> (use_arg_then2 ("ys", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s'"])) THEN (case THEN (move ["_"])) THEN (case THEN (move ["ys'"]))));
   ((((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then2 ("ys'", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)) THEN BETA_TAC THEN (simp_tac)) THEN (done_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`(\x. (nth_derivative 2 u (f x) * partial j f x) * partial i f x + derivative u (f x) * partial2 j i f x)`))) (term_tac exists_tac)) THEN ((use_arg_then2 ("r", [])) (term_tac exists_tac)));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("open_r", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("r_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("LIFT_IN_IMAGE_LIFT", [LIFT_IN_IMAGE_LIFT]))(thm_tac (new_rewrite [] []))))) THEN (split_tac)));
   (BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["z"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["zs"])) THEN (move ["fzt"]) THEN (move ["yz"]));
   (((((use_arg_then2 ("second_partial_uni_compose", [second_partial_uni_compose]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("yz", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2s", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("d2t", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_LAST) (split_tac) (((use_arg_then2 ("x", [])) (term_tac exists_tac)) THEN (done_tac)));
   (((((use_arg_then2 ("REAL_CONTINUOUS_ADD", [REAL_CONTINUOUS_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac))) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN ((repeat_tactic 0 10 (((fun arg_tac ->(use_arg_then2 ("diff2_imp_partial_cont", [diff2_imp_partial_cont]))(fun tmp_arg1 -> (use_arg_then2 ("d2s", []))(fun tmp_arg2 -> arg_tac (Arg_theorem (CONJ (get_arg_thm tmp_arg1) (get_arg_thm tmp_arg2))))))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))));
   (((((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(gsym_then (thm_tac (new_rewrite [] [(`nth_derivative 2 u _1`)])))))) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))));
   (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(thm_tac (new_rewrite [] []))));
   ((((use_arg_then2 ("o_ASSOC", [o_ASSOC]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("CONTINUOUS_REAL_CONTINUOUS_AT_COMPOSE", [CONTINUOUS_REAL_CONTINUOUS_AT_COMPOSE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_imp_cont", [diff2_imp_cont]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2s", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))));
   (((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_ATREAL_WITHINREAL", [REAL_CONTINUOUS_ATREAL_WITHINREAL]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then2 ("p2ij", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(gsym_then (thm_tac (new_rewrite [] [(`derivative u _`)])))))) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))));
   (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(thm_tac (new_rewrite [] []))));
   ((((use_arg_then2 ("o_ASSOC", [o_ASSOC]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("CONTINUOUS_REAL_CONTINUOUS_AT_COMPOSE", [CONTINUOUS_REAL_CONTINUOUS_AT_COMPOSE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_imp_cont", [diff2_imp_cont]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2s", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_ATREAL_WITHINREAL", [REAL_CONTINUOUS_ATREAL_WITHINREAL]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("nth_derivative1", [nth_derivative1]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((use_arg_then2 ("nth_derivative_continuous", [nth_derivative_continuous])) (thm_tac apply_tac)));
   ((THENL_LAST) (((fun arg_tac -> arg_tac (Arg_term (`2`))) (term_tac exists_tac)) THEN (split_tac)) ((arith_tac) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then2 ("d2t", [])) (fun fst_arg -> (use_arg_then2 ("fxt", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then2 ("nth_diff_strong", [nth_diff_strong]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("nth_differentiable_on", [nth_differentiable_on]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["t'"])) THEN (case THEN (move ["_"])) THEN (case THEN (move ["fxt'"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma real_open_delete *)
let real_open_delete = Sections.section_proof ["s";"x"]
`real_open s ==> real_open (s DELETE x)`
[
   ((repeat_tactic 1 9 (((use_arg_then2 ("REAL_OPEN", [REAL_OPEN]))(thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then2 ("OPEN_DELETE", [OPEN_DELETE])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN ((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`lift x`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)));
   (((((use_arg_then2 ("IMAGE_DELETE_INJ_COMPAT", [IMAGE_DELETE_INJ_COMPAT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("LIFT_EQ", [LIFT_EQ]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2c_inv_compose *)
let diff2c_inv_compose = Sections.section_proof ["f"]
`~(f x = &0) ==> diff2c f x ==> diff2c (inv o f) x`
[
   ((BETA_TAC THEN (move ["fn0"]) THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_inv", [diff2_inv])) (fun fst_arg -> (use_arg_then2 ("fn0", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((use_arg_then2 ("real_cont_atreal_local", [real_cont_atreal_local])) (disch_tac [])) THEN (clear_assumption "real_cont_atreal_local") THEN (DISCH_THEN apply_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`\x. &2 * inv (x pow 3)`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`UNIV DELETE (&0)`))) (term_tac exists_tac)));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("real_open_delete", [real_open_delete]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_OPEN_UNIV", [REAL_OPEN_UNIV]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_DELETE", [IN_DELETE]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_UNIV", [IN_UNIV]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("fn0", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (move ["yn0"])) THEN (((use_arg_then2 ("second_derivative_inv", [second_derivative_inv]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((((use_arg_then2 ("REAL_CONTINUOUS_LMUL", [REAL_CONTINUOUS_LMUL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_INV_ATREAL", [REAL_CONTINUOUS_INV_ATREAL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then2 ("REAL_POW_NZ", [REAL_POW_NZ]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2c_sqrt_compose *)
let diff2c_sqrt_compose = Sections.section_proof ["f"]
`&0 < f x ==> diff2c f x ==> diff2c (sqrt o f) x`
[
   ((BETA_TAC THEN (move ["fn0"]) THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_sqrt", [diff2_sqrt])) (fun fst_arg -> (use_arg_then2 ("fn0", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((use_arg_then2 ("real_cont_atreal_local", [real_cont_atreal_local])) (disch_tac [])) THEN (clear_assumption "real_cont_atreal_local") THEN (DISCH_THEN apply_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`\x. -- inv (&4 * sqrt (x pow 3))`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`{x | x > &0}`))) (term_tac exists_tac)));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("REAL_OPEN_HALFSPACE_GT", [REAL_OPEN_HALFSPACE_GT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then2 ("real_gt", [real_gt]))(thm_tac (new_rewrite [] [])))))) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["z"])) THEN (case THEN (move ["z0"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("second_derivative_sqrt", [second_derivative_sqrt]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((THENL_LAST) (split_tac) (((fun arg_tac -> arg_tac (Arg_term (`f x`))) (term_tac exists_tac)) THEN (done_tac)));
   ((THENL_ROT (-1)) ((((use_arg_then2 ("REAL_CONTINUOUS_NEG", [REAL_CONTINUOUS_NEG]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_INV_ATREAL", [REAL_CONTINUOUS_INV_ATREAL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_LMUL", [REAL_CONTINUOUS_LMUL]))(thm_tac (new_rewrite [] []))))));
   ((THENL_FIRST) (((((use_arg_then2 ("REAL_ENTIRE", [REAL_ENTIRE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("negb_or", [negb_or]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (split_tac)) ((arith_tac) THEN (done_tac)));
   (((((use_arg_then2 ("SQRT_EQ_0", [SQRT_EQ_0]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_POW_NZ", [REAL_POW_NZ]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_POS_NZ", [REAL_POS_NZ]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`(\x. sqrt (x pow 3)) = (sqrt o (\x. x pow 3))`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then2 ("FUN_EQ_THM", [FUN_EQ_THM]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("REAL_CONTINUOUS_ATREAL_COMPOSE", [REAL_CONTINUOUS_ATREAL_COMPOSE]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_AT_SQRT", [REAL_CONTINUOUS_AT_SQRT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_POW_LT", [REAL_POW_LT]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_atn_compose *)
let diff2c_atn_compose = Sections.section_proof ["f"]
`diff2c f x ==> diff2c (atn o f) x`
[
   ((BETA_TAC THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("diff2_atn", [diff2_atn]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("nth_derivative2", [nth_derivative2]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("second_derivative_atn", [second_derivative_atn]))(thm_tac (new_rewrite [] [])))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)));
   ((((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_INV_ATREAL", [REAL_CONTINUOUS_INV_ATREAL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_ADD", [REAL_CONTINUOUS_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((use_arg_then2 ("REAL_RNEG_UNIQ", [REAL_RNEG_UNIQ]))(thm_tac (new_rewrite [] []))));
   ((fun arg_tac -> (use_arg_then2 ("REAL_LE_POW_2", [REAL_LE_POW_2])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`f x`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC));
   ((arith_tac) THEN (done_tac));
];;

(* Lemma diff2c_cos_compose *)
let diff2c_cos_compose = Sections.section_proof ["f"]
`diff2c f x ==> diff2c (cos o f) x`
[
   ((BETA_TAC THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("diff2_cos", [diff2_cos]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("second_derivative_cos", [second_derivative_cos]))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_NEG", [REAL_CONTINUOUS_NEG]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_AT_COS", [REAL_CONTINUOUS_AT_COS]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_sin_compose *)
let diff2c_sin_compose = Sections.section_proof ["f"]
`diff2c f x ==> diff2c (sin o f) x`
[
   ((BETA_TAC THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("diff2_sin", [diff2_sin]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("second_derivative_sin", [second_derivative_sin]))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_NEG", [REAL_CONTINUOUS_NEG]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_AT_SIN", [REAL_CONTINUOUS_AT_SIN]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_exp_compose *)
let diff2c_exp_compose = Sections.section_proof ["f"]
`diff2c f x ==> diff2c (exp o f) x`
[
   ((BETA_TAC THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("diff2_exp", [diff2_exp]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("second_derivative_exp", [second_derivative_exp]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("REAL_CONTINUOUS_AT_EXP", [REAL_CONTINUOUS_AT_EXP]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma diff2c_log_compose *)
let diff2c_log_compose = Sections.section_proof ["f"]
`&0 < f x ==> diff2c f x ==> diff2c (log o f) x`
[
   ((BETA_TAC THEN (move ["fn0"]) THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_log", [diff2_log])) (fun fst_arg -> (use_arg_then2 ("fn0", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((use_arg_then2 ("real_cont_atreal_local", [real_cont_atreal_local])) (disch_tac [])) THEN (clear_assumption "real_cont_atreal_local") THEN (DISCH_THEN apply_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`\x. -- inv (x pow 2)`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`{x | x > &0}`))) (term_tac exists_tac)));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("REAL_OPEN_HALFSPACE_GT", [REAL_OPEN_HALFSPACE_GT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then2 ("real_gt", [real_gt]))(thm_tac (new_rewrite [] [])))))) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["z"])) THEN (case THEN (move ["z0"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("second_derivative_log", [second_derivative_log]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((THENL_LAST) (split_tac) (((fun arg_tac -> arg_tac (Arg_term (`f x`))) (term_tac exists_tac)) THEN (done_tac)));
   ((((use_arg_then2 ("REAL_CONTINUOUS_NEG", [REAL_CONTINUOUS_NEG]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_INV_ATREAL", [REAL_CONTINUOUS_INV_ATREAL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then2 ("REAL_POW_2", [REAL_POW_2]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_ENTIRE", [REAL_ENTIRE]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("fn0", [])) (disch_tac [])) THEN (clear_assumption "fn0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma diff2c_acs_compose *)
let diff2c_acs_compose = Sections.section_proof ["f"]
`abs (f x) < &1 ==> diff2c f x ==> diff2c (acs o f) x`
[
   ((BETA_TAC THEN (move ["fn1"]) THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_acs", [diff2_acs])) (fun fst_arg -> (use_arg_then2 ("fn1", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((use_arg_then2 ("real_cont_atreal_local", [real_cont_atreal_local])) (disch_tac [])) THEN (clear_assumption "real_cont_atreal_local") THEN (DISCH_THEN apply_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`\x. --(x / sqrt ((&1 - x * x) pow 3))`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`{x | x < &1} INTER {x | x > -- &1}`))) (term_tac exists_tac)));
   ((((use_arg_then2 ("REAL_OPEN_INTER", [REAL_OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_OPEN_HALFSPACE_GT", [REAL_OPEN_HALFSPACE_GT]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_OPEN_HALFSPACE_LT", [REAL_OPEN_HALFSPACE_LT]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((THENL_ROT (-1)) (((repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then2 ("real_gt", [real_gt]))(thm_tac (new_rewrite [] [])))))) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN ALL_TAC) THEN (case THEN (move ["a"])) THEN (case THEN (move ["a1"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN (case THEN (move ["b"])) THEN (case THEN (move ["b1"])) THEN (move ["ab"])) THEN ((((use_arg_then2 ("second_derivative_acs", [second_derivative_acs]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))));
   ((((use_arg_then2 ("a1", [])) (disch_tac [])) THEN (clear_assumption "a1") THEN ((use_arg_then2 ("b1", [])) (disch_tac [])) THEN (clear_assumption "b1") THEN ((use_arg_then2 ("ab", [])) (disch_tac [])) THEN (clear_assumption "ab") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((THENL_LAST) (split_tac) ((split_tac) THEN ((fun arg_tac -> arg_tac (Arg_term (`f x`))) (term_tac exists_tac)) THEN (((use_arg_then2 ("fn1", [])) (disch_tac [])) THEN (clear_assumption "fn1") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((use_arg_then2 ("REAL_CONTINUOUS_NEG", [REAL_CONTINUOUS_NEG]))(thm_tac (new_rewrite [] []))));
   ((use_arg_then2 ("REAL_CONTINUOUS_DIV_ATREAL", [REAL_CONTINUOUS_DIV_ATREAL])) (thm_tac apply_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 < (&1 - f x * f x) pow 3`))) (term_tac (have_gen_tac [](move ["h"]))));
   (((use_arg_then2 ("REAL_POW_LT", [REAL_POW_LT]))(thm_tac (new_rewrite [] []))));
   ((((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!a. &1 - a * a = (&1 - a) * (&1 + a)`)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_LT_MUL", [REAL_LT_MUL]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("fn1", [])) (disch_tac [])) THEN (clear_assumption "fn1") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (split_tac)));
   (((((use_arg_then2 ("SQRT_EQ_0", [SQRT_EQ_0]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_LE_LT", [REAL_LE_LT]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("REAL_LT_IMP_NZ", [REAL_LT_IMP_NZ]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`(\x. sqrt ((&1 - x * x) pow 3)) = sqrt o (\x. (&1 - x * x) pow 3)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then2 ("FUN_EQ_THM", [FUN_EQ_THM]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("REAL_CONTINUOUS_ATREAL_COMPOSE", [REAL_CONTINUOUS_ATREAL_COMPOSE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_AT_SQRT", [REAL_CONTINUOUS_AT_SQRT]))(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)));
   ((((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_SUB", [REAL_CONTINUOUS_SUB]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2c_asn_compose *)
let diff2c_asn_compose = Sections.section_proof ["f"]
`abs (f x) < &1 ==> diff2c f x ==> diff2c (asn o f) x`
[
   ((BETA_TAC THEN (move ["fn1"]) THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_asn", [diff2_asn])) (fun fst_arg -> (use_arg_then2 ("fn1", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((use_arg_then2 ("real_cont_atreal_local", [real_cont_atreal_local])) (disch_tac [])) THEN (clear_assumption "real_cont_atreal_local") THEN (DISCH_THEN apply_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`\x. x / sqrt ((&1 - x * x) pow 3)`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`{x | x < &1} INTER {x | x > -- &1}`))) (term_tac exists_tac)));
   ((((use_arg_then2 ("REAL_OPEN_INTER", [REAL_OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_OPEN_HALFSPACE_GT", [REAL_OPEN_HALFSPACE_GT]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_OPEN_HALFSPACE_LT", [REAL_OPEN_HALFSPACE_LT]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((THENL_ROT (-1)) (((repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_ELIM_THM", [IN_ELIM_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then2 ("real_gt", [real_gt]))(thm_tac (new_rewrite [] [])))))) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN ALL_TAC) THEN (case THEN (move ["a"])) THEN (case THEN (move ["a1"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN (case THEN (move ["b"])) THEN (case THEN (move ["b1"])) THEN (move ["ab"])) THEN ((((use_arg_then2 ("second_derivative_asn", [second_derivative_asn]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))));
   ((((use_arg_then2 ("a1", [])) (disch_tac [])) THEN (clear_assumption "a1") THEN ((use_arg_then2 ("b1", [])) (disch_tac [])) THEN (clear_assumption "b1") THEN ((use_arg_then2 ("ab", [])) (disch_tac [])) THEN (clear_assumption "ab") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((THENL_LAST) (split_tac) ((split_tac) THEN ((fun arg_tac -> arg_tac (Arg_term (`f x`))) (term_tac exists_tac)) THEN (((use_arg_then2 ("fn1", [])) (disch_tac [])) THEN (clear_assumption "fn1") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((use_arg_then2 ("REAL_CONTINUOUS_DIV_ATREAL", [REAL_CONTINUOUS_DIV_ATREAL])) (thm_tac apply_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 < (&1 - f x * f x) pow 3`))) (term_tac (have_gen_tac [](move ["h"]))));
   (((use_arg_then2 ("REAL_POW_LT", [REAL_POW_LT]))(thm_tac (new_rewrite [] []))));
   ((((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!a. &1 - a * a = (&1 - a) * (&1 + a)`)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_LT_MUL", [REAL_LT_MUL]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("fn1", [])) (disch_tac [])) THEN (clear_assumption "fn1") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (split_tac)));
   (((((use_arg_then2 ("SQRT_EQ_0", [SQRT_EQ_0]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_LE_LT", [REAL_LE_LT]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("REAL_LT_IMP_NZ", [REAL_LT_IMP_NZ]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`(\x. sqrt ((&1 - x * x) pow 3)) = sqrt o (\x. (&1 - x * x) pow 3)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then2 ("FUN_EQ_THM", [FUN_EQ_THM]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("REAL_CONTINUOUS_ATREAL_COMPOSE", [REAL_CONTINUOUS_ATREAL_COMPOSE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_AT_SQRT", [REAL_CONTINUOUS_AT_SQRT]))(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)));
   ((((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_SUB", [REAL_CONTINUOUS_SUB]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2c_matan_compose *)
let diff2c_matan_compose = Sections.section_proof ["f"]
`-- &1 < f x ==> diff2c f x ==> diff2c (matan o f) x`
[
   ((BETA_TAC THEN (move ["fn1"]) THEN (move ["d2f"])) THEN (((use_arg_then2 ("diff2c_uni_compose", [diff2c_uni_compose]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_matan", [diff2_matan])) (fun fst_arg -> (use_arg_then2 ("fn1", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((THENL_ROT (-1)) (((fun arg_tac -> (use_arg_then2 ("EXCLUDED_MIDDLE", [EXCLUDED_MIDDLE])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`f x < &1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case THEN (move ["fn2"])));
   ((((use_arg_then2 ("real_cont_atreal_local", [real_cont_atreal_local])) (disch_tac [])) THEN (clear_assumption "real_cont_atreal_local") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then2 ("nth_derivative2", [nth_derivative2]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("derivative_eq_real_derivative", [derivative_eq_real_derivative]))(thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> arg_tac (Arg_term (`\x. (&3 / &4 * atn (sqrt x) / (x pow 2 * sqrt x) - &3 / &4 * inv (x pow 2 * (x + &1))) - &1 / &2 * inv (x * (x + &1) pow 2)`))) (term_tac (set_tac "g")));
   (((use_arg_then2 ("g", [])) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`real_interval (&0, f x + &1)`))) (term_tac exists_tac)));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("REAL_OPEN_REAL_INTERVAL", [REAL_OPEN_REAL_INTERVAL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_REAL_INTERVAL", [IN_REAL_INTERVAL]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] []))))) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (move ["y_ineq"])) THEN ((((use_arg_then2 ("Matan.matan_second_derivative_gt0", [Matan.matan_second_derivative_gt0]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((THENL_LAST) (split_tac) ((((use_arg_then2 ("fn2", [])) (disch_tac [])) THEN (clear_assumption "fn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_SUB", [REAL_CONTINUOUS_SUB]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_LMUL", [REAL_CONTINUOUS_LMUL]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("REAL_CONTINUOUS_INV_ATREAL", [REAL_CONTINUOUS_INV_ATREAL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("REAL_CONTINUOUS_ADD", [REAL_CONTINUOUS_ADD]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then2 ("REAL_POW_2", [REAL_POW_2]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_ENTIRE", [REAL_ENTIRE]))(thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then2 ("fn2", [])) (disch_tac [])) THEN (clear_assumption "fn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then2 ("REAL_CONTINUOUS_SUB", [REAL_CONTINUOUS_SUB]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_CONTINUOUS_LMUL", [REAL_CONTINUOUS_LMUL]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_DIV_ATREAL)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("REAL_CONTINUOUS_AT_SQRT", [REAL_CONTINUOUS_AT_SQRT]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   ((((use_arg_then2 ("fn2", [])) (disch_tac [])) THEN (clear_assumption "fn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((THENL_LAST) (((((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_POW_2", [REAL_POW_2]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_ENTIRE", [REAL_ENTIRE]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("SQRT_EQ_0", [SQRT_EQ_0]))(thm_tac (new_rewrite [] []))))) THEN (split_tac)) ((((use_arg_then2 ("fn2", [])) (disch_tac [])) THEN (clear_assumption "fn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then2 ("o_THM", [o_THM])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`atn`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_ATREAL_COMPOSE", [REAL_CONTINUOUS_ATREAL_COMPOSE]))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_AT_ATN", [REAL_CONTINUOUS_AT_ATN]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_AT_SQRT", [REAL_CONTINUOUS_AT_SQRT]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))) THEN (((use_arg_then2 ("fn2", [])) (disch_tac [])) THEN (clear_assumption "fn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then2 ("REAL_CONTINUOUS_INV_ATREAL", [REAL_CONTINUOUS_INV_ATREAL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then2 ("REAL_CONTINUOUS_POW", [REAL_CONTINUOUS_POW]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_ADD", [REAL_CONTINUOUS_ADD]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_AT_ID", [REAL_CONTINUOUS_AT_ID]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((((use_arg_then2 ("REAL_POW_2", [REAL_POW_2]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_ENTIRE", [REAL_ENTIRE]))(thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then2 ("fn2", [])) (disch_tac [])) THEN (clear_assumption "fn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then2 ("nth_derivative2", [nth_derivative2]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("derivative_eq_real_derivative", [derivative_eq_real_derivative]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("Matan.ddmatan", [Matan.ddmatan]))(gsym_then (thm_tac (new_rewrite [] []))))));
   (((use_arg_then2 ("HAS_REAL_DERIVATIVE_IMP_CONTINUOUS_ATREAL", [HAS_REAL_DERIVATIVE_IMP_CONTINUOUS_ATREAL])) (disch_tac [])) THEN (clear_assumption "HAS_REAL_DERIVATIVE_IMP_CONTINUOUS_ATREAL") THEN (DISCH_THEN apply_tac));
   (((use_arg_then2 ("Matan.matan_second_derivative_abs1", [Matan.matan_second_derivative_abs1])) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN ((((use_arg_then2 ("Matan.ddmatan", [Matan.ddmatan]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (move ["d2"])));
   ((fun arg_tac -> arg_tac (Arg_term (`\i. -- &1 pow (i + 2) * &((i + 1) * (i + 2)) / &(2 * i + 5)`))) (term_tac (set_tac "a")));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("Series.power_series_has_derivative", [Series.power_series_has_derivative])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`ddmatan`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("a", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`from 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN (ANTS_TAC));
   ((BETA_TAC THEN (move ["t"]) THEN (move ["t_ineq"])) THEN ((((use_arg_then2 ("a_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then2 ("d2", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (BETA_TAC THEN (case THEN (move ["h"])) THEN (move ["h_diff"]));
   (((fun arg_tac -> arg_tac (Arg_term (`h (f x)`))) (term_tac exists_tac)) THEN (((use_arg_then2 ("h_diff", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("fn1", [])) (disch_tac [])) THEN (clear_assumption "fn1") THEN ((use_arg_then2 ("fn2", [])) (disch_tac [])) THEN (clear_assumption "fn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Finalization of the section Composite *)
let nth_diff_strong_eq_on_open = Sections.finalize_theorem nth_diff_strong_eq_on_open;;
let diff2_imp_cont = Sections.finalize_theorem diff2_imp_cont;;
let diff2_imp_partial_cont = Sections.finalize_theorem diff2_imp_partial_cont;;
let diff2c_uni_compose = Sections.finalize_theorem diff2c_uni_compose;;
let real_open_delete = Sections.finalize_theorem real_open_delete;;
let diff2c_inv_compose = Sections.finalize_theorem diff2c_inv_compose;;
let diff2c_sqrt_compose = Sections.finalize_theorem diff2c_sqrt_compose;;
let diff2c_atn_compose = Sections.finalize_theorem diff2c_atn_compose;;
let diff2c_cos_compose = Sections.finalize_theorem diff2c_cos_compose;;
let diff2c_sin_compose = Sections.finalize_theorem diff2c_sin_compose;;
let diff2c_exp_compose = Sections.finalize_theorem diff2c_exp_compose;;
let diff2c_log_compose = Sections.finalize_theorem diff2c_log_compose;;
let diff2c_acs_compose = Sections.finalize_theorem diff2c_acs_compose;;
let diff2c_asn_compose = Sections.finalize_theorem diff2c_asn_compose;;
let diff2c_matan_compose = Sections.finalize_theorem diff2c_matan_compose;;
Sections.end_section "Composite";;

(* Lemma diff2c_add *)
let diff2c_add = Sections.section_proof ["f";"g"]
`diff2c f x ==> diff2c g x ==> diff2c (\x. f x + g x) x`
[
   (((repeat_tactic 1 9 (((use_arg_then2 ("diff2c", [diff2c]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ((move ["d2f"]) THEN (move ["p2f"]))) THEN (case THEN ((move ["d2g"]) THEN (move ["p2g"])))) THEN (((((use_arg_then2 ("diff2_add", [diff2_add]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["j"])));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("p2g", [])) (fun fst_arg -> (use_arg_then2 ("i", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("j", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("p2f", [])) (fun fst_arg -> (use_arg_then2 ("i", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("j", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["p2fij"]) THEN (move ["p2gij"])));
   ((use_arg_then2 ("real_cont_at_local", [real_cont_at_local])) (thm_tac apply_tac));
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2_eq_diff2_on_open", [diff2_eq_diff2_on_open]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["d2f"])));
   ((((use_arg_then2 ("diff2_eq_diff2_on_open", [diff2_eq_diff2_on_open]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["xt"])) THEN (move ["d2g"]));
   (((fun arg_tac -> arg_tac (Arg_term (`(\x. partial2 j i f x + partial2 j i g x)`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (term_tac exists_tac)));
   ((THENL_FIRST) ((repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("xt", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then2 ("REAL_CONTINUOUS_ADD", [REAL_CONTINUOUS_ADD]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (done_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN ((move ["ys"]) THEN (move ["yt"])))) THEN ((((use_arg_then2 ("second_partial_add", [second_partial_add]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2c_sub *)
let diff2c_sub = Sections.section_proof ["f";"g"]
`diff2c f x ==> diff2c g x ==> diff2c (\x. f x - g x) x`
[
   ((BETA_TAC THEN (move ["d2f"]) THEN (move ["d2g"])) THEN ((((use_arg_then2 ("real_sub", [real_sub]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_add", [diff2c_add]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("diff2c_neg", [diff2c_neg]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_mul *)
let diff2c_mul = Sections.section_proof ["f";"g"]
`diff2c f x ==> diff2c g x ==> diff2c (\x. f x * g x) x`
[
   (((repeat_tactic 1 9 (((use_arg_then2 ("diff2c", [diff2c]))(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ((move ["d2f"]) THEN (move ["p2f"]))) THEN (case THEN ((move ["d2g"]) THEN (move ["p2g"])))) THEN (((((use_arg_then2 ("diff2_mul", [diff2_mul]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["j"])));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("p2g", [])) (fun fst_arg -> (use_arg_then2 ("i", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("j", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("p2f", [])) (fun fst_arg -> (use_arg_then2 ("i", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("j", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["p2fij"]) THEN (move ["p2gij"])));
   ((use_arg_then2 ("real_cont_at_local", [real_cont_at_local])) (thm_tac apply_tac));
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2_eq_diff2_on_open", [diff2_eq_diff2_on_open]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["s"])) THEN (case THEN (move ["open_s"])) THEN (case THEN (move ["xs"])) THEN (move ["d2f"])));
   ((((use_arg_then2 ("diff2_eq_diff2_on_open", [diff2_eq_diff2_on_open]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["t"])) THEN (case THEN (move ["open_t"])) THEN (case THEN (move ["xt"])) THEN (move ["d2g"]));
   (((fun arg_tac -> arg_tac (Arg_term (`(\x. (partial2 j i f x * g x + partial i f x * partial j g x) + 
	partial j f x  * partial i g x + f x * partial2 j i g x)`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`s INTER t`))) (term_tac exists_tac)));
   ((THENL_ROT (-1)) (((repeat_tactic 1 9 (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("xs", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("xt", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("OPEN_INTER", [OPEN_INTER]))(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))) THEN (split_tac)));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN ((move ["ys"]) THEN (move ["yt"])))) THEN ((((use_arg_then2 ("second_partial_mul", [second_partial_mul]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((repeat_tactic 1 9 (((use_arg_then2 ("REAL_CONTINUOUS_ADD", [REAL_CONTINUOUS_ADD]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_CONTINUOUS_MUL", [REAL_CONTINUOUS_MUL]))(thm_tac (new_rewrite [] [])))))) THEN ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN ((TRY done_tac))) THEN ((repeat_tactic 0 10 (((use_arg_then2 ("p2gij", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("p2fij", []))(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 0 10 (((use_arg_then2 ("diff2_imp_partial_cont", [diff2_imp_partial_cont]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("diff2_imp_cont", [diff2_imp_cont]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Finalization of the section Point *)
let diff2c_scale = Sections.finalize_theorem diff2c_scale;;
let diff2c_neg = Sections.finalize_theorem diff2c_neg;;
let nth_diff_strong_eq_on_open = Sections.finalize_theorem nth_diff_strong_eq_on_open;;
let diff2_imp_cont = Sections.finalize_theorem diff2_imp_cont;;
let diff2_imp_partial_cont = Sections.finalize_theorem diff2_imp_partial_cont;;
let diff2c_uni_compose = Sections.finalize_theorem diff2c_uni_compose;;
let real_open_delete = Sections.finalize_theorem real_open_delete;;
let diff2c_inv_compose = Sections.finalize_theorem diff2c_inv_compose;;
let diff2c_sqrt_compose = Sections.finalize_theorem diff2c_sqrt_compose;;
let diff2c_atn_compose = Sections.finalize_theorem diff2c_atn_compose;;
let diff2c_cos_compose = Sections.finalize_theorem diff2c_cos_compose;;
let diff2c_sin_compose = Sections.finalize_theorem diff2c_sin_compose;;
let diff2c_exp_compose = Sections.finalize_theorem diff2c_exp_compose;;
let diff2c_log_compose = Sections.finalize_theorem diff2c_log_compose;;
let diff2c_acs_compose = Sections.finalize_theorem diff2c_acs_compose;;
let diff2c_asn_compose = Sections.finalize_theorem diff2c_asn_compose;;
let diff2c_matan_compose = Sections.finalize_theorem diff2c_matan_compose;;
let diff2c_add = Sections.finalize_theorem diff2c_add;;
let diff2c_sub = Sections.finalize_theorem diff2c_sub;;
let diff2c_mul = Sections.finalize_theorem diff2c_mul;;
Sections.end_section "Point";;

(* Section Domain *)
Sections.begin_section "Domain";;
(Sections.add_section_var (mk_var ("f", (`:real^N -> real`))); Sections.add_section_var (mk_var ("g", (`:real^N -> real`))));;
(Sections.add_section_hyp "d2f" (`diff2c_domain domain f`));;

(* Lemma diff2c_domain_scale *)
let diff2c_domain_scale = Sections.section_proof ["c"]
`diff2c_domain domain (\x. c * f x)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_scale", [diff2c_scale]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_neg *)
let diff2c_domain_neg = Sections.section_proof []
`diff2c_domain domain (\x. --f x)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_neg", [diff2c_neg]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(Sections.add_section_var (mk_var ("bounds", (`:real#real`))));;

(* Lemma diff2c_domain_inv_compose *)
let diff2c_domain_inv_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_not_zero bounds ==> diff2c_domain domain (inv o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2c_inv_compose", [diff2c_inv_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_not_zero", [interval_arith_not_zero])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_sqrt_compose *)
let diff2c_domain_sqrt_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_pos bounds ==> diff2c_domain domain (sqrt o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2c_sqrt_compose", [diff2c_sqrt_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_pos", [interval_arith_pos])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_atn_compose *)
let diff2c_domain_atn_compose = Sections.section_proof []
`diff2c_domain domain (atn o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_atn_compose", [diff2c_atn_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_cos_compose *)
let diff2c_domain_cos_compose = Sections.section_proof []
`diff2c_domain domain (cos o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_cos_compose", [diff2c_cos_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_sin_compose *)
let diff2c_domain_sin_compose = Sections.section_proof []
`diff2c_domain domain (sin o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_sin_compose", [diff2c_sin_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_exp_compose *)
let diff2c_domain_exp_compose = Sections.section_proof []
`diff2c_domain domain (exp o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_exp_compose", [diff2c_exp_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_log_compose *)
let diff2c_domain_log_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_pos bounds ==> diff2c_domain domain (log o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2c_log_compose", [diff2c_log_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_pos", [interval_arith_pos])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_acs_compose *)
let diff2c_domain_acs_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	iabs bounds < &1 ==> diff2c_domain domain (acs o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2c_acs_compose", [diff2c_acs_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_abs", [interval_arith_abs])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_asn_compose *)
let diff2c_domain_asn_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	iabs bounds < &1 ==> diff2c_domain domain (asn o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2c_asn_compose", [diff2c_asn_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_abs", [interval_arith_abs])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_matan_compose *)
let diff2c_domain_matan_compose = Sections.section_proof []
`m_bounded_on_int f domain bounds ==>
	interval_gt (-- &1) bounds ==> diff2c_domain domain (matan o f)`
[
   ((((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN (((((use_arg_then2 ("m_bounded_on_int", [m_bounded_on_int]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))))) THEN (move ["d2f"]) THEN (move ["ineq"]) THEN (move ["n0"]) THEN (move ["x"]) THEN (move ["x_in"])));
   (((((use_arg_then2 ("diff2c_matan_compose", [diff2c_matan_compose]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then2 ("interval_arith_gt", [interval_arith_gt])) (fun fst_arg -> (fun arg_tac -> (use_arg_then2 ("ineq", [])) (fun fst_arg -> (use_arg_then2 ("x_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(Sections.add_section_hyp "d2g" (`diff2c_domain domain g`));;

(* Lemma diff2c_domain_add *)
let diff2c_domain_add = Sections.section_proof []
`diff2c_domain domain (\x. f x + g x)`
[
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["d2g"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_add", [diff2c_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_sub *)
let diff2c_domain_sub = Sections.section_proof []
`diff2c_domain domain (\x. f x - g x)`
[
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["d2g"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_sub", [diff2c_sub]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_mul *)
let diff2c_domain_mul = Sections.section_proof []
`diff2c_domain domain (\x. f x * g x)`
[
   ((((use_arg_then2 ("d2g", [])) (disch_tac [])) THEN (clear_assumption "d2g") THEN ((use_arg_then2 ("d2f", [])) (disch_tac [])) THEN (clear_assumption "d2f") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] []))))) THEN (move ["d2f"]) THEN (move ["d2g"]) THEN (move ["x"]) THEN (move ["x_in"])) THEN ((((use_arg_then2 ("diff2c_mul", [diff2c_mul]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("d2f", []))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Finalization of the section Domain *)
let diff2c_domain_scale = Sections.finalize_theorem diff2c_domain_scale;;
let diff2c_domain_neg = Sections.finalize_theorem diff2c_domain_neg;;
let diff2c_domain_inv_compose = Sections.finalize_theorem diff2c_domain_inv_compose;;
let diff2c_domain_sqrt_compose = Sections.finalize_theorem diff2c_domain_sqrt_compose;;
let diff2c_domain_atn_compose = Sections.finalize_theorem diff2c_domain_atn_compose;;
let diff2c_domain_cos_compose = Sections.finalize_theorem diff2c_domain_cos_compose;;
let diff2c_domain_sin_compose = Sections.finalize_theorem diff2c_domain_sin_compose;;
let diff2c_domain_exp_compose = Sections.finalize_theorem diff2c_domain_exp_compose;;
let diff2c_domain_log_compose = Sections.finalize_theorem diff2c_domain_log_compose;;
let diff2c_domain_acs_compose = Sections.finalize_theorem diff2c_domain_acs_compose;;
let diff2c_domain_asn_compose = Sections.finalize_theorem diff2c_domain_asn_compose;;
let diff2c_domain_matan_compose = Sections.finalize_theorem diff2c_domain_matan_compose;;
let diff2c_domain_add = Sections.finalize_theorem diff2c_domain_add;;
let diff2c_domain_sub = Sections.finalize_theorem diff2c_domain_sub;;
let diff2c_domain_mul = Sections.finalize_theorem diff2c_domain_mul;;
Sections.end_section "Domain";;

(* Finalization of the section Diff2c *)
let real_cont_at_local = Sections.finalize_theorem real_cont_at_local;;
let real_cont_atreal_local = Sections.finalize_theorem real_cont_atreal_local;;
let diff2c_scale = Sections.finalize_theorem diff2c_scale;;
let diff2c_neg = Sections.finalize_theorem diff2c_neg;;
let nth_diff_strong_eq_on_open = Sections.finalize_theorem nth_diff_strong_eq_on_open;;
let diff2_imp_cont = Sections.finalize_theorem diff2_imp_cont;;
let diff2_imp_partial_cont = Sections.finalize_theorem diff2_imp_partial_cont;;
let diff2c_uni_compose = Sections.finalize_theorem diff2c_uni_compose;;
let real_open_delete = Sections.finalize_theorem real_open_delete;;
let diff2c_inv_compose = Sections.finalize_theorem diff2c_inv_compose;;
let diff2c_sqrt_compose = Sections.finalize_theorem diff2c_sqrt_compose;;
let diff2c_atn_compose = Sections.finalize_theorem diff2c_atn_compose;;
let diff2c_cos_compose = Sections.finalize_theorem diff2c_cos_compose;;
let diff2c_sin_compose = Sections.finalize_theorem diff2c_sin_compose;;
let diff2c_exp_compose = Sections.finalize_theorem diff2c_exp_compose;;
let diff2c_log_compose = Sections.finalize_theorem diff2c_log_compose;;
let diff2c_acs_compose = Sections.finalize_theorem diff2c_acs_compose;;
let diff2c_asn_compose = Sections.finalize_theorem diff2c_asn_compose;;
let diff2c_matan_compose = Sections.finalize_theorem diff2c_matan_compose;;
let diff2c_add = Sections.finalize_theorem diff2c_add;;
let diff2c_sub = Sections.finalize_theorem diff2c_sub;;
let diff2c_mul = Sections.finalize_theorem diff2c_mul;;
let diff2c_domain_scale = Sections.finalize_theorem diff2c_domain_scale;;
let diff2c_domain_neg = Sections.finalize_theorem diff2c_domain_neg;;
let diff2c_domain_inv_compose = Sections.finalize_theorem diff2c_domain_inv_compose;;
let diff2c_domain_sqrt_compose = Sections.finalize_theorem diff2c_domain_sqrt_compose;;
let diff2c_domain_atn_compose = Sections.finalize_theorem diff2c_domain_atn_compose;;
let diff2c_domain_cos_compose = Sections.finalize_theorem diff2c_domain_cos_compose;;
let diff2c_domain_sin_compose = Sections.finalize_theorem diff2c_domain_sin_compose;;
let diff2c_domain_exp_compose = Sections.finalize_theorem diff2c_domain_exp_compose;;
let diff2c_domain_log_compose = Sections.finalize_theorem diff2c_domain_log_compose;;
let diff2c_domain_acs_compose = Sections.finalize_theorem diff2c_domain_acs_compose;;
let diff2c_domain_asn_compose = Sections.finalize_theorem diff2c_domain_asn_compose;;
let diff2c_domain_matan_compose = Sections.finalize_theorem diff2c_domain_matan_compose;;
let diff2c_domain_add = Sections.finalize_theorem diff2c_domain_add;;
let diff2c_domain_sub = Sections.finalize_theorem diff2c_domain_sub;;
let diff2c_domain_mul = Sections.finalize_theorem diff2c_domain_mul;;
Sections.end_section "Diff2c";;

(* Section M_LinApprox *)
Sections.begin_section "M_LinApprox";;
(Sections.add_section_var (mk_var ("f", (`:real^N -> real`))); Sections.add_section_var (mk_var ("g", (`:real^N -> real`))));;
(Sections.add_section_var (mk_var ("bounds", (`:real#real`))));;
(Sections.add_section_var (mk_var ("d_bounds_list", (`:(real#real)list`))));;
(Sections.add_section_var (mk_var ("x", (`:real^N`))));;

(* Lemma m_lin_approx_neg *)
let m_lin_approx_neg = Sections.section_proof []
`(lift o f) differentiable at x ==>
	interval_arith (--f x) bounds ==>
	all_n 1 d_bounds_list (\i int. interval_arith (--partial i f x) int) ==>
	m_lin_approx (\x. --f x) x bounds d_bounds_list`
[
   (BETA_TAC THEN (move ["df"]) THEN (move ["b"]) THEN (move ["db"]));
   ((THENL_FIRST) ((((use_arg_then2 ("m_lin_approx", [m_lin_approx]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("b", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_neg", [f_lift_neg]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_NEG", [DIFFERENTIABLE_NEG]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (done_tac)));
   ((ASM_SIMP_TAC[partial_neg]) THEN (done_tac));
];;

(* Lemma m_lin_approx_scale *)
let m_lin_approx_scale = Sections.section_proof ["c"]
`(lift o f) differentiable at x ==>
	interval_arith (c * f x) bounds ==>
	all_n 1 d_bounds_list (\i int. interval_arith (c * partial i f x) int) ==>
	m_lin_approx (\x. c * f x) x bounds d_bounds_list`
[
   (BETA_TAC THEN (move ["df"]) THEN (move ["bH"]) THEN (move ["dbH"]));
   ((THENL_FIRST) ((((use_arg_then2 ("m_lin_approx", [m_lin_approx]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("bH", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_scale", [f_lift_scale]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_CMUL", [DIFFERENTIABLE_CMUL]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (done_tac)));
   ((ASM_SIMP_TAC[partial_scale]) THEN (done_tac));
];;

(* Lemma m_lin_approx_add *)
let m_lin_approx_add = Sections.section_proof []
`(lift o f) differentiable at x ==>
	(lift o g) differentiable at x ==>
	interval_arith (f x + g x) bounds ==>
	all_n 1 d_bounds_list (\i int. interval_arith (partial i f x + partial i g x) int) ==>
	m_lin_approx (\x. f x + g x) x bounds d_bounds_list`
[
   (BETA_TAC THEN (move ["df"]) THEN (move ["dg"]) THEN (move ["bH"]) THEN (move ["dbH"]));
   ((THENL_FIRST) ((((use_arg_then2 ("m_lin_approx", [m_lin_approx]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("bH", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_add", [f_lift_add]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_ADD", [DIFFERENTIABLE_ADD]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (done_tac)));
   ((ASM_SIMP_TAC[partial_add]) THEN (done_tac));
];;

(* Lemma m_lin_approx_sub *)
let m_lin_approx_sub = Sections.section_proof []
`(lift o f) differentiable at x ==>
	(lift o g) differentiable at x ==>
	interval_arith (f x - g x) bounds ==>
	all_n 1 d_bounds_list (\i int. interval_arith (partial i f x - partial i g x) int) ==>
	m_lin_approx (\x. f x - g x) x bounds d_bounds_list`
[
   (BETA_TAC THEN (move ["df"]) THEN (move ["dg"]) THEN (move ["bH"]) THEN (move ["dbH"]));
   ((THENL_FIRST) ((((use_arg_then2 ("m_lin_approx", [m_lin_approx]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("bH", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("f_lift_sub", [f_lift_sub]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("DIFFERENTIABLE_SUB", [DIFFERENTIABLE_SUB]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) ((((use_arg_then2 ("ETA_AX", [ETA_AX]))(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (done_tac)));
   ((ASM_SIMP_TAC[partial_sub]) THEN (done_tac));
];;

(* Lemma m_lin_approx_mul *)
let m_lin_approx_mul = Sections.section_proof []
`(lift o f) differentiable at x ==>
	(lift o g) differentiable at x ==>
	interval_arith (f x * g x) bounds ==>
	all_n 1 d_bounds_list (\i int. interval_arith (partial i f x * g x + f x * partial i g x) int) ==>
	m_lin_approx (\x. f x * g x) x bounds d_bounds_list`
[
   (BETA_TAC THEN (move ["df"]) THEN (move ["dg"]) THEN (move ["bH"]) THEN (move ["dbH"]));
   ((((use_arg_then2 ("m_lin_approx", [m_lin_approx]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("bH", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("differentiable_mul", [differentiable_mul]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] []))))));
   ((ASM_SIMP_TAC[partial_mul]) THEN (done_tac));
];;

(* Finalization of the section M_LinApprox *)
let m_lin_approx_neg = Sections.finalize_theorem m_lin_approx_neg;;
let m_lin_approx_scale = Sections.finalize_theorem m_lin_approx_scale;;
let m_lin_approx_add = Sections.finalize_theorem m_lin_approx_add;;
let m_lin_approx_sub = Sections.finalize_theorem m_lin_approx_sub;;
let m_lin_approx_mul = Sections.finalize_theorem m_lin_approx_mul;;
Sections.end_section "M_LinApprox";;
let second_bounded = new_definition `second_bounded f domain dd_bounds_list <=>
	!x. x IN interval [domain] ==> all_n 1 dd_bounds_list
		(\i list_i. all_n 1 list_i (\j int. interval_arith (partial2 j i f x) int))`;;
let m_taylor_interval = 
	new_definition `m_taylor_interval f domain y w f_bounds d_bounds_list dd_bounds_list <=>
		m_cell_domain domain y w /\
		diff2c_domain domain f /\
		m_lin_approx f y f_bounds d_bounds_list /\
		second_bounded f domain dd_bounds_list`;;

(* Section M_TaylorIntervalArith *)
Sections.begin_section "M_TaylorIntervalArith";;
(Sections.add_section_var (mk_var ("f", (`:real^N -> real`))); Sections.add_section_var (mk_var ("g", (`:real^N -> real`))));;
(Sections.add_section_var (mk_var ("x", (`:real^N`))); Sections.add_section_var (mk_var ("z", (`:real^N`))); Sections.add_section_var (mk_var ("y", (`:real^N`))); Sections.add_section_var (mk_var ("w", (`:real^N`))));;
(Sections.add_section_var (mk_var ("domain", (`:real^N#real^N`))));;
(Sections.add_section_var (mk_var ("f_bounds", (`:real#real`))); Sections.add_section_var (mk_var ("g_bounds", (`:real#real`))); Sections.add_section_var (mk_var ("bounds", (`:real#real`))));;
(Sections.add_section_var (mk_var ("df_bounds_list", (`:(real#real)list`))); Sections.add_section_var (mk_var ("dg_bounds_list", (`:(real#real)list`))); Sections.add_section_var (mk_var ("d_bounds_list", (`:(real#real)list`))));;
(Sections.add_section_var (mk_var ("ddf_bounds_list", (`:((real#real)list)list`))); Sections.add_section_var (mk_var ("ddg_bounds_list", (`:((real#real)list)list`))); Sections.add_section_var (mk_var ("dd_bounds_list", (`:((real#real)list)list`))));;
(Sections.add_section_hyp "domainH" (`m_cell_domain domain y w`));;
(Sections.add_section_hyp "d2f" (`diff2c_domain domain f`));;

(* Lemma m_taylor_inv_compose *)
let m_taylor_inv_compose = Sections.section_proof []
`m_bounded_on_int f domain f_bounds ==> interval_not_zero f_bounds ==>
	m_lin_approx (inv o f) y bounds d_bounds_list ==>
	second_bounded (inv o f) domain dd_bounds_list ==>
	m_taylor_interval (inv o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["bf"]) THEN (move ["fn0"]) THEN (move ["lin"]) THEN (move ["second"])) THEN (((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2c_domain_inv_compose", [diff2c_domain_inv_compose])) (fun fst_arg -> (use_arg_then2 ("d2f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("bf", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma m_taylor_sqrt_compose *)
let m_taylor_sqrt_compose = Sections.section_proof []
`m_bounded_on_int f domain f_bounds ==> interval_pos f_bounds ==>
	m_lin_approx (sqrt o f) y bounds d_bounds_list ==>
	second_bounded (sqrt o f) domain dd_bounds_list ==>
	m_taylor_interval (sqrt o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["bf"]) THEN (move ["fn0"]) THEN (move ["lin"]) THEN (move ["second"])) THEN (((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2c_domain_sqrt_compose", [diff2c_domain_sqrt_compose])) (fun fst_arg -> (use_arg_then2 ("d2f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("bf", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma m_taylor_atn_compose *)
let m_taylor_atn_compose = Sections.section_proof []
`m_lin_approx (atn o f) y bounds d_bounds_list ==>
	second_bounded (atn o f) domain dd_bounds_list ==>
	m_taylor_interval (atn o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_atn_compose", [diff2c_domain_atn_compose]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma m_taylor_cos_compose *)
let m_taylor_cos_compose = Sections.section_proof []
`m_lin_approx (cos o f) y bounds d_bounds_list ==>
	second_bounded (cos o f) domain dd_bounds_list ==>
	m_taylor_interval (cos o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_cos_compose", [diff2c_domain_cos_compose]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma m_taylor_sin_compose *)
let m_taylor_sin_compose = Sections.section_proof []
`m_lin_approx (sin o f) y bounds d_bounds_list ==>
	second_bounded (sin o f) domain dd_bounds_list ==>
	m_taylor_interval (sin o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_sin_compose", [diff2c_domain_sin_compose]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma m_taylor_exp_compose *)
let m_taylor_exp_compose = Sections.section_proof []
`m_lin_approx (exp o f) y bounds d_bounds_list ==>
	second_bounded (exp o f) domain dd_bounds_list ==>
	m_taylor_interval (exp o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_exp_compose", [diff2c_domain_exp_compose]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma m_taylor_log_compose *)
let m_taylor_log_compose = Sections.section_proof []
`m_bounded_on_int f domain f_bounds ==> interval_pos f_bounds ==>
	m_lin_approx (log o f) y bounds d_bounds_list ==>
	second_bounded (log o f) domain dd_bounds_list ==>
	m_taylor_interval (log o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["bf"]) THEN (move ["fn0"]) THEN (move ["lin"]) THEN (move ["second"])) THEN (((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2c_domain_log_compose", [diff2c_domain_log_compose])) (fun fst_arg -> (use_arg_then2 ("d2f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("bf", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma m_taylor_acs_compose *)
let m_taylor_acs_compose = Sections.section_proof []
`m_bounded_on_int f domain f_bounds ==> iabs f_bounds < &1 ==>
	m_lin_approx (acs o f) y bounds d_bounds_list ==>
	second_bounded (acs o f) domain dd_bounds_list ==>
	m_taylor_interval (acs o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["bf"]) THEN (move ["fn0"]) THEN (move ["lin"]) THEN (move ["second"])) THEN (((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2c_domain_acs_compose", [diff2c_domain_acs_compose])) (fun fst_arg -> (use_arg_then2 ("d2f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("bf", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma m_taylor_asn_compose *)
let m_taylor_asn_compose = Sections.section_proof []
`m_bounded_on_int f domain f_bounds ==> iabs f_bounds < &1 ==>
	m_lin_approx (asn o f) y bounds d_bounds_list ==>
	second_bounded (asn o f) domain dd_bounds_list ==>
	m_taylor_interval (asn o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["bf"]) THEN (move ["fn0"]) THEN (move ["lin"]) THEN (move ["second"])) THEN (((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2c_domain_asn_compose", [diff2c_domain_asn_compose])) (fun fst_arg -> (use_arg_then2 ("d2f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("bf", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma m_taylor_matan_compose *)
let m_taylor_matan_compose = Sections.section_proof []
`m_bounded_on_int f domain f_bounds ==> interval_gt (-- &1) f_bounds ==>
	m_lin_approx (matan o f) y bounds d_bounds_list ==>
	second_bounded (matan o f) domain dd_bounds_list ==>
	m_taylor_interval (matan o f) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["bf"]) THEN (move ["fn0"]) THEN (move ["lin"]) THEN (move ["second"])) THEN (((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("diff2c_domain_matan_compose", [diff2c_domain_matan_compose])) (fun fst_arg -> (use_arg_then2 ("d2f", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("bf", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma m_taylor_neg *)
let m_taylor_neg = Sections.section_proof []
`m_lin_approx (\x. --f x) y bounds d_bounds_list ==>
	second_bounded (\x. --f x) domain dd_bounds_list ==>
	m_taylor_interval (\x. --f x) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_neg", [diff2c_domain_neg]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma m_taylor_scale *)
let m_taylor_scale = Sections.section_proof ["c"]
`m_lin_approx (\x. c * f x) y bounds d_bounds_list ==>
	second_bounded (\x. c * f x) domain dd_bounds_list ==>
	m_taylor_interval (\x. c * f x) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_scale", [diff2c_domain_scale]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(Sections.add_section_hyp "d2g" (`diff2c_domain domain g`));;

(* Lemma m_taylor_add *)
let m_taylor_add = Sections.section_proof []
`m_lin_approx (\x. f x + g x) y bounds d_bounds_list ==>
	second_bounded (\x. f x + g x) domain dd_bounds_list ==>
	m_taylor_interval (\x. f x + g x) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_add", [diff2c_domain_add]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma m_taylor_sub *)
let m_taylor_sub = Sections.section_proof []
`m_lin_approx (\x. f x - g x) y bounds d_bounds_list ==>
	second_bounded (\x. f x - g x) domain dd_bounds_list ==>
	m_taylor_interval (\x. f x - g x) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_sub", [diff2c_domain_sub]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma m_taylor_mul *)
let m_taylor_mul = Sections.section_proof []
`m_lin_approx (\x. f x * g x) y bounds d_bounds_list ==>
	second_bounded (\x. f x * g x) domain dd_bounds_list ==>
	m_taylor_interval (\x. f x * g x) domain y w bounds d_bounds_list dd_bounds_list`
[
   ((BETA_TAC THEN (move ["lin"]) THEN (move ["second"])) THEN ((((use_arg_then2 ("m_taylor_interval", [m_taylor_interval]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_domain_mul", [diff2c_domain_mul]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section M_TaylorIntervalArith *)
let m_taylor_inv_compose = Sections.finalize_theorem m_taylor_inv_compose;;
let m_taylor_sqrt_compose = Sections.finalize_theorem m_taylor_sqrt_compose;;
let m_taylor_atn_compose = Sections.finalize_theorem m_taylor_atn_compose;;
let m_taylor_cos_compose = Sections.finalize_theorem m_taylor_cos_compose;;
let m_taylor_sin_compose = Sections.finalize_theorem m_taylor_sin_compose;;
let m_taylor_exp_compose = Sections.finalize_theorem m_taylor_exp_compose;;
let m_taylor_log_compose = Sections.finalize_theorem m_taylor_log_compose;;
let m_taylor_acs_compose = Sections.finalize_theorem m_taylor_acs_compose;;
let m_taylor_asn_compose = Sections.finalize_theorem m_taylor_asn_compose;;
let m_taylor_matan_compose = Sections.finalize_theorem m_taylor_matan_compose;;
let m_taylor_neg = Sections.finalize_theorem m_taylor_neg;;
let m_taylor_scale = Sections.finalize_theorem m_taylor_scale;;
let m_taylor_add = Sections.finalize_theorem m_taylor_add;;
let m_taylor_sub = Sections.finalize_theorem m_taylor_sub;;
let m_taylor_mul = Sections.finalize_theorem m_taylor_mul;;
Sections.end_section "M_TaylorIntervalArith";;

(* Section PartialConvex *)
Sections.begin_section "PartialConvex";;
(Sections.add_section_type (mk_var ("f", (`:real^N->real`))));;

(* Lemma REAL_LE_DIV_1 *)
let REAL_LE_DIV_1 = Sections.section_proof ["a";"b"]
`&0 < b ==> (a / b <= &1 <=> a <= b)`
[
   ((BETA_TAC THEN (move ["b_gt"])) THEN ((((use_arg_then2 ("REAL_LE_LDIV_EQ", [REAL_LE_LDIV_EQ]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("REAL_MUL_LID", [REAL_MUL_LID]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma partial_convex_max *)
let partial_convex_max = Sections.section_proof ["f";"j";"x";"z";"u";"v";"hi"]
`(!i. i IN 1..dimindex (:N) ==> ~(i = j) ==> u$i = z$i /\ v$i = x$i) ==>
	u$j = x$j ==> v$j = z$j ==>
	diff2_domain (x,z) f ==>
	(!y. y IN interval [x,z] ==> &0 <= partial2 j j f y) ==>
	(!y. y IN interval [x,u] ==> f y <= hi) ==>
	(!y. y IN interval [v,z] ==> f y <= hi) ==>
	(!y. y IN interval [x,z] ==> f y <= hi)`
[
   ((((use_arg_then2 ("IN_NUMSEG", [IN_NUMSEG]))(thm_tac (new_rewrite [] [])))) THEN (move ["uv_eq"]) THEN (move ["ux_eq"]) THEN (move ["vz_eq"]));
   ((((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))) THEN (move ["diff2_f"]) THEN (move ["partial2_pos"]) THEN (move ["bound1"]) THEN (move ["bound2"]) THEN (move ["y"]) THEN (move ["y_in"]));
   ((fun arg_tac -> arg_tac (Arg_term (`(lambda i. if i = j then x$j else y$i):real^N`))) (term_tac (set_tac "y1")));
   ((fun arg_tac -> arg_tac (Arg_term (`(lambda i. if i = j then z$j else y$i):real^N`))) (term_tac (set_tac "y2")));
   ((((use_arg_then2 ("y_in", [])) (disch_tac [])) THEN (clear_assumption "y_in") THEN BETA_TAC) THEN ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL IN_INTERVAL)))(thm_tac (new_rewrite [] [])))) THEN (move ["y_in"])));
   ((fun arg_tac -> arg_tac (Arg_term (`y1 IN interval [x,u] /\ y2 IN interval [v,z]`))) (term_tac (have_gen_tac [](case THEN ((move ["y1_in"]) THEN (move ["y2_in"]))))));
   ((((use_arg_then2 ("y1_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("y2_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL IN_INTERVAL)))(thm_tac (new_rewrite [] []))))));
   (((split_tac) THEN (move ["i"]) THEN (move ["i_ineq"])) THEN ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL LAMBDA_BETA)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))) THEN (((fun arg_tac -> (use_arg_then2 ("EXCLUDED_MIDDLE", [EXCLUDED_MIDDLE])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`i = j`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case THEN (simp_tac) THEN (move ["ij"])) THEN ((repeat_tactic 0 10 (((fun arg_tac ->(use_arg_then2 ("ux_eq", []))(fun tmp_arg1 -> (use_arg_then2 ("vz_eq", []))(fun tmp_arg2 -> arg_tac (Arg_theorem (CONJ (get_arg_thm tmp_arg1) (get_arg_thm tmp_arg2))))))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_LE_REFL", [REAL_LE_REFL]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN ((((use_arg_then2 ("uv_eq", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("y_in", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((THENL_ROT (-1)) (((fun arg_tac -> (use_arg_then2 ("EXCLUDED_MIDDLE", [EXCLUDED_MIDDLE])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`j IN 1..dimindex (:N)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case)) THEN ((((use_arg_then2 ("IN_NUMSEG", [IN_NUMSEG]))(thm_tac (new_rewrite [] [])))) THEN (move ["j_in"])));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`y1 = y`))) (term_tac (have_gen_tac []ALL_TAC)))) ((BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then2 ("bound1", [])) (disch_tac [])) THEN (clear_assumption "bound1") THEN (DISCH_THEN apply_tac)) THEN (done_tac)));
   ((((use_arg_then2 ("CART_EQ", [CART_EQ]))(thm_tac (new_rewrite [] [])))) THEN (move ["i"]) THEN (move ["i_in"]));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`~(i = j)`))) (term_tac (have_gen_tac [](move ["inj"])))) ((((use_arg_then2 ("i_in", [])) (disch_tac [])) THEN (clear_assumption "i_in") THEN ((use_arg_then2 ("j_in", [])) (disch_tac [])) THEN (clear_assumption "j_in") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then2 ("y1_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL LAMBDA_BETA)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`f y <= max (f y1) (f y2)`))) (term_tac (have_gen_tac []ALL_TAC))));
   (BETA_TAC THEN (move ["cond"]));
   (((fun arg_tac -> (fun arg_tac -> arg_tac (Arg_theorem (REWRITE_RULE[GSYM IMP_IMP] REAL_LE_TRANS))) (fun fst_arg -> (use_arg_then2 ("cond", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac));
   ((((fun arg_tac -> (use_arg_then2 ("bound2", [])) (fun fst_arg -> (use_arg_then2 ("y2_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (use_arg_then2 ("bound1", [])) (fun fst_arg -> (use_arg_then2 ("y1_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`f o (\t. y1 + t % basis j)`))) (term_tac (set_tac "g")));
   ((fun arg_tac -> arg_tac (Arg_term (`f y1 = g (&0)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("VECTOR_MUL_LZERO", [VECTOR_MUL_LZERO]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("VECTOR_ADD_RID", [VECTOR_ADD_RID]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`y = y1 + (y$j - x$j) % basis j /\ y2 = y1 + (z$j - x$j) % basis j`))) (term_tac (have_gen_tac [](move ["y_eq"]))));
   ((repeat_tactic 1 9 (((use_arg_then2 ("CART_EQ", [CART_EQ]))(thm_tac (new_rewrite [] []))))) THEN ((split_tac) THEN (move ["i"]) THEN (move ["i_in"])) THEN ((((use_arg_then2 ("VECTOR_ADD_COMPONENT", [VECTOR_ADD_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("VECTOR_MUL_COMPONENT", [VECTOR_MUL_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("BASIS_COMPONENT", [BASIS_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))) THEN (((fun arg_tac -> (use_arg_then2 ("EXCLUDED_MIDDLE", [EXCLUDED_MIDDLE])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`i = j`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case THEN (simp_tac) THEN (move ["ij"])) THEN ((repeat_tactic 0 10 (((fun arg_tac ->(use_arg_then2 ("y1_def", []))(fun tmp_arg1 -> (use_arg_then2 ("y2_def", []))(fun tmp_arg2 -> arg_tac (Arg_theorem (CONJ (get_arg_thm tmp_arg1) (get_arg_thm tmp_arg2))))))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL LAMBDA_BETA)))(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_MUL_RID", [REAL_MUL_RID]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_SUB_ADD2", [REAL_SUB_ADD2]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))));
   (((((use_arg_then2 ("ij", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then2 ("ij", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (arith_tac) THEN (done_tac));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`f y = g (y$j - x$j)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))) (((((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("y_eq", []))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac)));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`f y2 = g (z$j - x$j)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))) (((((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("y_eq", []))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac)));
   (((fun arg_tac -> (use_arg_then2 ("EXCLUDED_MIDDLE", [EXCLUDED_MIDDLE])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`z$j = x$j`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case THEN (move ["zx_j"]));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`y$j = x$j`))) (term_tac (have_gen_tac []ALL_TAC)))) ((BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then2 ("zx_j", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_SUB_REFL", [REAL_SUB_REFL]))(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then2 ("y_in", [])) (fun fst_arg -> (use_arg_then2 ("j_in", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then2 ("zx_j", []))(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`(y$j - x$j) / (z$j - x$j)`))) (term_tac (set_tac "t")));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 < z$j - x$j`))) (term_tac (have_gen_tac [](move ["zx_pos"]))));
   ((((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!a b. &0 < a - b <=> ~(a = b) /\ b <= a`)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("zx_j", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((use_arg_then2 ("REAL_LE_TRANS", [REAL_LE_TRANS])) (disch_tac [])) THEN (clear_assumption "REAL_LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`y$j`))) (term_tac exists_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("y_in", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 <= t /\ t <= &1 /\ y$j - x$j = (&1 - t) * &0 + t * (z$j - x$j)`))) (term_tac (have_gen_tac [](move ["t_props"]))));
   ((((use_arg_then2 ("t_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("REAL_LE_DIV_1", [REAL_LE_DIV_1]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("REAL_MUL_RZERO", [REAL_MUL_RZERO]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_ADD_LID", [REAL_ADD_LID]))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then2 ("real_div", [real_div]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_MUL_ASSOC)))(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((use_arg_then2 ("REAL_MUL_LINV", [REAL_MUL_LINV]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_SUB_0", [REAL_SUB_0]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("REAL_MUL_RID", [REAL_MUL_RID]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((repeat_tactic 1 9 (((use_arg_then2 ("real_sub", [real_sub]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("REAL_LE_RADD", [REAL_LE_RADD]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("y_in", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("real_sub", [real_sub]))(gsym_then (thm_tac (new_rewrite [] [])))))));
   ((THENL_FIRST) ((((use_arg_then2 ("REAL_LE_MUL", [REAL_LE_MUL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_LE_INV", [REAL_LE_INV]))(thm_tac (new_rewrite [] []))))) ((((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!a. &0 < a ==> &0 <= a`)))(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (((((use_arg_then2 ("REAL_SUB_LE", [REAL_SUB_LE]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("y_in", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("t_props", []))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONVEX_LOWER))) (disch_tac [])) THEN (DISCH_THEN apply_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`real_interval [&0, z$j - x$j]`))) (term_tac exists_tac));
   ((((use_arg_then2 ("REAL_SUB_ADD", [REAL_SUB_ADD]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_SUB_LE", [REAL_SUB_LE]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("t_props", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("IN_REAL_INTERVAL", [IN_REAL_INTERVAL]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_LE_REFL", [REAL_LE_REFL]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac));
   ((((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!a. &0 < a ==> &0 <= a`)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("andbT", [andbT]))(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`real_interval _`))) (term_tac (set_tac "s"))) THEN (((use_arg_then2 ("t_props", [])) (disch_tac [])) THEN (clear_assumption "t_props") THEN ((use_arg_then2 ("t_def", [])) (disch_tac [])) THEN (clear_assumption "t_def") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"])));
   ((fun arg_tac -> arg_tac (Arg_term (`!t. t IN s ==> y1 + t % basis j IN interval [x,z]`))) (term_tac (have_gen_tac [](move ["in_s"]))));
   (((((use_arg_then2 ("s_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("IN_REAL_INTERVAL", [IN_REAL_INTERVAL]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL IN_INTERVAL)))(thm_tac (new_rewrite [] []))))) THEN (move ["t"]) THEN (move ["t_ineq"]) THEN (move ["i"]) THEN (move ["i_ineq"]));
   ((repeat_tactic 1 9 (((use_arg_then2 ("VECTOR_ADD_COMPONENT", [VECTOR_ADD_COMPONENT]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("VECTOR_MUL_COMPONENT", [VECTOR_MUL_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("BASIS_COMPONENT", [BASIS_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   ((((use_arg_then2 ("y1_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL LAMBDA_BETA)))(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)));
   ((THENL_ROT (-1)) (((fun arg_tac -> (use_arg_then2 ("EXCLUDED_MIDDLE", [EXCLUDED_MIDDLE])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`i = j`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case THEN (simp_tac) THEN (move ["ij"])));
   (((((use_arg_then2 ("REAL_MUL_RZERO", [REAL_MUL_RZERO]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_ADD_RID", [REAL_ADD_RID]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("y_in", []))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((((use_arg_then2 ("t_ineq", [])) (disch_tac [])) THEN (clear_assumption "t_ineq") THEN ((fun arg_tac -> (use_arg_then2 ("y_in", [])) (fun fst_arg -> (use_arg_then2 ("i_ineq", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then2 ("ij", []))(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!t. t IN s ==> nth_diff_strong 2 g t`))) (term_tac (have_gen_tac [](move ["diff2_g"]))));
   ((BETA_TAC THEN (move ["t"]) THEN (move ["ts"])) THEN (((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then2 ("diff2_dir", [diff2_dir]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_f", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("in_s", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!t. t IN s ==> derivative g t = partial j f (y1 + t % basis j)`))) (term_tac (have_gen_tac [](move ["dg"]))));
   ((BETA_TAC THEN (move ["t"]) THEN (move ["ts"])) THEN (((use_arg_then2 ("partial", [partial]))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then2 ("in_s", [])) (fun fst_arg -> (use_arg_then2 ("ts", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (move ["p_in"])) THEN ((fun arg_tac -> arg_tac (Arg_term (`f o _`))) (term_tac (set_tac "h"))));
   ((fun arg_tac -> arg_tac (Arg_term (`h = g o (\t'. t + t')`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((((((use_arg_then2 ("eq_ext", [eq_ext]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("h_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["r"])) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (simp_tac)));
   (((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL VECTOR_ADD_RDISTRIB)))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL VECTOR_ADD_ASSOC)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("derivative_translation", [derivative_translation]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_g", [])) (fun fst_arg -> (use_arg_then2 ("ts", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then2 ("nth_diff_strong2_eq", [nth_diff_strong2_eq]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["e"])) THEN (case THEN (move ["_"])) THEN (case THEN (move ["te"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!t. t IN s ==> nth_derivative 2 g t = partial2 j j f (y1 + t % basis j)`))) (term_tac (have_gen_tac [](move ["d2g"]))));
   ((BETA_TAC THEN (move ["t"]) THEN (move ["ts"])) THEN ((((use_arg_then2 ("g_def", []))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("diff2_dir_derivative2", [diff2_dir_derivative2]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("diff2_f", []))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("in_s", []))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))));
   ((fun arg_tac -> arg_tac (Arg_term (`1..dimindex (:N) = ((1..dimindex (:N)) DELETE j) UNION {j}`))) (term_tac (have_gen_tac [](move ["s_eq"]))));
   ((((((use_arg_then2 ("EXTENSION", [EXTENSION]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_UNION", [IN_UNION]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_SING", [IN_SING]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_DELETE", [IN_DELETE]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"])) THEN (split_tac));
   ((BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("orNb", [orNb]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((case THEN (simp_tac)) THEN (((use_arg_then2 ("IN_NUMSEG", [IN_NUMSEG]))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`DISJOINT ((1..dimindex (:N)) DELETE j) {j}`))) (term_tac (have_gen_tac [](move ["disj"]))));
   (((((use_arg_then2 ("DISJOINT", [DISJOINT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("EXTENSION", [EXTENSION]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_INTER", [IN_INTER]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_SING", [IN_SING]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("NOT_IN_EMPTY", [NOT_IN_EMPTY]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_DELETE", [IN_DELETE]))(thm_tac (new_rewrite [] []))))) THEN (move ["i"]));
   (((((use_arg_then2 ("andbA", [andbA]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("andNb", [andNb]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andbF", [andbF]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("s_eq", []))(thm_tac (new_rewrite [1] [])))) THEN (((use_arg_then2 ("SUM_UNION", [SUM_UNION]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("FINITE_DELETE", [FINITE_DELETE]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("FINITE_NUMSEG", [FINITE_NUMSEG]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("FINITE_SING", [FINITE_SING]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("SUM_SING", [SUM_SING]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((use_arg_then2 ("SUM_EQ_0", [SUM_EQ_0]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("IN_DELETE", [IN_DELETE]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_ADD_LID", [REAL_ADD_LID]))(thm_tac (new_rewrite [] []))))));
   ((BETA_TAC THEN (move ["i"]) THEN (move ["i_in"])) THEN (((use_arg_then2 ("SUM_EQ_0", [SUM_EQ_0])) (thm_tac apply_tac)) THEN (move ["k"]) THEN (move ["k_in"]) THEN (simp_tac)));
   (((((use_arg_then2 ("BASIS_COMPONENT", [BASIS_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("IN_NUMSEG", [IN_NUMSEG]))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("i_in", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("REAL_MUL_LZERO", [REAL_MUL_LZERO]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("s_eq", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("SUM_UNION", [SUM_UNION]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("FINITE_DELETE", [FINITE_DELETE]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("FINITE_NUMSEG", [FINITE_NUMSEG]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("FINITE_SING", [FINITE_SING]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("SUM_SING", [SUM_SING]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((use_arg_then2 ("SUM_EQ_0", [SUM_EQ_0]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("IN_DELETE", [IN_DELETE]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_ADD_LID", [REAL_ADD_LID]))(thm_tac (new_rewrite [] []))))));
   ((BETA_TAC THEN (move ["i"]) THEN (move ["i_in"]) THEN (simp_tac)) THEN (((use_arg_then2 ("REAL_ENTIRE", [REAL_ENTIRE]))(thm_tac (new_rewrite [] [])))) THEN (DISJ2_TAC));
   (((((use_arg_then2 ("BASIS_COMPONENT", [BASIS_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("IN_NUMSEG", [IN_NUMSEG]))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("i_in", []))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("REAL_MUL_LZERO", [REAL_MUL_LZERO]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then2 ("BASIS_COMPONENT", [BASIS_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("j_in", []))(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_MUL_LID", [REAL_MUL_LID]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial2", [partial2]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then2 ("REAL_CONVEX_ON_SECOND_DERIVATIVE", [REAL_CONVEX_ON_SECOND_DERIVATIVE])) (fun fst_arg -> (use_arg_then2 ("g", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`derivative g`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`nth_derivative 2 g`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then2 ("s", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC));
   ((THENL_ROT (-1)) (((((use_arg_then2 ("s_def", []))(gsym_then (thm_tac (new_rewrite [1; 2] []))))) THEN (((use_arg_then2 ("IS_REALINTERVAL_INTERVAL", [IS_REALINTERVAL_INTERVAL]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("NOT_EXISTS_THM", [NOT_EXISTS_THM]))(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))));
   ((BETA_TAC THEN (move ["t"]) THEN (move ["ts"])) THEN ((((use_arg_then2 ("d2g", []))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("partial2_pos", []))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("in_s", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (split_tac);
   ((BETA_TAC THEN (move ["t"])) THEN (((use_arg_then2 ("contraT", [contraT])) (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac)) THEN (((((use_arg_then2 ("negbK", [negbK]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("EXTENSION", [EXTENSION]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_SING", [IN_SING]))(thm_tac (new_rewrite [] []))))) THEN (move ["eq"])));
   ((((use_arg_then2 ("zx_pos", [])) (disch_tac [])) THEN (clear_assumption "zx_pos") THEN ((fun arg_tac -> (use_arg_then2 ("eq", [])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`z$j - x$j`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (use_arg_then2 ("eq", [])) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then2 ("IN_REAL_INTERVAL", [IN_REAL_INTERVAL]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("REAL_LE_REFL", [REAL_LE_REFL]))(thm_tac (new_rewrite [] [])))))));
   ((arith_tac) THEN (done_tac));
   ((split_tac) THEN (move ["t"]) THEN (move ["ts"]));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_g", [])) (fun fst_arg -> (use_arg_then2 ("ts", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then2 ("nth_diff_strong2_eq_alt", [nth_diff_strong2_eq_alt]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["e"])) THEN (case THEN (move ["_"])) THEN (case THEN (move ["te"])) THEN (move ["H"])));
   (((((use_arg_then2 ("HAS_REAL_DERIVATIVE_ATREAL_WITHIN", [HAS_REAL_DERIVATIVE_ATREAL_WITHIN]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("H", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then2 ("diff2_g", [])) (fun fst_arg -> (use_arg_then2 ("ts", [])) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then2 ("nth_diff_strong2_eq_alt", [nth_diff_strong2_eq_alt]))(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["e"])) THEN (case THEN (move ["_"])) THEN (case THEN (move ["te"])) THEN (move ["H"])));
   (((((use_arg_then2 ("HAS_REAL_DERIVATIVE_ATREAL_WITHIN", [HAS_REAL_DERIVATIVE_ATREAL_WITHIN]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("H", []))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section PartialConvex *)
let REAL_LE_DIV_1 = Sections.finalize_theorem REAL_LE_DIV_1;;
let partial_convex_max = Sections.finalize_theorem partial_convex_max;;
Sections.end_section "PartialConvex";;

(* Section ElementaryFunctions *)
Sections.begin_section "ElementaryFunctions";;

(* Lemma f_lift_const *)
let f_lift_const = Sections.section_proof ["c"]
`lift o (\x. c) = (\x. lift c)`
[
   (((((use_arg_then2 ("eq_ext", [eq_ext]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma f_lift_unary *)
let f_lift_unary = Sections.section_proof ["f"]
`lift o (\x. f x) = (\x. lift (f x))`
[
   (((((use_arg_then2 ("eq_ext", [eq_ext]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_const *)
let diff2_const = Sections.section_proof ["c";"x"]
`diff2 (\x:real^N. c) x`
[
   ((((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ((fun arg_tac -> arg_tac (Arg_term (`(:real^N)`))) (term_tac exists_tac)) THEN (((((use_arg_then2 ("OPEN_UNIV", [OPEN_UNIV]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_UNIV", [IN_UNIV]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) THEN (move ["y"]) THEN (move ["_"])));
   (((((use_arg_then2 ("partial_const", [partial_const]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("f_lift_const", [f_lift_const]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("DIFFERENTIABLE_CONST", [DIFFERENTIABLE_CONST]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2_domain_const *)
let diff2_domain_const = Sections.section_proof ["c";"domain"]
`diff2_domain domain (\x:real^N. c)`
[
   (((((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_const", [diff2_const]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma partial2_const *)
let partial2_const = Sections.section_proof ["i";"j";"c"]
`partial2 i j (\x:real^N. c) = (\x. &0)`
[
   (((((use_arg_then2 ("partial2", [partial2]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("partial_const", [partial_const]))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma diff2c_const *)
let diff2c_const = Sections.section_proof ["c";"x"]
`diff2c (\x:real^N. c) x`
[
   (((((use_arg_then2 ("diff2c", [diff2c]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_const", [diff2_const]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("partial2_const", [partial2_const]))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_const *)
let diff2c_domain_const = Sections.section_proof ["c";"domain"]
`diff2c_domain domain (\x:real^N. c)`
[
   (((((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2c_const", [diff2c_const]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma partial_x_lemma *)
let partial_x_lemma = Sections.section_proof ["k";"i"]
`partial i (\x:real^N. x$k) = (\x. (basis i:real^N)$k)`
[
   (((((use_arg_then2 ("eq_ext", [eq_ext]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial", [partial]))(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (simp_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`(\x. x$k) o (\t. x + t % basis i) = (\t. x$k + t * (basis i:real^N)$k)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then2 ("eq_ext", [eq_ext]))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("o_THM", [o_THM]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("VECTOR_ADD_COMPONENT", [VECTOR_ADD_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("VECTOR_MUL_COMPONENT", [VECTOR_MUL_COMPONENT]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("derivative_add", [derivative_add]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_DIFFERENTIABLE_MUL_ATREAL", [REAL_DIFFERENTIABLE_MUL_ATREAL]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_DIFFERENTIABLE_CONST", [REAL_DIFFERENTIABLE_CONST]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((((use_arg_then2 ("REAL_DIFFERENTIABLE_ID", [REAL_DIFFERENTIABLE_ID]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_DIFFERENTIABLE_CONST", [REAL_DIFFERENTIABLE_CONST]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then2 ("derivative_const", [derivative_const]))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then2 ("derivative_mul", [derivative_mul]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_DIFFERENTIABLE_ID", [REAL_DIFFERENTIABLE_ID]))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("REAL_DIFFERENTIABLE_CONST", [REAL_DIFFERENTIABLE_CONST]))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((((use_arg_then2 ("derivative_x", [derivative_x]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("derivative_const", [derivative_const]))(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma partial_x *)
let partial_x = Sections.section_proof ["k";"i"]
`k IN 1..dimindex (:N) ==> 
	partial i (\x:real^N. x$k) = (\x. if i = k then &1 else &0)`
[
   ((BETA_TAC THEN (move ["k_ineq"])) THEN ((((use_arg_then2 ("partial_x_lemma", [partial_x_lemma]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("BASIS_COMPONENT", [BASIS_COMPONENT]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then2 ("IN_NUMSEG", [IN_NUMSEG]))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac))) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma partial2_x *)
let partial2_x = Sections.section_proof ["k";"i";"j"]
`partial2 i j (\x:real^N. x$k) = (\x. &0)`
[
   (((((use_arg_then2 ("partial2", [partial2]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("partial_x_lemma", [partial_x_lemma]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("partial_const", [partial_const]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_x *)
let diff2_x = Sections.section_proof ["k";"x"]
`k IN 1..dimindex (:N) ==> diff2 (\x:real^N. x$k) x`
[
   ((BETA_TAC THEN (move ["k_ineq"])) THEN (((use_arg_then2 ("diff2", [diff2]))(thm_tac (new_rewrite [] [])))) THEN ((fun arg_tac -> arg_tac (Arg_term (`(:real^N)`))) (term_tac exists_tac)) THEN (((((use_arg_then2 ("OPEN_UNIV", [OPEN_UNIV]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("IN_UNIV", [IN_UNIV]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("andTb", [andTb]))(thm_tac (new_rewrite [] [])))))) THEN (move ["y"]) THEN (move ["_"])));
   (((((use_arg_then2 ("projection_diff", [projection_diff]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then2 ("partial_x_lemma", [partial_x_lemma]))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then2 ("f_lift_unary", [f_lift_unary]))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("DIFFERENTIABLE_CONST", [DIFFERENTIABLE_CONST]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2_domain_x *)
let diff2_domain_x = Sections.section_proof ["k";"domain"]
`k IN 1..dimindex (:N) ==> diff2_domain domain (\x:real^N. x$k)`
[
   (((DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2_x", [diff2_x])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2_domain", [diff2_domain]))(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_x *)
let diff2c_x = Sections.section_proof ["k";"x"]
`k IN 1..dimindex (:N) ==> diff2c (\x:real^N. x$k) x`
[
   ((BETA_TAC THEN (move ["k_ineq"])) THEN ((((use_arg_then2 ("diff2c", [diff2c]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("diff2_x", [diff2_x]))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))));
   (((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then2 ("partial2_x", [partial2_x]))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then2 ("REAL_CONTINUOUS_CONST", [REAL_CONTINUOUS_CONST]))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma diff2c_domain_x *)
let diff2c_domain_x = Sections.section_proof ["k";"domain"]
`k IN 1..dimindex (:N) ==> diff2c_domain domain (\x:real^N. x$k)`
[
   (((DISCH_THEN (fun snd_th -> (use_arg_then2 ("diff2c_x", [diff2c_x])) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN ((((use_arg_then2 ("diff2c_domain", [diff2c_domain]))(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section ElementaryFunctions *)
let f_lift_const = Sections.finalize_theorem f_lift_const;;
let f_lift_unary = Sections.finalize_theorem f_lift_unary;;
let diff2_const = Sections.finalize_theorem diff2_const;;
let diff2_domain_const = Sections.finalize_theorem diff2_domain_const;;
let partial2_const = Sections.finalize_theorem partial2_const;;
let diff2c_const = Sections.finalize_theorem diff2c_const;;
let diff2c_domain_const = Sections.finalize_theorem diff2c_domain_const;;
let partial_x_lemma = Sections.finalize_theorem partial_x_lemma;;
let partial_x = Sections.finalize_theorem partial_x;;
let partial2_x = Sections.finalize_theorem partial2_x;;
let diff2_x = Sections.finalize_theorem diff2_x;;
let diff2_domain_x = Sections.finalize_theorem diff2_domain_x;;
let diff2c_x = Sections.finalize_theorem diff2c_x;;
let diff2c_domain_x = Sections.finalize_theorem diff2c_domain_x;;
Sections.end_section "ElementaryFunctions";;

(* Close the module *)
let _ = print_endline "taylor/theory/multivariate_taylor-compiled.hl loaded";;
