needs "trigonometry/trig1.ml";;
needs "trigonometry/trig2.ml";;

(*

Known issues:

-- Flypaper defines sin and cos by their power series. HOL Light defines them
through complex analysis.

-- JLPSDHF (Euler's triangle identity is not finished, Diep and Ky )

-- JBDNJJB done by Truong but not yet uploaded

-- NUHSVLM: 5 points in R3 ==> cayleyR = 0, moved to collect_geom2.ml. Slow to run.
     I will keep it out of the daily build.

-- Some results (marked LEG) have been formalized but not imported from 
Lemmas in Elementary Geometry.  Now in leg/ directory.

-- some minor results that haven't been done or located are marked "not found" below

*)

(* summary of the trig chapter *)


let FOYTTIX1 = cos;;
let FOYTTIX2 = sin;;
let FOYTTIX=[FOYTTIX1;FOYTTIX2];;

let SIN_0 = SIN_0 ;;
let YIXJNJQ1 = SIN_0;;

let COS_0 = COS_0;;
let YIXJNJQ2 = COS_0;;
let YIXJNJQ = [YIXJNJQ1;YIXJNJQ2];;

let WPMXVYZ = SIN_CIRCLE;; 

let WNYVJPE1 = SIN_ADD;;

let WNYVJPE2 = COS_ADD;;
let WNYVJPE = [WNYVJPE1;WNYVJPE2];;

let KGLLRQT1 = COS_NEG;;

let KGLLRQT2 = SIN_NEG;;
let KGLLRQT = [KGLLRQT1;KGLLRQT2];;

(* cos(pi/2) = 0 *)
let CFXEKKP1 =  COS_PI2;;
let CFXEKKP2 =  COS_POS_PI2;;


(* This is combined between two lemmas *)
let ZSKECZV = COS_POS_PI_LE;;

(* Lemma label{lemma:sin-pi2} *)
let CPIREMF1 = SIN_PI2;;
let CPIREMF2 = SIN_POS_PI_LE;;
let CPIREMF = [CPIREMF1;CPIREMF2];;

(* Lemma label{lemma:cos-sin} *)
let SCEZKRH1 = GSYM COS_SIN;;
let SCEZKRH2 = GSYM SIN_COS;;

let SCEZKRH = [SCEZKRH1;SCEZKRH2];;

let WIBGJRR = SIN_POS_PI_LE;;

let LLOYXRK1 = prove(`!x. cos(pi/ &2 + x) = -- (sin x)`,
   REWRITE_TAC[REAL_ARITH `x + y = x - (-- y)`;GSYM SIN_COS;SIN_NEG]);;
let LLOYXRK2 = prove(`!x. sin(pi/ &2 + x) = cos x`,
   REWRITE_TAC[REAL_ARITH `x + y = x - (-- y)`;GSYM COS_SIN;COS_NEG]);;
let LLOYXRK3 = SIN_PERIODIC_PI;;
let LLOYXRK4 = COS_PERIODIC_PI;;
let LLOYXRK5 = SIN_PERIODIC;;
let LLOYXRK6 = COS_PERIODIC;;
let LLOYXRK = [LLOYXRK1;LLOYXRK2;LLOYXRK3;LLOYXRK4;LLOYXRK5;LLOYXRK6];;

(* sin non-negative *)
let WIBGJRR = SIN_POS_PI_LE;;

(* definition label{def:tan} *)
 let BIRXGXP = tan ;;

(* Lemma label{lemma:tan-add} *)
let KWYPRWZ = TAN_ADD;;

(* Lemma label{lemma:tan-pi4} *)
let KSQDZSF = TAN_PI4;;

(* tan increasing and one-to-one *)
let UTNKIAC = TAN_MONO_LT;;

let RIQVMHH1 = atn;;
let RIQVMHH2 =  ATN_BOUNDS ;;
let RIQVMHH=[RIQVMHH1;RIQVMHH2];;


let EWITKLU  = ATN_TAN ;;

let YTXXLRB = ATN_1 ;;

let OKENMAM= HAS_REAL_DERIVATIVE_ATN;;


let LQCXGZX = ATN_MONO_LT_EQ ;;

(* atan2 *)
let GYKGARD = atn2;;
let QZTBJMH1 = acs;;
let QZTBJMH2 = COS_ACS;;
let QZTBJMH3 = ACS_COS;;
let QZTBJMH = [ QZTBJMH1; QZTBJMH2; QZTBJMH3];;
let FMGMALU = SIN_ACS;;
let OUIJTWY = acs_atn2 ;;
let asn = asn;;


(* VECTOR GEOMETRY *)

let KRZJIAD = (`:real^N`,`v$i`,`vec 0`);;

let WHIAXXD1 = [`(x:real^3) + (y:real^3)`;`(x:real^3) - (x:real^3)`;
  `-- (x:real^3)`;`t % (x:real^3)`];;
let WHIAXXD2 = VECTOR_ADD_ASSOC;;
let WHIAXXD3 = VECTOR_ADD_SYM;;
let WHIAXXD = ( WHIAXXD1, WHIAXXD2, WHIAXXD3);;


let VFPCZBI = [`(x:real^3) dot (y:real^3)`];;

let XHVXJVB = vector_norm;;


(*CAUCHY SCHWARZ Lemma label{} *)
let JJKJALK = NORM_CAUCHY_SCHWARZ ;;


(*TRIANGLE INEQ  Lemma label{} *)
let OIPLPTM1 = NORM_TRIANGLE ;;
let OIPLPTM2 = NORM_TRIANGLE_EQ ;;
let OIPLPTM = [OIPLPTM1;OIPLPTM2];;

(* AFFINE GEOMETRY *)

let KVLZSAQ1 = AFFINE;;
let KVLZSAQ2 = aff;;  (* deprecated *)
let KVLZSAQ = [KVLZSAQ1;KVLZSAQ2];;

(* see also affsign;; lin_combo;; *)

let BYFLKYM1 = aff;;
let BYFLKYM2 = aff_ge_def;;
let BYFLKYM3 = aff_gt_def;;
let BYFLKYM4 = aff_lt_def;;
let BYFLKYM5 = aff_le_def;;
let BYFLKYM = [BYFLKYM1;BYFLKYM2;BYFLKYM3;BYFLKYM4;BYFLKYM5];;

let OWECYNV1 = convex;;
let OWECYNV2 = `(hull) convex`;;
let OWECYNV = (OWECYNV1,OWECYNV2);;

let GDCZMLO = CONVEX_HULL_AFF_GE;;

let UIVNNRR1 = prove(
  `!V. (aff_ge V EMPTY = aff_gt V EMPTY)`,
  REWRITE_TAC[aff_ge_def;aff_gt_def;affsign]  THEN
  STRIP_TAC THEN 
  ONCE_REWRITE_TAC[FUN_EQ_THM] THEN
  REWRITE_TAC[affsign;elimin NOT_IN_EMPTY]
);;

let UIVNNRR2 = AFF_GT_EQ_AFFINE_HULL;;
let UIVNNRR = [UIVNNRR1;UIVNNRR2];;

let LLOUBAX = cone ;;
let SWKFLBJ1 = line ;;
let SWKFLBJ2 = collinear ;;
let parallel = define `parallel (v:real^N) w = collinear {(vec 0),v,w}`;;
let SWKFLBJ3 = parallel;;
let  SWKFLBJ = [ SWKFLBJ1; SWKFLBJ2; SWKFLBJ3];;

let JLWZFBH1 = plane ;;
let JLWZFBH2 = closed_half_plane;;
let JLWZFBH3 = open_half_plane;;
let  JLWZFBH4  = coplanar ;;
let JLWZFBH = [JLWZFBH1;JLWZFBH2;JLWZFBH3;JLWZFBH4];;

let OAUVFPS1 = closed_half_space ;;
let OAUVFPS2 = open_half_space ;;
let OAUVFPS = [OAUVFPS1;OAUVFPS2];;

let AVWKGNB = delta_x;;

let LBEVAKV = DELTA_POS_4POINTS;;
let CTCZHMR = [DELTA_POS_4POINTS;POLFLZY];; (* Delta pos LEG [line 2690;line 3010], *) 


let KZVHHBG = [LTCTBAN;GJWYYPS;GDLRUZB];;

let NUHSVLM = "not found, or rather not loaded, implemented in collect_geom2.hl" ;; 

(* CayleyR results: lines from legacy/collect_geom.ml LEG:
2337/LTCTBAN: ups is leading coeff of quadratic cayleyR
2725/GJWYYPS: discriminant of cayleyR
2894/GDLRUZB: disc(cayleyR)=0 <=> one of tetra are coplanar
3010/NUHSVLM: 5 points in R3 ==> cayleyR = 0

RPFVZDI:  enclosed function defined
*)

let RPFVZDI = "not found, but implemented in enclosed_def.hl ";;


let WZYUXVC = arcV ;;

let ACNBFRL = "not found";; (* arcV atn2 *)

let PQQDENV = ACS_ARCLENGTH;;

let HQTBPCM1 = LAW_OF_COSINES ;;
let HQTBPCM2 = DIST_LAW_OF_COS ;;
let HQTBPCM = [HQTBPCM1;HQTBPCM2];;

(*
UPS_X_POS;;
*)

let OBPIOXD = ups_x;; (* upsilon def *)
let QRAAWFS = [UPS_X_POS;FHFMKIY];;
let IHIQXLM = UPS_X_SQUARES;; (* upsilon factors *)

let UKBAHKV = VECTOR_LAW_OF_SINES ;; (* slightly different from book *)

let GVWTZKY = "not found";; (* arc, atn2 *)


(* cross product something *)
let FCUAGA = cross;;
let KVVWPNA = NORM_CROSS ;; (* norm cross and ups, combine with UKBAHKV *)

(* Lemma label{} *)
(* cross product order and distribution with dot product *)
let BKMUSOX1 = CROSS_SKEW ;;
let BKMUSOX2 = CROSS_TRIPLE ;;
let  BKMUSOX = [ BKMUSOX1; BKMUSOX2];;

(* Definition label{def:dih} *)
let dihV = dihV ;;

let RLXWSTK = RLXWSTK;;

let NLVWBBW = NLVWBBW;;  

let OJEKOJF = OJEKOJF;; 

(* let JLPSDHF = euler_triangle ;; *) 


let KEITDWB = ARCV_INEQUALTY ;;
let FGNMPAV = FGNMPAV ;;

let FEVNANL = [atn2_spec;ATAN2_EXISTS];;

let AXBTGQX = orthonormal;;  (* much more has been proved about orthonormal vectors *)

let QAUQIEC = "not found, adapted orthonormization ";;

let EYFCXPP = EYFCXPP;;  (* see also CYLINDER_CORDINATE *)

let CYLINDER_CORDINATE = CYLINDER_CORDINATE;;

let azim = azim ;;  

let QQZKTXU = QQZKTXU;;

(* JBDNJJB;; not done, Truong claims a proof. *)

(* zenith angle *)

let QAFHJNM =QAFHJNM;;
let XPHCPNY = SPHERICAL_COORDINATES ;;

(* Cycle *)

let TNZQDCX = polar_cycle;;
let PDPFQUK = PDPFQUK;;
let ISRTTNZ = ISRTTNZ;;
let KFKHLWK = cyclic_set;;
let cyclic_set = cyclic_set ;;
let YESEEWW = azim_cycle;;
let NLOFMTR = "not found, of doubtful use";;
let YVREJIS = YVREJIS;;
let ULEKUUB = "not found, fan version given in fan directory";;

(* spherical triangle inequality *)

let KEITDWB = KEITDWB;;
let FGNMPAV = FGNMPAV;;
