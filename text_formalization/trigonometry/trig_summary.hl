needs "trigonometry/trig1.ml";;
needs "trigonometry/trig2.ml";;


(* summary of the trig chapter *)
(* everything labeled definition or lemma *)
(* where possible, guids from the pdf were associated with the HOL functions.  in some cases, there seemed to be no function associated with the guid, so the string was commented out.  in some cases, a lemma or definition was labeled, but had neither a guid nor a function; these are also included.  if no label was assigned in the tex file, there's nothing between the label{} *)


(* The definition of cosine and sine are defined in HOL Light through complex analysis 
rather than the real power series.  Thus, these definitions differ from the text *)

let FOYTTIX1 = cos;;
let FOYTTIX2 = sin;;


(* definition label{eqn:cos0} *)
let SIN_0 = SIN_0 ;;
let YIXJNJQ1 = SIN_0;;


(* definition label{eqn:cos0} *)
let COS_0 = COS_0;;
let YIXJNJQ2 = COS_0;;
let YIXJNJQ = [YIXJNJQ1;YIXJNJQ2];;


(* Lemma label{lemma:circle} *)
let WPMXVYZ = SIN_CIRCLE;; 

(* Lemma label{lemma:sin-add}  *)
let WNYVJPE1 = SIN_ADD;;

(* Lemma label{lemma:sin-add} *)
let WNYVJPE2 = COS_ADD;;
let WNYVJPE = [WNYVJPE1;WNYVJPE2];;


(* Lemma label{lemma:cos-neg} *)
let KGLLRQT1 = COS_NEG;;

(* Lemma label{lemma:sin-neg} *)
let KGLLRQT2 = SIN_NEG;;
let KGLLRQT = [KGLLRQT1;KGLLRQT2];;

(* cos(pi/2) = 0 *)
let CFXEKKP1 =  COS_PI2;;
let CFXEKKP2 =  COS_POS_PI2;;


(* This is combined between two lemmas *)
let ZSKECZV = COS_POS_PI_LE;;

(* Lemma label{lemma:sin-pi2} *)
let CPIREMF1 = SIN_PI2;;
let CPIREMF2 = SIN_POS_PI_LE;;
let CPIREMF = [CPIREMF1;CPIREMF2];;

(* Lemma label{lemma:cos-sin} *)
let SCEZKRH1 = GSYM COS_SIN;;
let SCEZKRH2 = GSYM SIN_COS;;

let SCEZKRH = [SCEZKRH1;SCEZKRH2];;

let WIBGJRR = SIN_POS_PI_LE;;

let LLOYXRK1 = prove(`!x. cos(pi/ &2 + x) = -- (sin x)`,
   REWRITE_TAC[REAL_ARITH `x + y = x - (-- y)`;GSYM SIN_COS;SIN_NEG]);;
let LLOYXRK2 = prove(`!x. sin(pi/ &2 + x) = cos x`,
   REWRITE_TAC[REAL_ARITH `x + y = x - (-- y)`;GSYM COS_SIN;COS_NEG]);;
let LLOYXRK3 = SIN_PERIODIC_PI;;
let LLOYXRK4 = COS_PERIODIC_PI;;
let LLOYXRK5 = SIN_PERIODIC;;
let LLOYXRK6 = COS_PERIODIC;;
let LLOYXRK = [LLOYXRK1;LLOYXRK2;LLOYXRK3;LLOYXRK4;LLOYXRK5;LLOYXRK6];;

(* sin non-negative *)

let WIBGJRR = SIN_POS_PI_LE;;

(* definition label{def:tan} *)
 let BIRXGXP = tan ;;

(* Lemma label{lemma:tan-add} *)
let KWYPRWZ = TAN_ADD;;

(* Lemma label{lemma:tan-pi4} *)
let KSQDZSF = TAN_PI4;;

(* tan increasing and one-to-one *)
let UTNKIAC = TAN_MONO_LT;;

let RIQVMHH1 = atn;;
let RIQVMHH2 =  ATN_BOUNDS ;;
let RIQVMHH=[RIQVMHH1;RIQVMHH2];;


(* Definition label{} *)
let EWITKLU  = ATN_TAN ;;

(* Definition label{} *)
let YTXXLRB = ATN_1 ;;

let OKENMAM= HAS_REAL_DERIVATIVE_ATN;;


(* Definition label{} *)
let LQCXGZX = ATN_MONO_LT_EQ ;;


(* atan2 *)
let GYKGARD = atn2;;

(* Definition label{def:arccos} *)
let QZTBJMH1 = acs;;

(* Definition label{def:arccos} *)
let QZTBJMH2 = COS_ACS;;


(* Definition label{def:arccos} *)
let QZTBJMH3 = ACS_COS;;

let QZTBJMH = [ QZTBJMH1; QZTBJMH2; QZTBJMH3];;

(* Lemma label{lemma:sin-arccos} *)
let FMGMALU = SIN_ACS;;

(* Lemma label{lemma:arccos-arctan} *)
let OUIJTWY = acs_atn2 ;;

(* Definition label{def:arcsin}, not used. *)
let asn = asn;;


(* VECTOR GEOMETRY *)

let KRZJIAD = (`:real^N`,`v$i`,`vec 0`);;

let WHIAXXD1 = [`(x:real^3) + (y:real^3)`;`(x:real^3) - (x:real^3)`;
  `-- (x:real^3)`;`t % (x:real^3)`];;
let WHIAXXD2 = VECTOR_ADD_ASSOC;;
let WHIAXXD3 = VECTOR_ADD_SYM;;
let WHIAXXD = ( WHIAXXD1, WHIAXXD2, WHIAXXD3);;


let VFPCZBI = [`(x:real^3) dot (y:real^3)`];;

let XHVXJVB = vector_norm;;


(*CAUCHY SCHWARZ Lemma label{} *)
let JJKJALK = NORM_CAUCHY_SCHWARZ ;;


(*TRIANGLE INEQ  Lemma label{} *)
let OIPLPTM1 = NORM_TRIANGLE ;;
let OIPLPTM2 = NORM_TRIANGLE_EQ ;;
let OIPLPTM = [OIPLPTM1;OIPLPTM2];;

(*
(* Definition label{def:delta} *)
let delta_x = delta_x ;;

(* Definition label{def:aff} *)
let aff = aff ;;
*)

(* AFFINE GEOMETRY *)

(* Definition label{} *)

(* The HOL Light definition of affine allows all finite linear combinations *)
let KVLZSAQ1 = AFFINE;;
let KVLZSAQ2 = aff;;  (* deprecated *)
let KVLZSAQ = [KVLZSAQ1;KVLZSAQ2];;

affsign;;
lin_combo;;
let BYFLKYM1 = aff;;
let BYFLKYM2 = aff_ge_def;;
let BYFLKYM3 = aff_gt_def;;
let BYFLKYM4 = aff_lt_def;;
let BYFLKYM5 = aff_le_def;;
let BYFLKYM = [BYFLKYM1;BYFLKYM2;BYFLKYM3;BYFLKYM4;BYFLKYM5];;


let OWECYNV1 = convex;;
let OWECYNV2 = `(hull) convex`;;
let OWECYNV = (OWECYNV1,OWECYNV2);;

let GDCZMLO = CONVEX_HULL_AFF_GE;;

let UIVNNRR1 = prove(
  `!V. (aff_ge V EMPTY = aff_gt V EMPTY)`,
  REWRITE_TAC[aff_ge_def;aff_gt_def;affsign]  THEN
  STRIP_TAC THEN 
  ONCE_REWRITE_TAC[FUN_EQ_THM] THEN
  REWRITE_TAC[affsign;elimin NOT_IN_EMPTY]
);;

let UIVNNRR2 = AFF_GT_EQ_AFFINE_HULL;;
let UIVNNRR = [UIVNNRR1;UIVNNRR2];;

let LLOUBAX = cone ;;


let SWKFLBJ1 = line ;;
let SWKFLBJ2 = collinear ;;
let parallel = define `parallel (v:real^N) w = collinear {(vec 0),v,w}`;;
let SWKFLBJ3 = parallel;;
let  SWKFLBJ = [ SWKFLBJ1; SWKFLBJ2; SWKFLBJ3];;


let JLWZFBH1 = plane ;;
let JLWZFBH2 = closed_half_plane;;
let JLWZFBH3 = open_half_plane;;
let  JLWZFBH4  = coplanar ;;
let JLWZFBH = [JLWZFBH1;JLWZFBH2;JLWZFBH3;JLWZFBH4];;

(* XX to here *)
(* Definition label{} *)
let closed_half_space = closed_half_space ;;
let open_half_space = open_half_space ;;

(* Definition label{def:angle} *)
let arcV = arcV ;;

(* Lemma label{} *)
let HQTBPCM = LAW_OF_COSINES ;;

(* Lemma label{} *)
let UKBAHKV = LAW_OF_SINES ;;

(* Lemma label{} *)
(* cross product something *)
let KVVWPNA = NORM_CROSS ;;

(* Lemma label{} *)
(* cross product order and distribution with dot product *)
let BKMUSOX1 = CROSS_SKEW ;;
let BKMUSOX2 = CROSS_TRIPLE ;;

(* Definition label{def:dih} *)
let dihV = dihV ;;

(* Lemma label{lemma:sloc} *)
(* let RLXWSTK = spherical_loc ;; *) (* Trigsig *)

(* Lemma label{dihform} *)
(* let OJEKOJF = dih_formula ;;*)  (* Trigsig *)

(* Lemma label{} *)
(* let NLVWBBW = spherical_loc2 ;; *) (* Trigsig *)

(* Lemma label{lemma:euler} *)
(* let JLPSDHF = euler_triangle ;; *) (* Trigsig *)

(* Lemma label{lemma:sph-tri-ineq} *)
let KEITDWB = ARCV_INEQUALTY ;;

(* Lemma label{lemma:sph-tri-multi} *)
let FGNMPAV = FGNMPAV ;;

(* Lemma label{} *)
(* Lexell's Thm *)
(* hasn't been formalized *)
(* let UWIPRDV ;; *)

(* Lemma label{} *)
(* fix one point on the unit sphere with antipodal point... *)
(* not part of project x_x *)
(* let ZHHSGTF ;; *)

(* Lemma label{lemma:ngon} *)
(* hasn't been done *)
(* let GOTCJAH ;; *)

(* Lemma label{lemma:ngon-area} *)
(* hasn't been done *)
(* let BBEVFIC ;; *)

(* Lemma label{lemma:polar2} *)
(* I don't know what I'm doing; check this! *)
(* let PDPFQUK = thetaij ;; *) (* Trigsig *)

(* Lemma label{lemma:polar-sum} *)
(* I don't know what I'm doing; check this! *)
(* let ISRTTNZ = thetapq_wind ;; *) (* Trigsig *)

(* Definition label{def:azimuth} *)
(* cthulhu > shoggoth > azimuth *)

(* Lemma label{} *)
(* let QAFHJNM = zenith ;; *) (* Trigsig *)

(* Lemma label{} *)
(* check this *)
(* let EYFCXPP = polar_coord_zenith ;; *)  (* Trigsig *)

(* Definition label{} *)
let azim = azim ;;  

(* Lemma label{lemma:sph} *)
let XPHCPNY = SPHERICAL_COORDINATES ;;

(* Definition label{def:sph} *)

(* Lemma label{lemma:polar-gen} *)
(* let YBXRVTS = polar_coord_zenith ;; *) (* Trigsig *)

(* Definition label{def:polar} *)
(* polar_c is defined in sphere.hl but that section of the file is commented out *)

(* Definition label{} *)
let cyclic_set = cyclic_set ;;

(* Lemma label{} *)
(* let NLOFMTR ;; *)
(* the closest thing I could find was azim_pair_t from trig.ml *)

(* Lemma label{} *)
(* let YVREJIS ;; *)

(* Lemma label{lemma:2pi-sum} *)
(* let ULEKUUB ;; *)

(* Lemma label{lemma:dih-azim} *)
(* let QQZKTXU ;; *)

(* Definition label{def:arcVarc_t} *)
(* let arcVarc_t = arcVarc_t ;; *)
