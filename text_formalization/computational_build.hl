(* ========================================================================== *)
(* FLYSPECK - CODE BUILD                                                      *)
(*                                                                            *)
(* Chapter: All Chapters                                                      *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2012-04-12                                                           *)
(* ========================================================================== *)


(* Build of the computational parts of the Flyspeck Project *)

flyspeck_needs "strictbuild.hl";;
flyspeck_needs "general/flyspeck_lib.hl";;

(* Tikz *)
flyspeck_needs  "../kepler_tex/tikz/tikz.ml";;

(* graph generator *)
flyspeck_needs ("/../graph_generator/graph_control.hl");;

(* glpk *)
flyspeck_needs "nonlinear/parse_ineq.hl";;
flyspeck_needs "../glpk/glpk_link.ml";;
flyspeck_needs "../glpk/minorlp/tame_table.ml";;
flyspeck_needs "../glpk/minorlp/OXLZLEZ.ml";;
flyspeck_needs "../glpk/tame_archive/lpproc.ml";;
flyspeck_needs "../glpk/sphere.ml";;
flyspeck_needs "../glpk/tame_archive/hard_lp.ml";;
flyspeck_needs "../glpk/tame_archive/scaffolding.hl";;

flyspeck_needs "../glpk/tame_archive/build_lp.hl";;

(* nonlinear inequalities *)

flyspeck_needs "nonlinear/check_completeness.hl";;

module Computational_build = struct

  open Flyspeck_lib;;

(* tex generation Tikz figures. /tmp/x.txt *)

  let tikz_out = Tikz.execute();;

(* graph generator (informal java) *)

  let java_found = exists_pgm "java";;


  let graph_control_out =    Graph_control.execute();;

(* run on April 13, 2012.  Output saved to string_archive.txt *)

(* glpk (informal) *)

  let glpsol_found = exists_pgm "glpsol";;

(* tests consistency of lp computed b table with values in graph_control.flyspeck_properties *)
  let tame_table_out = Tame_table.execute();;  
  let oxlzlez_informal_out = Oxlzlez_informal.execute();;
  let build_lp_out = Build_lp.execute();;

(* cfsqp (informal) *)

(* returns list that fail to compile or that are negative *)
  let cfsqp_out = Scripts.execute_cfsqp();;  


(* nonlinear (informal) *)

  let interval_out = Scripts.execute_interval();;

  let check_completeness_out = Check_completeness.execute();;

 end;;

