(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module Yxionxl = struct


open Polyhedron;;
open Sphere;;
open Topology;;		
open Fan_misc;;
open Planarity;; 
open Conforming;;
open Hypermap;;
open Fan;;
open Topology;;
open Wrgcvdr_cizmrrh;;
open Local_lemmas;;
open Collect_geom;;
open Dih2k_hypermap;;
open Wjscpro;;
open Tecoxbm;;
open Hdplygy;;
open Nkezbfc_local;;
open Flyspeck_constants;;
open Gbycpxs;;
open Pcrttid;;
open Local_lemmas1;;
open Pack_defs;;

open Hales_tactic;;

open Appendix;;





open Hypermap;;
open Fan;;
open Wrgcvdr_cizmrrh;;
open Local_lemmas;;
open Flyspeck_constants;;
open Pack_defs;;

open Hales_tactic;;

open Appendix;;


open Zithlqn;;


open Xwitccn;;

open Ayqjtmd;;

open Jkqewgv;;


open Mtuwlun;;

open Uxckfpe;;
open Sgtrnaf;;




let TRANSFER_SUBSET_BB=prove_by_refinement(
`is_scs_v39 s /\ is_scs_v39 t/\ scs_k_v39 t= scs_k_v39 s/\
  transfer_v39 s t /\ BBs_v39 s ww
 ==> BBs_v39 t ww`,
[REWRITE_TAC[transfer_v39;scs_arrow_v39;IN_SING;LET_DEF;LET_END_DEF;unadorned_v39; BBs_v39]
THEN REPEAT RESA_TAC;

REPLICATE_TAC 1(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 7(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 3(POP_ASSUM MP_TAC)
THEN REAL_ARITH_TAC;

REPLICATE_TAC 1(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 6(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 3(POP_ASSUM MP_TAC)
THEN REAL_ARITH_TAC;

REPLICATE_TAC 1(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 7(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 3(POP_ASSUM MP_TAC)
THEN REAL_ARITH_TAC;

REPLICATE_TAC 1(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 6(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`i:num`;`j:num`])
THEN REPLICATE_TAC 3(POP_ASSUM MP_TAC)
THEN REAL_ARITH_TAC]);;



let DSV_LE_DSV_TRANSFER=prove_by_refinement(
`is_scs_v39 s /\ is_scs_v39 t/\ scs_k_v39 t= scs_k_v39 s/\
  transfer_v39 s t /\ BBs_v39 s vv
==> dsv_v39 s vv <= dsv_v39  t vv`,
[
REWRITE_TAC[transfer_v39;scs_arrow_v39;IN_SING;LET_DEF;LET_END_DEF;unadorned_v39; BBs_v39;dsv_v39]
THEN REPEAT RESA_TAC;

ASM_TAC
THEN MP_TAC(SET_RULE`is_ear_v39 s \/ ~(is_ear_v39 s)`)
THEN RESA_TAC;

REPEAT DISCH_TAC
THEN REPLICATE_TAC (17-4)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN REWRITE_TAC[SYM th])
THEN ASM_REWRITE_TAC[]
THEN REAL_ARITH_TAC;

REPEAT DISCH_TAC
THEN ASM_REWRITE_TAC[]
THEN SUBGOAL_THEN`
sum {i | i < scs_k_v39 s /\ scs_J_v39 t i (SUC i)}
     (\i. cstab - dist ((vv:num->real^3) i,vv (SUC i)))
<= sum {i | i < scs_k_v39 s /\ scs_J_v39 s i (SUC i)}
     (\i. cstab - dist (vv i,vv (SUC i)))`ASSUME_TAC;

MATCH_MP_TAC SUM_SUBSET_SIMPLE
THEN REPEAT STRIP_TAC;

MATCH_MP_TAC FINITE_SUBSET
THEN EXISTS_TAC`0.. (scs_k_v39 s)`
THEN REWRITE_TAC[FINITE_NUMSEG;SUBSET;IN_ELIM_THM;IN_NUMSEG]
THEN ARITH_TAC;

REWRITE_TAC[SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
THEN REPLICATE_TAC (6)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`]);

POP_ASSUM MP_TAC
THEN REWRITE_TAC[DIFF;IN_ELIM_THM]
THEN  STRIP_TAC
THEN REPLICATE_TAC (19-15)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN ASM_TAC
THEN REWRITE_TAC[is_scs_v39]
THEN REPEAT STRIP_TAC
THEN REPLICATE_TAC (58-19)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN REAL_ARITH_TAC;

SUBGOAL_THEN`
&0 <= sum {i | i < scs_k_v39 s /\ scs_J_v39 t i (SUC i)}
     (\i. cstab - dist ((vv:num->real^3) i,vv (SUC i)))`ASSUME_TAC;

MATCH_MP_TAC SUM_POS_LE
THEN REPEAT STRIP_TAC;

MATCH_MP_TAC FINITE_SUBSET
THEN EXISTS_TAC`0.. (scs_k_v39 s)`
THEN REWRITE_TAC[FINITE_NUMSEG;SUBSET;IN_ELIM_THM;IN_NUMSEG]
THEN ARITH_TAC;

POP_ASSUM MP_TAC
THEN REWRITE_TAC[DIFF;IN_ELIM_THM]
THEN  STRIP_TAC
THEN REPLICATE_TAC (19-15)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN ASM_TAC
THEN REWRITE_TAC[is_scs_v39]
THEN REPEAT STRIP_TAC
THEN REPLICATE_TAC (58-50)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN REPLICATE_TAC (57-19)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN REAL_ARITH_TAC;

REPLICATE_TAC (18-9)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MP_TAC th)
THEN POP_ASSUM MP_TAC
THEN MP_TAC(SET_RULE`is_ear_v39 t \/ ~(is_ear_v39 t)`)
THEN RESA_TAC;

REPEAT STRIP_TAC
THEN MATCH_MP_TAC(REAL_ARITH`a<= a1 /\ b1<= b/\ &0<= b1 ==> a+ #0.1 * -- &1 * b <= a1+ #0.1 * &1 * b1`)
THEN ASM_REWRITE_TAC[];

REPEAT STRIP_TAC
THEN MATCH_MP_TAC(REAL_ARITH`a<= a1 /\ b1<= b/\ &0<= b1 ==> a+ #0.1 * -- &1 * b <= a1+ #0.1 * -- &1 * b1`)
THEN ASM_REWRITE_TAC[];

ASM_TAC
THEN MP_TAC(SET_RULE`is_ear_v39 s \/ ~(is_ear_v39 s)`)
THEN RESA_TAC;

REPEAT DISCH_TAC
THEN REPLICATE_TAC (17-4)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN REWRITE_TAC[SYM th])
THEN ASM_REWRITE_TAC[]
THEN REAL_ARITH_TAC;

REPEAT DISCH_TAC
THEN ASM_REWRITE_TAC[]
THEN SUBGOAL_THEN`
sum {i | i < scs_k_v39 s /\ scs_J_v39 t i (SUC i)}
     (\i. cstab - dist ((vv:num->real^3) i,vv (SUC i)))
<= sum {i | i < scs_k_v39 s /\ scs_J_v39 s i (SUC i)}
     (\i. cstab - dist (vv i,vv (SUC i)))`ASSUME_TAC;


MATCH_MP_TAC SUM_SUBSET_SIMPLE
THEN REPEAT STRIP_TAC;


MATCH_MP_TAC FINITE_SUBSET
THEN EXISTS_TAC`0.. (scs_k_v39 s)`
THEN REWRITE_TAC[FINITE_NUMSEG;SUBSET;IN_ELIM_THM;IN_NUMSEG]
THEN ARITH_TAC;

REWRITE_TAC[SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
THEN REPLICATE_TAC (6)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`]);

POP_ASSUM MP_TAC
THEN REWRITE_TAC[DIFF;IN_ELIM_THM]
THEN  STRIP_TAC
THEN REPLICATE_TAC (19-15)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN ASM_TAC
THEN REWRITE_TAC[is_scs_v39]
THEN REPEAT STRIP_TAC
THEN REPLICATE_TAC (58-19)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN REAL_ARITH_TAC;

SUBGOAL_THEN`
&0 <= sum {i | i < scs_k_v39 s /\ scs_J_v39 t i (SUC i)}
     (\i. cstab - dist ((vv:num->real^3) i,vv (SUC i)))`ASSUME_TAC;

MATCH_MP_TAC SUM_POS_LE
THEN REPEAT STRIP_TAC;

MATCH_MP_TAC FINITE_SUBSET
THEN EXISTS_TAC`0.. (scs_k_v39 s)`
THEN REWRITE_TAC[FINITE_NUMSEG;SUBSET;IN_ELIM_THM;IN_NUMSEG]
THEN ARITH_TAC;

POP_ASSUM MP_TAC
THEN REWRITE_TAC[DIFF;IN_ELIM_THM]
THEN  STRIP_TAC
THEN REPLICATE_TAC (19-15)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN ASM_TAC
THEN REWRITE_TAC[is_scs_v39]
THEN REPEAT STRIP_TAC
THEN REPLICATE_TAC (58-50)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN REPLICATE_TAC (57-19)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN MRESA_TAC th[`x:num`;`SUC x`])
THEN REAL_ARITH_TAC;

REPLICATE_TAC (18-9)(POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> REPEAT STRIP_TAC
THEN MP_TAC th)
THEN POP_ASSUM MP_TAC
THEN MP_TAC(SET_RULE`is_ear_v39 t \/ ~(is_ear_v39 t)`)
THEN RESA_TAC;

REPEAT STRIP_TAC
THEN MATCH_MP_TAC(REAL_ARITH`a<= a1 /\ b1<= b/\ &0<= b1 ==> a+ #0.1 * -- &1 * b <= a1+ #0.1 * &1 * b1`)
THEN ASM_REWRITE_TAC[];

REPEAT STRIP_TAC
THEN MATCH_MP_TAC(REAL_ARITH`a<= a1 /\ b1<= b/\ &0<= b1 ==> a+ #0.1 * -- &1 * b <= a1+ #0.1 * -- &1 * b1`)
THEN ASM_REWRITE_TAC[]]);;




let TAUSTAR_LE_TAUSTAR_TRANSFER=prove(
`is_scs_v39 s /\ is_scs_v39 t/\ scs_k_v39 t= scs_k_v39 s/\
  transfer_v39 s t /\ BBs_v39 s vv
==> taustar_v39 t vv <= taustar_v39  s vv`,
STRIP_TAC
THEN MP_TAC DSV_LE_DSV_TRANSFER
THEN RESA_TAC
THEN REWRITE_TAC[taustar_v39;LET_DEF;LET_END_DEF]
THEN ASM_TAC
THEN REWRITE_TAC[transfer_v39;scs_arrow_v39;IN_SING;LET_DEF;LET_END_DEF;unadorned_v39; BBs_v39;taustar_v39]
THEN REPEAT DISCH_TAC
THEN POP_ASSUM MP_TAC
THEN MP_TAC(SET_RULE`scs_k_v39 s <= 3 \/ ~(scs_k_v39 s <= 3)`)
THEN RESA_TAC
THEN REAL_ARITH_TAC);;


let TRANSTER_IS_UNADORNED=prove(`transfer_v39 s t
==> unadorned_v39 t`,
REWRITE_TAC[transfer_v39]
THEN RESA_TAC);;


let NOT_EMPETY_MMS_TRANSFER=prove(`is_scs_v39 s /\ is_scs_v39 t/\ scs_k_v39 t= scs_k_v39 s/\
  transfer_v39 s t /\ MMs_v39 s vv
==> ?ww. MMs_v39 t ww`,
REWRITE_TAC[MMs_v39;BBprime2_v39;BBprime_v39]
THEN REPEAT STRIP_TAC
THEN MRESA_TAC(GEN_ALL TRANSFER_SUBSET_BB)[`s:scs_v39`;`t:scs_v39`;`vv:num->real^3`]
THEN MP_TAC TAUSTAR_LE_TAUSTAR_TRANSFER
THEN RESA_TAC
THEN MP_TAC(REAL_ARITH`taustar_v39 t vv <= taustar_v39 s vv/\ taustar_v39 s vv< &0 ==> taustar_v39 t vv < &0`)
THEN RESA_TAC
THEN MP_TAC TRANSTER_IS_UNADORNED
THEN RESA_TAC
THEN MRESAL_TAC SGTRNAF[`t:scs_v39`;`vv:num->real^3`][SET_RULE`~(A={})<=> ?a. a IN A`;IN;BBprime_v39;BBprime2_v39;MMs_v39]);;





let YXIONXL1 = prove_by_refinement(`!s t.
  is_scs_v39 s /\ is_scs_v39 t/\
  transfer_v39 s t ==> scs_arrow_v39 {s} {t}`,
[
REWRITE_TAC[transfer_v39;scs_arrow_v39;IN_SING;LET_DEF;LET_END_DEF;unadorned_v39]
THEN REPEAT STRIP_TAC;
ASM_REWRITE_TAC[];
DISJ_CASES_TAC(SET_RULE`(!s'. s' = s ==> MMs_v39 s' = {}) \/ ~((!s'. s' = s ==> MMs_v39 s' = {}))`);
ASM_REWRITE_TAC[];
ASM_REWRITE_TAC[]
THEN POP_ASSUM MP_TAC
THEN REWRITE_TAC[NOT_FORALL_THM;NOT_IMP]
THEN REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN RESA_TAC
THEN EXISTS_TAC`t:scs_v39`
THEN ASM_REWRITE_TAC[]
THEN POP_ASSUM MP_TAC
THEN REWRITE_TAC[SET_RULE`~(A={})<=> ?vv. vv IN A`;IN]
THEN STRIP_TAC
THEN MP_TAC NOT_EMPETY_MMS_TRANSFER
THEN RESA_TAC
THEN POP_ASSUM MATCH_MP_TAC
THEN ASM_REWRITE_TAC[transfer_v39;unadorned_v39]]);;


 end;;


(*
let check_completeness_claimA_concl = 
  Ineq.mk_tplate `\x. scs_arrow_v13 (set_of_list x) 
*)




