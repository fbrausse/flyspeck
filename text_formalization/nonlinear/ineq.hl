(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Nonlinear                                                  *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2009-09-04                                                           *)
(* ========================================================================== *)



(* 
File of the nonlinear inequalities to be verified by interval arithmetic.
*)



flyspeck_needs "general/sphere.hl";;
flyspeck_needs "leg/enclosed_def.hl";;



module Ineq (* : Ineq_type *) = struct







(* These inequalities were taken from graph0.mod 
   and crosschecked with lp2009.cc *) 


(* graph0.mod and lp2009.cc inequalities *)


prioritize_real();;

  let all_forall = Sphere.all_forall;;
  let ineq = Sphere.ineq;;
  let taum = Sphere.taum;;
  let dih_y = Sphere.dih_y;;
  let sol_y = Sphere.sol_y;;
  let rhazim = Sphere.rhazim;;
  let delta_y = Sphere.delta_y;;
  let tauq = Sphere.tauq;;

 


(*

(*found in lp2009 but not graph0 *)

let I_3336871894=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( taum y1 y2 y3 y4 y5 y6 >= #0.0)`;;

let I_8880534953=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.52,y5,sqrt8);
      (#2.52,y6,sqrt8)]
( taum y1 y2 y3 y4 y5 y6 -  #0.2759 > #0.0)`;;
*)


(* interval arithmetic bounds DART 3 *)

let I_5735387903=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
   (dih_y y1 y2 y3 y4 y5 y6 > #0.852)`;;
 
let I_5490182221=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
   (dih_y y1 y2 y3 y4 y5 y6 < #1.9)`;;  (* changed from #1.893, thales, 2010-02-28 *)

let I_2570626711=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
   (dih_y y1 y2 y3 y4 y5 y6 > #1.15)`;;


let tame_hypermap_list = 
  let CDTETAT_list = [I_5735387903;I_5490182221;I_2570626711] in
  CDTETAT_list;;


(* test case *)

let I_3296257235=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
 (taum y1 y2 y3 y4 y5 y6 + #0.626 * dih_y y1 y2 y3 y4 y5 y6 - #0.77 > #0.0)`;;

let I_8519146937=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( taum y1 y2 y3 y4 y5 y6 -  #0.259 * dih_y y1 y2 y3 y4 y5 y6 + #0.32 > #0.0)`;;

let I_4667071578=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( taum y1 y2 y3 y4 y5 y6 -  #0.507 * dih_y y1 y2 y3 y4 y5 y6 + #0.724 > #0.0)`;;

let I_1395142356=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( taum y1 y2 y3 y4 y5 y6 + #0.001 - #0.18 * (y1 + y2 + y3 - #6.0) -
  #0.125 * (y4 + y5 + y6 - #6.0) > #0.0)`;;

let I_7394240696=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( sol_y y1 y2 y3 y4 y5 y6 - #0.55125 - #0.196 * (y4 + y5 + y6 - #6.0) -
  #0.38 * (y1 + y2 + y3 - #6.0) > #0.0)`;;

let I_7726998381=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( -- sol_y y1 y2 y3 y4 y5 y6 + #0.5513 + 
  #0.3232 * (y4 + y5 + y6 - #6.0) -
  #0.151 * (y1 + y2 + y3 - #6.0)  > #0.0)`;;


let I_4047599236=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (dih_y y1 y2 y3 y4 y5 y6) - #1.2308 +  
  (#0.3639 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.235 * (y1 - #2.0)) -(#0.685 * (y4 - #2.0)) > #0.0)`;;


let I_3526497018=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (--dih_y y1 y2 y3 y4 y5 y6) + #1.231 - 
  (#0.152 * (y2 + y3 + y5 + y6 - #8.0))+
  (#0.5 * (y1 - #2.0)) + (#0.773 * (y4 - #2.0))> #0.0)`;;


let I_5957966880=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (rhazim y1 y2 y3 y4 y5 y6) - #1.2308 +  
  (#0.3639 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.6 * (y1 - #2.0)) -(#0.685 * (y4 - #2.0)) > #0.0)`;;


(* interval arithmetic bounds DART4 *)

let I_7043724150=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#4.37);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52);
      (#2.0,y7,#2.52);
      (#2.0,y8,#2.52);
      (#2.0,y9,#2.52)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 + #4.72 * dih_y y1 y2 y3 y4 y5 y6 - #6.248 > #0.0) \/
( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #2.52 ))`;;

let I_6944699408=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#4.37);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52);
      (#2.0,y7,#2.52);
      (#2.0,y8,#2.52);
      (#2.0,y9,#2.52)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 + #0.972 * dih_y y1 y2 y3 y4 y5 y6 -  #1.707 > #0.0) \/
( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #2.52 ))`;;


let I_4240815464=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#5.04);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52);
      (#2.0,y7,#2.52);
      (#2.0,y8,#2.52);
      (#2.0,y9,#2.52)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 + #0.7573 *dih_y y1 y2 y3 y4 y5 y6 - #1.4333 > #0.0) \/
( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #2.52 ) \/
( delta_y y1 y2 y3 y4 y5 y6 < &0) \/
( delta_y y7 y2 y3 y4 y8 y9 < &0)) `;;


let I_3862621143=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#5.04);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52);
      (#2.0,y7,#2.52);
      (#2.0,y8,#2.52);
      (#2.0,y9,#2.52)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 - #0.453 * dih_y y1 y2 y3 y4 y5 y6 +  #0.777 > #0.0) \/
( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #2.52 ) \/
( delta_y y1 y2 y3 y4 y5 y6 < &0) \/
( delta_y y7 y2 y3 y4 y8 y9 < &0)) `;;

(*found in lp2009 but not graph0 *)

let I_5464178191=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#5.04);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52);
      (#2.0,y7,#2.52);
      (#2.0,y8,#2.52);
      (#2.0,y9,#2.52)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 - #0.206 > #0.0) \/
( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #2.52 ) \/
( delta_y y1 y2 y3 y4 y5 y6 < &0) \/
( delta_y y7 y2 y3 y4 y8 y9 < &0))`;;

(*more interval arithmetic on nonstandard triangles*)


let I_3020140039=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (dih_y y1 y2 y3 y4 y5 y6) - #1.629 +  
  (#0.402 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.315 * (y1 - #2.0))  > #0.0)`;;

let I_9414951439=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (sqrt8,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (dih_y y1 y2 y3 y4 y5 y6) - #1.91 +  
  (#0.458 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.342 * (y1 - #2.0))  > #0.0)`;;

(*branch flat inequality*)


let I_8248508703=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (taum y1 y2 y3 y4 y5 y6) - #0.1 -  
  (#0.265 * (y5 + y6 - #4.0)) -
  (#0.06 * (y4 - #2.52)) - (#0.16 * (y1 - #2.0)) - 
  (#0.115 * (y2 + y3 - #4.0))  > #0.0)`;;



let I_3318775219=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (dih_y y1 y2 y3 y4 y5 y6) - #1.629 +  
  (#0.414 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.763 * (y4 - #2.52)) - 
  (#0.315 * (y1 - #2.0))  > #0.0)`;;


let I_9922699028=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (--dih_y y1 y2 y3 y4 y5 y6) + #1.6294 -  
  (#0.2213 * (y2 + y3 + y5 + y6 - #8.0)) +
  (#0.913 * (y4 - #2.52)) + 
  (#0.728 * (y1 - #2.0))  > #0.0)`;;


let I_5000076558=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (dih_y y2 y3 y1 y5 y6 y4) - #1.083 +  
  (#0.6365 * (y1 - #2.0)) -
  (#0.198 * (y2 - #2.0)) + 
  (#0.352 * (y3 - #2.0)) + 
  (#0.416 * (y4 - #2.52)) - 
  (#0.66 * (y5 - #2.0)) + 
  (#0.071 * (y6 - #2.0)) > #0.0)`;;


let I_9251360200=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (rhazim y1 y2 y3 y4 y5 y6) - #1.629 -  
  (#0.866 * (y1 - #2.0)) +
  (#0.3805 * (y2 + y3 -  #4.0)) - 
  (#0.841 * (y4 - #2.52)) + 
  (#0.501 * (y5 + y6 -  #4.0))  > #0.0)`;;


let I_9756015945=
 all_forall `ineq
    [(#2.0, y1, #2.52);
      (#2.0, y2, #2.52);
      (#2.0, y3, #2.52);
      (#2.52, y4, sqrt8);
      (#2.0, y5, #2.52);
      (#2.0, y6, #2.52)]
( (rhazim y2 y3 y1 y5 y6 y4) - #1.08 +  
  (#0.6362 * (y1 - #2.0)) -
  (#0.565 * (y2 - #2.0)) + 
  (#0.359 * (y3 - #2.0)) + 
  (#0.416 * (y4 - #2.52)) - 
  (#0.666 * (y5 - #2.0)) + 
  (#0.061 * (y6 - #2.0)) > #0.0)`;;


(*permute the y coordinates so that [i,j] is the apiece dart
y5 is opposite, y6 is other long*)

let I_181212899=
 all_forall `ineq
[
      (#2.0, y1, #2.52);
      (#2.0, y2, #2.52);
      (#2.0, y3, #2.52);
      (#2.0, y4, #2.52);
      (#2.52, y5, sqrt8);
      (#2.52, y6, sqrt8)]
(dih_y y1 y2 y3 y4 y5 y6 - #1.0705 - 
(#0.10 * (y1 - #2.0)) + 
(#0.424 * (y2 - #2.0)) + 
(#0.424 * (y3 - #2.0)) - 
(#5.94 * (y4 - #2.0)) + 
(#0.124 * (y5 - #2.52)) + 
(#0.124 * (y6 - #2.52)) > #0.0)`;;


(* branch APIECE inequality.*)

let I_5760733457=
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4, #2.52);
(#2.52, y5, s8);
(#2.52, y6, s8)]
(dih_y y1 y2 y3 y4 y5 y6 - #1.0705 -( #0.1 * (y1 - #2)) + 
 (#0.424 * (y2 - #2.0)) + 
(#0.424 * (y3 - #2.0)) - 
 (#0.594 * (y4 - #2.0)) + 
(#0.124 * (y5 - #2.52)) + 
(#0.124 * (y6 - #2.52)) > #0.0)`;;



let I_2563100177=
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4, #2.52);
(#2.0, y5, sqrt8);
(#2.0, y6, sqrt8)]
( rhazim y1 y2 y3 y4 y5 y6 - #1.0685 - 
(#0.4635 * (y1 - #2.0)) + 
(#0.424 * (y2 - #2.0)) + 
(#0.424 * (y3 - #2.0)) - 
(#0.594 * (y4 - #2.0)) + 
(#0.124 * (y5 - #2.52)) + 
(#0.124 * (y6 - #2.52)) > #0.0)`;;


let I_7931207804=
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.52, y4, sqrt8);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]
( taum y1 y2 y3 y4 y5 y6 - #0.27 +
(#0.0295 * (y1 - #2.0)) - 
(#0.0778 * (y2 - #2.0)) - 
(#0.0778 * (y3 - #2.0)) - 
(#0.37 * (y4 - #2.0)) - 
(#0.27 * (y5 - #2.52)) - 
(#0.27 * (y6 - #2.52)) > #0.0)`;; 

let I_9225295803= 
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4, #2.25);
(#2.0, y5, #2.25);
(#2.0, y6, #2.25)]
(taum y1 y2 y3 y4 y5 y6 + #0.0034 - 
(#0.166 * (y1 + y2 + y3 - #6.0)) - 
(#0.22 * (y4 + y5 + y6 - #6.0)) > #0.0)`;;

let I_9291937879= 
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4, #2.25);
(#2.0, y5, #2.25);
(#2.0, y6, #2.25)]
(dih_y y1 y2 y3 y4 y5 y6 - #1.23 - 
(#0.235 * (y1 - #2.0)) + 
(#0.362 * (y2 + y3 - #4.0)) - 
(#0.694 * (y4 - #2.0)) + 
(#0.26 * (y5 + y6 - #4.0)) > #0.0)`;;

let I_7761782916= 
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4,#2.52);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]
(taum y1 y2 y3 y4 y5 y6 - #0.05 - (#0.137 * (y1 + y2 + y3 - #6.0)) - (#0.17 * (y4 + y5 + y6 - #6.25)) > #0.0)\/
(y4 + y5 + y6 < #6.25)`;;

let I_4840774900=
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(sqrt8, y4, #3.0);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]
(taum y1 y2 y3 y4 y5 y6 - #0.1054 - 
(#0.14132 * (y1 + (y2 / #2.0) + (y3 / #2.0) - #4.0)) - 
(#0.36499 * (y5 + y6 - #4.0)) > #0.0)`;;


let I_9995621667=
 all_forall `ineq
    [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#3.0,y4,#3.0);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]
( (dih_y y1 y2 y3 y4 y5 y6) - #2.09 +  
  (#0.578 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.54 * (y1 - #2.0))  > #0.0)`;;

(* These are inequalities found in the lp2009.cc file 
   that were not found in the graph0.mod file *)


let I_5769230427=
 all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#3.0,y5,#3.3);
      (#2.0,y6,#2.52)]
( (taum y1 y2 y3 y4 y5 y6) - 
  #0.231 - (#0.622 * (dih_y y1 y2 y3 y4 y5 y6))
  - (#2.09 / #2.0) - ((#0.54 / #2.0) * (y1 - #2.0))
  + (#0.578 * (y2 + y6 - #4.0))  > #0.0)`;;


let I_9229542852 = 
all_forall `ineq
[(#2.0, y1, #2.18);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.0, y4, #2.25);
(#2.0, y5, #2.25);
(#2.0, y6, #2.25)]
(dih_y y1 y2 y3 y4 y5 y6 - #1.230 - 
(#0.2357 * (y1 - #2.0)) + 
(#0.2493 * (y2 + y3 - #4.0)) - 
(#0.682 * (y4 - #2.0)) + 
(#0.3035 * (y5 + y6 - #4.0)) > #0.0)`;;

let I_1550635295= 
all_forall `ineq
[(#2.0, y1, #2.18);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.0, y4, #2.25);
(#2.0, y5, #2.25);
(#2.0, y6, #2.25)]
(--(dih_y y1 y2 y3 y4 y5 y6) + #1.232 + 
(#0.261 * (y1 - #2.0)) - 
(#0.203 * (y2 + y3 - #4.0)) + 
(#0.772 * (y4 - #2.0)) - 
(#0.191 * (y5 + y6 - #4.0)) > #0.0)`;;


let I_4491491732= 
all_forall `ineq
[(#2.0, y1, #2.18);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.0, y4, #2.25);
(#2.0, y5, #2.25);
(#2.0, y6, #2.25)]
(taum y1 y2 y3 y4 y5 y6 + #0.0008 - 
(#0.1631 * (y1 + y2 + y3 - #6.0)) - 
(#0.2127 * (y4 + y5 + y6 - #6.0)) > #0.0)`;;

let I_8282573160= 
all_forall `ineq
[(#2.18, y1, #2.52);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.52, y4, sqrt8);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]
(taum y1 y2 y3 y4 y5 y6 - #0.1413 - 
(#0.214 * (y1 - #2.18)) - 
(#0.1259 * (y2 + y3 - #4.0)) - 
(#0.067 * (y4 - #2.52)) - 
(#0.241 * (y5 + y6 - #4.0)) > #0.0)`;;

let I_8611785756= 
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.0, y4, #2.52);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]
(sol_y y1 y2 y3 y4 y5 y6 - #0.589 + 
(#0.24 * (y1 + y2 + y3 - #6.0)) - 
(#0.16 * (y4 + y5 + y6 - #6.25)) > #0.0) \/
(y4 + y5 + y6 < #6.25)`;;


let I_6224332984= 
all_forall `ineq
[(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4,#2.52);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]
(sol_y y1 y2 y3 y4 y5 y6 - #0.589 + 
(#0.39 * (y1 + y2 + y3 - #6.0)) - 
(#0.235 * (y4 + y5 + y6 - #6.25)) > #0.0) \/
(y4 + y5 + y6 < #6.25)`;;


(* sort the inequalities according to the chapter where they are used *)

let tame_hypermap_list = 
  let CDTETAT_list = [I_5735387903;I_5490182221;I_2570626711] in
  let KCBLRQC_triangle_list = [I_3296257235;I_8519146937;I_4667071578;] in
  let KCBLRQC_quad_list = [I_7043724150;I_6944699408;
   I_4240815464;I_3862621143;I_5464178191;] in
  CDTETAT_list @ KCBLRQC_triangle_list @ KCBLRQC_quad_list;;

let tame_hypermap_calcs = new_definition
  (mk_eq (`tame_hypermap_calcs:bool`,list_mk_conj tame_hypermaplist));;



end;; (* fin *)
