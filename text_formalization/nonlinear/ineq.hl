
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Nonlinear                                                  *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2010-05-30                                                           *)
(* ========================================================================== *)

(* 
File of the nonlinear inequalities to be verified by interval arithmetic.
*)

flyspeck_needs "general/sphere.hl";;
flyspeck_needs "nonlinear/ineqdata3q1h.hl" ;;


type tag = Lp | Lpsymmetry | Clusterlp | Tablelp | Flypaper 
	   | Fejestoth | Strongdodec
  | Cfsqp | Cfsqp_branch of int | Eps of float | Penalty of float*float
  | Further | Tex | Derived of string list | Xconvert | Split of int list 
  | Tprep | Sharp | Deprecated | Onlycheckderiv1negative | Dim_red | Dim_red_backsym 
  | Quad_cluster of float
  | Set_rad2 | Delta126min of float | Delta126max of float | Delta135min of float | Delta135max of float;;

type ineq_datum = 
  { 
    ineq : term;
    id : string;
    doc : string;
    tags : tag list;
  };;

type texmarker = Section | Ineqdoc | Comment;;


module Ineq = struct

open Sphere;;

(* The nonlinear inequality data has become too widely dispersed over
   the project directories.  This file is meant to be the authoritative
   central repository for inequalities.

   Old sources of information (svn 1678 2010-04-26 of NonlinearInequalities.wiki)
   software_guide.tex (svn 1760)
*)


let ineqdoc = ref [];;

let addtex (a,b,c) = (ineqdoc := (a,b,c)::!ineqdoc);;

(* Lp gives an instruction to generate a MathProg inequality for the
   GLPK program to eliminate tame hypermaps.

   Lpsymmetry gives an instruction to generate a second MathProg
   inequality by symmetry.  y2 <-> y3, y5 <-> y6.  The domain must
   already be symmetrical, otherwise an error results.

   Clusterlp means they enter the GLPK calcs for the cluster
   inequality.

   Tablelp means they enter the LP calcs for the A and B tables in
   the definition of Tame h.

   Flypaper means an inequality cited directly in the flypaper
   text.

   Cfsqp means that there is cfsqp nonlinear optimization code to
   test it by gradient descent.

   Cfsqp_branch uses this disjunct as the objective function, the others as constraints.
   The default is disjunct 0.

   Eps is a small epsilon that is added to numerical testing to
   avoid answers neg. by machine eps.

   Penalty implements a penalty method in cfsqp.

   The floats (ub,wt) give the upper bound on the penalty term and its
   weight.

   Further means that it is not part of the Flyspeck project, but
   part of one of the extension theorems: StrongDodec, Fejes
   Toth's contact conjecture, or Musin-Tarasov.

   The TeX flag means that the doc field is Tex'able code (with
   software_guide.tex context).

   Derived means that it is not a primitive inequality, but rather a
   logical consequence of others.

   Xconvert means to use the squared variables "x1...x6" rather than
   "y1..y6" when doing the nonlinear verification.

   Split is an instruction to the nonlinear ineq verification to split
   the indicated variables (at 2 h0).  This is needed on piecewise differentiable
   functions (namely, lmfun) to restrict to differentiable domains.

   Sharp means that equality is attained.

   Fejestoth means that it is part of the proof of the Fejes Toth's contact conjecture,
   but not part of the proof of the Kepler conjecture
   
   Strongdodec means that it is part of the proof of the strong dodec conjecture,
   but not part of the proof of the Kepler conjecture

   Onlycheckderiv1negative means that it is not the function itself that should be
   verified, but only the first derivative of the first conjunct should be checked to 
   be negative.  This is useful in monotonicity results.

   Dim_red means that dimension reduction can be used on a quad cluster.

   Dim_red_backsym means that dimension reduction can be used on a quad cluster in the following
   form x8,x9 are both extremal, if both are as long as possible, then x7 is as short as possible.
   Also x1 is minimal or x5 is minimal (eliminating x6 minimal by a symmetry 5-6,2-3,8-9 ).
   
   Quad_cluster is an ineq on a coupled pair of simplices. The float is the margin value for "breaksapart".

    Set_rad2 means the circumradius can be assumed to be exactly sqrt2.

   Delta126min is a lower bound on delta_x x1 x2 (&2) (&2) (&2) x6

   Delta126max is an upper bound on delta_x x1 x2 (&2) (&2) (&2) x6
   
    Delta135min is a lower bound on delta_x x1 (&2) x3 (&2) x5 (&2).
   
   Delta135max is an upper bound on delta_x x1 (&2) x3 (&2) x5 (&2).

*)




let ineqs = ref ([]:ineq_datum list);;

let add i  = (
  ineqs:= i :: !ineqs; 
  if (List.mem Tex i.tags) then addtex (Ineqdoc,i.id,i.doc) else ()
);;

let remove id = (
   ineqs := filter (fun t -> not(t.id=id)) (!ineqs)
);;

let getexact id = filter (fun t -> (t.id = id)) (!ineqs);;

let getprefix id = filter (fun t -> (String.length id <= String.length t.id) &&
			     (String.sub t.id 0 (String.length id) = id)) (!ineqs);;

let getfield r = filter (fun t ->  mem r t.tags) (!ineqs);;

let do_betas x = all_forall (snd(dest_eq(concl(BETAS_CONV x))));;

let mk_tplate template r = 
  do_betas(list_mk_comb (template, r));;


(**************  DATA SECTION ******************************)

addtex (Section,"Packing -- Marchal Inequality","");;

(*
add
  {
    id= "HJKDESR4"; 
    ineq = (all_forall `ineq
	      [ 
		(#2.0,y1,sqrt8);
		(#2.0,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 marchal_quartic >= &0) \/
                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2))`);
    doc=
      "% Main Marchal Inequality (4 cells). Packing Chapter.
	   % old: \\guid{WJDLOCM} \\guid{XHVKJFS} \\guid{1025009205} 
	   % old: 9373340897; cc:mar; calc:marchal
    If $X$ is a $4$-cell, then $\\gamma(X,M)\\ge 0$. 
    Since $\\eta(2.63,2.63,2)^2 > 2$, we may assume that no two adjacent edges
    have lengths greater than 2.63.  This allows symmetry reductions in the domain
    to three cases:
    (to all edges at most 2.63, a single edge longer than 2.63,opposite edges longer than 2.63).  There should be a single point where the inequality is sharp on each of the three domains: $(2,2,2,2,2,2)$, $(\\sqrt{8},2,2,2,2,2)$, $(\\sqrt{8},2,2,\\sqrt{8},2,2)$.
  Deprecated inequality.  (It was too much work to prove, and it is not needed anyway.)
 ";
     tags = [Flypaper;Tex;Cfsqp;Eps 1.0e-12;Sharp;Deprecated;
	     Derived ["HJKDESR4-D0";"HJKDESR4-D1";"HJKDESR4-D2";"HJKDESR4-D3";"HJKDESR4-D3";"HJKDESR4-D3";]];
  };;
*)

add
  {
    id= "TSKAJXY-TADIAMB";
    ineq = (all_forall `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(&2 * hplus,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      (
                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`);
    doc=      "This is a reduction step for main modified Marchal inequality (for lmfun)";
     tags = [Flypaper;Tex;Cfsqp;Xconvert];
  };;



let TSKAJXY_DERIVED = 
  {
    id= "TSKAJXY-DERIVED"; 
    ineq = (all_forall `ineq
	      [ 
		(#2.0,y1,sqrt8);
		(#2.0,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`);
    doc=      "If a simplex does not have any critical edges then it is non-negative.  This inequality is not quite correct as stated.  It needs to have the condition that there are no critical edges.";
     tags = [Flypaper;Tex;Cfsqp;Xconvert;Derived [];Tprep;Eps 1.0e-12;Sharp];
  };;


add
  {
    id= "TSKAJXY-RIBCYXU"; 
    ineq = (all_forall `ineq
	      [ 
		(#2.0,y1,&2 * hminus);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`);
    doc=      "If a simplex does not have any critical edges then it is non-negative.";
     tags = [Flypaper;Tex;Cfsqp;Xconvert;Tprep;Eps 1.0e-12;Sharp];
  };;

add
  {
    id= "TSKAJXY-IYOUOBF";
    ineq = (all_forall `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`);
(* \/                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2) *)
    doc=      "If a simplex does not have any critical edges then it is non-negative.";
     tags = [Flypaper;Tex;Cfsqp;Xconvert;Tprep;Eps 1.0e-12;Sharp];
  };;

add
  {
    id= "TSKAJXY-WKGUESB";
    ineq = (all_forall `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.01,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`);
    doc=        "If a simplex does not have any critical edges then it is non-negative.";
 (* \/                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2) *)
     tags = [Flypaper;Tex;Tprep;Cfsqp;Xconvert];
  };;

add
  {
    id= "TSKAJXY-XLLIPLS";
    ineq = (all_forall `ineq
	      [ 
		(&2 * hplus,y1,#2.8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`);
    doc=      "If a simplex does not have any critical edges then it is non-negative.";
 (* \/                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2) *)
     tags = [Flypaper;Tex;Tprep;Cfsqp;Xconvert;];
  };;

(*
add
  {
    id= "TSKAJXY-GXSABWC a";
    ineq = (all_forall `ineq
	      [ 
		(#2.8,y1,sqrt8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(#2.8,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0)   \/   
	      (delta_y y1 y2 y3 y4 y5 y6 < #0.99))`);
    doc=     "If a simplex does not have any critical edges then it is non-negative.
           This is a degenerate calculation, because the volume of the simplex tends to zero.";
    (*       (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2) \/  *)
     tags = [Flypaper;Tex;Cfsqp;Tprep;Xconvert;Eps 1.0e-12;Sharp];
  };;
*)
 
(*
add
  {
    id= "TSKAJXY-GXSABWC b";
    ineq = (all_forall `ineq
	      [ 
		(#2.8 pow 2,x1,&8);
		(&4,x2,#2.01 pow 2);
		(&4,x3,#2.01 pow 2);
		(#2.8 pow 2,x4,&8);
		(&4,x5,#2.01 pow 2);
		(&4,x6,#2.01 pow 2)
	      ]
	      ((&1 / &12 - 
		( 
		  (&2 * mm1 / pi) *
		    (sol_euler_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler345_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler156_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler246_x_div_sqrtdelta x1 x2 x3 x4 x5 x6) -
		    (&8 * mm2 / pi) * (
		      ldih2_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih3_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih5_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih6_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6
		    )
		) >= &0)   \/   
	      (delta_x x1 x2 x3 x4 x5 x6 > #1.0) \/
	      (delta_x x1 x2 x3 x4 x5 x6 < &0) )`);
    doc=     "If a simplex does not have any critical edges then it is non-negative.
           This is a degenerate calculation, because the volume of the simplex tends to zero.";
  (*       (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2) \/  *)
  (* (gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) *)
     tags = [Flypaper;Tex;Cfsqp;];
  };;
*)

add
  {
    id= "TSKAJXY-GXSABWC DIV";
    ineq = (all_forall `ineq
	      [ 
		(#2.8 pow 2,x1,&8);
		(&4,x2,#2.01 pow 2);
		(&4,x3,#2.01 pow 2);
		(#2.8 pow 2,x4,&8);
		(&4,x5,#2.01 pow 2);
		(&4,x6,#2.01 pow 2)
	      ]
	      ((&1 / &12 - 
		( 
		  (&2 * mm1 / pi) *
		    (sol_euler_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler345_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler156_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler246_x_div_sqrtdelta x1 x2 x3 x4 x5 x6) -
		    (&8 * mm2 / pi) * (
		      ldih2_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih3_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih5_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih6_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6
		    )
		) >= &0)   \/   
	      (delta_x x1 x2 x3 x4 x5 x6 < &0) )`);
    doc=     "If a simplex does not have any critical edges then it is non-negative.
           This is a degenerate calculation, because the volume of the simplex tends to zero.";
  (*       (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2) \/  *)
  (* (gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) *)
(* 	      (delta_x x1 x2 x3 x4 x5 x6 > #1.0)  *)
     tags = [Flypaper;Tex;Cfsqp;];
  };;




(*
add
  {
    id= "HJKDESR3";
    ineq = (all_forall `ineq
	      [ 
		(#2.0,y1,sqrt8);
		(#2.0,y2,sqrt8);
		(#2.0,y3,sqrt8)
	      ]
	      (
		(vol3r   y1 y2 y3 sqrt2 -  vol3f y1 y2 y3 sqrt2 marchal_quartic  >= &0) \/ 
		  (eta_y y1 y2 y3 >= sqrt2) )`);
    doc = "%old id 1305126631, 3564312720 Packing, Marchal 3cell 
   If $X$ is a $3$-cell, then $\\gamma(X,M)\\ge 0$. 
   Deprecated inequality";
    tags = [Flypaper;Tex;Cfsqp;Eps 1.0e-7;Sharp;Deprecated];
  };;
*)

(*
add
  {
    id = "HJKDESR2";
    ineq = all_forall `ineq
      [     (#2.0,y,sqrt8) ]
      (vol2r y sqrt2 - vol2f y sqrt2 marchal_quartic >= &0)`;
    doc = "%old id: 3148025108 (* Flypaper, Packing Marchal 2cell *)
   If $X$ is a $2$-cell, then $\\gamma(X,M)\\ge 0$. 
  Deprecated inequality.
   ";
    tags = [Flypaper;Tex;Cfsqp;Eps 1.0e-7;Sharp;Deprecated];  
  };;
*)

add
{
  id =  "HJKDESR1a";
  ineq =  all_forall `ineq
  [     (sqrt2, r, sqrt2) ]
   ( &4 * pi * (r pow 3) / (&3)  -  (&2 * mm1 / pi) * &4 * pi >= &0) `;
  doc = 
   "%old id: 3148025108 Flypaper, Packing Marchal 1-cell 
   If $X$ is a $1$-cell, then $\\gamma(X,M)\\ge 0$.  
   (The desired inequality is the
   special case $r=\\sqrt2$ of the formal specification.)";
(*  [     (#1.246, r, sqrt2) ] *)
    tags = [Flypaper;Tex;Cfsqp;Eps 1.0e-7;Sharp];  
};;


addtex (Section,"Packing -- Cluster Inequality -- At most two leaves","");;

add 
{
  id = "GLFVCVK4 2477216213";
  ineq = all_forall `ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2,y2,sqrt8);
    (&2,y3,sqrt8);
    (&2,y4,sqrt8);
    (&2,y5,sqrt8);
    (&2,y6,sqrt8)
   ]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0)\/ 
    (norm2hh y1 y2 y3 y4 y5 y6 <  (hplus- hminus) pow 2) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;  (* norm2hh was <= *)
  doc = "
  \\claim{If $X$ is a $4$-cell that is not a quarter, then $\\gamma(X,L)\\ge0$.}
  Indeed, if no edge of $X$ is critical, then $\\gamma(X,L)\\ge \\gamma(X,M)\\ge 0$.
  If some edge of $X$ is critical, then we may label the edges so that it is the first, and
  this computer calculation treats it.

  If the norm condition holds, then it is a quarter.  This norm condition seems easier to
  check in practice than the conditions defining a quarter.
  ";
  tags = [Flypaper;Tex;Xconvert;Tprep;Split[0;1;2;3;4;5]];
};;

add 
{
  id = "GLFVCVK3-a";

  ineq = all_forall `ineq
   [(&2 , y1, sqrt8);
    (&2,y2,sqrt8);
    (sqrt2,y3,sqrt2);
    (sqrt2,y4,sqrt2);
    (sqrt2,y5,sqrt2);
    (&2,y6,sqrt8)
   ]
    (((vol_y y1 y2 y3 y4 y5 y6 - ( (&2 * mm1 / pi) *
         (&2 * dih_y y1 y2 y3 y4 y5 y6 + &2 * dih2_y y1 y2 y3 y4 y5 y6 +
          &2 * dih6_y y1 y2 y3 y4 y5 y6 + dih3_y y1 y2 y3 y4 y5 y6 +
	  dih4_y y1 y2 y3 y4 y5 y6 + dih5_y y1 y2 y3 y4 y5 y6 - &3 * pi) -
         (&8 * mm2 / pi) *
         (lmfun (y1 / &2) * dih_y y1 y2 y3 y4 y5 y6 +
          lmfun (y2 / &2) * dih2_y y1 y2 y3 y4 y5 y6 +
          lmfun (y6 / &2) * dih6_y y1 y2 y3 y4 y5 y6))) >= &0)\/ 
     (delta_y y1 y2 y3 y4 y5 y6 < #0.99) )`;
  doc =   "
     %4869905472
     If $X$ is a $3$-cell, then $\\gamma(X,L)\\ge0$.
      The inequality is sharp at $(2,2,2)$.
    I have used vol3f\\_palt and vol3r\\_alt to expand their definitions.";
   (* (eta_y y1 y2 y6  > sqrt2) \/ *)
  tags = [Flypaper;Tex;Cfsqp;Sharp;Eps 1.0e-8;Xconvert;Tprep;Split[0;1;5]];
};;


add 
{
  id = "GLFVCVK3-b";
  ineq = all_forall `ineq
   [(&2,y1,sqrt8);
    (sqrt2,y2,sqrt2);
    (&2,y3,sqrt8);
    (sqrt2,y4,sqrt2);
    (&2,y5,sqrt8);
    (sqrt2,y6,sqrt2)
   ]
    (( &1 / &12 - 
   ( (&2 * mm1 / pi) *
         (y_of_x sol_euler_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 
	  + y_of_x sol_euler156_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 + 
	  y_of_x sol_euler345_x_div_sqrtdelta y1 y2 y3 y4 y5 y6) -
         (&8 * mm2 / pi) *
         (y_of_x lmdih_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6 +
          y_of_x lmdih3_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6 +
          y_of_x lmdih5_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6)

   )  > &0) \/ 
     (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
          (delta_y y1 y2 y3 y4 y5 y6 > #1.0 )  )`;
  doc =   "
     %4869905472
     If $X$ is a $3$-cell, then $\\gamma(X,L)\\ge0$.
     When $\\eta=\\sqrt{2}$, (which is equivalent to the vanishing of $\\Delta$),
    the inequality is sharp.

    A term $\\Delta(y_1,\\sqrt2,y_3,\\sqrt2,y_5,\\sqrt2)$ has been 
    factored out, from the function that appears in part a.";
   (* vol3r y1 y3 y5 sqrt2 - vol3f y1 y3 y5 sqrt2 lmfun > &0 *)
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Tprep;Split[0;2;4]];
};;


add
  {
  id = "GLFVCVK2 a";
 ineq = all_forall `ineq
  [     (#2.0,y,&2 * h0 ) ]
   (vol2r y sqrt2 - vol2f y sqrt2 lfun > &0)`;
  doc =   "If $X$ is a $2$-cell, then $\\gamma(X,L)\\ge0$.";
    tags = [Flypaper;Tex;Cfsqp];  
  };;

add
  {
  id = "GLFVCVK2 b";
 ineq = all_forall `ineq
  [     (&2 * h0,y,sqrt8 ) ]
   (vol2r y sqrt2 -  (&2 * mm1 / pi) * &2 * pi * (&1 - y / (sqrt2 * &2)) > &0)`;
  doc =   "If $X$ is a $2$-cell, then $\\gamma(X,L)\\ge0$.";
    tags = [Flypaper;Tex;Cfsqp;Sharp;Eps 1.0e-15];  
  };;


add
{
  id = "GLFVCVK4a 8328676778";
  ineq = all_forall `ineq
   [(&2 * hminus, y1, &2 * hplus );
    (&2 ,y2,&2 * hminus );
    (&2,y3,&2 * hminus);
    (&2 * hminus  ,y4,&2 * hplus );
    (&2,y5,&2 * hminus );
    (&2,y6,&2 * hminus )
   ]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &2 +
    beta_bump_force_y y1 y2 y3 y4 y5 y6 > &0)\/ 
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
  doc = "
Let $\\gamma$ be given by Definition~\\ref{def:gammaL}, $\\op{wt}$ by
Definition~\\ref{def:wt}, and $\\beta$ by Definition~\\ref{def:beta}.
If $X$ is any $k$-cell with $k\\in\\{2,3,4\\}$, and if $X$ is not a quarter, then
then % gammaL is nonneg on quarters. cc:qtr
\\[ 
\\gamma(X,L) \\op{wt}(X) + \\beta(\\ee,X)\\ge 0.
\\]  
  In fact, $\\beta(\\ee,X)=0$, except possibly when $X$ is a $4$-cell with oppositely
  arranged critical edges.  Hence in most cases, it is enough to check the simpler
  inequality $\\gamma(X,L)\\ge0$. This is the verification of the case where the factor
  $\\beta$ matters and where all edges are critical or subcritical.
  If some edge is supercritical, then the circumradius is at least
  \\[
 \\op{rad}(2h_-,2,2,2h_-,2h_+,2) > \\sqrt2,
  \\]
  and the simplex is not a $4$-cell.
 ";
    tags = [Flypaper;Tex;Cfsqp;Xconvert;Tprep;Split[0;3]];  
  };;

add
  {
    id = "FHBVYXZ a";
    ineq = all_forall `ineq
      [(&2 * hminus, y1, &2 * hplus );
       (&2 ,y2,&2 * hminus );
       (&2,y3,&2 * hminus);
       (&2,y4,&2 * hminus);
       (&2,y5,&2 * hminus );
       (&2,y6,&2 * hminus )
      ]
      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun  
	> &0)\/ 
	 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2) \/ (eta_y y1 y3 y5 pow 2 < #1.34 pow 2))`;
    doc = "
%old id: 1118115412, cc:2bl
If $X$ is any quarter, and  $Y$ is a $3$-cell that flanks it, then
\\[ 
\\gamma(X,L) + \\gamma(Y,L) \\ge 0.
\\]  
 ";
(* + &0 * gamma3f y1 y3 y5 sqrt2 lmfun dropped *)
    tags = [Flypaper;Tex;Cfsqp;Xconvert;Tprep;Split[0]];  
  };;

add
  {
    id = "FHBVYXZ b";
    ineq = all_forall `ineq
      [(&2 * hminus, y1, &2 * hplus );
       (&2,y2,&2 * hminus );
       (&2,y3,&2 * hminus);
       (&2,y4,&2 * hminus);
       (&2,y5,&2 * hminus );
       (&2,y6,&2 * hminus )
      ]
      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun  + gamma3f y1 y2 y6 sqrt2 lmfun
	> &0)\/ 
	 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2) \/ (eta_y y1 y2 y6 pow 2 > #1.34 pow 2))`;
    doc = "
%old id: 1118115412, cc:2bl
If $X$ is any quarter, and  $Y$ is a $3$-cell that flanks it, then
\\[ 
\\gamma(X,L) + \\gamma(Y,L) \\ge 0.
\\]  
 ";
    tags = [Flypaper;Tex;Cfsqp;Xconvert;Tprep;Split[0]];  
  };;


(*

add
  {
    id = "FHBVYXZ";
    ineq = all_forall `ineq
      [(&2 * hminus, y1, &2 * hplus );
       (&2 ,y2,&2 * hminus );
       (&2,y3,&2 * hminus);
       (&2,y4,&2 * hminus);
       (&2,y5,&2 * hminus );
       (&2,y6,&2 * hminus )
      ]
      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun  + gamma3f y1 y3 y5 sqrt2 lmfun
	> &0)\/ 
	 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
    doc = "
%old id: 1118115412, cc:2bl
If $X$ is any quarter, and  $Y$ is a $3$-cell that flanks it, then
\\[ 
\\gamma(X,L) + \\gamma(Y,L) \\ge 0.
\\]  
Deprecated to avoid the square root near $0$.
 ";
    tags = [Flypaper;Tex;Cfsqp;Xconvert;Deprecated;Tprep;Split[0]];  
  };;

*)

addtex(Comment,"",
"\\claim{We show that the cluster inequality holds when there are at most two leaves along the critical
edge.}  
  Indeed, if the cluster has no quarter, then the inequality follows from \\ineq{GLFVCVK}.
Assume that a quarter exists.  Then there are two leaves, which flank the quarter.  
Next to the quarter is a three cell,
because the dihedral angle of a $4$-cell is less than $\\pi$.  
 The quarter and the $3$-cell both have weight $1$.
 The result follows from the
given inequality.
");;

addtex(Section,"Packing Cluster Inequality -- Five or more leaves","");;

add
  {
  id = "ZTGIJCF0";
 ineq = all_forall `ineq
  [(&1,dummy,&1)]
   ( &5 * a_spine5 + b_spine5 * &2 * pi  > &0)`;
  doc =   "
% cc:5bl
Let $B$ be the set of cells in the cluster that lie between any two
consecutive leaves.  $B$ is either a singleton set containing a
$4$-cell, or a set of three cells: a $2$-cell and two adjacent
$3$-cells.  Write $\\op{azim}(B)$ for the azimuth angle formed by the
two leaves.  

 Let
 \\[ 
 a= 0.0560305, \\textand   b= -0.0445813.
 \\] 

  The constants $a$ and $b$ must satisfy $5 a + b (2\\pi) >0$, for the $5$-leaf
   case of the cluster inequality.

   The circumradius of a triangle with sides $h_-,h_-,h_-$ is greater than $\\sqrt2$, so
   in $4$-cells one edge next to the spine is subcritical.  Without loss of generality, we
   can assume it is $y_2$.   We have the inequality for all $4$-cells:
   \\[
   \\gamma(X,L) \\op{wt}(X) + \\beta(\\e,X) \\ge a + b \\azim(X).
   \\]
    This has many cases \\ineq{ZTGIJCF4 i3 i4 i5 i6}, depending on which edges $y_3,\\ldots,y_6$
    are subcritical, critical, or supercritical. 


\\begin{itemize}\\wasitemize 
\\item \\case{1821661595} A $4$-cell $X$ along a spine $e$ satisfies
\\[ 
\\gamma_L(X)\\op{wt}(X) + \\beta(e,X) \\ge a + b\\,\\op{azim}(X),
\\] 
\\item \\case{7907792228} The $2$-cell $X_2$ and two $3$-cells $X_1,X_3$
that flank it along a spine $e$ satisfy
\\[ 
\\sum_{i=1}^3 \\left(\\gamma_L(X_i)\\op{wt}(X_i) + \\beta(e,X_i)\\right)\\ge a + b\\,\\sum_{i=1}^3\\op{azim}(X_i).
\\] 
\\end{itemize}\\wasitemize 
Then 
\\[  
\\sum_{X\\in B} \\gamma(X,L)\\op{wt}(X) + \\beta(\\ee,X) \\ge a + b\\,\\op{azim}(B).
\\] 
It follows that
\\[  
\\Gamma(Z) \\ge 5 a + b\\, (2\\pi) > 0.
\\] 

    ";
    tags = [Flypaper;Tex;Cfsqp];  
  };;



let template_F4 = `\ y3m y3M y4m y4M y5m y5M y6m y6M w m. ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (y4m,y4,y4M);
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &w + &m *beta_bump_lb  >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/ 
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;;

let mk_ineq0 i3 i4 i5 i6  = 
  let x i = List.nth [`&2`; `&2 * hminus`;  `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i=1) then 1 else 0 in
  let w = 1 + mid i3 + mid i4 + mid i5 + mid i6 in
  let m = if (w =2) && (i4 = 1) then `1` else `0` in
 mk_tplate template_F4 [x i3;X i3; x i4;X i4; x i5;X i5; x i6 ;X i6; mk_small_numeral w; m];;

let split_F4 i3 i4 i5 i6 = 
  let sp ls i pos = if (i=1) then ls @ [pos] else ls in
  let l0 = [0] in
  let l3 = sp l0 i3 2 in
  let l4 = sp l3 i4 3 in
  let l5 = sp l4 i5 4 in
    sp l5 i6 5;;

let make_F4 i3 i4 i5 i6 = 
   {
    id = Printf.sprintf "ZTGIJCF4 %d %d %d %d 1821661595" i3 i4 i5 i6;
    ineq = mk_ineq0 i3 i4 i5 i6;
    doc = "This is the $4$-cell inequality for five or more leaves.";
    tags = (if (i3,i4,i5,i6)=(0,0,0,0) then [Tex] else [] ) @ [Cfsqp;Flypaper;Xconvert;Penalty(50.0,500.0);Tprep;Split (split_F4 i3 i4 i5 i6)];
  };;

 for i3=0 to 1 do 
for i4 = 0 to 1 do
 for i5 = 0 to 1 do
 for i6 = 0 to 1 do
   add(make_F4 i3 i4 i5 i6) done done done done;;

(*
let template23 = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, sqrt8 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ((gamma23f y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/ 
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
    (eta_y y1 y2 y6 > sqrt2 ) \/
    (eta_y y1 y3 y5 > sqrt2))`;;

let mk_ineq23 i3 i5 i6 = 
  let x i = List.nth [`&2`; `&2 * hminus` ; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i=1) then 1 else 0 in
  let m = mk_small_numeral in
  let w1 = 1 +  mid i6 in
  let w2 = 1 + mid i3 + mid i5 in
    mk_tplate template23 [x i3;X i3; x i5;X i5; x i6 ;X i6; m w1; m w2];; 

let make_F23 i3 i5 i6 = 
   {
    id = Printf.sprintf "ZTGIJCF23 %d %d %d 7907792228" i3 i5 i6;
    ineq = mk_ineq23 i3 i5 i6;
    doc = "This is the $2$- and $3$-cell inequality for five or more leaves.";
    tags = (if (i3,i5,i6)=(0,0,0) then [Tex] else []) @ [Deprecated;Cfsqp;Flypaper;Xconvert;Penalty(50.0,500.0);Tprep;Split (split_F4 i3 0 i5 i6)];
  };;
*)

(*
 for i3=0 to 1 do 
 for i5 = 0 to 1 do
 for i6 = 0 to 1 do
   add(make_F23 i3 i5 i6) done done done;;
*)

let template23d = `\ y3m y3M y5m y5M y6m y6M (w1:num) (w2:num). ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, sqrt8 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ((gamma23f_red_03 y1 y2 y3 y4 y5 y6 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/ 
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 > #0.14 ) \/
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < &0 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0)   )`;;


let template23b = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, sqrt8 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
  (gamma23f_n y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6)
   )`;;


let template23b' = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, &2 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
  (gamma23f_n y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6)
   )`;;
(* Dec 27, 2010. split into two cases 23b 23b', by monotonicity of x4, either rad2=2 or x4=2 *)


let template23b_tags = [Cfsqp_branch 3;Delta126min (0.14 -. 1.0e-12);Delta135min (0.14-. 1.0e-12);Set_rad2];;

let template23b'_tags = [Cfsqp_branch 3;Delta126min (0.14 -. 1.0e-12);Delta135min (0.14-. 1.0e-12)];;

let template23c_tags = 
  [Cfsqp_branch 3;Delta126min (0.14 -. 1.0e-12);Delta135min (0.0);Delta135max(0.14+. 1.0e-12)];;

let template23c = `\ y3m y3M y5m y5M y6m y6M (w1:num) (w2:num). ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, &2 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    (
(delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0) \/
(gamma23f_126_03_n y1 y2 y3 y4 y5 y6 w1 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6)
      )`;;
  (* upper bound on y4 changed from sqrt8 to 2 on Dec 27, 2010 by monotonicity,
      Also rad2 constraint dropped.  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2)  *)


let mk_ineq23 i3 i5 i6 j = 
  let template = List.nth [template23b;template23b';template23c;template23d] j in
  let x i = List.nth [`&2`; `&2 * hminus` ; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i>0) then 1 else 0 in
  let m = mk_small_numeral in
  let w1 = 1 +  mid i6 in
  let w2 = 1 + mid i3 + mid i5 in
    mk_tplate template  [x i3;X i3; x i5;X i5; x i6 ;X i6; m w1; m w2];; 

let make_F23 i3 i5 i6 j = 
  let ext = List.nth ["b";"b2";"c";"d"] j in
  let template_F23_tags = [template23b_tags;template23b'_tags;template23c_tags;[]] in
   {
    id = Printf.sprintf "ZTGIJCF23 %d %d %d 7907792228 %s" i3 i5 i6 ext;
    ineq = mk_ineq23 i3 i5 i6 j;
    doc = "This is the $2$- and $3$-cell inequality for five or more leaves.";
    tags = (if (i3,i5,i6)=(0,0,0) then [Tex] else []) @ [Cfsqp;Flypaper;Xconvert;Penalty(200.0,5000.0);Tprep;Split (split_F4 i3 0 i5 i6)] @ (List.nth template_F23_tags j);
  };;

 for j=0 to 3 do
  for k = 0 to 3 do
    let i356list = [(0,0,0);(0,0,1);(1,0,1);(0,1,1)] in (* cases up to symmetry, simplified on Dec 27, 2010. *)
    let (i3,i5,i6) = List.nth i356list k in
   add (make_F23 i3 i5 i6 j) done done ;;



addtex(Section,"Packing -- Cluster Inequality -- Three and four leaves","");;

addtex(Comment,"",
"The cases of three and four leaves have been solved as a minor linear program.
The details of the model and data for the linear program are contained in the
glpk directory.  Here we simply list the nonlinear inequalities that get used.
");;

add 
{
  id = "BIXPCGW 9455898160";
  ineq = all_forall `ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (&2,y4, &2 * hminus);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (gamma4f y1 y2 y3 y4 y5 y6 lmfun > -- #0.00569) `;
  doc =   "
     If $X$ is a quarter, then $\\gamma(X,L)\\ge -0.00569$.";
  tags = [Flypaper;Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;


add 
{
  id = "BIXPCGW 2300537674";
  ineq = all_forall `ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (&2,y4, &2 * hminus);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) \/ (dih_y y1 y2 y3 y4 y5 y6 < #1.65))`;
  doc =   "
     If $X$ is a quarter such that $\\gamma(X,L)\\le 0$, then $\\dih(X) < 1.65$.";
  tags = [Flypaper;Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;

add 
{
  id = "BIXPCGW 6652007036 a";
  ineq = all_forall `ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2,y2, sqrt8);
    (&2,y3, sqrt8);
    (&2,y4, sqrt8);
    (&2,y5, sqrt8);
    (&2,y6, sqrt8)
   ]
   ((dih_y y1 y2 y3 y4 y5 y6 < #2.8) \/ (delta_y y1 y2 y3 y4 y5 y6 < &60))`;
  doc =   "
     If $X$ is a $4$-cell then  $\\dih(X) < 2.8$.";
  tags = [Flypaper;Cfsqp;Clusterlp;Tex;Xconvert];
};;

add 
{
  id = "BIXPCGW 7080972881 a";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2 * hminus,y2, sqrt8);
    (&2,y3, sqrt8);
    (&2,y4, sqrt8);
    (&2,y5, sqrt8);
    (&2,y6, sqrt8)
   ]
    ((dih_y y1 y2 y3 y4 y5 y6 < #2.3) \/ (delta_y y1 y2 y3 y4 y5 y6 < &60))`;
  doc =   "
     If $X$ is a $4$-cell with a critical edge next to the spine, then  $\\dih(X) < 2.3$.";
  tags = [Flypaper;Cfsqp;Clusterlp;Tex;Xconvert];
};;

add 
{
  id = "BIXPCGW 1738910218 a";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, sqrt8);
    (&2,y3, sqrt8);
    (&2,y4, &2 * hplus);
    (&2,y5, sqrt8);
    (&2,y6, sqrt8)
   ]
   ( (dih_y y1 y2 y3 y4 y5 y6 < #2.3) \/ (delta_y y1 y2 y3 y4 y5 y6 < &60))`;
  doc =   "
     If $X$ is a $4$-cell with a critical edge opposite spine, then  $\\dih(X) < 2.3$.";
  tags = [Flypaper;Cfsqp;Clusterlp;Tex;Xconvert];
};;

add 
{
  id = "BIXPCGW b";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, sqrt8);
    (&2,y3, sqrt8);
    (&2,y4, &2 * hplus);
    (&2,y5, sqrt8);
    (&2,y6, sqrt8)
   ]
   ( (delta4_y y1 y2 y3 y4 y5 y6 > &0) \/ (delta_y y1 y2 y3 y4 y5 y6 > &60) \/ (delta_y y1 y2 y3 y4 y5 y6 < &0))`;
  doc =   "
     If $X$ is a $4$-cell with a critical edge opposite spine, then  $\\dih(X) < 2.3$.";
  tags = [Flypaper;Cfsqp;Clusterlp;Penalty (500.0,500.0);Tex;Xconvert];
};;

add 
{
  id = "BIXPCGW 7274157868";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, sqrt8);
    (&2,y3, sqrt8);
    (&2,y4, sqrt8);
    (&2,y5, sqrt8);
    (&2,y6, sqrt8)
   ]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > #0.0057) \/
    (dih_y y1 y2 y3 y4 y5 y6 < #2.3))`;
  doc =   "
     If $X$ is a $4$-cell with a single critical edge (the spine), and if $\\dih(X)\\ge 2.3$,
      then  $\\gamma(X,L) > 0.0057$.";
  tags = [Flypaper;Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0;1;2;3;4;5]];
};;

add 
{
  id = "QITNPEA 5653753305";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (&2,y4, &2 * hminus);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (gamma4f y1 y2 y3 y4 y5 y6 lmfun + #0.0659 
      - #0.042*dih_y y1 y2 y3 y4 y5 y6 > #0.0)`;
  doc =   "
     This is an inequality for quarters used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;

add 
{
  id = "QITNPEA 9939613598";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (&2 * hplus,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
  doc =   "
     This is an inequality for nonquarter $4$-cells of weight $1$ used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;

(*
add 
{
  id = "QITNPEA 4003532128";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ((gamma23f y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
    (eta_y y1 y2 y6 > sqrt2 ) \/
    (eta_y y1 y3 y5 > sqrt2))`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Deprecated;Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;
*)

add 
{
  id = "QITNPEA 4003532128 a";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, sqrt8);
    (sqrt2,y3,sqrt2);
    (sqrt2,y4,sqrt2);
    (sqrt2,y5,sqrt2);
    (&2,y6, sqrt8)
   ]
    (
     (delta4_y y1 y2 y3 y4 y5 y6 > &25) \/
   (delta_y y1 y2 y3 y4 y5 y6 > #0.14) \/
    (delta_y y1 y2 y3 y4 y5 y6 < &0) )`;
  doc =   "
     This gives an upper bound $0.08$ on the dihedral angle of the $3$-cell.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep];
  (* d4 > 25 > Tan[Pi/2 - 0.03] Sqrt[4 0.14] ==> dih <= 0.03. *)
};;

add  
{
  id = "QITNPEA 4003532128 b";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
   (gamma23f_n y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) 
   )`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.
     We may use monotonicity so that rad2 is exactly 2.";
(* Dec 27, 2010 tested to see if it can be split into a left-and-right inequality.  It cannot be done
    with a correction term of the form 
    + #0.004 * (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2)  *)
  tags = [Cfsqp;Cfsqp_branch 3;
         Clusterlp;Tex;Xconvert;Tprep;Split[0];Set_rad2;Delta126min (0.14-. 1.0e-12);
	 Delta135min (0.14 -. 1.0e-12)];
};;

add  
{
  id = "QITNPEA 4003532128 b2";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, #2.1);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
   (gamma23f_n y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0)
   )`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.
     We may use monotonicity so that $y_4=2.1$";
(* Dec 27, 2010 tested to see if it can be split into a left-and-right inequality.  It cannot be done
    with a correction term of the form 
    + #0.004 * (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2)  *)
  tags = [Cfsqp;Cfsqp_branch 3;Clusterlp;Tex;Xconvert;Tprep;Split[0];Delta126min (0.14-. 1.0e-12);
	 Delta135min (0.14 -. 1.0e-12)];
};;

add 
{
  id = "QITNPEA 4003532128 c";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2 ,y2, &2 * hminus);
     (&2,y3, &2 * hminus);
    (#2.1 ,y4, #2.1);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0) \/  
   (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14) \/
   ( gamma23f_126_03_n y1 y2 y3 y4 y5 y6 1 sqrt2 lmfun  
       - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0)
 )`;
  doc =   "
   Inititally, $y_4$ extends to $\\sqrt8$, but we use monotonicity
to reduced it to the lower bound.
     This gives an upper bound $0.08$ on the dihedral angle of the $3$-cell.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Cfsqp;Cfsqp_branch 3;Clusterlp;Tex;Xconvert;Tprep;Split[0];Delta126min (0.14 -. 1.0e-12);
    Delta135min (0.0); Delta135max(0.14 +. 1.0e-12)];
  (* d4 > 67 > Tan[Pi/2 - 0.03] Sqrt[4 1.0] ==> dih <= 0.03. *)
 (*   (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/ dropped 12/23/2010 *)
};;

add 
{
  id = "QITNPEA 4003532128 d";
(* removed gamma3f y1 y2 y6 sqrt2 lmfun +  from term on Nov 29, 2010 *)
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
     (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ((   
      gamma23f_red_03 y1 y2 y3 y4 y5 y6 sqrt2 lmfun   
	 - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 > #0.14 ) \/
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < &0 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0)   )`;
  doc =   "
     This gives an upper bound $0.08$ on the dihedral angle of the $3$-cell.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
  (* d4 > 25 > Tan[Pi/2 - 0.08] Sqrt[4 1.0] ==> dih <= 0.08. *)
};; 


add {
  id = "QITNPEA 3725403817";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2 ,y4, #2.1);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (dih_y y1 y2 y3 y4 y5 y6 < #1.56) `;
  doc =   "
     This is an inequality for $2$- and $3$-cells used to prove the cluster inequality.
      Note that $y_4\\le 2.1$.
     ";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert];
};;


add 
{
  id = "QITNPEA 6206775865";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2 ,y4, &2 * hminus);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (gamma4f y1 y2 y3 y4 y5 y6 lmfun + #0.0142852 - #0.00609451 *dih_y y1 y2 y3 y4 y5 y6 > #0.0) `;
  doc =   "
     This is an inequality for quarters used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;

add 
{
  id = "QITNPEA 5814748276";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2 ,y4, &2 * hminus);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (gamma4f y1 y2 y3 y4 y5 y6 lmfun - #0.00127562 + #0.00522841 * dih_y y1 y2 y3 y4 y5 y6 > #0.0) `;
  doc =   "
     This is an inequality for quarters used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;


add 
{
  id = "QITNPEA 3848804089";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2 ,y4, &2 * hminus);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (gamma4f y1 y2 y3 y4 y5 y6 lmfun - #0.161517 + #0.119482* dih_y y1 y2 y3 y4 y5 y6 > #0.0) `;
  doc =   "
     This is an inequality for quarters used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;

(* beta_bump_lb -> beta_bump_y 2010-06-23, false otherwise on (i3,i4,i5,i6) = (0,1,0,0) 
    beta_bump_y -> beta_bump_force_y 2010-09-23 
*)

let mk_QITNPEA i3 i4 i5 i6  = 
  let template = `\ y3m y3M y4m y4M y5m y5M y6m y6M w m. ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (y4m,y4,y4M);
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &w + &m * beta_bump_force_y y1 y2 y3 y4 y5 y6 
        - #0.0105256 +  #0.00522841*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))` in
  let x i = List.nth [`&2`; `&2 * hminus`; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i=1) then 1 else 0 in
  let w = 1 + mid i3 + mid i4 + mid i5 + mid i6 in
  let m = if (w =2) && (i4 = 1) then `1` else `0` in
 mk_tplate template [x i3;X i3; x i4;X i4; x i5;X i5; x i6 ;X i6; mk_small_numeral w; m];;

let add_QITNPEA i3 i4 i5 i6 = if (i3+i4+i5+i6 = 0) then () else
  add {
    id = Printf.sprintf "QITNPEA4 %d %d %d %d 3803737830" i3 i4 i5 i6;
    ineq = mk_QITNPEA i3 i4 i5 i6;
    doc = "This is a $4$-cell (nonquarter) inequality for four leaves.";
    tags = (if (i3,i4,i5,i6)=(0,0,0,1) then [Tex] else []) @ [Cfsqp;Xconvert;Flypaper;Penalty(50.0,500.0);Tprep;Split (split_F4 i3 i4 i5 i6)];
  };;

 for i3=0 to 1 do 
for i4 = 0 to 1 do
 for i5 = 0 to 1 do
 for i6 = 0 to 1 do
   add_QITNPEA i3 i4 i5 i6;   done done done done;;


let mk_tm0 i3 i4  = 
  let template = `\ y3m y3M y4m y4M w m. ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (y4m,y4,y4M);
    (&2 ,y5,&2 *hminus);
    (&2 ,y6,&2 * hminus)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &w + &m *beta_bump_lb 
         > #0.0057) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))` in
  let x i = List.nth [`&2`; `&2 * hminus`; `&2 * hplus`; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i=1) then 1 else 0 in
  let w = 1 + mid i3 + mid i4 in
  let m = if (w =2) && (i4 = 1) then `1` else `0` in
 mk_tplate template [x i3;X i3; x i4;X i4; mk_small_numeral w; m];;

let add0 i3 i4 = if (i3+i4 = 0) then () else
  add {
    id = Printf.sprintf "QITNPEA1 %d %d 9063653052" i3 i4 ;
    ineq = mk_tm0 i3 i4 ;
    doc = "This is a $4$-cell (nonquarter) inequality.  The four cell is assumed to
    have exactly one {\\it small} face.";
    tags = (if (i3+i4=1) then [Tex] else []) @ [Cfsqp;Flypaper;Xconvert;Penalty(50.0,500.0);Tprep;Split (split_F4 i3 i4 0 0)]; 
  };;

for i3=1 to 2 do (* start at 1 to force the triangle (y1,y3,y5) not to be small *)
for i4 = 0 to 2 do
   add0 i3 i4   done done;;

add {
    id = "QITNPEA 2134082733"  ;
    ineq =  all_forall  `ineq [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (&2 ,y3,&2 * hminus);
    (&2 * hminus,y4,sqrt8);
    (&2 ,y5,&2 * hminus);
    (&2 ,y6,&2 * hminus)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &2 + beta_bump_lb 
         - #0.213849 + #0.119482*dih_y y1 y2 y3 y4 y5 y6 > #0.0 ) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
    doc = "This is a $4$-cell (nonquarter) inequality.  The two edges along the
     spine are small.";
    tags = [Cfsqp;Flypaper;Clusterlp;Xconvert;Tex;Tprep;Split[0;3]];
};;

(*
add {
    id = "QITNPEA  5400790175"  ;
    ineq =  all_forall  `ineq [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (&2 ,y3,&2 * hminus);
    (&2 * hminus,y4,sqrt8);
    (&2 ,y5,&2 * hminus);
    (&2 ,y6,&2 * hminus)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &2 + beta_bump_lb 
       + gamma3f y1 y2 y6 sqrt2 lmfun > #0.0057)  \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
    doc = "This is a $4$-cell (nonquarter) and adjacent $3$-cell inequality.  
     The edges along the   spine are small.";
    tags = [Cfsqp;Flypaper;Clusterlp;Xconvert;Tex;Tprep;Split[0;3];Deprecated];
};;
*)

add {
    id = "QITNPEA  5400790175 a"  ;
    ineq =  all_forall  `ineq [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (&2 ,y3,&2 * hminus);
    (&2 * hminus,y4,sqrt8);
    (&2 ,y5,&2 * hminus);
    (&2 ,y6,&2 * hminus)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &2 + beta_bump_lb  > #0.0057)  \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2) \/
    (eta_y y1 y2 y6 pow 2 < #1.34 pow 2))`;
    doc = "This is a $4$-cell (nonquarter) and adjacent $3$-cell inequality.  
     The edges along the   spine are small.";
    tags = [Cfsqp;Flypaper;Clusterlp;Xconvert;Tex;Tprep;Split[0;3]];
};;

add {
    id = "QITNPEA  5400790175 b"  ;
    ineq =  all_forall  `ineq [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (&2 ,y3,&2 * hminus);
    (&2 * hminus,y4,sqrt8);
    (&2 ,y5,&2 * hminus);
    (&2 ,y6,&2 * hminus)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &2 + beta_bump_lb 
       + gamma3f y1 y2 y6 sqrt2 lmfun > #0.0057)  \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2) \/
    (eta_y y1 y2 y6 pow 2 > #1.34 pow 2))`;
    doc = "This is a $4$-cell (nonquarter) and adjacent $3$-cell inequality.  
     The edges along the   spine are small.";
    tags = [Cfsqp;Flypaper;Clusterlp;Xconvert;Tex;Tprep;Split[0;3]];
};;


(* Add all the inequalities from ineqdata3q1h.hl *)

let add3q1h  = 
  let records = Ineqdata3q1h.records in
  let mk_ineq = Ineqdata3q1h.mk_ineq in
  let mk_3q1h case r = 
    let d = List.nth records r in
    let f = mk_ineq case d in
      { ineq = f; 
	id = Printf.sprintf "OXLZLEZ 6346351218 %d %d" case r; 
	tags = (if (case,r)=(0,0) then [Tex] else []) @ [Clusterlp;Tprep] @
	  (if (case >0) then [Xconvert] else []); 
	doc = "One of many inequalities for four leaves, three quarters, and
         simplex of weight $1/2$"; } in
  let mk_3q1hc r = map (fun c -> mk_3q1h c r) (0-- 4) in
  let mk_3q1h_all = List.flatten(map (mk_3q1hc) (0--((List.length records)-1))) in
    map add mk_3q1h_all;;


addtex (Section,"Packing -- Polyhedra","");;

(*
add  {
id = "4198769118";
tags = [Tex;Flypaper;Eps 1.0e-8;Sharp;Deprecated];
doc = "%old id: lemma:13-14, calc:cc:disks,  cc:disks, , 8550443271 5216879221
   This inequality gives the nonoverlap of disks on the unit sphere.  The inequality
   is sharp when $h_1=1$ or $h_2=1$.
Let
\\[ 
g(h) = \\arccos(h/2) - \\pi/6.
\\] 
If $h_1,h_2\\in [1,\\hm]$, then
\\[ 
\\op{arc}(2h_1,2h_2,2) - g(h_1) - g(h_2)\\ge 0.
\\] 
This is more easily proved by hand than by computer.  The inequality is a special case
of $ f(a_2,b_2) - f(a_1,b_2) - f(a_2,b_1) + f(a_1,b_1)\\ge0$, when $a_1\\le a_2$ and $b_1\\le b_2$,
and $f(a,b) = \\arc(\\sqrt(a),\\sqrt(b),2)$.  This follows from an ``iterated Jensen'' inequality:
$$f_{12}(a,b) = {8\over \sqrt{x_1 x_2 \\ups(x_1,x_2,4)} \ge 0.$$
   ";
ineq = all_forall `ineq
 [
  (&4, x1, #2.52 pow 2);
  (&4, x2, #2.52 pow 2);
  (&4, x3, &4);
  (&1,x4,&1);
  (&1,x5,&1);
  (&1,x6,&1)
 ]
 (acs_sqrt_x1_d4 x1 x2 x3 x4 x5 x6 + acs_sqrt_x2_d4 x1 x2 x3 x4 x5 x6 - pi/ (&3) 
   <= arclength_x_123 x1 x2 x3 x4 x5 x6)`;
};;
*)

add {
id = "1965189142 34";
tags = [Tex;Flypaper];
doc = "This inequality gives a linear lower bound on the area of a regular spherical polygon, when $k\\ge 34$";
ineq = all_forall `ineq
 [
  (#1.0,x1,#1.26); (&1,x2,&1);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)
 ]
  (#0.591 - #0.0331 * &34 + #0.506 * lfun_y1 x1 x2 x3 x4 x5 x6 < &0)`
};;

add {
id = "1965189142 a";
tags = [Tex;Flypaper];
doc = "
%old id: 7991525482, eqn:alin, 
This inequality gives a linear lower bound on the area of a regular spherical polygon, when $k\\le 34$.
Let $L$ be given by Definition~\\ref{def:L}.
Let
\\[ 
g(h) = \\arccos(h/2) - \\pi/6.
\\] 
Let
\\[ 
\\op{reg}(a,k) = 2\\pi - 2 k (\\arcsin(\\cos(a)\\sin(\\pi/k))).
\\] 
Then
\\[ 
\\op{reg}(g(h),k) \\ge c_0 + c_1 k + c_2 L(h),\\quad
k = 3,4,\\ldots,\\quad 1\\le h\\le \\hm.
\\] 
 The integer parameter $k$ has been replaced with a real variable.   If $k\\ge34$, then
the right-hand-side is negative and the inequality is immediate.
 The trig identity 
 \\[
  \\cos(\\acos (h/2) - \\pi/6)) = h \\sqrt(3)/4 + \\sqrt(1-(h/2)^2)/2.
 \\]
  has been used to simplify the inequality.
 ";
ineq = all_forall `ineq
 [
  (#1.0,x1,#1.26);
  (#3.0,x2,#34.0);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)
 ]
        (&2 * pi - &2 * asnFnhk x1 x2 x3 x4 x5 x6 > #0.591 - #0.0331 * x2 + #0.506 * lfun_y1 x1 x2 x3 x4 x5 x6)`
};;

add  {
id = "8055810915";
tags = [Tex;Flypaper];
doc = "This inequality gives the nonoverlap of disks on the unit sphere.";
ineq = all_forall `ineq
 [
  (&4, x1, #2.52 pow 2);
   (&4,x2,&4);
   ((&2 * h0) pow 2,x3,(&2 * h0) pow 2);
   (&1,x4,&1);
   (&1,x5,&1);
   (&1,x6,&1)
 ]
 (acs_sqrt_x1_d4 x1 x2 x3 x4 x5 x6 - pi/ (&6) + #0.797 < arclength_x_123 x1 x2 x3 x4 x5 x6)`;
};;

add {
id = "6096597438 a";
tags = [Tex;Flypaper];
doc = "This inequality gives a linear lower bound on the area of a regular spherical polygon, when $k\\ge 64$";
ineq = all_forall `ineq
 [
  (#1.0,h,#1.0)
 ]
  (#0.591 - #0.0331 * &64 + #0.506 * lfun (&1) + #1.0 < &0)`
};;

add {
id = "6096597438 b";
tags = [Tex;Flypaper];
doc = "
% old id cc:alin2. 8540377696 
Let
\\[ 
g(h) = \\arccos(h/2) - \\pi/6.
\\] 
Let
\\[ 
\\op{reg}(a,k) = 2\\pi - 2 k (\\arcsin(\\cos(a)\\sin(\\pi/k))).
\\] 
Let
\\[ a'=0.797\\approx \\arc(2,2,2\\hm)-g(\\hm).\\]  Then for $k=3,~4$,\\dots
\\[ \\op{reg}(a',k) \\ge c_0 + c_1 k + c_2 L(1) +c_3.\\] 
This inequality gives a linear lower bound on the area of a regular spherical polygon, when $k\\le 64$.
 The integer parameter $k$ has been replaced with a real variable.   If $k\\ge64$, then
the right-hand-side is negative and the inequality is immediate.
 ";
ineq = all_forall `ineq
 [
  (#3.0,x1,#64.0);
  (&1,x2,&1);  (&1,x3,&1);  (&1,x4,&1);  (&1,x5,&1);  (&1,x6,&1)
 ]    
        (&2 * pi - &2 * asn797k x1 x2 x3 x4 x5 x6 > 
          #0.591 - #0.0331 * x1 + #0.506 * lfun (&1) + #1.0)`
};;

addtex(Section,"Local Fan -- Standard Fan","");;

add {
id = "4717061266";
ineq = all_forall `ineq
[
(&2, y1, &2*h0);
(&2, y2, &2*h0);
(&2, y3, &2*h0);
(&2, y4, &2*h0);
(&2, y5, &2*h0);
(&2, y6, &2*h0)
]
  (delta_y y1 y2 y3 y4 y5 y6 > &0)`;
tags = [Flypaper;Tex;Xconvert];
doc = "A certain configuration of four points cannot be coplanar.";
};;

addtex(Section,"Local Fan"," -- Minimal Fan");;


(*
add  {
id = "2065952723";
doc = "
%See Mathematica numerical calculation.
% old id: eqn:gg'' calc:Lexell.
The derivatives have been computed in Mathematica and converted to
HOL format.  
This is a
  calculation of the sign of a second derivative to show that the
  function $\\tau$ does not have a interior local minimum as a function of the
  edge lengths.  It initially appears to depend on six variables, but
  the dependence on three of the variables is linear and is
  extremal at the endpoints.

Let
\\[ 
g(s;a,b,c,e_1,e_2,e_3) = \\sum_{i=1}^3 \\dih_i(2,2,2,a+s,b,c) e_i,
\\] 
where $\\dih_i$ is given by Definition~\\ref{def:tau}.
Let $\\Delta = \\Delta(4,4,4,a^2,b^2,c^2)$.
Let primes denote derivatives with respect to the variable $s$.
Assume that
$e_i\\in\\leftclosed1,1+\\sol_0/\\pi\\rightclosed$,  that
$a,b,c\\in\\leftclosed2/\\hm,4\\rightclosed$.
%We restrict $a$ further to $a\\le 3.8$.
Then
\\begin{equation}\\label{eqn:calc:Lexell}
(16-a^2) ^2 a^2(  \\Delta (g'(0;a,b,c,e_1,e_2,e_3))^2 
- 0.01\\Delta^{3/2}g''(0;a,b,c,e_1,e_2,e_3))\\ge 0.
\\end{equation}
(The factors of $\\Delta$ clear the denominator in
(\\ref{eqn:calc:Lexell}) to simplify the inequality to be proved.)
%Sum of squares methods may be the easiest way to prove this inequality near the
%minimum.
%The quantities deriv1 and deriv2 are for reference only.
Variables $e_i$ are linear and variables $a,b,c$ appear in even powers.
This has been replace by A,B,C given below.
";
tags = [Flypaper;Tex;Eps 1.0e-8;Deprecated];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (&2 / h0, a, &4);
  (&2 / h0, b, &4);
  (&2 / h0, c, &4)
  ]
   (
    let numE4 = 
(((-- &2) * ((a pow 10) * e1)) + ((&256 * ((((b pow 2) + ((-- &1) * (c pow 
2))) pow 3) * (e2 + ((-- &1) * e3)))) + (((a pow 6) * ((&2 * (((-- &256) + 
((b pow 4) + (((-- &2) * ((b pow 2) * (c pow 2))) + (c pow 4)))) * e1)) + 
(((((b pow 4) * ((-- &8) + (c pow 2))) + (((-- &16) * ((b pow 2) * (&3 + (c 
pow 2)))) + (&16 * (&16 + (&9 * (c pow 2)))))) * e2) + ((((b pow 2) * (&144 + 
(((-- &16) * (c pow 2)) + (c pow 4)))) + ((-- &8) * ((-- &32) + ((&6 * (c pow 
2)) + (c pow 4))))) * e3)))) + ((&2 * ((a pow 8) * ((&32 * e1) + (&3 * ((((-- 
&8) + (b pow 2)) * e2) + (((-- &8) + (c pow 2)) * e3)))))) + ((&200 * ((((a 
pow 4) * e1) + ((&8 * (((b pow 2) + ((-- &1) * (c pow 2))) * (e2 + ((-- &1) * 
e3)))) + ((-- &1) * ((a pow 2) * ((&16 * e1) + ((((-- &8) + (b pow 2)) * e2) + 
(((-- &8) + (c pow 2)) * e3))))))) pow 2)) + ((&2 * ((a pow 4) * (((b pow 
2) + ((-- &1) * (c pow 2))) * (((b pow 4) * e2) + ((&8 * ((c pow 2) * ((&4 * 
e1) + ((&9 * e2) + ((-- &7) * e3))))) + ((&384 * (e2 + ((-- &1) * e3))) + 
(((-- &1) * ((c pow 4) * e3)) + ((b pow 2) * (((-- &32) * e1) + (((&56 + ((-- 
&9) * (c pow 2))) * e2) + (&9 * (((-- &8) + (c pow 2)) * e3)))))))))))) + 
((-- &16) * ((a pow 2) * (((b pow 2) + ((-- &1) * (c pow 2))) * (((b pow 4) * 
(e2 + ((-- &3) * e3))) + (((-- &4) * ((b pow 2) * ((&8 * e1) + ((((-- &20) + 
(&3 * (c pow 2))) * e2) + ((-- &3) * (((-- &4) + (c pow 2)) * e3)))))) + ((c 
pow 2) * ((&32 * e1) + ((&3 * ((&16 + (c pow 2)) * e2)) + ((-- &1) * ((&80 + 
(c pow 2)) * e3)))))))))))))))) in
  (
  (numE4 > &0)
     ))`;
};;
*)

add
  {
id = "2065952723 A";
doc = "See explanation in 2065952723.  This is the branch when $a_2 \\le 15.99$.
";
tags = [Flypaper;Tex];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, #15.99);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (num_combo1 e1 e2 e3 a2 b2 c2 > &0) `;
};;

add
  {
id = "2065952723 B";
doc = "See explanation in 2065952723.  This treats the case $a_2 \\ge 15.99$,
which is renamed $c_2$ here.  
 Assume the edges are not all as short as possible.  This segment must consist
  of three edges joined by two flat vertices.  We can assume they are $v_0,\\ldots,v_3$,
  with $v_1$ and $v_2$ flat.  We may also assume that $v_1$ and $v_2$ have been pressed down to
  have length $2$.  The polygon must be a hexagon (it takes three edges on both sides to reach $15.99$), 
 so $s=0$ and $S=\\emptyset$.  This is the case when $v_4$ is also flat.

  This calculation shows that the other sides (along $v_3,v_4,v_5,v_6$)
 of the hexagon are as short as possible.  Since $s=0$,
  short means length $2$.  This violates the triangle inequality:
 \\[
   \\sum_{i=1}^3 \\norm{v_i}{v_{i+1}} > \\sum_{i=4}^6 \\norm{v_i}{v_{i+1}}.
  \\]";
(* 15.53 > 3.94^2, arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound *)
tags = [Flypaper;Tex];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, #15.53);
  ((&2 / h0) pow 2, b2, #15.53);
  (#15.99, c2, #16.0)
  ]
   ((num1 e1 e2 e3 a2 b2 c2 ) > &0) `;
};;

add
  {
id = "2065952723 C";
doc = "See explanation in 2065952723.  At this point we have a hexagon.
  This is the case when neither $v_4$ nor $v_5$ is flat. ";
(* arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound *)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &2 * h0);
  ((&2 / h0) pow 2, b2, &2 * h0);
  ((&2 / h0) pow 2, c2, #3.94 pow 2)
  ]
   (num1 e1 e2 e3 a2 b2 c2 > &0) `;
};;



{
id = "OUCPLRI a";
tags = [Flypaper;Cfsqp;Tex];
doc = "
  % old id. calc:2der 
  A formula for a second derivative has been calculated in Mathematica.  It
  can be written as an obvious positive factor times a polynomial numerator.
  This calculation shows that the numerator is negative.
  ";
ineq = all_forall `ineq
  [
  (&2,y1,&2 * h0);
  (&2,y2,&2 * h0)
  ]
  (   (((-- &4) * (y1 pow 2)) + ((y1 pow 4) + (((-- &4) * ((y1 pow 3) * y2)) + 
(((-- &4) * (y2 pow 2)) + ((&6 * ((y1 pow 2) * (y2 pow 2))) + (((-- &4) * (y1 
* (y2 pow 3))) + (y2 pow 4)))))))   < &0 )`;
};;
   

{
id = "OUCPLRI b";
tags = [Flypaper;Cfsqp;Tex];
doc = "
  % old id. calc:2der
  A formula for a second derivative has been calculated in Mathematica.  It
  can be written as an obvious positive factor times a polynomial numerator.
  This calculation shows that the numerator is negative.
  ";
ineq = all_forall `ineq
  [
  (&2,y1,&2 * h0);
  (&2,y2,&2 * h0)
  ]
  (  ((-- &64) + ((&48 * (y1 pow 2)) + (((-- &12) * (y1 pow 4)) + ((y1 pow 6) 
+ ((&80 * (y2 pow 2)) + (((-- &8) * ((y1 pow 2) * (y2 pow 2))) + (((-- &3) * 
((y1 pow 4) * (y2 pow 2))) + (((-- &12) * (y2 pow 4)) + ((&3 * ((y1 pow 2) * 
(y2 pow 4))) + ((-- &1) * (y2 pow 6)))))))))))  < &0 )`;
};;

add {
id = "OMKYNLT 3336871894";
tags = [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Sharp];
doc = "This is the nonnegativity of $\\tau$ on triangles.  It is a sharp inequality.";
ineq =  all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
    (&2,y4,&2);
    (&2,y5,&2);
    (&2,y6,&2)
    ]
( taum y1 y2 y3 y4 y5 y6 >= #0.0)`;
};;

add {
id = "OMKYNLT 2 1";
tags = [Cfsqp;Flypaper;Tex;Xconvert];
doc = "This is the inequality of $\\tau > d(r,s)$ on triangles.";
ineq =  all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (&2,y4,&2);
      (&2,y5,&2);
      (&2 * h0, y6, &2 * h0)
    ]
( taum y1 y2 y3 y4 y5 y6  > tame_table_d 2 1)`;
};;

add {
id = "OMKYNLT 1 2";
tags = [Cfsqp;Flypaper;Tex;Xconvert];
doc = "
  %old id 8880534953
  This is the inequality of $\\tau > d(r,s)$ on triangles.  Note that
  the optimal point is not $(2,2,2)$ as one might have expected.";
ineq =  all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (&2,y4,&2);
      (&2 * h0,y5,&2 * h0);
      (&2 * h0,y6,&2 * h0)
    ]
( taum y1 y2 y3 y4 y5 y6 > tame_table_d 1 2)`;
};;

{
id = "OMKYNLT 0 3";
tags = [Cfsqp;Flypaper;Tex;Xconvert];
doc = "This is the inequality of $\\tau > d(r,s)$ on triangles.";
ineq =  all_forall `ineq
    [
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52)]
( taum y1 y2 y3 (&2 * h0) (&2 * h0) (&2 * h0) > tame_table_d 0 3)`;
};;

add {
id = "SDCCMGA a";
doc = "This is an arclength estimate.";
tags = [Tex;Flypaper;Cfsqp;Xconvert];
ineq = all_forall `ineq
 [
  (&2,y1,#2.52);
   (&1,y2,&1);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
 ]
 (arclength_y1 (&2) (&2 * h0) y1 y2 y3 y4 y5 y6 + 
  arclength_y1  (&2) (&2 * h0) y1 y2 y3 y4 y5 y6 <
   arclength_y1 (&2*h0) (&2 * h0) y1 y2 y3 y4 y5 y6 + 
    &2 * arc_hhn)`;
};;

add {
id = "SDCCMGA b";
doc = "This is an arclength estimate.";
tags = [Tex;Flypaper;Cfsqp;Xconvert];
ineq = all_forall `ineq
 [
  (&2,y1,#2.52);
   (&1,y2,&1);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
 ]
 (arclength_y1 (&2) (&2 * h0) y1 y2 y3 y4 y5 y6 + 
  arclength_y1 (&2) (&2 * h0) y1 y2 y3 y4 y5 y6 <
   arclength_y1 (&2*h0) (&2) y1 y2 y3 y4 y5 y6 + 
  pi / &3   + arc_hhn)`;
};;


add  {
id = "2986512815";
doc = "The terms have been generated by Mathematica.
%old id: calc:cc:qua, m11 lemma:flat-exists
The function
  $\\tau$ does not have a local minimum as $y$ varies.
The two simplices are $(2,2,2,y,a,b)$ and $(2,2,2,y,c,d)$, joined along
the common face $(2,2,y)$.

Let $e_1,\\ldots,e_4\\in \\leftclosed1,1+\\sol_0/\\pi\\rightclosed$.
let $a,b,c\\in \\leftclosed 2/h_0,2h_0\\rightclosed$,
$y\\in \\leftclosed 2,3.93\\rightclosed$, and
$d\\in \\leftclosed 2,4\\rightclosed$.
Assume that
\\[ 
\\Delta(4,4,4,a^2,b^2,y^2),~\\Delta(4,4,4,c^2,d^2,y^2)
%,~\\Delta((2h_0)^2,a^2,b^2,y^2,c^2,d^2)  %% dropped constraint for now.
% I can't quite justify this condition (* (delta_y (&2 * h0) a b y c d < &0)  \/ *)
> 0.
\\] 
Assume that
\\[ 
\\dih(2,2,2,a,b,y)+\\dih(2,2,2,d,c,y) < \\pi.
\\] 
Let
\\begin{align*} 
g(y) &=
  e_1\\dih(2,2,2,b,a,y) + e_2\\dih(2,2,2,y,a,b) + e_3 \\dih(2,2,2,a,b,y)+\\\\
  &~~ e_1 \\dih(2,2,2,c,d,y) + e_4\\dih(2,2,2,y,c,d) + e_3\\dih(2,2,2,d,c,y).
\\end{align*}
Then \\[ g'(y)^2 - 0.01 g''(y) > 0.\\] 
The upper bound $3.93$ is obtained from the triangle inequality as follows.
\\[
\\arc(2,2,a)+\\arc(2,2,b) \\le 2\\arc(2,2,2h_0) < 2.73,
\\]
but if $y\\ge 3.93$, then 
$\\arc(2,2,y) > 2.73$.

$a,b,c,d,y$ appear in even powers.  This can be used to simplify the calculation.
Deprecated. Replaced with u1 below.  (The second derivative is always negative for each
simplex so the sum is negative.)
";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Deprecated];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
 ((let term1 = ((&4 * ((sqrt ((((-- &4) * (c pow 4)) + (((-- &4) * (((d pow 2) + ((-- &1) * 
(y pow 2))) pow 2)) + ((c pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((d pow 2) 
* ((-- &8) + (y pow 2)))))))))) * (((-- &1) * ((y pow 2) * ((&8 * e1) + ((&8 
* e3) + (e2 * ((-- &16) + (y pow 2))))))) + (((b pow 2) * ((&8 * e3) + (e1 * 
((-- &8) + (y pow 2))))) + ((a pow 2) * ((&8 * e1) + (e3 * ((-- &8) + (y 
pow 2))))))))) + (&4 * ((sqrt ((((-- &4) * (a pow 4)) + (((-- &4) * (((b pow 
2) + ((-- &1) * (y pow 2))) pow 2)) + ((a pow 2) * ((&8 * (y pow 2)) + ((-- 
&1) * ((b pow 2) * ((-- &8) + (y pow 2)))))))))) * (((-- &1) * ((y pow 2) * 
((&8 * e1) + ((&8 * e3) + (e4 * ((-- &16) + (y pow 2))))))) + (((c pow 2) * 
((&8 * e3) + (e1 * ((-- &8) + (y pow 2))))) + ((d pow 2) * ((&8 * e1) + (e3 * 
((-- &8) + (y pow 2)))))))))) in
  let term2 = ((&4 * (((sqrt ((((-- &4) * (c pow 4)) + (((-- &4) * (((d pow 2) + ((-- &1) * 
(y pow 2))) pow 2)) + ((c pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((d pow 2) 
* ((-- &8) + (y pow 2)))))))))) pow 3) * (((-- &8) * ((a pow 6) * ((&8 * (e1 
* ((-- &16) + (&3 * (y pow 2))))) + (e3 * (&128 + (((-- &8) * (y pow 2)) + (y 
pow 4))))))) + (((-- &8) * (((b pow 2) + ((-- &1) * (y pow 2))) * (((y pow 4) 
* ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((&8 * (e1 * ((-- &16) + (&3 * (y 
pow 2))))) + (&8 * (e3 * ((-- &16) + (&3 * (y pow 2)))))))) + (((b pow 2) * 
((y pow 2) * ((&16 * (e3 * (&16 + ((-- &3) * (y pow 2))))) + ((e2 * (((-- 
&16) + (y pow 2)) pow 2)) + (e1 * ((-- &512) + ((&48 * (y pow 2)) + ((-- &3) 
* (y pow 4))))))))) + ((b pow 4) * ((&8 * (e3 * ((-- &16) + (&3 * (y pow 
2))))) + (e1 * (&128 + (((-- &8) * (y pow 2)) + (y pow 4)))))))))) + (((-- 
&4) * ((a pow 2) * ((&6 * ((y pow 4) * ((&8 * (e1 * ((-- &16) + (&3 * (y pow 
2))))) + (e3 * (&128 + (((-- &8) * (y pow 2)) + (y pow 4))))))) + (((-- &4) * 
((b pow 2) * ((y pow 2) * ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((&4 * (e1 
* ((-- &32) + (((-- &2) * (y pow 2)) + (y pow 4))))) + (&4 * (e3 * ((-- &32) 
+ (((-- &2) * (y pow 2)) + (y pow 4)))))))))) + ((b pow 4) * ((&6 * (e3 * 
(&128 + (((-- &40) * (y pow 2)) + (&3 * (y pow 4)))))) + (e1 * ((-- &768) + 
((&208 * (y pow 2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))) + ((-- 
&4) * ((a pow 4) * ((&2 * ((y pow 2) * ((e1 * (&384 + ((-- &72) * (y 
pow 2)))) + ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((-- &4) * (e3 * (&160 + 
(((-- &14) * (y pow 2)) + (y pow 4))))))))) + ((b pow 2) * ((&6 * (e1 * (&128 
+ (((-- &40) * (y pow 2)) + (&3 * (y pow 4)))))) + (e3 * ((-- &768) + ((&208 
* (y pow 2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))))))) + (&4 * 
(((sqrt ((((-- &4) * (a pow 4)) + (((-- &4) * (((b pow 2) + ((-- &1) * (y pow 
2))) pow 2)) + ((a pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((b pow 2) * ((-- 
&8) + (y pow 2)))))))))) pow 3) * (((-- &8) * ((c pow 6) * ((&8 * (e3 * ((-- 
&16) + (&3 * (y pow 2))))) + (e1 * (&128 + (((-- &8) * (y pow 2)) + (y pow 
4))))))) + (((-- &8) * (((d pow 2) + ((-- &1) * (y pow 2))) * (((y pow 4) * 
((e4 * (((-- &16) + (y pow 2)) pow 2)) + ((&8 * (e1 * ((-- &16) + (&3 * (y 
pow 2))))) + (&8 * (e3 * ((-- &16) + (&3 * (y pow 2)))))))) + (((d pow 2) * 
((y pow 2) * ((e1 * (&256 + ((-- &48) * (y pow 2)))) + ((e4 * (((-- &16) + (y 
pow 2)) pow 2)) + (e3 * ((-- &512) + ((&48 * (y pow 2)) + ((-- &3) * (y pow 
4))))))))) + ((d pow 4) * ((&8 * (e1 * ((-- &16) + (&3 * (y pow 2))))) + (e3 
* (&128 + (((-- &8) * (y pow 2)) + (y pow 4)))))))))) + (((-- &4) * ((c pow 
4) * ((&2 * ((y pow 2) * ((e3 * (&384 + ((-- &72) * (y pow 2)))) + ((e4 * 
(((-- &16) + (y pow 2)) pow 2)) + ((-- &4) * (e1 * (&160 + (((-- &14) * (y 
pow 2)) + (y pow 4))))))))) + ((d pow 2) * ((&6 * (e3 * (&128 + (((-- &40) * 
(y pow 2)) + (&3 * (y pow 4)))))) + (e1 * ((-- &768) + ((&208 * (y pow 2)) + 
(((-- &20) * (y pow 4)) + (y pow 6)))))))))) + ((-- &4) * ((c pow 2) * ((&6 * 
((y pow 4) * ((&8 * (e3 * ((-- &16) + (&3 * (y pow 2))))) + (e1 * (&128 + 
(((-- &8) * (y pow 2)) + (y pow 4))))))) + (((-- &4) * ((d pow 2) * ((y pow 
2) * ((e4 * (((-- &16) + (y pow 2)) pow 2)) + ((&4 * (e1 * ((-- &32) + (((-- 
&2) * (y pow 2)) + (y pow 4))))) + (&4 * (e3 * ((-- &32) + (((-- &2) * (y pow 
2)) + (y pow 4)))))))))) + ((d pow 4) * ((&6 * (e1 * (&128 + (((-- &40) * (y 
pow 2)) + (&3 * (y pow 4)))))) + (e3 * ((-- &768) + ((&208 * (y pow 
2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))))))))) in
   term1 * term1 - #0.01 * term2 > &0) \/ 
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) \/ 
  (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;


(* 
 
add
  {
id = "2986512815 u1";
doc = "The second derivative is always negative (with respect to the diagonal $a$) for each
simplex so the second derivative on the quad cluster  is negative. The inequality is
linear in the variables $e_i$.  Deprecated: bad data, variables should square $a,b,c$. ";
tags= [Tex;Cfsqp;Flypaper;Deprecated];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&2, a, #3.93);
    (&2 / h0, b, #4.0);
    (&2 / h0, c, &2 * h0)
 ]
( num2 e1 e2 e3 a b c    < &0)`;
};;

*)

add {
id = "JNTEFVP 1";
doc = "A nonconvex quad has a diagonal less than $\\sqrt8$.  This allows us
to split a quad into two simplices.  By extreme edge we can assume the diagonal
is $2h_0$ or $\\sqrt8$.  The case $2h_0$ is already done with the triangles.";
tags=[Tex;Cfsqp;Flypaper];
ineq = all_forall `ineq
 [
   (&4,x1,(&2 * h0) pow 2);
   (&4,x2,(&2 * h0) pow 2);
   (&4,x3,(&2 * h0) pow 2);
   (&4,x4,(&2 * h0) pow 2);
   (&4,x5,(&2 * h0) pow 2);
   (&8 ,x6, (&4 * h0) pow 2)
 ]
  (delta_x4 x1 x2 x3 x4 x5 x6 > &0)`;
};;

add {
id = "JNTEFVP 2 1";
doc = "This is the d[2,1] constant calculation for quads.";
tags=[Tex;Cfsqp;Flypaper;Xconvert];
ineq = all_forall `ineq
 [
   (&2,y1, &2 * h0);
   (&2,y2, &2 * h0);
   (&2,y3, &2 * h0);
   (&2,y4,&2);
   (&2,y5,&2);
   (sqrt8,y6,sqrt8)
 ]
  (taum y1 y2 y3 y4 y5 y6  > tame_table_d 2 1)`;
};;

add {
id = "JNTEFVP 1 2";
doc = "This is the d(1,2) constant calculation for quads.";
tags=[Tex;Cfsqp;Flypaper;Xconvert];
ineq = all_forall `ineq
 [
   (&2,y1, &2 * h0);
   (&2,y2, &2 * h0);
   (&2,y3, &2 * h0);
   (&2,y4,&2);
   (&2 * h0,y5,&2 *h0);
   (sqrt8,y6,sqrt8)
 ]
  (taum y1 y2 y3 y4 y5 y6  > tame_table_d 1 2)`;
};;

add {
id = "JNTEFVP 0 3";
doc = "This is the d(0,3) constant calculation for quads.";
tags=[Cfsqp;Flypaper;Tex;Xconvert];
ineq = all_forall `ineq
 [
   (&2,y1, &2 * h0);
   (&2,y2, &2 * h0);
   (&2,y3, &2 * h0);
   (&2 * h0,y4,&2 * h0);
   (&2 * h0,y5,&2 * h0);
   (sqrt8,y6,sqrt8)
 ]
  (taum y1 y2 y3 y4 y5 y6  > tame_table_d 0 3)`;
};;



addtex(Comment,"PQFYWHW",
 "
 We start the analysis of pentagons with the case of two adjacent flats. 
 By the established properties, the three edges next to a flat all have the same length,
 $2$ or $2h_0$.  The length $2h_0$ is impossible:
 \\[
  \\arc(2h_0,2,2h_0)2 + \\arc(2,2,2h_0) > \\pi,
 \\]
  contrary to genericity.
 Hence the three edges next to a flat have length $2$.
 ");;

add    
{
id = "PQFYWHW 1";
doc = "In a pentagon with adjacent flats, there is at most one long edge.
 Recall that $s\\le 1$.
 % The two edges next to the non-flat.
 % deriv1 still have (16-a^2)a in the denominator. num1 is the polynomial numerator.
 % $a$ is the edge being deformed, $c$ is the diagonal.
 % $b$ is the adjacent edge, assumed also to have length $2h_0$, but not in $S$.
 ";
(*
   let deriv1 = (((&4 * (((a pow 4) * e1) + ((&8 * (((b pow 2) + ((-- &1) * (c pow 2))) * (e2 
+ ((-- &1) * e3)))) + ((-- &1) * ((a pow 2) * ((&16 * e1) + ((((-- &8) + (b 
pow 2)) * e2) + (((-- &8) + (c pow 2)) * e3))))))))/((-- &16) + (a pow 2)))/a) in
*)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, (&2 * h0) pow 2);
  (&2 pow 2 , b2, (&2 * h0) pow 2);
  (&2 pow 2, c2, &4 pow 2)
  ]
   (   num1 e1 e2 e3 a2 b2 c2  > &0)`;
};;

add    
{
id = "PQFYWHW 2";
doc = "A pentagon with two adjacent flats does not exist.  By the preceding
  calculations, we have reduced to the case where the edges next to the flats have
  length $2$ and at most one edge has length $2h_0$.  This calculation shows
  that the triangle inequality is violated, so that the pentagon does not exist.
   ";
tags = [Flypaper;Tex;Eps 1.0e-8;Xconvert];
ineq = all_forall `ineq
  [
  (&2, y1, &2 * h0);
    (&2, y2, &2 * h0);
   (&1,y3,&1);
   (&1,y4,&1);
  (&1,y5,&1);
   (&1,y6,&1)
  ]
   (arclength_y1 (&2 * h0) (&2) y1 y2 y3 y4 y5 y6  + 
    #0.816 + 
   arclength_y2 (&2 * h0) (&2) y1 y2 y3 y4 y5 y6 > 
    arclength_y1 (&2) (&2) y1 y2 y3 y4 y5 y6 + 
     arclength_y2 (&2) (&2 *h0) y1 y2 y3 y4 y5 y6  )`;
};;
(* arclength (&2 * h0) (&2 * h0) (&2) > 0.816 *)


add    
{
id = "PQFYWHW 3";
doc = "Now we start the analysis of a pentagon with nonadjacent flats.
 We show that that edge that is not terminated at a flat is short.
 The combined edge length at a flat is between $2.9$ and $3.93$.
  \\[
  \\arc(2,2,2h_0) 2 < 2.73 < \\arc(2,2,3.93).
 \\]
 \\[
   \\arc(2,2,2.9) < 1.625 < \\arc(2h_0,2h_0,2) 2.
  \\]
  % num1 is the polynomial numerator.
 ";

(*


*)

tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0)  pow 2, a2, (&2 * h0) pow 2);
  ((#2.9 pow 2) , b2, #3.93 pow 2);
  (#2.9 pow 2, c2, #3.93 pow 2)
  ]
   (     num1 e1 e2 e3 a2 b2 c2 > &0)`;
};;



add    
{
id = "PQFYWHW 4";
doc = "In a pentagon with two nonadjacent flats. there is at most one long edge.
This calculation shows that we can shorten an edge that is at a flat node.
We shorten the two edges at $a$ (assuming $a \\le c + 0.25$), until their lengths are
$(2,2)$ or $(2,2h_0)$ (if one of them belongs to $S$).
If both are $(2,2)$ then the all four edges at the two flats have length $2$, because
otherwise 
\\[
 \\arc(2h_0,2h_0,2h_0) + \\arc(2h_0,2h_0,2) \\le \\arc_c \\le \\arc_a \\le
 \\arc(2,2,2)2 < 2.095.
\\]
 % deriv1 still has (16-a^2)a in the denominator. num1 is the polynomial numerator.
% This is linear in e1, e2, e3.  Even powers in a,b,c.
 ";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (#2.9 pow 2, a2, #3.93 pow 2);
  ((&2/h0) pow 2 , b2, (&2 * h0) pow 2);
  (#2.9 pow 2, c2, #3.93 pow 2)
  ]
  ( ( num1 e1 e2 e3 a2 b2 c2 > &0) \/ (a2 > c2))`;
};;

(*
add {
id = "ZHPXLTX 9620775909-5";
doc = "Pentagons with two flats 
 (that are not adjacent) does not exist.  
    ";
tags =  [Tex;Flypaper;Deprecated;Penalty(1.0,50.0)];
ineq = all_forall `ineq
  [
(&2,y1,&2 *h0);
(&2,y2,&2 * h0);
(&2,y3,&2 *h0);
(&2,y4,&2 *h0);
(&2,y5,&2 *h0)
  ]
  (
    let y12 = &2  in
    let y23 = &2 in
    let y34 = &2 in
    let y15 = &2 in
    let y45 = &2 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
    let y14 = edge_flat y5 y1 y4       y45 y15 in 
      (dih_y y1 y2 y5 (sqrt8) y15 y12 > dih_y y1 y3 y4 y34 y14 y13)  )`;
(* \/
        (taum y1 y3 y4 y34 y14 y13 + flat_term y2 + flat_term y5 > #0.696) *)
};;
*)

add  {
id = "ZHPXLTX 9620775909-5";
doc = "Pentagons with two flats 
 (that are not adjacent) does not exist.  
    ";
tags =  [Tex;Flypaper;Penalty(1.0,50.0)];
ineq = all_forall `ineq
  [
(&4,x1,(&2 *h0) pow 2);
(&4,x2,(&2 *h0) pow 2);
(&4,x3,(&2 *h0) pow 2);
(&4,x4,(&2 *h0) pow 2);
(&4,x5,(&2 *h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &4  in
    let x34 = &4 in
    let x15 = &4 in
    let x45 = &4 in
    let x25 = &8 in
     (dih_template_B_x x15 x45 x34 x12 x25 x1 x2 x3 x4 x5 x6 > &0))`;
};;


add
  {
id = "PQFYWHW B' a";
doc = "
This calculation is used when $\\Delta< 16$.
\[
 8 y < d4,\\quad 0 < \\Delta < 16 \\rightarrow \\op{dih}< \\pi/4\] ";
tags= [Tex;Xconvert;Flypaper;Penalty(10.0,500.0)];
ineq = all_forall `ineq
 [
  (&2,y1,&2 * h0);
  (&2,y2,&2 * h0);
  (&2,y3,&2 * h0);
  (&2,y4,&2 * h0);
  (#3.1,y5,#3.736);
  (#3.1,y6,#3.736)]
( (&8 * y1  < delta4_y y1 y2 y3 y4 y5 y6) 
  \/
delta_y y1 y2 y3 y4 y5 y6 < &0 \/ delta_y y1 y2 y3 y4 y5 y6 > &16 )`;
};;
(* dih_y y1 y2 y3 y4 y5 y6 < #1.2 *)

add
  {
id = "PQFYWHW B' b";
doc = "This auxiliary calculation is used when $\\Delta < 16$";
tags= [Tex;Xconvert;Flypaper;];
ineq = all_forall `ineq
 [
  (&2,y1,&2 * h0);
  (&2,y2,&2 * h0);
  (&2,y3,&2 * h0);
  (&2 * h0,y4,&2 * h0);
  (&2,y5,&2 * h0);
  (&2,y6,&2 * h0)]
(dih_y y1 y2 y3 y4 y5 y6 > pi / &4 )`;
};;



(*
let templateB = `\y15 y45 y34 y12 y2max. (ineq
  [
(&2,y1,&2 *h0);
(&2,y2,y2max);
(&2,y3,&2 *h0);
(&2,y4,&2 *h0);
(&2,y5,&2 *h0)
  ]
  (
    let y23 = y12 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
    let y14 = edge_flat y5 y1 y4       y45 y15 in 
      (dih_y y1 y2 y5 (&2 * h0) y15 y12 > dih_y y1 y3 y4 y34 y14 y13) \/
        (taum y1 y3 y4 y34 y14 y13 + flat_term y2 + flat_term y5 > tame_table_d 4 1) ))`;;
*)


let templateB' = `\x15 x45 x34 x12 x2max. (ineq
  [
(&4,x1,(&2 *h0) pow 2);
(&4,x2,x2max);
(&4,x3,(&2 *h0) pow 2);
(&4,x4,(&2 *h0) pow 2);
(&4,x5,(&2 *h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x25 = (&2 * h0) pow 2 in
     (delta_template_B_x x15 x45 x34 x12 x1 x2 x3 x4 x5 x6 < &16) \/
     (dih_template_B_x x15 x45 x34 x12 x25 x1 x2 x3 x4 x5 x6 > &0) \/
     (taum_template_B_x x15 x45 x34 x12 x1 x2 x3 x4 x5 x6 > tame_table_d 4 1)))`;;

let make_WHW i j = 
  let r = match  i with
   0 -> [`&2`;`&2`;`&2`]
    |1 -> [`&2 * h0`;`&2`;`&2`]
    |2 -> [`&2`;`&2 * h0`;`&2`]
    |3 -> [`&2`;`&2`;`&2 * h0`]
    | _ ->  failwith "make_WHW" in
  let s = match j with
    0 -> [`&2`;`&2 * h0`]
    | 1 -> [`&2 * h0`;`&2`]
    | _ -> failwith "make_WHW j" in
  let t1 = r @ s in
  let t = map (fun x -> let v = mk_comb (`(pow)`,x) in mk_comb(v,`2`) ) t1 in
{
id = Printf.sprintf "PQFYWHW B'' %d %d" i j;
doc = "Pentagons with two flats 
 (that are not adjacent) satisfy the bound $D[4,1]$.  When $y_{15}=y_{45}=2$ and
  $y_{34} = 2h_0$, then the lines $\\{\\v_2,\\v_3\\}$ and $\\{\\v_4,\\v_5\\}$
are parallel and the dihedral inequality is sharp.
  % The sharp case is i=3, j=0.
The constants $d(5,0)<d(4,1)$.  We prove the stronger inequality with $d(4,1)$.  The case when $\\Delta<16$ is done as a separate calculation.
    ";
(* updated Dec 12, 2010 *)
tags = (if(i+j=0) then [Tex] else []) @ [Flypaper;Eps 1.0e-8;Penalty(1.0,2000.0)];
ineq = mk_tplate templateB' t;
};;

map (fun (i,j) -> add  (make_WHW i j)) [(0,0);(1,0);(2,0);(3,0);(0,1);(1,1);(2,1);(3,1)];;

(* SECTION ZHPXLTX *)

(*
add {
  id = "ZHPXLTX 9620775909 3,0,1 flatq";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.  There is some overlap between the analysis of
 these cases and PQFYWHW.  This case has been replaced with A and B below: 0.492=0.128+0.364";
(*
   The bounds on the four vertices $\\v_1,\\ldots,\\v_4$ gives
   the top simplex bound 
   \\[
   y_4 \\le \\op{edge\\_flat}(2h_0,2h_0,2h_0,2h_0,2h_0) < 4.37
   \\
*)
  tags = [Cfsqp;Xconvert;Tex;Deprecated];
  ineq =all_forall `ineq 
   [
     (&2,y1,&2 * h0);
     (&2,y2,&2 * h0);
     (&2,y3,&2 * h0);
     (sqrt8,y4,#3.0);
     (&2,y5,&2 * h0);
     (&2,y6,&2 * h0);
     (&2,y7,&2 * h0);
     (&2 * h0,y8,sqrt8);
     (&2,y9,&2 * h0)
   ]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9  > #0.492) )`;
};;
*)

add {
  id = "ZHPXLTX 9620775909 3,0,1 flatq A";
  doc="Further dimension reduction beyond what has ben done is possible on $y_4$ and $y_5$. 
    This could be simplified further:
    by the second derivatives estimates (2986512...), we can reduce to $y_4$ extremal.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
     (&2,y1,&2 * h0);
     (&2,y2,&2 * h0);
     (&2,y3,&2 * h0);
     (sqrt8,y4,#3.0);
     (&2,y5,&2 * h0);
     (&2,y6,&2 * h0)
   ]
( taum y1 y2 y3 y4 y5 y6  > #0.128 - (y4 - sqrt8) * #0.0742 + (y2 + y3 - #4.0) * #0.09 )`;
};;

add {
  id = "ZHPXLTX 9620775909 3,0,1 flatq B";
  doc="Further dimension reduction is possible.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
     (&2,y1,&2 * h0);
     (&2,y2,&2 * h0);
     (&2,y3,&2 * h0);
     (sqrt8,y4,#3.0);
     (&2,y5,&2 * h0);
     (&2 * h0,y6,sqrt8)
   ]
( taum y1 y2 y3 y4 y5 y6  > #0.364 + (y4- sqrt8) * #0.0742  - (y2 + y3 - #4.0) * #0.09 )`;
};;

add {
  id = "ZHPXLTX 9620775909 2,0,1";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (sqrt8,y4,sqrt8);
   (&2,y5,&2 * h0);
   (&2,y6,&2 * h0)
   ]
( taum y1 y2 y3 y4 y5 y6   > #0.128)`;
};;

add {
  id = "ZHPXLTX 9620775909 1,1,1";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (sqrt8,y4,sqrt8);
   (&2 * h0,y5,sqrt8);
   (&2,y6,&2 * h0)
   ]
( taum y1 y2 y3 y4 y5 y6   > #0.349)`;
};;

add {
  id = "ZHPXLTX 9620775909 1,0,2";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (sqrt8,y4,sqrt8);
   (sqrt8,y5,sqrt8);
   (&2,y6,&2 * h0)
   ]
( taum y1 y2 y3 y4 y5 y6   > #0.44)`;
};;

add {
  id = "ZHPXLTX 9620775909 3,1,0 flat A1";
  doc = "Nonstandard linear program that is not auto-generated.
    This relates to the d(3,1,0) estimate for a quad with a flat dart.
    This shows that if the diagonal is greater than 3.0, then the dart cannot be flat.
   We have used monotonicity on the edge $y_4$.";
  tags=[Cfsqp;Xconvert];
  ineq= all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (sqrt8,y4,sqrt8);
   (#3.0,y5,&4 * h0);
   (&2,y6,&2 * h0)
 ]
 ( (dih_y y1 y2 y3 y4 y5 y6  < #1.7) \/   (delta4_y y1 y2 y3 y4 y5 y6 > &0) \/  (delta_y y1 y2 y3 y4 y5 y6 < &10) )`;
};;


add {
  id = "ZHPXLTX 9620775909 3,1,0 flat A2";
  doc = "Nonstandard linear program that is not auto-generated.
    This relates to the d(3,1,0) estimate for a quad with a flat dart.
    This shows that if the diagonal is greater than 3.0, then the dart cannot be flat.";
  tags=[Cfsqp;Xconvert];
  ineq= all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,sqrt8);
   (#3.0,y5,&4 * h0);
   (&2,y6,&2 * h0)
 ]
 ( (delta4_y y1 y2 y3 y4 y5 y6  > -- #0.41) \/ (delta_y y1 y2 y3 y4 y5 y6 > &10) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) )`;
};;
(* d4 > -0.41 > -0.82> Sqrt[4 Delta] Tan[Pi/2 - 1.7] ==> dih < 1.7 *)
 
add {
  id =  "ZHPXLTX 9620775909 3,1,0 flat B1";
  doc =  "Nonstandard linear program that is not auto-generated.
    This relates to the d(3,1,0) estimate for a quad with a flat dart.
    This shows that if the diagonal is greater than 3.0, then the dart cannot be flat.
    The angles sum to $1.7 + 1.44 = 3.14 < \\pi$. Use monotonicity on y4. ";
  tags=[Cfsqp;Xconvert];
  ineq= all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&2 * h0);
   (&2,y5,&2 * h0);
   (#3.0,y6,&4 * h0)
 ]
 (  (dih_y y1 y2 y3 y4 y5 y6 < #1.44) \/ 
  (delta4_y y1 y2 y3 y4 y5 y6 > #0.084 * delta_y y1 y2 y3 y4 y5 y6) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &10))`;
};;
(*  d4 > 0.084 delta ==>
    d4 > (2 Tan[Pi/2-1.44]/Sqrt[10]) Delta >= Tan[Pi/2-1.44] Sqrt[4 Delta] ==>
    dih < 1.44 
*)

add {
  id =  "ZHPXLTX 9620775909 3,1,0 flat B2 v2";
  doc =  "Nonstandard linear program that is not auto-generated.
    This relates to the d(3,1,0) estimate for a quad with a flat dart.
    This shows that if the diagonal is greater than 3.0, then the dart cannot be flat.
    The angles sum to $1.7 + 1.44 = 3.14 < \\pi$.";
  tags=[Cfsqp;Xconvert];
  ineq= all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2,y4,&2 * h0);
   (#3.0,y5,&4 * h0);
   (&2,y6,&2 * h0)
 ]
 ( (delta4_y y1 y2 y3 y4 y5 y6 > #0.832) \/ (delta_y y1 y2 y3 y4 y5 y6 > &10) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0))`;
};;
(* 0.832 > Tan[Pi/2 - 1.44] Sqrt[4 Delta] ==> dih3_y < 1.44 *)





addtex(Section,"Local Fan"," -- hexagons");;

add  {
id = "GYQVFXJ 6276701321";
doc = "
  Assume $r+s\\ge 4$.
 An edge of $E\\setminus S$ that is not at a flat node
  has length $2$.
  (We use \\case{flat~exists} to show that the edge is adjacent to one $b$ of
  length at least $2h_0$.)  Then let $c$ be the diagonal.
 % $a$ is the edge being deformed, $c$ is the diagonal.
 % $b$ is an adjacent of length at least $2h_0$.
 % added June 13, 2010. to help reduce the number of cases for pentagons and hexagons.
 This inequality was originally designed for hexagons, but it should help with pentagons too.
 ";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, (&2 * h0) pow 2);
  (&2 pow 2, b2, &4 pow 2);
  (&2 pow 2, c2, &4 pow 2)
  ]
   (num1 e1 e2 e3 a2 b2 c2 > &0)`;
};;

add  {
id = "GYQVFXJ 7755764695";
doc = "
If a diagonal is sufficiently long (at least $3.7$), then the two edges next to
an isolated flat will be as short as possible.  This lemma assumes the reduction
of \\ineq{GYQVFXJ 6276701321} to make the adjacent edge satisfy $b\\le 2$.
 % The diagonal condition holds  arc(2,2,3.7) < 2.435 < arc(2h0,2h0,2)3
 ";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (#2.9 pow 2, a2, #3.93 pow 2);
  ((&2/h0) pow 2, b2, &2 pow 2);
  (#3.7 pow 2, c2, &4 pow 2)
  ]
   (num1 e1 e2 e3 a2 b2 c2 > &0)`;
};;

addtex(Comment,"",
  "
  Nongeneric fans can be found in the closure of some of the families of hexagons.
  Some of the calculations can become singular at these nongeneric fans.  In particular,
  the dihedral angle formula can contain a term $0/0$.  

  It follows from the definition of $\\tau$ that on hexagons:
  \\[
  \\tau \\ge \\sum \\op{azim}(x) - 4 (\\pi + \\sol_0) = \\sol - 4\\sol_0,
  \\]
  where $\\sol$ is the solid angle of the local fan.  If $\\sol>d(6,0) + 4\\sol_0$,
  then the desired estimate on $\\tau$ holds.

  Consider the degenerate situation where two nodes $\\v$ and $\\w$ of a
  hexagon  are nearly
  parallel, so that 
  \\[
  \\arc_V(\\orz,\\v,\\w) \\approx \\pi.
  \\]  
  Assume that there are two flat nodes.
  Let $\\alpha(\\v)$ and $\\alpha(\\w)$ be the azimuth angles at $\\v$ and $\\w$.
  Let $\\beta,\\beta'$ be the azimuth angles at the two other nonflat nodes. 
  Assume that each edge satisfies $\\arc_V(\\orz,\\v_i,\\v_{i+1})\\le \\pi/3$. 
  If we have
  \\begin{equation}\\label{eqn:alpha}
  \\alpha(\\v)\\ge 1.55,\quad
  \\alpha(\\w)\\ge 1.55,\quad
  \\beta\\ge \\pi - 0.068,\quad
  \\beta'\\ge\\pi - 0.068,
  \\end{equation}
  then the solid angle is greater than $d(6,0)+4\\sol_0$ as desired, so that the
  main esimate holds.

  We claim that if \\eqref{eqn:alpha} fails, then 
  \\begin{equation}\\label{eqn:308}
  \\arc_V(\\orz,\\v,\\w) < \\arc(2,2,3.9985).
  \\end{equation}
  This claim has two cases up to symmetry.  First assume that $\\alpha(\\v)<1.55$.
  In this case, \\ineq{GYQVFXJ 4417380956} shows that some node $\\u$ adjacent
 to $\\v$ satisfies $\\normo{\\v}\\ge 2.1$.  It follows that
  \\[
  \arc_V(\\orz,\\v,\\w) \le \\arc(2,2.1,2)2+\\arc(2,2,2) < \\arc(2,2,3.9985).
  \\]


  In the other case of the claim, we may assume that $\\beta < \\pi - 0.068$.
  This is proved in \\ineq{GYQVFXJ~7667414054}.
  
  From \\eqref{eqn:308}, it follows that the projections $\\v^*$ and $\\w^*$ of
  $\\v$ and $\\w$ to the unit sphere satisfy $2\\norm{\\v^*}{\\w^*} < 3.9985$,
  because
  \\[
   3.08681 < \\arc(2,2,3.9985).
  \\]
  The bound $3.9985$ is used in some of the inequalities that follow so that we can
  avoid the nongeneric behavior at $4$.
  ");;

add  {
 id = "GYQVFXJ 4417380956";
 doc = "The dihedral angle of a simplex is greater than $1.55$ if various edge conditions
  hold.";
 ineq = all_forall `ineq
  [(&2, y1, &2 * h0);
   (&2, y2, #2.1);
   (&2, y3, #2.1);
   (&2 * h0,y4,&2 * h0);
   (&2,y5,&2);
   (&2,y6,&2)
  ]
    (dih_y y1 y2 y3 y4 y5 y6 > #1.55)`;
 tags = [Tex;Cfsqp;Flypaper;Xconvert];
};;

(*
add  {
 id = "GYQVFXJ 7667414054";
 doc = "This is an upper bound of $3.9985$ on an edge of a simplex.  The monotonicity
  of the dihedral angle as a function of the opposite edge is used.
  By taking the tangent of both sides, this ineq results from -b and -c below.";
 ineq = all_forall `ineq
  [(&2,y1,&2);
   (&2,y2,&2);
   (&2,y3,&2);
   ( (#3.9985),y4, (#3.9985));
   (&2 / h0,y5,&2);
   (&2 / h0,y6,&2 * sqrt(&3))
  ]
    (dih_y y1 y2 y3 y4 y5 y6 > pi - #0.068)`;
 tags = [Tex;Cfsqp;Flypaper;Xconvert;Derived;Deprecated];
};;
*)

add {
 id = "GYQVFXJ 7667414054 a";
 doc = "This is an upper bound of $3.9985$ on an edge of a simplex.  The monotonicity
  of the dihedral angle as a function of the opposite edge is used.";
 ineq = all_forall `ineq
  [(&2,y1,&2);
   (&2,y2,&2);
   (&2,y3,&2);
   ( (#3.9985),y4, (#3.9985));
   (&2 / h0,y5,&2);
   (&2 / h0,y6,&2 * sqrt(&3))
  ]
   ( ( delta4_y y1 y2 y3 y4 y5 y6 < -- #40.0)   )`;
 tags = [Tex;Cfsqp;Flypaper;Xconvert];
};;

add {
 id = "GYQVFXJ 7667414054 b";  
 doc = "This is an upper bound of $3.9985$ on an edge of a simplex.  The monotonicity
  of the dihedral angle as a function of the opposite edge is used.";
 ineq = all_forall `ineq
  [(&2,y1,&2);
   (&2,y2,&2);
   (&2,y3,&2);
   ( (#3.9985),y4, (#3.9985));
   (&2 / h0,y5,&2);
   (&2 / h0,y6,&2 * sqrt(&3))
  ]
   ( (dih_y y1 y2 y3 y4 y5 y6 > pi - #0.068) \/ (delta_y y1 y2 y3 y4 y5 y6 < #1.85))`;
 tags = [Tex;Cfsqp;Flypaper;Xconvert;Penalty(50.0,500.0)];
};;

(* Case hex A: v1...v6 with v2 v5 flat, diag = y14. *)
let template_hexA = `\y12 y2max y45 y5max diagmax. (ineq
  [
(&2,y1,&2 *h0);
(&2,y2,y2max);
(&2,y3,&2 *h0);
(&2,y4,&2 *h0);
(&2,y5,y5max);
(&2,y6,&2 *h0);
(&2 *h0,diag,diagmax)
  ]
  (
    let y23 = y12 in
    let y56 = y45 in
    let y16 = &2 in
    let y34 = &2 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
    let y46 = edge_flat y5 y4 y6       y56 y45 in 
       (taum y1 y3 y4 y34 diag y13 + flat_term y2 + 
         taum y4 y6 y1 y16 diag y46 + flat_term y5 > tame_table_d 6 0) \/
   (dih_y y1 y3 y4 y34 diag y13 + dih_y y1 y6 y4 y46 diag y16 <
          dih_y y1 y2 y6 (&2 * h0) y16 y12) \/
  ( dih_y y1 y3 y4 y34 diag y13 + dih_y y1 y6 y4 y46 diag y16 > pi) \/  
   (dih_y y6 y1 y4 diag y46 y16 < dih_y y6 y1 y5 (&2 * h0) y56 y16) \/    
   (dih_y y3 y1 y4 diag y34 y13 < dih_y y3 y2 y4 (&2 * h0) y34 y23) \/    
     (delta_y y1 y3 y4 y34 diag y13 < &0) \/
     (delta_y y4 y6 y1 y16 diag y13 < &0)  ))`;;

let make_hexA i  = 
  let r = match  i with
   0 ->  [`&2`;`&2 * h0`;`&2`;`&2 * h0`;`#3.9985`]
    |1 ->[`&2`;`&2 * h0`;`&2 * h0`;`&2`;`#3.7`]
    |2 ->[`&2 * h0`;`&2`;`&2 * h0`;`&2`;`#3.7`] 
    | _ ->  failwith "make_hexA" in
{
id = Printf.sprintf "GYQVFXJ hexA %d" i;
doc = "This inequality is the main hexagon inequality
  with two flat nodes $\\v_2$ $\\v_5$, at opposite vertices of the hexagon.
  This is an effective quadrilateral, with variables $y_1,\\ldots,y_6$ and diagonal
  $y_{14}$.
  Some reductions are used beyond those mentioned in the flypaper.
  \\begin{enumerate}
  \\item $y_{34}=y_{16}=2$.
  \\item if the diag $y_{14}$ is greater than $3.7$, 
      then $y_{12}=y_{23}=y_{45}=y_{56}=2$.   
  \\item $y_{14}\\le 3.9985$.
  \\item By symmetry, we can assume that $y_{12}\\le y_{56}$.
  \\end{enumerate}
  The reductions are justified by the preceding calculations.
  There are three cases, depending on whether the edges at $\\v_2$ and $\\v_5$
  are as short or as long as possible.
  ";
tags = (if (i=0) then [Tex] else []) @ [Flypaper;Penalty(5.0,50.0);Xconvert];
ineq = mk_tplate template_hexA r;
};;

map (fun i -> add (make_hexA i)) (0--2);;

(* case hex B with v2 v6 flat, diag=y35 *)

let template_hexB = `\y12 y2max y56 y6max. (ineq
  [
(&2,y1,&2 *h0);
(&2,y2,y2max);
(&2,y3,&2 *h0);
(&2,y4,&2 *h0);
(&2,y5,&2 *h0);
(&2,y6,y6max);
(&2 *h0,diag,&2 * sqrt(&3))
  ]
  (
    let y23 = y12 in
    let y16 = y56 in
    let y34 = &2 in
    let y45 = &2 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
    let y15 = edge_flat y6 y1 y5       y56 y16 in 
       (taum y1 y3 y5 diag y15 y13 + flat_term y2 + 
         taum y4 y3 y5 diag y45 y34 + flat_term y6 > tame_table_d 6 0)  \/
     (delta_y y4 y3 y5 diag y45 y34 < &0) \/
    (dih_y y1 y3 y5 diag y15 y13 < dih_y y1 y2 y6 (&2 *h0) y16 y12 )))`;;

let make_hexB i  = 
  let r = match  i with
   0 ->  [`&2`;`&2 * h0`;`&2`;`&2 * h0`]
    |1 ->[`&2`;`&2 * h0`;`&2 * h0`;`&2`]
    |2 ->[`&2 * h0`;`&2`;`&2 * h0`;`&2`] 
    | _ ->  failwith "make_hexB" in
{
id = Printf.sprintf "GYQVFXJ hexB %d" i;
doc = "This inequality is the main hexagon inequality
  with two flat nodes, at nodes $\\v_2$ and $\\v_6$.
  This is an effective quadrilateral with variables for the lengths $y_1,\\ldots,y_6$
  and the diagonal $y_{35}$.
  Some reductions are used beyond those mentioned in the flypaper.
  \\begin{enumerate}
  \\item $y_{34}=y_{45}=2$.
  \\item The diagonal bound $y_{35}\\le 2\sqrt3$ comes from 
       $\\arc(2,2,y_{34})+\\arc(2,2,y_{45})\\le 2\\pi/3$.
  \\end{enumerate}
  The reductions are justified by the preceding calculations.
  There are three cases, depending on whether the edges at $\\v_2$ and $\\v_6$
  are as short or as long as possible.
  ";
tags = (if (i=0) then [Tex] else []) @ [Flypaper;Penalty(5.0,50.0);Xconvert];
ineq = mk_tplate template_hexB r;
};;

map (fun i -> add (make_hexB i)) (0--2);;


let template_hexC = `\(y12:real) (y2max:real) (y34:real) (y4max:real) (y56:real) (y6max:real). (ineq
  [
(&2,y1,&2 *h0);
(&2,y2,y2max);
(&2,y3,&2 *h0);
(&2,y4,y4max);
(&2,y5,&2 *h0);
(&2,y6,y6max)
  ]
  (
    let y23 = y12 in
    let y45 = y34 in
    let y16 = y56 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
    let y35 = edge_flat y4 y3 y5       y45 y34 in
    let y15 = edge_flat y6 y1 y5       y56 y16 in
       (taum y1 y3 y5 y35 y15 y13 + flat_term y2 + 
         flat_term y4 + flat_term y6 > tame_table_d 6 0) ))`;;

let make_hexC i  = 
  let short = [`&2`;`&2*h0`] in
  let long = [`&2*h0`;`&2`] in 
  let r = match  i with
   0 ->  short @ short @ short
    |1 ->short @ short @ long
    |2 ->short @ long @ long
    | _ ->  failwith "make_hexC" in
{
id = Printf.sprintf "GYQVFXJ hexC %d" i;
doc = "This inequality is the main hexagon inequality
  with three flat nodes, at nodes $\\v_2$, $\\v_4$, and $\\v_6$.
  This is an effective triangle, with variables $y_1,\\ldots,y_6$.
  Some reductions are used beyond those mentioned in the flypaper.
  \\begin{enumerate}
  \\item Symmetry is used to make $y_{12}\\le y_{34}\\le y_{56}$.
  \\item Not all edges are long, because $\\arc(2,2h0,2h0)6 > 2\\pi$, which
   is contrary to the perimeter estimate.
  \\end{enumerate}
  There are three cases, depending on whether the edges at the flat nodes 
  are as short or as long as possible.
  This case may have numerical instabilities when the perimeter is  $2\\pi$.
  ";
tags = (if (i=0) then [Tex] else []) @ [Flypaper;Penalty(5.0,50.0);Xconvert];
ineq = mk_tplate template_hexC r;
};;

map (fun i -> add (make_hexC i)) (0--2);;

(* next hex D, adjacent flats *)

let template_hexD = `\y2min y2max y3min y3max. (ineq
  [
(&2,y1,&2 *h0);
(y2min,y2,y2max);
(y3min,y3,y3max);
(&2,y4,&2 *h0);
(&2,y5,&2 *h0);
(&2,y6,&2 *h0)
  ]
  (
    let y12 = &2 in
    let y23 = &2 in
    let y34 = &2 in
    let y45 = &2 in
    let y56 = &2 in
    let y16 = &2 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
    let y14 = edge_flat y3 y1 y4       y34 y13 in
    let y46 = edge_flat y5 y4 y6       y56 y45 in
       (taum y1 y4 y6 y46 y16 y14 + flat_term y2 + 
         flat_term y3 + flat_term y5 > tame_table_d 6 0) \/
      (y14 > #3.9985 ) \/
     (dih_y y1 y4 y6 y46 y16 y14 < dih_y y1 y2 y6 (&2 * h0) y16 y12) ))`;;

let make_hexD i  = 
  let full = [`&2`;`&2*h0`] in
  let short = [`&2`;`&2`] in
  let long = [`&2*h0`;`&2 *h0`] in 
  let r = match  i with
   0 ->  full @ short
    |1 ->full @ long
    |2 ->short @ full
    |3 -> long @ full
    | _ ->  failwith "make_hexD" in
{
id = Printf.sprintf "GYQVFXJ hexD %d" i;
doc = "This inequality is the main hexagon inequality
  with three flat nodes, at nodes $\\v_2$, $\\v_3$, and $\\v_5$.
  This is an effective triangle with variables $y_1,\\ldots,y_6$.
  Some reductions are used beyond those mentioned in the flypaper.
  \\begin{enumerate}
  \\item Contractions of edges make $y_{12}=\\cdots=y_{56}=y_{16}=2$.
  \\item The case $y_{14}\\ge 3.9985$ has been done by direct argument above.
  \\end{enumerate}
  By \\case{flat~extremal}, either $y_2$ or $y_3$ is extremal.
  There are four cases, depending on which edge $y_2$ or $y_3$ is extremal,
  and whether it is short or long.
  ";
tags = (if (i=0) then [Tex] else []) @ [Flypaper;Penalty(5.0,50.0);Xconvert];
ineq = mk_tplate template_hexD r;
};;

map (fun i -> add (make_hexD i)) (0--3);;


addtex (Section,"Tame Hypermap","");;

add {
 id = "4652969746 1";
 doc = "This is the calculation of the (p,q)=(5,0) entry in tame table b.";
 tags=[Cfsqp;Tex;Tablelp;Xconvert];
 ineq = all_forall `ineq
 [
  (&2,y1,#2.52);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (#2.1771,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
 ]
 (taum y1 y2 y3 y4 y5 y6 > #0.04)`;
};;


add {
 id = "4652969746 2";
 doc = "This is the calculation of the (p,q)=(5,0) entry in tame table b.";
 tags=[Cfsqp;Tex;Tablelp;Xconvert];
 ineq = all_forall `ineq
 [
  (&2,y1,#2.52);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (&2,y4,#2.1771);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
 ]
 (taum y1 y2 y3 y4 y5 y6 - #0.312 * (dih_y y1 y2 y3 y4 y5 y6 - &2 * pi/ &5)  > #0.04 / &5)`;
};;


(* interval arithmetic bounds DART4 *)

add {
  id = "2570626711";
  doc="";
  tags = [Cfsqp;Tablelp;Xconvert;Tex];
  ineq = all_forall `ineq
    [ 
      (#2.0,y1,&2 * h0);
      (#2.0,y2,&2 * h0);
      (#2.0,y3,&2 * h0);
      (&2 * h0,y4,&2 * h0);
      (#2.0,y5,&2 * h0);
      (#2.0,y6,&2 * h0)]
   (dih_y y1 y2 y3 y4 y5 y6 > #1.15)`;
};;

addtex(Section,"Linear Programs","");;

let dart_classes = ref [];;

let define_dart t = 
  let th = new_definition t in
  let _ = (dart_classes := th :: (!dart_classes)) in
     th;;

let dart_std4 = define_dart `dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9 = 
      [
      (#2.0,y1,&2 * h0);
      (#2.0,y2,&2 * h0);
      (#2.0,y3,&2 * h0);
      (&2 * h0,y4,#4.37);
      (#2.0,y5,&2 * h0);
      (#2.0,y6,&2 * h0);
      (#2.0,y7,&2 * h0);
      (#2.0,y8,&2 * h0);
      (#2.0,y9,&2 * h0)]`;;

(*
add {
  id = "8673686234";
  doc="Special Nonlinear Inequality for Lp.  This is not autogenerated.
   $y_1$ is the shorter diagonal.
   Ran for 95 million steps and it didn't pass. Replaced with -a, -b, -c below.";
  tags = [Cfsqp;Tex;Xconvert;Deprecated];
  ineq =  all_forall `ineq [
  (sqrt8,y1,#3.0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (sqrt8,y4,&4 * h0);
    (&2,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
    ((y2 + y3 + y5 + y6 - #7.99 > #2.75 * (y1 - sqrt8)) \/
     (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
     (y4 < y1))  `;
};;
*)

add  {
  id = "8673686234 a";
  doc="Special Nonlinear Inequality for Lp.  This is not autogenerated.
   $y_1$ is the shorter diagonal.
  Cut out a piece near {sqrt8,2,2,sqrt8,2,2}.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq =  all_forall `ineq [
  (sqrt8,y1,#3.0);
    (&2,y2,#2.07);
    (&2,y3,#2.07);
    (sqrt8,y4,&4 * h0);
    (&2,y5,#2.07);
    (&2,y6,#2.07)
  ]
    ((y2 + y3 + y5 + y6 - #7.99 - #0.00385 * delta_y y1 y2 y3 y4 y5 y6 >   #2.75 * ((y1 + y4)/ &2 - sqrt8)) 
    )  `;
};;

add {
  id = "8673686234 b";
  doc="Special Nonlinear Inequality for Lp.  This is not autogenerated.
   $y_1$ is the shorter diagonal.  This is the case $y_4\\ge 3$.
   Stretch $y_4$ until $\\Delta=0$, then contract $y_4$ within the plane until $y_4=3$.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq =  all_forall `ineq [
  (sqrt8,y1,#3.0);
    (#2.07,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (#3.0,y4,#3.0);
    (&2,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
    ((y2 + y3 + y5 + y6 - #7.99 > #2.75 * (y1 - sqrt8)) \/
     (delta_y y1 y2 y3 y4 y5 y6 < &0)  )  `;
};;

add  {
  id = "8673686234 c";
  doc="Special Nonlinear Inequality for Lp.  This is not autogenerated.
   $y_1$ is the shorter diagonal.  This case takes $y_4\\le 3$.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq =  all_forall `ineq [
  (sqrt8,y1,#3.0);
    (#2.07,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (sqrt8,y4,#3.0);
    (&2,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
    ((y2 + y3 + y5 + y6 - #7.99 >   #2.75 * ((y1 + y4)/ &2 - sqrt8)) \/
   (y2 + y3 + y5 + y6 - #7.99 - #0.00385 * delta_y y1 y2 y3 y4 y5 y6 >   #2.75 * ((y1 + y4)/ &2 - sqrt8)) \/
     (delta_y y1 y2 y3 y4 y5 y6 < &0)  )  `;
};;

add  {
  id = "7043724150 a";
  doc="We can use dimension reduction methods to reduce the number of variables.";
(*
   The bounds on the four vertices $\\v_1,\\ldots,\\v_4$ gives
   the top simplex bound 
   \\[
   y_4 \\le \\op{edge\\_flat}(2h_0,2h_0,2h_0,2h_0,2h_0) < 4.37
   \\
*)
(* \/ (delta_y y4 y9 y6 sqrt8   y5 y8 < &0) *)
  tags = [Cfsqp;Tablelp;Lp;Xconvert;Tex;Dim_red_backsym;Quad_cluster 0.001];
  ineq =all_forall `ineq (dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9)
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 + #4.72 * dih_y y1 y2 y3 y4 y5 y6 - #6.248 > #0.0) \/
  ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < sqrt8 ) )`;
};;

add {
  id = "7043724150 a reduced";
  doc="We can use dimension reduction methods to reduce the number of variables.
   This is the reduced version that occurs when the cross diagonal is minimal.
     This reduction allows nonconvex deformations.";
  tags = [Cfsqp;Xconvert;Tex;];
  ineq =all_forall `ineq [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 + #4.72 * dih_y y1 y2 y3 y4 y5 y6 - #6.248 / &2 > #0.0)`;
};;


add
 {
  id = "6944699408 a";
  doc="We can use dimension reduction methods to reduce the number of variables.";
  tags = [Cfsqp;Tablelp;Lp;Xconvert;Tex;Dim_red_backsym;Quad_cluster 0.0005];
  ineq =  all_forall `ineq (dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9)
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 + #0.972 * dih_y y1 y2 y3 y4 y5 y6 -  #1.707 > #0.0) \/
   ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < sqrt8 ))`;
};;
(* (delta_y y4 y9 y6 sqrt8   y5 y8 < &0) *)

add {
  id = "6944699408 a reduced";
  doc="We can use dimension reduction methods to reduce the number of variables.
  This is the reduced version that occurs when the cross diagonal is minimal.
   This reduction allows nonconvex deformations." ;
  tags = [Cfsqp;Xconvert;Tex];
  ineq =  all_forall `ineq [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,sqrt8);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 + #0.972 * dih_y y1 y2 y3 y4 y5 y6 -  #1.707 / &2 > #0.0)`;
};;
 
(* constant 1.433 corrected 2010-06-14 *)

add {
  id = "4240815464 a";
  doc="";
  tags = [Cfsqp;Tablelp;Tex;Xconvert;Lp;Penalty(10000.0,500.0);Dim_red_backsym;Quad_cluster 0.0001];
  ineq = all_forall `ineq (dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9)
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 + 
   #0.7573 *dih_y y1 y2 y3 y4 y5 y6 - #1.433 > #0.0) \/
  ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < sqrt8 ) \/
( delta_y y1 y2 y3 y4 y5 y6 < &0) \/
( delta_y y7 y2 y3 y4 y8 y9 < &0)) `;
};;


add {
  id = "4240815464 a reduced";
  doc="We can use dimension reduction methods to reduce the number of variables.
  This is the reduced version that occurs when the cross diagonal is minimal.
    This reduction allows nonconvex deformations.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,sqrt8);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 + 
   #0.7573 *dih_y y1 y2 y3 y4 y5 y6 - #1.433 / &2 > #0.0)`;
};;

add {
  id = "3862621143 a";
  doc="";
  tags = [Cfsqp;Tablelp;Tex;Xconvert;Lp;Penalty(10000.0,500.0);Dim_red_backsym;Quad_cluster 0.0005];
  ineq = all_forall `ineq (dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9)
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 - #0.453 * dih_y y1 y2 y3 y4 y5 y6 +  #0.777 > #0.0) \/
 ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < sqrt8 )  \/
( delta_y y1 y2 y3 y4 y5 y6 < &0) \/
( delta_y y7 y2 y3 y4 y8 y9 < &0)) `;
};;

add
 {
  id = "3862621143 a reduced";
  doc= "We can use dimension reduction methods to reduce the number of variables.
  This is the reduced version that occurs when the cross diagonal is minimal.
  This reduction allows nonconvex deformations.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,sqrt8);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 - #0.453 * dih_y y1 y2 y3 y4 y5 y6 +  #0.777 / &2  > #0.0)`;
};;

add {
  id = "5691615370";
  doc="\\claim{If a quadrilateral standard region has both diagonals at least $3$, then
  the perimeter is at least $8.472$.}  Otherwise,
  some configuration has perimeter $8.472$.   
  We may disregard the origin $\\orz$ and
  show the result holds for $\\v_1,\\ldots,\\v_4$.  We may increase a diagonal,
  with fixed perimeter, until the four points are coplanar.  We may contract the
  diagonals until both equal $3$.  This calculation provides the desired inequality.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq = all_forall `ineq
  [
  (#3.0,y1,#3.0);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (#3.0,y4,#3.0);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]
  ((delta_y y1 y2 y3 y4 y5 y6 < &0) \/ (y2 + y3 + y5 + y6 > #8.472))`;
};;


(* Second derivative (2986512...) dimension reduction is used to reduce $y_4$ (the diagonal) to 3. *)

(*
let dart4_diag3_a = define_dart `dart4_diag3_a y1 y2 y3 y4 y5 y6 y7 y8 y9 =
    [
  (&2,y1,#2.52);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (&3,y4,&2 * #2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52);
  (&2,y7,#2.52);
  (&2,y8,#2.52);
  (&2,y9,#2.52)
  ]`;;
*)

let dart4_diag3_b = define_dart `dart4_diag3_b y1 y2 y3 y4 y5 y6 y7 y8 y9 =
    [
  (&2,y1,#2.52);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (&3,y4,&3);
  (&2,y5,#2.52);
  (&2,y6,#2.52);
  (&2,y7,#2.52);
  (&2,y8,#2.52);
  (&2,y9,#2.52)
  ]`;;

(*
add {
  id = "7676202716 b";
  doc="By second-derivative dimension reduction (2986512...), we may assume that the shorter
       diagonal is  $y_4 = 3$. 
       There is no further dimension reduction on this one.";
  tags = [Cfsqp;Xconvert;Lp;Tex;Penalty(50000.0,500.0);Quad_cluster 0.01];
  ineq = all_forall `ineq (dart4_diag3_b y1 y2 y3 y4 y5 y6 y7 y8 y9)
((tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 - #0.46 
    - (y5 + y6 + y8 + y9 - #8.472)* #0.45 > &0) \/ 
  (enclosed  y1 y5 y6 y4 y2 y3 y7 y8 y9 < &3 ))`;
};;
*)

add {
  id = "7676202716D";
  doc="By second-derivative dimension reduction (2986512...), we may assume that the shorter
       diagonal is  $y_4 = 3$. 
       This inequality is derived from d, e, f below.";
  tags = [Cfsqp;Xconvert;Lp;Tex;Penalty(50000.0,500.0);Derived ["d e f"]];
  ineq = all_forall `ineq (dart4_diag3_b y1 y2 y3 y4 y5 y6 y7 y8 y9)
((tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 - #0.46 
    - (y5 + y6 + y8 + y9 - #8.472)* #0.45 > &0) \/ 
  (enclosed  y1 y5 y6 y4 y2 y3 y7 y8 y9 < &3 ))`;
};;

add
 {
  id = "7676202716 d";
  doc = "This is the secondary estimate for quadrilaterals with both diagonals greater
   than 3.0.  Dimension reduction can be used to simplify.  This is the reduced case
   with both diagonals 3.0.  The second disjunct is based in ineq (5691615...).
   It holds for both simplices if the appropriate diagonal is selected.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&3,y4,&3);
    (&2,y5,#2.472);
    (&2,y6,#2.472)
  ]
((taum y1 y2 y3 y4 y5 y6  + #0.05 * ( #8.472 / &2 - y5 - y6) 
    - (y5 + y6  - #8.472 / &2)* #0.45 > #0.46 / &2))`;
};;

add
 {
  id = "7676202716 e";
  doc = "This is the secondary estimate for quadrilaterals with both diagonals greater
   than 3.0.  Dimension reduction can be used to simplify.  This is the reduced case
   with both diagonals 3.0.  The second disjunct is based in ineq (5691615...).
   It holds for both simplices if the appropriate diagonal is selected.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&3,y4,&3);
    (#2.467,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
((taum y1 y2 y3 y4 y5 y6  
    - (y5 + y6  - #8.472 / &2)* #0.45 > #0.24 ))`;
};;

add
 {
  id = "7676202716 f";
  doc = "This is the secondary estimate for quadrilaterals with both diagonals greater
   than 3.0.  Dimension reduction can be used to simplify.  This is the reduced case
   with both diagonals 3.0.  The second disjunct is based in ineq (5691615...).
   It holds for both simplices if the appropriate diagonal is selected.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&3,y4,&3);
    (&2,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
((taum y1 y2 y3 y4 y5 y6  - (y5 + y6  - #8.472 / &2)* #0.45  >  #0.22))`;
};;


add {
  id = "9563139965D";
  doc = "This is the secondary estimate for quadrilaterals with both diagonals greater
   than 3.0.  Dimension reduction can be used to simplify.
   Derived from c,d,e,f below";
  tags = [Cfsqp;Xconvert;Lp;Tex;Penalty(5.0,500.0);Derived ["d e f"]];
  ineq = all_forall `ineq (dart4_diag3_b y1 y2 y3 y4 y5 y6 y7 y8 y9)
((tauq y1 y2 y3 y4 y5 y6 y7 y8 y9  > #0.467) \/ 
  (enclosed  y1 y5 y6 y4 y2 y3 y7 y8 y9 < &3 ))`;
};;


(* Change to 9563139965, change the constant 0.496 to 0.467, then use dimension
    reduction below to prove with 5D calcs. Dec 18, 2010.  *)

(*
add
 {
  id = "9563139965 c";
  doc = "   ";
  tags = [Cfsqp;Xconvert;Tex;Deprecated];  (* not needed in derivation *)
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&3,y4,&3);
    (&2,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
((taum y1 y2 y3 y4 y5 y6  > #0.467 / &2) \/ (y5 + y6 < #8.472 / &2 ))`;
};;
*)


add
 {
  id = "9563139965 d";
  doc = "This is the secondary estimate for quadrilaterals with both diagonals greater
   than 3.0.  Dimension reduction can be used to simplify.  This is the reduced case
   with both diagonals 3.0.  The second disjunct is based in ineq (5691615...).
   It holds for both simplices if the appropriate diagonal is selected.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&3,y4,&3);
    (&2,y5,#2.472);
    (&2,y6,#2.472)
  ]
((taum y1 y2 y3 y4 y5 y6  + #0.5 * ( #8.472 / &2 - y5 - y6) > #0.467 / &2))`;
};;

add
 {
  id = "9563139965 e";
  doc = "This is the secondary estimate for quadrilaterals with both diagonals greater
   than 3.0.  Dimension reduction can be used to simplify.  This is the reduced case
   with both diagonals 3.0.  The second disjunct is based in ineq (5691615...).
   It holds for both simplices if the appropriate diagonal is selected.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&3,y4,&3);
    (#2.467,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
((taum y1 y2 y3 y4 y5 y6   > #0.467 - #0.115))`;
};;

add
 {
  id = "9563139965 f";
  doc = "This is the secondary estimate for quadrilaterals with both diagonals greater
   than 3.0.  Dimension reduction can be used to simplify.  This is the reduced case
   with both diagonals 3.0.  The second disjunct is based in ineq (5691615...).
   It holds for both simplices if the appropriate diagonal is selected.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&3,y4,&3);
    (&2,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
((taum y1 y2 y3 y4 y5 y6   >  #0.115))`;
};;


addtex(Section,"Linear Programs"," -- dart\_ std3");;

let dart_std3 = define_dart `dart_std3 y1 y2 y3 y4 y5 y6 =  [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.0,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]`;;



(* Tame table B inequalities *)

add {
  id = "5735387903";
  doc="";
  tags = [Cfsqp;Tablelp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3 y1 y2 y3 y4 y5 y6)
   (dih_y y1 y2 y3 y4 y5 y6 > #0.852)`;
};;
 

(* changed from #1.893, to #1.9, for reasons I forget,
    thales, 2010-02-28, back again 2010-06-15. *)

add {
  id = "5490182221";
  doc="";
  tags = [Cfsqp;Tablelp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3 y1 y2 y3 y4 y5 y6)
   (dih_y y1 y2 y3 y4 y5 y6 < #1.893)`;
};;


(*
let tame_hypermap_list = 
  map (fun t -> (getexact t).ineq) ["5735387903";"5490182221";"2570626711"];;
*)

add {
  id = "3296257235";
  doc="";
  tags = [Cfsqp;Tablelp;Xconvert;Lp;Tex];
  ineq =  all_forall `ineq (dart_std3 y1 y2 y3 y4 y5 y6)
 (taum y1 y2 y3 y4 y5 y6 + #0.626 * dih_y y1 y2 y3 y4 y5 y6 - #0.77 > #0.0)`;
};;

add {
  id = "8519146937";
  doc="";
  tags = [Cfsqp;Tablelp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3 y1 y2 y3 y4 y5 y6)
    ( taum y1 y2 y3 y4 y5 y6 -  #0.259 * dih_y y1 y2 y3 y4 y5 y6 + #0.32 > #0.0)`;
};;

add {
  id = "4667071578";
  doc="";
  tags = [Cfsqp;Tablelp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3 y1 y2 y3 y4 y5 y6)
    ( taum y1 y2 y3 y4 y5 y6 -  #0.507 * dih_y y1 y2 y3 y4 y5 y6 + #0.724 > #0.0)`;
};;

add {
  id = "1395142356";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq
    (dart_std3 y1 y2 y3 y4 y5 y6)
   ( taum y1 y2 y3 y4 y5 y6 + #0.001 - #0.18 * (y1 + y2 + y3 - #6.0) -
  #0.125 * (y4 + y5 + y6 - #6.0) > #0.0)`;
};;

add {
  id = "7394240696";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq
    (dart_std3 y1 y2 y3 y4 y5 y6)
( sol_y y1 y2 y3 y4 y5 y6 - #0.55125 - #0.196 * (y4 + y5 + y6 - #6.0) +
  #0.38 * (y1 + y2 + y3 - #6.0) > #0.0)`;
};;

add {
  id = "7726998381";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq =  all_forall `ineq
    (dart_std3 y1 y2 y3 y4 y5 y6) 
( -- sol_y y1 y2 y3 y4 y5 y6 + #0.5513 + 
  #0.3232 * (y4 + y5 + y6 - #6.0) -
  #0.151 * (y1 + y2 + y3 - #6.0)  > #0.0)`;
};;

add {
  id = "4047599236";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3 y1 y2 y3 y4 y5 y6)
( (dih_y y1 y2 y3 y4 y5 y6) - #1.2308 +  
  (#0.3639 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.235 * (y1 - #2.0)) -(#0.685 * (y4 - #2.0)) > #0.0)`;
};;

add {
  id = "3526497018";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq
    (dart_std3 y1 y2 y3 y4 y5 y6)
  ( (--dih_y y1 y2 y3 y4 y5 y6) + #1.231 - 
  (#0.152 * (y2 + y3 + y5 + y6 - #8.0))+
  (#0.5 * (y1 - #2.0)) + (#0.773 * (y4 - #2.0))> #0.0)`; 
};;

add {
  id = "5957966880";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq =  all_forall `ineq (dart_std3 y1 y2 y3 y4 y5 y6)
( (rhazim y1 y2 y3 y4 y5 y6) - #1.2308 +  
  (#0.3639 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.6 * (y1 - #2.0)) -(#0.685 * (y4 - #2.0)) > #0.0)`;
};;




addtex(Section,"Linear Programs"," -- dartXYZ");;

(*more interval arithmetic on nonstandard triangles*)

let dartX = define_dart `dartX y1 y2 y3 y4 y5 y6 = 
   [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,#2.52);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]`;;

add {
  id = "3020140039";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dartX y1 y2 y3 y4 y5 y6)
( (dih_y y1 y2 y3 y4 y5 y6) - #1.629 +  
  (#0.402 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.315 * (y1 - #2.0))  > #0.0)`;
};;

let dartY  = define_dart `dartY y1 y2 y3 y4 y5 y6 = 
  [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (sqrt8,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]`;;

add {
  id = "9414951439";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dartY y1 y2 y3 y4 y5 y6)
( (dih_y y1 y2 y3 y4 y5 y6) - #1.91 +  
  (#0.458 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.342 * (y1 - #2.0))  > #0.0)` ;
};;

let dart4_diag3  = define_dart `dart4_diag3 y1 y2 y3 y4 y5 y6 = 
   [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#3.0,y4,#3.0);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]`;;

add {
  id = "9995621667";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = 
 all_forall `ineq (dart4_diag3 y1 y2 y3 y4 y5 y6)
( (dih_y y1 y2 y3 y4 y5 y6) - #2.09 +  
  (#0.578 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.54 * (y1 - #2.0))  > #0.0)`;
};;

(*branch flat inequality*)

let apex_flat  = define_dart `apex_flat y1 y2 y3 y4 y5 y6 = 
   [ 
      (#2.0,y1,#2.52);
      (#2.0,y2,#2.52);
      (#2.0,y3,#2.52);
      (#2.52,y4,sqrt8);
      (#2.0,y5,#2.52);
      (#2.0,y6,#2.52)]`;;

add {
  id = "6988401556";
  doc="We can use extremal edge properties and the tame table D calculations
    to reduce to the case where $y_4=\\sqrt8$ and $y_5,y_6$ are extremal.";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (apex_flat y1 y2 y3 y4 y5 y6) 
(taum y1 y2 y3 y4 y5 y6 > #0.103)`;
};;

add {
  id = "8248508703";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq =  
 all_forall `ineq (apex_flat y1 y2 y3 y4 y5 y6)
( (taum y1 y2 y3 y4 y5 y6) - #0.1 -  
  (#0.265 * (y5 + y6 - #4.0)) -
  (#0.06 * (y4 - #2.52)) - (#0.16 * (y1 - #2.0)) - 
  (#0.115 * (y2 + y3 - #4.0))  > #0.0)`;
};;

add {
  id = "3318775219";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = 
 all_forall `ineq (apex_flat y1 y2 y3 y4 y5 y6)
( (dih_y y1 y2 y3 y4 y5 y6) - #1.629 +  
  (#0.414 * (y2 + y3 + y5 + y6 - #8.0)) -
  (#0.763 * (y4 - #2.52)) - 
  (#0.315 * (y1 - #2.0))  > #0.0)`;
};;

add {
  id = "9922699028";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = 
 all_forall `ineq (apex_flat y1 y2 y3 y4 y5 y6)
( (--dih_y y1 y2 y3 y4 y5 y6) + #1.6294 -  
  (#0.2213 * (y2 + y3 + y5 + y6 - #8.0)) +
  (#0.913 * (y4 - #2.52)) + 
  (#0.728 * (y1 - #2.0))  > #0.0)`;
};;

add {
  id = "5000076558";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Lpsymmetry;Tex];
  ineq = 
 all_forall `ineq (apex_flat y1 y2 y3 y4 y5 y6)
( (dih2_y y1 y2 y3 y4 y5 y6) - #1.083 +  
  (#0.6365 * (y1 - #2.0)) -
  (#0.198 * (y2 - #2.0)) + 
  (#0.352 * (y3 - #2.0)) + 
  (#0.416 * (y4 - #2.52)) - 
  (#0.66 * (y5 - #2.0)) + 
  (#0.071 * (y6 - #2.0)) > #0.0)`;
};;

add {
  id = "9251360200";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = 
 all_forall `ineq (apex_flat y1 y2 y3 y4 y5 y6)
( (rhazim y1 y2 y3 y4 y5 y6) - #1.629 -  
  (#0.866 * (y1 - #2.0)) +
  (#0.3805 * (y2 + y3 -  #4.0)) - 
  (#0.841 * (y4 - #2.52)) + 
  (#0.501 * (y5 + y6 -  #4.0))  > #0.0)`;
};;

add {
  id = "9756015945";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Lpsymmetry;Tex];
  ineq = 
 all_forall `ineq (apex_flat y1 y2 y3 y4 y5 y6)
( (rhazim2 y1 y2 y3 y4 y5 y6) - #1.08 +  
  (#0.6362 * (y1 - #2.0)) -
  (#0.565 * (y2 - #2.0)) + 
  (#0.359 * (y3 - #2.0)) + 
  (#0.416 * (y4 - #2.52)) - 
  (#0.666 * (y5 - #2.0)) + 
  (#0.061 * (y6 - #2.0)) > #0.0)`;
};;

let apex_A = define_dart `apex_A y1 y2 y3 y4 y5 y6 = 
  [(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4, #2.52);
(#2.52, y5, sqrt8);
(#2.52, y6, sqrt8)]`;;

add {
  id = "8082208587";
  doc="We can use extremal edge properties and the tame table D (1,2) calculations
    to reduce to the case where $y_4=\\sqrt8$ and $y_5,y_6$ are extremal.";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (apex_A y1 y2 y3 y4 y5 y6)
(taum y1 y2 y3 y4 y5 y6 > #0.2759)`;
};;

add {
  id = "5760733457";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (apex_A y1 y2 y3 y4 y5 y6)
   (dih_y y1 y2 y3 y4 y5 y6 - #1.0705 -( #0.1 * (y1 - #2)) + 
   (#0.424 * (y2 - #2.0)) + 
   (#0.424 * (y3 - #2.0)) - 
   (#0.594 * (y4 - #2.0)) + 
   (#0.124 * (y5 - #2.52)) + 
   (#0.124 * (y6 - #2.52)) > #0.0)`;
};;

add {
  id = "2563100177";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = 
all_forall `ineq (apex_A y1 y2 y3 y4 y5 y6)
( rhazim y1 y2 y3 y4 y5 y6 - #1.0685 - 
(#0.4635 * (y1 - #2.0)) + 
(#0.424 * (y2 - #2.0)) + 
(#0.424 * (y3 - #2.0)) - 
(#0.594 * (y4 - #2.0)) + 
(#0.124 * (y5 - #2.52)) + 
(#0.124 * (y6 - #2.52)) > #0.0)`;
};;

add {
  id = "7931207804";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = 
all_forall `ineq (apex_A y1 y2 y3 y4 y5 y6)
( taum y1 y2 y3 y4 y5 y6 - #0.27 +
(#0.0295 * (y1 - #2.0)) - 
(#0.0778 * (y2 - #2.0)) - 
(#0.0778 * (y3 - #2.0)) - 
(#0.37 * (y4 - #2.0)) - 
(#0.27 * (y5 - #2.52)) - 
(#0.27 * (y6 - #2.52)) > #0.0)`;
};;

let dart_std3_small = define_dart `dart_std3_small y1 y2 y3 y4 y5 y6 = 
 [(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(#2.0, y4, #2.25);
(#2.0, y5, #2.25);
(#2.0, y6, #2.25)]`;;

add {
  id = "9225295803";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq =  
all_forall `ineq (dart_std3_small y1 y2 y3 y4 y5 y6)
(taum y1 y2 y3 y4 y5 y6 + #0.0034 - 
(#0.166 * (y1 + y2 + y3 - #6.0)) - 
(#0.22 * (y4 + y5 + y6 - #6.0)) > #0.0)`; 
};;

add {
  id = "9291937879";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq =  
all_forall `ineq  (dart_std3_small y1 y2 y3 y4 y5 y6)
(dih_y y1 y2 y3 y4 y5 y6 - #1.23 - 
(#0.235 * (y1 - #2.0)) + 
(#0.362 * (y2 + y3 - #4.0)) - 
(#0.694 * (y4 - #2.0)) + 
(#0.26 * (y5 + y6 - #4.0)) > #0.0)`; 
};;

(* same domain but extra disjunct *)
let dart_std3_big = define_dart `dart_std3_big = dart_std3`;;

add {
  id = "7761782916";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq =  
all_forall `ineq  (dart_std3_big y1 y2 y3 y4 y5 y6)
((taum y1 y2 y3 y4 y5 y6 - #0.05 - (#0.137 * (y1 + y2 + y3 - #6.0)) 
  - (#0.17 * (y4 + y5 + y6 - #6.25)) > #0.0)\/
(y4 + y5 + y6 < #6.25))`; 
};;

add {
  id = "6224332984";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3_big y1 y2 y3 y4 y5 y6)
((sol_y y1 y2 y3 y4 y5 y6 - #0.589 + 
(#0.39 * (y1 + y2 + y3 - #6.0)) - 
(#0.235 * (y4 + y5 + y6 - #6.25)) > #0.0) \/
(y4 + y5 + y6 < #6.25))`;
};;

let apex_sup_flat = define_dart `apex_sup_flat y1 y2 y3 y4 y5 y6 =
 [(#2.0, y1, #2.52);
(#2.0, y2, #2.52);
(#2.0, y3, #2.52);
(sqrt8, y4, #3.0);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]
 `;;

add {
  id = "5451229371";
  doc="";
  tags = [Cfsqp;Tex;Xconvert;Lp];
  ineq =  all_forall `ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
    (taum y1 y2 y3 y4 y5 y6 - #0.11
    - #0.14132 * (y1 + (y2 + y3) / &2 - &4) 
       - #0.38 * (y5 + y6 - &4) > &0)`;
};;


add {
  id = "4840774900";
  doc="";
  tags = [Cfsqp;Tex;Xconvert;Lp];
  ineq =  all_forall `ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
  (
 taum y1 y2 y3 y4 y5 y6      - #0.1054 
    - #0.14132*(y1 + y2 / &2 + y3 / &2 - &4)
    - #0.36499*(y5 +y6 - &4) > &0)`;  (* was >= *)
};;

add {
  id = "1642527039";
  doc="";
  tags = [Cfsqp;Tex;Xconvert;Lp];
  ineq =  all_forall `ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
  (
 taum y1 y2 y3 y4 y5 y6      - #0.128 
  - #0.053*((y5 +y6 - &4) - (#2.75/ &2)*(y4 - sqrt8)) > &0)`;  (* was >= *)
};;

add {
  id = "7863247282";
  doc="";
  tags = [Cfsqp;Tex;Xconvert;Lp];
  ineq =  all_forall `ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
  (taum y1 y2 y3 y4 y5 y6  - #0.053*((y5 +y6 - &4) - (#2.75/ &2)*(y4 - sqrt8))
    - #0.12 
    - #0.14132*(y1 + y2 / &2 + y3 / &2 - &4)
    - #0.328*(y5 +y6 - &4) > &0)`;  (* corrected 2010-06-22, thales, was y4 + y5, was >= *)
};;

add {
  id = "7718591733";
  doc="";
  tags = [Cfsqp;Tex;Xconvert;Lp];
  ineq =  all_forall `ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
  (dih2_y y1 y2 y3 y4 y5 y6  - #0.955 
   - #0.2356*(y2 - &2)
       + #0.32*(y3 - &2) + #0.792*(y1 - &2)
   - #0.707*(y5 - &2) 
        + #0.0844*(y6 - &2) + #0.821*(y4 - sqrt8) > &0)`;  (* corrected 2010-06-22, was >= *)
};;

add {
  id = "3566713650";
  doc="";
  tags = [Cfsqp;Tex;Xconvert;Lp];
  ineq =  all_forall `ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
  (
  -- dih_y y1 y2 y3 y4 y5 y6  + #1.911 + #1.01 *(y1  - &2)
  - #0.284*(y2 +y3 +y5 +y6 - &8)
   + #1.07*(y4 - sqrt8) > &0)`; (* was >= *)
};;

add {
  id = "1085358243";
  doc="";
  tags = [Cfsqp;Tex;Xconvert;Lp];
  ineq =  all_forall `ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
  (
  dih_y y1 y2 y3 y4 y5 y6  - #1.903 - #0.4*(y1  - &2)
  + #0.49688*(y2 +y3 +y5 +y6 - &8)
   -(y4 -sqrt8) > &0)`;
};;

(* perhaps this dart class is no longer needed *)

(*
let dart_std3_small_200_218 = define_dart 
 `dart_std3_small_200_218 y1 y2 y3 y4 y5 y6 = [(#2.0, y1, #2.18);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.0, y4, #2.25);
(#2.0, y5, #2.25);
(#2.0, y6, #2.25)]`;;
*)

(* use this if there is no smallness constraint *)

let dart_std3_mini = define_dart `dart_std3_mini y1 y2 y3 y4 y5 y6 =
  [
  (#2,y1,#2.18);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.25);
  (&2,y6,#2.25)
  ]` ;;  


add {
  id = "9229542852";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3_mini y1 y2 y3 y4 y5 y6)
(dih_y y1 y2 y3 y4 y5 y6 - #1.230 - 
(#0.2357 * (y1 - #2.0)) + 
(#0.2493 * (y2 + y3 - #4.0)) - 
(#0.682 * (y4 - #2.0)) + 
(#0.3035 * (y5 + y6 - #4.0)) > #0.0)`;
};;

add {
  id = "1550635295";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3_mini y1 y2 y3 y4 y5 y6)
(--(dih_y y1 y2 y3 y4 y5 y6) + #1.232 + 
(#0.261 * (y1 - #2.0)) - 
(#0.203 * (y2 + y3 - #4.0)) + 
(#0.772 * (y4 - #2.0)) - 
(#0.191 * (y5 + y6 - #4.0)) > #0.0)`;
};;

add {
  id = "4491491732";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3_mini y1 y2 y3 y4 y5 y6)
(taum y1 y2 y3 y4 y5 y6 + #0.0008 - 
(#0.1631 * (y1 + y2 + y3 - #6.0)) - 
(#0.2127 * (y4 + y5 + y6 - #6.0)) > #0.0)`;
};;

(*
let  dart_8282573160  = define_dart 
 `dart_8282573160  y1 y2 y3 y4 y5 y6 = [(#2.18, y1, #2.52);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.52, y4, sqrt8);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]`;;
*)

let  apex_flat_hll  = define_dart 
 `apex_flat_hll  y1 y2 y3 y4 y5 y6 = [(#2.18, y1, #2.52);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.52, y4, sqrt8);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]`;;

add {
  id = "8282573160";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (apex_flat_hll  y1 y2 y3 y4 y5 y6)
(taum y1 y2 y3 y4 y5 y6 - #0.1413 - 
(#0.214 * (y1 - #2.18)) - 
(#0.1259 * (y2 + y3 - #4.0)) - 
(#0.067 * (y4 - #2.52)) - 
(#0.241 * (y5 + y6 - #4.0)) > #0.0)`;
};;

let dart_std3_big_200_218   = define_dart 
 `dart_std3_big_200_218  y1 y2 y3 y4 y5 y6 = [(#2.0, y1, #2.18);
(#2.0, y2, #2.18);
(#2.0, y3, #2.18);
(#2.0, y4, #2.52);
(#2.0, y5, #2.52);
(#2.0, y6, #2.52)]`;;

add {
  id = "8611785756";
  doc="";
  tags = [Cfsqp;Xconvert;Lp;Tex];
  ineq = all_forall `ineq (dart_std3_big_200_218  y1 y2 y3 y4 y5 y6)
((sol_y y1 y2 y3 y4 y5 y6 - #0.589 + 
(#0.24 * (y1 + y2 + y3 - #6.0)) - 
(#0.16 * (y4 + y5 + y6 - #6.25)) > #0.0) \/
(y4 + y5 + y6 < #6.25))`;
};;

(* 181212899 is applied in six different ways, each with a different dart class. *)
let dart_template = `\dart_class y4min y4max. dart_class 
  (y1:real) (y2:real) (y3:real) (y4:real) (y5:real) (y6:real) = 
 [
      (#2.0, y1, #2.52);
      (#2.0, y2, #2.52);
      (#2.0, y3, #2.52);
      (y4min, y4, y4max);
      (#2.0, y5, #2.52);
      (#2.52, y6, sqrt8)]`;;

let dart_template_reverse = `\dart_class y4min y4max. dart_class 
  (y1:real) (y2:real) (y3:real) (y4:real) (y5:real) (y6:real) = 
 [
      (#2.0, y1, #2.52);
      (#2.0, y2, #2.52);
      (#2.0, y3, #2.52);
      (y4min, y4, y4max);
      (#2.52, y5, sqrt8);
      (#2.0, y6, #2.52)]`;;

let tyR = `:real->real->real->real->real->real-> (real#real#real)list`;;

let mk_dart rev (x,y,z) = 
  let x' = if (is_var x) then mk_var(fst(dest_var x),tyR) else x in
  let plate = if (rev) then dart_template_reverse else dart_template in
    snd(strip_forall (mk_tplate plate [x';y;z]));;

let newdef rev t = define_dart (mk_dart rev t);;

let apexffA = newdef false (`apexffA`,`#2.52`,`sqrt8`);;  (* NB ff comes before f on this *)
let apexfA = newdef true (`apexfA`,`#2.52`,`sqrt8`);;
let apexf4 = newdef false (`apexf4`,`sqrt8`,`sqrt8`);;
let apexff4 = newdef true (`apexff4`,`sqrt8`,`sqrt8`);;
let apexf5 = newdef false (`apexf5`,`#2.52`,`#2.52`);;
let apexff5 = newdef true (`apexff5`,`#2.52`,`#2.52`);;

let template_181212899= `\dart_class y4e y2' y3' y5' y6'. ineq (dart_class y1 y2 y3 y4 y5 y6) 
(dih_y y1 y2 y3 y4 y5 y6 - #1.448 - 
(#0.266 * (y1 - #2.0)) + 
(#0.295 * (y2' - #2.0)) + 
(#0.57 * (y3' - #2.0)) - 
(#0.745 * (y4e - #2.52)) + 
(#0.268 * (y5' - #2.0)) + 
(#0.385 * (y6' - #2.52)) > #0.0)`;;
(* coefficients corrected, April 28, 2010, June 20, 2010-thales *)

let mk_iqd rev (d,dart,y4e) = 
  let yy = if rev then [`y3:real`;`y2:real`;`y6:real`;`y5:real`] else
    [`y2:real`;`y3:real`;`y5:real`;`y6:real`] in
  let ineq = mk_tplate template_181212899([dart;y4e] @ yy) in 
   {
   id = Printf.sprintf "181212899 %d" d;
   doc = if (d=0) then 
    "This original version of the inequality. There are five other derived versions." else "";
   tags = [Cfsqp;Xconvert;Lp] @ (if (d>0) then [Derived []] else [Tex]);
   ineq = all_forall ineq;
   };;

add (mk_iqd false (0,`apexffA`,`y4:real`));;
add (mk_iqd true (1,`apexfA`,`y4:real`));;
add (mk_iqd false (2,`apexf4`,`sqrt8`));;
add (mk_iqd true (3,`apexff4`,`sqrt8`));;
add (mk_iqd false (4,`apexf5`,`#2.52`));;
add (mk_iqd true (5,`apexff5`,`#2.52`));;

addtex(Section,"Linear Programs"," -- apex std3 hll");;

let apex_std3_hll = define_dart `apex_std3_hll y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]`;;

let apex_std3_small_hll = define_dart `apex_std3_small_hll y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.25);
  (&2,y6,#2.25)
  ]`;;

(*
let dart_3872614111 = define_dart `dart_3872614111 y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

let dart_mll_w = define_dart `dart_mll_w y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(*
let dart_3139693500 = define_dart `dart_3139693500 y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

let dart_mll_n = define_dart `dart_mll_n y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(*
let dart_4841020453 = define_dart `dart_4841020453 y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

let dart_Hll_n = define_dart `dart_Hll_n y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(*
let dart_9925287433 = define_dart `dart_9925287433 y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

let dart_Hll_w = define_dart `dart_Hll_w y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(*
let dart_7409690040 = define_dart `dart_7409690040 y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

let dart_mll_w = define_dart `dart_mll_w y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(*
let dart_4002562507 = define_dart `dart_4002562507 y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

(* repeated *)
let dart_mll_n = define_dart `dart_mll_n y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(*
let dart_5835568093 = define_dart `dart_5835568093 y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

let dart_Hll_n = define_dart `dart_Hll_n y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(*
let dart_1894886027 = define_dart `dart_1894886027 y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;
*)

let dart_Hll_w = define_dart `dart_Hll_w y1 y2 y3 y4 y5 y6 =
  [
  (#2.36,y1,#2.52);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

let templateC = `\ dart_class 
   f fc f0 c1 c2 c3 c4 c5 c6 y1min y2min y3min y4min y5min y6min .
   ineq (dart_class y1 y2 y3 y4 y5 y6) 
     ( fc * f y1 y2 y3 y4 y5 y6 > f0
      + c1 * (y1 - y1min) + c2 *(y2- y2min) + c3 * (y3 - y3min) +
          c4 * (y4 - y4min) + c5 *(y5- y5min) + c6 * (y6 - y6min))`;;
  
let yymin = dest_list `[#2.18;&2;&2;&2;&2;&2]`;;

let iqd s dart sym t = 
  let c = mk_mconst (dart,tyR) in {
  id = s;
  doc = "";
  tags = [Cfsqp;Xconvert;Lp;] @ (if sym then [Lpsymmetry] else []);
  ineq = mk_tplate templateC (c:: t);
};;

add (iqd "2151506422" "apex_std3_hll" false 
 ([`dih_y`;`&1`;`#1.2777`] @ dest_list
  `[#0.281; -- #0.278364; -- #0.278364; #0.7117; -- #0.34336; -- #0.34336]` @
  yymin));;

add (iqd "6836427086" "apex_std3_hll" false 
 ([`dih_y`;`-- &1`;`-- #1.27799`] @ dest_list
  `[-- #0.356217; #0.229466; #0.229466; -- #0.949067; #0.172726; #0.172726]` @
  yymin));;

add (iqd "3636849632" "apex_std3_hll" false 
 ([`taum`;`&1`;`#0.0345`] @ dest_list
  `[#0.185545; #0.193139; #0.193139; #0.170148; #0.13195; #0.13195]` @
  yymin));;

add (iqd "5298513205" "apex_std3_hll" true 
 ([`dih2_y`;`&1`;`#1.185`] @ dest_list
  `[-- #0.302913; #0.214849; -- #0.163775; -- #0.443449; #0.67364; -- #0.314532]` @
  yymin));;

add (iqd "7743522046" "apex_std3_hll" true
 ([`dih2_y`;`-- &1`;`-- #1.1865`] @ dest_list
  `[#0.20758; -- #0.236153; #0.14172; #0.263834; -- #0.771203; #0.0457292]` @
  yymin));;

let yymin_plus = dest_list `[#2.36;&2;&2;#2.25;&2;&2]`;;

add (iqd "8657368829" "apex_std3_small_hll" false 
 ([`dih_y`;`&1`;`#1.277`] @ dest_list
  `[#0.273298; -- #0.273853; -- #0.273853; #0.708818; -- #0.313988; -- #0.313988]` @
  yymin));;

add (iqd "6619134733" "apex_std3_small_hll" false 
 ([`dih_y`;`-- &1`;`-- #1.27799`] @ dest_list
  `[-- #0.439002; #0.229466; #0.229466; -- #0.771733; #0.208429; #0.208429]` @
  yymin));;

add (iqd "1284543870" "apex_std3_small_hll" true
 ([`dih2_y`;`&1`;`#1.185`] @ dest_list
  `[-- #0.372262; #0.214849; -- #0.163775; -- #0.293508; #0.656172; -- #0.267157]` @
  yymin));;

add (iqd "4041673283" "apex_std3_small_hll" true
 ([`dih2_y`;`-- &1`;`-- #1.1864`] @ dest_list
  `[#0.20758; -- #0.236153; #0.14172; #0.263109; -- #0.737003; #0.12047]` @
  yymin));;

add (iqd "3872614111" "dart_mll_w" false
 ([`dih_y`;`-- &1`;`-- #1.542`] @ dest_list
  `[-- #0.362519; #0.298691; #0.287065; -- #0.920785; #0.190917; #0.219132]` @
  yymin_plus));;

add (iqd "3139693500" "dart_mll_n" false
 ([`dih_y`;`-- &1`;`-- #1.542`] @ dest_list
  `[-- #0.346773; #0.300751; #0.300751; -- #0.702567; #0.172726; #0.172727]` @
  yymin_plus));;

add (iqd "4841020453" "dart_Hll_n" false
 ([`dih_y`;`-- &1`;`-- #1.542`] @ dest_list
  `[-- #0.490439; #0.318125; #0.32468; -- #0.740079; #0.178868; #0.205819]` @
  yymin_plus));;

add (iqd "9925287433" "dart_Hll_w" false
 ([`dih_y`;`-- &1`;`-- #1.542`] @ dest_list
  `[-- #0.490439; #0.321849; #0.320956; -- #1.00902; #0.240709; #0.218081]` @
  yymin_plus));;

add (iqd "7409690040" "dart_mll_w" true
 ([`dih2_y`;`&1`;`#1.0494`] @ dest_list
  `[-- #0.297823; #0.215328; -- #0.0792439; -- #0.422674; #0.647416; -- #0.207561]` @
  yymin_plus));;

add (iqd "4002562507" "dart_mll_n" true
 ([`dih2_y`;`&1`;`#1.0494`] @ dest_list
  `[-- #0.29013; #0.215328; -- #0.0715511; -- #0.267157; #0.650269; -- #0.295198]` @
  yymin_plus));;

add (iqd "5835568093" "dart_Hll_n" true
 ([`dih2_y`;`&1`;`#1.0494`] @ dest_list
  `[-- #0.404131; #0.212119; -- #0.0402827; -- #0.299046; #0.643273; -- #0.266118]` @
  yymin_plus));;

 add (iqd "1894886027" "dart_Hll_w" true
 ([`dih2_y`;`&1`;`#1.0494`] @ dest_list
  `[-- #0.401543; #0.207551; -- #0.0294227; -- #0.494954; #0.605453; -- #0.156385]` @
  yymin_plus));;


(* NOW DATA SECTION OF NEW DART CLASSES THAT HAVE BEEN FOUND *)


let dart_std3_lw = define_dart `dart_std3_lw y1 y2 y3 y4 y5 y6 =
  [
  (#2.00,y1,#2.18);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;

(* NOW DATA SECTION OF NEW INEQUALITIES THAT HAVE BEEN FOUND *)

(*
generate_ineq_datum "mDihedral2" 
 "{2,2,2,2.52,2,2}" "{2.52,2.52,2.52,sqrt8,2.52,2.52}";;

Annoyance: have to manually edit `--#X.XX` -> `-- #X.XX`
*)

let i4750199435 = 
  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_flat y1 y2 y3 y4 y5 y6)
         (--dih2_y y1 y2 y3 y4 y5 y6 + #0.0031 >
          --  #1.08346 +
          #0.288794 * (-- &2 + y1) +
          -- #0.292829 * (-- &2 + y2) +
          #0.036457 * (-- &2 + y3) +
          #0.348796 * (-- #2.52 + y4) +
          -- #0.762602 * (-- &2 + y5) +
          -- #0.112679 * (-- &2 + y6))`;
   id = "4750199435";
   doc =
    "date{2010, 8, 1, 7, 59, 42.645902}           
     ineq generated by Mathematica holineq 
     The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add  i4750199435;;

(* 8384511215;;
generate_ineq_datum_p "Dihedral2" "{2,2,2.52,sqrt8,2,2}"
 "{2,2,2,2.52,2,2}" "{2.52,2.52,2.52,sqrt8,2.52,2.52}";;
*)

let i8384511215 =  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_flat y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0015 >
          #0.913186 +
          -- #0.390288 * (-- &2 + y1) +
          #0.115895 * (-- &2 + y2) +
          #0.164805 * (-- #2.52 + y3) +
          -- #0.271329 * (-- #2.82843 + y4) +
          #0.584817 * (-- &2 + y5) +
          -- #0.170218 * (-- &2 + y6))`;
   id = "8384511215";
   doc =
    "date{2010, 8, 1, 12, 24, 31.880776}\n              ineq generated by Mathematica holineq\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add i8384511215;;

(*
7819193535;
generate_ineq_datum "Dihedral2" 
 "{2,2,2,2.25,2,2}" "{2.18,2.52,2.52,2.52,2.52,2.52}";;
*)

let i7819193535 =  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (dart_std3_lw y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0011 >
          #1.16613 +
          -- #0.296776 * (-- &2 + y1) +
          #0.208935 * (-- &2 + y2) +
          -- #0.243302 * (-- &2 + y3) +
          -- #0.360575 * (-- #2.25 + y4) +
          #0.636205 * (-- &2 + y5) +
          -- #0.295156 * (-- &2 + y6))`;
   id = "7819193535";
   doc =
    "date{2010, 8, 1, 14, 6, 32.558867}\n              ineq generated by Mathematica holineq\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add  i7819193535;;

(* remove "2621779878";; *)

(*
let ii = generate_ineq_datum_p "Dihedral2" "{2.36,2,2,2.52,2,2.25}"
 "{2.18,2,2,2.25,2,2}" "{2.36,2.18,2.18,2.52,2.52,2.52}";;
*)

let i6987934000 =  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (dart_mll_w y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0042 >
          #0.952682 +
          -- #0.268837 * (-- #2.36 + y1) +
          #0.130607 * (-- &2 + y2) +
          -- #0.168729 * (-- &2 + y3) +
          -- #0.0831764 * (-- #2.52 + y4) +
          #0.580152 * (-- &2 + y5) +
          #0.0656612 * (-- #2.25 + y6))`;
   id = "6987934000";
   doc =
    "date{2010, 8, 1, 17, 50, 0.245131}\n              ineq generated by Mathematica holineq\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add  i6987934000;;

let i7291663656 =   {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_flat y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0009 >
          #0.947391 +
          -- #0.637397 * (-- &2 + y1) +
          #0.120003 * (-- &2 + y2) +
          -- #0.100814 * (-- #2.3 + y3) +
          -- #0.302956 * (-- #2.65 + y4) +
          #0.547359 * (-- &2 + y5) +
          -- #0.157745 * (-- #2.2 + y6))`;
   id = "7291663656";
   doc =
    "date{2010, 8, 2, 15, 44, 43.580639}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral2 {2,2,2.3,2.65,2,2.2} {2,2,2,2.52,2,2} {2.52,2.52,2.52,sqrt8,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add i7291663656;;

let i2390583444=  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (dart_std3_mini y1 y2 y3 y4 y5 y6)
         (dih_y y1 y2 y3 y4 y5 y6 + #0.0012 >
          #1.08627 +
          #0.159149 * (-- &2 + y1) +
          -- #0.198496 * (-- #2.1 + y2) +
          -- #0.199306 * (-- #2.1 + y3) +
          #0.590083 * (-- &2 + y4) +
          -- #0.0888111 * (-- #2.25 + y5) +
          -- #0.0881846 * (-- #2.25 + y6))`;
   id = "2390583444";
   doc =
    "date{2010, 8, 2, 17, 51, 29.665035}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral {2,2.1,2.1,2,2.25,2.25} {2,2,2,2,2,2} {2.18,2.18,2.18,2.25,2.25,2.25}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add i2390583444;;

(*
These domains were renamed mid-session.  This comment can be deleted.
remove "4491491732";;
remove "1550635295";;
remove "9229542852";;
dart_classes:= filter (fun t -> not (t = apex_flat_l)) !dart_classes;;
dart_classes:= filter (fun t -> not (t = dart_std3_small_200_218)) !dart_classes;;
dart_std3_small_200_218
*)


let apex_flat_l = define_dart `apex_flat_l y1 y2 y3 y4 y5 y6 =
  [
  (#2,y1,#2.18);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (#2.52,y4,sqrt8);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;  

let apex_flat_h = define_dart `apex_flat_h y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.52);
  (&2,y2,#2.52);
  (&2,y3,#2.52);
  (#2.52,y4,sqrt8);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;  


add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_flat_l y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0071 >
          #0.98362 +
          -- #0.264094 * (-- #2.18 + y1) +
          #0.149308 * (-- #2.18 + y2) +
          -- #0.312683 * (-- &2 + y3) +
          -- #0.282792 * (-- #2.65 + y4) +
          #0.581552 * (-- &2 + y5) +
          #0.143669 * (-- #2.3 + y6))`;
   id = "9641946727";
   doc =
    "date{2010, 8, 2, 20, 0, 47.561405}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral2 {2.18,2.18,2,2.65,2,2.3} {2,2,2,2.52,2,2} {2.18,2.52,2.52,sqrt8,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

let apex_std3_lll_xww = define_dart `apex_std3_lll_xww y1 y2 y3 y4 y5 y6 =
  [
  (&2,y1,#2.18);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.52);
  (#2.25,y5,#2.52);
  (#2.25,y6,#2.52)
  ]` ;;  

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_lll_xww y1 y2 y3 y4 y5 y6)
         (dih_y y1 y2 y3 y4 y5 y6 + #0.0071 >
          #1.09969 +
          #0.146345 * (-- &2 + y1) +
          -- #0.160538 * (-- &2 + y2) +
          -- #0.151698 * (-- #2.14 + y3) +
          #0.61314 * (-- &2 + y4) +
          -- #0.236149 * (-- #2.25 + y5) +
          -- #0.242043 * (-- #2.25 + y6))`;
   id = "4222324842";
   doc =
    "date{2010, 8, 3, 7, 9, 1.995901}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral {2,2,2.14,2,2.25,2.25} {2,2,2,2,2.25,2.25} {2.18,2.18,2.18,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

let apex_std3_lll_wxx = define_dart `apex_std3_lll_wxx y1 y2 y3 y4 y5 y6 =
  [
  (&2,y1,#2.18);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (#2.25,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;  

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_lll_wxx y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0025 >
          #1.16613 +
          -- #0.296776 * (-- &2 + y1) +
          #0.208935 * (-- &2 + y2) +
          -- #0.196313 * (-- &2 + y3) +
          -- #0.360575 * (-- #2.25 + y4) +
          #0.652861 * (-- &2 + y5) +
          -- #0.218063 * (-- &2 + y6))`;
   id = "5756588587";
   doc =
    "date{2010, 8, 3, 19, 47, 22.770311}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum with input Dihedral2 {2,2,2,2.25,2,2} {2.18,2.18,2.18,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_flat y1 y2 y3 y4 y5 y6)
         (--dih_y y1 y2 y3 y4 y5 y6 + #0.0011 >
          -- #1.67609 +
          -- #0.506322 * (-- #2.18 + y1) +
          #0.212075 * (-- #2.1 + y2) +
          #0.230669 * (-- #2.1 + y3) +
          -- #1.28579 * (-- #2.52 + y4) +
          #0.249199 * (-- &2 + y5) +
          #0.193545 * (-- &2 + y6))`;
   id = "3425739813";
   doc =
    "date{2010, 8, 3, 20, 2, 51.133190}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input mDihedral {2.18,2.1,2.1,2.52,2,2} {2,2,2,2.52,2,2} {2.52,2.52,2.52,sqrt8,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

(*
These inequalities were not really necessary and have been removed.
I put them in by mistake.

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (dart_std3_mini y1 y2 y3 y4 y5 y6)
         (dih_y y1 y2 y3 y4 y5 y6 + #0.0010 >
          #1.06072 +
          #0.149572 * (-- &2 + y1) +
          -- #0.163725 * (-- #2.18 + y2) +
          -- #0.163725 * (-- #2.18 + y3) +
          #0.587074 * (-- &2 + y4) +
          -- #0.0900713 * (-- #2.25 + y5) +
          -- #0.0900713 * (-- #2.25 + y6))`;
   id = "9828015955";
   doc =
    "date{2010, 8, 3, 20, 26, 34.244962}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral {2,2.18,2.18,2,2.25,2.25} {2,2,2,2,2,2} {2.18,2.18,2.18,2.25,2.25,2.25}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

remove "9828015955";;

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (dart_std3_mini y1 y2 y3 y4 y5 y6)
         (--dih2_y y1 y2 y3 y4 y5 y6 + #0.0016 >
          -- #1.3283 +
          #0.175714 * (-- &2 + y1) +
          -- #0.237847 * (-- #2.18 + y2) +
          #0.35456 * (-- #2.18 + y3) +
          #0.141284 * (-- &2 + y4) +
          -- #0.627274 * (-- #2.25 + y5) +
          #0.350857 * (-- #2.25 + y6))`;
   id = "3784134489";
   doc =
    "date{2010, 8, 3, 20, 32, 30.066974}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input mDihedral2 {2,2.18,2.18,2,2.25,2.25} {2,2,2,2,2,2} {2.18,2.18,2.18,2.25,2.25,2.25}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

remove "3784134489";;

*)

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_lll_wxx y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0050 >
          #1.02005 +
          -- #0.256494 * (-- #2.18 + y1) +
          #0.121497 * (-- &2 + y2) +
          -- #0.256494 * (-- &2 + y3) +
          -- #0.0116869 * (-- #2.52 + y4) +
          #0.598233 * (-- &2 + y5) +
          #0.0187672 * (-- #2.25 + y6))`;
   id = "7316455966";
   doc =
    "date{2010, 8, 4, 6, 2, 11.667622}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral2 {2.18,2,2,2.52,2,2.25} {2,2,2,2.25,2,2} {2.18,2.18,2.18,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_lll_wxx y1 y2 y3 y4 y5 y6)
         (--dih3_y y1 y2 y3 y4 y5 y6 + #0.0087 >
          -- #1.18616 +
          #0.436647 * (-- #2.18 + y1) +
          #0.032258 * (-- &2 + y2) +
          -- #0.289629 * (-- &2 + y3) +
          #0.397053 * (-- #2.52 + y4) +
          -- #0.0210289 * (-- &2 + y5) +
          -- #0.683341 * (-- #2.25 + y6))`;
   id = "6410081357";
   doc =
    "date{2010, 8, 4, 6, 2, 43.302104}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input mDihedral3 {2.18,2,2,2.52,2,2.25} {2,2,2,2.25,2,2} {2.18,2.18,2.18,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

(*
let apex_std3_mll_nwn = define_dart `apex_std3_mll_nwn y1 y2 y3 y4 y5 y6 =
  [
  (#2.18,y1,#2.36);
  (&2,y2,#2.18);
  (&2,y3,#2.18);
  (&2,y4,#2.25);
  (#2.25,y5,#2.52);
  (&2,y6,#2.25)
  ]` ;;  
(* removed *)
dart_classes:= filter (fun t -> not (t = apex_std3_mll_nwn)) !dart_classes;;
*)

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (dart_mll_n y1 y2 y3 y4 y5 y6)
         (--dih_y y1 y2 y3 y4 y5 y6 + #0.0083 >
          -- #1.29912 +
          -- #0.284457 * (-- #2.18 + y1) +
          #0.337354 * (-- &2 + y2) +
          #0.186287 * (-- &2 + y3) +
          -- #0.645382 * (-- #2.25 + y4) +
          #0.367671 * (-- #2.52 + y5) +
          #0.0536051 * (-- &2 + y6))`;
   id = "2923748598";
   doc =
    "date{2010, 8, 4, 8, 57, 40.892442}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input mDihedral {2.18,2,2,2.25,2.52,2} {2.18,2,2,2,2,2} {2.36,2.18,2.18,2.25,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (dart_mll_n y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0035 >
          #1.05036 +
          -- #0.222178 * (-- #2.18 + y1) +
          #0.132628 * (-- &2 + y2) +
          -- #0.219284 * (-- &2 + y3) +
          #0.00563427 * (-- #2.25 + y4) +
          #0.59096 * (-- &2 + y5) +
          -- #0.0771574 * (-- #2.52 + y6))`;
   id = "4306175952";
   doc =
    "date{2010, 8, 4, 9, 3, 43.896393}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral2 {2.18,2,2,2.25,2,2.52} {2.18,2,2,2,2,2} {2.36,2.18,2.18,2.25,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add   {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
         (--dih3_y y1 y2 y3 y4 y5 y6 + #0.0076 >
          -- #0.956317 +
          #0.419124 * (-- &2 + y1) +
          -- #0.0753922 * (-- &2 + y2) +
          -- #0.252307 * (-- &2 + y3) +
          #0.5 * (-- #2.82843 + y4) +
          -- #0.246082 * (-- &2 + y5) +
          -- #0.788717 * (-- &2 + y6))`;
   id = "2763799127";
   doc =
    "date{2010, 8, 4, 13, 47, 22.850389}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum with input mDihedral3 {2,2,2,sqrt8,2,2} {2.52,2.52,2.52,3.0,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add   {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_sup_flat y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0047 >
          #0.936544 +
          -- #0.636113 * (-- #2.1 + y1) +
          #0.140759 * (-- #2.1 + y2) +
          -- #0.0771734 * (-- #2.3 + y3) +
          -- #1.29068 * (-- #2.82843 + y4) +
          #0.591328 * (-- #2.1 + y5) +
          -- #0.0521775 * (-- #2.1 + y6))`;
   id = "5943578801";
   doc =
    "date{2010, 8, 4, 13, 50, 57.176690}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral2 {2.1,2.1,2.3,sqrt8,2.1,2.1} {2,2,2,sqrt8,2,2} {2.52,2.52,2.52,3.0,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

let apex_std3_lhh  = define_dart `apex_std3_lhh y1 y2 y3 y4 y5 y6 =
  [
  (&2,y1,#2.18);
  (#2.18,y2,#2.52);
  (#2.18,y3,#2.52);
  (&2,y4,#2.52);
  (&2,y5,#2.52);
  (&2,y6,#2.52)
  ]` ;;  

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_lhh y1 y2 y3 y4 y5 y6)
         (dih_y y1 y2 y3 y4 y5 y6 + #0.0012 >
          #1.01332 +
          #0.148615 * (-- &2 + y1) +
          -- #0.379006 * (-- #2.18 + y2) +
          -- #0.379441 * (-- #2.18 + y3) +
          #0.583676 * (-- &2 + y4) +
          -- #0.184708 * (-- #2.25 + y5) +
          -- #0.18471 * (-- #2.25 + y6))`;
   id = "1836408787";
   doc =
    "date{2010, 8, 4, 18, 41, 52.689213}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral {2,2.18,2.18,2,2.25,2.25} {2,2.18,2.18,2,2,2} {2.18,2.52,2.52,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add   {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_lhh y1 y2 y3 y4 y5 y6)
         (--dih2_y y1 y2 y3 y4 y5 y6 + #0.0059 >
          -- #1.33909 +
          #0.0724529 * (-- &2 + y1) +
          -- #0.486824 * (-- #2.18 + y2) +
          #0.317329 * (-- #2.18 + y3) +
          -- #0.00479451 * (-- &2 + y4) +
          -- #0.751179 * (-- #2.25 + y5) +
          #0.350857 * (-- #2.25 + y6))`;
   id = "1248932983";
   doc =
    "date{2010, 8, 4, 18, 42, 54.778495}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input mDihedral2 {2,2.18,2.18,2,2.25,2.25} {2,2.18,2.18,2,2,2} {2.18,2.52,2.52,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

(* Aug 5, 2010 *)

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_flat y1 y2 y3 y4 y5 y6)
         (dih3_y y1 y2 y3 y4 y5 y6 + #0.0046 >
          #0.88473 +
          -- #0.443946 * (-- #2.36 + y1) +
          -- #0.244711 * (-- #2.1 + y2) +
          #0.205592 * (-- #2.1 + y3) +
          -- #0.739126 * (-- #2.55 + y4) +
          -- #0.127198 * (-- #2.1 + y5) +
          #0.61582 * (-- &2 + y6))`;
   id = "6725783616";
   doc =
    "date{2010, 8, 5, 6, 6, 10.752609}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral3 {2.36,2.1,2.1,2.55,2.1,2.0} {2,2,2,2.52,2,2} {2.52,2.52,2.52,sqrt8,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

(*
add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_hll y1 y2 y3 y4 y5 y6)
         (dih3_y y1 y2 y3 y4 y5 y6 + #0.0019 >
          #1.27276 +
          -- #0.38416 * (-- #2.36 + y1) +
          -- #0.0307403 * (-- #2.1 + y2) +
          #0.284425 * (-- #2.1 + y3) +
          -- #0.320191 * (-- #2.45 + y4) +
          -- #0.320191 * (-- &2 + y5) +
          #0.691121 * (-- #2.45 + y6))`;
   id = "2194646440";
   doc =
    "date{2010, 8, 5, 6, 19, 16.575413}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral3 {2.36,2.1,2.1,2.45,2.,2.45} {2.18,2,2,2,2,2} {2.52,2.18,2.18,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;
remove "2194646440";;
*)

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_hll y1 y2 y3 y4 y5 y6)
         (--dih3_y y1 y2 y3 y4 y5 y6 + #0.0116 >
          -- #1.30119 +
          #0.392915 * (-- #2.36 + y1) +
          #0.142563 * (-- #2.1 + y2) +
          -- #0.258747 * (-- #2.1 + y3) +
          #0.417088 * (-- #2.45 + y4) +
          -- #0.0606764 * (-- &2 + y5) +
          -- #0.637966 * (-- #2.45 + y6))`;
   id = "9185711902";
   doc =
    "date{2010, 8, 5, 6, 25, 0.685185}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input mDihedral3 {2.36,2.1,2.1,2.45,2.,2.45} {2.18,2,2,2,2,2} {2.52,2.18,2.18,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_std3_hll y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0011 >
          #0.957661 +
          -- #0.250506 * (-- #2.36 + y1) +
          #0.145114 * (-- #2.1 + y2) +
          -- #0.0549376 * (-- #2.1 + y3) +
          -- #0.0384445 * (-- #2.45 + y4) +
          #0.5275 * (-- &2 + y5) +
          #0.118819 * (-- #2.45 + y6))`;
   id = "6284721194";
   doc =
    "date{2010, 8, 5, 6, 29, 20.593944}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral2 {2.36,2.1,2.1,2.45,2.,2.45} {2.18,2,2,2,2,2} {2.52,2.18,2.18,2.52,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;

add  {ineq =
    `!y1 y2 y3 y4 y5 y6.
         ineq (apex_flat_h y1 y2 y3 y4 y5 y6)
         (dih2_y y1 y2 y3 y4 y5 y6 + #0.0042 >
          #0.868174 +
          -- #0.701906 * (-- #2.25 + y1) +
          #0.136514 * (-- &2 + y2) +
          -- #0.209239 * (-- #2.18 + y3) +
          -- #0.493373 * (-- #2.65 + y4) +
          #0.537385 * (-- &2 + y5) +
          #0.0187672 * (-- #2.2 + y6))`;
   id = "3137600529";
   doc =
    "date{2010, 8, 5, 10, 13, 11.823742}\n              ineq generated by Mathematica holineq\n Generated by generate_ineq_datum_p with input Dihedral2 {2.25,2,2.18,2.65,2.,2.2} {2.18,2,2,2.52,2,2} {2.52,2.52,2.52,sqrt8,2.52,2.52}.\n  The inequality has been fitted to cfsqp margins.";
   tags = [Cfsqp; Xconvert;Lp; Lpsymmetry]};;


(*

Nonlinear inequalities for Fejes Toth's full contact conjecture.
The inequalities in this section are not part of the Flyspeck project.

*)

(* quadrilateral case, 5 subcases *)

(*

Q0:
When all four sides of the quadrilateral are 2, then some diagaonal has length
less than 3.  Here are the other domain calculations (done in Mathematica).

Similarly,
Q1:
Dihedral[2, 2, 2, 2, 2.52, x] + Dihedral[2, 2, 2, 2, 2, x] - 
    Dihedral[2, 2, 2, 3, 2.52, 2] < 0, when x >= 3.014

Q2:
Dihedral[2, 2, 2, 2, 2.52, x] + Dihedral[2, 2, 2, 2.52, 2, x] - 
    Dihedral[2, 2, 2, 3, 2, 2] < 0 , when x >= 3.39.

Q3:
Dihedral[2, 2, 2, 2, 2.52, x] + Dihedral[2, 2, 2, 2, 2.52, x] - 
  Dihedral[2, 2, 2, 3, 2.52, 2.52] <0, when x >= 3.34.

Q4:
Dihedral[2, 2, 2, 2.52, 2.52, x] + Dihedral[2, 
    2, 2, 2, 2.52, x] - Dihedral[2, 2, 2, 3, 2.52, 2.52] < 0, when x >= 3.6.

Q5:
Dihedral[2, 2, 2, 2.52, 2.52, x] + Dihedral[2, 2, 2, 2.52, 2.52, x] - 
  Dihedral[2, 2, 2, 3, 2.52, 2.52] < 0 , when x >= 3.81.
*)



add {
  id= "9267276091 Q1";
  ineq = all_forall `ineq
  [(#3.0,y1,#3.014);(&1,y2,&1);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (&2) (#2.52) y1 y2 y3 y4 y5 y6 + taum_y1 (&2) (&2) y1 y2 y3 y4 y5 y6 >
   tame_table_d 3 1)`;
  doc = "Fejes Toth quad case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 Q2";
  ineq = all_forall `ineq
   [(#3.0,y1,#3.39);(&1,y2,&1);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (&2) (#2.52) y1 y2 y3 y4 y5 y6 + taum_y1 (#2.52) (&2) y1 y2 y3 y4 y5 y6 > 
  tame_table_d 2 2)`;
  doc = "Fejes Toth quad case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 Q3";
  ineq = all_forall `ineq
   [(#3.0,y1,#3.34);(&1,y2,&1);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (&2) (#2.52) y1 y2 y3 y4 y5 y6 + taum_y1 (&2) (#2.52) y1 y2 y3 y4 y5 y6 > 
  tame_table_d 2 2)`;
  doc = "Fejes Toth quad case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 Q4";
  ineq = all_forall `ineq
   [(#3.0,y1,#3.6);(&1,y2,&1);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (#2.52) (#2.52) y1 y2 y3 y4 y5 y6 + taum_y1 (&2) (#2.52) y1 y2 y3 y4 y5 y6 > 
  tame_table_d 1 3)`;
  doc = "Fejes Toth quad case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 Q5";
  ineq = all_forall `ineq
   [(#3.0,y1,#3.81);(&1,y2,&1);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (#2.52) (#2.52) y1 y2 y3 y4 y5 y6 + taum_y1 (#2.52) (#2.52) y1 y2 y3 y4 y5 y6 > 
  tame_table_d 0 4)`;
  doc = "Fejes Toth quad case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;



(* pentagon case, 6 subcases *)

(* The perimeter is too large when at least four have length 2.52:
   4 arc[2,2,2.52] + arc[2,2,2] > 2 Pi. *)

(*
Bounds on t and y1 from Mathematica.
dih[u_, v_, w_] := Dihedral[2, 2, 2, u, v, w];

P1:
fyp1[y_] := dih[3, 2, y] + dih[2, 2, y] - dih[3, 2, 2]  <0, when y >= 3.29;
so y<=3.29,t<=3.29.

P2: fyp2[y_] := dih[3, 2.52, y] + dih[2, 2, y] - dih[3, 2.52, 2], y>= 3.439. same for t.
P3,P4,P6: y<= 3.439,
P5: fyp5 [y_] := dih[3, 2.52, y] + dih[2.52, 2, y] - dih[3, 2.52, 2], y >= 3.715

t: 3.439 for P2,   3.723  for P3,P6,  3.715  for P4, P5
ftp3 [t_] := dih[3, 2.52, t] + dih[2, 2.52, t] - dih[3, 2.52, 2.52] // N;
*)

add {
  id= "9267276091 P1";
  ineq = all_forall `ineq
   [
    (#3.0,y1,#3.29);(#3.0,y2,#3.29);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (&2) (&2) y1 y2 y3 y4 y5 y6 + taum_y2 (&2) (&2) y1 y2 y3 y4 y5 y6 +
   taum_y1_y2 (&2) y1 y2 y3 y4 y5 y6  > 
  tame_table_d 5 0)`;
  doc = "Fejes Toth pent case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 P2";
  ineq = all_forall `ineq
   [
    (#3.0,y1,#3.439);(#3.0,y2,#3.439);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (&2) (&2) y1 y2 y3 y4 y5 y6 + taum_y2 (&2) (&2) y1 y2 y3 y4 y5 y6 +
   taum_y1_y2 (#2.52) y1 y2 y3 y4 y5 y6  > 
  tame_table_d 4 1)`;
  doc = "Fejes Toth pent case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 P3";
  ineq = all_forall `ineq
   [
    (#3.0,y1,#3.723);(#3.0,y2,#3.439);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (#2.52) (&2) y1 y2 y3 y4 y5 y6 + taum_y2 (&2) (&2) y1 y2 y3 y4 y5 y6 +
   taum_y1_y2 (#2.52) y1 y2 y3 y4 y5 y6  > 
  tame_table_d 3 2)`;
  doc = "Fejes Toth pent case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;


add {
  id= "9267276091 P4";
  ineq = all_forall `ineq
   [
    (#3.0,y1,#3.715);(#3.0,y2,#3.439);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (#2.52) (&2) y1 y2 y3 y4 y5 y6 + taum_y2 (&2) (&2) y1 y2 y3 y4 y5 y6 +
   taum_y1_y2 (#2.52) y1 y2 y3 y4 y5 y6  > 
  tame_table_d 3 2)`;
  doc = "Fejes Toth pent case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 P5";
  ineq = all_forall `ineq
   [
    (#3.0,y1,#3.715);(#3.0,y2,#3.715);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (#2.52) (&2) y1 y2 y3 y4 y5 y6 + taum_y2 (#2.52) (&2) y1 y2 y3 y4 y5 y6 +
   taum_y1_y2 (#2.52) y1 y2 y3 y4 y5 y6  > 
  tame_table_d 2 3)`;
  doc = "Fejes Toth pent case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;

add {
  id= "9267276091 P6";
  ineq = all_forall `ineq
   [
    (#3.0,y1,#3.723);(#3.0,y2,#3.439);(&1,y3,&1);(&1,y4,&1);(&1,y5,&1);(&1,y6,&1)
  ]
  (taum_y1 (#2.52) (#2.52) y1 y2 y3 y4 y5 y6 + taum_y2 (&2) (&2) y1 y2 y3 y4 y5 y6 +
   taum_y1_y2 (#2.52) y1 y2 y3 y4 y5 y6  > 
  tame_table_d 2 3)`;
  doc = "Fejes Toth pent case";
  tags = [Flypaper;Tex;Cfsqp;Xconvert;Fejestoth];
};;




end;;
