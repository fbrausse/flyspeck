(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(* Chapter: Nonlinear inequalities                                            *)
(* Author: Thomas Hales                                                       *)
(* Date: 2013-08-19                                                           *)
(* ========================================================================== *)

(* show exact equality for the nonlinear inequalities that are sharp *)


module Sharp = struct



let dih_y_2s = prove_by_refinement(
  `dih_y (&2) (&2) (&2) (&2) (&2) (&2) = (sol0 + pi) / &3`,
  (* {{{ proof *)
  [
  INTRO_TAC Sphere.sol_y [`&2`;`&2`;`&2`;`&2`;`&2`;`&2`];
  REWRITE_TAC[GSYM Nonlinear_lemma.sol0_EQ_sol_y;];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let OMKYNLT_3336871894_SHARP = prove_by_refinement(
  `taum (&2) (&2) (&2) (&2) (&2) (&2) = &0`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.taum];
  REWRITE_TAC[Sphere.taum;Sphere.lnazim];
  REWRITE_TAC[arith `c * (l*d + l*d+ l*d) = (c *l) * (&3 * d)`];
  TYPIFY_GOAL_THEN `const1 * ly (&2) = &1 + const1 - rho (&2)` (unlist REWRITE_TAC);
    BY(INTRO_TAC Sphere.rho [`&2`] THEN REAL_ARITH_TAC);
  REWRITE_TAC[Nonlinear_lemma.rho_alt];
  INTRO_TAC Sphere.sol_y [`&2`;`&2`;`&2`;`&2`;`&2`;`&2`];
  ONCE_REWRITE_TAC[arith `s = d + d + d - pi <=> &3 * d = s + pi`];
  DISCH_THEN (unlist REWRITE_TAC);
  REWRITE_TAC[GSYM Nonlinear_lemma.sol0_EQ_sol_y;];
  REWRITE_TAC[Nonlinear_lemma.sol0_const1];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

(* not needed. div_sqrt functions used to make nonsharp *)

let gamma4f_delta0 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. ineq [(sqrt8,y1,sqrt8);
		    (&2,y2,&2);
		    (&2,y3,&2);
		    (sqrt8,y4,sqrt8);
		    (&2,y5,&2);
		    (&2,y6,&2)]
 		    (gamma4f y1 y2 y3 y4 y5 y6 lmfun = &0)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MP_TAC TRUTH;
  PURE_ONCE_REWRITE_TAC[GSYM Nonlin_def.NONLIN];
  Optimize.BRANCH_TAC;
  Optimize.X_OF_Y_TAC;
  REWRITE_TAC[Sphere.ineq];
  REWRITE_TAC[Sphere.ineq;Nonlin_def.NONLIN];
  REPEAT STRIP_TAC;
  SUBGOAL_THEN `x1 = &8 /\ x2 = &4 /\ x3 = &4 /\ x4 = &8 /\ x5 = &4 /\ x6 = &4` (unlist REWRITE_TAC);
    REPEAT (POP_ASSUM MP_TAC);
    BY(REAL_ARITH_TAC);
  REPEAT (POP_ASSUM kill);
  REWRITE_TAC[Sphere.vol_x;Sphere.gchi2_x;Sphere.gchi3_x;Sphere.gchi5_x; Sphere.gchi6_x;Sphere.dih_x;Sphere.dih2_x;Sphere.dih3_x;Sphere.dih4_x; Sphere.dih4_y;Sphere.dih5_x;Sphere.dih5_y;Sphere.dih6_x;Sphere.dih6_y; Sphere.dih_y];
  REWRITE_TAC[LET_DEF;LET_END_DEF];
  SUBGOAL_THEN `sqrt (&4) * sqrt(&4) = &4 /\ sqrt(&8) *sqrt (&8) = &8` (unlist REWRITE_TAC);
    GMATCH_SIMP_TAC Merge_ineq.sqrtpow2;
    GMATCH_SIMP_TAC Merge_ineq.sqrtpow2;
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[Nonlinear_lemma.delta_x_eq0;REAL_ARITH `x * &0 = &0 /\ -- -- x = x`;SQRT_0;Nonlinear_lemma.delta_x4_eq64;Nonlinear_lemma.atn2_0y];
  MP_TAC PI_POS;
  BY(CONV_TAC REAL_FIELD)
  ]);;
  (* }}} *)

let TSKAJXY_RIBCYXU_SHARP = prove_by_refinement(
  `gamma4fgcy (&2) (&2) (&2) (&2) (&2) (&2) lmfun = &0`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.gamma4fgcy;Sphere.gamma4f;Sphere.vol_y;Sphere.vol4f;Sphere.y_of_x;arith `(&2 / &2) = &1`;arith `&2 * &2 = &4`];
  REWRITE_TAC[Sphere.vol_x;dih_y_2s];
  REWRITE_TAC[GSYM Nonlinear_lemma.sol0_EQ_sol_y;];
  REWRITE_TAC[Sphere.mm1;Sphere.mm2;Sphere.tau0];
  GMATCH_SIMP_TAC Nonlinear_lemma.lmfun_lfun2;
  REWRITE_TAC[Nonlinear_lemma.lfun1];
  TYPIFY_GOAL_THEN `delta_x (&4) (&4) (&4) (&4) (&4) (&4) = &4 pow 2 * &8` (unlist REWRITE_TAC);
    REWRITE_TAC[Sphere.delta_x];
    BY(REAL_ARITH_TAC);
  CONJ_TAC;
    BY(REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
  TYPIFY `sqrt (&4 pow 2 * &8) = &4 * sqrt(&8)` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC SQRT_MUL;
    REWRITE_TAC[POW_2_SQRT_ABS];
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[GSYM Sphere.sqrt8;GSYM Sphere.sqrt2;Nonlinear_lemma.sqrt8_sqrt2];
  Calc_derivative.CALC_ID_TAC;
  MP_TAC Flyspeck_constants.bounds;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let atn_sqrt8 = prove_by_refinement(
  `atn sqrt8 = &2 * atn (sqrt8 / &4)`,
  (* {{{ proof *)
  [
  TYPIFY `sqrt8 / &4 = halfatn sqrt8` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[Taylor_atn.halfatn;Sphere.sqrt8];
    GMATCH_SIMP_TAC SQRT_POW_2;
    REWRITE_TAC[arith `&1 + &8 = &3 pow 2`];
    REWRITE_TAC[POW_2_SQRT_ABS];
    BY(REAL_ARITH_TAC);
  BY(REWRITE_TAC[GSYM Taylor_atn.atn_half])
  ]);;
  (* }}} *)

let atn_sqrt2 = prove_by_refinement(
  `atn sqrt2 = pi / &2 - atn sqrt8 / &2`,
  (* {{{ proof *)
  [
  REWRITE_TAC[atn_sqrt8];
  TYPIFY `sqrt8 / &4 = &1 / sqrt2` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    REWRITE_TAC[Sphere.sqrt2];
    GMATCH_SIMP_TAC SQRT_EQ_0;
    BY(REWRITE_TAC[GSYM Sphere.sqrt2;Nonlinear_lemma.sqrt8_sqrt2] THEN MP_TAC Nonlin_def.sqrt2_sqrt2 THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `a = p - (&2 * i) / &2 <=> a + i = p`];
  MATCH_MP_TAC Merge_ineq.atn_inv;
  REWRITE_TAC[Sphere.sqrt2];
  GMATCH_SIMP_TAC SQRT_POS_LT;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih_x_844 = prove_by_refinement(
  `dih_x (&8) (&4) (&4) (&4) (&4) (&4) = pi / &2 /\ dih_x (&4) (&4) (&8) (&4) (&4) (&4) = (&2 * pi - sol0) / &6 /\
   dih_x (&4) (&4) (&4) (&8) (&4) (&4)  = (&2 * pi - sol0) / &3`,
  (* {{{ proof *)
  [
  TYPIFY `&0 < sqrt8` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[Sphere.sqrt8];
    GMATCH_SIMP_TAC SQRT_POS_LT;
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[Sphere.dih_x;LET_THM];
  TYPIFY_GOAL_THEN `delta_x (&8) (&4) (&4) (&4) (&4) (&4) = &128 /\ delta_x (&4) (&4) (&8) (&4) (&4) (&4) = &128 /\ delta_x (&4) (&4) (&4) (&8) (&4) (&4) = &128` (unlist REWRITE_TAC);
    BY(REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
  TYPIFY `delta_x4 (&8) (&4) (&4) (&4) (&4) (&4) = &0` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[Sphere.delta_x4] THEN REAL_ARITH_TAC);
  TYPIFY `delta_x4 (&4) (&4) (&8) (&4) (&4) (&4) = &32` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[Sphere.delta_x4] THEN REAL_ARITH_TAC);
  TYPIFY `delta_x4 (&4) (&4) (&4) (&8) (&4) (&4)  = -- &16` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[Sphere.delta_x4] THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `-- &0 = &0 /\ -- -- x = x`];
  TYPIFY_GOAL_THEN `!x y. &0 < x ==> atn2(x,y) = atn(y / x)` (REPEAT o GMATCH_SIMP_TAC);
    BY(MESON_TAC[Trigonometry1.ATN2_BREAKDOWN]);
  GMATCH_SIMP_TAC SQRT_POS_LT;
  REPEAT (GMATCH_SIMP_TAC SQRT_POS_LT);
  REWRITE_TAC[Collect_geom.REAL_DIV_LZERO;ATN_0];
  TYPIFY_GOAL_THEN `&0 < &4 * &8 * &128 /\ &0 < &4 * &4 * &128 /\ pi / &2 + &0 = pi / &2 ` (unlist REWRITE_TAC);
    BY(REAL_ARITH_TAC);
  TYPIFY `sqrt (&4 * &4 * &128) = &16 * sqrt8` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC SQRT_UNIQUE;
    TYPIFY `&16 * sqrt8` EXISTS_TAC;
    REWRITE_TAC[arith `(a * b) pow 2 = a*a * (b * b)`];
    REWRITE_TAC[Nonlinear_lemma.sqrt8_2];
    CONJ2_TAC;
      BY(REAL_ARITH_TAC);
    GMATCH_SIMP_TAC REAL_LE_MUL;
    REWRITE_TAC[Sphere.sqrt8];
    GMATCH_SIMP_TAC SQRT_POS_LE;
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[ATN_NEG;arith `-- x / y = -- (x / y)`];
  TYPIFY `&16 / (&16 * sqrt8) = &1 / sqrt8` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `&32 / (&16 * sqrt8) = sqrt8 / &4` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    BY(MP_TAC Nonlinear_lemma.sqrt8_2 THEN ASM_TAC THEN REAL_ARITH_TAC);
  MP_TAC (GSYM atn_sqrt8);
  REWRITE_TAC[arith `&2 * x = y <=> x = y / &2`];
  DISCH_THEN SUBST1_TAC;
  TYPIFY `atn sqrt8 = pi / &2  - atn (&1 / sqrt8)` (C SUBGOAL_THEN SUBST1_TAC);
    MATCH_MP_TAC (arith `x + y = c ==> x = c - y`);
    MATCH_MP_TAC Merge_ineq.atn_inv;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `acs(&1 / &3) = pi / &2 - atn (&1 / sqrt8)` ENOUGH_TO_SHOW_TAC;
    REWRITE_TAC[Sphere.sol0];
    BY(REAL_ARITH_TAC);
  GMATCH_SIMP_TAC ACS_ATN;
  CONJ_TAC;
    BY(REAL_ARITH_TAC);
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  Calc_derivative.CALC_ID_TAC;
  CONJ_TAC;
    GMATCH_SIMP_TAC SQRT_EQ_0;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  REWRITE_TAC[ (arith `x - &3 * s = &0 <=> s = x / &3`)];
  GMATCH_SIMP_TAC SQRT_UNIQUE;
  TYPIFY `sqrt8 / &3` EXISTS_TAC;
  REWRITE_TAC[arith `(sqrt8 / &3) pow 2 = (sqrt8 * sqrt8) / &9`];
  BY(MP_TAC Nonlinear_lemma.sqrt8_2 THEN ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let TSKAJXY_IYOUOBF_SHARP_V2 = prove_by_refinement(
  `gamma4fgcy (sqrt8) (&2) (&2) (&2) (&2) (&2) lmfun = &0`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.gamma4fgcy;Sphere.gamma4f;Sphere.vol_y;Sphere.vol4f;Sphere.y_of_x;arith `(&2 / &2) = &1`;arith `&2 * &2 = &4`];
  REWRITE_TAC[Sphere.vol_x;Sphere.sol_y;Sphere.dih_y;LET_THM;arith `&2 * &2 = &4`];
  REWRITE_TAC[Nonlinear_lemma.sqrt8_2;arith `#8.0 = &8`];
  REWRITE_TAC[Nonlinear_lemma.dih_x_sym];
  TYPIFY `dih_x (&4) (&4) (&4) (&4) (&4) (&8) = dih_x (&4) (&4) (&8) (&4) (&4) (&4)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2]);
  REWRITE_TAC[dih_x_844];
  TYPIFY ` delta_x (&8) (&4) (&4) (&4) (&4) (&4) = &128` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
  TYPIFY `lmfun (sqrt8 / &2) = &0` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC Nonlinear_lemma.hminus_high;
    BY(MP_TAC Flyspeck_constants.bounds THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
  TYPIFY `lmfun (&1) = &1` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC Nonlinear_lemma.lmfun_lfun2;
    REWRITE_TAC[Nonlinear_lemma.lfun1];
    BY(REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
  REWRITE_TAC[Sphere.mm1;Sphere.mm2;Sphere.tau0];
  TYPIFY `sqrt(&128) = &8 * sqrt2` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC SQRT_UNIQUE;
    TYPIFY `&8 * sqrt2` EXISTS_TAC;
    REWRITE_TAC[arith `(a * b)  pow 2 = (a * a) * (b * b)`;Nonlin_def.sqrt2_sqrt2];
    GMATCH_SIMP_TAC REAL_LE_MUL;
    REWRITE_TAC[Sphere.sqrt2];
    GMATCH_SIMP_TAC SQRT_POS_LE;
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[GSYM Sphere.sqrt2;GSYM Sphere.sqrt8;Nonlinear_lemma.sqrt8_sqrt2];
  Calc_derivative.CALC_ID_TAC;
  TYPIFY `~(&4 * pi - &20 * sol0 = &0)` ENOUGH_TO_SHOW_TAC;
    MP_TAC PI_POS;
    BY(REAL_ARITH_TAC);
  BY(MP_TAC Flyspeck_constants.bounds THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let GRKIBMP_B_V2_SHARP = prove_by_refinement(
  `   (y_of_x (gamma2_x1_div_a_v2 (&0)) sqrt8 (&1) (&1) (&1) (&1) (&1)  =  &0  )`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;Functional_equation.nonf_gamma2_x1_div_a_v2];
  REWRITE_TAC[Nonlinear_lemma.sqrt8_2;Nonlin_def.gamma2_x_div_azim_v2;arith `#8.0 = &8`];
  TYPIFY `sqrt(&8) / sqrt8 = &1` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[Sphere.sqrt8];
    Calc_derivative.CALC_ID_TAC;
    GMATCH_SIMP_TAC SQRT_EQ_0;
    BY(REAL_ARITH_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let acs_atn_alt = prove_by_refinement(
  `!x. &0 < x /\ x < &1 ==> acs x = atn (sqrt(&1 - x pow 2) / x)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[ACS_ATN];
  GMATCH_SIMP_TAC ACS_ATN;
  CONJ_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `p - a = b <=> a + b = p`];
  TYPIFY `sqrt (&1 - x pow 2) / x = &1 / (x / sqrt (&1 - x pow 2))` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    GMATCH_SIMP_TAC SQRT_EQ_0;
    REWRITE_TAC[arith `(&0 <= &1 - u <=> u <= &1) /\ (&1 - x = &0 <=> x = &1)`];
    REWRITE_TAC[ABS_SQUARE_EQ_1;ABS_SQUARE_LE_1];
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  MATCH_MP_TAC Merge_ineq.atn_inv;
  GMATCH_SIMP_TAC REAL_LT_DIV;
  GMATCH_SIMP_TAC SQRT_POS_LT;
  REWRITE_TAC[arith `&0 < &1 - u <=> u < &1`;ABS_SQUARE_LT_1];
  BY(ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let acs_3_alt = prove_by_refinement(
  `acs(&1 / &3) = atn sqrt8`,
  (* {{{ proof *)
  [
  GMATCH_SIMP_TAC acs_atn_alt;
  CONJ_TAC;
    BY(REAL_ARITH_TAC);
  AP_TERM_TAC;
  REWRITE_TAC[Sphere.sqrt8];
  Calc_derivative.CALC_ID_TAC;
  CONJ_TAC;
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[arith `x - y = &0 <=> y = x`];
  GMATCH_SIMP_TAC SQRT_UNIQUE;
  TYPIFY `sqrt (&1 - (&1 / &3) pow 2) * &3` EXISTS_TAC;
  REWRITE_TAC[];
  GMATCH_SIMP_TAC REAL_LE_MUL;
  GMATCH_SIMP_TAC SQRT_POS_LE;
  REWRITE_TAC[arith `(a * b) pow 2 = (a pow 2) * (b pow 2)`];
  GMATCH_SIMP_TAC SQRT_POW_2;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let QZECFIC_WT0_CORNER = prove_by_refinement(
  `y_of_x (gamma3f_x_div_sqrtdelta (&1) (&1) (&1)) (&1) (&1) (&1) (&2) (&2) (&2) = &0`,
  (* {{{ proof *)
  [
  TYPIFY `sqrt(&4) = &2` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC SQRT_UNIQUE;
    TYPIFY `&2` EXISTS_TAC;
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[Sphere.y_of_x;Functional_equation.nonf_gamma3f_x_div_sqrtdelta];
  TYPIFY `lfun (sqrt (&2 * &2) * #0.5) = &1` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx;
    REWRITE_TAC[arith `&2 * #0.5 = &1`;Nonlinear_lemma.lfun1];
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[arith `&2 * &2 = &4`];
  INTRO_TAC Merge_ineq.sol_x_sol_x_sqrtdelta [`&4`;`&2`;`&4`;`&2`;`&4`;`&2`];
  INTRO_TAC Merge_ineq.dih_x_dih_x_div_sqrtdelta_posbranch [`&4`;`&2`;`&4`;`&2`;`&4`;`&2`];
  REWRITE_TAC[arith `x + x+ x = &3 * x`];
  TYPIFY `delta_x (&4) (&2) (&4) (&2) (&4) (&2)  = &32` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
  TYPIFY `delta_x4 (&4) (&2) (&4) (&2) (&4) (&2) = &16` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Sphere.delta_x4] THEN REAL_ARITH_TAC);
  TYPIFY `eulerA_x (&4) (&2) (&4) (&2) (&4) (&2) = &8 + &6 * sqrt2` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[Sphere.eulerA_x];
    ASM_REWRITE_TAC[GSYM Sphere.sqrt2];
    BY(REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(REAL_ARITH_TAC);
  DISCH_TAC;
  TYPIFY `&0 < &8 + &6 * sqrt2` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC (arith `&0 < x /\ &0 < y ==> &0 < x + y`);
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    REWRITE_TAC[Sphere.sqrt2];
    GMATCH_SIMP_TAC SQRT_POS_LT;
    BY(REAL_ARITH_TAC);
  ANTS_TAC;
    ASM_REWRITE_TAC[];
    BY(REAL_ARITH_TAC);
  DISCH_TAC;
  TYPIFY `~(sqrt(&32) = &0)` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC SQRT_EQ_0;
    BY(REAL_ARITH_TAC);
  TYPIFY `dih_x_div_sqrtdelta_posbranch (&4) (&2) (&4) (&2) (&4) (&2) = dih_x (&4) (&2) (&4) (&2) (&4) (&2) / sqrt(&32)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_TAC THEN CONV_TAC REAL_FIELD);
  TYPIFY `sol_euler_x_div_sqrtdelta (&4) (&2) (&4) (&2) (&4) (&2) = sol_euler_x (&4) (&2) (&4) (&2) (&4) (&2) / sqrt(&32)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_TAC THEN CONV_TAC REAL_FIELD);
  REPLICATE_TAC 2 (FIRST_X_ASSUM_ST `sqrt x * y` kill);
  GMATCH_SIMP_TAC (GSYM Merge_ineq.sol_x_sol_euler_x);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(REWRITE_TAC[Sphere.ups_x] THEN REAL_ARITH_TAC);
  REWRITE_TAC[Sphere.sol_x];
  REWRITE_TAC[Nonlinear_lemma.dih_x_sym];
  COMMENT "evaluate dih";
  TYPIFY `!x y. &0 < x ==> atn2(x,y) = atn(y / x)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(MESON_TAC[Trigonometry1.ATN2_BREAKDOWN]);
  TYPIFY `dih_x (&2) (&4) (&4) (&4) (&2) (&2) = pi / &2` (C SUBGOAL_THEN SUBST1_TAC);
    ASM_REWRITE_TAC[Sphere.dih_x;LET_THM];
    TYPIFY `delta_x4 (&2) (&4) (&4) (&4) (&2) (&2) = &0` (C SUBGOAL_THEN SUBST1_TAC);
      BY(REWRITE_TAC[Sphere.delta_x4] THEN REAL_ARITH_TAC);
    REWRITE_TAC[arith `-- &0 = &0`];
    FIRST_X_ASSUM GMATCH_SIMP_TAC;
    REWRITE_TAC[arith `&0 / x = &0`;ATN_0];
    GMATCH_SIMP_TAC SQRT_POS_LT;
    BY(REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
  TYPIFY `dih_x (&4) (&2) (&4) (&2) (&4) (&2) = atn sqrt2` (C SUBGOAL_THEN SUBST1_TAC);
    ASM_REWRITE_TAC[Sphere.dih_x;LET_THM];
    FIRST_X_ASSUM GMATCH_SIMP_TAC;
    GMATCH_SIMP_TAC SQRT_POS_LT;
    REWRITE_TAC[arith `-- x / y = -- (x /y)`;ATN_NEG];
    TYPIFY `&16 / sqrt(&4 * &4 * &32) = &1 / sqrt (&2)` (C SUBGOAL_THEN SUBST1_TAC);
      Calc_derivative.CALC_ID_TAC;
      GMATCH_SIMP_TAC SQRT_EQ_0;
      GMATCH_SIMP_TAC SQRT_EQ_0;
      REWRITE_TAC[arith `x - y = &0 <=> y = x`];
      GMATCH_SIMP_TAC SQRT_UNIQUE;
      TYPIFY `&16 * sqrt (&2)` EXISTS_TAC;
      REWRITE_TAC[GSYM Sphere.sqrt2];
      TYPIFY `&0 <= sqrt2 /\ sqrt2 * sqrt2 = &2` ENOUGH_TO_SHOW_TAC;
        BY(REAL_ARITH_TAC);
      REWRITE_TAC[Nonlin_def.sqrt2_sqrt2];
      REWRITE_TAC[Sphere.sqrt2];
      GMATCH_SIMP_TAC SQRT_POS_LE;
      BY(REAL_ARITH_TAC);
    CONJ_TAC;
      BY(REAL_ARITH_TAC);
    REWRITE_TAC[arith `p + -- i  = a <=> a + i = p`];
    REWRITE_TAC[Sphere.sqrt2];
    MATCH_MP_TAC Merge_ineq.atn_inv;
    GMATCH_SIMP_TAC SQRT_POS_LT;
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[atn_sqrt2];
  REWRITE_TAC[GSYM acs_3_alt];
  TYPIFY `acs (&1 / &3) = (sol0 + pi) / &3` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[Sphere.sol0];
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[Sphere.mm1;Sphere.mm2;Sphere.tau0];
  TYPIFY `sqrt(&32) = &4 * sqrt2` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC SQRT_UNIQUE;
    TYPIFY `&4 * sqrt2` EXISTS_TAC;
    REWRITE_TAC[];
    CONJ_TAC;
      GMATCH_SIMP_TAC REAL_LE_MUL;
      REWRITE_TAC[Sphere.sqrt2];
      GMATCH_SIMP_TAC SQRT_POS_LE;
      BY(REAL_ARITH_TAC);
    BY(MP_TAC Nonlin_def.sqrt2_sqrt2 THEN REAL_ARITH_TAC);
  REWRITE_TAC[GSYM Sphere.sqrt2;GSYM Sphere.sqrt8;Nonlinear_lemma.sqrt8_sqrt2];
  Calc_derivative.CALC_ID_TAC;
  TYPIFY_GOAL_THEN `~(&4 * pi - &20 * sol0 = &0)` (unlist REWRITE_TAC);
    BY(MP_TAC Flyspeck_constants.bounds THEN REAL_ARITH_TAC);
  TYPIFY_GOAL_THEN `~(sqrt2 = &0)` (unlist REWRITE_TAC);
    REWRITE_TAC[Sphere.sqrt2];
    GMATCH_SIMP_TAC SQRT_EQ_0;
    BY(REAL_ARITH_TAC);
  MP_TAC PI_POS;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

 end;;
