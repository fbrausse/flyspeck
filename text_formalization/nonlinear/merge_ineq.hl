(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Nonlinear                                                         *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2012-06-08                                                           *)
(* ========================================================================== *)

(*
Copies DIHV_EQ_DIH_Y from Tame_general.

*)

(*

There are many nonlinear inequalities in the database, which have
been broken into pieces to simplify verification.  However, the text
"Dense Sphere Packings" uses the inequalities in a merged formed that
combine many separate pieces.  Here we merge the inequalities
into the form used in the text.

In particular the 5*46 inequalities of nonlinear/ineqdata3q1h.hl have
been merged into a single inequality: ox3q1h_merge (in 13 variables).
The assumption ox3q1h is the conjunction of these 230 inequalities.

This file is rather slow to load because it processes hundreds of
inequalities.
*)



flyspeck_needs "nonlinear/ineqdata3q1h.hl";;

module Merge_ineq = struct

  open Hales_tactic;;

  let CALC_ID_TAC = Calc_derivative.CALC_ID_TAC;;

(* ========================================================================== *)
(* Merge ineqdata3q1h.hl into a single inequality *)
(* ========================================================================== *)

let idq_of_string s = hd(Ineq.getexact s);;

(* idq_of_string "OXLZLEZ 6346351218 1 18";; *)


(* merge the inequalities in ineqdata3q1h.hl *)

let ox n i = 
  (idq_of_string (Printf.sprintf "OXLZLEZ 6346351218 %d %d" i n)).ineq;;

let tm0 n = ox n 0;;
let tm1 n = ox n 1;;
let tm2 n = ox n 2;;
let tm3 n = ox n 3;;
let tm4 n = ox n 4;;

let numcases = List.length Ineqdata3q1h.records;;

let ox_conj n = end_itlist (curry mk_conj) [tm0 n;tm1 n;tm2 n;tm3 n;tm4 n];;
let ox3q1h_term() =  
  end_itlist (curry mk_conj) (map ox_conj (0--(numcases-1)));;
let ox3q1h() =  new_definition (mk_eq (`ox3q1h:bool`,ox3q1h_term()));;
let ox3q1h_mp = MP_TAC(ox3q1h());;

let [yv;a12;a23;a34;a14;b12;b23;b34;b14;c1;c2;c3;c4] = 
  map (fun t -> mk_var(t,`:real`))
    (Str.split (Str.regexp " ")
       "y a12 a23 a34 a14 b12 b23 b34 b14 c1 c2 c3 c4");;

let y12 = `(a12 + b12)/ &2`;;
let y23 = `(a23 + b23)/ &2`;;
let y34 = `(a34 + b34)/ &2`;;
let y41 = `(a14 + b14)/ &2`;;

let specl x = concl o (SPECL x) o ASSUME;;
let spec1 = specl[yv;a12;a14;c1;b14;b12];;
let spec2 = specl[yv;a23;a12;c2;b12;b23];;
let spec3 = specl[yv;a34;a23;c3;b23;b34];;
let spec4 = specl[yv;a14;a34;c4;b14;b34];;
let spec0 = specl[yv;y12;y23;y34;y41];;
let in1 n  = spec1 (tm1 n);;
let in2 n = spec2 (tm2 n);;
let in3 n = spec3 (tm3 n);;
let in4 n = spec4  (tm4 n);;
let in0 n = spec0  (tm0 n);;

(* labels: y=spine, aij lower edge shared between i & j. bij = top edge.
   ci = edge opp spine on simplex i *)
prioritize_real();;

(*
let getinstantiation = 
  let concl1 = ` (gamma4fgcy y1 y2 y3 y4 y5 y6 lmfun / w +
		    cb * beta_bump_force_y y1 y2 y3 y4 y5 y6 +
        cd * dih_y y1 y2 y3 y4 y5 y6 +
        cy * y1 +
        cab * (y2 + y3 + y5 + y6) +
        cc >
        &0)` in
  fun in2 -> 
    let u =  hd(tl(snd (strip_comb in2))) in
      (term_match [] (concl1)) u;;
*)

let combinator_lemma = 
  prove_by_refinement(`!cd cy1 cy2 cy3 cy4 cab1 cab2 cab3 cab4 cc1 cc2 cc3 cc4.
   ((dih_y y a12 a14 c1 b14 b12 +
      dih_y y a23 a12 c2 b12 b23 +
      dih_y y a34 a23 c3 b23 b34 +
      dih_y y a14 a34 c4 b14 b34 =
      &2 * pi) /\ (&2 * pi * cd +
 (cy1 + cy2 + cy3 + cy4) * y +
 &2 * (cab1 + cab2) * (a12 + b12) / &2 +
 &2 * (cab2 + cab3) * (a23 + b23) / &2 +
 &2 * (cab3 + cab4) * (a34 + b34) / &2 +
 &2 * (cab4 + cab1) * (a14 + b14) / &2 +
 cc1 +
 cc2 +
 cc3 +
 cc4 <
 &0) /\ ( gamma4fgcy y a12 a14 c1 b14 b12 lmfun / &2 +
     &1 * beta_bump_force_y y a12 a14 c1 b14 b12 +
     cd * dih_y y a12 a14 c1 b14 b12 +
     cy1 * y +
     cab1 * (a12 + a14 + b14 + b12) +
     cc1 >
     &0) /\ 
   (gamma4fgcy y a23 a12 c2 b12 b23 lmfun / &1 +
     &0 * beta_bump_force_y y a23 a12 c2 b12 b23 +
     cd * dih_y y a23 a12 c2 b12 b23 +
     cy2 * y +
     cab2 * (a23 + a12 + b12 + b23) +
     cc2 > &0) /\
   (gamma4fgcy y a34 a23 c3 b23 b34 lmfun / &1 +
     &0 * beta_bump_force_y y a34 a23 c3 b23 b34 +
     cd * dih_y y a34 a23 c3 b23 b34 +
     cy3 * y +
     cab3 * (a34 + a23 + b23 + b34) +
     cc3 >
     &0) /\
    (gamma4fgcy y a14 a34 c4 b14 b34 lmfun / &1 +
     &0 * beta_bump_force_y y a14 a34 c4 b14 b34 +
     cd * dih_y y a14 a34 c4 b14 b34 +
     cy4 * y +
     cab4 * (a14 + a34 + b14 + b34) +
     cc4 >
     &0) ==> 
    (  gamma4fgcy y a12 a14 c1 b14 b12 lmfun / &2 +
     beta_bump_force_y y a12 a14 c1 b14 b12 +
     gamma4fgcy y a23 a12 c2 b12 b23 lmfun +
     gamma4fgcy y a34 a23 c3 b23 b34 lmfun +
     gamma4fgcy y a14 a34 c4 b14 b34 lmfun >
     &0 
     ))`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REPEAT(FIRST_X_ASSUM_ST `gamma4fgcy` MP_TAC);
  MATCH_MP_TAC (arith `(a + b+c+d - e < &0)   ==> ((a > &0) ==> (b > &0) ==> (c > &0) ==> (d > &0) ==> (e> &0))`);
  FIRST_X_ASSUM MP_TAC;
  MATCH_MP_TAC (arith `(t = e) ==> ((t< &0) ==> (e < &0))`);
  REWRITE_TAC[arith `&2 * pi * cd = (&2 * pi) * cd`];
  FIRST_X_ASSUM (fun t -> SUBST1_TAC (SYM t));
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let template_OX = `!in0 in1 in2 in3 in4
  y' y''
  c1' c1'' c2' c2'' c3' c3'' c4' c4''
  a12' a12'' a23' a23'' a34' a34'' a14' a14''
  b12' b12'' b23' b23'' b34' b34'' b14' b14''.
  (in0 /\ in1 /\ in2 /\ in3 /\ in4) ==>
  ineq [(y',y,y'');
   (c1',c1,c1'');
   (c2',c2,c2'');
   (c3',c3,c3'');
   (c4',c4,c4'');
   (a12',a12,a12'');
   (a23',a23,a23'');
   (a34',a34,a34'');
   (a14',a14,a14'');
   (b12',b12,b12'');
   (b23',b23,b23'');
   (b34',b34,b34'');
   (b14',b14,b14'')
   ]
  ((dih_y y a12 a14 c1 b14 b12  + 
  dih_y y a23 a12 c2 b12 b23  +
  dih_y y a34 a23 c3 b23 b34  +
  dih_y y a14 a34 c4 b14 b34 = &2 * pi) ==>
  (gamma4fgcy y a12 a14 c1 b14 b12 lmfun / &2 + 
  beta_bump_force_y y a12 a14 c1 b14 b12 +
  gamma4fgcy y a23 a12 c2 b12 b23 lmfun +
  gamma4fgcy y a34 a23 c3 b23 b34 lmfun +
  gamma4fgcy y a14 a34 c4 b14 b34 lmfun > &0))`;;

let template_OX2 = `!
  y' y''
  c1' c1'' c2' c2'' c3' c3'' c4' c4''
  a12' a12'' a23' a23'' a34' a34'' a14' a14''
  b12' b12'' b23' b23'' b34' b34'' b14' b14''.
  ox3q1h ==>
  ineq [(y',y,y'');
   (c1',c1,c1'');
   (c2',c2,c2'');
   (c3',c3,c3'');
   (c4',c4,c4'');
   (a12',a12,a12'');
   (a23',a23,a23'');
   (a34',a34,a34'');
   (a14',a14,a14'');
   (b12',b12,b12'');
   (b23',b23,b23'');
   (b34',b34,b34'');
   (b14',b14,b14'')
   ]
  ((dih_y y a12 a14 c1 b14 b12  + 
  dih_y y a23 a12 c2 b12 b23  +
  dih_y y a34 a23 c3 b23 b34  +
  dih_y y a14 a34 c4 b14 b34 = &2 * pi) ==>
  (gamma4fgcy y a12 a14 c1 b14 b12 lmfun / &2 + 
  beta_bump_force_y y a12 a14 c1 b14 b12 +
  gamma4fgcy y a23 a12 c2 b12 b23 lmfun +
  gamma4fgcy y a34 a23 c3 b23 b34 lmfun +
  gamma4fgcy y a14 a34 c4 b14 b34 lmfun > &0))`;;


let dest_triple x = 
  let (a,b) = dest_pair x in
  let (b,c) = dest_pair b in (b,(a,c));;

let getbounds tm =
  let xx1 = hd(snd(strip_comb tm)) in
  let xx2 = dest_list xx1 in
    map dest_triple xx2;;

let allbounds n = setify(List.flatten (map getbounds [in1 n;in2 n;in3 n;in4 n]));;

let goal_OX n = 
  let g1 = specl [in0 n;in1 n;in2 n;in3 n;in4 n] template_OX in
  let a = C assoc (allbounds n) in
  let s1 v g = 
    let (v',v'')  = a v in
      specl [v';v''] g in
    itlist s1 (List.rev [yv;c1;c2;c3;c4;a12;a23;a34;a14;b12;b23;b34;b14]) g1;;

let goal_OX2 n = 
  let g1 = template_OX2 in
  let a = C assoc (allbounds n) in
  let s1 v g = 
    let (v',v'')  = a v in
      specl [v';v''] g in
    itlist s1 (List.rev [yv;c1;c2;c3;c4;a12;a23;a34;a14;b12;b23;b34;b14]) g1;;


let mk13ner n = prove_by_refinement(
  goal_OX n,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq];
  REPEAT STRIP_TAC;
  REPEAT (FIRST_X_ASSUM_ST `/\` MP_TAC);
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[arith `a <= b /\ a <= c ==> a <= (b + c)/ &2`; arith `b <= a /\ c <= a ==> (b + c)/ &2 <= a` ];
  FIRST_X_ASSUM_ST `dih_y` MP_TAC;
  REWRITE_TAC[TAUT `(a ==> b==>c ==>d==>e==>f==>g)<=>(a /\ b /\ c /\ d/\ e /\ f ==>g)`];
  DISCH_THEN (fun t -> ASSUME_TAC (MATCH_MP combinator_lemma t));
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let mk_ox3q1h n = prove_by_refinement(
  goal_OX2 n,
  (* {{{ proof *)
  [
 REPEAT WEAK_STRIP_TAC;
  MATCH_MP_TAC (mk13ner n);
  BY(BY(ox3q1h_mp THEN ASM_REWRITE_TAC[] THEN REPEAT WEAK_STRIP_TAC THEN ASM_REWRITE_TAC[]))
  ]);;
  (* }}} *)

let ox3q1h_46() = map mk_ox3q1h (0--(numcases-1));;

(* now start combining inequalities from ineqdata31h.hl *)


let ineq_APPEND = prove_by_refinement(
  `!v f u. ineq (APPEND u v) f = ineq u (ineq v f)`,
  (* {{{ proof *)
  [
  GEN_TAC;
  GEN_TAC;
  LIST_INDUCT_TAC;
    REWRITE_TAC[APPEND];
    BY(REWRITE_TAC[APPEND;Sphere.ineq]);
  REWRITE_TAC[APPEND;Sphere.ineq];
  SUBGOAL_THEN `?(a:real) (b:real) (c:real). h = (a,b,c)` MP_TAC;
    BY(MESON_TAC[PAIR_SURJECTIVE]);
  REPEAT WEAK_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Sphere.ineq];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let pathL_pathR = prove_by_refinement(
  `!c x.
    (FST c <= x /\ x <= SND c) <=> (
      (FST(pathL c) <= x /\ x <= SND(pathL c)) \/
      (FST(pathR c) <= x /\ x <= SND(pathR c)))
`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  SUBGOAL_THEN `?(a:real) (b:real). c = (a,b)` MP_TAC;
    BY(REWRITE_TAC[PAIR_SURJECTIVE]);
  REPEAT WEAK_STRIP_TAC;
  ASM_REWRITE_TAC[Sphere.pathL;Sphere.pathR];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let ineq_pathL_pathR = prove_by_refinement(
  `!u c x f.
    ineq (APPEND u (CONS (FST(pathL c),x,SND(pathL c)) v)) f /\ 
    ineq (APPEND u (CONS (FST(pathR c),x,SND(pathR c)) v)) f ==>
    ineq (APPEND u (CONS (FST c,x,SND c) v)) f`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ineq_APPEND];
  REWRITE_TAC[Sphere.ineq];
  REPEAT WEAK_STRIP_TAC;
  ONCE_REWRITE_TAC[pathL_pathR];
  REPEAT (FIRST_X_ASSUM MP_TAC);
  BY(ASM_CASES_TAC `FST (pathL c) <= x /\ x <= SND (pathL c)` THEN ASM_CASES_TAC ` FST (pathR c) <= x /\ x <= SND (pathR c)` THEN ASM_REWRITE_TAC[] THEN REPEAT WEAK_STRIP_TAC THEN ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let chop0 = prove_by_refinement(
  `!l. l = APPEND [] l`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[APPEND])
  ]);;
  (* }}} *)

let chop1 = prove_by_refinement(
  `!l. CONS a l = APPEND [a] l`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[APPEND])
  ]);;
  (* }}} *)

let chop2 = prove_by_refinement(
  `!l. CONS a1 (CONS a2 l) = APPEND [a1;a2] l`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[APPEND])
  ]);;
  (* }}} *)

let chop3 = prove_by_refinement(
  `!l. CONS a1 (CONS a2 (CONS a3 l)) = APPEND [a1;a2;a3] l`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[APPEND])
  ]);;
  (* }}} *)

let chop4 = prove_by_refinement(
  `!l. CONS a1 (CONS a2 (CONS a3 (CONS a4 l))) = APPEND [a1;a2;a3;a4] l`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[APPEND])
  ]);;
  (* }}} *)

let chop5 = prove_by_refinement(
  `!l. CONS a1 (CONS a2 (CONS a3 (CONS a4 (CONS a5 l)))) = APPEND [a1;a2;a3;a4;a5] l`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[APPEND])
  ]);;
  (* }}} *)

let CHOP_LIST_TAC n = 
  let chop = List.nth [chop0;chop1;chop2;chop3;chop4;chop5] n in
    ONCE_REWRITE_TAC[chop];;

let CHOP_LIST_RULE n = 
  let chop = List.nth [chop0;chop1;chop2;chop3;chop4;chop5] n in
    ONCE_REWRITE_RULE[chop];;

let get_cover i = 
  let zipr = zip (0--(numcases-1)) Ineqdata3q1h.records  in
  let fil = filter (fun (_,t) -> t.caseno=i) zipr in
  let v = List.rev in
      map 
	(fun (k,t) -> 
	   (k,(v t.branch1,v t.branch2,v t.branch3,v t.branch4,v t.branch5))) 
	     fil;;

let op1 gc k = 
  let thm = REWRITE_RULE[FST;SND] (UNDISCH (mk_ox3q1h k)) in
    (thm,assoc k gc);;

let prep n = 
  let gc = get_cover n in 
  let vs = map fst gc in
    map (op1 gc) vs;;

let merge_match (th1,r1) (th2,r2) =
  let ((bx,nx),r3) = Ineqdata3q1h.combine (r1,r2) in
  let (th1',th2') = if bx then (th1,th2) else (th2,th1) in
  let th3 = CHOP_LIST_RULE nx (CONJ th1' th2') in
  let th4 = MATCH_MP ineq_pathL_pathR th3 in
  let th5 = REWRITE_RULE[APPEND;FST;SND] th4 in
    (th5,r3);;

let rec combine_l = function
    [] -> []
  | [a] -> [a]
  | a::b::cs ->
      try (merge_match a b)::cs 
      with Failure _ -> a::combine_l (b::cs);;

let rec combine_r x = 
  let x'= combine_l x in
    if (x'=x) then x else combine_r x';;

let combos = map (combine_r o prep) (1--4);;    
let partial_merge = end_itlist CONJ (map fst (List.flatten combos));;

let hminus_h0_hplus = prove_by_refinement(
  `!x. (&2 * hminus <= x /\ x <= &2 * hplus) <=> ((&2 * hminus <= x /\ x <= &2 *h0) \/ (&2 * h0 <= x /\ x <= &2 * hplus))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  MP_TAC Nonlinear_lemma.hminus_lt_h0;
  MP_TAC Nonlinear_lemma.h0_lt_hplus;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let ox3q1h_merge = prove_by_refinement(
  `ox3q1h ==>
   !y c1 c2 c3 c4 a12 a23 a34 a14 b12 b23 b34 b14.
        ineq
       [&2 * hminus,y,&2 * hplus; &2 * hminus,c1,&2 * hplus; &2,c2,&2 * hminus; 
       &2,
       c3,
       &2 * hminus; &2,c4,&2 * hminus; &2,a12,&2 * hminus; &2,a23,&2 * hminus; 
       &2,
       a34,
       &2 * hminus; &2,a14,&2 * hminus; &2,b12,&2 * hminus; &2,
                                                            b23,
                                                            &2 * hminus; 
       &2,
       b34,
       &2 * hminus; &2,b14,&2 * hminus]
       (dih_y y a12 a14 c1 b14 b12 +
        dih_y y a23 a12 c2 b12 b23 +
        dih_y y a34 a23 c3 b23 b34 +
        dih_y y a14 a34 c4 b14 b34 =
        &2 * pi
        ==> gamma4fgcy y a12 a14 c1 b14 b12 lmfun / &2 +
            beta_bump_force_y y a12 a14 c1 b14 b12 +
            gamma4fgcy y a23 a12 c2 b12 b23 lmfun +
            gamma4fgcy y a34 a23 c3 b23 b34 lmfun +
            gamma4fgcy y a14 a34 c4 b14 b34 lmfun >
            &0)`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  MP_TAC partial_merge;
  CHOP_LIST_TAC (2);
  REWRITE_TAC[ineq_APPEND];
  REPLICATE_TAC 3 (ONCE_REWRITE_TAC[Sphere.ineq]);
  REWRITE_TAC[hminus_h0_hplus];
  BY(BOOL_CASES_TAC `&2 * hminus <= y /\ y <= &2 * h0` THEN BOOL_CASES_TAC `&2 * h0 <= y /\ y <= &2 * hplus` THEN BOOL_CASES_TAC `&2 * hminus <= c1 /\ c1 <= &2 * h0` THEN BOOL_CASES_TAC `&2 * h0 <= c1 /\ c1 <= &2 * hplus` THEN REWRITE_TAC[] THEN ASM_MESON_TAC[])
  ]);;
  (* }}} *)

(* ========================================================================== *)
(* Prove Ineq.TSKAJXY_DERIVED.ineq from the nonlinear inequalities            *)
(* ========================================================================== *)


let atn2_0 = REWRITE_RULE[ATN_0;arith `&0 <= &0`;arith `~(&0 < &0)`;arith `x - &0 = x`;arith `&0/x = &0`] (SPEC `&0` Trigonometry1.ATN2_BREAKDOWN);;

let matan_pos = prove_by_refinement(
  `!x. (&0 < x ==> matan x = atn (sqrt x) / sqrt x)`,
  (* {{{ proof *)
  [
  BY(ASM_MESON_TAC[Sphere.matan;arith `&0 < x ==> ~(x = &0) /\ (&0 < x <=> x > &0)`])
  ]);;
  (* }}} *)

let pi2_sub_atn2 = prove_by_refinement(
  `!x y. (&0 < x /\ &0 < y) ==> pi/ &2 - atn2(x,y) = atn2(y,x)`,
  (* {{{ proof *)
  [
    ASM_MESON_TAC[Trigonometry1.ATN2_BREAKDOWN]
  ]);;
  (* }}} *)


 let ups_x_pos24 = prove_by_refinement(
  `!a b c. &2 <= a /\ a < &4 /\ &2 <= b /\ b < &4 /\ &2 <= c /\ c < &4 ==> &0 < ups_x (a pow 2) (b pow 2) (c pow 2)`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  REWRITE_TAC[arith `a pow 2 = a * a`];
  MATCH_MP_TAC Ysskqoy.TRI_UPS_X_STRICT_POS;
  REPEAT (FIRST_X_ASSUM MP_TAC);
  (BY(ASM_REAL_ARITH_TAC))
  ]);;
  (* }}} *)

let sqrtpow2 = prove_by_refinement(
  `!x. &0 <= x ==> sqrt x * sqrt x = x`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  MATCH_MP_TAC (ISPEC `&0` Nonlinear_lemma.sq_pow2);
  BY(FIRST_X_ASSUM MP_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)


(*
let FROZEN_ONCE_REWRITE_TAC ths = 
     let th = end_itlist CONJ ths in
      FREEZE_THEN (fun t -> ONCE_REWRITE_TAC[t]) th;;
*)

let COLLECT_MONOM t =  (Optimize.FROZEN_REWRITE_TAC [
  (SPEC t (REAL_ARITH `!t  u v w. (((u * v)* w = u * v*w) /\ (t * (u * v)) = (u * (t * v)) /\  (t * t = t pow 2) /\ (t * t * u = (t pow 2 * u)))`))]);;


let loc_dot = prove_by_refinement(
  `!v0 (v1:real^3). (v1 - v0) dot (v1 - v0) = -- &2 * v0 dot v1 + v0 dot v0 + v1 dot v1`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REWRITE_TAC[VECTOR_ARITH `((v1:real^3) - v0) dot (v1 - v0) = v1 dot v1 - &2 * v0 dot v1 + v0 dot v0`];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let vector_of_simplex_dot = prove_by_refinement(
  `!(v0:real^3) v1 v2 v3 x1 x2 x3 x4 x5 x6. 
    ((v0 = vec 0) /\
	(v1 dot v1 = x1) /\
	(v2 dot v2 = x2) /\
	(v3 dot v3 = x3) /\
	(v1 dot v2 = (x1 + x2 - x6)/ &2) /\
	    (v1 dot v3 = (x1 + x3 - x5)/ &2) /\
		(v2 dot v3 = (x2 + x3 - x4)/ &2 )) ==>
	      ((x1 = dist(v0,v1) pow 2) /\
      (x2 = dist(v0,v2) pow 2) /\
      (x3 = dist(v0,v3) pow 2) /\
      (x4 = dist(v2,v3) pow 2) /\ 
      (x5 = dist(v1,v3) pow 2) /\
     (x6 = dist(v1,v2) pow 2))`,	    
  (* {{{ proof *)
  [
  REWRITE_TAC[Collect_geom.DIST_POW2_DOT;loc_dot];
  REPEAT WEAK_STRIP_TAC;
  ASM_REWRITE_TAC[VECTOR_ARITH `vec 0 dot u = &0 /\ u dot vec 0 = &0`];
  ONCE_REWRITE_TAC[VECTOR_ARITH `v3 dot v2 = v2 dot v3`];
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let vector_of_simplex_edge_lemma = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 y1 u1 d1 p. ~(y1= &0)  /\ ~(u1 = &0) /\
   &0 <= delta_x x1 x2 x3 x4 x5 x6 /\ y1 pow 2 = x1 /\ u1 pow 2 = ups_x x1 x2 x6 /\
       d1 pow 2 = delta_x x1 x2 x3 x4 x5 x6 /\ p = (x1*x1 - x1*x2 - x1*x3 + x2*x3 + &2*x1*x4 - x1*x5 - x2*x5 - x1*x6 - x3*x6 + x5*x6)
   ==>
    (let (v0:real^3) = vec 0 in
    let v1 = vector [y1; &0; &0] in
    let v2 = vector [(x1+x2 - x6)/(&2 * y1); u1/(&2 * y1); &0] in
    let v3 = vector [(x1+x3-x5)/(&2 * y1);
    -- p/(&2*y1 *u1);d1/u1]   in
      ((x1 = dist(v0,v1) pow 2) /\
      (x2 = dist(v0,v2) pow 2) /\
      (x3 = dist(v0,v3) pow 2) /\
      (x4 = dist(v2,v3) pow 2) /\ 
      (x5 = dist(v1,v3) pow 2) /\
     (x6 = dist(v1,v2) pow 2)))`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REWRITE_TAC[LET_DEF;LET_END_DEF];
  MATCH_MP_TAC vector_of_simplex_dot;
  REWRITE_TAC[Collect_geom.DIST_POW2_DOT;vector_norm;DOT_3;VECTOR_SUB_COMPONENT;VECTOR_3];
  BY(REPEAT CONJ_TAC THEN CALC_ID_TAC THEN ASM_REWRITE_TAC[arith `(-- x)*y = -- (x *y) /\ x*(--y) = -- (x * y) /\  (-- (x + y) = --x + --y) /\ (x +y)+z = x + y+z /\ (-- (-- x) = x) /\ (x - y = x + (-- y)) /\ x * &0 = &0 /\ &0 * x = &0 /\ (x + y)*z = x*z + y*z /\ z*(x+y) = z*x + z*y`;arith `(a * b) *c = a * b* c`;] THEN REPEAT (FIRST_X_ASSUM MP_TAC) THEN REWRITE_TAC[arith `~(&2= &0)`] THEN REPLICATE_TAC 3 DISCH_TAC THEN (COLLECT_MONOM `y1:real`) THEN (COLLECT_MONOM `u1:real`) THEN (COLLECT_MONOM `d1:real`) THEN REPEAT WEAK_STRIP_TAC THEN ASM_REWRITE_TAC[] THEN REWRITE_TAC[Sphere.ups_x;Sphere.delta_x] THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let simplex_exists = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. (&0 < x1 /\ &0 < ups_x x1 x2 x6 /\ &0 <=
   delta_x x1 x2 x3 x4 x5 x6) ==> (?(v0:real^3) v1 v2 v3.
    (	x1 = dist(v0,v1) pow 2 /\ 
      x2 = dist (v0,v2) pow 2 /\
      x3 = dist (v0,v3) pow 2 /\
      x4 = dist (v2,v3) pow 2 /\
      x5 = dist (v1,v3) pow 2 /\
      x6 = dist (v1,v2) pow 2))`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  MP_TAC (ISPECL [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`;`sqrt x1`;`sqrt(ups_x x1 x2 x6)`;`sqrt(delta_x x1 x2 x3 x4 x5 x6)`;`(x1*x1 - x1*x2 - x1*x3 + x2*x3 + &2*x1*x4 - x1*x5 - x2*x5 - x1*x6 - x3*x6 + x5*x6)`] vector_of_simplex_edge_lemma);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    REWRITE_TAC[SQRT_POW2];
    GMATCH_SIMP_TAC SQRT_EQ_0;
    GMATCH_SIMP_TAC SQRT_EQ_0;
    REPEAT (FIRST_X_ASSUM (MP_TAC));
    BY(REAL_ARITH_TAC);
  LET_TAC;
  REPEAT LET_TAC;
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

(* dihV = dih_y *)
let DIHV_EQ_DIH_Y = prove(`!v0:real^3 v1 v2 v3. ~collinear {v0, v1, v2} /\ ~collinear {v0, v1, v3}
			    ==> (let v01 = dist (v0, v1) in
				 let v02 = dist (v0, v2) in
				 let v03 = dist (v0, v3) in
				 let v12 = dist (v1, v2) in
				 let v13 = dist (v1, v3) in
				 let v23 = dist (v2, v3) in
				   dihV v0 v1 v2 v3 = dih_y v01 v02 v03 v23 v13 v12)`,
  REPEAT GEN_TAC THEN
    DISCH_TAC THEN
    FIRST_ASSUM (MP_TAC o (fun th -> CONJUNCT2 (MATCH_MP (let_RULE Trigonometry.OJEKOJF) th))) THEN
    DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN
    REPEAT (CONV_TAC let_CONV) THEN
    MAP_EVERY ABBREV_TAC [`v01 = dist(v0:real^3,v1)`; `v02 = dist(v0:real^3,v2)`;
			  `v03 = dist(v0:real^3,v3)`; `v12 = dist(v1:real^3,v2)`;
			  `v13 = dist(v1:real^3,v3)`; `v23 = dist(v2:real^3,v3)`;
			  `d = delta_x (v01 pow 2) (v02 pow 2) (v03 pow 2) (v23 pow 2) (v13 pow 2) (v12 pow 2)`;
			  `d4 = delta_x4 (v01 pow 2) (v02 pow 2) (v03 pow 2) (v23 pow 2) (v13 pow 2) (v12 pow 2)`] THEN
    REWRITE_TAC[let_RULE Sphere.dih_y; let_RULE Sphere.dih_x; GSYM REAL_POW_2] THEN
    ASM_REWRITE_TAC[REAL_ARITH `a - b = a + c <=> c = --b`] THEN    
    MATCH_MP_TAC Trigonometry1.ATN2_RNEG THEN
    DISJ_CASES_TAC (TAUT `~(d4 = &0) \/ d4 = &0`) THEN ASM_REWRITE_TAC[] THEN
    MATCH_MP_TAC SQRT_POS_LT THEN
    MP_TAC (let_RULE (SPECL [`v01 pow 2`; `v02 pow 2`; `v03 pow 2`; `v23 pow 2`; `v13 pow 2`; `v12 pow 2`] DELTA_X_AND_DELTA_X4)) THEN
    ASM_REWRITE_TAC[] THEN
    DISCH_THEN (fun th -> REWRITE_TAC[th; REAL_ARITH `a - &0 * &0 = a`]) THEN    
    MP_TAC (let_RULE Trigonometry2.NOT_COLLINEAR_IMP_UPS_LT) THEN
    ASM_REWRITE_TAC[] THEN
    MP_TAC (INST [`v3:real^3`,`v2:real^3`] (let_RULE Trigonometry2.NOT_COLLINEAR_IMP_UPS_LT)) THEN
    ASM_REWRITE_TAC[] THEN
    REPEAT DISCH_TAC THEN
    MATCH_MP_TAC REAL_LT_MUL THEN
    ASM_REWRITE_TAC[]);;

let DIHV_DIH_X = prove_by_refinement(
  `!(v0:real^3) v1 v2 v3. 
    (let x01 = dist (v0,v1) pow 2 in
                 let x02 = dist (v0,v2) pow 2 in
                 let x03 = dist (v0,v3) pow 2 in
                 let x12 = dist (v1,v2) pow 2 in
                 let x13 = dist (v1,v3) pow 2 in
                 let x23 = dist (v2,v3) pow 2 in
        &0 < ups_x x01 x02 x12 /\ &0 < ups_x x01 x03 x13 ==>  ( dihV v0 v1 v2 v3 = dih_x x01 x02 x03 x23 x13 x12)) 
    `,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  MP_TAC(ISPECL [`v0:real^3`;`v1:real^3`;`v2:real^3`;`v3:real^3`] DIHV_EQ_DIH_Y);
  REWRITE_TAC[LET_DEF;LET_END_DEF];
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM_ST `collinear` MP_TAC;
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[Collect_geom2.NOT_COL_EQ_UPS_X_POS]);
  DISCH_THEN SUBST1_TAC;
  REWRITE_TAC[Sphere.dih_y];
  BY(REWRITE_TAC[arith `x * x = x pow 2`;LET_DEF;LET_END_DEF])
  ]);;
  (* }}} *)


let sol_x_sol_euler_x = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. &0 < x1 /\ &0 < ups_x x1 x2 x6 /\ &0 < ups_x x2 x3 x4 /\
   &0 < ups_x x1 x3 x5 /\ &0 < eulerA_x x1 x2 x3 x4 x5 x6 /\
    &0 < delta_x x1 x2 x3 x4 x5 x6 ==>
    sol_x x1 x2 x3 x4 x5 x6 = sol_euler_x x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  MP_TAC (ISPECL [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`] simplex_exists);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  REPEAT WEAK_STRIP_TAC;
  MP_TAC (ISPECL [`v0:real^3`;`v1:real^3`;`v2:real^3`;`v3:real^3`] Euler_main_theorem.EULER_TRIANGLE);
  REWRITE_TAC[Sphere.euler_p;Sphere.xlist;Sphere.ylist];
  REWRITE_TAC[Sphere.sol_x;Sphere.sol_euler_x];
  REWRITE_TAC[ LET_DEF;LET_END_DEF];
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT (GMATCH_SIMP_TAC (REWRITE_RULE[LET_DEF;LET_END_DEF] DIHV_DIH_X));
  REPEAT ( FIRST_X_ASSUM_ST `pow` (fun t -> (MP_TAC (SYM t))));
  REPEAT WEAK_STRIP_TAC;
  ASM_REWRITE_TAC[];
  ONCE_REWRITE_TAC[DIST_SYM];
  ASM_REWRITE_TAC[];
  REPEAT WEAK_STRIP_TAC;
  CONJ_TAC;
    BY(ASM_MESON_TAC[Collect_geom.UPS_X_SYM]);
  CONJ_TAC;
    BY(ASM_MESON_TAC[Collect_geom.UPS_X_SYM]);
  DISCH_THEN SUBST1_TAC;
  REWRITE_TAC[arith `pi - &2 * x = &2*(pi/ &2 - x)`];
  GMATCH_SIMP_TAC pi2_sub_atn2;
  REWRITE_TAC[GSYM CONJ_ASSOC];
  CONJ_TAC;
    BY(ASM_SIMP_TAC [SQRT_POS_LT]);
  SUBGOAL_THEN `(dist ((v1:real^3),v0) * dist (v2,v0) * dist (v3,v0) +   dist (v1,v0) * ((v2 - v0) dot (v3 - v0)) +   dist (v2,v0) * ((v3 - v0) dot (v1 - v0)) +   dist (v3,v0) * ((v1 - v0) dot (v2 - v0))) = eulerA_x x1 x2 x3 x4 x5 x6` SUBST1_TAC;
    REWRITE_TAC[Sphere.eulerA_x];
    BINOP_TAC;
      BY(REPEAT BINOP_TAC THEN ASM_MESON_TAC[POW_2_SQRT;DIST_POS_LE;DIST_SYM]);
    BINOP_TAC;
      BINOP_TAC;
        BY(ASM_MESON_TAC[POW_2_SQRT;DIST_POS_LE;DIST_SYM]);
      EXPAND_TAC"x2";
      EXPAND_TAC "x3";
      EXPAND_TAC "x4";
      REWRITE_TAC[Collect_geom.DIST_POW2_DOT];
      REWRITE_TAC[DOT_LSUB;DOT_RSUB];
      REWRITE_TAC[DOT_SYM];
      BY(REAL_ARITH_TAC);
    BINOP_TAC;
      BINOP_TAC;
        BY(ASM_MESON_TAC[POW_2_SQRT;DIST_POS_LE;DIST_SYM]);
      EXPAND_TAC"x1";
      EXPAND_TAC "x3";
      EXPAND_TAC "x5";
      REWRITE_TAC[Collect_geom.DIST_POW2_DOT];
      REWRITE_TAC[DOT_LSUB;DOT_RSUB;DOT_SYM];
      BY(REAL_ARITH_TAC);
    BINOP_TAC;
      BY(ASM_MESON_TAC[POW_2_SQRT;DIST_POS_LE;DIST_SYM]);
    EXPAND_TAC"x1";
    EXPAND_TAC "x2";
    EXPAND_TAC "x6";
    REWRITE_TAC[Collect_geom.DIST_POW2_DOT];
    REWRITE_TAC[DOT_LSUB;DOT_RSUB;DOT_SYM];
    BY(REAL_ARITH_TAC);
  CONJ_TAC;
    FIRST_X_ASSUM_ST `eulerA_x` MP_TAC;
    BY(REAL_ARITH_TAC);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  REWRITE_TAC[Sphere.eulerA_x];
  MATCH_MP_TAC (arith `(a = a') ==> (a + b = a' + b)`);
  GMATCH_SIMP_TAC SQRT_MUL;
  GMATCH_SIMP_TAC SQRT_MUL;
  GMATCH_SIMP_TAC Real_ext.REAL_PROP_NN_MUL2;
  BY(ASM_MESON_TAC[REAL_LE_POW_2])
  ]);;
  (* }}} *)


let dih_x_dih_x_div_sqrtdelta_posbranch = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    &0 < x1 /\ &0 < delta_x x1 x2 x3 x4 x5 x6 /\ 
  &0 < delta_x4 x1 x2 x3 x4 x5 x6 ==>
    dih_x x1 x2 x3 x4 x5 x6 = sqrt(delta_x x1 x2 x3 x4 x5 x6) *
	dih_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_x;Sphere.dih_x_div_sqrtdelta_posbranch;LET_DEF;LET_END_DEF];
  REPEAT WEAK_STRIP_TAC;
  GMATCH_SIMP_TAC matan_pos;
  SUBCONJ_TAC;
    REWRITE_TAC[Calc_derivative.invert_den_lt;GSYM REAL_MUL_ASSOC;arith `x pow 2 = x * x`];
    BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`]);
  DISCH_TAC;
  ABBREV_TAC `d = delta_x x1 x2 x3 x4 x5 x6`;
  ABBREV_TAC `d4 = delta_x4 x1 x2 x3 x4 x5 x6`;
  GMATCH_SIMP_TAC Trigonometry1.ATN2_RNEG;
  CONJ_TAC;
    DISJ1_TAC;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `x + -- y  = x - y`];
  GMATCH_SIMP_TAC pi2_sub_atn2;
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    MATCH_MP_TAC SQRT_POS_LT;
    BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`]);
  GMATCH_SIMP_TAC (MESON[Trigonometry1.ATN2_BREAKDOWN] `&0 < x ==> (atn2(x,y) = atn(y/x))`);
  ASM_REWRITE_TAC[];
  SUBGOAL_THEN `sqrt((&4 * x1 * d) / d4 pow 2) = sqrt(&4 * x1 * d)/d4` SUBST1_TAC;
    BY(ASM_MESON_TAC[Trigonometry1.SQRT_DIV_R;REAL_LT_MUL;arith `&0 < x ==> &0 <= x`;arith `&0 < &4`]);
  REWRITE_TAC[arith `a * b /c * e/f = e * ((a * b/c)/f)`];
  MATCH_MP_TAC (arith `x  = &1 ==> u = u * x`);
  GMATCH_SIMP_TAC REAL_EQ_LDIV_EQ;
  REWRITE_TAC[arith `&4 * x1 * d = d * (&4 * x1)`];
  GMATCH_SIMP_TAC SQRT_MUL;
  REWRITE_TAC[Calc_derivative.invert_den_lt];
  REPEAT CONJ_TAC;
        BY(ASM_MESON_TAC[arith `&0 < d ==> &0 <= d`]);
      BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`;arith `&0 < d ==> &0 <= d`]);
    GMATCH_SIMP_TAC SQRT_MUL;
    BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`;arith `&0 < d ==> &0 <= d`;SQRT_POS_LT]);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih_x_dih_x_div_sqrtdelta_negbranch = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    &0 < x1 /\ &0 < delta_x x1 x2 x3 x4 x5 x6 /\ 
  delta_x4 x1 x2 x3 x4 x5 x6 < &0 ==>
    dih_x x1 x2 x3 x4 x5 x6 = pi + sqrt(delta_x x1 x2 x3 x4 x5 x6) *
	dih_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_x;Sphere.dih_x_div_sqrtdelta_posbranch;LET_DEF;LET_END_DEF;arith `x < &0 <=> &0 < -- x`];
  REPEAT WEAK_STRIP_TAC;
  GMATCH_SIMP_TAC matan_pos;
  SUBCONJ_TAC;
    REWRITE_TAC[Calc_derivative.invert_den_lt;GSYM REAL_MUL_ASSOC;arith `x pow 2 = (--x) * (-- x)`];
    BY(BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`;arith `x < &0 <=> &0 < -- x`]));
  DISCH_TAC;
  ABBREV_TAC `d = delta_x x1 x2 x3 x4 x5 x6`;
  ONCE_REWRITE_TAC[arith `x pow 2 = (--x) pow 2`];
  ONCE_REWRITE_TAC[arith `a * sqrt u / v * r = a * sqrt u /(-- (-- v)) * r`];
  ABBREV_TAC `d4 = -- delta_x4 x1 x2 x3 x4 x5 x6`;
  REWRITE_TAC[arith `pi / &2 + x = pi + u <=> -- u = pi/ &2 - x`];
  GMATCH_SIMP_TAC pi2_sub_atn2;
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(BY(ASM_MESON_TAC[REAL_LT_MUL;SQRT_POS_LT;arith `x < &0 <=> &0 < -- x`;arith `&0 < &4`]));
  GMATCH_SIMP_TAC (MESON[Trigonometry1.ATN2_BREAKDOWN] `&0 < x ==> (atn2(x,y) = atn(y/x))`);
  ASM_REWRITE_TAC[];
  SUBGOAL_THEN `sqrt((&4 * x1 * d) / d4 pow 2) = sqrt(&4 * x1 * d)/d4` SUBST1_TAC;
    BY(BY(ASM_MESON_TAC[Trigonometry1.SQRT_DIV_R;REAL_LT_MUL;arith `&0 < x ==> &0 <= x`;arith `&0 < &4`]));
  REWRITE_TAC[arith `--(a * b /c * e/f) = e * ((a * (--b)/c)/f)`];
  MATCH_MP_TAC (arith `x  = &1 ==>  u * x = u`);
  GMATCH_SIMP_TAC REAL_EQ_LDIV_EQ;
  REWRITE_TAC[arith `&4 * x1 * d = d * (&4 * x1)`];
  GMATCH_SIMP_TAC SQRT_MUL;
  REWRITE_TAC[Calc_derivative.invert_den_lt];
  REPEAT CONJ_TAC;
        BY(BY(ASM_MESON_TAC[arith `&0 < d ==> &0 <= d`]));
      BY(BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`;arith `&0 < d ==> &0 <= d`]));
    GMATCH_SIMP_TAC SQRT_MUL;
    BY(BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`;arith `&0 < d ==> &0 <= d`;SQRT_POS_LT]));
  CALC_ID_TAC;
  BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let tau_x_tau_residual_x = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    sqrt(x1) = &2 * h0 /\
    &0 < x1 /\ &0 < x2 /\ &0 < x3 /\ &0 < x4 /\ &0 < x5 /\  &0 < x6 /\
    delta_x4 x1 x2 x3 x4 x5 x6 < &0 /\
    &0 < delta_x4 x2 x3 x1 x5 x6 x4  /\
    &0 < delta_x4 x3 x1 x2 x6 x4 x5  /\
    &0 <= delta_x x1 x2 x3 x4 x5 x6 ==>
    taum_x x1 x2 x3 x4 x5 x6 = sqrt(delta_x x1 x2 x3 x4 x5 x6) *
	tau_residual_x x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[arith `&0 <= x <=> (&0 = x \/ &0 < x)`];
  DISCH_THEN DISJ_CASES_TAC;
    REWRITE_TAC[Sphere.taum_x;Sphere.rhazim_x;Sphere.rhazim2_x;Sphere.rhazim3_x;Sphere.rhazim;Sphere.rhazim2;Sphere.rhazim3;Sphere.node2_y;Sphere.node3_y;Sphere.dih_y;LET_DEF;LET_END_DEF;Sphere.dih_x];
    ASM_SIMP_TAC[arith `x * x = x pow 2`;SQRT_POW_2;arith `&0 < x ==> &0 <= x`];
    SUBGOAL_THEN `delta_x x2 x3 x1 x5 x6 x4 = &0` SUBST1_TAC;
      BY(FIRST_X_ASSUM MP_TAC THEN REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
    SUBGOAL_THEN `delta_x x3 x1 x2 x6 x4 x5 = &0` SUBST1_TAC;
      BY(FIRST_X_ASSUM MP_TAC THEN REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
    FIRST_X_ASSUM (fun t -> SUBST1_TAC (GSYM t));
    REWRITE_TAC[arith `x * &0 = &0`;arith `&0 * x = &0`;SQRT_0];
    ASM_SIMP_TAC[atn2_0;arith `(-- y < &0 <=> &0 < y) /\ ( &0 < -- y <=> y < &0)`];
    REWRITE_TAC[Sphere.h0;Nonlinear_lemma.rho_alt;arith `pi/ &2 + pi/ &2 = pi /\ x + -- x = &0 /\ x * &0 = &0`];
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[Sphere.taum_x;Sphere.rhazim_x;Sphere.rhazim2_x;Sphere.rhazim3_x;Sphere.rhazim;Sphere.rhazim2;Sphere.rhazim3;Sphere.node2_y;Sphere.node3_y;Sphere.dih_y;LET_DEF;LET_END_DEF];
  ASM_SIMP_TAC[arith `x * x = x pow 2`;SQRT_POW_2;arith `&0 < x ==> &0 <= x`];
  REWRITE_TAC[Sphere.tau_residual_x];
  REWRITE_TAC[Sphere.tau_residual_x;Sphere.rhazim_x_div_sqrtdelta_posbranch;Sphere.rhazim2_x_div_sqrtdelta_posbranch;Sphere.rhazim3_x_div_sqrtdelta_posbranch;Sphere.rotate2;Sphere.rotate3];
  ASM_REWRITE_TAC[];
  REWRITE_TAC[arith `a + b + c - d = (a - d) + b + c`];
  REWRITE_TAC[arith `a * (b + c) = a * b + a * c`];
  BINOP_TAC;
    ASM_SIMP_TAC[dih_x_dih_x_div_sqrtdelta_negbranch];
    REWRITE_TAC[Sphere.h0;Nonlinear_lemma.rho_alt;];
    BY(REAL_ARITH_TAC);
  BINOP_TAC;
    ONCE_REWRITE_TAC[arith `a * b * c = b * (a * c)`];
    AP_TERM_TAC;
    GMATCH_SIMP_TAC dih_x_dih_x_div_sqrtdelta_posbranch;
    ASM_REWRITE_TAC[];
    SUBGOAL_THEN `delta_x x2 x3 x1 x5 x6 x4 = delta_x x1 x2 x3 x4 x5 x6` SUBST1_TAC;
      BY(REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
    BY(ASM_REWRITE_TAC[]);
  ONCE_REWRITE_TAC[arith `a * b * c = b * (a * c)`];
  AP_TERM_TAC;
  GMATCH_SIMP_TAC dih_x_dih_x_div_sqrtdelta_posbranch;
  ASM_REWRITE_TAC[];
  SUBGOAL_THEN `delta_x x3 x1 x2 x6 x4 x5 = delta_x x1 x2 x3 x4 x5 x6` SUBST1_TAC;
    BY(REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)


let sol_x_sol_x_sqrtdelta = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.  &0 < x1 /\ &0 < x2 /\ &0 < x3 /\
   (&0 < eulerA_x x1 x2 x3 x4 x5 x6) /\ (&0 <= delta_x x1 x2 x3 x4 x5 x6 ) ==>
    sol_euler_x x1 x2 x3 x4 x5 x6 = sqrt(delta_x x1 x2 x3 x4 x5 x6) * 
      sol_euler_x_div_sqrtdelta x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.sol_euler_x;Sphere.sol_euler_x_div_sqrtdelta];
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM (fun t -> DISJ_CASES_TAC (REWRITE_RULE[arith `&0 <= x <=> x = &0 \/ &0 < x`] t));
    ASM_REWRITE_TAC[arith `&0 / x  = &0`;SQRT_0];
    LET_TAC;
    REWRITE_TAC[LET_DEF;LET_END_DEF];
    REWRITE_TAC[arith `&0 * x = &0 /\ (&2 * x = &0 <=> x = &0)`];
    GMATCH_SIMP_TAC (MESON [Trigonometry1.ATN2_BREAKDOWN] `&0 < x ==> atn2 (x,&0) = atn(&0/x)`);
    REWRITE_TAC[arith `&0 / x = &0`;ATN_0;arith `&0 < &2 * a <=> &0 < a`];
    SUBGOAL_THEN `a = eulerA_x x1 x2 x3 x4 x5 x6` SUBST1_TAC;
      EXPAND_TAC "a";
      REWRITE_TAC[Sphere.eulerA_x];
      REPEAT (GMATCH_SIMP_TAC SQRT_MUL);
      BY(ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`;Real_ext.REAL_PROP_NN_MUL2]);
    BY(ASM_REWRITE_TAC[]);
  LET_TAC;
  REWRITE_TAC[LET_DEF;LET_END_DEF];
  SUBGOAL_THEN `a = eulerA_x x1 x2 x3 x4 x5 x6` ASSUME_TAC;
    EXPAND_TAC "a";
    REWRITE_TAC[Sphere.eulerA_x];
    REPEAT (GMATCH_SIMP_TAC SQRT_MUL);
    BY(ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`;Real_ext.REAL_PROP_NN_MUL2]);
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC matan_pos;
  REWRITE_TAC[Calc_derivative.invert_den_lt];
  CONJ_TAC;
    REWRITE_TAC[arith `x pow 2 = x* x`];
    BY(BY(ASM_MESON_TAC[REAL_LT_MUL;arith `&0 < &4`]));
  REWRITE_TAC[arith `&4 * x pow 2 = (&2 * x ) pow 2`];
  GMATCH_SIMP_TAC (MESON[Trigonometry1.SQRT_DIV_R] `&0 <= x /\ &0 <= y ==> sqrt(x / y pow 2) = sqrt x / y`);
  GMATCH_SIMP_TAC (MESON [Trigonometry1.ATN2_BREAKDOWN] `&0 < x ==> atn2 (x,y) = atn(y/x)`);
  ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`;Real_ext.REAL_PROP_NN_MUL2;arith `&0 < &2`;REAL_LT_MUL];
  MATCH_MP_TAC (arith `&2 = a / y / z ==> &2 * x = a * x / y / z`);
  CALC_ID_TAC;
  GMATCH_SIMP_TAC SQRT_EQ_0;
  BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let sol_y_sol_x = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. sol_y y1 y2 y3 y4 y5 y6 = sol_x (y1*y1) (y2*y2) (y3*y3) (y4*y4) (y5 * y5) (y6 * y6)`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[Sphere.sol_y;Sphere.sol_x;Sphere.dih_y;LET_DEF;LET_END_DEF]);
  ]);;
  (* }}} *)

let sol_x_sym = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. sol_x x1 x2 x3 x4 x5 x6 = sol_x x1 x3 x2 x4 x6 x5`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.sol_x];
  REPEAT STRIP_TAC;
  MATCH_MP_TAC (arith `(a=a')/\(b=b')/\(c=c')==>((a + b + c - pi) = (a' + c'+b'-pi)) `);
  BY(MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2])
  ]);;
  (* }}} *)

let sol_x_sym2 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. sol_x x1 x2 x3 x4 x5 x6 = sol_x x2 x3 x1 x5 x6 x4`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.sol_x];
  REPEAT STRIP_TAC;
  MATCH_MP_TAC (arith `(a=a')/\(b=b')/\(c=c')==>((a + b + c - pi) = (b' + c'+a'-pi)) `);
  BY(BY(MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2]))
  ]);;
  (* }}} *)

let delta_x_sym = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. delta_x x1 x2 x3 x4 x5 x6 = delta_x x2 x1 x3 x5 x4 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.delta_x];
  BY(REAL_ARITH_TAC);
  ]);;
  (* }}} *)

let delta_x_sym2 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. delta_x x1 x2 x3 x4 x5 x6 = delta_x x2 x3 x1 x5 x6 x4`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.delta_x];
  BY(REAL_ARITH_TAC);
  ]);;
  (* }}} *)

let sol_x_sol_y = prove_by_refinement(
  `sol_y = y_of_x sol_x`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  BY(REWRITE_TAC[Sphere.sol_y;Sphere.y_of_x;Sphere.sol_x;Sphere.dih_y;LET_DEF;LET_END_DEF])
  ]);;
  (* }}} *)

let gamma4fgcy_div_sqrtdelta = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. 
    &0 < x1 /\ &0 < x2 /\ &0 < x3 /\ &0 < x4 /\ &0 < x5 /\ &0 < x6 /\
    &2 * h0 <= sqrt x1 /\ &2 * h0 <= sqrt x4 /\ 
    sqrt x2 <= &2 * h0 /\ sqrt x3 <= &2 * h0 /\ sqrt x5 <= &2 * h0 /\
    sqrt x6 <= &2 * h0 /\
    &0 < ups_x x1 x2 x6 /\ &0 < ups_x x2 x3 x4 /\ &0 < ups_x x1 x3 x5 /\
    &0 < ups_x x4 x5 x6 /\
    &0 < eulerA_x x1 x2 x3 x4 x5 x6 /\
    &0 < eulerA_x x4 x2 x6 x1 x5 x3 /\
    &0 < eulerA_x x5 x3 x4 x2 x6 x1 /\
    &0 < eulerA_x x6 x1 x5 x3 x4 x2 /\
  &0 < delta_x4 x5 x3 x4 x2 x6 x1 /\
  &0 < delta_x4 x3 x1 x2 x6 x4 x5 /\
  &0 < delta_x4 x2 x3 x1 x5 x6 x4 /\
  &0 < delta_x4 x6 x1 x5 x3 x4 x2 /\
    &0 < delta_x x1 x2 x3 x4 x5 x6 ==>
    (gamma4fgcy (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) 
    (sqrt x5) (sqrt x6) lmfun = 
    sqrt(delta_x x1 x2 x3 x4 x5 x6) * (&1 / &12 - 
		( 
		  (&2 * mm1 / pi) *
		    (sol_euler_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler345_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler156_x_div_sqrtdelta x1 x2 x3 x4 x5 x6 +
		       sol_euler246_x_div_sqrtdelta x1 x2 x3 x4 x5 x6) -
		    (&8 * mm2 / pi) * (
		      ldih2_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih3_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih5_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6 +
		      ldih6_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6
		    )
		)))`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REWRITE_TAC[Sphere.gamma4fgcy;Sphere.gamma4f;Sphere.vol_y;Sphere.vol4f;Sphere.y_of_x;sol_x_sol_y;Sphere.dih_y;LET_DEF;LET_END_DEF];
  ASM_SIMP_TAC[arith `x * x = x pow 2`;SQRT_POW_2;arith `&0 < x ==> &0 <= x`];
  REWRITE_TAC[Sphere.sol_euler345_x_div_sqrtdelta;Sphere.sol_euler156_x_div_sqrtdelta;Sphere.sol_euler246_x_div_sqrtdelta;Sphere.ldih2_x_div_sqrtdelta_posbranch;Sphere.ldih3_x_div_sqrtdelta_posbranch;Sphere.ldih5_x_div_sqrtdelta_posbranch;Sphere.ldih6_x_div_sqrtdelta_posbranch;Sphere.rotate2;Sphere.rotate3;Sphere.rotate5;Sphere.rotate6;Sphere.rotate4;Sphere.ldih_x_div_sqrtdelta_posbranch];
  ASM_SIMP_TAC[Nonlinear_lemma.lmfun_lfun];
  ASM_SIMP_TAC[Nonlinear_lemma.lmfun0;arith `&0 * x = &0 /\ &0 + x = x`];
  REWRITE_TAC[arith `sqrt x * (u - v) = sqrt x * u - sqrt x * v /\ sqrt x * (u+ v) = sqrt x * u + sqrt x * v`];
  BINOP_TAC;
    REWRITE_TAC[Sphere.vol_x];
    BY(REAL_ARITH_TAC);
  BINOP_TAC;
    REWRITE_TAC[arith `sqrt x * y * z = y * sqrt x * z`];
    AP_TERM_TAC;
    SUBGOAL_THEN `sol_x x1 x5 x6 x4 x2 x3 = sol_x x6 x1 x5 x3 x4 x2 /\ sol_x x4 x5 x3 x1 x2 x6 = sol_x x5 x3 x4 x2 x6 x1 /\ sol_x x4 x2 x6 x1 x5 x3 = sol_x x4 x2 x6 x1 x5 x3` (fun t -> REWRITE_TAC[t]);
      BY(MESON_TAC[sol_x_sym;sol_x_sym2]);
    REPEAT (GMATCH_SIMP_TAC sol_x_sol_euler_x);
    ASM_REWRITE_TAC[];
    REWRITE_TAC[ CONJ_ASSOC];
    MATCH_MP_TAC (TAUT `a /\ b ==> b /\ a`);
    CONJ_TAC;
      REWRITE_TAC[arith `x * ( y + z) = x * y + x* z`];
      MATCH_MP_TAC (arith ` (a = a' /\ b = c' /\ c = b' /\ d = d')==>(a + b + c + d = a' + b' + c' + d')`);
      REPEAT (GMATCH_SIMP_TAC sol_x_sol_x_sqrtdelta);
      ASM_REWRITE_TAC[];
      REWRITE_TAC[GSYM CONJ_ASSOC];
      BY(REPEAT CONJ_TAC THEN REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC) THEN (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN REWRITE_TAC[Sphere.delta_x;Sphere.eulerA_x] THEN REAL_ARITH_TAC);
    BY(REWRITE_TAC[GSYM CONJ_ASSOC] THEN REPEAT CONJ_TAC THEN (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN REWRITE_TAC[Sphere.delta_x;Sphere.ups_x] THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `sqrt x * y * z = y * sqrt x * z`];
  AP_TERM_TAC;
  SUBGOAL_THEN `dih_x x5 x1 x6 x2 x4 x3 = dih_x x5 x3 x4 x2 x6 x1` SUBST1_TAC;
    BY(MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2]);
  REWRITE_TAC[arith `a * (b + c) = a* b + a*c`];
  MATCH_MP_TAC (arith `a = a' /\ b = b' /\ c = c' /\ d = d' ==> a + b + c +d  = a' + b' + c' + d'`);
  REWRITE_TAC[arith `sqrt x * y * z = y * sqrt x * z`];
  REPEAT (GMATCH_SIMP_TAC (dih_x_dih_x_div_sqrtdelta_posbranch));
  ASM_REWRITE_TAC[];
  BY(REPEAT CONJ_TAC THEN REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC) THEN (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN REWRITE_TAC[Sphere.delta_x] THEN TRY REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let gamma4fgcy_sym12 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6 f. gamma4fgcy y1 y2 y3 y4 y5 y6 f = gamma4fgcy y2 y1 y3 y5 y4 y6 f`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.gamma4fgcy;Sphere.gamma4f;Sphere.vol_y;Sphere.vol4f];
  REPEAT WEAK_STRIP_TAC;
  BINOP_TAC;
    REWRITE_TAC[Sphere.y_of_x;Sphere.vol_x];
    REPLICATE_TAC 3 (AP_TERM_TAC ORELSE AP_THM_TAC);
    REWRITE_TAC[Sphere.delta_x];
    BY(REAL_ARITH_TAC);
  BINOP_TAC;
    AP_TERM_TAC;
    MATCH_MP_TAC (arith `a = a' /\ b = d' /\ c = c' /\ d = b' ==> a+b+c+d = a'+b' + c' + d'`);
    REWRITE_TAC[sol_x_sol_y;Sphere.y_of_x];
    BY(MESON_TAC[sol_x_sym;sol_x_sym2]);
  AP_TERM_TAC;
  MATCH_MP_TAC (arith `a = b' /\ b = a' /\ c = c' /\ d = e' /\ e = d' /\ f = f' ==> (a+b+c+d+e+f = a'+b'+c'+d'+e'+f')`);
  REWRITE_TAC[Sphere.dih_y];
  REWRITE_TAC[Sphere.dih_y;LET_DEF;LET_END_DEF];
  BY(ASM_MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2])
  ]);;
  (* }}} *)

let gamma4fgcy_sym23 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6 f. gamma4fgcy y1 y2 y3 y4 y5 y6 f = gamma4fgcy y1 y3 y2 y4 y6 y5 f`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.gamma4fgcy;Sphere.gamma4f;Sphere.vol_y;Sphere.vol4f];
  REPEAT WEAK_STRIP_TAC;
  BINOP_TAC;
    REWRITE_TAC[Sphere.y_of_x;Sphere.vol_x];
    REPLICATE_TAC 3 (AP_TERM_TAC ORELSE AP_THM_TAC);
    REWRITE_TAC[Sphere.delta_x];
    BY(BY(REAL_ARITH_TAC));
  BINOP_TAC;
    AP_TERM_TAC;
    MATCH_MP_TAC (arith `a = a' /\ b = b' /\ c = d' /\ d = c' ==> a+b+c+d = a'+b' + c' + d'`);
    REWRITE_TAC[sol_x_sol_y;Sphere.y_of_x];
    BY(BY(MESON_TAC[sol_x_sym;sol_x_sym2]));
  AP_TERM_TAC;
  MATCH_MP_TAC (arith `a = a' /\ b = c' /\ c = b' /\ d = d' /\ e = f' /\ f = e' ==> (a+b+c+d+e+f = a'+b'+c'+d'+e'+f')`);
  REWRITE_TAC[Sphere.dih_y];
  REWRITE_TAC[Sphere.dih_y;LET_DEF;LET_END_DEF];
  BY(BY(ASM_MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2]))
  ]);;
  (* }}} *)

let gamma4fgcy_sym03 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6 f. gamma4fgcy y1 y2 y3 y4 y5 y6 f = gamma4fgcy y5 y4 y3 y2 y1 y6 f`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.gamma4fgcy;Sphere.gamma4f;Sphere.vol_y;Sphere.vol4f];
  REPEAT WEAK_STRIP_TAC;
  BINOP_TAC;
    REWRITE_TAC[Sphere.y_of_x;Sphere.vol_x];
    REPLICATE_TAC 3 (AP_TERM_TAC ORELSE AP_THM_TAC);
    REWRITE_TAC[Sphere.delta_x];
    BY(BY(BY(REAL_ARITH_TAC)));
  BINOP_TAC;
    AP_TERM_TAC;
    MATCH_MP_TAC (arith `a = c' /\ b = b' /\ c = a' /\ d = d' ==> a+b+c+d = a'+b' + c' + d'`);
    REWRITE_TAC[sol_x_sol_y;Sphere.y_of_x];
    BY(BY(BY(MESON_TAC[sol_x_sym;sol_x_sym2])));
  AP_TERM_TAC;
  MATCH_MP_TAC (arith `a = e' /\ b = d' /\ c = c' /\ d = b' /\ e = a' /\ f = f' ==> (a+b+c+d+e+f = a'+b'+c'+d'+e'+f')`);
  REWRITE_TAC[Sphere.dih_y];
  REWRITE_TAC[Sphere.dih_y;LET_DEF;LET_END_DEF];
  BY(BY(BY(ASM_MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2])))
  ]);;
  (* }}} *)

let rho_ij_rho_x = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. rho_ij x1 x2 x3 x6 x5 x4 = rho_x x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.rho_x;Collect_geom.rho_ij];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let delta_delta_x = prove_by_refinement(
  `delta x1 x2 x3 x6 x5 x4 = delta_x x1 x2 x3 x4 x5 x6 `,
  (* {{{ proof *)
  [
  REWRITE_TAC[Collect_geom.delta;Sphere.delta_x];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let GDRQXLGv2 = prove_by_refinement(
  `!(v0:real^3)  v1 v2 v3.  let s = {v0, v1, v2, v3} in
         let x1 = dist (v0,v1) pow 2 in
         let x2 = dist (v0,v2) pow 2 in
         let x3 = dist (v0,v3) pow 2 in
         let x4 = dist (v2,v3) pow 2 in
         let x5 = dist (v1,v3) pow 2 in
         let x6 = dist (v1,v2) pow 2 in
         CARD s = 4 /\ ~coplanar_alt s
         ==> (radV s) pow 2 = rad2_x x1 x2 x3 x4 x5 x6 `,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_DEF;LET_END_DEF;Sphere.rad2_x];
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `&0 <= rho_x (dist ((v0:real^3),(v1:real^3)) pow 2) (dist (v0,(v2:real^3)) pow 2) (dist (v0,(v3:real^3)) pow 2)  (dist (v2,v3) pow 2) (dist (v1,v3) pow 2) (dist (v1,v2) pow 2)` ASSUME_TAC;
    REWRITE_TAC[GSYM rho_ij_rho_x];
    MATCH_MP_TAC (REWRITE_RULE[LET_DEF;LET_END_DEF] Collect_geom2.SHOGYBS);
    BY(ASM_REWRITE_TAC[]);
  SUBGOAL_THEN `&0 < delta_x (dist ((v0:real^3),(v1:real^3)) pow 2) (dist (v0,(v2:real^3)) pow 2) (dist (v0,(v3:real^3)) pow 2)  (dist (v2,v3) pow 2) (dist (v1,v3) pow 2) (dist (v1,v2) pow 2)` ASSUME_TAC;
    REWRITE_TAC[GSYM delta_delta_x];
    BY(ASM_REWRITE_TAC[ Collect_geom2.POS_EQ_NOT_COPLANANR]);
  GMATCH_SIMP_TAC (REWRITE_RULE[LET_DEF;LET_END_DEF] Collect_geom2.GDRQXLG);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[rho_ij_rho_x;delta_delta_x];
  ABBREV_TAC `r = rho_x (dist ((v0:real^3),(v1:real^3)) pow 2) (dist (v0,(v2:real^3)) pow 2) (dist (v0,(v3:real^3)) pow 2)    (dist (v2,v3) pow 2)   (dist (v1,v3) pow 2)  (dist (v1,v2) pow 2)`;
  ABBREV_TAC `d = delta_x  (dist ((v0:real^3),(v1:real^3)) pow 2) (dist (v0,(v2:real^3)) pow 2) (dist (v0,(v3:real^3)) pow 2)    (dist (v2,v3) pow 2)   (dist (v1,v3) pow 2)  (dist (v1,v2) pow 2)`;
  REWRITE_TAC[Trigonometry2.DIV_POW2];
  CALC_ID_TAC;
  REWRITE_TAC[GSYM CONJ_ASSOC];
  GMATCH_SIMP_TAC SQRT_EQ_0;
  REWRITE_TAC[Trigonometry2.MUL_POW2];
  REPEAT (GMATCH_SIMP_TAC SQRT_POW_2);
  REPEAT (FIRST_X_ASSUM MP_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let tsk_hyp =  
  let  tsk_nonlinear = map (fun t -> t.ineq) (Ineq.getprefix "TSK") in
    end_itlist (curry mk_conj) tsk_nonlinear;;

(*
let tsk_concl = Ineq.TSKAJXY_DERIVED.ineq;;

let tsk = mk_imp(tsk_hyp,tsk_concl);;
*)

let tsk_lemma1 = prove_by_refinement(
  (mk_imp(tsk_hyp,`!y1 y2 y3 y4 y5 y6.
		    ineq [#2.8,y1,sqrt8; 
			  &2,y2,#2.01; 
			  &2,y3,#2.01;
			  #2.8,y4,sqrt8;
			  &2,y5,#2.01;
			  &2,y6,#2.01]
		    (&0 <  delta_y y1 y2 y3 y4 y5 y6 ==>
		    gamma4fgcy y1 y2 y3 y4 y5 y6 lmfun >= &0)`)),		    
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REPEAT (FIRST_X_ASSUM_ST `delta_x4` MP_TAC);
  REPEAT (FIRST_X_ASSUM_ST `eulerA_x` MP_TAC);
  REPEAT (FIRST_X_ASSUM_ST `mm1` MP_TAC);
  REPEAT (FIRST_X_ASSUM (fun t -> ALL_TAC));
  REPEAT WEAK_STRIP_TAC;
  REWRITE_TAC[Sphere.ineq];
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `y1 = sqrt (y1 * y1) /\ y2 = sqrt(y2 * y2) /\ y3 = sqrt(y3 * y3) /\ y4 = sqrt (y4 * y4) /\ y5 = sqrt(y5 *y5) /\ y6 = sqrt(y6 * y6)` (fun t -> ONCE_REWRITE_TAC[t]);
    REPEAT (GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx);
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  GMATCH_SIMP_TAC gamma4fgcy_div_sqrtdelta;
  REPEAT (GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx);
  REWRITE_TAC[Collect_geom2.REAL_POSSQ];
  REWRITE_TAC[GSYM CONJ_ASSOC];
  REPLICATE_TAC 18 (CONJ_TAC THENL [(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REWRITE_TAC[Sphere.h0] THEN MP_TAC Flyspeck_constants.bounds THEN REAL_ARITH_TAC);ALL_TAC]);
  REPEAT (GMATCH_SIMP_TAC (REWRITE_RULE[arith `y1 pow 2 = y1 * y1`] ups_x_pos24));
  REPLICATE_TAC 4 (CONJ_TAC THENL [(REPEAT (FIRST_X_ASSUM MP_TAC) THEN MP_TAC Flyspeck_constants.bounds THEN REAL_ARITH_TAC);ALL_TAC]);
  REPEAT (FIRST_X_ASSUM MP_TAC);
  REPLICATE_TAC 3 DISCH_TAC;
  REWRITE_TAC[TAUT `(a <= y ==> y <= b ==> c) <=> (a <= y /\ y <= b) ==> c`];
  REWRITE_TAC[GSYM Nonlinear_lemma.ineq_expand6];
  EVERY (map SPEC_TAC [(`y6:real`,`y6:real`);(`y5:real`,`y5:real`);(`y4:real`,`y4:real`);(`y3:real`,`y3:real`);(`y2:real`,`y2:real`);(`y1:real`,`y1:real`)]);
  MATCH_MP_TAC Nonlinear_lemma.ineq_square2;
  (CONJ_TAC THENL [(REPEAT (FIRST_X_ASSUM MP_TAC) THEN MP_TAC Flyspeck_constants.bounds THEN REAL_ARITH_TAC);ALL_TAC]);
  REWRITE_TAC[Sphere.delta_y;Sphere.ineq];
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  REPEAT (GMATCH_SIMP_TAC sqrtpow2);
  REPLICATE_TAC 6 (CONJ_TAC THENL [(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);ALL_TAC]);
  SUBGOAL_THEN `delta_x4 x3 x1 x2 x6 x4 x5 = delta_x4 x3 x2 x1 x6 x5 x4 /\ delta_x4 x6 x1 x5 x3 x4 x2 = delta_x4 x6 x5 x1 x3 x2 x4` (fun t -> REWRITE_TAC[t]);
    BY(REWRITE_TAC[Sphere.delta_x4] THEN REAL_ARITH_TAC);
  FIRST_X_ASSUM_ST `delta_x4` MP_TAC;
  REWRITE_TAC[Sphere.ineq];
  DISCH_THEN (fun t -> REPEAT (GMATCH_SIMP_TAC t));
  ASM_REWRITE_TAC[];
  REPLICATE_TAC 12 (FIRST_X_ASSUM MP_TAC);
  REWRITE_TAC[REWRITE_RULE[arith `x * x = x pow 2`] Nonlinear_lemma.sqrt8_2];
  REWRITE_TAC[arith `#8.0 = &8 /\ &2 pow 2 = &4`];
  REPLICATE_TAC 12 (DISCH_TAC);
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `eulerA_x` MP_TAC;
  REWRITE_TAC[Sphere.ineq];
  SUBGOAL_THEN `eulerA_x x5 x3 x4 x2 x6 x1 = eulerA_x x4 x3 x5 x1 x6 x2 /\ eulerA_x x6 x1 x5 x3 x4 x2 = eulerA_x x1 x5 x6 x4 x2 x3` (fun t-> REWRITE_TAC[t]);
    REWRITE_TAC[Sphere.eulerA_x];
    BY(REAL_ARITH_TAC);
  DISCH_THEN (fun t -> REPEAT(GMATCH_SIMP_TAC t));
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[arith `a >= b <=> b <= a`];
  MATCH_MP_TAC Real_ext.REAL_PROP_NN_MUL2;
  CONJ_TAC;
    MATCH_MP_TAC SQRT_POS_LE;
    BY((FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `b <= a <=> a >= b`];
  FIRST_X_ASSUM MP_TAC;
  MATCH_MP_TAC (arith `(f >= &0 \/ d < &0) ==> (&0 < d ==> f >= &0)`);
  FIRST_X_ASSUM_ST `mm1` MP_TAC;
  REWRITE_TAC[Sphere.ineq];
  DISCH_THEN (GMATCH_SIMP_TAC);
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)


let specl x = concl o (SPECL x) o ASSUME;;

(* THIS APPROACH TO PROVING REAL_WLOG_SIMPLEX CRASHES OCAML ---
let real_ty = `:real`;;
let mk_y i = mk_var("y"^string_of_int i,real_ty);;

let [y1;y2;y3;y4;y5;y6] = map mk_y (1--6);;

let simplex_orders = 
  [[y1;y2;y3;y4;y5;y6];[y1;y3;y2;y4;y6;y5];[y1;y5;y6;y4;y2;y3];[y1;y6;y5;y4;y3;y2];
   [y2;y1;y3;y5;y4;y6];[y2;y3;y1;y5;y6;y4];[y2;y4;y6;y5;y1;y3];[y2;y6;y4;y5;y3;y1];
   [y3;y1;y2;y6;y4;y5];[y3;y2;y1;y6;y5;y4];[y3;y4;y5;y6;y1;y2];[y3;y5;y4;y6;y2;y1];
   [y4;y2;y6;y1;y5;y3];[y4;y3;y5;y1;y6;y2];[y4;y5;y3;y1;y2;y6];[y4;y6;y2;y1;y3;y5];
   [y5;y1;y6;y2;y4;y3];[y5;y3;y4;y2;y6;y1];[y5;y4;y3;y2;y1;y6];[y5;y6;y1;y2;y3;y4];
   [y6;y1;y5;y3;y4;y2];[y6;y2;y4;y3;y5;y1];[y6;y4;y2;y3;y1;y5];[y6;y5;y1;y3;y2;y4]];;

let symtt = 
  let symt = `!y1 y2 y3 y4 y5 y6. (y6 <= y1) /\ (y5 <= y1) /\ (y4 <= y1) /\
       (y3 <= y1) /\ (y2 <= y1) /\ (y6 <= y2) /\ (y5 <= y2) /\ (y3 <= y2)` in
  let cs = map (fun t -> specl t symt) simplex_orders in
    end_itlist (curry  mk_disj) cs;;

let SYM_CASES = time REAL_ARITH symtt;;  (* THIS IS THE KILLER LINE *)
*)



let (* Packing3. *) REAL_FINITE_MAX_EXISTS = 
prove(`!S:real->bool. FINITE S /\ ~(S = {}) ==> ?m. m IN S /\ (!x. x IN S ==> x <= m)`,
		MESON_TAC[SUP_FINITE]);;


let REAL_WLOG_SIMPLEX_LEMMA = prove_by_refinement(
  `!P. (!y1 y2 y3 y4 y5 y6. P y1 y2 y3 y4 y5 y6 = P y2 y1 y3 y5 y4 y6 /\
     P y1 y2 y3 y4 y5 y6 = P y1 y3 y2 y4 y6 y5 /\
      P y1 y2 y3 y4 y5 y6 = P y5 y4 y3 y2 y1 y6) /\
    (!y1 y2 y3 y4 y5 y6. (y6 <= y1) /\ (y5 <= y1) /\ (y4 <= y1) /\
       (y3 <= y1) /\ (y2 <= y1)  ==>
       P y1 y2 y3 y4 y5 y6) ==>
    (!y1 y2 y3 y4 y5 y6. P y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `?a.  a IN {y1,y2,y3,y4,y5,y6} /\ (!x. x IN {y1,y2,y3,y4,y5,y6} ==> x <= a)` MP_TAC;
    MATCH_MP_TAC REAL_FINITE_MAX_EXISTS;
    BY(REWRITE_TAC[ FINITE_INSERT ; FINITE_EMPTY;NOT_INSERT_EMPTY]);
  REPEAT WEAK_STRIP_TAC;
  REPEAT (FIRST_X_ASSUM_ST `IN` MP_TAC);
  REWRITE_TAC[IN_INSERT;NOT_IN_EMPTY];
  REWRITE_TAC[MESON[] `(!x. x = y1 \/ x = y2 \/ x = y3 \/ x = y4 \/ x = y5 \/ x = y6 ==> x <= a) = (y1 <= a /\ y2 <= a /\ y3 <= a /\ y4 <= a /\ y5 <= a /\ y6 <= a)`];
  BY(DISCH_THEN STRIP_ASSUME_TAC THEN ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let REAL_WLOG_SIMPLEX_SYM = prove_by_refinement(
  `!P. (!y1 y2 y3 y4 y5 y6. P y1 y2 y3 y4 y5 y6 = P y2 y1 y3 y5 y4 y6 /\
     P y1 y2 y3 y4 y5 y6 = P y1 y3 y2 y4 y6 y5 /\
      P y1 y2 y3 y4 y5 y6 = P y5 y4 y3 y2 y1 y6) ==>
    ((!y1 y2 y3 y4 y5 y6.  P y1 y2 y3 y4 y5 y6 = P y1 y3 y2 y4 y6 y5) /\
    (!y1 y2 y3 y4 y5 y6.  P y1 y2 y3 y4 y5 y6 = P y1 y6 y5 y4 y3 y2))`,
  (* {{{ proof *)
  [
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let REAL_WLOG_SIMPLEX_LEMMA2 = prove_by_refinement(
  `!P (y1:real) (y4:real). 
    ((!y1 y2 y3 y4 y5 y6.  P y1 y2 y3 y4 y5 y6 = P y1 y3 y2 y4 y6 y5) /\
    (!y1 y2 y3 y4 y5 y6.  P y1 y2 y3 y4 y5 y6 = P y1 y6 y5 y4 y3 y2))
    /\
    (! y2 y3  y5 y6. (y3 <= y2) /\ (y5 <= y2) /\ (y6 <= y2) ==>
       P y1 y2 y3 y4 y5 y6) ==>
    (!y2 y3  y5 y6. P y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `?a.  a IN {y2,y3,y5,y6} /\ (!x. x IN {y2,y3,y5,y6} ==> x <= a)` MP_TAC;
    MATCH_MP_TAC REAL_FINITE_MAX_EXISTS;
    BY(BY(BY(REWRITE_TAC[ FINITE_INSERT ; FINITE_EMPTY;NOT_INSERT_EMPTY])));
  REPEAT WEAK_STRIP_TAC;
  REPEAT (FIRST_X_ASSUM_ST `IN` MP_TAC);
  REWRITE_TAC[IN_INSERT;NOT_IN_EMPTY];
  REWRITE_TAC[MESON[] `(!x. x = y1 \/ x = y2 \/ x = y3 \/ x = y4 \/ x = y5 \/ x = y6 ==> x <= a) = (y1 <= a /\ y2 <= a /\ y3 <= a /\ y4 <= a /\ y5 <= a /\ y6 <= a)`];
  BY(BY(BY(DISCH_THEN STRIP_ASSUME_TAC THEN ASM_MESON_TAC[])))
  ]);;
  (* }}} *)

let REAL_WLOG_SIMPLEX = prove_by_refinement(
  `!P. (!y1 y2 y3 y4 y5 y6. P y1 y2 y3 y4 y5 y6 = P y2 y1 y3 y5 y4 y6 /\
     P y1 y2 y3 y4 y5 y6 = P y1 y3 y2 y4 y6 y5 /\
      P y1 y2 y3 y4 y5 y6 = P y5 y4 y3 y2 y1 y6) /\
    (!y1 y2 y3 y4 y5 y6. (y6 <= y1) /\ (y5 <= y1) /\ (y4 <= y1) /\
       (y3 <= y1) /\ (y2 <= y1) /\ (y3 <= y2) /\ (y5 <= y2) /\ (y6 <= y2)  ==>
       P y1 y2 y3 y4 y5 y6) ==>
    (!y1 y2 y3 y4 y5 y6. P y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  GEN_TAC;
  DISCH_TAC;
  MATCH_MP_TAC REAL_WLOG_SIMPLEX_LEMMA;
  ASM_REWRITE_TAC[];
  REPEAT GEN_TAC;
  SUBGOAL_THEN `(y6 <= y1 /\ y5 <= y1 /\ y4 <= y1 /\ y3 <= y1 /\ y2 <= y1  ==> P y1 y2 y3 y4 y5 y6) = (\y1 y2 y3 y4 y5 y6. y6 <= y1 /\ y5 <= y1 /\ y4 <= y1 /\ y3 <= y1 /\ y2 <= y1  ==> P y1 y2 y3 y4 y5 y6) y1 y2 y3 y4 y5 y6` SUBST1_TAC;
    BY(MESON_TAC[]);
  EVERY (map SPEC_TAC [(`y6:real`,`y6:real`);(`y5:real`,`y5:real`);(`y3:real`,`y3:real`);(`y2:real`,`y2:real`)]);
  ABBREV_TAC `Q = (\y1 y2 y3 y4 y5 y6.          y6 <= y1 /\ y5 <= y1 /\ y4 <= y1 /\ y3 <= y1 /\ y2 <= y1          ==> P y1 y2 y3 y4 y5 y6)`;
  MATCH_MP_TAC REAL_WLOG_SIMPLEX_LEMMA2;
  CONJ_TAC;
    REPEAT (FIRST_X_ASSUM MP_TAC);
    REPEAT WEAK_STRIP_TAC;
    FIRST_X_ASSUM (fun t -> ASSUME_TAC (MATCH_MP REAL_WLOG_SIMPLEX_SYM t));
    EXPAND_TAC "Q";
    BY(ASM_MESON_TAC[]);
  EXPAND_TAC "Q";
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

 end;;
