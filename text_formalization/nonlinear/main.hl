(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Nonlinear                                                  *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2010-05-30                                                           *)
(* ========================================================================== *)



(* 
File of the nonlinear inequalities to be verified by interval arithmetic.
*)



flyspeck_needs "general/sphere.hl";;
flyspeck_needs "leg/enclosed_def.hl";;

(*
The nonlinear inequality data has become too widely dispersed over the project directories.
This file is meant to be the authoritative central repository for inequalities.

Old sources of information (svn 1678 2010-04-26 of NonlinearInequalities.wiki)
software_guide.tex (svn 1760)
*)

(* module Main_ineq (* : Ineq_type *) = struct *)

  (* Lp means the inequality enters the main GLPK inequality list to eliminate tame hypermaps.
      Text means an inequality cited directly in the flypaper text.
      Cfsqp means that there is cfsqp nonlinear optimization code to test it by gradient descent.
     Eps is a small epsilon that is added to numerical testing to avoid answers neg. by machine eps.
      Further means that it is not part of the Flyspeck project, but part of one of the extension
        theorems: StrongDodec, Fejes Toth's contact conjecture, or Musin-Tarasov.
      The Tex flag means that the doc field is Tex'able code (with software_guide.tex context). 
     Derived means that it is not a primitive inequality, but rather a logical consequence of others.
*)


  type tag = Lp | Text | Cfsqp | Eps of float | Further | Tex | Derived;;

type ineq_datum = 
  { 
    ineq : term;
    id : string;
    doc : string;
    tags : tag list;
  };;

(*
let mk_datum (id,doc, tags, ineq ) = 
  {
    ineq = ineq;
    id = id;
    doc = doc;
    tags = tags;
  };;
*)

let ineqs = ref ([]:ineq_datum list);;

let add i  = (ineqs:= i :: !ineqs);;

let getexact id = filter (fun t -> (t.id = id)) (!ineqs);;

let getprefix id = filter (fun t -> (String.length id <= String.length t.id) &&
   (String.sub t.id 0 (String.length id) = id)) (!ineqs);;



  let all_forall = Sphere.all_forall;;
  let ineq = Sphere.ineq;;

  let h0 = new_definition `h0 = #1.26`;;
  let sol0 = new_definition `sol0 = &3 * acs (&1 / &3)  - pi`;;
  let tau0 = new_definition `tau0 = &4 * pi - &20 * sol0`;;
  let mm1 = new_definition `mm1 = sol0 * sqrt(&8)/tau0`;;
  let mm2 = new_definition `mm2 = (&6 * sol0 - pi) * sqrt(&2) /(&6 * tau0)`;;

  let hplus = new_definition `hplus = #1.3254`;;

  let marchal_quartic = new_definition `marchal_quartic h = 
    (sqrt(&2)-h)*(h- hplus )*(&9*(h pow 2) - &17*h + &3)/
      ((sqrt(&2) - &1)* &5 *(hplus - &1))`;;

(*
   let marchal =  new_definition `marchal h =
    (if (h <= sqrt(&2)) then marchal_quartic h else &0)`;; (* from Pack_defs *)
*)

  let lmfun = new_definition `lmfun h = if (h<=h0) then (h0 - h)/(h0 - &1) else &0`;;

  let lfun = new_definition `lfun h =  (h0 - h)/(h0 - &1)`;;

  let hminus = new_definition `hminus = @x. #1.2 <= x /\ x < #1.3 /\ marchal_quartic x = lmfun x`;;


(* --- *)

  let y_of_x = new_definition `y_of_x fx y1 y2 y3 y4 y5 y6 = 
    fx (y1*y1) (y2*y2) (y3*y3) (y4*y4) (y5*y5) (y6*y6)`;;

  let vol_y = new_definition `vol_y = y_of_x vol_x`;;

  let vol4f = new_definition `vol4f y1 y2 y3 y4 y5 y6 f = 
   (&2 * mm1 / pi) * 
               (sol_y y1 y2 y3 y4 y5 y6 +
		  sol_y y1 y5 y6 y4 y2 y3 +
		  sol_y y4 y5 y3 y1 y2 y6 +
		  sol_y y4 y2 y6 y1 y5 y3)
	       - (&8 * mm2/pi) *
	       (f(y1/ &2)* dih_y y1 y2 y3 y4 y5 y6 +
		  f(y2/ &2)* dih_y y2 y3 y1 y5 y6 y4 +
		  f(y3/ &2)* dih_y y3 y1 y2 y6 y4 y5 +
		  f(y4/ &2)* dih_y y4 y3 y5 y1 y6 y2 +
		  f(y5/ &2)* dih_y y5 y1 y6 y2 y4 y3 +
		  f(y6/ &2)* dih_y y6 y1 y5 y3 y4 y2)`;;

  let gamma4f = new_definition `gamma4f y1 y2 y3 y4 y5 y6 f =
    vol_y y1 y2 y3 y4 y5 y6 - vol4f  y1 y2 y3 y4 y5 y6 f`;;

(* real and fake 3-cell volumes *)

  let vol3r = new_definition `vol3r y1 y2 y3 r = vol_y r r r y1 y2 y3`;;

  let vol3f = new_definition `vol3f y1 y2 y3 r f = (&2 * mm1 / pi) * 
        (sol_y y1 y2 r r r y3 +
	   sol_y y2 y3 r r r y1 +
	   sol_y y3 y1 r r r y2)
    - (&8 * mm2/pi) *
       (f(y1/ &2)* dih_y y1 y2 r r r y3 +
	  f(y2/ &2)* dih_y y2 y3 r r r y1 +
	  f(y3/ &2)* dih_y y3 y1 r r r y2)`;;

  let gamma3f = new_definition `gamma3f y1 y2 y3 r f = vol3r y1 y2 y3 r - vol3f y1 y2 y3 r f`;;


  (* real and fake volume of two cones 2Pi *)

  let vol2r = new_definition `vol2r y r = &2 * pi * (r*r - (y / (&2)) pow 2)/(&3)`;;

  let vol2f = new_definition  `vol2f y r f =  (&2 * mm1 / pi) *  &2 *pi* (&1- y/ (r * &2))
    - (&8 * mm2/pi) * &2 * pi * f (y/ (&2)) `;;
    
  add
    {
      id= "HJKDESR4"; 
      ineq = (all_forall `ineq
		[ 
		  (#2.0,y1,sqrt8);
		  (#2.0,y2,sqrt8);
		  (#2.0,y3,sqrt8);
		  (#2.0,y4,sqrt8);
		  (#2.0,y5,sqrt8);
		  (#2.0,y6,sqrt8)
		]
		((gamma4f y1 y2 y3 y4 y5 y6 marchal_quartic >= &0) \/
                   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2))`);
      doc=
	   "% Main Marchal Inequality (4 cells). Packing Chapter.
	   % old: \\guid{WJDLOCM} \\guid{XHVKJFS} \\guid{1025009205} 
	   % old: 9373340897; cc:mar; calc:marchal
    If $X$ is a $4$-cell, then $\\gamma(X,M)\\ge 0$. ";
	 ]);
      tags = [Text;Tex;Cfsqp;Eps 1.0e-12]
    };;

add
    {
      id= "HJKDESR3";
      ineq = (all_forall `ineq
		[ 
		  (#2.0,y1,sqrt8);
		  (#2.0,y2,sqrt8);
		  (#2.0,y3,sqrt8)
		]
		(
  (vol3r   y1 y2 y3 sqrt2 -  vol3f y1 y2 y3 sqrt2 marchal_quartic  >= &0) \/ 
  (eta_y y1 y2 y3 >= sqrt2) )`);
    doc = "%old tags 1305126631, 3564312720 Packing, Marchal 3cell 
   If $X$ is a $3$-cell, then $\\gamma(X,M)\\ge 0$. ";
    tags = [Text;Tex;Cfsqp;Eps 1.0e-7];
  };;



add
  {
  id = "HJKDESR2";
 ineq = all_forall `ineq
  [     (#2.0,y,sqrt8) ]
   (vol2r y sqrt2 - vol2f y sqrt2 marchal_quartic >= &0)`;
  doc = "%old: I_3148025108 (* Flypaper, Packing Marchal 2cell *)
   If $X$ is a $2$-cell, then $\\gamma(X,M)\\ge 0$. 
   ";
    tags = [Text;Cfsqp;Eps 1.0e-7];  
  };;

add
{
  id =  "HJKDESR1";
  ineq =  all_forall `ineq
  [     (#1.246, r, sqrt2) ]
   ( &4 * pi * (r pow 3) / (&3)  -  (&2 * mm1 / pi) * &4 * pi >= &0) `;
  doc = 
   "%old: I_3148025108 Flypaper, Packing Marchal 1-cell 
   If $X$ is a $1$-cell, then $\\gamma(X,M)\\ge 0$.  (The desired inequality is the
   special case $r=\\sqrt2$ of the formal specification.)";
    tags = [Text;Tex;Cfsqp;Eps 1.0e-7];  
};;


  let norm2hh = new_definition `norm2hh y1 y2 y3 y4 y5 y6 = 
    (y1- hminus - hplus) pow 2 + (y2 - &2) pow 2 + (y3 - &2) pow 2 + (y4 - &2) pow 2 
     + (y5 - &2) pow 2 + (y6 - &2) pow 2`;;

add 
{
  id = "GLFVCVK4";
  ineq = all_forall `ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2,y2,sqrt8);
    (&2,y3,sqrt8);
    (&2,y4,sqrt8);
    (&2,y5,sqrt8);
    (&2,y6,sqrt8)
   ]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0)\/ 
    (norm2hh y1 y2 y3 y4 y5 y6 <=  (hplus- hminus) pow 2) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
  doc = "
  %2477216213
  \\claim{If $X$ is a $4$-cell that is not a quarter, then $\\gamma(X,L)\\ge0$.}
  Indeed, if no edge of $X$ is critical, then $\\gamma(X,L)\\ge \\gamma(X,M)\\ge 0$.
  If some edge of $X$ is critical, then we may label the edges so that it is the first, and
  this computer calculation treats it.

  If the norm condition holds, then it is a quarter.  This norm condition seems easier to
  check in practice than the conditions defining a quarter.
  ";
  tags = [Text];
};;

add 
{
  id = "GLFVCVK3";
  ineq = all_forall `ineq
   [(&2 , y1, sqrt8);
    (&2,y2,sqrt8);
    (&2,y3,sqrt8)
   ]
    ((vol3r y1 y2 y3 sqrt2 - vol3f y1 y2 y3 sqrt2 lmfun > &0)\/ 
    (eta_y y1 y2 y3  > sqrt2))`;
  doc =   "
     %4869905472
     If $X$ is a $3$-cell, then $\\gamma(X,L)\\ge0$.";
  tags = [Text;Cfsqp;Eps 1.0e-7];
};;

add
  {
  id = "GLFVCVK2";
 ineq = all_forall `ineq
  [     (#2.0,y,sqrt8) ]
   (vol2r y sqrt2 - vol2f y sqrt2 lmfun > &0)`;
  doc =   "If $X$ is a $3$-cell, then $\\gamma(X,L)\\ge0$.";
    tags = [Text;Tex;Cfsqp];  
  };;

let bump = new_definition `!h. bump h = #0.005*(&1 - ((h- h0) pow 2)/((hplus - h0) pow 2))`;;

let critical_edge_y = new_definition `critical_edge_y y = ((&2*hminus <= y) /\ (y <= &2 *hplus))`;;

let beta_bump_y = new_definition `beta_bump_y y1 y2 y3 y4 y5 y6 =
  (if critical_edge_y y1 then &1 else &0) *
  (if critical_edge_y y2 then &0 else &1) *
  (if critical_edge_y y3 then &0 else &1) *
  (if critical_edge_y y4 then &1 else &0) *
  (if critical_edge_y y5 then &0 else &1) *
  (if critical_edge_y y6 then &0 else &1) * 
    (bump (y1/ &2) - bump (y4 / &2))`;;

let beta_bump_force_y = new_definition `beta_bump_force_y y1 y2 y3 y4 y5 y6 =
    (bump (y1/ &2) - bump (y4 / &2))`;;

let wtcount3_y = new_definition `wtcount3_y y1 y2 y3  = 
  (if critical_edge_y y1 then 1 else 0) +
  (if critical_edge_y y2 then 1 else 0) +
  (if critical_edge_y y3 then 1 else 0) `;;

let wtcount6_y = new_definition 
 `wtcount6_y y1 y2 y3 y4 y5 y6 = wtcount3_y y1 y2 y3 + wtcount3_y y4 y5 y6`;;

(* hack for numerical procedures.  It is irrelevant for formal proofs. *)
let machine_eps = new_definition `machine_eps = &0`;; 

add
{
  id = "GLFVCVK4a";
  ineq = all_forall `ineq
   [(&2 * hminus, y1, &2 * hplus );
    (&2 ,y2,&2 * hminus );
    (&2,y3,&2 * hminus);
    (&2 * hminus  ,y4,&2 * hplus );
    (&2,y5,&2 * hminus );
    (&2,y6,&2 * hminus )
   ]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &2 +
    beta_bump_force_y y1 y2 y3 y4 y5 y6 > &0)\/ 
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
  doc = "
%old tag 8328676778
Let $\\gamma$ be given by Definition~\\ref{def:gammaL}, $\\op{wt}$ by
Definition~\\ref{def:wt}, and $\\beta$ by Definition~\\ref{def:beta}.
If $X$ is any $k$-cell with $k\\in\\{2,3,4\\}$, and if $X$ is not a quarter, then
then % gammaL is nonneg on quarters. cc:qtr
\\[ 
\\gamma(X,L) \\op{wt}(X) + \\beta(\\ee,X)\\ge 0.
\\]  
  In fact, $\\beta(\\ee,X)=0$, except possibly when $X$ is a $4$-cell with oppositely
  arranged critical edges.  Hence in most cases, it is enough to check the simpler
  inequality $\\gamma(X,L)\\ge0$. This is the verification of the case where the factor
  $\\beta$ matters and where all edges are critical or subcritical.
  If some edge is supercritical, then the circumradius is at least
  \\[
 \\op{rad}(2h_-,2,2,2h_-,2h_+,2) > \\sqrt2,
  \\]
  and the simplex is not a $4$-cell.
 ";
    tags = [Text;Tex;Cfsqp];  
  };;


add
  {
    id = "FHBVYXZ";
    ineq = all_forall `ineq
      [(&2 * hminus, y1, &2 * hplus );
       (&2 ,y2,&2 * hminus );
       (&2,y3,&2 * hminus);
       (&2,y4,&2 * hminus);
       (&2,y5,&2 * hminus );
       (&2,y6,&2 * hminus )
      ]
      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun  + gamma3f y1 y2 y6 sqrt2 lmfun
	> &0)\/ 
	 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;
    doc = "
%old tag 1118115412, cc:2bl
If $X$ is any quarter, and  $Y$ is a $3$-cell that flanks it, then
\\[ 
\\gamma(X,L) + \\gamma(Y,L) \\ge 0.
\\]  

\\claim{We show that the cluster inequality holds when there are at most two leaves along the critical
edge.}  Indeed, if the cluster has no quarter, then the inequality follows from \\ineq{GLFVCVK}.
Assume that a quarter exists.  Then there are two leaves, which flank the quarter.  
Next to the quarter is a three cell,
because the dihedral angle of a $4$-cell is less than $\\pi$.  
 The quarter and the $3$-cell both have weight $1$.
 The result follows from the
given inequality.
 ";
    tags = [Text;Tex;Cfsqp];  
  };;

let a_spine5 = new_definition `a_spine5 = #0.0560305`;;
let b_spine5 = new_definition `b_spine5 = -- #0.0445813`;;

add
  {
  id = "ZTGIJCF0";
 ineq = all_forall `ineq
  [(&1,dummy,&1)]
   ( &5 * a_spine5 + b_spine5 * &2 * pi  > &0)`;
  doc =   "
 Let
 \\[ 
 a= 0.0560305, \\textand   b= -0.0445813.
 \\] 

  The constants $a$ and $b$ must satisfy $5 a + b (2\pi) >0$, for the $5$-leaf
   case of the cluster inequality.

   The circumradius of a triangle with sides $h_-,h_-,h_-$ is greater than $\\sqrt2$, so
   in $4$-cells one edge next to the spine is subcritical.  Without loss of generality, we
   can assume it is $y_2$.   We have the inequality for all $4$-cells:
   \\[
   \\gamma(X,L) \\op{wt}(X) + \\beta(\\e,X) \\ge a + b \\azim(X).
   \\]
    This has many cases \\ineq{ZTGIJCF4 i3 i4 i5 i6}, depending on which edges $y_3,\\ldots,y_6$
    are subcritical, critical, or supercritical. 


\\begin{itemize}\\wasitemize 
\\item \\case{1821661595} A $4$-cell $X$ along a spine $e$ satisfies
\\[ 
\\gamma_L(X)\\op{wt}(X) + \\beta(e,X) \\ge a + b\\,\\op{azim}(X),
\\] 
\\item \\case{7907792228} The $2$-cell $X_2$ and two $3$-cells $X_1,X_3$
that flank it along a spine $e$ satisfy
\\[ 
\\sum_{i=1}^3 \\left(\\gamma_L(X_i)\\op{wt}(X_i) + \\beta(e,X_i)\\right)\\ge a + b\\,\\sum_{i=1}^3\\op{azim}(X_i).
\\] 
\\end{itemize}\\wasitemize 
Then 
\\[  
\\sum_{X\\in B} \\gamma(X,L)\\op{wt}(X) + \\beta(\\ee,X) \\ge a + b\\,\\op{azim}(B).
\\] 
It follows that
\\[  
\\Gamma(Z) \\ge 5 a + b\\, (2\\pi) > 0.
\\] 

    ";
    tags = [Text;Tex;Cfsqp];  
  };;

let beta_bump_lb = new_definition `beta_bump_lb = -- #0.005`;;

let template = `\ y3m y3M y4m y4M y5m y5M y6m y6M w m. ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hplus);
    (y3m,y3,y3M);
    (y4m,y4,y4M);
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ((gamma4f y1 y2 y3 y4 y5 y6 lmfun / &w + &m *beta_bump_lb  >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/ 
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;;

let mk_tm i3 i4 i5 i6 = 
  let x i = List.nth [`&2`; `&2 * hminus`; `&2 * hplus` ; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i=1) then 1 else 0 in
  let w = 1 + mid i3 + mid i4 + mid i5 + mid i6 in
  let m = if (w =2) && (i4 = 1) then `1` else `0` in
     list_mk_comb (template, [x i3;X i3; x i4;X i4; x i5;X i5; x i6 ;X i6; mk_small_numeral w; m]);;

let mk_ineq i3 i4 i5 i6 = all_forall (snd(dest_eq(concl(BETAS_CONV (mk_tm i3 i4 i5 i6)))));;

let add0 i3 i4 i5 i6 = 
  add {
    id = Printf.sprintf "ZTGIJCF4 %d %d %d %d" i3 i4 i5 i6;
    ineq = mk_ineq i3 i4 i5 i6;
    doc = "This is the 4-cell inequality for five or more leaves.";
    tags = [Cfsqp;Text];
  };;

 for i3=0 to 2 do 
for i4 = 0 to 2 do
 for i5 = 0 to 2 do
 for i6 = 0 to 2 do
   add0 i3 i4 i5 i6 done done done done;;



let template23 = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 * hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hplus);
    (y3m,y3,y3M);
    (&2 ,y4, sqrt8 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ((gamma3f y1 y2 y6 sqrt2 lmfun / &w1 + gamma3f y1 y3 y5 sqrt2 lmfun / &w2
      + (dih_y y1 y2 y3 y4 y5 y6 - dih_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - dih_y y1 y3 sqrt2 sqrt2 sqrt2 y5) * (vol2r y1 sqrt2 - vol2f y1 sqrt2 lmfun)/(&2 * pi)    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/ 
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
    (eta_y y1 y2 y6 > sqrt2 ) \/
    (eta_y y1 y3 y5 > sqrt2))`;;

let mk_tm23 i3 i5 i6 = 
  let x i = List.nth [`&2`; `&2 * hminus`; `&2 * hplus` ; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i=1) then 1 else 0 in
  let m = mk_small_numeral in
  let w1 = 1 +  mid i6 in
  let w2 = 1 + mid i3 + mid i5 in
     list_mk_comb (template23, [x i3;X i3; x i5;X i5; x i6 ;X i6; m w1; m w2]);;

let mk_ineq23 i3 i5 i6 = all_forall (snd(dest_eq(concl(BETAS_CONV (mk_tm23 i3 i5 i6)))));;

let add23 i3 i5 i6 = 
  add {
    id = Printf.sprintf "ZTGIJCF23 %d %d %d" i3 i5 i6;
    ineq = mk_ineq23 i3 i5 i6;
    doc = "This is the 2&3-cell inequality for five or more leaves.";
    tags = [Cfsqp;Text];
  };;

 for i3=0 to 2 do 
 for i5 = 0 to 2 do
 for i6 = 0 to 2 do
   add23 i3 i5 i6 done done done;;



