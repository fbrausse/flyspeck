

flyspeck_needs "nonlinear/ineq.hl";;





let derived = `ineq
	      [ 
		(#2.0,y1,sqrt8);
		(#2.0,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;

let ineqA = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(&2 * hplus,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      (
                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;;

let ineqB = `ineq
	      [ 
		(#2.0,y1,&2 * hminus);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;


let ineqC = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;
let ineqD = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.01,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;
let ineqE = `ineq
	      [ 
		(&2 * hplus,y1,#2.8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;

let ineqF = `ineq
	      [ 
		(#2.8,y1,sqrt8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(#2.8,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0)   \/    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2))`;;

let lemma = 
 mk_imp (( end_itlist (curry mk_conj) [
	    ineqA;ineqB;ineqC;ineqD;ineqE;ineqF]),derived);;

g(lemma);;



let all_forall = Sphere.all_forall;;


(* still need pent cases with 2 flats *)


let tt = Ineq.getprefix "test-ZTGIJCF23";;
let tts = Parse_ineq.nub (map (fun t -> t.id) tt);;
List.length tts;;
let cfsqp s = Parse_ineq.execute_cfsqp  (hd(Ineq.getexact  s));;
map cfsqp tts;;

cfsqp "test QITNPEA  5400790175 b"  ;;
cfsqp "ZHPXLTX 9620775909 3,1,0 flat B";;
cfsqp "testA";;



Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 A short";
doc = "See explanation in 2065952723";
(* arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound *)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &2 * h0);
  ((&2 / h0) pow 2, b2, &2 * h0);
  ((&2 / h0) pow 2, c2, #3.94 pow 2)
  ]
   ((num1 e1 e2 e3 a2 b2 c2 ) > &0) `;
};;

 

Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 A short seg";
doc = "See explanation in 2065952723.  At this point we have a hexagon ";
(* arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound *)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &2 * h0);
  ((&2 / h0) pow 2, b2, &2 * h0);
  ((&2 / h0) pow 2, c2, #3.94 pow 2)
  ]
   ((num1 e1 e2 e3 a2 b2 c2 ) > &0) `;
};;

Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 B";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ( (x5 + x6 > #15.5) \/ (delta_x x1 x2 x3 x4 x5 x6 < &0))`;
};;

Parse_ineq.execute_cfsqp  {
id = "old test 2065952723 C";
doc = "";
tags = [Flypaper;Tex;Penalty (500.0,50000.0)];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (#15.99,a2,#16);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
((((&2 / &25) * (((-- &32) * ((a2 pow 3) * e1)) + ((&2 * ((a2 pow 4) * e1)) +  
((&32 * (a2 * ((b2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) * ((b2 pow 2) *  
e1))) + (((-- &64) * (a2 * (b2 * (c2 * e1)))) + ((&4 * ((a2 pow 2) * (b2 *  
(c2 * e1)))) + ((&32 * (a2 * ((c2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) *  
((c2 pow 2) * e1))) + ((&3200 * ((a2 pow 2) * (e1 pow 2))) + (((-- &200) *  
((a2 pow 3) * (e1 pow 2))) + ((&131072 * e2) + ((&8192 * (a2 * e2)) + ((&512  
* ((a2 pow 2) * e2)) + ((&48 * ((a2 pow 3) * e2)) + (((-- &24576) * (b2 *  
e2)) + (((-- &1536) * (a2 * (b2 * e2))) + (((-- &48) * ((a2 pow 2) * (b2 *  
e2))) + (((-- &6) * ((a2 pow 3) * (b2 * e2))) + ((&1536 * ((b2 pow 2) * e2))  
+ ((&16 * (a2 * ((b2 pow 2) * e2))) + ((&8 * ((a2 pow 2) * ((b2 pow 2) *  
e2))) + (((-- &16) * ((b2 pow 3) * e2)) + (((-- &2) * (a2 * ((b2 pow 3) *  
e2))) + (((-- &24576) * (c2 * e2)) + (((-- &1536) * (a2 * (c2 * e2))) + (((--  
&144) * ((a2 pow 2) * (c2 * e2))) + ((&3072 * (b2 * (c2 * e2))) + ((&224 *  
(a2 * (b2 * (c2 * e2)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 * e2)))) + (((--  
&144) * ((b2 pow 2) * (c2 * e2))) + ((&4 * (a2 * ((b2 pow 2) * (c2 * e2)))) +  
(((-- &1) * ((a2 pow 2) * ((b2 pow 2) * (c2 * e2)))) + ((&1536 * ((c2 pow 2)  
* e2)) + ((&144 * (a2 * ((c2 pow 2) * e2))) + (((-- &48) * (b2 * ((c2 pow 2)  
* e2))) + (((-- &18) * (a2 * (b2 * ((c2 pow 2) * e2)))) + (((-- &48) * ((c2  
pow 3) * e2)) + (((-- &3200) * ((a2 pow 2) * (e1 * e2))) + (((-- &3200) * (a2  
* (b2 * (e1 * e2)))) + ((&400 * ((a2 pow 2) * (b2 * (e1 * e2)))) + ((&3200 *  
(a2 * (c2 * (e1 * e2)))) + (((-- &204800) * (e2 pow 2)) + (((-- &12800) * (a2  
* (e2 pow 2))) + ((&25600 * (b2 * (e2 pow 2))) + ((&3200 * (a2 * (b2 * (e2  
pow 2)))) + (((-- &200) * (a2 * ((b2 pow 2) * (e2 pow 2)))) + ((&25600 * (c2  
* (e2 pow 2))) + (((-- &3200) * (b2 * (c2 * (e2 pow 2)))) + ((&131072 * e3) +  
((&8192 * (a2 * e3)) + ((&512 * ((a2 pow 2) * e3)) + ((&48 * ((a2 pow 3) *  
e3)) + (((-- &24576) * (b2 * e3)) + (((-- &1536) * (a2 * (b2 * e3))) + (((--  
&144) * ((a2 pow 2) * (b2 * e3))) + ((&1536 * ((b2 pow 2) * e3)) + ((&144 *  
(a2 * ((b2 pow 2) * e3))) + (((-- &48) * ((b2 pow 3) * e3)) + (((-- &24576) *  
(c2 * e3)) + (((-- &1536) * (a2 * (c2 * e3))) + (((-- &48) * ((a2 pow 2) *  
(c2 * e3))) + (((-- &6) * ((a2 pow 3) * (c2 * e3))) + ((&3072 * (b2 * (c2 *  
e3))) + ((&224 * (a2 * (b2 * (c2 * e3)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 *  
e3)))) + (((-- &48) * ((b2 pow 2) * (c2 * e3))) + (((-- &18) * (a2 * ((b2 pow  
2) * (c2 * e3)))) + ((&1536 * ((c2 pow 2) * e3)) + ((&16 * (a2 * ((c2 pow 2)  
* e3))) + ((&8 * ((a2 pow 2) * ((c2 pow 2) * e3))) + (((-- &144) * (b2 * ((c2  
pow 2) * e3))) + ((&4 * (a2 * (b2 * ((c2 pow 2) * e3)))) + (((-- &1) * ((a2  
pow 2) * (b2 * ((c2 pow 2) * e3)))) + (((-- &16) * ((c2 pow 3) * e3)) + (((--  
&2) * (a2 * ((c2 pow 3) * e3))) + (((-- &3200) * ((a2 pow 2) * (e1 *  
e3))) + ((&3200 * (a2 * (b2 * (e1 * e3)))) + (((-- &3200) * (a2 * (c2 * (e1 *  
e3)))) + ((&400 * ((a2 pow 2) * (c2 * (e1 * e3)))) + (((-- &409600) * (e2 *  
e3)) + (((-- &25600) * (a2 * (e2 * e3))) + ((&51200 * (b2 * (e2 * e3))) +  
((&3200 * (a2 * (b2 * (e2 * e3)))) + (((-- &3200) * ((b2 pow 2) * (e2 * e3)))  
+ ((&51200 * (c2 * (e2 * e3))) + ((&3200 * (a2 * (c2 * (e2 * e3)))) + (((--  
&400) * (a2 * (b2 * (c2 * (e2 * e3))))) + (((-- &3200) * ((c2 pow 2) * (e2 *  
e3))) + (((-- &204800) * (e3 pow 2)) + (((-- &12800) * (a2 * (e3 pow 2))) +  
((&25600 * (b2 * (e3 pow 2))) + ((&25600 * (c2 * (e3 pow 2))) + ((&3200 * (a2  
* (c2 * (e3 pow 2)))) + (((-- &3200) * (b2 * (c2 * (e3 pow 2)))) + ((-- &200) *  
(a2 * ((c2 pow 2) * (e3 pow  
2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
)))))))))))))))))))))) > &0) \/ (b2 + c2 < #16.0) \/ (b2 + c2 > #16.5))
`;
};;

Parse_ineq.execute_cfsqp  {
id = "test 2065952723";
doc = "
%See Mathematica numerical calculation.
% old id: eqn:gg'' calc:Lexell.
The derivatives have been computed in Mathematica and converted to
HOL format.  
This is a
  calculation of the sign of a second derivative to show that the
  function $\\tau$ does not have a interior local minimum as a function of the
  edge lengths.  It initially appears to depend on six variables, but
  the dependence on three of the variables is linear and is
  extremal at the endpoints.

Let
\\[ 
g(s;a,b,c,e_1,e_2,e_3) = \\sum_{i=1}^3 \\dih_i(2,2,2,a+s,b,c) e_i,
\\] 
where $\\dih_i$ is given by Definition~\\ref{def:tau}.
Let $\\Delta = \\Delta(4,4,4,a^2,b^2,c^2)$.
Let primes denote derivatives with respect to the variable $s$.
Assume that
$e_i\\in\\leftclosed1,1+\\sol_0/\\pi\\rightclosed$,  that
$a,b,c\\in\\leftclosed2/\\hm,4\\rightclosed$.
%We restrict $a$ further to $a\\le 3.8$.
Then
\\begin{equation}\\label{eqn:calc:Lexell}
(16-a^2) ^2 a^2(  \\Delta (g'(0;a,b,c,e_1,e_2,e_3))^2 
- 0.01\\Delta^{3/2}g''(0;a,b,c,e_1,e_2,e_3))\\ge 0.
\\end{equation}
(The factors of $\\Delta$ clear the denominator in
(\\ref{eqn:calc:Lexell}) to simplify the inequality to be proved.)
%Sum of squares methods may be the easiest way to prove this inequality near the
%minimum.
%The quantities deriv1 and deriv2 are for reference only.
Variables $e_i$ are linear and variables $a,b,c$ appear in even powers.
";
(*

*)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &4 pow 2);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (((num1 e1 e2 e3 a2 b2 c2 ) pow 2 - #0.01 * num2 e1 e2 e3 a2 b2 c2 > &0) \/ (a2 > #15.9))`;
};;


Parse_ineq.execute_cfsqp  {
id = "test  not used";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ((delta_x x1 x2 x3 x4 x5 x6 < &0) \/ (x5 + x6 < #16.5))`;
};;








