

flyspeck_needs "nonlinear/ineq.hl";;





let derived = `ineq
	      [ 
		(#2.0,y1,sqrt8);
		(#2.0,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;

let ineqA = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(&2 * hplus,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      (
                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;;



let ineqB = `ineq
	      [ 
		(#2.0,y1,&2 * hminus);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;


let ineqC = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;
let ineqD = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.01,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;
let ineqE = `ineq
	      [ 
		(&2 * hplus,y1,#2.8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;

let ineqF = `ineq
	      [ 
		(#2.8,y1,sqrt8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(#2.8,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0)   \/    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2))`;;

let lemma = 
 mk_imp (( end_itlist (curry mk_conj) [
	    ineqA;ineqB;ineqC;ineqD;ineqE;ineqF]),derived);;

g(lemma);;

let all_forall = Sphere.all_forall;;

add {
  id = "9620775909";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.";
(*
   The bounds on the four vertices $\\v_1,\\ldots,\\v_4$ gives
   the top simplex bound 
   \\[
   y_4 \\le \\op{edge\\_flat}(2h_0,2h_0,2h_0,2h_0,2h_0) < 4.37
   \\
*)
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
     (&2,y1,&2 * h0);
     (&2,y2,&2 * h0);
     (&2,y3,&2 * h0);
     (sqrt8,y4,&4 * h0);
     (&2,y5,&2 * h0);
     (&2,y6,&2 * h0);
     (&2,y7,&2 * h0);
     (&2 * h0,y8,sqrt8);
     (&2,y9,&2 * h0)
   ]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9  > #0.492) \/
  (delta_y y4 y9 y6 sqrt8    y5 y8 < &0) \/
   (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
   (delta_y y7 y2 y3 y4 y8 y9 < &0) \/
    (dih3_y y1 y2 y3 y4 y5 y6 + dih2_y y7 y3 y2 y4 y9 y8 < #1.448))`;
};;
(* 1.448 comes from 181212899 *)


Ineq.add {
  id = "ZHPXLTX 9620775909 2,0,1";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (sqrt8,y4,sqrt8);
   (&2,y5,&2 * h0);
   (&2,y6,&2 * h0)
   ]
( taum y1 y2 y3 y4 y5 y6   > #0.128)`;
};;

Ineq.add {
  id = "ZHPXLTX 9620775909 1,1,1";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (sqrt8,y4,sqrt8);
   (&2 * h0,y5,sqrt8);
   (&2,y6,&2 * h0)
   ]
( taum y1 y2 y3 y4 y5 y6   > #0.349)`;
};;

Ineq.add {
  id = "ZHPXLTX 9620775909 1,0,2";
  doc="We can use dimension reduction methods to reduce the number of variables. This is a special nonlinear inequality for the linear programs.  It is not autogenerated.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =all_forall `ineq 
   [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (sqrt8,y4,sqrt8);
   (sqrt8,y5,sqrt8);
   (&2,y6,&2 * h0)
   ]
( taum y1 y2 y3 y4 y5 y6   > #0.44)`;
};;

