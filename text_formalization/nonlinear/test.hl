CE to hexall 5A1:

{4.0367249999999996746,4.0367249999999996746,4.0367249999999996746,5.9464250000000058449,6.3876093749999940385,1.000000000000000222} {4.0367249999999996746,4.0367249999999996746,4.0367249999999996746,5.9464250000000058449,6.3876093749999940385,1.000000000000000222}  isolated point
function 0 value=[2.2566633457319120737,2.2566633457353155734]
T0 partial 0: [21.159337943191999898,21.159337943193165188]
T0 partial 1: [68.637638901404642411,68.63763890140612034]
T0 partial 2: [8.103456502905828529,8.103456502906908554]
T0 partial 3: [-65.817170105080634812,-65.817170105079782161]
T0 partial 4: [52.739287222031975944,52.739287222032274371]
T0 partial 5: [-0,0]
counterexample found 
FAIL


let all_forall = Sphere.all_forall;;
Parse_ineq.execute_cfsqp;;
(* still need pent cases with 2 flats *) 




Parse_ineq.execute_cfsqp  
{
id = "test W";
doc = "";
tags= [Tex;Cfsqp;Xconvert;Penalty(1000.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 ,y4,&2);
   (#2.9,y5,#3.47);
   (#2.9,y6,#3.93)
 ] (
  (dih_y y1 y2 y3 y4 y5 y6 < #1.47) 
    )`;
};; 

Parse_ineq.execute_cfsqp  
{
id = "test W2";
doc = "";
tags= [Tex;Cfsqp;Xconvert;Penalty(1000.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&2 * h0);
   (#2.9,y5,#3.47);
   (#2.9,y6,#3.47)
 ] (
  (dih_y y1 y2 y3 y4 y5 y6 < #1.64) 
    )`;
};; 

Parse_ineq.execute_cfsqp  
{
id = "test W3 junk";
doc = "";
tags= [Tex;Cfsqp;Xconvert;Penalty(1000.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&4 * h0);
   (&2,y5,&2 * h0);
   (&2,y6,&2 * h0)
 ] (
   (arclength y2 y3 y4 > #2.42 - #0.88) \/
  (taum y1 y2 y3 y4 y5 y6 > #0.103) 
    )`;
};; 








1;;



1;;

(* SECTION 1607135856 *)

Parse_ineq.execute_cfsqp
{
id = "test 1607135856 F";
doc = "
";
tags= [Tex;Cfsqp;Xconvert;Penalty(100.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&4 * h0);
   (&2,y5,&2);
   (&2 * h0,y6,&4 * h0)
 ] (
   let costheta = -- #0.915903125 in
   let cos1981 = -- #0.39879 in
   let tan2lower = #0.15043 in
  (delta_y y1 y2 y3 y4 y5 y6 > &14) \/
(&4 * x1_delta_y y1 y2 y3 y4 y5 y6 <  tan2lower * delta4_squared_y y1 y2 y3 y4 y5 y6)  \/
    (delta4_y y1 y2 y3 y4 y5 y6 > &0) \/
  (y_of_x (law_cosines_126_x cos1981) y1 y2 y3 y4 y5 y6 > &0) \/
    (y_of_x (law_cosines_234_x costheta) y1 y2 y3 y4 y5 y6  < &0)
    )`;
(* Cos[arc[2,2,3.915]] = -0.915903125
   segment with dih > pi/2.
  (dih_y y1 y2 y3 y4 y5 y6 > pi - #0.37) \/, removed.
  Tan[Pi-0.37]^2 approx 0.150438
 *)
};; 

ignore
{
id = "test 1607135856 F";
doc = "
";
tags= [Tex;Cfsqp;Xconvert;Penalty(100.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&4 * h0);
   (&2,y5,&2);
   (&2 * h0,y6,&4 * h0)
 ] (
   let costheta = -- #0.915903125 in
   let cos1981 = -- #0.39879 in
   let tan2lower = #0.15043 in
  (delta_y y1 y2 y3 y4 y5 y6 > &14) \/
(&4 * x1_delta_y y1 y2 y3 y4 y5 y6 <  tan2lower * delta4_squared_y y1 y2 y3 y4 y5 y6)  \/
    (delta4_y y1 y2 y3 y4 y5 y6 > &0) \/
  (y_of_x (law_cosines_126_x cos1981) y1 y2 y3 y4 y5 y6 > &0) \/
    (y_of_x (law_cosines_234_x costheta) y1 y2 y3 y4 y5 y6  < &0)
    )`;
(* Cos[arc[2,2,3.915]] = -0.915903125
   segment with dih > pi/2.
  (dih_y y1 y2 y3 y4 y5 y6 > pi - #0.37) \/, removed.
  Tan[Pi-0.37]^2 approx 0.150438
 *)
};; 


Parse_ineq.execute_cfsqp
{
id = "test 1607135856 G";
doc = "
";
tags= [Tex;Cfsqp;Xconvert;Penalty(50000.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&4 * h0);
   (&2,y5,&2);
   (&2 * h0,y6,&4 * h0)
 ] (
   let costheta = -- #0.915903125 in
   let cos1981 = -- #0.39879 in
   let tan2lower = #0.15043 in
   (taum y1 y2 y3 y4 y5 y6 > #0.75) \/
    (y_of_x (law_cosines_234_x costheta) y1 y2 y3 y4 y5 y6  < &0) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &14) \/
(&4 * x1_delta_y y1 y2 y3 y4 y5 y6 <  tan2lower * delta4_squared_y y1 y2 y3 y4 y5 y6)  \/
    (delta4_y y1 y2 y3 y4 y5 y6 > &0) \/
  (y_of_x (law_cosines_126_x cos1981) y1 y2 y3 y4 y5 y6 > &0) 
    )`;
(* arc[2,2,3.915]==2.72855... 
  (dih_y y1 y2 y3 y4 y5 y6 > pi - #0.37) \/   (arclength y2 y3 y4 < #2.7285) , removed *)
};; 



Parse_ineq.execute_cfsqp  
{
id = "test 1607135856 C extra";
doc = "
";
tags= [Tex;Cfsqp;Xconvert;Penalty(10.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&4 * h0);
   (&2,y5,&2);
   (&2,y6,&2)
 ] (
  (dih_y y1 y2 y3 y4 y5 y6 - dih2_y y1 y2 y3 y4 y5 y6 > #1.52) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &36) \/
  (delta4_y y1 y2 y3 y4 y5 y6 > &0) \/
  (dih_y y1 y2 y3 y4 y5 y6 > #2.614) \/
  (dih_y y1 y2 y3 y4 y5 y6 < #2.274)
    )`;
};; 


Parse_ineq.execute_cfsqp  
{
id = "test 1607135856 extra";
doc = "
";
tags= [Tex;Cfsqp;Xconvert;Penalty(1000.0,10000.0);Flypaper];
ineq = all_forall `ineq
 [
   (&2,y1,&2 * h0);
   (&2,y2,&2 * h0);
   (&2,y3,&2 * h0);
   (&2 * h0,y4,&4 * h0);
   (&2,y5,&2);
   (&2 * h0,y6,&4 * h0)
 ] (
  (arclength y2 y3 y4 < #2.8) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &21) \/
  (dih_y y1 y2 y3 y4 y5 y6 > pi - #0.37) \/
  (dih_y y1 y2 y3 y4 y5 y6 < #1.52) \/
    (arclength y1 y2 y6 > #1.981) 
    )`;
(* Solve[arc[2, 2, y] == 2.793, y]   ==> y <= 3.9395 *)
};; 




1;;
(* SECTION 2986512815 *)





Parse_ineq.execute_cfsqp  
{
id = "test 2986512815";
doc = "The terms have been generated by Mathematica.
";
tags= [Tex;Cfsqp;Eps 1.0e-8;Penalty(1000.0,100000.0);Flypaper];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    ((&2 / h0) pow 2, a2, (&2 * h0) pow 2);
    ((&2 / h0) pow 2, b2, (&2 * h0) pow 2);
    ((&2 / h0) pow 2, c2, (&2 * h0) pow 2);
    (&2 pow 2, d2, #3.915 pow 2);
    (&2 pow 2, y2, #3.915 pow 2)
 ]
 (num1 e1 e2 e3 y2 b2 a2 * num1 e4 e2 e3 y2 c2 d2 > &0 \/
delta_x (&4) (&4) (&4) a2 b2 y2 > &10 \/
delta_x (&4) (&4) (&4) c2 d2 y2 > &10 \/
 delta_x (&4) (&4) (&4) a2 b2 y2 < &0 \/
 delta_x (&4) (&4) (&4) c2 d2 y2 < &0 \/
num2 e4 e2 e3 y2 c2 d2 < &0 \/
eulerA_x (&4) (&4) (&4) c2 d2 y2 < &0 
\/
 (dih_x (&4) (&4) (&4) a2 b2 y2 + dih_x (&4) (&4) (&4) d2 c2 y2 > pi) 
    )`;
};; 



 (* break into 2 cases: d2 <= 3.915, and d2 >= 3.915 *)

(* \/ \/ num2 e1 e2 e3 y2 b2 a2 < &0 

 *)

Parse_ineq.execute_cfsqp  {
id = "test 2986512815 y";
doc = "The terms have been generated by Mathematica.
";
tags= [Tex;Cfsqp;Eps 1.0e-8;Penalty(1000.0,10000.0);Flypaper;Xconvert];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, d, #4.0);
    (&2, y, #3.915)
 ]
 (delta_y (&2) (&2) (&2) a b y > &10 \/
 delta_y (&2) (&2) (&2) c d y > &10 \/
 delta_y (&2) (&2) (&2) a b y < &0 \/
 delta_y (&2) (&2) (&2) c d y < &0 \/
 num1 e1 e2 e3 y b a * num1 e4 e2 e3 y c d > &0 \/
  num2 e1 e2 e3 y b a < &0 \/
  (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;

  {
id = "2986512815 XXX";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
   (&0,t1,&1);
   (&0,t2,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, d, #4.0);
    (&2, y, #3.915)
 ]
((t1 * num1 e1 e2 e3 y b a  / ( y * (&16 - y pow 2)) +
 t2 * num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) > &10)  \/ 
(t1 * num1 e1 e2 e3 y b a  / ( y * (&16 - y pow 2)) +
 t2 * num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) < --  &10)  \/ 
  (t1 pow 3 * num2 e1 e2 e3 y b a  / ( (y * (&16 - y pow 2)) pow 2) +
 t2  pow 3 * num2 e4 e2 e3 y c d  / ( (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y > &1) \/ 
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) c d y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) \/
    (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;


Parse_ineq.execute_cfsqp
  {
id = "2986512815 t0";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, d, #4.0);
    (&2, y, #3.915)
 ]
((num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) > &10)  \/ 
(num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) < --  &10)  \/ 
  (num2 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y) pow 3  * (y * (&16 - y pow 2)) pow 2) +
 num2 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y) pow 3  * (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &1) \/ 
  (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;

Parse_ineq.execute_cfsqp
  {
id = "2986512815 t1";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&0,t,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, d, #4.0);
    (&2, y, #3.915)
 ]
( (num1 e1 e2 e3 y b a  / (  y * (&16 - y pow 2)) +
 t * num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) > &10)  \/ 
(num1 e1 e2 e3 y b a  / (y * (&16 - y pow 2)) +
 t* num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) < --  &10)  \/ 
  (num2 e1 e2 e3 y b a  / (  (y * (&16 - y pow 2)) pow 2) +
 t pow 3 * num2 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y) pow 3  * (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) a b y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &1)) `;
};;


Parse_ineq.execute_cfsqp
  {
id = "2986512815 t2";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
   (&0,t,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, d, #4.0);
    (&2, y, #3.915)
 ]
((t * num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) > &10)  \/ 
(t * num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) < --  &10)  \/ 
  (t pow 3 * num2 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y) pow 3  * (y * (&16 - y pow 2)) pow 2) +
 num2 e4 e2 e3 y c d  / ( (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &1) \/ 
  (delta_y (&2) (&2) (&2) c d y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) )`;
};;


Parse_ineq.execute_cfsqp  {
id = "2986512815 test";
doc = "The terms have been generated by Mathematica.
Deprecated. Replaced with u1 below.  (The second derivative is always negative for each
simplex so the sum is negative.)
";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Deprecated];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, d, #4.0);
    (&2, y, #3.915)
 ]
 ((let term1 = ((&4 * ((sqrt ((((-- &4) * (c pow 4)) + (((-- &4) * (((d pow 2) + ((-- &1) * 
(y pow 2))) pow 2)) + ((c pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((d pow 2) 
* ((-- &8) + (y pow 2)))))))))) * (((-- &1) * ((y pow 2) * ((&8 * e1) + ((&8 
* e3) + (e2 * ((-- &16) + (y pow 2))))))) + (((b pow 2) * ((&8 * e3) + (e1 * 
((-- &8) + (y pow 2))))) + ((a pow 2) * ((&8 * e1) + (e3 * ((-- &8) + (y 
pow 2))))))))) + (&4 * ((sqrt ((((-- &4) * (a pow 4)) + (((-- &4) * (((b pow 
2) + ((-- &1) * (y pow 2))) pow 2)) + ((a pow 2) * ((&8 * (y pow 2)) + ((-- 
&1) * ((b pow 2) * ((-- &8) + (y pow 2)))))))))) * (((-- &1) * ((y pow 2) * 
((&8 * e1) + ((&8 * e3) + (e4 * ((-- &16) + (y pow 2))))))) + (((c pow 2) * 
((&8 * e3) + (e1 * ((-- &8) + (y pow 2))))) + ((d pow 2) * ((&8 * e1) + (e3 * 
((-- &8) + (y pow 2)))))))))) in
  let term2 = ((&4 * (((sqrt ((((-- &4) * (c pow 4)) + (((-- &4) * (((d pow 2) + ((-- &1) * 
(y pow 2))) pow 2)) + ((c pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((d pow 2) 
* ((-- &8) + (y pow 2)))))))))) pow 3) * (((-- &8) * ((a pow 6) * ((&8 * (e1 
* ((-- &16) + (&3 * (y pow 2))))) + (e3 * (&128 + (((-- &8) * (y pow 2)) + (y 
pow 4))))))) + (((-- &8) * (((b pow 2) + ((-- &1) * (y pow 2))) * (((y pow 4) 
* ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((&8 * (e1 * ((-- &16) + (&3 * (y 
pow 2))))) + (&8 * (e3 * ((-- &16) + (&3 * (y pow 2)))))))) + (((b pow 2) * 
((y pow 2) * ((&16 * (e3 * (&16 + ((-- &3) * (y pow 2))))) + ((e2 * (((-- 
&16) + (y pow 2)) pow 2)) + (e1 * ((-- &512) + ((&48 * (y pow 2)) + ((-- &3) 
* (y pow 4))))))))) + ((b pow 4) * ((&8 * (e3 * ((-- &16) + (&3 * (y pow 
2))))) + (e1 * (&128 + (((-- &8) * (y pow 2)) + (y pow 4)))))))))) + (((-- 
&4) * ((a pow 2) * ((&6 * ((y pow 4) * ((&8 * (e1 * ((-- &16) + (&3 * (y pow 
2))))) + (e3 * (&128 + (((-- &8) * (y pow 2)) + (y pow 4))))))) + (((-- &4) * 
((b pow 2) * ((y pow 2) * ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((&4 * (e1 
* ((-- &32) + (((-- &2) * (y pow 2)) + (y pow 4))))) + (&4 * (e3 * ((-- &32) 
+ (((-- &2) * (y pow 2)) + (y pow 4)))))))))) + ((b pow 4) * ((&6 * (e3 * 
(&128 + (((-- &40) * (y pow 2)) + (&3 * (y pow 4)))))) + (e1 * ((-- &768) + 
((&208 * (y pow 2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))) + ((-- 
&4) * ((a pow 4) * ((&2 * ((y pow 2) * ((e1 * (&384 + ((-- &72) * (y 
pow 2)))) + ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((-- &4) * (e3 * (&160 + 
(((-- &14) * (y pow 2)) + (y pow 4))))))))) + ((b pow 2) * ((&6 * (e1 * (&128 
+ (((-- &40) * (y pow 2)) + (&3 * (y pow 4)))))) + (e3 * ((-- &768) + ((&208 
* (y pow 2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))))))) + (&4 * 
(((sqrt ((((-- &4) * (a pow 4)) + (((-- &4) * (((b pow 2) + ((-- &1) * (y pow 
2))) pow 2)) + ((a pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((b pow 2) * ((-- 
&8) + (y pow 2)))))))))) pow 3) * (((-- &8) * ((c pow 6) * ((&8 * (e3 * ((-- 
&16) + (&3 * (y pow 2))))) + (e1 * (&128 + (((-- &8) * (y pow 2)) + (y pow 
4))))))) + (((-- &8) * (((d pow 2) + ((-- &1) * (y pow 2))) * (((y pow 4) * 
((e4 * (((-- &16) + (y pow 2)) pow 2)) + ((&8 * (e1 * ((-- &16) + (&3 * (y 
pow 2))))) + (&8 * (e3 * ((-- &16) + (&3 * (y pow 2)))))))) + (((d pow 2) * 
((y pow 2) * ((e1 * (&256 + ((-- &48) * (y pow 2)))) + ((e4 * (((-- &16) + (y 
pow 2)) pow 2)) + (e3 * ((-- &512) + ((&48 * (y pow 2)) + ((-- &3) * (y pow 
4))))))))) + ((d pow 4) * ((&8 * (e1 * ((-- &16) + (&3 * (y pow 2))))) + (e3 
* (&128 + (((-- &8) * (y pow 2)) + (y pow 4)))))))))) + (((-- &4) * ((c pow 
4) * ((&2 * ((y pow 2) * ((e3 * (&384 + ((-- &72) * (y pow 2)))) + ((e4 * 
(((-- &16) + (y pow 2)) pow 2)) + ((-- &4) * (e1 * (&160 + (((-- &14) * (y 
pow 2)) + (y pow 4))))))))) + ((d pow 2) * ((&6 * (e3 * (&128 + (((-- &40) * 
(y pow 2)) + (&3 * (y pow 4)))))) + (e1 * ((-- &768) + ((&208 * (y pow 2)) + 
(((-- &20) * (y pow 4)) + (y pow 6)))))))))) + ((-- &4) * ((c pow 2) * ((&6 * 
((y pow 4) * ((&8 * (e3 * ((-- &16) + (&3 * (y pow 2))))) + (e1 * (&128 + 
(((-- &8) * (y pow 2)) + (y pow 4))))))) + (((-- &4) * ((d pow 2) * ((y pow 
2) * ((e4 * (((-- &16) + (y pow 2)) pow 2)) + ((&4 * (e1 * ((-- &32) + (((-- 
&2) * (y pow 2)) + (y pow 4))))) + (&4 * (e3 * ((-- &32) + (((-- &2) * (y pow 
2)) + (y pow 4)))))))))) + ((d pow 4) * ((&6 * (e1 * (&128 + (((-- &40) * (y 
pow 2)) + (&3 * (y pow 4)))))) + (e3 * ((-- &768) + ((&208 * (y pow 
2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))))))))) in
   term1 * term1 - #0.01 * term2 > &0) \/ 
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) \/ 
  (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;


(* END SECTION 2986512815 *)

(* SECTION 2065952723 *)

Parse_ineq.execute_cfsqp  
  {
id = "test 2065952723 A";
doc = "See explanation in 2065952723.  This is the branch when $a_2 \\le 15.99$.
";
tags = [Flypaper;Tex];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, #15.53);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (num_combo1 e1 e2 e3 a2 b2 c2 > &0) `;
};;

Parse_ineq.execute_cfsqp  
  {
id = "2065952723 C-2";
doc = "See explanation in 2065952723.  Used to replace extremal edges with minimal edges in a
    hexagon.";
(* 15.53 > 3.94^2, arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound.
    Lower via, arc[2,2,2.9] < arc[2hmid,2hmid,2] 2.  *)
tags = [Flypaper;Tex];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, (&2 * h0) pow 2);
  ((&2 / h0) pow 2, b2, &4);
  (#2.98 pow 2, c2, #15.53)
  ]
   ((num1 e1 e2 e3 a2 b2 c2 ) > &0) `;
};;


Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 B";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ( (x5 + x6 > #15.5) \/ (delta_x x1 x2 x3 x4 x5 x6 < &0))`;
};;

Parse_ineq.execute_cfsqp  {
id = "old test 2065952723 C";
doc = "";
tags = [Flypaper;Tex;Penalty (500.0,50000.0)];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (#15.99,a2,#16);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
((((&2 / &25) * (((-- &32) * ((a2 pow 3) * e1)) + ((&2 * ((a2 pow 4) * e1)) +  
((&32 * (a2 * ((b2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) * ((b2 pow 2) *  
e1))) + (((-- &64) * (a2 * (b2 * (c2 * e1)))) + ((&4 * ((a2 pow 2) * (b2 *  
(c2 * e1)))) + ((&32 * (a2 * ((c2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) *  
((c2 pow 2) * e1))) + ((&3200 * ((a2 pow 2) * (e1 pow 2))) + (((-- &200) *  
((a2 pow 3) * (e1 pow 2))) + ((&131072 * e2) + ((&8192 * (a2 * e2)) + ((&512  
* ((a2 pow 2) * e2)) + ((&48 * ((a2 pow 3) * e2)) + (((-- &24576) * (b2 *  
e2)) + (((-- &1536) * (a2 * (b2 * e2))) + (((-- &48) * ((a2 pow 2) * (b2 *  
e2))) + (((-- &6) * ((a2 pow 3) * (b2 * e2))) + ((&1536 * ((b2 pow 2) * e2))  
+ ((&16 * (a2 * ((b2 pow 2) * e2))) + ((&8 * ((a2 pow 2) * ((b2 pow 2) *  
e2))) + (((-- &16) * ((b2 pow 3) * e2)) + (((-- &2) * (a2 * ((b2 pow 3) *  
e2))) + (((-- &24576) * (c2 * e2)) + (((-- &1536) * (a2 * (c2 * e2))) + (((--  
&144) * ((a2 pow 2) * (c2 * e2))) + ((&3072 * (b2 * (c2 * e2))) + ((&224 *  
(a2 * (b2 * (c2 * e2)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 * e2)))) + (((--  
&144) * ((b2 pow 2) * (c2 * e2))) + ((&4 * (a2 * ((b2 pow 2) * (c2 * e2)))) +  
(((-- &1) * ((a2 pow 2) * ((b2 pow 2) * (c2 * e2)))) + ((&1536 * ((c2 pow 2)  
* e2)) + ((&144 * (a2 * ((c2 pow 2) * e2))) + (((-- &48) * (b2 * ((c2 pow 2)  
* e2))) + (((-- &18) * (a2 * (b2 * ((c2 pow 2) * e2)))) + (((-- &48) * ((c2  
pow 3) * e2)) + (((-- &3200) * ((a2 pow 2) * (e1 * e2))) + (((-- &3200) * (a2  
* (b2 * (e1 * e2)))) + ((&400 * ((a2 pow 2) * (b2 * (e1 * e2)))) + ((&3200 *  
(a2 * (c2 * (e1 * e2)))) + (((-- &204800) * (e2 pow 2)) + (((-- &12800) * (a2  
* (e2 pow 2))) + ((&25600 * (b2 * (e2 pow 2))) + ((&3200 * (a2 * (b2 * (e2  
pow 2)))) + (((-- &200) * (a2 * ((b2 pow 2) * (e2 pow 2)))) + ((&25600 * (c2  
* (e2 pow 2))) + (((-- &3200) * (b2 * (c2 * (e2 pow 2)))) + ((&131072 * e3) +  
((&8192 * (a2 * e3)) + ((&512 * ((a2 pow 2) * e3)) + ((&48 * ((a2 pow 3) *  
e3)) + (((-- &24576) * (b2 * e3)) + (((-- &1536) * (a2 * (b2 * e3))) + (((--  
&144) * ((a2 pow 2) * (b2 * e3))) + ((&1536 * ((b2 pow 2) * e3)) + ((&144 *  
(a2 * ((b2 pow 2) * e3))) + (((-- &48) * ((b2 pow 3) * e3)) + (((-- &24576) *  
(c2 * e3)) + (((-- &1536) * (a2 * (c2 * e3))) + (((-- &48) * ((a2 pow 2) *  
(c2 * e3))) + (((-- &6) * ((a2 pow 3) * (c2 * e3))) + ((&3072 * (b2 * (c2 *  
e3))) + ((&224 * (a2 * (b2 * (c2 * e3)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 *  
e3)))) + (((-- &48) * ((b2 pow 2) * (c2 * e3))) + (((-- &18) * (a2 * ((b2 pow  
2) * (c2 * e3)))) + ((&1536 * ((c2 pow 2) * e3)) + ((&16 * (a2 * ((c2 pow 2)  
* e3))) + ((&8 * ((a2 pow 2) * ((c2 pow 2) * e3))) + (((-- &144) * (b2 * ((c2  
pow 2) * e3))) + ((&4 * (a2 * (b2 * ((c2 pow 2) * e3)))) + (((-- &1) * ((a2  
pow 2) * (b2 * ((c2 pow 2) * e3)))) + (((-- &16) * ((c2 pow 3) * e3)) + (((--  
&2) * (a2 * ((c2 pow 3) * e3))) + (((-- &3200) * ((a2 pow 2) * (e1 *  
e3))) + ((&3200 * (a2 * (b2 * (e1 * e3)))) + (((-- &3200) * (a2 * (c2 * (e1 *  
e3)))) + ((&400 * ((a2 pow 2) * (c2 * (e1 * e3)))) + (((-- &409600) * (e2 *  
e3)) + (((-- &25600) * (a2 * (e2 * e3))) + ((&51200 * (b2 * (e2 * e3))) +  
((&3200 * (a2 * (b2 * (e2 * e3)))) + (((-- &3200) * ((b2 pow 2) * (e2 * e3)))  
+ ((&51200 * (c2 * (e2 * e3))) + ((&3200 * (a2 * (c2 * (e2 * e3)))) + (((--  
&400) * (a2 * (b2 * (c2 * (e2 * e3))))) + (((-- &3200) * ((c2 pow 2) * (e2 *  
e3))) + (((-- &204800) * (e3 pow 2)) + (((-- &12800) * (a2 * (e3 pow 2))) +  
((&25600 * (b2 * (e3 pow 2))) + ((&25600 * (c2 * (e3 pow 2))) + ((&3200 * (a2  
* (c2 * (e3 pow 2)))) + (((-- &3200) * (b2 * (c2 * (e3 pow 2)))) + ((-- &200) *  
(a2 * ((c2 pow 2) * (e3 pow  
2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
)))))))))))))))))))))) > &0) \/ (b2 + c2 < #16.0) \/ (b2 + c2 > #16.5))
`;
};;

Parse_ineq.execute_cfsqp  {
id = "test 2065952723";
doc = "
%See Mathematica numerical calculation.
% old id: eqn:gg'' calc:Lexell.
The derivatives have been computed in Mathematica and converted to
HOL format.  
This is a
  calculation of the sign of a second derivative to show that the
  function $\\tau$ does not have a interior local minimum as a function of the
  edge lengths.  It initially appears to depend on six variables, but
  the dependence on three of the variables is linear and is
  extremal at the endpoints.

Let
\\[ 
g(s;a,b,c,e_1,e_2,e_3) = \\sum_{i=1}^3 \\dih_i(2,2,2,a+s,b,c) e_i,
\\] 
where $\\dih_i$ is given by Definition~\\ref{def:tau}.
Let $\\Delta = \\Delta(4,4,4,a^2,b^2,c^2)$.
Let primes denote derivatives with respect to the variable $s$.
Assume that
$e_i\\in\\leftclosed1,1+\\sol_0/\\pi\\rightclosed$,  that
$a,b,c\\in\\leftclosed2/\\hm,4\\rightclosed$.
%We restrict $a$ further to $a\\le 3.8$.
Then
\\begin{equation}\\label{eqn:calc:Lexell}
(16-a^2) ^2 a^2(  \\Delta (g'(0;a,b,c,e_1,e_2,e_3))^2 
- 0.01\\Delta^{3/2}g''(0;a,b,c,e_1,e_2,e_3))\\ge 0.
\\end{equation}
(The factors of $\\Delta$ clear the denominator in
(\\ref{eqn:calc:Lexell}) to simplify the inequality to be proved.)
%Sum of squares methods may be the easiest way to prove this inequality near the
%minimum.
%The quantities deriv1 and deriv2 are for reference only.
Variables $e_i$ are linear and variables $a,b,c$ appear in even powers.
";
(*

*)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &4 pow 2);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (((num1 e1 e2 e3 a2 b2 c2 ) pow 2 - #0.01 * num2 e1 e2 e3 a2 b2 c2 > &0) \/ (a2 > #15.9))`;
};;

Parse_ineq.execute_cfsqp  
  {
id = "2065952723 C-1";
doc = "See explanation in 2065952723.  At this point we have a hexagon.
  This is the case when neither $v_4$ nor $v_5$ is flat. 
  ";
(* arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound *)
(* bug fixed on domain, 12/30/2010 *)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, (&2 * h0) pow 2);
  ( (&2 / h0) pow 2, b2, (&2 * h0) pow 2);
  (#3.4 pow 2, c2, #3.94 pow 2)
  ]
   (num1 e1 e2 e3 a2 b2 c2 > &0) `;
};;

Parse_ineq.execute_cfsqp  
  {
id = "2065952723 A";
doc = "See explanation in 2065952723.  This is the branch when $a_2 \\le 15.99$.
";
tags = [Flypaper;Tex];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, #15.99);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (num_combo1 e1 e2 e3 a2 b2 c2 > &0) `;
};;




Parse_ineq.execute_cfsqp  {
id = "test  not used";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ((delta_x x1 x2 x3 x4 x5 x6 < &0) \/ (x5 + x6 < #16.5))`;
};;

(* END SECTION 2065952723 *)

let make_WHW i j = 
  let r = match  i with
   0 -> [`&2`;`&2`;`&2`]
    |1 -> [`&2 * h0`;`&2`;`&2`]
    |2 -> [`&2`;`&2 * h0`;`&2`]
    |3 -> [`&2`;`&2`;`&2 * h0`]
    | _ ->  failwith "make_WHW" in
  let s = match j with
    0 -> [`&2`;`&2 * h0`]
    | 1 -> [`&2 * h0`;`&2`]
    | _ -> failwith "make_WHW j" in
  let t1 = r @ s in
  let t = map (fun x -> let v = mk_comb (`(pow)`,x) in mk_comb(v,`2`) ) t1 in
{
id = Printf.sprintf "PQFYWHW B'' %d %d" i j;
doc = "Pentagons with two flats 
 (that are not adjacent) satisfy the bound $D[4,1]$.  When $y_{15}=y_{45}=2$ and
  $y_{34} = 2h_0$, then the lines $\\{\\v_2,\\v_3\\}$ and $\\{\\v_4,\\v_5\\}$
are parallel and the dihedral inequality is sharp.
  % The sharp case is i=3, j=0.
The constants $d(5,0)<d(4,1)$.  We prove the stronger inequality with $d(4,1)$.  The case when $\\Delta<16$ is done as a separate calculation.
    ";
(* updated Dec 12, 2010 *)
tags = (if(i+j=0) then [Tex] else []) @ [Flypaper;Eps 1.0e-8;Penalty(1.0,2000.0)];
ineq = Ineq.mk_tplate templateB' t;
};;

map (fun (i,j) -> Ineq.add  (make_WHW i j)) [(0,0);(1,0);(2,0);(3,0);(0,1);(1,1);(2,1);(3,1)];;


testsplit_idq true 
(* Parse_ineq.execute_cfsqp *)
  {
id = "old test";
doc = "";
tags = [];
ineq = all_forall `ineq
  [
(#0.99999999999999988898,x1, #0.99999999999999988898);
(#1.0438699140229557027,x2, #1.0438699140229557027);
(#1.1316097420688666642,x3, #1.1316097420688666642);
(#15.937380962222855274,x4, #15.99000000000000199);
(#6.705845301083399157,x5, #6.7321743512219729411);
(#9.207105064247926407,x6, #9.2334341143865010793)
  ]
  (let alpha = &0 in 
   (num2 x1 x2 x3 x4 x5 x6 * (#1.0 - alpha) * (-- &1) + num1 x1 x2 x3 x4 x5 x6 * alpha  > &0))`;
};;


Parse_ineq.execute_cfsqp 
  {
id = "old test";
doc = "";
tags = [Penalty(50.0,5000.0)];
ineq = all_forall `ineq
  [
(#5.8959281250000064034,x1,#5.8959281250000064034);
(#4.0068859374999998835,x2,#4.0068859374999998835);
(#6.2035000000000062315,x3,#6.2035000000000062315);
(#4.0367249999999996746,x4,#4.0367249999999996746);
(#20.069634375000017457,x5,#20.069634375000017457);
(#1.000000000000000222,x6,#1.000000000000000222)
  ]   ( let x12 = &2 pow 2 in
          let x23 = &2 pow 2 in
          let x14 = (&2 * h0) pow 2 in
          let cos242 = -- #0.75 in
          delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 < &10 \/
          factor345_hexall_x cos242 x1 x2 x3 x4 x5 x6 > &0 \/
          eulerA_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 < #1.72)`;
};;




(*   *)



Parse_ineq.execute_cfsqp 
  {ineq =
    `!diag y1 y2 y3 y4 y5 y6.
         ineq
         [&2,y1,&2 * h0; &2,y2,&2 * h0; &2,y3,&2 * h0; &2,y4,&2 * h0; 
         &2,
         y5,
         &2 * h0; &2,y6,&2 * h0; &2 * h0,diag,#3.9985]
         (let y23 = &2 in
          let y56 = &2 in
          let y16 = &2 in
          let y34 = &2 in
          let y13 = edge_flat y2 y1 y3 y23 (&2) in
          let y46 = edge_flat y5 y4 y6 y56 (&2) in
          taum y1 y3 y4 y34 diag y13 +
          flat_term y2 +
          taum y4 y6 y1 y16 diag y46 +
          flat_term y5 >
          tame_table_d 6 0 \/
          dih_y y1 y3 y4 y34 diag y13 + dih_y y1 y6 y4 y46 diag y16 <
          dih_y y1 y2 y6 (&2 * h0) y16 (&2) \/
          dih_y y1 y3 y4 y34 diag y13 + dih_y y1 y6 y4 y46 diag y16 > pi \/
          dih_y y6 y1 y4 diag y46 y16 < dih_y y6 y1 y5 (&2 * h0) y56 y16 \/
          dih_y y3 y1 y4 diag y34 y13 < dih_y y3 y2 y4 (&2 * h0) y34 y23 \/
          delta_y y1 y3 y4 y34 diag y13 < &0 \/
          delta_y y4 y6 y1 y16 diag y13 < &0)`;
   id = "GYQVFXJ hexA 0";
   doc =
    "This inequality is the main hexagon inequality\n  with two flat nodes $\\v_2$ $\\v_5$, at opposite vertices of the hexagon.\n  This is an effective quadrilateral, with variables $y_1,\\ldots,y_6$ and diagonal\n  $y_{14}$.\n  Some reductions are used beyond those mentioned in the flypaper.\n  \\begin{enumerate}\n  \\item $y_{34}=y_{16}=2$.\n  \\item if the diag $y_{14}$ is greater than $3.7$, \n      then $y_{12}=y_{23}=y_{45}=y_{56}=2$.   \n  \\item $y_{14}\\le 3.9985$.\n  \\item By symmetry, we can assume that $y_{12}\\le y_{56}$.\n  \\end{enumerate}\n  The reductions are justified by the preceding calculations.\n  There are three cases, depending on whether the edges at $\\v_2$ and $\\v_5$\n  are as short or as long as possible.\n  ";
   tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert]};;

Parse_ineq.execute_cfsqp 
  {ineq =
    `!diag y1 y2 y3 y4.
         ineq
         [&2,y1,&2 * h0; &2,y2,&2 * h0; &2,y3,&2 * h0; &2,y4,&2 * h0; 
          &2 * h0,diag,#3.75]
         (let y23 = &2 in
          let y34 = &2 in
          let y13 = edge_flat y2 y1 y3 y23 (&2) in
         (( taum y1 y3 y4 y34 diag y13 +
          flat_term y2  >
          (tame_table_d 6 0) / &2 ) \/ (dih_y y1 y2 y4 (&2 * h0) diag (&2) > dih_y y1 y3 y4 y34 diag y13)))`;
   id = "GYQVFXJ hexA 0 test1";
   doc =
    " ";
   tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert]};;

(* SECTION PROIQUZ *)

Parse_ineq.execute_cfsqp  
  {
ineq =  all_forall `ineq
  [
(&2 pow 2,x1,(&2 *h0) pow 2);
(&2 pow 2,x2,(&2 * h0) pow 2);
(&2 pow 2,x3,(&2 * h0) pow 2);
(&2 pow 2,x4,(&2 *h0) pow 2);
((&2 * h0) pow 2,x5,(&4 * h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &2 pow 2 in
    let x23 = x12 in
    let x14 = &2 pow 2 in
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > &60) \/ 
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > #2.425) \/
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < #2.274))`;
   id = "old PROIQUZ hexall 5A1a-old";
   doc =    "split a hex along a shortish diagonal.   Flat at node 2.  Case $y_5 + 0.1 \\le y_3+y_4$.";
   tags = [Tex; Flypaper; Penalty (2000., 15000.);Widthcutoff 0.01]
  (* 
     This case treats Delta bounded away from 0.
     By the bounds [2.274,2.425] on dihedral, we have delta4 <0.
   The upper bound is the trivial triangle inequality bound: y5 <= y3  + y4 <= 4 h0.  
    This shows that we can apply 206...A1  arc[2,2,Sqrt[15.53]] < 2.79. *)
};;



Parse_ineq.execute_cfsqp  
  {
ineq =  all_forall `ineq
  [
(&2 pow 2,x1,(&2 *h0) pow 2);
(&2 pow 2,x2,(&2 * h0) pow 2);
(&2 pow 2,x3,(&2 * h0) pow 2);
(&2 pow 2,x4,(&2 *h0) pow 2);
((&2 * h0) pow 2,x5,(&4 * h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &2 pow 2 in
    let x23 = x12 in
    let x14 = &2 pow 2 in
      (arclength_x_345 x1 x2 x3 x4 x5 x6 < #2.79) \/
	 (sqrt(x5) + #0.1 >  sqrt(x3) + sqrt(x4)) \/ 
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < &10) \/ 
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > #2.425))`;
   id = "old PROIQUZ hexall 5A1b";
   doc =    "split a hex along a shortish diagonal.   Flat at node 2.  Case $y_5 + 0.1 \\le y_3+y_4$.";
   tags = [Tex; Flypaper; Penalty (2000., 15000.);Widthcutoff 0.01]
  (* 
     This case treats Delta bounded away from 0.
   The upper bound is the trivial triangle inequality bound: y5 <= y3  + y4 <= 4 h0.  
    This shows that we can apply 206...A1  arc[2,2,Sqrt[15.53]] < 2.79. *)
};;

Parse_ineq.execute_cfsqp  
  {
ineq =  all_forall `ineq
  [
(&2 pow 2,x1,(&2 *h0) pow 2);
(&2 pow 2,x2,(&2 * h0) pow 2);
(&2 pow 2,x3,(&2 * h0) pow 2);
(&2 pow 2,x4,(&2 *h0) pow 2);
((&2 * h0) pow 2,x5,(&4 * h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &2 pow 2 in
    let x23 = x12 in
    let x14 = &2 pow 2 in
    
	 (sqrt(x5) + #0.1 >  sqrt(x3) + sqrt(x4)) \/ 
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < &10) \/ 
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > #2.425))`;
   id = "old old PROIQUZ hexall 5A1b";
   doc =    "split a hex along a shortish diagonal.   Flat at node 2.  Case $y_5 + 0.1 \\le y_3+y_4$.";
   tags = [Tex; Flypaper; Penalty (2000., 15000.);Widthcutoff 0.01]
  (* 
     This case treats Delta bounded away from 0.
   The upper bound is the trivial triangle inequality bound: y5 <= y3  + y4 <= 4 h0.  
    This shows that we can apply 206...A1  arc[2,2,Sqrt[15.53]] < 2.79. *)
};;




  {
ineq =  all_forall `ineq
  [
(&2 pow 2,x1,(&2 *h0) pow 2);
(&2 pow 2,x2,(&2 * h0) pow 2);
(&2 pow 2,x3,(&2 * h0) pow 2);
(&2 pow 2,x4,(&2 *h0) pow 2);
((&2 * h0) pow 2,x5,(&4 * h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &2 pow 2 in
    let x23 = x12 in
    let x14 = &2 pow 2 in
      (arclength_x_345 x1 x2 x3 x4 x5 x6 < #2.79) \/
	 (sqrt(x5) + #0.1 >  sqrt(x3) + sqrt(x4)) \/ 
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < &10) \/ 
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > #2.425))`;
   id = "old PROIQUZ hexall 5A1a";
   doc =    "split a hex along a shortish diagonal.   Flat at node 2.  Case $y_5 + 0.1 \\le y_3+y_4$.";
   tags = [Tex; Flypaper; Penalty (2000., 15000.);Widthcutoff 0.01]
  (* 
     This case treats Delta bounded away from 0.
   The upper bound is the trivial triangle inequality bound: y5 <= y3  + y4 <= 4 h0.   *)
};;


let PROQUZ_hexall_5A1_ineq = `\b_loc b2425 b24. 
`ineq
  [
(&2 pow 2,x1,(&2 *h0) pow 2);
(&2 pow 2,x2,(&2 * h0) pow 2);
(&2 pow 2,x3,(&2 * h0) pow 2);
(&2 pow 2,x4,(&2 *h0) pow 2);
((&2 * h0) pow 2,x5,(&4 * h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &2 pow 2 in
    let x23 = x12 in
    let x14 = &2 pow 2 in
	 (sqrt(x5) + #0.1 >  sqrt(x3) + sqrt(x4)) \/ 
	 (sqrt(x5) + #0.1 <  sqrt(x3) + sqrt(x4) /\ b_loc) \/ 
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < &10) \/ 
       (taum_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 > tame_table_d 6 0 / &2) \/
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > #2.425) \/ 
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < #2.425 /\ b2425) \/ 
      (dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 > &0 ) \/
      (dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 < &0 /\ b24 )
)`;;

let  PROIQUZ_hexall_5A1_idq t i =  {
  ineq =  t;
   id = Printf.sprintf "old PROIQUZ hexall 5A1 %d" i;
   doc =    "split a hex along a shortish diagonal.   Flat at node 2.  Case $y_5 + 0.1 \\le y_3+y_4$.";
   tags = [Tex; Flypaper; Penalty (5., 500.);Widthcutoff 0.01]
  (* 
     This case treats Delta bounded away from 0.
   The upper bound is the trivial triangle inequality bound: y5 <= y3  + y4 <= 4 h0.   *)
};;



Parse_ineq.execute_cfsqp 
  {
ineq =  all_forall `ineq
  [
(&2,y1,&2 *h0);
(&2,y2,&2 * h0);
(&2,y3,&2 * h0);
(&2,y4,&2 *h0);
(&2 * h0,y34,#3.3);
(&2,y12,&2*h0);
(&2,y14,&2 * h0)
  ]
  (
    let y23 = y12 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
      (delta4_y y1 y3 y4 y34 y14 y13 > &0) \/ (delta_y y1 y3 y4 y34 y14 y13 > &10) \/
            (arclength y3 y4 y34 > #2.42) 
      )`;
   id = "old PROIQUZ hexall 1-d";
   doc =    "split a hex along a shortish diagonal.   Flat at y2.  Old version of hexall 1...";
   tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert;Deprecated]
};;


Parse_ineq.execute_cfsqp 
  {
ineq =  all_forall `ineq
  [
(&2,y1,&2 *h0);
(&2,y2,&2 * h0);
(&2,y3,&2 * h0);
(&2,y4,&2 *h0);
(&2,y12,&2*h0);
(&2 * h0,y34,#4.72);
(&2,y14,&2 * h0)
  ]
  (
    let y23 = y12 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
     (delta_y y1 y3 y4 y34 y14 y13 > &10) \/
     (delta_y y1 y3 y4 y34 y14 y13 < &0) \/
    (delta4_y y1 y3 y4 y34 y14 y13  < &10) \/
      (upper_dih_y y1 y3 y4 y34 y14 y13 < dih_y y1 y2 y4 (&2 * h0) y14 y12) \/
            (arclength y3 y4 y34 > #2.42) 
      )`;
   id = "old PROIQUZ hexall 1-a";
   doc =    "split a hex along a shortish diagonal.   Flat at y2.  hexall 1...";
   tags = [Tex; Flypaper; Penalty (500., 8000.); Xconvert;Deprecated]
};;

let euler_ap = new_definition `euler_ap y1  y2 y3 y4 y5 y6 = 
  y1*y2*y3 + y1*(y2*y2 + y3*y3 - y4*y4)/ &2 + y2*(y1*y1 + y3*y3 - y5*y5)/ &2 + 
   y3*(y1*y1 + y2*y2 - y6*y6)/ &2`;;

Parse_ineq.execute_cfsqp 
  {
ineq =  all_forall `ineq
  [
(&2,y1,&2 *h0);
(&2,y2,&2 * h0);
(&2,y3,&2 * h0);
(&2,y4,&2 *h0);
(&2,y12,&2*h0);
(&2 * h0,y34,#4.72);
(&2,y14,&2 * h0)
  ]
  (
    let y23 = y12 in
    let cos242 = -- #0.75 in
    let y13 = edge_flat y2 y1 y3       y23 y12 in
     (delta_y y1 y3 y4 y34 y14 y13 > &10) \/
     (delta_y y1 y3 y4 y34 y14 y13 < &0) \/
     (delta4_y y1 y3 y4 y34 y14 y13  >  &10) \/
     (euler_ap y1 y3 y4 y34 y14 y13 < &0) \/
            (y34 pow 2 > y3 pow 2 + y4 pow 2 - &2 * y3 * y4 * cos242)
      )`;
   id = "old PROIQUZ hexall 1-b";
   doc =    "split a hex along a shortish diagonal.   Flat at y2.  ";
   (*  // upper approximation cos(2.42) *)
   tags = [Tex; Flypaper;Penalty (5., 5000.);  Xconvert;Deprecated]
   (* If euler < 0, and a flat then tau(quad) >= tau(tri) + flatTerm[2] 
       >= (sol+pi) -sol0
      >= 2pi - sol0 >> tameTableD[6,0]/2, and the estimate holds *)
};;

let dih1_hexall_x = new_definition `dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0) x23 x12)`;;





1;;
(*  (dih_y y1 y3 y4 y34 y14 y13 < dih_y y1 y2 y4 (&2 * h0) y14 y12)  *)

for y14=0 to 1 do 
for y2 = 0 to 1 do
for i = 0 to 2 do
   Parse_ineq.execute_cfsqp (make_hexall y14 y2 i) done done done;;



  {
ineq =  all_forall `ineq
  [
(&2 pow 2,x1,(&2 *h0) pow 2);
(&2 pow 2,x2,(&2 * h0) pow 2);
(&2 pow 2,x3,(&2 * h0) pow 2);
(&2 pow 2,x4,(&2 *h0) pow 2);
((&2 * h0) pow 2,x5,(&4 * h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &2 pow 2 in
    let x23 = x12 in
    let x14 = &2 pow 2 in
       (taum_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 > tame_table_d 6 0 / &2) \/
       (dih1_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > #2.425) \/ 
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < &0) \/ 
 (sqrt(x5) + #0.1 >  sqrt(x3) + sqrt(x4)) \/ 
      (dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 > &0 ))`;
   id = "old PROIQUZ hexall 5A";
   doc =    "split a hex along a shortish diagonal.   Flat at node 2.  Case $y_5 + 0.1 \\le y_3+y_4$.";
   tags = [Tex; Flypaper; Penalty (5., 500.)]
  (* The upper bound is the trivial triangle inequality bound: y5 <= y3  + y4 <= 4 h0.   *)
};;


Parse_ineq.execute_cfsqp
  {
ineq =  all_forall `ineq
  [
(&2 pow 2,x1,(&2 *h0) pow 2);
(&2 pow 2,x2,(&2 * h0) pow 2);
(&2 pow 2,x3,(&2 * h0) pow 2);
(&2 pow 2,x4,(&2 *h0) pow 2);
((&2 * h0) pow 2,x5,(&4 * h0) pow 2);
(&1,x6,&1)
  ]
  (
    let x12 = &2 pow 2 in
    let x23 = x12 in
    let x14 = &2 pow 2 in
 ( #0.871 * delta4_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6 <
             sqrt (&4 * x1 * delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6) \/
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > &10) \/ 
       (delta_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  < &0) \/ 
       (delta4_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 x6  > &10)
	)
)`;
   id = "old PROIQUZ hexall 5AZ";
   doc =    "split a hex along a shortish diagonal.   Flat at node 2.  Case $y_5 + 0.1 \\le y_3+y_4$.";
   tags = [Tex; Flypaper; Penalty (50., 5000.)]
  (* The upper bound is the trivial triangle inequality bound: y5 <= y3  + y4 <= 4 h0.   *)
};;




Parse_ineq.execute_cfsqp 
  {
    ineq =   all_forall `ineq
      [
	(&2,y1,&2 *h0);
	(&2,y3,&2 * h0);
	(&2,y4,&2 * h0);
	(#2.52,y34,&4);
	(&2,y13,#4.05)
      ]
      (
	let y12 = &2 in
        let y2  = &2 in
	let y23 = &2 in
	let y14 = &2 in
	  (( arclength y3 y4 y34 < &0) \/
	     (dih_y y1 y3 y4 y34 y14 y13 > #2.588) \/ 
	     (arclength y1 y3 y13 > arclength y1 y2 y12 + arclength y2 y3 y23)  ))`;
    id = "hexall test5";
    doc =    "";
    tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert]
};;

Parse_ineq.execute_cfsqp 
  {
    ineq =   all_forall `ineq
      [
	(&2,y1,&2 *h0);
	(&2,y3,&2 * h0);
	(&2,y4,&2 * h0);
	(#2.52,y34,&4);
	(&2,y13,#4.05)
      ]
      (
	let y12 = &2 in
        let y2  = &2 in
	let y23 = &2 in
	let y14 = &2 in
	  (( arclength y3 y4 y34 < #2.57573) \/
	     (dih_y y1 y3 y4 y34 y14 y13 > #2.4776) \/ 
	     (arclength y1 y3 y13 > arclength y1 y2 y12 + arclength y2 y3 y23)  ))`;
    id = "hexall test6";
    doc =    "";
    tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert]
};;


(* end of hex analysis PROIQUZ *)




(* deprecated *)
let sql = new_definition `sql x = 
  if (x < &1)
  then &3/ &8 + (&3*x)/ &4 - x pow 2 / &8 + 
    (&1 - x) pow 3 * ((&12/ &10) * x * (&1 - x) - &4/ &10)
  else sqrt x`;;

(* deprecated (* upper bound when d4 < 0 *)  *)
let upper_dih_x_large = new_definition `upper_dih_x_large x1 x2 x3 x4 x5 x6 =
  (let d = delta_x x1 x2 x3 x4 x5 x6 in
  let d4 = delta_x4 x1 x2 x3 x4 x5 x6 in (
      if (d < &1) then
   pi +  &2 * sqrt x1 * sql d * matan (&4 * x1 * d / (d4 pow 2) ) / d4
      else dih_x x1 x2 x3 x4 x5 x6))`;;



(* deprecated *)
let upper_dih_y_large = new_definition `upper_dih_y_large = y_of_x upper_dih_x_large`;;

(* deprecated *)
let vol_xl = new_definition 
  `vol_xl x1 x2 x3 x4 x5 x6 = sql (delta_x x1 x2 x3 x4 x5 x6) / &12`;;

let vol_yl = new_definition `vol_yl = y_of_x vol_xl`;;

let vol3rl = new_definition `vol3rl y1 y2 y3 r = vol_yl r r r y1 y2 y3`;;

let sol_yu_large = new_definition `sol_yu_large y1 y2 y3 y4 y5 y6 =
         upper_dih_y y1 y2 y3 y4 y5 y6 +
         upper_dih_y y2 y3 y1 y5 y6 y4 +
         upper_dih_y_large y3 y1 y2 y6 y4 y5 - pi`;;

let vol3fu_large = new_definition ` vol3fu_large y1 y2 y3 r f =
         (&2 * mm1 / pi) *
         (sol_yu_large y1 y2 r r r y3 + sol_yu_large y2 y3 r r r y1 + sol_yu_large y3 y1 r r r y2) -
         (&8 * mm2 / pi) *
         (f (y1 / &2) * upper_dih_y y1 y2 r r r y3 +
          f (y2 / &2) * upper_dih_y y2 y3 r r r y1 +
          f (y3 / &2) * upper_dih_y y3 y1 r r r y2)`;;

let gamma3fl_large = new_definition `gamma3fl_large y1 y2 y3 r f = vol3rl y1 y2 y3 r - vol3fu_large y1 y2 y3 r f`;;



