

flyspeck_needs "nonlinear/ineq.hl";;





let derived = `ineq
	      [ 
		(#2.0,y1,sqrt8);
		(#2.0,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;

let ineqA = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(&2 * hplus,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      (
                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;;

let ineqB = `ineq
	      [ 
		(#2.0,y1,&2 * hminus);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;


let ineqC = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;
let ineqD = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.01,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;
let ineqE = `ineq
	      [ 
		(&2 * hplus,y1,#2.8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;

let ineqF = `ineq
	      [ 
		(#2.8,y1,sqrt8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(#2.8,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0)   \/    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2))`;;

let lemma = 
 mk_imp (( end_itlist (curry mk_conj) [
	    ineqA;ineqB;ineqC;ineqD;ineqE;ineqF]),derived);;

g(lemma);;



let all_forall = Sphere.all_forall;;


(* still need pent cases with 2 flats *)


let tt = Ineq.getprefix "test-ZTGIJCF23";;
let tts = Parse_ineq.nub (map (fun t -> t.id) tt);;
List.length tts;;
let cfsqp s = Parse_ineq.execute_cfsqp  (hd(Ineq.getexact  s));;
map cfsqp tts;;

cfsqp "test QITNPEA  5400790175 b"  ;;
cfsqp "ZHPXLTX 9620775909 3,1,0 flat B";;
cfsqp "testA";;



Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 A short";
doc = "See explanation in 2065952723";
(* arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound *)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &2 * h0);
  ((&2 / h0) pow 2, b2, &2 * h0);
  ((&2 / h0) pow 2, c2, #3.94 pow 2)
  ]
   ((num1 e1 e2 e3 a2 b2 c2 ) > &0) `;
};;

 



Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 B";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ( (x5 + x6 > #15.5) \/ (delta_x x1 x2 x3 x4 x5 x6 < &0))`;
};;

Parse_ineq.execute_cfsqp  {
id = "old test 2065952723 C";
doc = "";
tags = [Flypaper;Tex;Penalty (500.0,50000.0)];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (#15.99,a2,#16);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
((((&2 / &25) * (((-- &32) * ((a2 pow 3) * e1)) + ((&2 * ((a2 pow 4) * e1)) +  
((&32 * (a2 * ((b2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) * ((b2 pow 2) *  
e1))) + (((-- &64) * (a2 * (b2 * (c2 * e1)))) + ((&4 * ((a2 pow 2) * (b2 *  
(c2 * e1)))) + ((&32 * (a2 * ((c2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) *  
((c2 pow 2) * e1))) + ((&3200 * ((a2 pow 2) * (e1 pow 2))) + (((-- &200) *  
((a2 pow 3) * (e1 pow 2))) + ((&131072 * e2) + ((&8192 * (a2 * e2)) + ((&512  
* ((a2 pow 2) * e2)) + ((&48 * ((a2 pow 3) * e2)) + (((-- &24576) * (b2 *  
e2)) + (((-- &1536) * (a2 * (b2 * e2))) + (((-- &48) * ((a2 pow 2) * (b2 *  
e2))) + (((-- &6) * ((a2 pow 3) * (b2 * e2))) + ((&1536 * ((b2 pow 2) * e2))  
+ ((&16 * (a2 * ((b2 pow 2) * e2))) + ((&8 * ((a2 pow 2) * ((b2 pow 2) *  
e2))) + (((-- &16) * ((b2 pow 3) * e2)) + (((-- &2) * (a2 * ((b2 pow 3) *  
e2))) + (((-- &24576) * (c2 * e2)) + (((-- &1536) * (a2 * (c2 * e2))) + (((--  
&144) * ((a2 pow 2) * (c2 * e2))) + ((&3072 * (b2 * (c2 * e2))) + ((&224 *  
(a2 * (b2 * (c2 * e2)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 * e2)))) + (((--  
&144) * ((b2 pow 2) * (c2 * e2))) + ((&4 * (a2 * ((b2 pow 2) * (c2 * e2)))) +  
(((-- &1) * ((a2 pow 2) * ((b2 pow 2) * (c2 * e2)))) + ((&1536 * ((c2 pow 2)  
* e2)) + ((&144 * (a2 * ((c2 pow 2) * e2))) + (((-- &48) * (b2 * ((c2 pow 2)  
* e2))) + (((-- &18) * (a2 * (b2 * ((c2 pow 2) * e2)))) + (((-- &48) * ((c2  
pow 3) * e2)) + (((-- &3200) * ((a2 pow 2) * (e1 * e2))) + (((-- &3200) * (a2  
* (b2 * (e1 * e2)))) + ((&400 * ((a2 pow 2) * (b2 * (e1 * e2)))) + ((&3200 *  
(a2 * (c2 * (e1 * e2)))) + (((-- &204800) * (e2 pow 2)) + (((-- &12800) * (a2  
* (e2 pow 2))) + ((&25600 * (b2 * (e2 pow 2))) + ((&3200 * (a2 * (b2 * (e2  
pow 2)))) + (((-- &200) * (a2 * ((b2 pow 2) * (e2 pow 2)))) + ((&25600 * (c2  
* (e2 pow 2))) + (((-- &3200) * (b2 * (c2 * (e2 pow 2)))) + ((&131072 * e3) +  
((&8192 * (a2 * e3)) + ((&512 * ((a2 pow 2) * e3)) + ((&48 * ((a2 pow 3) *  
e3)) + (((-- &24576) * (b2 * e3)) + (((-- &1536) * (a2 * (b2 * e3))) + (((--  
&144) * ((a2 pow 2) * (b2 * e3))) + ((&1536 * ((b2 pow 2) * e3)) + ((&144 *  
(a2 * ((b2 pow 2) * e3))) + (((-- &48) * ((b2 pow 3) * e3)) + (((-- &24576) *  
(c2 * e3)) + (((-- &1536) * (a2 * (c2 * e3))) + (((-- &48) * ((a2 pow 2) *  
(c2 * e3))) + (((-- &6) * ((a2 pow 3) * (c2 * e3))) + ((&3072 * (b2 * (c2 *  
e3))) + ((&224 * (a2 * (b2 * (c2 * e3)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 *  
e3)))) + (((-- &48) * ((b2 pow 2) * (c2 * e3))) + (((-- &18) * (a2 * ((b2 pow  
2) * (c2 * e3)))) + ((&1536 * ((c2 pow 2) * e3)) + ((&16 * (a2 * ((c2 pow 2)  
* e3))) + ((&8 * ((a2 pow 2) * ((c2 pow 2) * e3))) + (((-- &144) * (b2 * ((c2  
pow 2) * e3))) + ((&4 * (a2 * (b2 * ((c2 pow 2) * e3)))) + (((-- &1) * ((a2  
pow 2) * (b2 * ((c2 pow 2) * e3)))) + (((-- &16) * ((c2 pow 3) * e3)) + (((--  
&2) * (a2 * ((c2 pow 3) * e3))) + (((-- &3200) * ((a2 pow 2) * (e1 *  
e3))) + ((&3200 * (a2 * (b2 * (e1 * e3)))) + (((-- &3200) * (a2 * (c2 * (e1 *  
e3)))) + ((&400 * ((a2 pow 2) * (c2 * (e1 * e3)))) + (((-- &409600) * (e2 *  
e3)) + (((-- &25600) * (a2 * (e2 * e3))) + ((&51200 * (b2 * (e2 * e3))) +  
((&3200 * (a2 * (b2 * (e2 * e3)))) + (((-- &3200) * ((b2 pow 2) * (e2 * e3)))  
+ ((&51200 * (c2 * (e2 * e3))) + ((&3200 * (a2 * (c2 * (e2 * e3)))) + (((--  
&400) * (a2 * (b2 * (c2 * (e2 * e3))))) + (((-- &3200) * ((c2 pow 2) * (e2 *  
e3))) + (((-- &204800) * (e3 pow 2)) + (((-- &12800) * (a2 * (e3 pow 2))) +  
((&25600 * (b2 * (e3 pow 2))) + ((&25600 * (c2 * (e3 pow 2))) + ((&3200 * (a2  
* (c2 * (e3 pow 2)))) + (((-- &3200) * (b2 * (c2 * (e3 pow 2)))) + ((-- &200) *  
(a2 * ((c2 pow 2) * (e3 pow  
2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
)))))))))))))))))))))) > &0) \/ (b2 + c2 < #16.0) \/ (b2 + c2 > #16.5))
`;
};;

Parse_ineq.execute_cfsqp  {
id = "test 2065952723";
doc = "
%See Mathematica numerical calculation.
% old id: eqn:gg'' calc:Lexell.
The derivatives have been computed in Mathematica and converted to
HOL format.  
This is a
  calculation of the sign of a second derivative to show that the
  function $\\tau$ does not have a interior local minimum as a function of the
  edge lengths.  It initially appears to depend on six variables, but
  the dependence on three of the variables is linear and is
  extremal at the endpoints.

Let
\\[ 
g(s;a,b,c,e_1,e_2,e_3) = \\sum_{i=1}^3 \\dih_i(2,2,2,a+s,b,c) e_i,
\\] 
where $\\dih_i$ is given by Definition~\\ref{def:tau}.
Let $\\Delta = \\Delta(4,4,4,a^2,b^2,c^2)$.
Let primes denote derivatives with respect to the variable $s$.
Assume that
$e_i\\in\\leftclosed1,1+\\sol_0/\\pi\\rightclosed$,  that
$a,b,c\\in\\leftclosed2/\\hm,4\\rightclosed$.
%We restrict $a$ further to $a\\le 3.8$.
Then
\\begin{equation}\\label{eqn:calc:Lexell}
(16-a^2) ^2 a^2(  \\Delta (g'(0;a,b,c,e_1,e_2,e_3))^2 
- 0.01\\Delta^{3/2}g''(0;a,b,c,e_1,e_2,e_3))\\ge 0.
\\end{equation}
(The factors of $\\Delta$ clear the denominator in
(\\ref{eqn:calc:Lexell}) to simplify the inequality to be proved.)
%Sum of squares methods may be the easiest way to prove this inequality near the
%minimum.
%The quantities deriv1 and deriv2 are for reference only.
Variables $e_i$ are linear and variables $a,b,c$ appear in even powers.
";
(*

*)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &4 pow 2);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (((num1 e1 e2 e3 a2 b2 c2 ) pow 2 - #0.01 * num2 e1 e2 e3 a2 b2 c2 > &0) \/ (a2 > #15.9))`;
};;


Parse_ineq.execute_cfsqp  {
id = "test  not used";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ((delta_x x1 x2 x3 x4 x5 x6 < &0) \/ (x5 + x6 < #16.5))`;
};;


Parse_ineq.execute_cfsqp
  {
id = "2986512815 t0";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
((num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) > &10)  \/ 
(num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) < --  &10)  \/ 
  (num2 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y) pow 3  * (y * (&16 - y pow 2)) pow 2) +
 num2 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y) pow 3  * (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &1) \/ 
  (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;

Parse_ineq.execute_cfsqp
  {
id = "2986512815 t1";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&0,t,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
( (num1 e1 e2 e3 y b a  / (  y * (&16 - y pow 2)) +
 t * num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) > &10)  \/ 
(num1 e1 e2 e3 y b a  / (y * (&16 - y pow 2)) +
 t* num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) < --  &10)  \/ 
  (num2 e1 e2 e3 y b a  / (  (y * (&16 - y pow 2)) pow 2) +
 t pow 3 * num2 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y) pow 3  * (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) a b y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &1)) `;
};;


Parse_ineq.execute_cfsqp
  {
id = "2986512815 t2";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
   (&0,t,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
((t * num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) > &10)  \/ 
(t * num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) < --  &10)  \/ 
  (t pow 3 * num2 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y) pow 3  * (y * (&16 - y pow 2)) pow 2) +
 num2 e4 e2 e3 y c d  / ( (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &1) \/ 
  (delta_y (&2) (&2) (&2) c d y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) )`;
};;

Parse_ineq.execute_cfsqp ;;

let make_WHW i j = 
  let r = match  i with
   0 -> [`&2`;`&2`;`&2`]
    |1 -> [`&2 * h0`;`&2`;`&2`]
    |2 -> [`&2`;`&2 * h0`;`&2`]
    |3 -> [`&2`;`&2`;`&2 * h0`]
    | _ ->  failwith "make_WHW" in
  let s = match j with
    0 -> [`&2`;`&2 * h0`]
    | 1 -> [`&2 * h0`;`&2`]
    | _ -> failwith "make_WHW j" in
  let t1 = r @ s in
  let t = map (fun x -> let v = mk_comb (`(pow)`,x) in mk_comb(v,`2`) ) t1 in
{
id = Printf.sprintf "PQFYWHW B'' %d %d" i j;
doc = "Pentagons with two flats 
 (that are not adjacent) satisfy the bound $D[4,1]$.  When $y_{15}=y_{45}=2$ and
  $y_{34} = 2h_0$, then the lines $\\{\\v_2,\\v_3\\}$ and $\\{\\v_4,\\v_5\\}$
are parallel and the dihedral inequality is sharp.
  % The sharp case is i=3, j=0.
The constants $d(5,0)<d(4,1)$.  We prove the stronger inequality with $d(4,1)$.  The case when $\\Delta<16$ is done as a separate calculation.
    ";
(* updated Dec 12, 2010 *)
tags = (if(i+j=0) then [Tex] else []) @ [Flypaper;Eps 1.0e-8;Penalty(1.0,2000.0)];
ineq = Ineq.mk_tplate templateB' t;
};;

map (fun (i,j) -> Ineq.add  (make_WHW i j)) [(0,0);(1,0);(2,0);(3,0);(0,1);(1,1);(2,1);(3,1)];;



Parse_ineq
 \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
  (delta_y y7 y2 y3 y4 y8 y9 < &0)
;;

Parse_ineq.execute_cfsqp 
  {
id = "2065952723 A test";
doc = "See explanation in 2065952723.  This is the branch when $a_2 \\le 15.99$.
";
tags = [Flypaper;Tex];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, #15.99);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (num1 e1 e2 e3 a2 b2 c2 > &0) `;
};;


{
id = "2986512815 u1 test";
doc = "The second derivative is always negative (with respect to the diagonal $a$) for each
simplex so the second derivative on the quad cluster  is negative. The inequality is
linear in the variables $e_i$.  Deprecated: bad variables should square $a,b,c$. ";
tags= [Tex;Cfsqp;Flypaper;Deprecated];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&4, a2, #3.2 pow 2);
    ((&2 / h0) pow 2, b2, #4.0 pow 2);
    ((&2 / h0) pow 2, c2, (&2 * h0) pow 2)
 ]
( num2 e1 e2 e3 a2 b2 c2    < &0)`;
};;

Parse_ineq.execute_cfsqp {
  id = "6944699408 a reduced";
  doc="We can use dimension reduction methods to reduce the number of variables.
  This is the reduced version that occurs when the cross diagonal is minimal.
   This reduction allows nonconvex deformations." ;
  tags = [Cfsqp;Xconvert;Tex];
  ineq =  all_forall `ineq [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,sqrt8);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 + #0.972 * dih_y y1 y2 y3 y4 y5 y6 -  #1.707 / &2 > #0.0)`;
};;

Parse_ineq.execute_cfsqp {
  id = "testxx 7043724150 a";
  doc="We can use dimension reduction methods to reduce the number of variables.";
  tags = [Cfsqp;Tablelp;Lp;Xconvert;Tex;Dim_red_backsym;Quad_cluster 0.001];
  ineq =all_forall `ineq (dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9)
((delta_y y7 y2 y3 y4 y8 y9 > #0.0) \/
  (delta_y y4 y9 y6 sqrt8   y5 y8 < &0))`;
};;

Ineq.add
 {
  id = 
  doc="We can use dimension reduction methods to reduce the number of variables.
   This is the reduced version that occurs when the cross diagonal is minimal.";
(*
   The bounds on the four vertices $\\v_1,\\ldots,\\v_4$ gives
   the top simplex bound 
   \\[
   y_4 \\le \\op{edge\\_flat}(2h_0,2h_0,2h_0,2h_0,2h_0) < 4.37
   \\
*)
  tags = [Cfsqp;Xconvert;Tex;];
  ineq =all_forall `ineq [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 + #4.72 * dih_y y1 y2 y3 y4 y5 y6 - #6.248 / &2 > #0.0)`;
};;

Ineq.add
 {
  id = 
  doc="We can use dimension reduction methods to reduce the number of variables.
  This is the reduced version that occurs when the cross diagonal is minimal.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq =  all_forall `ineq [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 + #0.972 * dih_y y1 y2 y3 y4 y5 y6 -  #1.707 / &2 > #0.0)`;
};;


Ineq.add
 {
  id = 
  doc="We can use dimension reduction methods to reduce the number of variables.
  This is the reduced version that occurs when the cross diagonal is minimal.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 + 
   #0.7573 *dih_y y1 y2 y3 y4 y5 y6 - #1.433 / &2 > #0.0)`;
};;

Ineq.add
 {
  id = "3862621143 reduced";
  doc= "We can use dimension reduction methods to reduce the number of variables.
  This is the reduced version that occurs when the cross diagonal is minimal.";
  tags = [Cfsqp;Tex;Xconvert];
  ineq = all_forall `ineq  [
    (&2,y1,&2 * h0);
    (&2,y2,&2 * h0);
    (&2,y3,&2 * h0);
    (&2,y4,&2 * h0);
    (&2 * h0,y5,&2 * h0);
    (&2,y6,&2 * h0)
  ]
( taum y1 y2 y3 y4 y5 y6 - #0.453 * dih_y y1 y2 y3 y4 y5 y6 +  #0.777 / &2  > #0.0)`;
};;


(*   *)

  {
id = "2986512815 XXX";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
   (&0,t1,&1);
   (&0,t2,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
((t1 * num1 e1 e2 e3 y b a  / ( y * (&16 - y pow 2)) +
 t2 * num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) > &10)  \/ 
(t1 * num1 e1 e2 e3 y b a  / ( y * (&16 - y pow 2)) +
 t2 * num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) < --  &10)  \/ 
  (t1 pow 3 * num2 e1 e2 e3 y b a  / ( (y * (&16 - y pow 2)) pow 2) +
 t2  pow 3 * num2 e4 e2 e3 y c d  / ( (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y > &1) \/ 
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) c d y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) \/
    (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;








process and exec: PQFYWHW B' 0 1
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..2..solved at 6
0..0..1..2..3..4..5..6..7..8..9..10..11..12..solved at 26
 -- loading interval routines 
 -- loading lineInterval routines
 -- loading univariate routines 
 -- loading derivative routines 
 -- loading taylor routines 
[0*10^4] 1292221842
[1*10^4][2*10^4][3*10^4][4*10^4][5*10^4][6*10^4][7*10^4][8*10^4][9*10^4][10*10^4] 1292224293
[11*10^4][12*10^4][13*10^4][14*10^4][15*10^4][16*10^4][17*10^4][18*10^4][19*10^4][20*10^4] 1292226810
[21*10^4][22*10^4][23*10^4][24*10^4]
{4.0000000175118453072,3.9999999999999995559,3.9999999999999995559,5.0092560090541891071,6.3503999824881622871,1.000000000000000222} {4.0000000350236897262,4.0000000000000026645,4.0000000175118453072,5.0092560265660335261,6.3504000000000067061,1.000000000000000222}  isolated point
  value=[-3.250372957700057519,0.82720419279443069271]
T0 partial 0: [-196752492.29802501202,196753527.14800095558]
T0 partial 1: [-37692347.542628057301,37695143.939589552581]
T0 partial 2: [-192284142.43257603049,192284845.92855876684]
T0 partial 3: [-55637761.19475209713,55636403.976624935865]
T0 partial 4: [-21015135.947778314352,21013577.139246817678]
T0 partial 5: [-0,0]
  value=[-4.0278910319748337798,7.0366993129172437094]
T1 partial 0: [-533896309.75308513641,533894590.21806633472]
T1 partial 1: [-102285482.11367173493,102280835.6785363555]
T1 partial 2: [-521770577.99139678478,521769409.21885812283]
T1 partial 3: [-150971838.04912099242,150974092.42736944556]
T1 partial 4: [-57021819.396817542613,57024409.080054089427]
T1 partial 5: [-0,0]
error(1292227728): corner solution failure 
FAIL
(errors: 1)

(*
process and exec: QITNPEA 4003532128 d split(0/2)
{6.3492831131897222718,5.5556596606118802129,5.5429987906606363879,4.4099999999999965894,6.0688758252356631573,6.0688758251152385981} {6.3492831133208165184,5.5556596607323038839,5.5429987907810609471,4.4100000002089627671,6.0688758253560868283,6.0688758252356631573}  recursion limit exceeded
recursion depth is currently at 200
count = 5
lower 0 -0.057136015014915685073
upper 0 -0.057094380383945160518
lower 1 0.13999999461405998602
upper 1 0.13999999903925861022
lower 2 9.6074151750054606452e-10
upper 2 5.3859398851463914457e-09
lower 3 -3.588574023452593835e-09
upper 3 8.2351001236270299703e-10
lower 4 0.13999999917648997538
upper 4 0.14000000358857400684

process and exec: QITNPEA 4003532128 d split(1/2);
{7.0267406398425364955,4.6726690737083540483,4.6569761898003623202,4.4099999999999965894,6.0688758251152385981,6.0688758251152385981} {7.026740640000008753,4.6726690738287786075,4.6569761899207868794,4.4100000002089627671,6.0688758252356631573,6.0688758253560868283}  recursion limit exceeded
recursion depth is currently at 200
count = 5
terminate called after throwing an instance of 'unstable'
Exception: Failure "interval execution error case fail: 1".


*)

Parse_ineq.execute_cfsqp 
  {ineq =
    `!diag y1 y2 y3 y4 y5 y6.
         ineq
         [&2,y1,&2 * h0; &2,y2,&2 * h0; &2,y3,&2 * h0; &2,y4,&2 * h0; 
         &2,
         y5,
         &2 * h0; &2,y6,&2 * h0; &2 * h0,diag,#3.9985]
         (let y23 = &2 in
          let y56 = &2 in
          let y16 = &2 in
          let y34 = &2 in
          let y13 = edge_flat y2 y1 y3 y23 (&2) in
          let y46 = edge_flat y5 y4 y6 y56 (&2) in
          taum y1 y3 y4 y34 diag y13 +
          flat_term y2 +
          taum y4 y6 y1 y16 diag y46 +
          flat_term y5 >
          tame_table_d 6 0 \/
          dih_y y1 y3 y4 y34 diag y13 + dih_y y1 y6 y4 y46 diag y16 <
          dih_y y1 y2 y6 (&2 * h0) y16 (&2) \/
          dih_y y1 y3 y4 y34 diag y13 + dih_y y1 y6 y4 y46 diag y16 > pi \/
          dih_y y6 y1 y4 diag y46 y16 < dih_y y6 y1 y5 (&2 * h0) y56 y16 \/
          dih_y y3 y1 y4 diag y34 y13 < dih_y y3 y2 y4 (&2 * h0) y34 y23 \/
          delta_y y1 y3 y4 y34 diag y13 < &0 \/
          delta_y y4 y6 y1 y16 diag y13 < &0)`;
   id = "GYQVFXJ hexA 0";
   doc =
    "This inequality is the main hexagon inequality\n  with two flat nodes $\\v_2$ $\\v_5$, at opposite vertices of the hexagon.\n  This is an effective quadrilateral, with variables $y_1,\\ldots,y_6$ and diagonal\n  $y_{14}$.\n  Some reductions are used beyond those mentioned in the flypaper.\n  \\begin{enumerate}\n  \\item $y_{34}=y_{16}=2$.\n  \\item if the diag $y_{14}$ is greater than $3.7$, \n      then $y_{12}=y_{23}=y_{45}=y_{56}=2$.   \n  \\item $y_{14}\\le 3.9985$.\n  \\item By symmetry, we can assume that $y_{12}\\le y_{56}$.\n  \\end{enumerate}\n  The reductions are justified by the preceding calculations.\n  There are three cases, depending on whether the edges at $\\v_2$ and $\\v_5$\n  are as short or as long as possible.\n  ";
   tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert]};;

Parse_ineq.execute_cfsqp 
  {ineq =
    `!diag y1 y2 y3 y4.
         ineq
         [&2,y1,&2 * h0; &2,y2,&2 * h0; &2,y3,&2 * h0; &2,y4,&2 * h0; 
          &2 * h0,diag,#3.75]
         (let y23 = &2 in
          let y34 = &2 in
          let y13 = edge_flat y2 y1 y3 y23 (&2) in
         (( taum y1 y3 y4 y34 diag y13 +
          flat_term y2  >
          (tame_table_d 6 0) / &2 ) \/ (dih_y y1 y2 y4 (&2 * h0) diag (&2) > dih_y y1 y3 y4 y34 diag y13)))`;
   id = "GYQVFXJ hexA 0 test1";
   doc =
    " ";
   tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert]};;

Parse_ineq.execute_cfsqp 
  {ineq =
    `!diag y1 y2 y3 y4.
         ineq
         [&2,y1,&2 * h0; &2,y2,&2 * h0; &2,y3,&2 * h0; &2,y4,&2 * h0; 
          #3.9,diag,#3.9]
         (let y23 = &2 in
          let y34 = &2 in
          let y13 = edge_flat y2 y1 y3 y23 (&2) in
         (( rhazim y3 y4 y1 diag y13 y34 - (&1 + const1) * pi / &2 +
          flat_term y2 / &2  + #0.4 * (y1 + y4 - &2 * y3) >
          (tame_table_d 6 0) / &4 )))`;
   id = "GYQVFXJ hexA 0 test2";
   doc =
    " ";
   tags = [Tex; Flypaper; Penalty (5., 50.); Xconvert]};;

add  {
id = "2986512815 test";
doc = 
"";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Deprecated];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
 (
  let y2 = y * y in
  let a2 = a * a in
  let b2 = b * b in
  let c2 = c * c in
  let d2 = d * d in
let numA1 = num1 e1 e2 e3 y2 b2 a2 in
   let numA2 = num2 e1 e2 e3 y2 b2
   let numA2 = num2 e4 e2 e3 y c d in
   let deltaA = delta_y (&2) (&2) (&2) y b a in
   let denomA1 = 
  let term2 = ((&4 * (((sqrt ((((-- &4) * (c pow 4)) + (((-- &4) * (((d pow 2) + ((-- &1) * 
(y pow 2))) pow 2)) + ((c pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((d pow 2) 
* ((-- &8) + (y pow 2)))))))))) pow 3) * (((-- &8) * ((a pow 6) * ((&8 * (e1 
* ((-- &16) + (&3 * (y pow 2))))) + (e3 * (&128 + (((-- &8) * (y pow 2)) + (y 
pow 4))))))) + (((-- &8) * (((b pow 2) + ((-- &1) * (y pow 2))) * (((y pow 4) 
* ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((&8 * (e1 * ((-- &16) + (&3 * (y 
pow 2))))) + (&8 * (e3 * ((-- &16) + (&3 * (y pow 2)))))))) + (((b pow 2) * 
((y pow 2) * ((&16 * (e3 * (&16 + ((-- &3) * (y pow 2))))) + ((e2 * (((-- 
&16) + (y pow 2)) pow 2)) + (e1 * ((-- &512) + ((&48 * (y pow 2)) + ((-- &3) 
* (y pow 4))))))))) + ((b pow 4) * ((&8 * (e3 * ((-- &16) + (&3 * (y pow 
2))))) + (e1 * (&128 + (((-- &8) * (y pow 2)) + (y pow 4)))))))))) + (((-- 
&4) * ((a pow 2) * ((&6 * ((y pow 4) * ((&8 * (e1 * ((-- &16) + (&3 * (y pow 
2))))) + (e3 * (&128 + (((-- &8) * (y pow 2)) + (y pow 4))))))) + (((-- &4) * 
((b pow 2) * ((y pow 2) * ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((&4 * (e1 
* ((-- &32) + (((-- &2) * (y pow 2)) + (y pow 4))))) + (&4 * (e3 * ((-- &32) 
+ (((-- &2) * (y pow 2)) + (y pow 4)))))))))) + ((b pow 4) * ((&6 * (e3 * 
(&128 + (((-- &40) * (y pow 2)) + (&3 * (y pow 4)))))) + (e1 * ((-- &768) + 
((&208 * (y pow 2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))) + ((-- 
&4) * ((a pow 4) * ((&2 * ((y pow 2) * ((e1 * (&384 + ((-- &72) * (y 
pow 2)))) + ((e2 * (((-- &16) + (y pow 2)) pow 2)) + ((-- &4) * (e3 * (&160 + 
(((-- &14) * (y pow 2)) + (y pow 4))))))))) + ((b pow 2) * ((&6 * (e1 * (&128 
+ (((-- &40) * (y pow 2)) + (&3 * (y pow 4)))))) + (e3 * ((-- &768) + ((&208 
* (y pow 2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))))))) + (&4 * 
(((sqrt ((((-- &4) * (a pow 4)) + (((-- &4) * (((b pow 2) + ((-- &1) * (y pow 
2))) pow 2)) + ((a pow 2) * ((&8 * (y pow 2)) + ((-- &1) * ((b pow 2) * ((-- 
&8) + (y pow 2)))))))))) pow 3) * (((-- &8) * ((c pow 6) * ((&8 * (e3 * ((-- 
&16) + (&3 * (y pow 2))))) + (e1 * (&128 + (((-- &8) * (y pow 2)) + (y pow 
4))))))) + (((-- &8) * (((d pow 2) + ((-- &1) * (y pow 2))) * (((y pow 4) * 
((e4 * (((-- &16) + (y pow 2)) pow 2)) + ((&8 * (e1 * ((-- &16) + (&3 * (y 
pow 2))))) + (&8 * (e3 * ((-- &16) + (&3 * (y pow 2)))))))) + (((d pow 2) * 
((y pow 2) * ((e1 * (&256 + ((-- &48) * (y pow 2)))) + ((e4 * (((-- &16) + (y 
pow 2)) pow 2)) + (e3 * ((-- &512) + ((&48 * (y pow 2)) + ((-- &3) * (y pow 
4))))))))) + ((d pow 4) * ((&8 * (e1 * ((-- &16) + (&3 * (y pow 2))))) + (e3 
* (&128 + (((-- &8) * (y pow 2)) + (y pow 4)))))))))) + (((-- &4) * ((c pow 
4) * ((&2 * ((y pow 2) * ((e3 * (&384 + ((-- &72) * (y pow 2)))) + ((e4 * 
(((-- &16) + (y pow 2)) pow 2)) + ((-- &4) * (e1 * (&160 + (((-- &14) * (y 
pow 2)) + (y pow 4))))))))) + ((d pow 2) * ((&6 * (e3 * (&128 + (((-- &40) * 
(y pow 2)) + (&3 * (y pow 4)))))) + (e1 * ((-- &768) + ((&208 * (y pow 2)) + 
(((-- &20) * (y pow 4)) + (y pow 6)))))))))) + ((-- &4) * ((c pow 2) * ((&6 * 
((y pow 4) * ((&8 * (e3 * ((-- &16) + (&3 * (y pow 2))))) + (e1 * (&128 + 
(((-- &8) * (y pow 2)) + (y pow 4))))))) + (((-- &4) * ((d pow 2) * ((y pow 
2) * ((e4 * (((-- &16) + (y pow 2)) pow 2)) + ((&4 * (e1 * ((-- &32) + (((-- 
&2) * (y pow 2)) + (y pow 4))))) + (&4 * (e3 * ((-- &32) + (((-- &2) * (y pow 
2)) + (y pow 4)))))))))) + ((d pow 4) * ((&6 * (e1 * (&128 + (((-- &40) * (y 
pow 2)) + (&3 * (y pow 4)))))) + (e3 * ((-- &768) + ((&208 * (y pow 
2)) + (((-- &20) * (y pow 4)) + (y pow 6))))))))))))))))) in
   term1 * term1 - #0.01 * term2 > &0) \/ 
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) \/ 
  (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;

Parse_ineq.execute_cfsqp
{
  id = "QITNPEA 4003532128 b";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ((gamma23f y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
     (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/ 
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14))`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;
(*    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/ *)
Sphere.gamma23f;;

Parse_ineq.execute_cfsqp

{
  id = "test QITNPEA 4003532128 b2";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, #2.1);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ((gamma23f y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14))`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.
     We may use monotonicity so that $y_4=2.1$";
(* Dec 27, 2010 tested to see if it can be split into a left-and-right inequality.  It cannot be done
    with a correction term of the form 
    + #0.004 * (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2)  *)
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;


{
  id = "test QITNPEA 4003532128 b";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ((gamma23f y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/ 
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14))`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
(* Dec 27, 2010 tested to see if it can be split into a left-and-right inequality.  It cannot be done
    with a correction term of the form 
    + #0.004 * (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2)  *)
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;

1;;


{
  id = "test QITNPEA 4003532128 b";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (((gamma3f y1 y2 y6 sqrt2 lmfun +  (dih_y y1 y2 y3 y4 y5 y6 -
          &2 * dih_y y1 y2 sqrt2 sqrt2 sqrt2 y6) *
         (vol2r y1 sqrt2 - vol2f y1 sqrt2 lmfun) / (&2 * pi))  - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 
  + #0.004 * (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2) > #0.0) \/
    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/  (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
   (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14)  )`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
};;

1;;

(* 

\/
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) 

*)


{
  id = "test QITNPEA 4003532128 c";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2 ,y2, &2 * hminus);
     (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (( gamma23f_126_03 y1 y2 y3 y4 y5 y6 1 sqrt2 lmfun  
       - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) \/
    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
 (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0) 
 )`;
  doc =   "
 (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/
    
     This gives an upper bound $0.08$ on the dihedral angle of the $3$-cell.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Cfsqp;Clusterlp;Tex;Xconvert;Tprep;Split[0]];
  (* d4 > 67 > Tan[Pi/2 - 0.03] Sqrt[4 1.0] ==> dih <= 0.03. *)
};;


Sphere.gamma23f_126_03;;
Sphere.vol2r;;
Sphere.vol2f;;

(*  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
*)

let template23c' = `\ y3m y3M y5m y5M y6m y6M (w1:num) (w2:num). ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, &2 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    (
(gamma23f_126_03 y1 y2 y3 y4 y5 y6 w1 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/
(delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0) 
      )`;;

let template23b' = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, sqrt8 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    (  (gamma23f y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/
   (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14)    \/
   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2)
   )`;;

let template23b'' = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, &2 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    (  (gamma23f y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6) \/
   (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14)    \/
   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2)
   )`;;

(*   *)


let mk_ineq23 i3 i5 i6 j = 
  let template = List.nth [template23b'';template23c';Ineq.template23d] j in
  let x i = List.nth [`&2`; `&2 * hminus` ; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i>0) then 1 else 0 in
  let m = mk_small_numeral in
  let w1 = 1 +  mid i6 in
  let w2 = 1 + mid i3 + mid i5 in
    Ineq.mk_tplate template  [x i3;X i3; x i5;X i5; x i6 ;X i6; m w1; m w2];; 

let make_F23 i3 i5 i6 j = 
  let ext = List.nth ['b';'c';'d'] j in
   {
    id = Printf.sprintf "ZTGIJCF23 %d %d %d 7907792228 %c" i3 i5 i6 ext;
    ineq = mk_ineq23 i3 i5 i6 j;
    doc = "This is the $2$- and $3$-cell inequality for five or more leaves.";
    tags = (if (i3,i5,i6)=(0,0,0) then [Tex] else []) @ [Cfsqp;Flypaper;Xconvert;Penalty(400.0,10000.0);Tprep;Split (Ineq.split_F4 i3 0 i5 i6)];
  };;

 for j=0 to 0 do
  for k = 0 to 3 do
    let i356list = [(0,0,0);(0,0,1);(1,0,1);(0,1,1)] in (* cases up to symmetry. *)
    let (i3,i5,i6) = List.nth i356list k in
   Parse_ineq.execute_cfsqp (make_F23 i3 i5 i6 j) done done ;;

(* deprecated *)
let sql = new_definition `sql x = 
  if (x < &1)
  then &3/ &8 + (&3*x)/ &4 - x pow 2 / &8 + 
    (&1 - x) pow 3 * ((&12/ &10) * x * (&1 - x) - &4/ &10)
  else sqrt x`;;





(* deprecated (* upper bound when d4 < 0 *)  *)
let upper_dih_x_large = new_definition `upper_dih_x_large x1 x2 x3 x4 x5 x6 =
  (let d = delta_x x1 x2 x3 x4 x5 x6 in
  let d4 = delta_x4 x1 x2 x3 x4 x5 x6 in (
      if (d < &1) then
   pi +  &2 * sqrt x1 * sql d * matan (&4 * x1 * d / (d4 pow 2) ) / d4
      else dih_x x1 x2 x3 x4 x5 x6))`;;



(* deprecated *)
let upper_dih_y_large = new_definition `upper_dih_y_large = y_of_x upper_dih_x_large`;;

(* deprecated *)
let vol_xl = new_definition 
  `vol_xl x1 x2 x3 x4 x5 x6 = sql (delta_x x1 x2 x3 x4 x5 x6) / &12`;;

let vol_yl = new_definition `vol_yl = y_of_x vol_xl`;;

let vol3rl = new_definition `vol3rl y1 y2 y3 r = vol_yl r r r y1 y2 y3`;;

let sol_yu_large = new_definition `sol_yu_large y1 y2 y3 y4 y5 y6 =
         upper_dih_y y1 y2 y3 y4 y5 y6 +
         upper_dih_y y2 y3 y1 y5 y6 y4 +
         upper_dih_y_large y3 y1 y2 y6 y4 y5 - pi`;;

let vol3fu_large = new_definition ` vol3fu_large y1 y2 y3 r f =
         (&2 * mm1 / pi) *
         (sol_yu_large y1 y2 r r r y3 + sol_yu_large y2 y3 r r r y1 + sol_yu_large y3 y1 r r r y2) -
         (&8 * mm2 / pi) *
         (f (y1 / &2) * upper_dih_y y1 y2 r r r y3 +
          f (y2 / &2) * upper_dih_y y2 y3 r r r y1 +
          f (y3 / &2) * upper_dih_y y3 y1 r r r y2)`;;

let gamma3fl_large = new_definition `gamma3fl_large y1 y2 y3 r f = vol3rl y1 y2 y3 r - vol3fu_large y1 y2 y3 r f`;;



Parse_ineq.execute_cfsqp
{
id = "test";
ineq = all_forall `ineq [&1,x,&1] (upper_dih_y 
   #2.6507999999999998 #2.15800282434262058 
   #2.4635088441806432 #2.10000000000000009 
   #2.15800282434262058 #2.4635088441806432 > &0)`;
doc = "";
tags = [];
};;

Parse_ineq.execute_cfsqp
{
id = "test";
ineq = all_forall `ineq [&1,x,&1] (upper_dih_x 
   #7.0267406399999990 #4.6569761898707273 #6.06888 
   #4.4100000000000004 #4.6569761898707273 #6.06888 > &0)`;
doc = "";
tags = [];
};;

Parse_ineq.execute_cfsqp
{
id = "test";
ineq = all_forall `ineq [&1,x,&1] (gamma3f_126_n #2.3 #2.35 sqrt2 sqrt2 sqrt2 #2.4  > &0)`;
doc = "";
tags = [];
};;
Sphere.vol3f;;
vol3fu;;

Sphere.gamma23f_126_03;;



let gamma3f_135_n = new_definition `gamma3f_135_n y1 y2 y3 y4 y5 y6 =
    sqn(delta_y y1 y2 y3 y4 y5 y6) * (&1 / &12 - 
   ( (&2 * mm1 / pi) *
         (y_of_x sol_euler_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 
	  + y_of_x sol_euler156_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 + 
	  y_of_x sol_euler345_x_div_sqrtdelta y1 y2 y3 y4 y5 y6) -
         (&8 * mm2 / pi) *
         (y_of_x lmdih_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6 +
          y_of_x lmdih3_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6 +
          y_of_x lmdih5_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6)
   ))`;;





let gamma3f_126_n = new_definition `gamma3f_126_n y1 y2 y3 y4 y5 y6 =
    sqn(delta_y y1 y2 y3 y4 y5 y6) * (&1 / &12 - 
   ( (&2 * mm1 / pi) *
         (y_of_x sol_euler_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 
	  + y_of_x sol_euler246_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 + 
	  y_of_x sol_euler156_x_div_sqrtdelta y1 y2 y3 y4 y5 y6) -
         (&8 * mm2 / pi) *
         (y_of_x lmdih_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6 +
          y_of_x lmdih2_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6 +
          y_of_x lmdih6_x_div_sqrtdelta_posbranch y1 y2 y3 y4 y5 y6)
   ))`;;


let gamma3f_135_s_n = new_definition `gamma3f_135_s_n y1 y2 y3 y4 y5 y6 =
  sqn(delta_y y1 y2 y3 y4 y5 y6) *  (&1 / &12 - 
    (&2 * mm1 / pi) *
         (y_of_x sol_euler_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 
	  + y_of_x sol_euler156_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 + 
	  y_of_x sol_euler345_x_div_sqrtdelta y1 y2 y3 y4 y5 y6) )`;;

let gamma3f_126_s_n = new_definition `gamma3f_126_s_n y1 y2 y3 y4 y5 y6 =
  sqn(delta_y y1 y2 y3 y4 y5 y6) *  (&1 / &12 - 
    (&2 * mm1 / pi) *
         (y_of_x sol_euler_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 
	  + y_of_x sol_euler246_x_div_sqrtdelta y1 y2 y3 y4 y5 y6 + 
	  y_of_x sol_euler156_x_div_sqrtdelta y1 y2 y3 y4 y5 y6) )`;;

let lmdih_x_n = new_definition `lmdih_x_n x1 x2 x3 x4 x5 x6 = 
  sqn (delta_x x1 x2 x3 x4 x5 x6) * lmdih_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let lmdih2_x_n = new_definition `lmdih2_x_n x1 x2 x3 x4 x5 x6 = 
  sqn (delta_x x1 x2 x3 x4 x5 x6) * lmdih2_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let lmdih3_x_n = new_definition `lmdih3_x_n x1 x2 x3 x4 x5 x6 = 
  sqn (delta_x x1 x2 x3 x4 x5 x6) * lmdih3_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let lmdih5_x_n = new_definition `lmdih5_x_n x1 x2 x3 x4 x5 x6 = 
  sqn (delta_x x1 x2 x3 x4 x5 x6) * lmdih5_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let lmdih6_x_n = new_definition `lmdih6_x_n x1 x2 x3 x4 x5 x6 = 
  sqn (delta_x x1 x2 x3 x4 x5 x6) * lmdih6_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let gamma3f_135_n_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6.
   gamma3f_135_n y1 y2 y3 y4 y5 y6 = gamma3f_135_s_n y1 y2 y3 y4 y5 y6 +
   (&8 * mm2/ pi) *
    (y_of_x lmdih_x_n y1 y2 y3 y4 y5 y6 +
     y_of_x lmdih3_x_n y1 y2 y3 y4 y5 y6 +
     y_of_x lmdih5_x_n y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[gamma3f_135_n;gamma3f_135_s_n;lmdih_x_n;lmdih3_x_n;lmdih5_x_n;Sphere.y_of_x;Sphere.delta_y];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let gamma3f_126_n_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6.
   gamma3f_126_n y1 y2 y3 y4 y5 y6 = gamma3f_126_s_n y1 y2 y3 y4 y5 y6 +
   (&8 * mm2/ pi) *
    (y_of_x lmdih_x_n y1 y2 y3 y4 y5 y6 +
     y_of_x lmdih2_x_n y1 y2 y3 y4 y5 y6 +
     y_of_x lmdih6_x_n y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[gamma3f_126_n;gamma3f_126_s_n;lmdih_x_n;lmdih2_x_n;lmdih6_x_n;Sphere.y_of_x;Sphere.delta_y];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let gamma3f_vLR_n = new_definition `gamma3f_vLR_n y1 y2 y3 y4 y5 y6 f =
      (dih_y y1 y2 y3 y4 y5 y6 -
          upper_dih_y y1 y2 sqrt2 sqrt2 sqrt2 y6 -
          upper_dih_y y1 y3 sqrt2 sqrt2 sqrt2 y5) *
         (vol2r y1 sqrt2 - vol2f y1 sqrt2 f) / (&2 * pi)`;;

let gamma3f_vL_n = new_definition `gamma3f_vL_n y1 y2 y3 y4 y5 y6 f =
  (dih_y y1 y2 y3 y4 y5 y6 - upper_dih_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - #0.03) *
         (vol2r y1 sqrt2 - vol2f y1 sqrt2 f) / (&2 * pi)`;;

let gamma23f_n = new_definition `gamma23f_n y1 y2 y3 y4 y5 y6 w1 w2 r f =
         gamma3f_126_n y1 y2 sqrt2 sqrt2 sqrt2 y6 / &w1 +
         gamma3f_135_n y1 sqrt2 y3 sqrt2 y5 sqrt2 / &w2 +
         (dih_y y1 y2 y3 y4 y5 y6 -
          upper_dih_y y1 y2 r r r y6 -
          upper_dih_y y1 y3 r r r y5) *
         (vol2r y1 r - vol2f y1 r f) / (&2 * pi)`;;

let gamma23f_n_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6 w1 w2 f. gamma23f_n y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 f = 
    gamma3f_126_n y1 y2 sqrt2 sqrt2 sqrt2 y6 / &w1 +
         gamma3f_135_n y1 sqrt2 y3 sqrt2 y5 sqrt2 / &w2 +
    gamma3f_vLR_n y1 y2 y3 y4 y5 y6 f`,
  (* {{{ proof *)
  [
  REWRITE_TAC[gamma3f_vLR_n;gamma23f_n];
  ]);;
  (* }}} *)


let gamma23f_126_03_n = new_definition 
  `gamma23f_126_03_n y1 y2 y3 y4 y5 y6 w1 r f =
         gamma3f_126_n y1 y2 sqrt2 sqrt2 sqrt2 y6 / &w1 +
         (dih_y y1 y2 y3 y4 y5 y6 - upper_dih_y y1 y2 r r r y6 - #0.03) *
         (vol2r y1 r - vol2f y1 r f) / (&2 * pi)`;;

let gamma23f_126_03_n_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6 f. gamma23f_126_03_n y1 y2 y3 y4 y5 y6 w1 sqrt2 f =
         gamma3f_126_n y1 y2 sqrt2 sqrt2 sqrt2 y6 / &w1 +
   gamma3f_vL_n y1 y2 y3 y4 y5 y6 f`,
  (* {{{ proof *)
  [
  REWRITE_TAC[gamma3f_vL_n;gamma23f_126_03_n];
  ]);;
  (* }}} *)


let gamma3f_vLR_n0 = new_definition `gamma3f_vLR_n0 y1 y2 y3 y4 y5 y6 = 
   gamma3f_vLR_n y1 y2 y3 y4 y5 y6 (\x. &0)`;;

let gamma3f_vLR_n0_case = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. &2 * h0 <= y1 ==> gamma3f_vLR_n y1 y2 y3 y4 y5 y6 lmfun = 
    gamma3f_vLR_n0 y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  REWRITE_TAC[gamma3f_vLR_n;gamma3f_vLR_n0;Sphere.vol2f;];
  ASM_SIMP_TAC[lmfun0;REAL_MUL_RZERO;REAL_SUB_RZERO];
  ]);;
  (* }}} *)

let gamma3f_vLR_nlfun = new_definition `gamma3f_vLR_nlfun y1 y2 y3 y4 y5 y6 = 
  gamma3f_vLR_n y1 y2 y3 y4 y5 y6 lfun`;;

let gamma3f_vLR_nlfun_case = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. y1 <= &2 * h0 ==> gamma3f_vLR_n y1 y2 y3 y4 y5 y6 lmfun = 
    gamma3f_vLR_nlfun y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  REWRITE_TAC[gamma3f_vLR_n;Sphere.vol2f;gamma3f_vLR_nlfun];
  ASM_SIMP_TAC[lmfun_lfun];
  ]);;
  (* }}} *)

let  gamma3f_vL_n0 = new_definition `gamma3f_vL_n0 y1 y2 y3 y4 y5 y6 = 
  gamma3f_vL_n y1 y2 y3 y4 y5 y6 (\x. &0)`;;

let gamma3f_vL_n0_case = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. &2 * h0 <= y1 ==> gamma3f_vL_n y1 y2 y3 y4 y5 y6 lmfun = 
    gamma3f_vL_n0 y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  REWRITE_TAC[gamma3f_vL_n;Sphere.vol2f;gamma3f_vL_n0];
  ASM_SIMP_TAC[lmfun0;REAL_MUL_RZERO;REAL_SUB_RZERO];
  ]);;
  (* }}} *)

let gamma3f_vL_nlfun = new_definition `gamma3f_vL_nlfun y1 y2 y3 y4 y5 y6 = 
  gamma3f_vL_n y1 y2 y3 y4 y5 y6 lfun`;;

let gamma3f_vL_nlfun_case = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. y1 <= &2 * h0 ==> gamma3f_vL_n y1 y2 y3 y4 y5 y6 lmfun = 
    gamma3f_vL_nlfun y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  REWRITE_TAC[gamma3f_vL_n;Sphere.vol2f;gamma3f_vL_nlfun];
  ASM_SIMP_TAC[lmfun_lfun];
  ]);;
  (* }}} *)

let rr f s = REWRITE_RULE[Sphere.y_of_x] (f s);;

let lmdih_n0 = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&2 * h0 <= y1 ) ==>(y_of_x lmdih_x_n y1 y2 y3 y4 y5 y6 =  &0 )`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;lmdih_x_n];
    REPEAT STRIP_TAC;
    ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih0];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let lmdih2_n0 = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&2 * h0 <= y2 ) ==>(y_of_x lmdih2_x_n y1 y2 y3 y4 y5 y6 =  &0 )`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;lmdih_x_n;lmdih2_x_n;lmdih2_x_div_sqrtdelta_posbranch;Sphere.rotate2];
    REPEAT STRIP_TAC;
    ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih0];
  REAL_ARITH_TAC;
  ]);;

let lmdih3_n0 = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&2 * h0 <= y3 ) ==>(y_of_x lmdih3_x_n y1 y2 y3 y4 y5 y6 =  &0 )`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;lmdih_x_n;lmdih3_x_n;Sphere.lmdih3_x_div_sqrtdelta_posbranch;Sphere.rotate3];
    REPEAT STRIP_TAC;
    ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih0];
  REAL_ARITH_TAC;
  ]);;

let lmdih5_n0 = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&2 * h0 <= y5 ) ==>(y_of_x lmdih5_x_n y1 y2 y3 y4 y5 y6 =  &0 )`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;lmdih_x_n;lmdih5_x_n;Sphere.lmdih5_x_div_sqrtdelta_posbranch;Sphere.rotate5];
    REPEAT STRIP_TAC;
    ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih0];
  REAL_ARITH_TAC;
  ]);;

let lmdih6_n0 = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&2 * h0 <= y6 ) ==>(y_of_x lmdih6_x_n y1 y2 y3 y4 y5 y6 =  &0 )`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;lmdih_x_n;lmdih6_x_n;Sphere.lmdih6_x_div_sqrtdelta_posbranch;Sphere.rotate6];
    REPEAT STRIP_TAC;
    ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih0];
  REAL_ARITH_TAC;
  ]);;

let ldih_x_n = new_definition `ldih_x_n x1 x2 x3 x4 x5 x6 =
  sqn(delta_x x1 x2 x3 x4 x5 x6) * ldih_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let ldih2_x_n = new_definition `ldih2_x_n x1 x2 x3 x4 x5 x6 =
  sqn(delta_x x1 x2 x3 x4 x5 x6) * ldih2_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let ldih3_x_n = new_definition `ldih3_x_n x1 x2 x3 x4 x5 x6 =
  sqn(delta_x x1 x2 x3 x4 x5 x6) * ldih3_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let ldih5_x_n = new_definition `ldih5_x_n x1 x2 x3 x4 x5 x6 =
  sqn(delta_x x1 x2 x3 x4 x5 x6) * ldih5_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let ldih6_x_n = new_definition `ldih6_x_n x1 x2 x3 x4 x5 x6 =
  sqn(delta_x x1 x2 x3 x4 x5 x6) * ldih6_x_div_sqrtdelta_posbranch x1 x2 x3 x4 x5 x6`;;

let lmdih_ldih_n = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&0 <= y1 /\ y1 <= &2 * h0) ==>(y_of_x lmdih_x_n y1 y2 y3 y4 y5 y6 = y_of_x ldih_x_n y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;lmdih_x_n;ldih_x_n];
  REPEAT STRIP_TAC;
  ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih_ldih];
  ]);;
  (* }}} *)

let lmdih2_ldih2_n = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&0 <= y2 /\ y2 <= &2 * h0) ==>(y_of_x lmdih2_x_n y1 y2 y3 y4 y5 y6 = y_of_x ldih2_x_n y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;lmdih2_x_div_sqrtdelta_posbranch;Sphere.rotate2;Sphere.ldih2_x_div_sqrtdelta_posbranch;lmdih2_x_n;ldih2_x_n];
  REPEAT STRIP_TAC;
  ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih_ldih];
  ]);;
  (* }}} *)

let lmdih3_ldih3_n = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&0 <= y3 /\ y3 <= &2 * h0) ==>(y_of_x lmdih3_x_n y1 y2 y3 y4 y5 y6 = y_of_x ldih3_x_n y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;Sphere.lmdih3_x_div_sqrtdelta_posbranch;Sphere.rotate3;Sphere.ldih3_x_div_sqrtdelta_posbranch;lmdih3_x_n;ldih3_x_n];
  REPEAT STRIP_TAC;
  ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih_ldih];
  ]);;
  (* }}} *)

let lmdih5_ldih5_n = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&0 <= y5 /\ y5 <= &2 * h0) ==>(y_of_x lmdih5_x_n y1 y2 y3 y4 y5 y6 = y_of_x ldih5_x_n y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;Sphere.lmdih5_x_div_sqrtdelta_posbranch;Sphere.rotate5;Sphere.ldih5_x_div_sqrtdelta_posbranch;lmdih5_x_n;ldih5_x_n];
  REPEAT STRIP_TAC;
  ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih_ldih];
  ]);;
  (* }}} *)

let lmdih6_ldih6_n = rr prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. (&0 <= y6 /\ y6 <= &2 * h0) ==>(y_of_x lmdih6_x_n y1 y2 y3 y4 y5 y6 = y_of_x ldih6_x_n y1 y2 y3 y4 y5 y6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.y_of_x;Sphere.lmdih6_x_div_sqrtdelta_posbranch;Sphere.rotate6;Sphere.ldih6_x_div_sqrtdelta_posbranch;lmdih6_x_n;ldih6_x_n];
  REPEAT STRIP_TAC;
  ASM_SIMP_TAC[REWRITE_RULE[Sphere.y_of_x] lmdih_ldih];
  ]);;
  (* }}} *)


Parse_ineq.execute_cfsqp 
{
  id = "QITNPEA 4003532128 c";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2 ,y2, &2 * hminus);
     (&2,y3, &2 * hminus);
    (#2.1 ,y4, #2.1);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    (    (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0) \/  
   (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14) \/
   ( gamma23f_126_03_n y1 y2 y3 y4 y5 y6 1 sqrt2 lmfun  
       - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) 
 )`;
  doc =   "
   Inititally, $y_4$ extends to $\\sqrt8$, but we use monotonicity
to reduced it to the lower bound.
     This gives an upper bound $0.08$ on the dihedral angle of the $3$-cell.
     This is an inequality for $23$-cells used to prove the cluster inequality.";
  tags = [Cfsqp;Cfsqp_branch 3;Clusterlp;Tex;Xconvert;Tprep;Split[0];Delta126min (0.14 -. 1.0e-12);
    Delta135min (0.0); Delta135max(0.14 +. 1.0e-12)];
  (* d4 > 67 > Tan[Pi/2 - 0.03] Sqrt[4 1.0] ==> dih <= 0.03. *)
 (*   (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/ dropped 12/23/2010 *)
};;

let sqrt2_sqrt2 = prove_by_refinement(
  `sqrt2 * sqrt2 = &2`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.sqrt2];
    MATCH_MP_TAC sq_pow2;
  EXISTS_TAC`&0`;
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let gamma3f_vLR_x_nlfun = new_definition `gamma3f_vLR_x_nlfun x1 x2 x3 x4 x5 x6=
    gamma3f_vLR_nlfun (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let gamma3f_vL_x_nlfun = new_definition `gamma3f_vL_x_nlfun x1 x2 x3 x4 x5 x6=
    gamma3f_vL_nlfun (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let gamma3f_vLR_x_n0 = new_definition `gamma3f_vLR_x_n0 x1 x2 x3 x4 x5 x6=
    gamma3f_vLR_n0 (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let gamma3f_vL_x_n0 = new_definition `gamma3f_vL_x_n0 x1 x2 x3 x4 x5 x6=
    gamma3f_vL_n0 (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;


let gamma3f_135_x_s_n = new_definition 
  `gamma3f_135_x_s_n x1 (x2:real) x3 (x4:real) x5 (x6:real) =
    gamma3f_135_s_n (sqrt x1) sqrt2 (sqrt x3) sqrt2 (sqrt x5) sqrt2`;;

let gamma3f_126_x_s_n = new_definition 
  `gamma3f_126_x_s_n x1 (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) =
   gamma3f_126_s_n (sqrt x1) (sqrt x2) sqrt2 sqrt2 sqrt2 (sqrt x6)`;;

let rr22 = REWRITE_RULE[GSYM sqrt2_sqrt2];;

let ldih_x_126_n = rr22 (new_definition `ldih_x_126_n x1 x2 (x3:real) (x4:real) (x5:real) x6 = 
   ldih_x_n x1 x2 (&2) (&2) (&2) x6`);;

let ldih2_x_126_n = rr22 (new_definition 
`ldih2_x_126_n_ x1 x2 (x3:real) (x4:real) (x5:real) x6 = 
   ldih2_x_n x1 x2 (&2) (&2) (&2) x6`);;

let ldih6_x_126_n = rr22 (new_definition 
 `ldih6_x_126_n x1 x2 (x3:real) (x4:real) (x5:real) x6 = 
   ldih6_x_n x1 x2 (&2) (&2) (&2) x6`);;

let ldih_x_135_n = rr22 (new_definition 
 `ldih_x_135_n x1 (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   ldih_x_n x1  (&2) x3 (&2) x5 (&2)`);;

let ldih3_x_135_n = rr22 (new_definition 
`ldih3_x_135_n x1 (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   ldih3_x_n x1  (&2) x3 (&2) x5 (&2)`);;

let ldih5_x_135_n = rr22 (new_definition 
 `ldih5_x_135_n x1 (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   ldih5_x_n x1  (&2) x3 (&2) x5 (&2)`);;

gamma3f_vLR_x_nlfun;;
gamma3f_vLR_nlfun;;
gamma3f_vLR_n;;

gamma3f_126_x_s_n;;
gamma3f_126_s_n;;
gamma3f_135_x_s_n;;
gamma3f_135_s_n;;

Parse_ineq.execute_cfsqp 
{
  id = "QITNPEA 4003532128 b";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, sqrt8);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
   (gamma23f_n y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) 
   )`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.
     We may use monotonicity so that rad2 is exactly 2.";
(* Dec 27, 2010 tested to see if it can be split into a left-and-right inequality.  It cannot be done
    with a correction term of the form 
    + #0.004 * (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2)  *)
  tags = [Cfsqp;Cfsqp_branch 3;
    Clusterlp;Tex;Xconvert;Tprep;Split[0];Set_rad2;Delta126min (0.14-. 1.0e-12);
	 Delta135min (0.14 -. 1.0e-12)];
};;


Parse_ineq.execute_cfsqp 
{
  id = "test QITNPEA 4003532128 b2";
  ineq = all_forall `ineq
   [(&2 * hminus,y1, &2 * hplus);
    (&2,y2, &2 * hminus);
    (&2,y3, &2 * hminus);
    (#2.1 ,y4, #2.1);
    (&2,y5, &2 * hminus);
    (&2,y6, &2 * hminus)
   ]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
  (gamma23f_n y1 y2 y3 y4 y5 y6 1 1 sqrt2 lmfun - #0.00457511 
    - #0.00609451*dih_y y1 y2 y3 y4 y5 y6 > #0.0) 
   )`;
  doc =   "
     Note the lower bound on $y_4$ is $2.1$.
     This is an inequality for $23$-cells used to prove the cluster inequality.
     We may use monotonicity so that $y_4=2.1$";
(* Dec 27, 2010 tested to see if it can be split into a left-and-right inequality.  It cannot be done
    with a correction term of the form 
    + #0.004 * (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 - delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2)  *)
  tags = [Cfsqp;Cfsqp_branch 3;Clusterlp;Tex;Xconvert;Tprep;Split[0];Delta126min (0.14-. 1.0e-12);
	 Delta135min (0.14 -. 1.0e-12)];
};;
  
     
let template23b = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, sqrt8 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
  (gamma23f_n y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6)
   )`;;


let template23b' = `\ y3m y3M y5m y5M y6m y6M w1 w2. ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, &2 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    ( (delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < #0.14) \/
   (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2) \/
  (gamma23f_n y1 y2 y3 y4 y5 y6 w1 w2 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6)
   )`;;
(* Dec 27, 2010. split into two cases 23b 23b', by monotonicity of x4, either rad2=2 or x4=2 *)


let template23b_tags = [Cfsqp_branch 3;Delta126min (0.14 -. 1.0e-12);Delta135min (0.14-. 1.0e-12);Set_rad2];;

let template23b'_tags = [Cfsqp_branch 3;Delta126min (0.14 -. 1.0e-12);Delta135min (0.14-. 1.0e-12)];;

let template23c_tags = 
  [Cfsqp_branch 3;Delta126min (0.14 -. 1.0e-12);Delta135min (0.0);Delta135max(0.14+. 1.0e-12)];;

let template23c = `\ y3m y3M y5m y5M y6m y6M (w1:num) (w2:num). ineq
   [(&2 *  hminus, y1, &2 * hplus);
    (&2 ,y2, &2 *hminus);
    (y3m,y3,y3M);
    (&2 ,y4, &2 );
    (y5m,y5,y5M);
    (y6m,y6,y6M)]
    (
(delta_y y1 y2 sqrt2 sqrt2 sqrt2 y6 < #0.14 ) \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 > #0.14)  \/
    (delta_y y1 sqrt2 y3 sqrt2 y5 sqrt2 < &0) \/
(gamma23f_126_03_n y1 y2 y3 y4 y5 y6 w1 sqrt2 lmfun    >
       a_spine5 + b_spine5 * dih_y y1 y2 y3 y4 y5 y6)
      )`;;
  (* upper bound on y4 changed from sqrt8 to 2 on Dec 27, 2010 by monotonicity,
      Also rad2 constraint dropped.  (y_of_x rad2_x y1 y2 y3 y4 y5 y6 < &2)  *)


let mk_ineq23 i3 i5 i6 j = 
  let template = List.nth [template23b;template23b';template23c;template23c] j in
  let x i = List.nth [`&2`; `&2 * hminus` ; `sqrt8`] i in
  let X i = x (i+1) in
  let mid i = if (i>0) then 1 else 0 in
  let m = mk_small_numeral in
  let w1 = 1 +  mid i6 in
  let w2 = 1 + mid i3 + mid i5 in
    Ineq.mk_tplate template  [x i3;X i3; x i5;X i5; x i6 ;X i6; m w1; m w2];; 

let make_F23 i3 i5 i6 j = 
  let ext = List.nth ["b";"b2";"c";"d"] j in
  let template_F23_tags = [template23b_tags;template23b'_tags;template23c_tags;[]] in
   {
    id = Printf.sprintf "ZTGIJCF23 %d %d %d 7907792228 %s" i3 i5 i6 ext;
    ineq = mk_ineq23 i3 i5 i6 j;
    doc = "This is the $2$- and $3$-cell inequality for five or more leaves.";
    tags = (if (i3,i5,i6)=(0,0,0) then [Tex] else []) @ [Cfsqp;Flypaper;Xconvert;Penalty(200.0,5000.0);Tprep;Split (Ineq.split_F4 i3 0 i5 i6)] @ (List.nth template_F23_tags j);
  };;

 for j=0 to 2 do
  for k = 0 to 3 do
    let i356list = [(0,0,0);(0,0,1);(1,0,1);(0,1,1)] in (* cases up to symmetry, simplified on Dec 27, 2010. *)
    let (i3,i5,i6) = List.nth i356list k in
   Parse_ineq.execute_cfsqp (make_F23 i3 i5 i6 j) done done ;;


