

flyspeck_needs "nonlinear/ineq.hl";;





let derived = `ineq
	      [ 
		(#2.0,y1,sqrt8);
		(#2.0,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;

let ineqA = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(&2 * hplus,y2,sqrt8);
		(#2.0,y3,sqrt8);
		(#2.0,y4,sqrt8);
		(#2.0,y5,sqrt8);
		(#2.0,y6,sqrt8)
	      ]
	      (
                 (y_of_x rad2_x y1 y2 y3 y4 y5 y6 > &2))`;;

let ineqB = `ineq
	      [ 
		(#2.0,y1,&2 * hminus);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;


let ineqC = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.0,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(#2.0,y4,&2 * hminus);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0) )`;;
let ineqD = `ineq
	      [ 
		(&2 * hplus,y1,sqrt8);
		(#2.01,y2,&2 * hminus);
		(#2.0,y3,&2 * hminus);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,&2 * hminus);
		(#2.0,y6,&2 * hminus)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;
let ineqE = `ineq
	      [ 
		(&2 * hplus,y1,#2.8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(&2 * hplus,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun > &0) )`;;

let ineqF = `ineq
	      [ 
		(#2.8,y1,sqrt8);
		(#2.0,y2,#2.01);
		(#2.0,y3,#2.01);
		(#2.8,y4,sqrt8);
		(#2.0,y5,#2.01);
		(#2.0,y6,#2.01)
	      ]
	      ((gamma4f y1 y2 y3 y4 y5 y6 lmfun >= &0)   \/    (y_of_x rad2_x y1 y2 y3 y4 y5 y6 >= &2))`;;

let lemma = 
 mk_imp (( end_itlist (curry mk_conj) [
	    ineqA;ineqB;ineqC;ineqD;ineqE;ineqF]),derived);;

g(lemma);;



let all_forall = Sphere.all_forall;;


(* still need pent cases with 2 flats *)


let tt = Ineq.getprefix "test-ZTGIJCF23";;
let tts = Parse_ineq.nub (map (fun t -> t.id) tt);;
List.length tts;;
let cfsqp s = Parse_ineq.execute_cfsqp  (hd(Ineq.getexact  s));;
map cfsqp tts;;

cfsqp "test QITNPEA  5400790175 b"  ;;
cfsqp "ZHPXLTX 9620775909 3,1,0 flat B";;
cfsqp "testA";;



Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 A short";
doc = "See explanation in 2065952723";
(* arc[2,2,3.94] > 2 arc[2,2,2 hmid], to get the upper bound *)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &2 * h0);
  ((&2 / h0) pow 2, b2, &2 * h0);
  ((&2 / h0) pow 2, c2, #3.94 pow 2)
  ]
   ((num1 e1 e2 e3 a2 b2 c2 ) > &0) `;
};;

 



Parse_ineq.execute_cfsqp
  {
id = "old test 2065952723 B";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ( (x5 + x6 > #15.5) \/ (delta_x x1 x2 x3 x4 x5 x6 < &0))`;
};;

Parse_ineq.execute_cfsqp  {
id = "old test 2065952723 C";
doc = "";
tags = [Flypaper;Tex;Penalty (500.0,50000.0)];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (#15.99,a2,#16);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
((((&2 / &25) * (((-- &32) * ((a2 pow 3) * e1)) + ((&2 * ((a2 pow 4) * e1)) +  
((&32 * (a2 * ((b2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) * ((b2 pow 2) *  
e1))) + (((-- &64) * (a2 * (b2 * (c2 * e1)))) + ((&4 * ((a2 pow 2) * (b2 *  
(c2 * e1)))) + ((&32 * (a2 * ((c2 pow 2) * e1))) + (((-- &2) * ((a2 pow 2) *  
((c2 pow 2) * e1))) + ((&3200 * ((a2 pow 2) * (e1 pow 2))) + (((-- &200) *  
((a2 pow 3) * (e1 pow 2))) + ((&131072 * e2) + ((&8192 * (a2 * e2)) + ((&512  
* ((a2 pow 2) * e2)) + ((&48 * ((a2 pow 3) * e2)) + (((-- &24576) * (b2 *  
e2)) + (((-- &1536) * (a2 * (b2 * e2))) + (((-- &48) * ((a2 pow 2) * (b2 *  
e2))) + (((-- &6) * ((a2 pow 3) * (b2 * e2))) + ((&1536 * ((b2 pow 2) * e2))  
+ ((&16 * (a2 * ((b2 pow 2) * e2))) + ((&8 * ((a2 pow 2) * ((b2 pow 2) *  
e2))) + (((-- &16) * ((b2 pow 3) * e2)) + (((-- &2) * (a2 * ((b2 pow 3) *  
e2))) + (((-- &24576) * (c2 * e2)) + (((-- &1536) * (a2 * (c2 * e2))) + (((--  
&144) * ((a2 pow 2) * (c2 * e2))) + ((&3072 * (b2 * (c2 * e2))) + ((&224 *  
(a2 * (b2 * (c2 * e2)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 * e2)))) + (((--  
&144) * ((b2 pow 2) * (c2 * e2))) + ((&4 * (a2 * ((b2 pow 2) * (c2 * e2)))) +  
(((-- &1) * ((a2 pow 2) * ((b2 pow 2) * (c2 * e2)))) + ((&1536 * ((c2 pow 2)  
* e2)) + ((&144 * (a2 * ((c2 pow 2) * e2))) + (((-- &48) * (b2 * ((c2 pow 2)  
* e2))) + (((-- &18) * (a2 * (b2 * ((c2 pow 2) * e2)))) + (((-- &48) * ((c2  
pow 3) * e2)) + (((-- &3200) * ((a2 pow 2) * (e1 * e2))) + (((-- &3200) * (a2  
* (b2 * (e1 * e2)))) + ((&400 * ((a2 pow 2) * (b2 * (e1 * e2)))) + ((&3200 *  
(a2 * (c2 * (e1 * e2)))) + (((-- &204800) * (e2 pow 2)) + (((-- &12800) * (a2  
* (e2 pow 2))) + ((&25600 * (b2 * (e2 pow 2))) + ((&3200 * (a2 * (b2 * (e2  
pow 2)))) + (((-- &200) * (a2 * ((b2 pow 2) * (e2 pow 2)))) + ((&25600 * (c2  
* (e2 pow 2))) + (((-- &3200) * (b2 * (c2 * (e2 pow 2)))) + ((&131072 * e3) +  
((&8192 * (a2 * e3)) + ((&512 * ((a2 pow 2) * e3)) + ((&48 * ((a2 pow 3) *  
e3)) + (((-- &24576) * (b2 * e3)) + (((-- &1536) * (a2 * (b2 * e3))) + (((--  
&144) * ((a2 pow 2) * (b2 * e3))) + ((&1536 * ((b2 pow 2) * e3)) + ((&144 *  
(a2 * ((b2 pow 2) * e3))) + (((-- &48) * ((b2 pow 3) * e3)) + (((-- &24576) *  
(c2 * e3)) + (((-- &1536) * (a2 * (c2 * e3))) + (((-- &48) * ((a2 pow 2) *  
(c2 * e3))) + (((-- &6) * ((a2 pow 3) * (c2 * e3))) + ((&3072 * (b2 * (c2 *  
e3))) + ((&224 * (a2 * (b2 * (c2 * e3)))) + ((&16 * ((a2 pow 2) * (b2 * (c2 *  
e3)))) + (((-- &48) * ((b2 pow 2) * (c2 * e3))) + (((-- &18) * (a2 * ((b2 pow  
2) * (c2 * e3)))) + ((&1536 * ((c2 pow 2) * e3)) + ((&16 * (a2 * ((c2 pow 2)  
* e3))) + ((&8 * ((a2 pow 2) * ((c2 pow 2) * e3))) + (((-- &144) * (b2 * ((c2  
pow 2) * e3))) + ((&4 * (a2 * (b2 * ((c2 pow 2) * e3)))) + (((-- &1) * ((a2  
pow 2) * (b2 * ((c2 pow 2) * e3)))) + (((-- &16) * ((c2 pow 3) * e3)) + (((--  
&2) * (a2 * ((c2 pow 3) * e3))) + (((-- &3200) * ((a2 pow 2) * (e1 *  
e3))) + ((&3200 * (a2 * (b2 * (e1 * e3)))) + (((-- &3200) * (a2 * (c2 * (e1 *  
e3)))) + ((&400 * ((a2 pow 2) * (c2 * (e1 * e3)))) + (((-- &409600) * (e2 *  
e3)) + (((-- &25600) * (a2 * (e2 * e3))) + ((&51200 * (b2 * (e2 * e3))) +  
((&3200 * (a2 * (b2 * (e2 * e3)))) + (((-- &3200) * ((b2 pow 2) * (e2 * e3)))  
+ ((&51200 * (c2 * (e2 * e3))) + ((&3200 * (a2 * (c2 * (e2 * e3)))) + (((--  
&400) * (a2 * (b2 * (c2 * (e2 * e3))))) + (((-- &3200) * ((c2 pow 2) * (e2 *  
e3))) + (((-- &204800) * (e3 pow 2)) + (((-- &12800) * (a2 * (e3 pow 2))) +  
((&25600 * (b2 * (e3 pow 2))) + ((&25600 * (c2 * (e3 pow 2))) + ((&3200 * (a2  
* (c2 * (e3 pow 2)))) + (((-- &3200) * (b2 * (c2 * (e3 pow 2)))) + ((-- &200) *  
(a2 * ((c2 pow 2) * (e3 pow  
2))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) 
)))))))))))))))))))))) > &0) \/ (b2 + c2 < #16.0) \/ (b2 + c2 > #16.5))
`;
};;

Parse_ineq.execute_cfsqp  {
id = "test 2065952723";
doc = "
%See Mathematica numerical calculation.
% old id: eqn:gg'' calc:Lexell.
The derivatives have been computed in Mathematica and converted to
HOL format.  
This is a
  calculation of the sign of a second derivative to show that the
  function $\\tau$ does not have a interior local minimum as a function of the
  edge lengths.  It initially appears to depend on six variables, but
  the dependence on three of the variables is linear and is
  extremal at the endpoints.

Let
\\[ 
g(s;a,b,c,e_1,e_2,e_3) = \\sum_{i=1}^3 \\dih_i(2,2,2,a+s,b,c) e_i,
\\] 
where $\\dih_i$ is given by Definition~\\ref{def:tau}.
Let $\\Delta = \\Delta(4,4,4,a^2,b^2,c^2)$.
Let primes denote derivatives with respect to the variable $s$.
Assume that
$e_i\\in\\leftclosed1,1+\\sol_0/\\pi\\rightclosed$,  that
$a,b,c\\in\\leftclosed2/\\hm,4\\rightclosed$.
%We restrict $a$ further to $a\\le 3.8$.
Then
\\begin{equation}\\label{eqn:calc:Lexell}
(16-a^2) ^2 a^2(  \\Delta (g'(0;a,b,c,e_1,e_2,e_3))^2 
- 0.01\\Delta^{3/2}g''(0;a,b,c,e_1,e_2,e_3))\\ge 0.
\\end{equation}
(The factors of $\\Delta$ clear the denominator in
(\\ref{eqn:calc:Lexell}) to simplify the inequality to be proved.)
%Sum of squares methods may be the easiest way to prove this inequality near the
%minimum.
%The quantities deriv1 and deriv2 are for reference only.
Variables $e_i$ are linear and variables $a,b,c$ appear in even powers.
";
(*

*)
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, &4 pow 2);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (((num1 e1 e2 e3 a2 b2 c2 ) pow 2 - #0.01 * num2 e1 e2 e3 a2 b2 c2 > &0) \/ (a2 > #15.9))`;
};;


Parse_ineq.execute_cfsqp  {
id = "test  not used";
doc = "";
tags = [Flypaper;Tex;Eps 1.0e-8];
ineq = all_forall `ineq
  [
  (&4,x1,&4);
  (&4,x2,&4);
  (&4,x3,&4);
  (#15.99,x4,#16);
  ((&2 / h0) pow 2, x5, &4 pow 2);
  ((&2 / h0) pow 2, x6, &4 pow 2)
  ]
   ((delta_x x1 x2 x3 x4 x5 x6 < &0) \/ (x5 + x6 < #16.5))`;
};;


Parse_ineq.execute_cfsqp
  {
id = "2986512815 t0";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
((num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) > &10)  \/ 
(num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) < --  &10)  \/ 
  (num2 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y) pow 3  * (y * (&16 - y pow 2)) pow 2) +
 num2 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y) pow 3  * (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &1) \/ 
  (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;

Parse_ineq.execute_cfsqp
  {
id = "2986512815 t1";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
    (&0,t,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
( (num1 e1 e2 e3 y b a  / (  y * (&16 - y pow 2)) +
 t * num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) > &10)  \/ 
(num1 e1 e2 e3 y b a  / (y * (&16 - y pow 2)) +
 t* num1 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y)  * y * (&16 - y pow 2)) < --  &10)  \/ 
  (num2 e1 e2 e3 y b a  / (  (y * (&16 - y pow 2)) pow 2) +
 t pow 3 * num2 e4 e2 e3 y c d  / (sqrt(delta_y (&2) (&2) (&2) c d y) pow 3  * (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) a b y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &1)) `;
};;


Parse_ineq.execute_cfsqp
  {
id = "2986512815 t2";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
   (&0,t,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
((t * num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) > &10)  \/ 
(t * num1 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y)  * y * (&16 - y pow 2)) +
 num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) < --  &10)  \/ 
  (t pow 3 * num2 e1 e2 e3 y b a  / (sqrt(delta_y (&2) (&2) (&2) a b y) pow 3  * (y * (&16 - y pow 2)) pow 2) +
 num2 e4 e2 e3 y c d  / ( (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y < &1) \/ 
  (delta_y (&2) (&2) (&2) c d y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) )`;
};;

Parse_ineq.execute_cfsqp ;;

let make_WHW i j = 
  let r = match  i with
   0 -> [`&2`;`&2`;`&2`]
    |1 -> [`&2 * h0`;`&2`;`&2`]
    |2 -> [`&2`;`&2 * h0`;`&2`]
    |3 -> [`&2`;`&2`;`&2 * h0`]
    | _ ->  failwith "make_WHW" in
  let s = match j with
    0 -> [`&2`;`&2 * h0`]
    | 1 -> [`&2 * h0`;`&2`]
    | _ -> failwith "make_WHW j" in
  let t1 = r @ s in
  let t = map (fun x -> let v = mk_comb (`(pow)`,x) in mk_comb(v,`2`) ) t1 in
{
id = Printf.sprintf "PQFYWHW B'' %d %d" i j;
doc = "Pentagons with two flats 
 (that are not adjacent) satisfy the bound $D[4,1]$.  When $y_{15}=y_{45}=2$ and
  $y_{34} = 2h_0$, then the lines $\\{\\v_2,\\v_3\\}$ and $\\{\\v_4,\\v_5\\}$
are parallel and the dihedral inequality is sharp.
  % The sharp case is i=3, j=0.
The constants $d(5,0)<d(4,1)$.  We prove the stronger inequality with $d(4,1)$.  The case when $\\Delta<16$ is done as a separate calculation.
    ";
(* updated Dec 12, 2010 *)
tags = (if(i+j=0) then [Tex] else []) @ [Flypaper;Eps 1.0e-8;Penalty(1.0,2000.0)];
ineq = Ineq.mk_tplate templateB' t;
};;

map (fun (i,j) -> Ineq.add  (make_WHW i j)) [(0,0);(1,0);(2,0);(3,0);(0,1);(1,1);(2,1);(3,1)];;



Parse_ineq
 \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
  (delta_y y7 y2 y3 y4 y8 y9 < &0)
;;

Parse_ineq.execute_cfsqp 
  {
id = "2065952723 A test";
doc = "See explanation in 2065952723.  This is the branch when $a_2 \\le 15.99$.
";
tags = [Flypaper;Tex];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, #15.99);
  ((&2 / h0) pow 2, b2, &4 pow 2);
  ((&2 / h0) pow 2, c2, &4 pow 2)
  ]
   (num1 e1 e2 e3 a2 b2 c2 > &0) `;
};;

Parse_ineq.execute_cfsqp
{
id = "2986512815 u1 test";
doc = "The second derivative is always negative (with respect to the diagonal $a$) for each
simplex so the second derivative on the quad cluster  is negative. The inequality is
linear in the variables $e_i$.  Deprecated: bad variables should square $a,b,c$. ";
tags= [Tex;Cfsqp;Flypaper;Deprecated];
ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&4, a2, #3.2 pow 2);
    ((&2 / h0) pow 2, b2, #4.0 pow 2);
    ((&2 / h0) pow 2, c2, (&2 * h0) pow 2)
 ]
( num2 e1 e2 e3 a2 b2 c2    < &0)`;
};;


(*   *)
Parse_ineq.execute_cfsqp
  {
id = "2986512815 XXX";
doc = "";
tags= [Tex;Cfsqp;Eps 1.0e-8;Flypaper;Xconvert;Penalty(1000.0,2000.0)];

ineq = all_forall `ineq
 [
    (&1,e1,&1 + sol0/pi);
    (&1,e2,&1 + sol0/pi);
    (&1,e3,&1 + sol0/pi);
    (&1,e4,&1 + sol0/pi);
   (&0,t1,&1);
   (&0,t2,&1);
    (&2 / h0, a, &2 * h0);
    (&2 / h0, b, &2 * h0);
    (&2 / h0, c, &2 * h0);
    (&2, y, #3.93);
    (&2, d, #4.0)
 ]
((t1 * num1 e1 e2 e3 y b a  / ( y * (&16 - y pow 2)) +
 t2 * num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) > &10)  \/ 
(t1 * num1 e1 e2 e3 y b a  / ( y * (&16 - y pow 2)) +
 t2 * num1 e4 e2 e3 y c d  / ( y * (&16 - y pow 2)) < --  &10)  \/ 
  (t1 pow 3 * num2 e1 e2 e3 y b a  / ( (y * (&16 - y pow 2)) pow 2) +
 t2  pow 3 * num2 e4 e2 e3 y c d  / ( (y * (&16 - y pow 2)) pow 2) < &0) \/
  (delta_y (&2) (&2) (&2) a b y > &1) \/ 
  (delta_y (&2) (&2) (&2) a b y < &0) \/ 
  (delta_y (&2) (&2) (&2) c d y > &1) \/ 
  (delta_y (&2) (&2) (&2) c d y < &0) \/
    (dih_y (&2) (&2) (&2) a b y + dih_y (&2) (&2) (&2) d c y > pi) )`;
};;








process and exec: PQFYWHW B' 0 1
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..solved at 5
0..0..1..2..solved at 6
0..0..1..2..3..4..5..6..7..8..9..10..11..12..solved at 26
 -- loading interval routines 
 -- loading lineInterval routines
 -- loading univariate routines 
 -- loading derivative routines 
 -- loading taylor routines 
[0*10^4] 1292221842
[1*10^4][2*10^4][3*10^4][4*10^4][5*10^4][6*10^4][7*10^4][8*10^4][9*10^4][10*10^4] 1292224293
[11*10^4][12*10^4][13*10^4][14*10^4][15*10^4][16*10^4][17*10^4][18*10^4][19*10^4][20*10^4] 1292226810
[21*10^4][22*10^4][23*10^4][24*10^4]
{4.0000000175118453072,3.9999999999999995559,3.9999999999999995559,5.0092560090541891071,6.3503999824881622871,1.000000000000000222} {4.0000000350236897262,4.0000000000000026645,4.0000000175118453072,5.0092560265660335261,6.3504000000000067061,1.000000000000000222}  isolated point
  value=[-3.250372957700057519,0.82720419279443069271]
T0 partial 0: [-196752492.29802501202,196753527.14800095558]
T0 partial 1: [-37692347.542628057301,37695143.939589552581]
T0 partial 2: [-192284142.43257603049,192284845.92855876684]
T0 partial 3: [-55637761.19475209713,55636403.976624935865]
T0 partial 4: [-21015135.947778314352,21013577.139246817678]
T0 partial 5: [-0,0]
  value=[-4.0278910319748337798,7.0366993129172437094]
T1 partial 0: [-533896309.75308513641,533894590.21806633472]
T1 partial 1: [-102285482.11367173493,102280835.6785363555]
T1 partial 2: [-521770577.99139678478,521769409.21885812283]
T1 partial 3: [-150971838.04912099242,150974092.42736944556]
T1 partial 4: [-57021819.396817542613,57024409.080054089427]
T1 partial 5: [-0,0]
error(1292227728): corner solution failure 
FAIL
(errors: 1)

