(* ========================================================================== *)
(* FLYSPECK - CODE INFORMAL                                                   *)
(*                                                                            *)
(* Chapter: Nonlinear                                                         *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2012-04-15                                                           *)
(* ========================================================================== *)


(* Interactive scripts for the running of interval arithmetic code from 
    ineq.hl, 
*)


(* START NONLINEAR INEQS *)
(* reneeds "nonlinear/ineqdata3q1h.hl";;  *)
(* reneeds "nonlinear/strongdodec_ineq.hl";; *)

flyspeck_needs "leg/enclosed_def.hl";;
flyspeck_needs "general/sphere.hl";;
flyspeck_needs "nonlinear/ineq.hl";;
flyspeck_needs "nonlinear/mdtau.hl";;
flyspeck_needs "nonlinear/main_estimate_ineq.hl";;
flyspeck_needs "nonlinear/strongdodec_ineq.hl";;

flyspeck_needs "nonlinear/lemma.hl";;
flyspeck_needs  "nonlinear/parse_ineq.hl";;
flyspeck_needs "nonlinear/optimize.hl";;
flyspeck_needs "nonlinear/bcc_lattice.hl";;

let all_cases = 
  Parse_ineq.nub (map (fun t -> t.idv) (!Ineq.ineqs));;

List.length  all_cases;;

let finished_cases = 
  let split_sp=  Str.split (Str.regexp "\n") in
  let p = process_to_string ("cat "^flyspeck_dir
			      ^"/../interval_code/qed_log.txt   "
			     ^"| sed 's!^//.*$!!'"
			     ^"| sed  's/^.*ineq(/\"/' " 
                             ^"| sed 's/., secs.*$/\";/'   "
			     ^"| sed 's/ split(.*$//g' " 
                             ^"| sed 's/\"//g' "
			     ^" | sed 's/;//g' ") in
    Parse_ineq.nub (split_sp p);;
List.length finished_cases;;

let unfinished_cases = subtract all_cases finished_cases;;
List.length unfinished_cases;;


(*
let finished_splits = 
  let split_sp = Str.split(Str.regexp "\n") in
  let p = process_to_string("grep split "^flyspeck_dir
			      ^"/../interval_code/qed_log.txt   "
			     ^"| sed  's/^.*ineq./\"/' " 
                             ^"| sed 's/., secs.*$/\";/'   "
			     ^"| sed 's/ split.*$//g' " 
                             ^"| sed 's/\"//g' "
			     ^" | sed 's/;//g' ") in
    Parse_ineq.nub (split_sp p);;


let hassplit =  
  let a = filter (fun t -> List.length (get_split_tags t) > 0)  !Ineq.ineqs in 
  let a' = filter (fun t -> mem t.id  unfinished_cases) a in
    map (fun t-> t.id) a';;
List.length hassplit;;

*)

(* lists of inequality ids *)

let disregard = 
   [
"9563139965D"; (* derived lp, disregard it *)
  ] ;;

let testids = ref[];;
testids:= subtract (List.rev unfinished_cases) disregard;;
testids := ["OXLZLEZ 6346351218 0 22"];;
testids := ["5556646409"; "4322269127";];;  (* mdtau_y_LC not defined *) 

List.length !testids;;

(*
let view nth = hd (Ineq.getexact (List.nth !testids nth));;
idq_fields(view 0);;
view 1;;
*)

let expand_string = map (fun t->t.idv) o Ineq.getprefix;;

let special_concerns = [
  "2065952723 A1"; (* requires special code, FAILS ON THACKMAC. *)
   ] @ (expand_string  "ZTGIJCF23" (* slow *));;

let nocompile = disregard;;


(* running one id *)

(*
let testid =   "FXZXPNS";;
Optimize.testsplit false testid;;
map (Optimize.testsplit true) !testids;;
*)

let execute_interval() = 
  map (Optimize.testsplit true) (subtract all_cases disregard);;

(* goal *)

(* open Optimize;; *)

let process_cases_testid testid = 
  let idq =  (hd(Ineq.getexact testid)) in
  let (s,tags,ineq) = Optimize.idq_fields idq in
  let ls = Optimize.get_split_tags idq in
   if (ls=[]) then (s,tags,ineq) else
     let cases = Optimize.split_all_h0 [(ineq,ls)] in 
       (s^" case-",tags,List.nth cases 1);;

let interactive_debug_stuff testid = 
  let (id,tags,case) = process_cases_testid testid in
  let ife b t = e(if b then t else ALL_TAC) in
  let is_xconvert = mem Xconvert tags in
  let is_branch = mem Branching tags in
  let _ = g (mk_imp (`NONLIN`,case)) in
  let _ = e(Optimize.PRELIM_REWRITE_TAC) in
  let _ = ife (is_branch) Optimize.BRANCH_TAC in
  let _ = ife (is_xconvert) Optimize.X_OF_Y_TAC in
  let _ = ife (is_branch && not(is_xconvert))
    (Optimize.SERIES3Q1H_5D_TAC) in
  let _ = e (Optimize.STYLIZE_TAC) in
    e (Optimize.WRAPUP_TAC);;

(* TESTING CFSQP *)


let one_cfsqp t = 
  Parse_ineq.execute_cfsqp (hd(Ineq.getexact t));;

let cfsqp ts = 
  let us = map (hd o Ineq.getexact) ts in
  !(Parse_ineq.execute_cfsqp_list us);;

let execute_cfsqp() = cfsqp all_cases;;

(* Timing *)

let rec finalize = function (* use time from most recent verification *)
  | [] -> []
  | (x,t)::vs -> if (exists (fun (x',_) -> (x'=x)) vs) then finalize vs
    else  (x,t)::(finalize vs);;

let total r = 
  let rr = map snd r in
    end_itlist (+) rr;;

let hour r = float_of_int r /. (60.0 *. 60.0);;

let finished_times,finished_rejects = 
  let split_sp = Str.split (Str.regexp "\n") in
  let split_semi = Str.split (Str.regexp ";") in
  let int_s [x;y] = (x,int_of_string y) in
  let p = process_to_string ("cat "^flyspeck_dir
			      ^"/../interval_code/qed_log.txt   "
			      ^"| sed 's!^//.*$!!'"
			     ^"| sed  's/^.*ineq(//' " 
                             ^"| sed 's/., svn.*$//'   "
			      ^"| sed 's/., secs./;/' "
                             ) in
  let (accept,rejects) = partition (fun t -> List.length t =2)  
		 (map split_semi (split_sp p)) in
     (map int_s accept,Parse_ineq.nub rejects);;

let times =   
  let ft = finalize finished_times in
  let split = Str.split(Str.regexp " +split") in
  let fti = filter (fun (x,_) -> mem (hd (split x)) all_cases) ft in
    sort (fun (_,y) (_,y') -> (y>y')) fti;;

hour (total times);;

filter (fun (_,t) -> t>200) times;;


(* splits, test for missing cases, -- none found! may 27, 2011 *)

let case_splits ls = 
  let split = Str.split(Str.regexp " +split") in
  let ss = map split ls in
  let ss2 = filter (fun t-> List.length t  = 2) ss in
  let pair bs = (List.nth bs 0,List.nth bs 1) in
  let nodigit = Str.split(Str.regexp "[^0-9]") in
  let digitize s =  map int_of_string (nodigit s) in
  let f  = function      | b::bs  -> 	(b,pair (unions (map digitize bs)))
    | _ -> failwith "case_splits" in
    map f ss2;;

let rec unify_splits = function
  | [] -> []
  | (s,(_,t)):: _ as ys -> let (st,xs') = partition (fun (s',(_,t')) -> (s'=s & t'=t)) ys in
       (s,Parse_ineq.nub (map (fun (_,(r',_ )) -> r') st),t) ::unify_splits xs';;

let case_splits_execute =   
      let vv = unify_splits (case_splits (map fst finished_times)) in
	filter (fun (_,ls,r) -> not ((0--(r-1)) = sort (<) ls)) vv;;

