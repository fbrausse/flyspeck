(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Nonlinear                                                  *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2014-06-09                                                           *)
(* ========================================================================== *)

(*


*)

(* Load the build.hl up through the file merge_ineq.hl, then add the following *)

flyspeck_needs "general/serialization.hl";;
flyspeck_needs "nonlinear/prep.hl";; (* slow to load *)
flyspeck_needs "nonlinear/scripts.hl";;
flyspeck_needs "nonlinear/break_case_type.hl";;
flyspeck_needs "nonlinear/break_case_log.hl";;
flyspeck_needs "nonlinear/break_case_exec.hl";;

1;;
(* 

This uses the data from break_case_log.hl to create a collection of
terms with small domains that can in principle be verified in a short amount.



We then need to run the 5070 independent inequalities obtained as
Break_case_exec.get_nth case_number
as case_number ranges from 0 to 5069.
Each process only needs to work with a single case_number.

The C++ times are all around 1sec, giving an expected time of 2000-3000 secs in
the formally verified mode.  If they are taking much longer than this, kill the
jobs and I'll rework them.

The exact term returned by Break_case_exec.get_nth needs to be converted to a thm
by the nonlinear inequality prover.  If th is the theorem,
the data saved out to storage should contain at least the following information.

(case_number,Serialization.full_digest_thm th).

the function full_digest_thm is the Md5 digest of the theorem as a hexadecimal string.
It is not necessary to save the theorem itself out to storage in any way.  The Md5 digest suffices.

It would be useful to have additional information as well to help check answers later 
such as timestamps, OS, svn versions of HOL Light and Flyspeck, version of OCaml, etc.

Comments:

1. In the terms to be proved, I have left in the assumption 
`&0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < x1 /\
    &0 < x2 /\
    &0 < x3 /\
    &0 < x4 /\
    &0 < x5 /\
    &0 < x6`

in each inequality.  The inequalities are true without the assumption, but I left it in, thinking
that it might be useful to you.  If it doesn't help, throw it out.

2. ineq_conv does some initial expanding of definitions.
Most of the relevant definitions for expansion
appear in general/sphere.hl, a few others are in nonlinear/nonlin_def.

Nonlin_def.halfbump_x1;;
Nonlin_def.halfbump_x;;
Sphere.bump;;
Nonlin_def.unit6;;
Nonlin_def.sqrt_x1;;
Nonlin_def.sqrt_x2;; etc.

3.  Once you have the theorems, I'll attempt a reconstruction of the pieces.

*)

module Experimental_oxl_run = struct

  Break_case_exec.ineq_conv (Break_case_exec.get_nth 3);;

end;;

