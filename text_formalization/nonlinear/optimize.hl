(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: nonlinear inequalities                                            *)
(* Author:  Thomas Hales     *)
(* Date: 2010-08-30                                                           *)
(* ========================================================================== *)


(*
preprocessing for nonlinear ineq.

*)


let svn_version() = 
  let strip_final s = String.sub s 0 (String.length s - 1) in
  let p s = strip_final (process_to_string s) in
  let q s ="svn info "^s^ " | grep Revision | sed 's/Revision: //g'" in
    "svn("^p(q(flyspeck_dir))^","^p(q(hollight_dir))^")";;

flyspeck_needs "general/sphere.hl";;

let ineq = Sphere.ineq;;

(* ========================================================================== *)
(*    DEFINITIONS                                                             *)
(* ========================================================================== *)


let NONLIN = new_definition `NONLIN = F`;;

let sqrt3 = new_definition `sqrt3 = sqrt(&3)`;;

let rad2_y = new_definition `rad2_y = y_of_x rad2_x`;;

let rhazim_x = new_definition `rhazim_x x1 x2 x3 x4 x5 x6 = 
  rhazim (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let rhazim2_x = new_definition `rhazim2_x x1 x2 x3 x4 x5 x6 = 
  rhazim2 (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let rhazim3_x = new_definition `rhazim3_x x1 x2 x3 x4 x5 x6 = 
  rhazim3 (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let rhazim3_x = new_definition `rhazim3_x x1 x2 x3 x4 x5 x6 = 
  rhazim3 (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let dih4_x = new_definition `dih4_x x1 x2 x3 x4 x5 x6 = 
  dih4_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let dih5_x = new_definition `dih5_x x1 x2 x3 x4 x5 x6 = 
  dih5_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let dih6_x = new_definition `dih6_x x1 x2 x3 x4 x5 x6 = 
  dih6_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6)`;;

let mardih_x = new_definition `mardih_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x1 / #2.0) * dih_x x1 x2 x3 x4 x5 x6`;;

let mardih2_x = new_definition `mardih2_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x2 / #2.0) * dih2_x x1 x2 x3 x4 x5 x6`;;

let mardih3_x = new_definition `mardih3_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x3 / #2.0) * dih3_x x1 x2 x3 x4 x5 x6`;;

let mardih4_x = new_definition `mardih4_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x4 / #2.0) * dih4_x x1 x2 x3 x4 x5 x6`;;

let mardih5_x = new_definition `mardih5_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x5 / #2.0) * dih5_x x1 x2 x3 x4 x5 x6`;;

let mardih6_x = new_definition `mardih6_x x1 x2 x3 x4 x5 x6 = 
  marchal_quartic (sqrt x6 / #2.0) * dih6_x x1 x2 x3 x4 x5 x6`;;

let edge_flat2_x = new_definition `edge_flat2_x x1 x2 x3 x4 x5 x6 =
  (edge_flat (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x5) (sqrt x6)) pow 2`;;
 (* three dummy variables x4 x5 x6 *)

(*
let arclength6_x  = new_definition `arclength6_x x1 x2 x3 x4 x5 x6 = arclength (sqrt x1) (sqrt x2) (sqrt x3)`;;
*)

let sqrt_x1 = define `sqrt_x1 x1 x2 x3 x4 x5 x6 = sqrt x1`;;

let sqrt_x2 = define `sqrt_x2 x1 x2 x3 x4 x5 x6 = sqrt x2`;;

let sqrt_x3 = define `sqrt_x3 x1 x2 x3 x4 x5 x6 = sqrt x3`;;

let sqrt_x4 = define `sqrt_x4 x1 x2 x3 x4 x5 x6 = sqrt x4`;;

let sqrt_x5 = define `sqrt_x5 x1 x2 x3 x4 x5 x6 = sqrt x5`;;

let sqrt_x6 = define `sqrt_x6 x1 x2 x3 x4 x5 x6 = sqrt x6`;;

let halfbump_x = new_definition `halfbump_x x = bump (sqrt x / &2)`;;

let halfbump_x1 = new_definition `halfbump_x1 x1 x2 x3 x4 x5 x6 = halfbump_x x1`;;

let halfbump_x4 = new_definition `halfbump_x4 x1 x2 x3 x4 x5 x6 = halfbump_x x4`;;

let unit6 = define `unit6 x1 x2 x3 x4 x5 x6 = &1`;;

let proj_x1 = define `proj_x1 (x1:A) (x2:B) (x3:C) (x4:D) (x5:E) (x6:F) = x1`;;

let proj_x2 = define `proj_x2 (x1:A) (x2:B) (x3:C) (x4:D) (x5:E) (x6:F) = x2`;;

let proj_x3 = define `proj_x3 (x1:A) (x2:B) (x3:C) (x4:D) (x5:E) (x6:F) = x3`;;

let proj_x4 = define `proj_x4 (x1:A) (x2:B) (x3:C) (x4:D) (x5:E) (x6:F) = x4`;;

let proj_x5 = define `proj_x5 (x1:A) (x2:B) (x3:C) (x4:D) (x5:E) (x6:F) = x5`;;

let proj_x6 = define `proj_x6 (x1:A) (x2:B) (x3:C) (x4:D) (x5:E) (x6:F) = x6`;;

let promote = define `promote f (x1:A) (x2:B) (x3:C) (x4:D) (x5:E) (x6:F) = f x1`;;

let unit0 = define `unit0 = &1`;; 

let pow1 = new_definition `pow1 y = y pow 1`;;

let pow2 = new_definition `pow2 y = y pow 2`;;

let pow3 = new_definition `pow3 y = y pow 3`;;

let pow4 = new_definition `pow4 y = y pow 4`;;

(*
let asn797 = new_definition `asn797 k = 
  k * asn (cos (#0.797) * sin (pi / k))`;;
*)

let asn797k = new_definition `asn797k k x2 x3 x4 x5 x6 = 
  k * asn (cos (#0.797) * sin (pi / k))`;;

(*
let asnFn = new_definition `asnFn h k = 
  k * asn (( h * sqrt3 / #4.0 + sqrt(&1 - (h/ &2) pow 2)/ &2) * sin (pi/ k))`;;
*)

let asnFnhk = new_definition `asnFnhk h k x3 x4 x5 x6 = 
  k * asn (( h * sqrt3 / #4.0 + sqrt(&1 - (h/ &2) pow 2)/ &2) * sin (pi/ k))`;;

let compose6 = new_definition `compose6 f p1 p2 p3 p4 p5 p6 
  (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) =
  (f:real->real->real->real->real->real->real)
  (p1 x1 x2 x3 x4 x5 x6)
    (p2 x1 x2 x3 x4 x5 x6)
    (p3 x1 x2 x3 x4 x5 x6)
    (p4 x1 x2 x3 x4 x5 x6)
    (p5 x1 x2 x3 x4 x5 x6)
    (p6 x1 x2 x3 x4 x5 x6)`;;

let scale6 = new_definition `scale6 f
   (r:real)   (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
   (f x1 x2 x3 x4 x5 x6) * r`;;


let gcy = new_definition `gcy y = &4 * mm1/pi - (&8*mm2/pi) * lmfun(y/ &2)`;;

let gchi = new_definition `gchi y = (&4*mm1/pi) - (&504*(mm2/pi))/(&13) + (&200*y*(mm2/pi))/(&13) `;;


let gchi1_x = new_definition `gchi1_x x1 x2 x3 x4 x5 x6 = gchi (sqrt x1) * dih_x x1 x2 x3 x4 x5 x6`;;

let gchi2_x = new_definition `gchi2_x x1 x2 x3 x4 x5 x6 = gchi (sqrt x2) * dih2_x x1 x2 x3 x4 x5 x6`;;

let gchi3_x = new_definition `gchi3_x x1 x2 x3 x4 x5 x6 = gchi (sqrt x3) * dih3_x x1 x2 x3 x4 x5 x6`;;

let gchi4_x = new_definition `gchi4_x x1 x2 x3 x4 x5 x6 = gchi (sqrt x4) * dih4_x x1 x2 x3 x4 x5 x6`;;

let gchi5_x = new_definition `gchi5_x x1 x2 x3 x4 x5 x6 = gchi (sqrt x5) * dih5_x x1 x2 x3 x4 x5 x6`;;

let gchi6_x = new_definition `gchi6_x x1 x2 x3 x4 x5 x6 = gchi (sqrt x6) * dih6_x x1 x2 x3 x4 x5 x6`;;


(*
let rhof_x = define `rhof_x x = rho (sqrt x)`;;
*)


(*
let ineq_lemma = prove_by_refinement(
  `!a x b. &0 <= a  /\  &0 <= b /\  a pow 2 <= x /\ x <= b pow 2 ==> a <= sqrt x /\ sqrt x <= b`,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
    STRIP_TAC;
    SUBGOAL_THEN `&0 <= x` MP_TAC;
  ASM_MESON_TAC [REAL_LE_TRANS;Collect_geom.REAL_LE_SQUARE_POW];
  ASM_MESON_TAC[Collect_geom.POW2_COND;SQRT_WORKS];
  ]);;
  (* }}} *)
*)

(* ========================================================================== *)
(*    BASIC LEMMAS                                                            *)
(* ========================================================================== *)

let tame_table_d_values = prove_by_refinement(
  `tame_table_d 2 1 = #0.103 /\ tame_table_d 1 2 = #0.2759 /\ tame_table_d 0 3 = #0.4488 /\ tame_table_d 4 1 = #0.6548  /\
    tame_table_d 6 0 = #0.7578`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.tame_table_d;ARITH_RULE `2 + 2 * 1 > 3 /\ 1 + 2 * 2 > 3 /\ 0 + 2 * 3 > 3 /\ 4 + 2 *1 > 3 /\ 6 + 2 * 0 > 3` ];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let unit0f = prove_by_refinement(
  `f x1 x2 x3 x4 x5 x6 * unit0 = f x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[unit0] THEN REAL_ARITH_TAC
  ]);;
  (* }}} *)

let sqrt8_sqrt2 = prove_by_refinement(
  `sqrt8 = &2 * sqrt2`,
  (* {{{ proof *)
  [
  SIMP_TAC[Sphere.sqrt8;Sphere.sqrt2;SQRT_MUL;
	   REAL_ARITH `&8 = &2 pow 2 * &2 /\ &0 <= &2 /\ &0 <= &2 pow 2 /\ 
      abs(&2) = &2`;POW_2_SQRT_ABS];
  ]);;
  (* }}} *)

let sqrt2_sqrt8 = prove_by_refinement(
  `sqrt2 = #0.5 * sqrt8`,
  (* {{{ proof *)
  [
  REWRITE_TAC[sqrt8_sqrt2];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let sol0_const1 = prove_by_refinement(
  `sol0 = pi * const1`,
  (* {{{ proof *)
  [
  REWRITE_TAC[GSYM Tame_general.sol0_over_pi_EQ_const1];
  MP_TAC PI_POS;
  CONV_TAC REAL_FIELD;
  ]);;
  (* }}} *)

let ineq_lemma_b = prove_by_refinement(
  `!a y b. (&0 <= a  /\  &0 <= b /\  a <= y /\ y <= b)  ==> 
    a pow 2 <= y pow 2 /\ y pow 2 <= b pow 2 /\ (sqrt (y pow 2) = y)`,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
    STRIP_TAC;
    SUBGOAL_THEN `&0 <= y` MP_TAC;
  ASM_MESON_TAC [REAL_LE_TRANS];
  ASM_MESON_TAC[Collect_geom.POW2_COND;POW_2_SQRT_ABS;
		REAL_ARITH `&0 <= x ==> (x = abs x)`];
  ]);;
  (* }}} *)

(*
let ineq_square  = prove_by_refinement(
  `((!y1 y2 y3 y4 y5 y6.
      ineq 
        [(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,b5);(a6,y6,b6)]
          (P y1 y2 y3 y4 y5 y6)) ==>
      ((&0 <= a1 /\ &0 <= a2 /\ &0 <= a3 /\ &0 <= a4 /\ &0 <= a5 /\ &0 <= a6 /\
      &0 <= b1 /\ &0 <= b2 /\ &0 <= b3 /\ &0 <= b4 /\ &0 <= b5 /\ &0 <= b6 )) ==>
    (!x1 x2 x3 x4 x5 x6. 
       ineq [(a1 pow 2,x1,b1 pow 2);(a2 pow 2,x2,b2 pow 2);(a3 pow 2,x3,b3 pow 2);
        (a4 pow 2,x4,b4 pow 2);(a5 pow 2,x5,b5 pow 2);(a6 pow 2,x6,b6 pow 2)]
          (P (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6))))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ineq];
  REPEAT STRIP_TAC;
  FIRST_X_ASSUM (fun t-> MP_TAC (SPECL [`sqrt x1`;`sqrt x2`;`sqrt x3`;`sqrt x4`;`sqrt x5`;`sqrt x6`] t));
  ASM_MESON_TAC[ineq_lemma];
  ]);;
  (* }}} *)
*)

let ineq_square2  = prove_by_refinement(
  `(&0 <= a1 /\ &0 <= a2 /\ &0 <= a3 /\ &0 <= a4 /\ &0 <= a5 /\ &0 <= a6 /\
      &0 <= b1 /\ &0 <= b2 /\ &0 <= b3 /\ &0 <= b4 /\ &0 <= b5 /\ &0 <= b6 )
   /\ 
    (!x1 x2 x3 x4 x5 x6. 
       ineq [(a1 pow 2,x1,b1 pow 2);(a2 pow 2,x2,b2 pow 2);(a3 pow 2,x3,b3 pow 2);
        (a4 pow 2,x4,b4 pow 2);(a5 pow 2,x5,b5 pow 2);(a6 pow 2,x6,b6 pow 2)]
          (P (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6))) ==>
    (!y1 y2 y3 y4 y5 y6.
      ineq 
        [(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,b5);(a6,y6,b6)]
          (P y1 y2 y3 y4 y5 y6))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ineq];
  REPEAT STRIP_TAC;
  FIRST_X_ASSUM (fun t-> MP_TAC (SPECL [`y1 pow 2`;`y2 pow 2`;`y3 pow 2`;`y4 pow 2`;`y5 pow 2`;`y6 pow 2`] t));
  SUBGOAL_THEN `(sqrt (y1 pow 2) = y1) /\ (sqrt (y2 pow 2) = y2) /\  (sqrt (y3 pow 2) = y3) /\   (sqrt (y4 pow 2) = y4) /\   (sqrt (y5 pow 2) = y5) /\   (sqrt (y6 pow 2) = y6)` (fun t -> REWRITE_TAC[t]);
  ASM_MESON_TAC[ineq_lemma_b];
  REWRITE_TAC[TAUT `(a ==> b ==> c) <=> (a /\ b ==> c)`];
  DISCH_THEN MATCH_MP_TAC;
  ASM_MESON_TAC[ineq_lemma_b];
  ]);;
  (* }}} *)

let sqrt8_nn = prove_by_refinement(
  `&0 <= sqrt8`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.sqrt8];
  MATCH_MP_TAC SQRT_POS_LE;
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let basic_constants_nn = [
 REAL_ARITH `&0 <= #2.18 /\ &0 <= &2 /\ &0 <= #2.52 /\ #2.0 = &2 /\ #2 = &2 /\ &0 <= #2.25 `;
 sqrt8_nn
 ];;

let sq_pow2 = prove_by_refinement(
  `!a x. a pow 2 <= x ==> (sqrt x * sqrt x = x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[GSYM REAL_POW_2;SQRT_POW2];
  MESON_TAC[REAL_LE_TRANS;Collect_geom.REAL_LE_SQUARE_POW];
  ]);;
  (* }}} *)

let rad2_x_y = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 x1 x2 x3 x4 x5 x6.
    (a1 pow 2 <= x1) /\ (a2 pow 2 <= x2) /\ (a3 pow 2 <= x3) /\ (a4 pow 2 <= x4) /\
    (a5 pow 2 <= x5) /\ (a6 pow 2 <= x6) ==> 
    (rad2_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
         rad2_x x1 x2 x3 x4 x5 x6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[rad2_y;Parse_ineq.y_of_x_e;LET_DEF;LET_END_DEF];
  ASM_MESON_TAC[sq_pow2];
  ]);;
  (* }}} *)


let dih_x_y = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 x1 x2 x3 x4 x5 x6.
    (a1 pow 2 <= x1) /\ (a2 pow 2 <= x2) /\ (a3 pow 2 <= x3) /\ (a4 pow 2 <= x4) /\
    (a5 pow 2 <= x5) /\ (a6 pow 2 <= x6) ==> 
    (dih_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
         dih_x x1 x2 x3 x4 x5 x6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_y;LET_DEF;LET_END_DEF];
  ASM_MESON_TAC[sq_pow2];
  ]);;
  (* }}} *)

let dih2_x_y = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 x1 x2 x3 x4 x5 x6.
    (a1 pow 2 <= x1) /\ (a2 pow 2 <= x2) /\ (a3 pow 2 <= x3) /\ (a4 pow 2 <= x4) /\
    (a5 pow 2 <= x5) /\ (a6 pow 2 <= x6) ==> 
    (dih2_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
         dih2_x x1 x2 x3 x4 x5 x6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih2_y;Sphere.dih2_x;Sphere.dih_y;LET_DEF;LET_END_DEF];
  ASM_MESON_TAC[sq_pow2];
  ]);;
  (* }}} *)

let delta_x_y = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 x1 x2 x3 x4 x5 x6.
    (a1 pow 2 <= x1) /\ (a2 pow 2 <= x2) /\ (a3 pow 2 <= x3) /\ (a4 pow 2 <= x4) /\
    (a5 pow 2 <= x5) /\ (a6 pow 2 <= x6) ==> 
    (delta_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
         delta_x x1 x2 x3 x4 x5 x6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.delta_y;LET_DEF;LET_END_DEF];
  ASM_MESON_TAC[sq_pow2];
  ]);;
  (* }}} *)



let dih3_x_y = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 x1 x2 x3 x4 x5 x6.
    (a1 pow 2 <= x1) /\ (a2 pow 2 <= x2) /\ (a3 pow 2 <= x3) /\ (a4 pow 2 <= x4) /\
    (a5 pow 2 <= x5) /\ (a6 pow 2 <= x6) ==> 
    (dih3_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
         dih3_x x1 x2 x3 x4 x5 x6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih3_y;Sphere.dih3_x;Sphere.dih_y;LET_DEF;LET_END_DEF];
  ASM_MESON_TAC[sq_pow2];
  ]);;
  (* }}} *)

let vol_x_y = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 x1 x2 x3 x4 x5 x6.
    (a1 pow 2 <= x1) /\ (a2 pow 2 <= x2) /\ (a3 pow 2 <= x3) /\ (a4 pow 2 <= x4) /\
    (a5 pow 2 <= x5) /\ (a6 pow 2 <= x6) ==> 
    (vol_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = 
         vol_x x1 x2 x3 x4 x5 x6)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.vol_y;Sphere.y_of_x;LET_DEF;LET_END_DEF];
  ASM_MESON_TAC[sq_pow2];
  ]);;
  (* }}} *)


let sqrt8_2 = prove_by_refinement(
  `sqrt8 * sqrt8 = #8.0`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.sqrt8];
  MESON_TAC[REAL_POW_2;SQRT_WORKS;REAL_ARITH `&8 = #8.0 /\ &0 <= &8`];
  ]);;
  (* }}} *)

let dih_x_sym = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. dih_x x1 x2 x3 x4 x5 x6 = dih_x x1 x3 x2 x4 x6 x5`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_x;LET_DEF;LET_END_DEF];
  REPEAT GEN_TAC;
  REPEAT AP_TERM_TAC;
  REWRITE_TAC[Sphere.delta_x;Sphere.delta_x4;PAIR_EQ];
  CONJ_TAC THEN AP_TERM_TAC THEN REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let dih_x_sym2 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. dih_x x1 x2 x3 x4 x5 x6 = dih_x x1 x5 x6 x4 x2 x3`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_x;LET_DEF;LET_END_DEF];
  REPEAT GEN_TAC;
  REPEAT AP_TERM_TAC;
  REWRITE_TAC[Sphere.delta_x;Sphere.delta_x4;PAIR_EQ];
  CONJ_TAC THEN AP_TERM_TAC THEN REAL_ARITH_TAC;
  ]);;
  (* }}} *)


let dih_y_sym = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. dih_y y1 y2 y3 y4 y5 y6 = dih_y y1 y3 y2 y4 y6 y5`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_y;LET_DEF;LET_END_DEF];
  MESON_TAC[dih_x_sym];
  ]);;
  (* }}} *)

let dih_y_sym2 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. dih_y y1 y2 y3 y4 y5 y6 = dih_y y1 y5 y6 y4 y2 y3`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_y;LET_DEF;LET_END_DEF];
  MESON_TAC[dih_x_sym2];
  ]);;
  (* }}} *)

let sol_y_123 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. sol_y y1 y2 y3 y4 y5 y6 = 
    dih_y y1 y2 y3 y4 y5 y6 + dih2_y y1 y2 y3 y4 y5 y6 + dih3_y y1  y2 y3 y4 y5 y6 - pi`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.sol_y;Sphere.dih2_y;Sphere.dih3_y];
  REPEAT GEN_TAC;
  MATCH_MP_TAC (REAL_ARITH `(b = b') ==> (a + b + c -pi = a + b' + c - pi)`);
  REWRITE_TAC[Sphere.dih_y;LET_DEF;LET_END_DEF];
  MESON_TAC[dih_x_sym];
  ]);;
  (* }}} *)

let rhazim2_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. rhazim2 y1 y2 y3 y4 y5 y6 = rho y2 * dih2_y y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.rhazim2;Sphere.node2_y;Sphere.rhazim;Sphere.dih2_y;Sphere.dih_y;LET_DEF;LET_END_DEF];
  MESON_TAC[dih_x_sym];
  ]);;
  (* }}} *)

let rhazim3_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. rhazim3 y1 y2 y3 y4 y5 y6 = rho y3 * dih3_y y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.rhazim3;Sphere.node3_y;Sphere.rhazim;Sphere.dih3_y;Sphere.dih_y;LET_DEF;LET_END_DEF];
  ]);;
  (* }}} *)

let taum_123 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. taum y1 y2 y3 y4 y5 y6 = rhazim y1 y2 y3 y4 y5 y6 + rhazim2 y1 y2 y3 y4 y5 y6 + rhazim3 y1  y2 y3 y4 y5 y6 - (&1 + const1)* pi`,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
  REWRITE_TAC[Sphere.taum;sol_y_123;Sphere.lnazim];
    SUBGOAL_THEN `dih_y y2 y3 y1 y5 y6 y4 = dih2_y y1 y2 y3 y4 y5 y6 /\ dih_y y3 y1 y2 y6 y4 y5 = dih3_y y1 y2 y3 y4 y5 y6` (fun t-> REWRITE_TAC[t]);
  REWRITE_TAC[Sphere.dih_y;Sphere.dih2_y;Sphere.dih3_y;LET_DEF;LET_END_DEF] THEN MESON_TAC[dih_x_sym];
  REWRITE_TAC[Sphere.rhazim;rhazim2_alt;rhazim3_alt;Sphere.rho];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let rho_alt = prove_by_refinement(
  `!y. rho y = &1 + const1 *(y - &2) / (#0.52)`,
  (* {{{ proof *)
  [
  GEN_TAC;
  REWRITE_TAC[Sphere.rho;Sphere.ly;Sphere.interp;REAL_ARITH `#2.52 - &2 = #0.52`];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let rho_x = prove_by_refinement(
  `!x. rho (sqrt x) = &1 + const1 * (sqrt x - &2) / (#0.52)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[rho_alt];
  ]);;
  (* }}} *)

let lfun_ly = prove_by_refinement(
  `!h. lfun h = ly (&2 * h)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.lfun;Sphere.ly;Sphere.interp;Sphere.h0];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let rhazim2_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. rhazim2 y1 y2 y3 y4 y5 y6 = rho y2 * dih2_y y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.rhazim2;Sphere.node2_y;Sphere.rhazim;Sphere.dih2_y;];
  MESON_TAC[dih_y_sym];
  ]);;
  (* }}} *)

let rhazim3_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. rhazim3 y1 y2 y3 y4 y5 y6 = rho y3 * dih3_y y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.rhazim3;Sphere.node3_y;Sphere.rhazim;Sphere.dih3_y;];
  ]);;
  (* }}} *)

let beta_bump_force_x = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. beta_bump_force_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) =
    halfbump_x1 x1 x2 x3 x4 x5 x6 - halfbump_x4 x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.beta_bump_force_y;halfbump_x1;halfbump_x4;halfbump_x];
  ]);;
  (* }}} *)

let halfbump_x_expand = prove_by_refinement(
  `!x. &0 <= x ==> (halfbump_x x = 
   -- (&4398119 / &2376200) + (&17500 / &11881) * sqrt x - (&31250 / &106929) * x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[halfbump_x;Sphere.bump;Sphere.h0;Sphere.hplus];
  REPEAT STRIP_TAC;
  REWRITE_TAC[REAL_ARITH`(a/ &2 - b) pow 2 = (a pow 2) / &4 - a * b + b pow 2`];
  ASM_SIMP_TAC[SQRT_POW_2];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let vol4f_palt = prove_by_refinement(
  `!f y1 y2 y3 y4 y5 y6. vol4f y1 y2 y3 y4 y5 y6 f  = 
    (-- &8 * mm1)
    + 
    (&4 * mm1 / pi) * 
    (dih_y y1 y2 y3 y4 y5 y6 + dih2_y y1 y2 y3 y4 y5 y6 +
    dih3_y y1 y2 y3 y4 y5 y6 +
    dih4_y y1 y2 y3 y4 y5 y6 + dih5_y y1 y2 y3 y4 y5 y6 + 
     dih6_y y1 y2 y3 y4 y5 y6)
    +
    (-- &8 * mm2 / pi) * 
    (f (y1/ &2) * dih_y y1 y2 y3 y4 y5 y6 + 
    f(y2/ &2) * dih2_y y1 y2 y3 y4 y5 y6 +  
    f (y3/ &2) * dih3_y y1 y2 y3 y4 y5 y6 +
    f (y4/ &2) * dih4_y y1 y2 y3 y4 y5 y6 + 
    f(y5/ &2) * dih5_y y1 y2 y3 y4 y5 y6 + 
    f(y6/ &2) * dih6_y y1 y2 y3 y4 y5 y6)
    `,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
  REWRITE_TAC[Sphere.vol4f;Sphere.sol_y;lfun_ly;REAL_ARITH `&2 * y / &2 = y`;Sphere.rhazim;rhazim2_alt;rhazim3_alt;Sphere.rhazim4;Sphere.rhazim5;Sphere.rhazim6;];
  SUBGOAL_THEN `dih_y y2 y3 y1 y5 y6 y4 = dih2_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y3 y1 y2 y6 y4 y5 = dih3_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y3 y1 y2 y6 y4 y5 = dih3_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y4 y3 y5 y1 y6 y2 = dih4_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y5 y1 y6 y2 y4 y3 = dih5_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y6 y1 y5 y3 y4 y2 = dih6_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y6 y4 y2 y3 y1 y5 = dih6_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y2 y6 y4 y5 y3 y1 = dih2_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y1 y5 y6  y4 y2 y3 = dih_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y5 y6 y1 y2 y3 y4 = dih5_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y4 y5 y3 y1 y2 y6 = dih4_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y5 y3 y4 y2 y6 y1 = dih5_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y3 y4 y5 y6 y1 y2 = dih3_y y1 y2 y3 y4 y5 y6 /\ 
   dih_y y4 y2 y6 y1 y5 y3 = dih4_y y1 y2 y3 y4 y5 y6` (fun t-> REWRITE_TAC[t]);
  REWRITE_TAC[Sphere.dih2_y;Sphere.dih3_y;Sphere.dih4_y;Sphere.dih5_y;Sphere.dih6_y];
  MESON_TAC[dih_y_sym;dih_y_sym2];
  ONCE_REWRITE_TAC[REAL_ARITH `x  = y <=> x - y = &0`];
  ABBREV_TAC `a = mm1/pi `;
  SUBGOAL_THEN `mm1 = a * pi ` (fun t->REWRITE_TAC[t]);
  POP_ASSUM MP_TAC;
  SUBGOAL_THEN  `~(pi = &0)` MP_TAC;
  SIMP_TAC[PI_POS;REAL_ARITH `&0 < x ==> ~(x= &0)`];
  CONV_TAC REAL_FIELD;
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let lmfun0 = prove_by_refinement(
  `!y. &2 * h0 <= y ==> (lmfun (y/ &2)  = &0)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.lmfun;REAL_ARITH `&2 * h0 <= y <=> (~(y/ &2 <= h0) \/ (y/ &2 = h0))`];
  GEN_TAC;
  DISCH_THEN DISJ_CASES_TAC THEN ASM_REWRITE_TAC[REAL_ARITH `h0 <= h0`;REAL_FIELD `(h0 - h0)/(h0 - &1) = &0`];
  ]);;
  (* }}} *)

let lmfun_lfun = prove_by_refinement(
  `!y. y <= &2 * h0 ==> (lmfun (y/ &2) = lfun(y/ &2))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.lmfun;Sphere.lfun;REAL_ARITH `y <= &2 * h0 <=> y/ &2 <= h0`];
  REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[];
  ]);;
  (* }}} *)

let lmfun_lfun2 = prove_by_refinement(
  `!y. y <=  h0 ==> (lmfun (y) = lfun(y))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.lmfun;Sphere.lfun];
  REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[];
  ]);;
  (* }}} *)

let edge_flat2_x_rewrite = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. (&0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\ &0 <= x5 /\
    &0 <= x6) ==> (edge_flat2_x x1 x2 x3 x4 x5 x6 = 
    (sqrt (quadratic_root_plus
           (x1,
            (x1) * x1 +
            (x3 - x5) * (x2 - x6) -
            (x1) * (x2 + x3 + x5 + x6),
            (x1) * (x3) * x5 +
            (x1) * (x2) * x6 -
            (x3) *
            (x1 + x2 - x3 + x5 - x6) * x6 -
            (x2) *
            (x5) *
            (x1 - x2 + x3 - x5 + x6)))) pow 2)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[edge_flat2_x];
  REPEAT STRIP_TAC;
  AP_THM_TAC;
  AP_TERM_TAC;
  REWRITE_TAC[Parse_ineq.edge_flat_rewrite];
  ASM_SIMP_TAC[REAL_ARITH `sqrt x * sqrt x = (sqrt x) pow 2`;SQRT_POW2;SQRT_WORKS];
  ]);;
  (* }}} *)

let edge_quadratic = prove_by_refinement(
  `!x1 x2 x3 x5 x6. quadratic_root_plus (x1,
            x1 * x1 +
            (x3 - x5) * (x2 - x6) -
            x1 * (x2 + x3 + x5 + x6),
            x1 * x3 * x5 +
            (x1) * (x2) * x6 -  (x3) * (x1 + x2 - x3 + x5 - x6) * x6 -
	      (x2) * (x5) * (x1 - x2 + x3 - x5 + x6)) =
  (-- (x1 * x1) + x1*x2 + x1*x3 - x2*x3 + x1*x5 + x2*x5 + x1*x6 + x3*x6 - 
  x5*x6 + sqrt(ups_x x1 x3 x5 * ups_x x1 x2 x6))/(&2*x1)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.quadratic_root_plus;Sphere.ups_x];
  REPEAT STRIP_TAC;
  AP_THM_TAC;
  AP_TERM_TAC;
  REWRITE_TAC[REAL_ARITH `--(x1 * x1 + (x3 - x5) * (x2 - x6) - x1 * (x2 + x3 + x5 + x6)) + a = -- (x1 * x1) + x1 * x2 + x1 * x3 - x2 * x3 + x1 * x5 + x2 * x5 + x1 * x6 + x3 * x6 - x5 * x6 + a`];
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

(* compute hminus *)

let quartic_has_real_derivative = prove_by_refinement(
  `!s c0 c1 c2 c3 c4 . ((\x. c0 * &1 + c1 * x pow 1 + c2 * x pow 2 + c3 * x pow 3 + c4 * x pow 4) has_real_derivative (c0 * &0 + c1 * (&1 * x pow (1-1) * &1) + c2 * (&2 * x pow (2-1)) * &1 + c3 * (&3 * x pow (3-1)) * &1 + c4 * (&4 * x pow (4-1)) * &1)) (atreal x)`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
REPEAT (MATCH_MP_TAC HAS_REAL_DERIVATIVE_ADD THEN CONJ_TAC) THEN MATCH_MP_TAC (HAS_REAL_DERIVATIVE_LMUL_ATREAL) THEN REWRITE_TAC[HAS_REAL_DERIVATIVE_CONST]  THEN REWRITE_TAC[REAL_ARITH `(a * b) * c = a * b * c`] THEN MATCH_MP_TAC (HAS_REAL_DERIVATIVE_POW_ATREAL) THEN REWRITE_TAC[HAS_REAL_DERIVATIVE_ID];
  ]);;
  (* }}} *)

let POLY_CONTINUITY_TAC =  
 REPEAT (MATCH_MP_TAC REAL_CONTINUOUS_ON_ADD THEN 
 CONJ_TAC) THEN 
 REPEAT (MATCH_MP_TAC REAL_CONTINUOUS_ON_LMUL) THEN 
 (MATCH_MP_TAC REAL_CONTINUOUS_ON_POW) THEN 
 REWRITE_TAC[REAL_CONTINUOUS_ON_ID];;

let quartic_continuous_on = prove_by_refinement(
  `!s c0 c1 c2 c3 c4 .  (\x. c0 * x pow 0 + c1 * x pow 1 + c2 * x pow 2 + c3 * x pow 3 + c4 * x pow 4) real_continuous_on s`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  POLY_CONTINUITY_TAC;
  ]);;
  (* }}} *)

let marchal_minus_lfun = prove_by_refinement(
  `!h. marchal_quartic h - lfun h = 
   (inv(&65 * &1627 * (sqrt(&2) - &1))) * (h - &1)*
    (( -- &512505 + &770958*sqrt(&2)) * h pow 0 + 
    ( -- &364208 -  &1295359*sqrt(&2)) * h pow 1 +
   ( &1295359 + &585000*sqrt(&2))* h pow 2 + 
   (-- &585000) * h pow 3)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.marchal_quartic;Sphere.lfun;REAL_ARITH `x/y = x * inv y /\ #1.26 - &1 = &13/ &50 /\ #1.3254 - &1 = &1627/ &5000 /\ &65 = &5 * &13`;REAL_INV_INV;REAL_INV_MUL;Sphere.hplus;Sphere.h0];
  GEN_TAC;
  SUBGOAL_THEN `&0 < sqrt(&2) - &1 ` MP_TAC THENL [ALL_TAC;CONV_TAC REAL_FIELD];
  SUBGOAL_THEN `#1.414213 < sqrt(&2) ` MP_TAC THENL[ALL_TAC;REAL_ARITH_TAC];
  REWRITE_TAC[GSYM Sphere.sqrt2;Flyspeck_constants.bounds];
  ]);;
  (* }}} *)

let hminus_cont = prove_by_refinement(
  `!s. (\h. marchal_quartic h - lfun h) real_continuous_on s`,
  (* {{{ proof *)
  [
  GEN_TAC;
  REWRITE_TAC[marchal_minus_lfun];
  MATCH_MP_TAC REAL_CONTINUOUS_ON_LMUL;
 MATCH_MP_TAC REAL_CONTINUOUS_ON_MUL THEN REWRITE_TAC[REAL_ARITH `h - &1 = (-- &1) * h pow 0 + &1 * h pow 1`] THEN CONJ_TAC THEN POLY_CONTINUITY_TAC;
  ]);;
  (* }}} *)


let sqrt2_lb = prove_by_refinement(
  `#1.414213 < sqrt2 `,
  (* {{{ proof *)
  [
  REWRITE_TAC[Flyspeck_constants.bounds];
  ]);;
  (* }}} *)

let STRIP_NN_TAC = REPEAT (CONJ_TAC ORELSE MATCH_MP_TAC REAL_LE_MUL ORELSE CHANGED_TAC (REWRITE_TAC[REAL_LE_INV_EQ;REAL_ARITH `a >= &0 <=> &0 <= a /\ ((a*b)*c = a*b*c)`;REAL_INV_MUL]));;

let hminus_exists = prove_by_refinement(
  `?x. (#1.2 <= x /\ x < #1.3 /\ marchal_quartic x = lmfun x)`,
  (* {{{ proof *)
  [
    SUBGOAL_THEN `(?x. x IN real_interval [#1.2,#1.26] /\ (\x. marchal_quartic x - lfun x) x = &0)` MP_TAC;
    MATCH_MP_TAC REAL_IVT_INCREASING;
    BETA_TAC;
    REWRITE_TAC[hminus_cont];
    REWRITE_TAC[marchal_minus_lfun;GSYM Sphere.sqrt2];
   ASSUME_TAC sqrt2_lb;
   SUBGOAL_THEN `&0 < sqrt2 - &1` ASSUME_TAC;
   POP_ASSUM MP_TAC;
   REAL_ARITH_TAC;
   REWRITE_TAC[(* REAL_INV_MUL;REAL_INV_INV; *) REAL_ARITH `#1.2- &1 = &1 / &5 /\ #1.26 - &1 = &13 / &50`];
    CONJ_TAC THENL[REAL_ARITH_TAC;ALL_TAC];
    SUBGOAL_THEN `sqrt2 < #1.414214` ASSUME_TAC;
   REWRITE_TAC[Flyspeck_constants.bounds];
   SUBGOAL_THEN ` ((-- &512505 + &770958 * sqrt2) * #1.26 pow 0 +  (-- &364208 - &1295359 * sqrt2) * #1.26 pow 1 +  (&1295359 + &585000 * sqrt2) * #1.26 pow 2 +  -- &585000 * #1.26 pow 3) = -- &212787729/ &2500 + &3377583 *sqrt2 /(&50)` (fun t-> REWRITE_TAC[t]);
   REAL_ARITH_TAC;
   SUBGOAL_THEN `((-- &512505 + &770958 * sqrt2) * #1.2 pow 0 +  (-- &364208 - &1295359 * sqrt2) * #1.2 pow 1 +  (&1295359 + &585000 * sqrt2) * #1.2 pow 2 +  -- &585000 * #1.2 pow 3) = -- &2377941/ &25 + (& 294636* sqrt2)/ &5`  (fun t-> REWRITE_TAC[t]);
   REAL_ARITH_TAC;
   REWRITE_TAC[REAL_ARITH `a * b * c <= &0 <=> (&0 <= a * b * (-- c))`];
   STRIP_NN_TAC THEN (REPEAT (POP_ASSUM MP_TAC)) THEN TRY REAL_ARITH_TAC; 
   (* last subgoal *)
   REWRITE_TAC[real_interval;IN_ELIM_THM];
   REPEAT STRIP_TAC;
   EXISTS_TAC `x:real`;
   SUBGOAL_THEN `x <= &2 * h0` ASSUME_TAC;
   REWRITE_TAC[Sphere.h0];
   UNDISCH_TAC `x <= #1.26` THEN REAL_ARITH_TAC;
   ASM_SIMP_TAC [Sphere.h0;lmfun_lfun2];
   REPEAT (POP_ASSUM MP_TAC);
   REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let hminus_prop = prove_by_refinement(
  `#1.2 <= hminus /\ hminus < #1.3 /\ marchal_quartic hminus = lmfun hminus`,
  (* {{{ proof *)
  [
  MP_TAC hminus_exists;
  MP_TAC hminus;
  MESON_TAC[];
  ]);;
  (* }}} *)

let hminus_high = prove_by_refinement(
  `!h. (h0 <= h) ==> lmfun h = &0`,
  (* {{{ proof *)
  [
    REWRITE_TAC[Sphere.lmfun;REAL_ARITH `h0 <= h <=> (~(h <= h0) \/ (h = h0))`];
  GEN_TAC;
  DISCH_THEN DISJ_CASES_TAC THEN ASM_REWRITE_TAC[REAL_ARITH `h0 <= h0`;REAL_FIELD `(h0 - h0)/(h0 - &1) = &0`];
  ]);;
  (* }}} *)

let hminus_lt_h0 = prove_by_refinement(
  `!h. (&1 <= h) /\ (h < hplus) ==> (marchal_quartic h > &0)`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  REWRITE_TAC[Sphere.marchal_quartic];
  REWRITE_TAC[REAL_ARITH `(h-hplus)*(&9 * h pow 2 - &17 * h + &3)/u = (hplus - h)*(&17 * h - &9 * h pow 2 -  &3)/u /\ (u > &0 <=> &0 < u)`];
  MATCH_MP_TAC REAL_LT_MUL;
  CONJ_TAC;
  POP_ASSUM MP_TAC;
  SUBGOAL_THEN `&0 < sqrt(&2) - hplus` MP_TAC;
  REWRITE_TAC[Flyspeck_constants.bounds];
  REAL_ARITH_TAC;
MATCH_MP_TAC REAL_LT_MUL;
  CONJ_TAC;
  POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
  MATCH_MP_TAC REAL_LT_DIV;
  REWRITE_TAC[Flyspeck_constants.bounds];
  REPEAT (POP_ASSUM MP_TAC);
  REWRITE_TAC[Sphere.hplus];
  ABBREV_TAC `u = h - &1`;
  SUBGOAL_THEN `h = u + &1` (fun t->REWRITE_TAC[t]);
  POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
  REWRITE_TAC[REAL_FIELD `(&1 <= u + &1 <=> &0 <= u) /\ (u + &1 < #1.3254 <=> u < #0.3254) /\ (&17 * (u + &1) - &9 * (u+ &1) pow 2 - &3 = -- &9 * u pow 2 - u + &5)`];
  POP_ASSUM (fun t->ALL_TAC);
  REPEAT STRIP_TAC;
  SUBGOAL_THEN `u pow 2 < #0.3254 pow 2` MP_TAC;
  REWRITE_TAC[ GSYM REAL_LT_SQUARE_ABS];
  REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC;
  REPEAT (POP_ASSUM MP_TAC);
  ABBREV_TAC `v = u pow 2`;
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let hminus_lt_h0 = prove_by_refinement(
  `hminus < h0`,
  (* {{{ proof *)
  [
  REWRITE_TAC [REAL_ARITH `x < y <=> ~(x >= y)`];
  STRIP_TAC;
  MP_TAC hminus_prop;
  REPEAT STRIP_TAC;
  POP_ASSUM MP_TAC;
  MATCH_MP_TAC (REAL_ARITH `a > b ==>((a:real) = b ==> F)`);
  SUBGOAL_THEN `lmfun hminus = &0` (fun t -> REWRITE_TAC[t]);
  MATCH_MP_TAC hminus_high;
  UNDISCH_TAC `hminus >= h0` THEN REAL_ARITH_TAC;
  MATCH_MP_TAC   hminus_lt_h0;
  REPEAT (POP_ASSUM MP_TAC);
  REWRITE_TAC[Sphere.hplus;Sphere.h0];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let hminus_gt = prove_by_refinement(
  `#1.2 <= hminus`,
  (* {{{ proof *)
  [
  REWRITE_TAC[hminus_prop];
  ]);;
  (* }}} *)

let lminus_ge_h0 = prove_by_refinement(
  `!h. (hplus <= h) /\ (h <= sqrt (&2)) ==> (marchal_quartic h <= &0)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.marchal_quartic];
  REWRITE_TAC[REAL_ARITH `a * b * c /d <= &0 <=> &0 <= a * b * (-- c)/d`];
  REPEAT STRIP_TAC;
  MATCH_MP_TAC REAL_LE_MUL;
  CONJ_TAC;
  POP_ASSUM MP_TAC;
  REAL_ARITH_TAC;
  MATCH_MP_TAC REAL_LE_MUL;
  CONJ_TAC;
  REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC;
  MATCH_MP_TAC REAL_LE_DIV;
  CONJ_TAC;
  (* *)
    REPEAT (POP_ASSUM MP_TAC);
  REWRITE_TAC[Sphere.hplus];
  ABBREV_TAC `u = h - &1`;
  SUBGOAL_THEN `h = u + &1` (fun t->REWRITE_TAC[t]);
  POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
  REWRITE_TAC[REAL_FIELD `(&1 <= u + &1 <=> &0 <= u) /\ (#1.3254 <= u + &1 <=>  #0.3254 <= u) /\ (-- (&9* (u + &1) pow 2 - &17 * (u+ &1)  + &3) = -- &9 * u pow 2 - u + &5)`];
  REPEAT STRIP_TAC;
  SUBGOAL_THEN `u pow 2 < #0.42 pow 2` MP_TAC;
  REWRITE_TAC[ GSYM REAL_LT_SQUARE_ABS];
  POP_ASSUM MP_TAC;
  POP_ASSUM MP_TAC;
  EXPAND_TAC "u";
  SUBGOAL_THEN `sqrt(&2) - &1 < #0.42` (fun t-> (MP_TAC t) THEN REAL_ARITH_TAC);
  SUBGOAL_THEN `sqrt(&2) <  #1.414214` MP_TAC;
  REWRITE_TAC[GSYM Sphere.sqrt2;Flyspeck_constants.bounds];
  REAL_ARITH_TAC;
  SUBGOAL_THEN `u < #0.414214` MP_TAC;
  SUBGOAL_THEN `sqrt(&2) <  #1.414214` MP_TAC;
  REWRITE_TAC[GSYM Sphere.sqrt2;Flyspeck_constants.bounds];
  POP_ASSUM MP_TAC;
  REAL_ARITH_TAC;
  REAL_ARITH_TAC;
  MATCH_MP_TAC (REAL_ARITH `&0 < x ==> &0 <= x`);
  REWRITE_TAC[Flyspeck_constants.bounds];
  ]);;
  (* }}} *)

let gcy_high  = prove_by_refinement(
  `!y. (&2 * h0 <= y) ==> (gcy y = &4 * mm1/pi)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[gcy];
  SIMP_TAC[lmfun0];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let gcy_low = prove_by_refinement(
  `!y. (y <= &2 * h0) ==> (gcy y = gchi y)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[gcy;gchi];
  SIMP_TAC[lmfun_lfun];
  REWRITE_TAC[Sphere.lfun;Sphere.h0];
  REPEAT STRIP_TAC;
  ABBREV_TAC `m = mm2/pi`;
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let gcy_low_hminus = prove_by_refinement(
  `!y. (y <= &2 * hminus) ==> (gcy y = gchi y)`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  MATCH_MP_TAC gcy_low;
  POP_ASSUM MP_TAC;
  MP_TAC hminus_lt_h0;
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let vol4f_lmfun = prove_by_refinement(
  `! y1 y2 y3 y4 y5 y6. vol4f y1 y2 y3 y4 y5 y6 lmfun  = 
    (-- &8 * mm1)
    + 
    gcy y1 * dih_y y1 y2 y3 y4 y5 y6 + gcy y2 * dih2_y y1 y2 y3 y4 y5 y6 +
    gcy y3 * dih3_y y1 y2 y3 y4 y5 y6 +
    gcy y4 * dih4_y y1 y2 y3 y4 y5 y6 + 
      gcy y5 * dih5_y y1 y2 y3 y4 y5 y6 + 
    gcy y6 * dih6_y y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
    REWRITE_TAC[vol4f_palt;gcy];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let vol4f_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. vol4f y1 y2 y3 y4 y5 y6 lfun  = 
    (-- &8 * mm1)
    + 
    (&4 * mm1/pi - &8 * mm2 *(&1+const1)/(pi * const1) ) *
    (dih_y y1 y2 y3 y4 y5 y6 + dih2_y y1 y2 y3 y4 y5 y6 + dih3_y y1 y2 y3 y4 y5 y6 +
    dih4_y y1 y2 y3 y4 y5 y6 + dih5_y y1 y2 y3 y4 y5 y6 + dih6_y y1 y2 y3 y4 y5 y6)
    +
    (&8 * mm2 / (pi * const1)) * 
    (rhazim y1 y2 y3 y4 y5 y6 + rhazim2 y1 y2 y3 y4 y5 y6 + rhazim3 y1 y2 y3 y4 y5 y6 +
    rhazim4 y1 y2 y3 y4 y5 y6 + rhazim5 y1 y2 y3 y4 y5 y6 + rhazim6 y1 y2 y3 y4 y5 y6)
    `,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
    REWRITE_TAC[vol4f_palt];
  REWRITE_TAC[Sphere.sol_y;lfun_ly;REAL_ARITH `&2 * y / &2 = y`;Sphere.rhazim;rhazim2_alt;rhazim3_alt;Sphere.rhazim4;Sphere.rhazim5;Sphere.rhazim6;];
  REWRITE_TAC[Sphere.rho;Sphere.node2_y;Sphere.node3_y;Sphere.rhazim];
  ONCE_REWRITE_TAC[REAL_ARITH `x  = y <=> x - y = &0`];
  SUBGOAL_THEN  `~(pi = &0)` ASSUME_TAC;
  SIMP_TAC[PI_POS;REAL_ARITH `&0 < x ==> ~(x= &0)`];
  SUBGOAL_THEN `~(const1 = &0)`   MP_TAC;
  REWRITE_TAC[GSYM Tame_general.sol0_over_pi_EQ_const1];
  MP_TAC Tame_general.sol0_POS;
  FIRST_X_ASSUM MP_TAC;
  CONV_TAC REAL_FIELD;
  FIRST_X_ASSUM MP_TAC;
  CONV_TAC REAL_FIELD;
  ]);;
  (* }}} *)



let vol2f_marchal_pow_y = prove_by_refinement(
  `!r y. vol2f y r marchal_quartic = 
       let fac = (-- (&8 * mm2/pi) * &2 * pi * inv ( #1.627 * (sqrt2 - &1)))  in 
    (&2 * mm1 / pi)  * &2 * pi 
     - (&2 * mm1 /pi) * &2 * pi * inv(r * &2) * y pow 1
   - fac * &3 * sqrt2 *hplus 
    + fac *(#1.5 * sqrt2 + #1.5 * hplus + #8.5 * sqrt2 * hplus) * y pow 1
   + fac * (-- #0.75  - #8.5 * sqrt2 * inv(&2) - #8.5 * hplus * inv(&2) - &9 * hplus * sqrt2 * inv (&4)) * y pow 2 
    + fac* ( #17.0 * inv (&8) + #9.0 * sqrt2 * inv(&8) + #9.0 * hplus * inv(&8)) * y pow 3 
    - fac * #9.0 * inv(&16) * y pow 4`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.vol2f;Sphere.marchal_quartic;LET_DEF;LET_END_DEF;Sphere.hplus;GSYM Sphere.sqrt2;REAL_ARITH `(sqrt2 - &1) * &5 * (#1.3254 - &1) = #1.627 * (sqrt2- &1)`];
    REPEAT GEN_TAC;
  REWRITE_TAC[GSYM Sphere.hplus;real_div];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let vol2r_y = prove_by_refinement(
  `!y r. vol2r y r = &2 * pi * r * r * inv (&3) - #0.5 * pi * inv(&3) * y pow 2`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.vol2r;real_div];
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let ineq_expand = prove_by_refinement(
  `!a1 a2 a3 a4 a5 a6 b1 b2 b3 b4 b5 b6 x1 x2 x3 x4 x5 x6 P. (ineq [(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,b5);(a6,y6,b6)] P) <=> 
  (a1 <= y1 /\ y1 <= b1
     ==> a2 <= y2 /\ y2 <= b2
     ==> a3 <= y3 /\ y3 <= b3
     ==> a4 <= y4 /\ y4 <= b4
     ==> a5 <= y5 /\ y5 <= b5
     ==> a6 <= y6 /\ y6 <= b6
     ==> P)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ineq];
  ]);;
  (* }}} *)


let pathL_bound = prove_by_refinement(
  `!y a.  FST (pathL a) <= y /\ y <= SND (pathL a) ==>
    FST a <= y /\ y <= SND a`,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
    SUBGOAL_THEN `pathL a = pathL (FST a, SND a)` (fun t->ONCE_REWRITE_TAC[t]);
  REWRITE_TAC[PAIR];
    REWRITE_TAC[Sphere.pathL];
    REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let pathR_bound = prove_by_refinement(
  `!y a. FST (pathR a) <= y /\ y <= SND (pathR a) ==>
    FST a <= y /\ y <= SND a`,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
    SUBGOAL_THEN `pathR a = pathR (FST a, SND a)` (fun t->ONCE_REWRITE_TAC[t]);
  REWRITE_TAC[PAIR];
    REWRITE_TAC[Sphere.pathR];
    REAL_ARITH_TAC;
  ]);;
  (* }}} *)



(* ========================================================================== *)
(*    PARSING INEQUALITIES                                                    *)
(* ========================================================================== *)


let quoted s = let q = "\"" in (q^s^q);;

let i_mk s = "interval::interval ("^quoted s ^")";;

let string_of_num' = Parse_ineq.string_of_num';;

let dest_decimal = Parse_ineq.dest_decimal;;

let join_comma = Parse_ineq.join_comma;;

let cpp_assoc = 
  let pref = "taylorSimplex::" in
  let p (a,b) = (a, (pref^b)) in map p 
  [("unit6","unit");
  ("proj_x1","x1");("proj_x2","x2");("proj_x3","x3");
  ("proj_x4","x4");("proj_x5","x5");("proj_x6","x6");
   ("sqrt_x1","y1");   ("sqrt_x2","y2");   ("sqrt_x3","y3");  
   ("sqrt_x4","y4");   ("sqrt_x5","y5");   ("sqrt_x6","y6");
   ("dih_x","dih"); ("dih2_x","dih2");("dih3_x","dih3");
   ("dih4_x","dih4"); ("dih5_x","dih5");("dih6_x","dih6");
  ("mardih_x","marchalDih");  ("mardih2_x","marchalDih2");  ("mardih3_x","marchalDih3");
  ("mardih4_x","marchalDih4");  ("mardih5_x","marchalDih5");  ("mardih6_x","marchalDih6");
  ("sol","sol");
  ("rad2_x","rad2");
   ("delta_x","delta");
   ("delta_x4","delta_x4");
   ("rhazim_x","rhazim");("rhazim2_x","rhazim2");("rhazim3_x","rhazim3");
   ("vol_x","vol_x");
   ("gchi1_x","gchi1_x");
("gchi2_x","gchi2_x");
("gchi3_x","gchi3_x");
("gchi4_x","gchi4_x");
("gchi5_x","gchi5_x");
("gchi6_x","gchi6_x");
("halfbump_x1","halfbump_x1");
("halfbump_x4","halfbump_x4");
 ];;

let cpp0_assoc = 
  [("sqrt8","sqrt8");("pi","pi");("const1","const1");("hminus","hminus");("sqrt3","sqrt3")];;


let x6list =  [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`];;

let cpp_of_fun s xs = 
  let _ = (xs = x6list) or failwith ("x6 list expected in "^s) in
    try (assoc s cpp_assoc) with Failure _ -> failwith (s^"find: cpp_of_fun") ;;

let cpp_of_constant s  = 
    try (assoc s cpp0_assoc) with Failure _ -> failwith (s^" find: cpp_of_constant") ;;


let cpp_string_of_term t = 
 let rec ccform t =
  let soh = ccform in
  if is_var t then fst (dest_var t) else
  let (f,xs) = strip_comb t in
  let ifix i = let [a;b] = xs in "(" ^ soh a ^ " " ^ i ^ " " ^ soh b ^ ")" in
  let ifix_swapped i = let [b;a] = xs in "(" ^ soh a ^ " " ^ i ^ " " ^ soh b ^ ")" in
  (if not (is_const f) then failwith ("Oracle error: " ^ string_of_term f));
  match fst (dest_const f) with
(*  | "real_gt" | "real_ge" | "real_sub" -> ifix "-" *)
(*  | "real_lt" | "real_le" -> ifix_swapped "-" *)
  | "real_add" -> ifix "+"
  | "real_mul" -> ifix "*"
  | "real_div" -> ifix "/"
  | "\\/" -> ifix "\\/"
  | "real_neg" -> let [a] = xs in "(-" ^ soh a ^ ")"
(*  | "acs" -> let [a] = xs in "(acos("^soh a^ "))" *)
  | "real_of_num" -> let [a] = xs in i_mk(soh a)  
  | "NUMERAL" -> let [a] = xs in string_of_num' (dest_numeral t)
  | "<" -> let [a;b] = xs in "(" ^ soh a ^ " < " ^ soh b ^ ")"
  | ">" -> let [a;b] = xs in "(" ^ soh a ^ " > " ^ soh b ^ ")"
  | "+" -> let [a;b] = xs in "(" ^ soh a ^ " + " ^ soh b ^ ")"
  | "*" -> let [a;b] = xs in "(" ^ soh a ^ " * " ^ soh b ^ ")"
  | "DECIMAL" ->  i_mk(string_of_num' (dest_decimal t))
  | "COND" -> let [a;b;c] = xs in "( "^ soh a ^ " ? " ^ soh b ^ " : " ^ soh c ^ ")" 
(*  | "atn2"      -> let [ab] = xs in let (a,b) = dest_pair ab in  
         "(atn2( " ^ soh a ^ "," ^ soh b ^ "))"  *)
  | s -> if (xs = []) then "("^cpp_of_constant s^")"  else "(" ^ cpp_of_fun s xs  ^ ")" in
   try (ccform t) with Failure s -> failwith (s^" .......   "^string_of_term t);;


(* processing *)

let dest_nonlin t = 
  let (_,r,il) = Parse_ineq.dest_ineq t in 
  let p1 (a,_,_) = a in
  let p2 (_,b,_) = b in
  let p3 (_,_,c) = c in
  let dest x = try dest_binop `(real_lt)` x with Failure _ -> dest_binop `(real_le)` x in
  let (iis,zzs) = unzip( map (dest) il) in
  let zz = Parse_ineq.nub zzs in
  let _ = (zz = [`&0`]) or failwith "zero expected" in
  let _ = (map p2 r = x6list) or failwith "x1..x6 expected" in
  (map p1 r, map p3 r,iis);;

(* let join_semi = Parse_ineq.unsplit ";" (fun t -> t);; *)

let cpp_template = Printf.sprintf "
 char* svn = %s;
 char* ineq_id = %s;
 int testRun()
	{
	interval tx[6]={%s};
	interval tz[6]={%s};
	domain x = domain::lowerD(tx);
	domain z = domain::upperD(tz);
	taylorFunction F = %s;
	//F.setReducibleState(0);
        cellOption opt;
	return generic (x,z,F,%d);
	}";;

let cpp_template2 = Printf.sprintf "
 char* svn = %s;
 char* ineq_id = %s;

 int testRun()
	{
	interval tx[6]={%s};
	interval tz[6]={%s};
	domain x = domain::lowerD(tx);
	domain z = domain::upperD(tz);
        domain x0=x;
        domain z0=z;
	taylorFunction F1 = %s;
	taylorFunction F2 = %s;
	//F1.setReducibleState(0);
	//F2.setReducibleState(0);
        const taylorFunction* I[2] = {&F1,&F2};
        cellOption opt;
	return prove::recursiveVerifier(0,x,z,x0,z0,I,2,opt);
	}";;

let mk_cpp_proc t s sharp = 
  let c = map cpp_string_of_term in
  let f (x,y,z) = (c x,c y,c z) in
  let (aas,bbs,iis) = f (dest_nonlin t) in
  let len = List.length iis in
  let _ = (len < 3) or failwith "mk_cpp_proc: disjunctions not installed" in
  let sq = quoted s in
  let svn = (quoted(svn_version())) in
  let jaas = join_comma aas in
  let jbbs = join_comma bbs in
  if (len < 2) then cpp_template svn sq jaas jbbs (hd iis) sharp
  else cpp_template2 svn sq jaas jbbs (List.nth iis 0) (List.nth iis 1);;

(* mk_cpp_proc testineq testid;;
    next: put together header, proc, tail and run *)

let tmpfile = flyspeck_dir^"/../interval_code/test_auto.cc";;

let join_lines = Parse_ineq.join_lines;;

(* from glpk_link.ml *)

let load_and_close_channel do_close ic = 
  let rec lf ichan a = 
    try
      lf ic (input_line ic::a)
    with End_of_file -> a in
    let rs = lf ic [] in
      if do_close then close_in ic else ();
      rev rs;;

let load_file filename = 
  let ic = Pervasives.open_in filename in load_and_close_channel true ic;;

let cpp_header() = join_lines (load_file  (flyspeck_dir^"/../interval_code/generic_head.txt"));;

let cpp_tail() = join_lines (load_file  (flyspeck_dir^"/../interval_code/generic_tail.txt"));;

let mkfile_cpp  t s sharp = 
  Parse_ineq.output_string tmpfile 
   (join_lines [cpp_header(); (mk_cpp_proc t s sharp);cpp_tail()]);;

let compile_cpp () = 
  let err = "/tmp/cpp_err.txt" in
  let e = Sys.command("cd "^flyspeck_dir^"/../interval_code; make test_auto >& "^err) in
  let _ =   (e=0) or (let _ = Sys.command ("cat "^err) in failwith "compiler error") in
    ();;

 let execute_interval ex (t,s,sharp) = 
  let interval_dir = flyspeck_dir^"/../interval_code" in
  let _ =  mkfile_cpp t s sharp in
  let _ = compile_cpp() in 
  let _ = (not ex) or (0=  Sys.command(interval_dir^"/test_auto")) or failwith "interval execution error" in
    ();;



(* ========================================================================== *)
(*    MEGA PREP    TACTICS                                                    *)
(* ========================================================================== *)


(* for big series in ineqdata... *)



let OR_RULE rule1 rule2 th = try rule1 th with _ -> rule2 th;;

let rec REPEAT_RULE rule =
  fun t -> if can rule t then REPEAT_RULE rule (rule t) else t;;

let TPREP_TAC = EVERY[
REWRITE_TAC[REAL_ARITH `x / &1 = x /\ &0 * x = &0 /\ &0 +x = x`];
REWRITE_TAC[Sphere.gamma4f;vol4f_lmfun];
REWRITE_TAC[ineq_expand];
DISCH_TAC;
REPEAT GEN_TAC;
REPEAT DISCH_TAC;
ASSUM_LIST (let rec r = function | [] -> ALL_TAC | th::ths -> (MP_TAC (REPEAT_RULE (OR_RULE (MATCH_MP pathL_bound) (MATCH_MP pathR_bound)) th)) THEN r ths in r);
REWRITE_TAC[];
SIMP_TAC[gcy_low;gcy_low_hminus;gcy_high];
REPEAT (DISCH_THEN (fun t-> ALL_TAC));
REPEAT (POP_ASSUM MP_TAC);
REWRITE_TAC[GSYM ineq_expand];
DISCH_TAC;
EVERY (map SPEC_TAC [(`y6:real`,`y6:real`);(`y5:real`,`y5:real`);(`y4:real`,`y4:real`);(`y3:real`,`y3:real`);(`y2:real`,`y2:real`);(`y1:real`,`y1:real`)]);
POP_ASSUM MP_TAC;]
;;

let ineq6_of_ineq5 = prove_by_refinement(
  `!a1 a2 a3 a4 a5 y1 y2 y3 y4 y5 b1 b2 b3 b4 b5 P. 
((!x1 x2 x3 x4 x5 x6. ineq[(a1,x1,b1);(a2,x2,b2);(a3,x3,b3);(a4,x4,b4);(a5,x5,b5);(&1,x6,&1)] 
   (P x1 x2 x3 x4 x5)) ==> 
    ineq[(a1,y1,b1);(a2,y2,b2);(a3,y3,b3);(a4,y4,b4);(a5,y5,b5)]
   (P y1 y2 y3 y4 y5))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ineq];
  MESON_TAC[REAL_ARITH `&1 <= &1`];
  ]);;
  (* }}} *)

let SERIES3Q1H_5D_TAC = 
  let instjx = INST_TYPE [(`:real`,`:A`);(`:real`,`:B`);(`:real`,`:C`);
			  (`:real`,`:D`);(`:real`,`:E`);(`:real`,`:F`)] in
  let PROJX = map instjx [ proj_x1;proj_x2;proj_x3;proj_x4;proj_x5;proj_x6] in
  let projx = list_mk_conj (map (concl o GSYM) PROJX ) in
 (REPEAT STRIP_TAC   THEN MATCH_MP_TAC ineq6_of_ineq5) THEN
 (REWRITE_TAC[Sphere.pathL;Sphere.pathR;Sphere.hplus;Sphere.h0]) THEN
 (REWRITE_TAC[ineq_expand]) THEN
 (REPEAT GEN_TAC THEN REPEAT DISCH_TAC) THEN
 (SUBGOAL_THEN projx (fun t -> PURE_ONCE_REWRITE_TAC[t])) THENL
 [(REWRITE_TAC PROJX);ALL_TAC] THEN
 (REPEAT (POP_ASSUM MP_TAC)) THEN
 (REWRITE_TAC[GSYM ineq_expand]);;

let get_macro_expand() = (
   [vol4f_palt;Parse_ineq.y_of_x_e;(* Parse_ineq.vol_y_e; *)
   Sphere.vol3f;Sphere.vol3r;Sphere.vol2f;Sphere.gamma4f;
   Sphere.gamma3f;Sphere.gamma23f;GSYM Parse_ineq.quadratic_root_plus_curry;
   REAL_MUL_LZERO;
   REAL_MUL_RZERO;FST;SND;Sphere.pathL;Sphere.pathR;
   Sphere.node2_y;Sphere.node3_y] @ (!Ineq.dart_classes));;

let xspec = SPECL [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`];;

let X_OF_Y_TAC = 
  (
  (DISCH_TAC) THEN
  (REWRITE_TAC[GSYM Sphere.rad2_y]) THEN
  (REWRITE_TAC(get_macro_expand())) THEN
  (MATCH_MP_TAC ineq_square2) THEN
  (REWRITE_TAC basic_constants_nn) THEN
  REWRITE_TAC[GSYM CONJ_ASSOC] THEN
  (REPEAT (CONJ_TAC THENL[MP_TAC hminus_gt THEN REWRITE_TAC[Sphere.h0;Sphere.hplus] THEN REAL_ARITH_TAC;ALL_TAC])) THEN
  (REPEAT GEN_TAC) THEN
  (REWRITE_TAC [sol_y_123;taum_123]) THEN
  (REWRITE_TAC[ineq]) THEN
  (REPEAT DISCH_TAC) THEN
  (SUBGOAL_THEN       `rad2_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = rad2_x x1 x2 x3 x4 x5 x6 /\ dih2_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = dih2_x x1 x2 x3 x4 x5 x6 /\         dih3_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = dih3_x x1 x2 x3 x4 x5 x6 /\         dih_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = dih_x x1 x2 x3 x4 x5 x6 /\  dih4_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = dih4_x x1 x2 x3 x4 x5 x6 /\dih5_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = dih5_x x1 x2 x3 x4 x5 x6 /\dih6_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = dih6_x x1 x2 x3 x4 x5 x6 /\      delta_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = delta_x x1 x2 x3 x4 x5 x6 /\ vol_y (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x4) (sqrt x5) (sqrt x6) = vol_x x1 x2 x3 x4 x5 x6`          (fun t-> REWRITE_TAC[t;(GSYM rhazim_x); (GSYM rhazim2_x);xspec (GSYM rhazim3_x)]) THENL[ (ASM_MESON_TAC[rad2_x_y;dih_x_y;dih2_x_y;delta_x_y;dih3_x_y;GSYM dih4_x;GSYM dih5_x;GSYM dih6_x;vol_x_y;]);ALL_TAC]) THEN
  REWRITE_TAC[REAL_ARITH `&2 = #2.0`;GSYM mardih_x;GSYM mardih2_x;GSYM mardih3_x;GSYM mardih4_x;GSYM mardih5_x;GSYM mardih6_x;beta_bump_force_x;GSYM gchi1_x;GSYM gchi2_x;GSYM gchi3_x;GSYM gchi4_x;GSYM gchi5_x;GSYM gchi6_x] THEN
  (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN
  (REWRITE_TAC[GSYM ineq_expand]) THEN
  (REWRITE_TAC[REAL_ARITH `(&2 = #2.0) /\ (x pow 2 = x * x) /\ (#2.0 * #2.0 = #4.0) /\ (#2.18 * #2.18 = #4.7524 ) /\ (#2.52 * #2.52 = #6.3504)`;sqrt8_2;Sphere.h0;Sphere.hplus]) THEN
  ALL_TAC);;

let EXPAND_lfun = 
  (SUBGOAL_THEN `lfun x1 = (#1.26 - proj_x1  (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real))/(#0.26)` (fun t-> REWRITE_TAC[t])) THENL [
  REWRITE_TAC[Sphere.lfun;proj_x1;Sphere.h0;REAL_ARITH `#1.26 - &1 = #0.26`];ALL_TAC] ;;

let REMOVE_dummy = SUBGOAL_THEN `!(f:bool). (!(dummy:real). ineq [&1,dummy,&1] f) = (!(x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real). ineq[(&1,x1,&1);(&1,x2,&1);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)] f)` (fun t-> REWRITE_TAC[t]) THENL[  REWRITE_TAC[ineq] THEN  MESON_TAC[REAL_ARITH `~(&2 <= &1)`]; ALL_TAC];;

let EXPAND_1var = SUBGOAL_THEN `!(f:real->bool) a b. (!(y:real). ineq [a,y,b] (f y)) = (!(x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real). ineq[(a,x1,b);(&1,x2,&1);(&1,x3,&1);(&1,x4,&1);(&1,x5,&1);(&1,x6,&1)] (f x1))` (fun t-> REWRITE_TAC[t]) THENL [REWRITE_TAC[ineq] THEN  MESON_TAC[REAL_ARITH `(&1 <= &1)`];ALL_TAC] ;;


let REAL_SIMPLIFY_EXPRESSION =  let
  arith = REAL_ARITH `!x y z. (&8 = #8) /\ (x - y = x + (-- #1.0) * y) /\ 
  (x * (y+z) = x * y + x * z) /\ (y+z) * x = y * x + z * x /\ 
  (x + y) + z = x + y + z /\ (-- x * -- y = x * y) /\ (x * -- y = -- x * y) /\ 
  (-- x * y = -- (x * y)) /\ (x * y) * z = x * y * z /\ -- #1.0 * x = -- x /\ 
  -- (x + y) = -- x + (--y) /\ -- (-- x) = x /\ (-- (-- x * y) = x * y) /\
   #0.0 = &0 /\ #0 = &0 /\ &0 * x = &0 /\ x * &0 = &0 /\ (&0 + x = x) /\ 
  -- &0 = &0 /\ (x + &0 = x) /\ (&0 + x = x) /\
  &1 * x = x /\ -- &1 * x = -- x /\ x * sqrt8 = sqrt8 * x    ` in
  (REWRITE_TAC[REAL_POW_MUL;real_div;REAL_MUL_LZERO; REAL_MUL_RZERO;arith]) ;;

let EXPAND_SQRT = 
  (SUBGOAL_THEN `sqrt x1 = sqrt_x1 x1 x2 x3 x4 x5 x6 /\ sqrt x2 = sqrt_x2 x1 x2 x3 x4 x5 x6 /\ sqrt x3 = sqrt_x3 x1 x2 x3 x4 x5 x6 /\ sqrt x4 = sqrt_x4 x1 x2 x3 x4 x5 x6 /\ sqrt x5 = sqrt_x5 x1 x2 x3 x4 x5 x6 /\ sqrt x6  = sqrt_x6 x1 x2 x3 x4 x5 x6` (fun t->REWRITE_TAC[t])  THENL [REWRITE_TAC[sqrt_x1;sqrt_x2; sqrt_x3;sqrt_x4;sqrt_x5;sqrt_x6];ALL_TAC]) ;;

(* for 1d inequality involving vol2f marchal *)

let EXPAND_vol2 = 
REWRITE_TAC[vol2f_marchal_pow_y;vol2r_y] THEN
  SUBGOAL_THEN `x1 pow 1 = promote pow1 x1 x2 x3 x4 x5 x6 /\ x1 pow 2 = promote pow2 x1 x2 x3 x4 x5 x6 /\ x1 pow 3 = promote pow3 x1 x2 x3 x4 x5 x6 /\ x1 pow 4 = promote pow4 x1 x2 x3 x4 x5 x6` (fun t->REWRITE_TAC[t]) THENL[ REWRITE_TAC[promote;pow1;pow2;pow3;pow4];REWRITE_TAC[LET_DEF;LET_END_DEF]] ;;

let DEF_expand = [Sphere.a_spine5;Sphere.b_spine5;Sphere.mm1;
		  Sphere.flat_term;
   Sphere.mm2;GSYM Sphere.sqrt2;GSYM sqrt3;GSYM Sphere.sqrt8;sol0_const1;sqrt2_sqrt8;
   Sphere.mm1;Sphere.mm2;Sphere.tau0;Sphere.hplus;tame_table_d_values];;

let STYLIZE_TAC = 
  REMOVE_dummy  THEN
  EXPAND_1var THEN
  DISCH_TAC THEN REPEAT GEN_TAC THEN
  EXPAND_vol2 THEN (* added Sep 8 , 2010 *)
  REWRITE_TAC  DEF_expand THEN (* moved down sep 8 *)
  EXPAND_lfun THEN
  REWRITE_TAC[ineq] THEN
  (REPEAT DISCH_TAC) THEN
  (ONCE_REWRITE_TAC[REAL_ARITH `(x < y <=> (x- y < &0)) /\ (x <= y <=> (x-y <= &0))`]) THEN
  (REWRITE_TAC[REAL_ARITH `(x > y <=> (y - x < &0) ) /\ (x >= y <=> (y-x <= &0))`]) THEN
  EXPAND_SQRT THEN
  REAL_SIMPLIFY_EXPRESSION THEN
  (SUBGOAL_THEN `!x. ((x < &0) <=> (unit0 * x < &0)) /\ ((x <= &0) <=> (unit0 * x <= &0))` (fun t -> ONCE_REWRITE_TAC[t])) THENL [REWRITE_TAC[unit0;REAL_ARITH `&1 * x = x`];ALL_TAC] THEN
  (REWRITE_TAC[REAL_ARITH `f x1 x2 x3 x4 x5 x6 * (y:real) = y * f x1 x2 x3 x4 x5 x6 /\ ((x * y) * z = x * y * z)`]) THEN
  (REWRITE_TAC[REAL_ARITH `unit0 * (x + y ) = unit0 * x + unit0 * y /\ unit0 * --x = --(unit0 * x) /\ (unit0 * x  = x  * unit0) /\ (x * y) * z = x * y * z`]) THEN
  (REWRITE_TAC[REAL_ARITH `unit0 * x = x * unit0`]) THEN
  (REWRITE_TAC[unit0f]) THEN
  (SUBGOAL_THEN `unit0 = unit6 (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real)` (fun t-> REWRITE_TAC[t])) THENL [REWRITE_TAC[unit0;unit6];ALL_TAC] THEN

  (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN
  (REWRITE_TAC[GSYM ineq_expand]) THEN DISCH_TAC;;

let WRAPUP_TAC = 
(REWRITE_TAC[REAL_ARITH `(x * y * (z:real)) = (x * y) * z`]) THEN
  (REWRITE_TAC[REAL_ARITH `(y:real) * f x1 x2 x3 x4 x5 x6 =  (f x1 x2 x3 x4 x5 x6) *  y `]) THEN
 (REWRITE_TAC[REAL_ARITH ` -- (x * y) = x * (-- y) `]) THEN
 (REWRITE_TAC[REAL_ARITH ` -- (f x1 x2 x3 x4 x5 x6) = f x1 x2 x3 x4 x5 x6 * -- &1`]) THEN
 (REWRITE_TAC[REAL_ARITH `(x * y) * (z:real) = x * y * z`]) THEN
  (REWRITE_TAC[REAL_ARITH `inv y = (&1/y)`]);;

(* ========================================================================== *)
(*    VERIFYING INEQUALITIES                                                  *)
(* ========================================================================== *)


let get_testcase s = 
  let idq =  hd(Ineq.getexact s) in
  let b = mem Xconvert idq.tags in
  (idq,Parse_ineq.strip_let_tm idq.ineq);;

let is_xconvert (idq,_) = mem Xconvert idq.tags;;

let is_series3q1h (idq,_) = mem Series3q1h idq.tags;;

let test ex s = 
  let testid = s in
  let testcase = get_testcase  testid in
  let _ = g (mk_imp (`NONLIN`,(fun (_,c) -> c) testcase)) in
  let _ = if (is_series3q1h testcase) then e(TPREP_TAC) else e(ALL_TAC) in
  let _ = if (is_xconvert testcase) then e (X_OF_Y_TAC) else e(ALL_TAC) in
  let _ =   if (is_series3q1h testcase && not(is_xconvert testcase)) then
    e(SERIES3Q1H_5D_TAC) else e(ALL_TAC) in
  let _ = e (STYLIZE_TAC) in
  let _ = e (WRAPUP_TAC) in
  let sharp = if  mem Sharp (fst testcase).tags then 1 else 0 in
  let testineq = snd(top_goal()) in
    execute_interval ex (testineq,testid,sharp);;

let slowtests = ["5691615370";"1395142356";"3636849632"; ];;

let testids = [(* "HJKDESR2"; *) "1965189142 34";"ZTGIJCF0";"1550635295";
   "2563100177";"4652969746 2";"5735387903";"4047599236";"7726998381";
    "7394240696";"7718591733";"1085358243";"8611785756"; "181212899 1"; 
    "8657368829";"1894886027";"2390583444";"1248932983";"6725783616";
     "9185711902";"6284721194";"3137600529"];;

let more = ["TADIAMB";"TSKAJXY";  "IYOUOBF"; "WKGUESB"; "XLLIPLS"; "GXSABWC";];;
map (Parse_ineq.execute_cfsqp o hd o Ineq.getexact) more;;
(*
test true (List.nth testids 0);;
*)



let testid = List.nth more 0;;
(* let testid = "2390583444";; *)
let testcase = get_testcase  testid;;


(* map (test true) more;; *)

(* Parse_ineq.execute_cfsqp (List.nth testids 0);; *)

(* goal *)

g (mk_imp (`NONLIN`,(fun (_,c) -> c) testcase));;
if (is_series3q1h testcase ) then e(TPREP_TAC) else e(ALL_TAC);; 
if (is_xconvert testcase) then e (X_OF_Y_TAC) else e(ALL_TAC);;
if (is_series3q1h testcase && not(is_xconvert testcase)) then e(SERIES3Q1H_5D_TAC) else e(ALL_TAC);;
e (STYLIZE_TAC);;
e (WRAPUP_TAC);;

(* FIRST PASS OVER FULL LIST OF INEQS, SCAFFOLDING *)

let preprocess = REWRITE_RULE (DEF_expand @ Parse_ineq.get_macro_expand());; 

  let constants_of_id t = map fst (Parse_ineq.nub(Print_types.get_const_types 
   (concl(preprocess
   (ASSUME ((fun (_,c) -> c) (get_testcase t)))))));;

let get_const t = 
  let r = constants_of_id t in
  let knowns = 
    ["ineq";"real_neg";"lfun";
     "taum";"dih_y";"dih2_y";"dih3_y";"sqrt3";
     "beta_bump_force_y";"rad2_x";"vol_x";"delta_y";"delta_x4";"sol_y";
     "rhazim";"rhazim2";"rhazim3";
    (* constants *)
     "h0"; "hplus"; "sol0"; "mm1"; "mm2"; "hminus";  "beta_bump_lb"; 
    "a_spine5";"b_spine5";"sqrt8";"sqrt2";"pi";"const1";
    ] in
  let f = filter (fun s -> not (mem s knowns)) in
    f r;;

(*
let allids  =map (fun t-> t.id) (!Ineq.ineqs);;

let has_const c t = mem c (get_const t);;

let ineq_of_ids ids = map (fun (a,b) -> b) (map (get_testcase) ids);;

Parse_ineq.get_macro_expand();;


(*

let constant_list = Parse_ineq.nub (List.flatten (map get_const allids));;

  ["tauq"; "enclosed"; "edge_flat"; 
     "vol2r"; 

  (* polynomials *)

  (* case split *)
    "lmfun"; 
   
  (* implemented *)
   "arclength"; "eta_y"; "marchal_quartic"; "acs"; "norm2hh";
    "asn"; "cos"; "sin"; "sqrt";
  (* define away *)
  "flat_term";
  ]
*)

let has_edge_flat = filter (has_const "edge_flat") allids;;
let has_vol2r = filter (has_const "vol2r") allids;;
map concl (map preprocess (map ASSUME (ineq_of_ids has_edge_flat)));;

let mk_goodid() = filter (fun t -> List.length(get_const t) = 0) allids;;
map get_const testids;;
*)

(*
let goodid = mk_goodid();;
*)
searcht 5 [`edge_flat`];;

(* NEXT *)
Sphere.vol2r;;
Sphere.flat_term;;
(* next: filter out those that have run and pick a new one to do. *)

let non_test = [
 "9563139965" (* tauq, enclosed *);
  "GYQVFXJ hexD 1" (* edge_flat;  *);
  "2986512815" (* 9 variable polynomial *);
];;


(* some benchmarks 
(id, hales's nitpick time "H:MM:SS", zumkeller's sergei time "H:MM:SS");

*)

[("7394240696","0:01:32","0:29:26");
 ("7726998381","0:01:03","0:06:16");
 ("4047599236","0:01:04","0:00:59");
("5735387903","0:00:13","0:00:03");
("1550635295","0:00:01","0:00:46");
("1395142356","0:05:13","1:57:15");
 ];;

(*
Parse_ineq.execute_cfsqp (hd (Ineq.getexact "1395142356"));;
constrained min: 0.000999588577191658
*)

(*
process_to_string "cat qed_log.txt | sed  's/^.*ineq./\"/' | sed 's/., secs.*$/\";/'  "

cat qed_log.txt | sed  's/^.*ineq./"/' | sed 's/., secs.*$/";/' | sort -u | wc  

(*
let _ = Sys.command("cat "^flyspeck_dir^"/../interval_code/qed_log.txt");;
*)
*)


