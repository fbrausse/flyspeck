(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Nonlinear                                                  *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2011-05-13                                                           *)
(* ========================================================================== *)

(*

STILL MISSING: quad inequalites for non ad hoc tame table.
  hex inequalities.

*)

(* New test inequalities from May 2011.  Redo all the tameTableD calculations,
    together with associated nontriangular ad hoc LP estimates. 

    The three nontriangular ad hoc LP estimates are
   In head.mod:
   tauB4h 9620775909 apex4 tau >= 0.477, quad, diags >= sqrt8, one edge [2.52,sqrt8]
   tau5h  9620775909-5 std5 INTER std56flatfree, tau >= 0.696, pent, diags >= sqrt8,

   In body.mod:
   9563139965D, dart4_diag3_b, tau >= 0.467, quad, diags >= 3.

*)


(* This file does *not* treat the standard quad LP cases:
     ["3862621143";"4240815464";"6944699408";"7043724150"]
    which are proved by usual quad methods (with Dim_red_backsym option *)

let all_forall = Sphere.all_forall;;


addtex (Section,"Tame Table D","Deformation 206");;

Parse_ineq.execute_cfsqp
{
  idv = "8008451940 A";
  doc="Used to maintain nonreflexivity when making 206-deformations.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.0);
    (#3.01,y4,#3.01);
    (&2,y5,#2.52);
      (&2,y6,&2)
  ]
(dih_y y1 y2 y3 y4 y5 y6 > pi / &2)`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "8008451940 B";
  doc="Used to maintain nonreflexivity when making 206-deformations.";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,&2);
    (&2,y3,&2);
    (#3.01,y4,#3.01);
    (&2,y5,#2.52);
      (&2,y6,#2.52)
  ]
(dih_y y1 y2 y3 y4 y5 y6 > pi / &2)`;
};;


addtex (Section,"Tame Table D","Hexagons");;

Parse_ineq.execute_cfsqp
{
  idv = "1928747871-0";
  doc="pure hexagon case";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (#3.01,y5,#3.915);
      (#3.01,y6,#3.915)
  ]
    (taum y1 y2 y3 y4 y5 y6 
    >  tame_table_d 6 0   \/ y_of_x eulerA_x y1 y2 y3 y4 y5 y6 < &0 )`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "1928747871-1";
  doc="pure hexagon case";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (#3.01,y5,#3.915);
      (#3.01,y6,#3.915)
  ]
(let y126 = edge_flat y6 y1 (&2)    (&2) y2 in
(let y135 = edge_flat y5 y1 (&2)    (&2) y5 in
(let y234 = edge_flat y4 y2 (&2)    (&2) y3 in
    (taum y1 y2 y3 y4 y5 y6 
  + taum y126 y1 y2 y6 (&2) (&2)
  + taum y135 y1 y3 y5 (&2) (&2)
  + taum y234 y2 y3 y4 (&2) (&2) 
    > &3 * #0.001 + tame_table_d 6 0  ) \/
  y_of_x eulerA_x y1 y2 y3 y4 y5 y6 < &0 \/  
 (y126 < #2.0 \/ y126 > #2.52 \/
  y135 < #2.0 \/ y135 > #2.52 \/ 
  y234 < #2.0 \/ y234 > #2.52))))`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "1928747871-2";
  doc="pure hexagon case";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.4);
    (&2,y2,#2.4);
    (&2,y3,#2.4);
    (#3.01,y4,#3.47);
    (#3.01,y5,#3.47);
      (#3.01,y6,#3.47)
  ]
((taum y1 y2 y3 y4 y5 y6 > tame_table_d 6 0  ) \/
  y_of_x eulerA_x y1 y2 y3 y4 y5 y6 < &0)`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "1928747871-(1)";
  doc="pure hexagon case, side triangle";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
(let y234 = edge_flat y4 y3 (&2)     (&2) y2 in
(taum y1 y2 y3 y4 y5 y6 + #0.013 > taum y234 y2 y3 y4 y5 y6) \/
(y234 > #2.52) \/ (y234 < #2.0)))`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "1928747871-(2)";
  doc="pure hexagon case, side triangle (2)";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
(taum y1 y2 y3 y4 y5 y6 + #0.001 > taum (#2.52) y2 y3 y4 y5 y6) \/
(delta_y (#2.52) y2 y3 y4 y5 y6 < &0) \/ (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
taum (#2.52) y2 y3 y4 y5 y6 > taum (&2) y2 y3 y4 y5 y6 
)`;
};;

  

Parse_ineq.execute_cfsqp
{
  idv = "1928747871-(3)";
  doc="pure hexagon case, side triangle (3)";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
  ( taum y1 y2 y3 y4 y5 y6 + #0.09 > taum (&2) y2 y3 y4 y5 y6) \/
  (delta_y (&2) y2 y3 y4 y5 y6 < &0) \/
(delta_y (#2.52) y2 y3 y4 y5 y6 < &0) \/
 (delta_y y1 y2 y3 y4 y5 y6 < &0)
)`;
};;

(* taum (#2.52) y2 y3 y4 y5 y6 > taum (&2) y2 y3 y4 y5 y6 \/

*)



Parse_ineq.execute_cfsqp
{
  idv = "";
  doc="upper bound on variable for hex case";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#4.0)
  ]
((y3 < #3.915) \/ (arclength y1 (&2) (&2) + arclength y2 (&2) (&2) < arclength y1 y2 y3))`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "test temp";
  doc="pure hexagon case";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (#3.3,y4,#3.915);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
    (rhazim  y1 y2 y3 y4 y5 y6  + #0.6 * (-- &2 * y1 +  y2 + y3) > &0 \/ delta_y y1 y2 y3 y4 y5 y6 < &0)`;
};;


addtex (Section,"Tame Table D","Pentagons, all edges 2, combining 0.696 and tame table");;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case, clipped smallest angled side triangle.
   If dih clipped < 2.355, then y4 < 3.63";
  tags = [Cfsqp;Xconvert;Tex];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.63,y4,#3.915);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
(dih_y y1 y2 y3 y4 y5 y6 > #2.355 )\/ 
  (delta_y y1 y2 y3 y4 y5 y6 < &0)  )`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case, clipped smallest angled side triangle.
   If all dih > 2.355, then tau >= 5 (2.355) - 3 (pi + sol0) > 0.696 =largest pent constant";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.63);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
  ( taum y1 y2 y3 y4 y5 y6  > #0.0) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
(dih_y y1 y2 y3 y4 y5 y6 > #2.355 ) )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case, clipped smallest angled side triangle.
   prove constraint on edge lengths.";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.63);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
  ( (y4 - #3.2) < #0.55 * (y2 + y3 - &4)) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) \/
(dih_y y1 y2 y3 y4 y5 y6 > #2.355 ) )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case, quad piece, cut along y9";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
      (#2.0,y1,&2 * h0);
      (#2.0,y2,&2 * h0);
      (#2.0,y3,&2 * h0);
      (#3.01,y4,#3.915);
      (#2.0,y5,&2);
      (#2.0,y6,&2);
      (#2.0,y7,&2 * h0);
      (#2.0,y8,&2);
      (#3.01,y9,#3.63)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9  > #0.696) \/
  ((y9 - #3.2) > #0.55 * (y2 + y7 - &4)) \/
  ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #3.01 ))`;
};;

addtex (Section,"Tame Table D","Pentagons table[4,1]");;

(*
tameTableD[4,1]=0.6548.
*)

Parse_ineq.execute_cfsqp
  {
idv = "2065952723  experiment";
doc = "In a pentagon with one long edge, we can contract the long edge to 2.52, or even to 2, using 2 diags";
tags = [Cfsqp;Tex;Flypaper[];];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  ((&2 / h0) pow 2, a2, #3.01 pow 2);
  (#2.38 pow 2, b2, #15.53);
  (#2.38 pow 2, c2, #15.53)
  ]
   ((num1 e1 e2 e3 a2 b2 c2  > &0) ) `;
};;



(* We continue to contract the long edge, even make it less than 2.52,
    until it reaches 2, in which case (0) the 0.696 estimate takes over.
    (1) Or until a diagonal hits 3.01, when we cut away the long edge into a triangle,
   leaving a quad with top edges 2,2,2,3.01.  The shortest edge of the quad
   is given by Solve[Delta[x,2,2,x,2,3.01]==0,x], which implies x <= 3.166.
   Cut along this diagonal to triangulate.
    (2) Or until two diagonals hit 3.01, triangulating the pent. *)


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case (4,1), clipped triangle.  In this case y4=3.01, y6=2, but ineq
    slightly generalized for later quad";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (sqrt8,y4,#3.01);
    (&2,y5,#2.52);
      (&2,y6,#2.52)
  ]
(
  ( taum y1 y2 y3 y4 y5 y6  - #0.1 * (#3.01 - y4) > #0.11) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) 
 )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case, clipped A-piece triangle.
   prove constraint on edge lengths.";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.01);
    (#3.01,y5,#3.01);
      (&2,y6,#2.52)
  ]
(
  ( taum y1 y2 y3 y4 y5 y6 > tame_table_d 4 1 - &2 * #0.11) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) 
 )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case (4,1), quad piece, cut along y9";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
      (#2.0,y1,&2 * h0);
      (#2.0,y2,&2 * h0);
      (#2.0,y3,&2 * h0);
      (#3.01,y4,#3.915);
      (#2.0,y5,&2);
      (#2.0,y6,&2);
      (#2.0,y7,&2 * h0);
      (#2.0,y8,&2);
      (#3.01,y9,#3.01)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9  > tame_table_d 4 1 - &2 * #0.11) \/
  ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #3.01 ))`;
};;



addtex (Section,"Tame Table D","Quadrilaterals");;

(* Let's start with the ad hoc inequality:  9563139965D.
    By top edge contraction arguments, we may assume that (0) all top edges
    have length 2, or (1) both diagonals have length 3.
    The first case (0) is impossible by geomeric considerations: 
   edges=2 ==> some diagonal <= sqrt8.
   So both diagonals have length 3.
   This has been completely solved in a series "9563139965D" in ineq.hl.
*)

(* Next the ad hoc inequality :
    tauB4h 9620775909. tau >= 0.477, quad, diags >= sqrt8, one edge [2.52,sqrt8].

*)

(* Case 1: a diagonal < 3.01 *)


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="pentagon case, clipped A-piece triangle.
   prove constraint on edge lengths.
   We reuse the other cut triangle (bound 0.11) from above.";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (sqrt8,y4,#3.01);
    (#2.52,y5,sqrt8);
      (&2,y6,&2)
  ]
(
  ( taum y1 y2 y3 y4 y5 y6 + #0.1 * (#3.01 - y4) > #0.477 -  #0.11) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) 
 )`;
};;

(* Case 2: both diags > 3.01
    Solve[Delta[x, 2, 2, x, 2, sqrt8] == 0, x] // N gives shorter diag y4 <= 3.108
 *)


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="quad case both diags > 3.01, y9 long";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
      (#2.0,y1,&2 * h0);
      (#2.0,y2,&2 * h0);
      (#2.0,y3,&2 * h0);
      (#3.01,y4,#3.108);
      (#2.0,y5,&2);
      (#2.0,y6,&2);
      (#2.0,y7,&2 * h0);
      (#2.0,y8,&2);
      (#2.52,y9,sqrt8)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9  > #0.477) \/
  ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #3.01 ))`;
};;

(* Now Quad 0.696. 
   tau5h  9620775909-5 std5 INTER std56flatfree, tau >= 0.696, pent, diags >= sqrt8,
   It drops down to a quad case if some diag of pent has length < 3.01 and a cut is made.
   Contract top edges until 3 have length 2.
   Short diag: Solve[Delta[x,2,2,x,2,3.01]==0,x]//N, gives x <= 3.166
*)


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="quad case both diags > 3.01, y9 long";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
      (#2.0,y1,&2 * h0);
      (#2.0,y2,&2 * h0);
      (#2.0,y3,&2 * h0);
      (#3.01,y4,#3.166);
      (#2.0,y5,&2);
      (#2.0,y6,&2);
      (#2.0,y7,&2 * h0);
      (#2.0,y8,&2);
      (sqrt8,y9,#3.01)]
(( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9    > #0.696 - #0.11) \/
  ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #3.01 ))`;
};;

(* This finishes all the ad hoc quadrilaterals.  Now the  tame table entries *)

(*
XX
ADD
*)

addtex (Section,"Tame Table D","Triangles");;

(*
If the cut edge is between [sqrt8,3.01], the triangle (2,1) has tau < tame_table_d 2 1.
Nevertheless tau > 0.11
We must compensate by putting an extra (tame_table_d 2 1 - 0.11) in the other pieces.
*)

(*
Special LP.  The case.
   tauB4h 9620775909 apex4 tau >= 0.477, quad, diags >= sqrt8, one edge [2.52,sqrt8]
   This can split into a triangle (2,1) [2.52,sqrt8][sqrt8,3.01] and a triangle (1,2).
   In this case we run a similar calc, replace tame_table_d entries with 0.477 - 0.11.
   
   tau5h  9620775909-5 std5 INTER std56flatfree, tau >= 0.696, pent, diags >= sqrt8,
   This will give an A-piece with [sqrt8,3.01][sqrt8,3.01].  need 0.696 - 2 0.11.

   9563139965D, dart4_diag3_b, tau >= 0.467, quad, diags >= 3.
   No triangle occurs here.  No diagonal drawn.

*)

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 2,1";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (&2,y5,&2);
      (#2.52,y6,#2.52)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 2 1
 )`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 2,1";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (&2,y5,&2);
      (sqrt8,y6,sqrt8)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 2 1
 )`;
};;

(* skip 2,1 long edge 3.01 *)

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#2.52,y5,#2.52);
      (#2.52,y6,#2.52)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 1 2
 )`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#2.52,y5,#2.52);
      (sqrt8,y6,sqrt8)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 1 2 + tame_table_d 2 1 - #0.11
          
 )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2 ad hoc  case.
    If the y4 edge is extremal at 2.52, we get at least tameTableD[0,3] > 0.477-0.11.
     So that case folds into the [0,3] case.";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#2.52,y5,sqrt8);
      (sqrt8,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6 + #0.1 * (#3.01 - y6) > #0.477 - #0.11
          
 )`;
};;



Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#2.52,y5,#2.52);
      (#3.01,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 1 2 + tame_table_d 2 1 - #0.11
 )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (sqrt8,y5,sqrt8);
      (#3.01,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 1 2 + &2 *(tame_table_d 2 1 - #0.11)
 )`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#3.01,y5,#3.01);
      (#3.01,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 1 2 + &2 *(tame_table_d 2 1 - #0.11)
 )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2, ad hoc 0.696 case ";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (sqrt8,y5,#3.01);
      (sqrt8,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6 + #0.1 * (#3.01 - y5)  + #0.1 * (#3.01 - y6) > 
   #0.696 - &2 * #0.11
 )`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 1,2, ad hoc 0.696 case LP";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#2.52,y4,#2.52);
    (sqrt8,y5,#3.01);
      (sqrt8,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6   >    #0.696 - &2 * #0.11
 )`;
};;



Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 0,3";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#2.52,y4,#2.52);
    (#2.52,y5,#2.52);
      (#2.52,y6,#2.52)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 0 3 + &3 *(tame_table_d 2 1 - #0.11)
 )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 0,3";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#2.52,y4,#2.52);
    (#2.52,y5,#2.52);
      (#3.01,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 0 3 + &3 *(tame_table_d 2 1 - #0.11)
 )`;
};;


Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 0,3";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#2.52,y4,#2.52);
    (#3.01,y5,#3.01);
      (#3.01,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 0 3 + &3 *(tame_table_d 2 1 - #0.11)
 )`;
};;

Parse_ineq.execute_cfsqp
{
  idv = "un";
  doc="triangle 0,3";
  tags = [Cfsqp;Xconvert;Tex;Penalty(50.0,500.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.0,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.01);
    (#3.01,y5,#3.01);
      (#3.01,y6,#3.01)
  ]
(
   taum y1 y2 y3 y4 y5 y6  > tame_table_d 0 3 + &3 *(tame_table_d 2 1 - #0.11)
 )`;
};;





addtex (Section,"Experiments","");;

Parse_ineq.execute_cfsqp
  {
idv = "2065952723  experiment";
doc = "In a pentagon with one long edge, we can contract the long edge, using 2 diags";
tags = [Cfsqp;Tex;Flypaper[];];
ineq = all_forall `ineq
  [
  (&1 , e1, &1 + sol0/ pi);
  (&1 , e2, &1 + sol0/ pi);
  (&1 , e3, &1 + sol0/ pi);
  (&2 pow 2, a2, #3.01 pow 2);
  (#2.38 pow 2, b2, #15.53);
  (#2.38 pow 2, c2, #15.53)
  ]
   ((num1 e1 e2 e3 a2 b2 c2  > &0) ) `;
};;
