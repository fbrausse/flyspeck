(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* prove_by_refinement                                                    *)
(* Chapter: General                                                        *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2010-02-09                                                           *)
(* ========================================================================== *)

(*

This is an alternative to "prove"
Instead of chaining tactics together with THEN and THENL,
a list is given of all the tactics used, in the exact same order as the sequence of steps used with "e"

The advantage of this over "prove" is that the list exactly matches the sequence of steps with "e".
There is no need to reorganize the interactive proof by working out what branches were followed
when multiple goals are in play.

*)



module type Prove_by_refinement_type = sig
  val prove_by_refinement : term*(tactic list) -> thm
end;;


module Prove_by_refinement : Prove_by_refinement_type = struct

let elimin  = REWRITE_RULE[IN];;

(* adapted from 
hol_til_2005/HOL_TIL_2005/FLYSPECK_PUB_9_2004/hol_light_o/hol-ext/tactics_2.ml
:prove_by_refinement *)



let prove_by_refinement(t,(tacl:tactic list)) = 
  let gstate = mk_goalstate ([],t) in
  let _,sgs,just = rev_itlist 
    (fun tac gs -> by 
       (tac) gs)
     tacl gstate in
  let th = if sgs = [] then just null_inst []
  else failwith "BY_REFINEMENT_PROOF: Unsolved goals" in
  let t' = concl th in
  if t' = t then th else
  try EQ_MP (ALPHA t' t) th
  with Failure _ -> failwith "prove_by_refinement: generated wrong theorem";;

end;;


prove;;
