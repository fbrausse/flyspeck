(* More definitions and conclusions *)


flyspeck_needs "volume/vol1.hl";;

let sol = Vol1.sol;;

   let negligible_fun_p = new_definition `negligible_fun_p f S p = (? (C:real). (&0<= C)/\ ! (r:real). ( &1 <= r) ==> (sum (S INTER ball(p,r)) f) <= C * (r pow 2))`;;

   let negligible_fun_0 = new_definition `negligible_fun_0 f S  = negligible_fun_p f S ((vec:num->real^3) 0)`;;

   let fcc_compatible= new_definition `fcc_compatible f S = (!v. v IN S ==> sqrt( &32) <= measure(voronoi_open v S) + f v)`;;

   let kepler_conjecture = `kepler_conjecture = (!V. packing V /\ saturated V ==> (?(c:real). !(r:real). (&1<= r ==> vol ((UNIONS {ball(v:real^3, &1) | v IN V}) INTER ball(vec 0 ,r))/ vol (ball(vec 0, r))<= pi/ sqrt( &18) + c/ r)))`;;


let GLTVHUM_concl = `!V (u0:real^3) p.  packing V /\ saturated V /\ (u0 IN V) ==>
   (p IN voronoi_closed V u0 <=>
  (?vl. vl IN barV V 3 /\ p IN rogers V vl /\ (truncate_simplex 0 vl = [u0])))`;;

let DUUNHOR_concl = `!V ul vl.   ul IN barV V 3 /\ vl IN barV V 3 /\ ~(rogers V ul = rogers V vl) ==>
   coplanar (rogers V ul INTER rogers V vl)`;;

let QXSKIIT_concl = 
  `!(vf:A->real^N) b .  FINITE (IMAGE vf (:A)) /\ 
    ~ affine_dependent (IMAGE vf (:A)) /\  (!i j. (vf i = vf j) ==> (b i = b j))
   ==> (?!p.  p IN affine hull (IMAGE vf (:A)) /\ (!i j.  (p dot (vf i - vf j) = (b i - b j))))`;;

(*
let OAPVION_concl = `!S.  ~(S = {}) /\ ~affine_dependent S ==>
    ?!p. ?c.  (p IN affine hull S) /\ (!(v:real^N). (v IN S) ==> (dist(p,v) = c))`;;
*)

let OAPVION1_concl = `!S. ~(S = {}) /\ ~affine_dependent S ==>
    (circumcenter S) IN (affine hull S)`;;

let OAPVION2_concl = `!S.  ~affine_dependent S ==>
  (!w. w IN S ==> (radV S = dist(circumcenter S, w)))`;;

let OAPVION3_concl = `!S.  ~affine_dependent S ==>
  (!p.  (p IN affine hull S) /\ (?c. !w. (w IN S) ==> (dist(p,w) = c)) ==> (p = circumcenter S))`;;

let MHFTTZN1_concl = `!V ul k.  (k <= 3) /\ saturated V /\ packing V /\ barV V k ul ==>
  dim_aff (set_of_list ul) = k`;;

let MHFTTZN2_concl = `!V ul k.  (k <= 3) /\ saturated V /\ packing V /\ barV V k ul ==>
   (!p. p IN   affine hull voronoi_list V ul <=> (!u.  (u IN set_of_list ul  ==> p IN bis (HD ul) u)))`;;

let MHFTTZN3_concl = `!V ul k.  (k <= 3) /\ saturated V /\ packing V /\ barV V k ul ==>
   ((affine hull (voronoi_list V ul)) INTER (affine hull (set_of_list ul)) = { circumcenter (set_of_list ul) } )`;;

let MHFTTZN4_concl = `!V ul k u v.  (k <= 3) /\ saturated V /\ packing V /\ barV V k ul /\
  u IN affine hull voronoi_list V ul /\ v IN affine hull (set_of_list ul) ==>
   ((u - q) dot (v - q) = &0)`;;

(* CHNGQBD *)

let HL = new_definition `hl (ul:(real^N)list) = radV (set_of_list ul)`;;

let XYOFCGX_concl =  
  `!V S (p:real^3).  S SUBSET V /\ ~affine_dependent S /\
   (p = circumcenter S) /\ (radV S < sqrt(&2)) ==>
   (!u v.  u IN S /\ v IN (V DIFF S) ==>dist(v,p) > dist(u,p))`;;

let XNHPWAB1_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN barV V k) /\ (hl ul < sqrt(&2)) ==>
  (omega_list V ul = circumcenter (set_of_list ul))`;;

let XNHPWAB2_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN barV V k) /\ (hl ul < sqrt(&2)) ==>
  (omega_list V ul IN convex hull  (set_of_list ul))`;;

(*
let XNHPWAB3_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN barV V k) /\ (hl ul < sqrt(&2)) ==>
  (aff_dim (IMAGE (omega_list_n V ul) (0..k)) = &k)`;;
*)

let XNHPWAB3_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN barV V k) /\ (hl ul < sqrt(&2)) ==>
  (aff_dim { omega_list_n V ul j | j IN  (0..k)} = &k)`;;

let XNHPWAB4_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN barV V k) /\ (hl ul < sqrt(&2)) ==>
  (! i j.  (i < j) /\ (j <= k)  ==>  hl(truncate_simplex i ul) < hl(truncate_simplex j ul))`;;


let WAUFCHE1_concl = 
 `!V ul k.  saturated V /\ packing V /\ ul IN barV V k ==> hl ul <= 
    dist(omega_list V ul, HD ul)`;;

let WAUFCHE2_concl = 
 `!V ul k.  saturated V /\ packing V /\ ul IN barV V k /\
    hl ul < sqrt(&2) ==> (hl ul = dist(omega_list V ul, HD ul))`;;


(* rearrangement *)


let REVERSE_TABLE  = define `(REVERSE_TABLE (f:num->A) 0 = []) /\ 
   (REVERSE_TABLE f (SUC i) = CONS (f i)  ( REVERSE_TABLE f i))`;;

let TABLE = define `!(f:num->A) k. TABLE f k = REVERSE (REVERSE_TABLE f k)`;;

let left_action = new_definition `!p f x. left_action (p:A->C) (f:A->B) x = f(inverse p x)`;;

let left_action_list = new_definition `left_action_list p (ul:(A)list) = TABLE (\i. EL (inverse p i) ul) (LENGTH ul)`;;

let YIFVQDV_concl =  `!V ul k p.  packing V /\ saturated V /\ ul IN barV V k /\
     hl ul < sqrt(&2) /\ p permutes (0..k) ==>
  (left_action_list p ul IN barV V k) /\ (omega_list V (left_action_list p ul) = omega_list V ul)`;;

let KSOQKWL_concl = `!V ul p k.  saturated V /\ packing V /\ ul IN barV V k /\ hl ul < sqrt(&2) /\
p permutes (0..k) /\ (rogers V ul = rogers V (left_action_list p ul)) ==>  (p = I)`;;

(* TSIVSKG *)

let DROP = define `(DROP (ul:(A)list) 0  = TL ul) /\ (DROP ul (SUC i) = CONS(HD ul) (DROP (TL ul) i))`;;

let IVFICRK_concl = 
  `(!k. ?g.  (BIJ g { (i,sigma ) | i IN 0..(k+1) /\ sigma permutes (0..k) } { p | p permutes (0..(k+1)) })
    /\ (!(ul:(A)list) j.  (LENGTH ul = k+2) /\  j <= k ==> 
      (EL j ( left_action_list (g(i,sigma)) ul) = EL j (left_action_list sigma (DROP ul i) ))))`;;

let WQPRRDY_concl = 
  `!V ul k.  saturated V /\ packing V /\ ul IN barV V k /\ hl ul < sqrt(&2) ==>
    (convex hull (set_of_list ul) = UNIONS { rogers V (left_action_list p ul) |   p permutes (0..k) })`;;

let mxi = `!V ul. mxi V ul = 
  if (hl (truncate_simplex 2 ul) >= sqrt(&2)) 
  then omega_list_n V ul 2 
  else (@p. ((p IN convex hull 
    { omega_list_n V ul 2  , omega_list_n V ul 3}) /\
    (dist(p, HD ul) = sqrt(&2))))`;;

let MXI_EXISTS_concl = `!V ul.  saturated V /\ packing V /\ barV V 3 ul /\
    sqrt(&2) <= hl ul ==>
    (mxi V ul IN convex hull { omega_list_n V ul 2  , omega_list_n V ul 3 }) /\
    (dist(mxi V ul, HD ul) = sqrt(&2))`;;

let mcell0 = 
  `!V ul. mcell0 V ul = rogers V ul DIFF ball(HD ul,sqrt(&2))`;;

let mcell1 = `!V ul. mcell1 V ul = 
   rogers V ul INTER cball(HD ul, (sqrt (&2))) DIFF 
    rcone_gt (HD ul) (HD (TL ul))
        (hl (truncate_simplex 1 ul ) / (sqrt(&2))) `;;

let mcell2 = `!V ul. mcell2 V ul = 
  (let a =  hl (truncate_simplex 1 ul ) / (sqrt(&2)) in
  rcone_ge (HD ul) (HD (TL ul)) a INTER
  rcone_ge  (HD (TL ul)) (HD ul) a INTER
  aff_ge { HD ul, (HD (TL ul)) } { mxi V ul, omega_list_n V ul 3 })
`;;

let mcell3 = `!V (ul:(real^3)list). mcell3 V ul = 
    if (hl (truncate_simplex 2 ul) < sqrt(&2)) /\ (sqrt(&2) <= hl ul) then
        convex hull (set_of_list (truncate_simplex 2 ul) UNION { xmi V ul })
    else {}`;;

let mcell4 = `!V ul. mcell4 (V:real^3->bool) (ul:(real^3)list) = 
 if (hl ul < sqrt(&2)) 
 then convex hull (set_of_list ul) 
 else {}`;;

let mcell = `!(V:real^3->bool) ul.  (mcell i V ul) = 
   if (i=0) then mcell0 V ul else if (i=1) then mcell1 V ul else if (i=2) then mcell2 V ul 
   else if (i=3) then mcell3 V ul else mcell4 V ul`;;

let mcell_set = `mcell_set V =
{ X |  ?i ul.  (X = mcell i V ul) /\ ul IN barV V 3 }`;;


(* BGXEVQU , skip. Expand out using permutes *)

let EMNWUUS1_concl = `!V ul. saturated V /\ packing V /\ barV V 3 ul ==>
   (hl ul < sqrt(&2) <=> ~(mcell4 V ul = {}))`;;

let EMNWUUS2_concl = `!V ul. saturated V /\ packing V /\ barV V 3 ul ==>
   (hl ul < sqrt(&2) <=> (mcell0 V ul = {}) /\ (mcell1 V ul = {}) /\ (mcell2 V ul = {}) /\ (mcell3 V ul = {}))`;;

let SLTSTLO1_concl = `!V ul p.  saturated V /\ packing V /\ barV V 3 ul /\ (p IN rogers V ul) ==>
   (?i.  (i <= 4) /\ (p IN mcell i V ul))`;;

let SLTSTLO2_concl = `!V ul. ?Z. !p.  saturated V /\ packing V /\ barV V 3 ul ==>
    (NULLSET Z) /\ (p IN rogers V ul DIFF Z ==>  (?!i.  (i <= 4) /\ (p IN mcell i V ul)))`;;

let RVFXZBU1_concl = `!V ul vl i j.   saturated V /\ packing V /\ barV V 3 ul /\ barV V 3 vl /\ ~(i=j) ==>
  NULLSET (mcell i V ul INTER mcell j V vl)`;;

let RVFXZBU2_concl = `!V ul vl i.   saturated V /\ packing V /\ barV V 3 ul /\ barV V 3 vl /\
  ~(NULLSET (mcell i V ul INTER mcell i V vl)) ==> (?p. p permutes 0..(i-1) /\ (vl = left_action_list p ul))`;;

let RVFXZBU3_concl = `!V ul i p.   saturated V /\ packing V /\ barV V 3 ul /\
   (p permutes 0..(i-1)) ==> (mcell i V (left_action_list p ul) = mcell i V ul)`;;

(*
let LEPJBDJ_concl = `!V ul k.  
  saturated V /\ packing V /\ barV V 3 ul ==>
  (V INTER mcell k V ul = set_of_list (truncate_simplex (k-1) ul))`;;
*)

let cell_params = `!V X. cell_params V X = @(k,ul).
    (k <= 4) /\ (ul IN barV V 3) /\ (X = mcell k V ul)`;;

let VX = `!V X.   VX V X = 
    if (NULLSET X) then {} else
        (let (k,ul) = cell_params V X in set_of_list (truncate_simplex (k-1) ul))`;;

let edgeX = `!V X. edgeX V X =  { ({u,v}) | VX V X u /\ VX V X v /\ ~(u=v) }`;;

let URRPHBZ1_concl = `!V ul k.
  saturated V /\ packing V /\ varV v 3 ul ==> 
  measurable (mcell k V ul)`;;

let URRPHBZ2_concl = `!V ul k v.
  saturated V /\ packing V /\ varV v 3 ul /\ (v IN V)==> 
  eventually_radial v (mcell k V ul)`;;

let URRPHBZ3_concl = `!V ul k v.
  saturated V /\ packing V /\ varV v 3 ul /\ 
   (v IN V DIFF mcell k V ul)==> 
  (?t. t > &0 /\ (!p. p IN mcell k V ul ==> t < dist(p,v)))`;;

let QZYZMJC_concl = `!V v X. 
    saturated V /\ packing V /\ (v IN V) ==>
    (sum { X | mcell_set V X } (\t. sol X v) = &4 * pi)`;;

let total_solid = `!V X. total_solid V X =  sum  ( VX V X  )     (sol X)`;;

(* The definition of dihX is rather awkward, because a cell is essentially a quotient
    type, so it is not natural to make definitions with cells as a parameter.  
    Several lemmas will have to be proved to make these definitions useable, such as
   dihX V (mcell 4 V ul) ((EL 0 ul),(EL 1 ul)) = dihV (EL 0 ul) (EL 1 ul) (EL 2 ul) (EL 3 ul).
*)

let dihX2 = `!V X u v. dihX2 V X (v0,v1) = 
  (let (k,ul) = cell_params V X in
     dihV v0 v1 (mxi V ul) (omega_list_n V ul 3))`;;

(* The sum has a single term *)

let dihX3 = `!V X u v. dihX3 V X (v0,v1) =
  (let (k,ul) = cell_params V X in
     sum { (vl,p) | p permutes {0,1,2} /\ 
         (vl = left_action_list p ul) /\ (v0 = EL 0 vl) /\ (v1 = EL 1 vl) }
         ( \ (vl,p) . dihV v0 v1 (EL 2 vl) (mxi V ul) ))`;;

(* The sum has two terms. Take the average *)

let dihX4 = `!V X u v. dihX4 V X (v0,v1) =
  (let (k,ul) = cell_params V X in
     (&1 / &2) * sum { (vl,p) | p permutes {0,1,2,3} /\ 
         (vl = left_action_list p ul) /\ (v0 = EL 0 vl) /\ (v1 = EL 1 vl) }
         ( \ (vl,p). dihV v0 v1 (EL 2 vl) (EL 3 ul) ))`;;

let dihX = `!V X u v. dihX V X (v0,v1) = 
   if (NULLSET X) then &0 else
     (let (k,ul) = cell_params V X in
	if (k=2) then dihX2 V X (v0,v1)
	else if (k=3) then dihX3 V X (v0,v1)
	else if  (k=4) then dihX4 V X (v0,v1)
	else &0)`;;

(*
let IJEKNGA_concl = 
*)

(*
JGXZYGW already done by Nguyen Tat Thang
*)

   let sol0 = new_definition `sol0 = &3 * acs (&1 / &3)  - pi`;;
   let tau0 = new_definition `tau0 = &4 * pi - &20 * sol0`;;
   let mm1 = new_definition `mm1 = sol0 * sqrt(&8)/tau0`;;
   let mm2 = new_definition `mm2 = (&6 * sol0 - pi) * sqrt(&2) /(&6 * tau0)`;;
   let hplus = new_definition `hplus = #1.3254`;;
   let marchal_linear = `marchal_linear h = 
      (sqrt(&2)-h)*(hplus - h)*(&17*h - &9*(h pow 2) - &3)/
      ((sqrt(&2) - &1)*(hplus - &1))`;;

   let marchal =  `marchal h =
    (if (h <= &2) then marchal_linear h else &0)`;;

   let gammaX = `!V X f.
    gammaX V X f = vol(X) - (&2*mm1 / pi)*total_solid V X +
     (&8*mm2/ pi) * sum (edgeX V X) (\{u,v}. (dihX V X u v)* f(hl [u;v]))`;;

let marchal_inequality = `marchal_inequality =
    (!V X.  saturated V /\ packing V /\ mcell_set V X ==>
       gammaX V X marchal >= &0)`;;

(* These individual statements rather than the entire lemma are what we need. *)

let KIZHLTL1_concl = `!V. ?c. !r. saturated V  /\ packing V /\ (&1 <= r) ==>
   (sum (mcell_set V)   vol  + c*r pow 2 
   <= sum (V INTER  B(&0,r)) (\u. vol(Omega_open u V)))`;;
      
let KIZHLTL2_concl = `!V. ?c. !r. saturated V /\ packing V /\ (&1 <= r) ==>
  ( &(CARD(V INTER B(&0,r)))* &8*mm1    + c*r pow 2
  <=  (&2*mm1/pi)* sum (mcell_set V) total_solid )`;;

let KIZHLTL3_concl = `!V f. ?c. !r. saturated V /\ packing V /\ (&1 <= r) /\
  (?c1. !x.  &2 <= x /\ x < sqrt(&8) ==> abs( f x) <= c1)
   ==>
   (( &8 * mm2 /pi)* 
         sum (mcell_set V) ( \ X.   sum (edgeX V X) ( \ {u,v}. (dihX V X u v)*f (hl[u;v])))
					  +c*r pow 2 <=
	&8*mm2 * 
         sum (V INTER B(&0,r)) 
           ( \u.  sum { v | v IN V /\ ~(u=v) /\ dist(u,v) < sqrt(&8)}  ( \v.  f(hl [u;v]))))`;;

let h0 = `h0 = #1.26`;;

let lmfun = `lmfun h = if (h<=h0) then (h0 - h)/(h0 - &1) else &0`;;

let hminus = `hminus = @x. #1.2 <= x /\ x < #1.3 /\ marchal x = lmfun x`;;

let critical_edgeX =`critical_edgeX V X = { {u,v} | {u,v} IN edgeX V X /\ hminus <= hl [u;v] /\
					    hl[u;v] <= hplus}`;;

let critical_weight = `! V X. critical_weight V X = &1/ &(CARD (critical_edgeX V X))`;;

let bump = `!h. bump h = #0.005*(&1 - ((h- h0) pow 2)/((hplus - h0) pow 2))`;;

  (* average over all 4 = 2! x 2! possible representations *)

let beta_bump = `!V e X. beta_bump V e X = 
  (let (k,ul) = cell_params V X in  
    sum { (e',e'',p,vl) | (k=4) /\ (critical_edgeX V X = {e',e''}) /\ (e =e') /\ p permutes 0..3 
               /\ (vl = left_action_list p ul) /\ (e' = {EL 0 vl, EL 1 vl}) /\ (e'' = {EL 2 vl, EL 3 vl} ) }
    ( \ (e',e'',p,vl). (bump(hl [EL 0 vl; EL 1 vl]) - bump(hl [EL 2 vl; EL 3 vl]) )/ &4 ))`;;

let cell_cluster = `!V e. cell_cluster V e = { X |  e IN critical_edgeX V X /\ mcell_set V X }`;;

let cluster_gammaX = `!V e Z. cluster_gammaX V e Z= 
   sum Z ( \ X.  gammaX V X lmfun  * critical_weight V X  + beta_bump V e X )`;;

let cell_cluster_estimate = `!V. cell_cluster_estimate V = (!e.  
  (cluster_gammaX V e (cell_cluster V e) >= &0))`;;

let OXLZLEZ_concl = `!V.  (saturated V /\ packing V ) ==> cell_cluster_estimate V`;;

let lmfun_inequality = `!V. lmfun_inequality V = (!u.  u IN V ==>
     sum { v | v IN V /\ ~(u=v) /\ dist(u,v) <= &2*h0 } ( \v. lmfun (hl [u;v]) ) <= &12)`;;

let UPFZBZM_concl = `!V.  saturated V /\ packing V /\ cell_cluster_estimate V /\ 
   lmfun_inequality V ==> (?G. negligible_fun_0 G V /\ fcc_compatible G V)`;;

let ball_annulus = `ball_annulus = cball((vec 0:real^3) , &2 * h0) DIFF ball(vec 0, &2)`;;

let lmfun_ineq_center = `!V. lmfun_ineq_center V = 
     sum V ( \v. lmfun (hl [vec 0;v]) ) <= &12`;;

let RDWKARC_concl = `~kepler_conjecture /\ (!V. cell_cluster_estimate V) 
   ==> (?V.  packing V /\ V SUBSET ball_annulus /\ ~(lmfn_ineq_center V))`;;
  

(* counting spheres *)

