(* More definitions and conclusions *)

let GLTVHUM_concl = `!V (u0:real^3) p.  packing V /\ saturated V /\ (u0 IN V) ==>
   (p IN voronoi_closed V u0 <=>
  (?vl. vl IN vor_list V 3 /\ p IN rogers V vl /\ (truncate_simplex 0 vl = [u0])))`;;

let DUUNHOR_concl = `!V ul vl.   ul IN vor_list V 3 /\ vl IN vor_list V 3 /\ ~(rogers V ul = rogers V vl) ==>
   coplanar (rogers V ul INTER rogers V vl)`;;

let QXSKIIT_concl = 
  `!(vf:A->real^N) b .  FINITE (IMAGE vf (:A)) /\ 
    ~ affine_dependent (IMAGE vf (:A)) /\  (!i j. (vf i = vf j) ==> (b i = b j))
   ==> (?!p.  p IN affine hull (IMAGE vf (:A)) /\ (!i j.  (p dot (vf i - vf j) = (b i - b j))))`;;

(*
let OAPVION_concl = `!S.  ~(S = {}) /\ ~affine_dependent S ==>
    ?!p. ?c.  (p IN affine hull S) /\ (!(v:real^N). (v IN S) ==> (dist(p,v) = c))`;;
*)

let OAPVION1_concl = `!S. ~(S = {}) /\ ~affine_dependent S ==>
    (circumcenter S) IN (affine hull S)`;;

let OAPVION2_concl = `!S.  ~affine_dependent S ==>
  (!w. w IN S ==> (radV S = dist(circumcenter S, w)))`;;

let OAPVION3_concl = `!S.  ~affine_dependent S ==>
  (!p.  (p IN affine hull S) /\ (?c. !w. (w IN S) ==> (dist(p,w) = c)) ==> (p = circumcenter S))`;;

let MHFTTZN1_concl = `!V ul k.  (k <= 3) /\ saturated V /\ packing V /\ vor_list V k ul ==>
  dim_aff (set_of_list ul) = k`;;

let MHFTTZN2_concl = `!V ul k.  (k <= 3) /\ saturated V /\ packing V /\ vor_list V k ul ==>
   (!p. p IN   affine hull voronoi_list V ul <=> (!u.  (u IN set_of_list ul  ==> p IN bis (HD ul) u)))`;;

let MHFTTZN3_concl = `!V ul k.  (k <= 3) /\ saturated V /\ packing V /\ vor_list V k ul ==>
   ((affine hull (voronoi_list V ul)) INTER (affine hull (set_of_list ul)) = { circumcenter (set_of_list ul) } )`;;

let MHFTTZN4_concl = `!V ul k u v.  (k <= 3) /\ saturated V /\ packing V /\ vor_list V k ul /\
  u IN affine hull voronoi_list V ul /\ v IN affine hull (set_of_list ul) ==>
   ((u - q) dot (v - q) = &0)`;;

let HLIST = new_definition `hl (ul:(real^N)list) = radV (set_of_list ul)`;;

let XYOFCGX =  `!V S (p:real^3).  S SUBSET V /\ ~affine_dependent S /\
   (p = circumcenter S) /\ (radV S < sqrt(&2)) ==>
   (!u v.  u IN S /\ v IN (V DIFF S) ==>dist(v,p) > dist(u,p))`;;

let XNHPWAB1_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN vor_list V k) /\ (hl ul < sqrt(&2)) ==>
  (omega_list V ul = circumcenter (set_of_list ul))`;;

let XNHPWAB2_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN vor_list V k) /\ (hl ul < sqrt(&2)) ==>
  (omega_list V ul IN convex hull  (set_of_list ul))`;;

let XNHPWAB3_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN vor_list V k) /\ (hl ul < sqrt(&2)) ==>
  (aff_dim (IMAGE (omega_list_n V ul) (0..k)) = &k)`;;

let XNHPWAB4_concl = 
`!V ul k.  saturated V /\ packing V /\ (k <= 3) /\ (ul IN vor_list V k) /\ (hl ul < sqrt(&2)) ==>
  (! i j.  (i < j) /\ (j <= k)  ==>  hl(truncate_simplex i ul) < hl(truncate_simplex j ul))`;;

search[`permutes`];;

(* rearrangement *)


let REVERSE_TABLE  = define `(REVERSE_TABLE (f:num->A) 0 = []) /\ 
   (REVERSE_TABLE f (SUC i) = CONS (f i)  ( REVERSE_TABLE f i))`;;

let TABLE = define `!(f:num->A) k. TABLE f k = REVERSE (REVERSE_TABLE f k)`;;

let left_action = new_definition `!p f x. left_action (p:A->C) (f:A->B) x = f(inverse p x)`;;

let left_action_list = new_definition `left_action_list p (ul:(A)list) = TABLE (\i. EL (inverse p i) ul) (LENGTH ul)`;;

let YIFVQDV_concl =  `!V ul k p.  packing V /\ saturated V /\ ul IN vor_list V k /\
     hl ul < sqrt(&2) /\ p permutes (0..k) ==>
  (left_action_list p ul IN vor_list V k) /\ (omega_list V (left_action_list p ul) = omega_list V ul)`;;

pterm YIFVQDV_concl;;
type_of `omega_list`;;
