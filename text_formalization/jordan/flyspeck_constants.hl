(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Calculate Numeric constants                                                                  *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2010-07-27                                                           *)
(* ========================================================================== *)


module Flyspeck_constants = struct

  open Sphere;;

  let conv_of (s,t) = (s,PURE_ONCE_REWRITE_CONV[t]);;
  
  let convl = [
  conv_of ("sqrt2",sqrt2);
  conv_of ("sqrt8",sqrt8);
  conv_of ("sol0",sol0);
  conv_of("tau0",tau0);
  conv_of("mm1",mm1);
  conv_of("mm2",mm2);
  conv_of("pi_rt18",pi_rt18);
  conv_of("hplus",hplus);
  ];;

  let calc = snd o  (Float.REAL_INEQUALITY_CALCULATOR convl)  ;;

  let bounds = calc `#1.414213 < sqrt2 /\ sqrt2 < #1.414214 /\
   #2.828427 < sqrt8 /\ sqrt8 < #2.828428 /\
   #3.14159 < pi /\ pi < #3.1416 /\
   #0.551285 < sol0 /\ sol0 < #0.551286 /\
   #1.54065 < tau0 /\ tau0 < #1.54066 /\
   #0.740480 < pi_rt18 /\ pi_rt18 < #0.740481 /\
   #1.012080 < mm1 /\ mm1 < #1.012081 /\
   #0.02541 < mm2 /\ mm2 < #0.02542 /\
   &0 < ((sqrt (&2) - &1) * &5 * (hplus - &1)) /\
   &0 < sqrt(&2) - hplus /\
   &0 < hplus - &1 `;;


end;;


(* compute hminus *)

Sphere.hminus;;
Sphere.marchal_quartic;;
Sphere.lmfun;;

let hminus_high = prove_by_refinement(
  `!h. (h0 <= h) ==> lmfun h = &0`,
  (* {{{ proof *)
  [
    REWRITE_TAC[Sphere.lmfun;REAL_ARITH `h0 <= h <=> (~(h <= h0) \/ (h = h0))`];
  GEN_TAC;
  DISCH_THEN DISJ_CASES_TAC THEN ASM_REWRITE_TAC[REAL_ARITH `h0 <= h0`;REAL_FIELD `(h0 - h0)/(h0 - &1) = &0`];
  ]);;
  (* }}} *)


let hminus_lt_h0 = prove_by_refinement(
  `!h. (&1 <= h) /\ (h < hplus) ==> (marchal_quartic h > &0)`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  REWRITE_TAC[Sphere.marchal_quartic];
  REWRITE_TAC[REAL_ARITH `(h-hplus)*(&9 * h pow 2 - &17 * h + &3)/u = (hplus - h)*(&17 * h - &9 * h pow 2 -  &3)/u /\ (u > &0 <=> &0 < u)`];
  MATCH_MP_TAC REAL_LT_MUL;
  CONJ_TAC;
  POP_ASSUM MP_TAC;
  SUBGOAL_THEN `&0 < sqrt(&2) - hplus` MP_TAC;
  REWRITE_TAC[Flyspeck_constants.bounds];
  REAL_ARITH_TAC;
MATCH_MP_TAC REAL_LT_MUL;
  CONJ_TAC;
  POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
  MATCH_MP_TAC REAL_LT_DIV;
  REWRITE_TAC[Flyspeck_constants.bounds];
  REPEAT (POP_ASSUM MP_TAC);
  REWRITE_TAC[Sphere.hplus];
  ABBREV_TAC `u = h - &1`;
  SUBGOAL_THEN `h = u + &1` (fun t->REWRITE_TAC[t]);
  POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
  REWRITE_TAC[REAL_FIELD `(&1 <= u + &1 <=> &0 <= u) /\ (u + &1 < #1.3254 <=> u < #0.3254) /\ (&17 * (u + &1) - &9 * (u+ &1) pow 2 - &3 = -- &9 * u pow 2 - u + &5)`];
  POP_ASSUM (fun t->ALL_TAC);
  REPEAT STRIP_TAC;
  SUBGOAL_THEN `u pow 2 < #0.3254 pow 2` MP_TAC;
  REWRITE_TAC[ GSYM REAL_LT_SQUARE_ABS];
  REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC;
  REPEAT (POP_ASSUM MP_TAC);
  ABBREV_TAC `v = u pow 2`;
  REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let lminus_ge_h0 = prove_by_refinement(
  `!h. (hplus <= h) /\ (h <= sqrt (&2)) ==> (marchal_quartic h <= &0)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.marchal_quartic];
  REWRITE_TAC[REAL_ARITH `a * b * c /d <= &0 <=> &0 <= a * b * (-- c)/d`];
  REPEAT STRIP_TAC;
  MATCH_MP_TAC REAL_LE_MUL;
  CONJ_TAC;
  POP_ASSUM MP_TAC;
  REAL_ARITH_TAC;
  MATCH_MP_TAC REAL_LE_MUL;
  CONJ_TAC;
  REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC;
  MATCH_MP_TAC REAL_LE_DIV;
  CONJ_TAC;
  (* *)
    REPEAT (POP_ASSUM MP_TAC);
  REWRITE_TAC[Sphere.hplus];
  ABBREV_TAC `u = h - &1`;
  SUBGOAL_THEN `h = u + &1` (fun t->REWRITE_TAC[t]);
  POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
  REWRITE_TAC[REAL_FIELD `(&1 <= u + &1 <=> &0 <= u) /\ (#1.3254 <= u + &1 <=>  #0.3254 <= u) /\ (-- (&9* (u + &1) pow 2 - &17 * (u+ &1)  + &3) = -- &9 * u pow 2 - u + &5)`];
  REPEAT STRIP_TAC;
  SUBGOAL_THEN `u pow 2 < #0.42 pow 2` MP_TAC;
  REWRITE_TAC[ GSYM REAL_LT_SQUARE_ABS];
  POP_ASSUM MP_TAC;
  POP_ASSUM MP_TAC;
  EXPAND_TAC "u";
  SUBGOAL_THEN `sqrt(&2) - &1 < #0.42` (fun t-> (MP_TAC t) THEN REAL_ARITH_TAC);
  SUBGOAL_THEN `sqrt(&2) <  #1.414214` MP_TAC;
  REWRITE_TAC[GSYM Sphere.sqrt2;Flyspeck_constants.bounds];
  REAL_ARITH_TAC;
  SUBGOAL_THEN `u < #0.414214` MP_TAC;
  SUBGOAL_THEN `sqrt(&2) <  #1.414214` MP_TAC;
  REWRITE_TAC[GSYM Sphere.sqrt2;Flyspeck_constants.bounds];
  POP_ASSUM MP_TAC;
  REAL_ARITH_TAC;
  REAL_ARITH_TAC;
  MATCH_MP_TAC (REAL_ARITH `&0 < x ==> &0 <= x`);
  REWRITE_TAC[Flyspeck_constants.bounds];
  ]);;
  (* }}} *)


searcht 10 [`x ==> (&0 < u / v)`];;
searcht 10 [`x < t /\ t <= u ==> x < u`];;
searcht 10 [`x pow 2 < y pow 2`];;
searcht 10 [`x ==> (&0 <= u/v)`];;
