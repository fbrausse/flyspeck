(* 
   Build file for Flyspeck project.

   the system dependent string flyspeck should be set to the "text_formalization" path.
   For example, on my system, I have added a line to my .bashrc file
   export FLYSPECK_DIR="$HOME/Desktop/flyspeck_google/source/text_formalization"

 *)

(*

*)
let flyspeck_dir = 
  (try Sys.getenv "FLYSPECK_DIR" with Not_found -> Sys.getcwd());;

let fullpath s = Filename.concat flyspeck_dir s;;

(* boolean valued versions of Harrison's load files that return false if load was not a success *)

let use_file_b s =
  (Toploop.use_file Format.std_formatter s) or 
  (Format.print_string("Error in included file "^s);Format.print_newline(); false);;

let load_on_path_b p s =
  let s' = file_on_path p s in
  let fileid = (Filename.basename s',Digest.file s') in
   (use_file_b s' && (loaded_files := fileid::(!loaded_files);true));;

let loadb s = load_on_path_b (!load_path) s;;

let needb s =
  let s' = file_on_path (!load_path) s in
  let fileid = (Filename.basename s',Digest.file s') in
  if List.mem fileid (!loaded_files)
  then (Format.print_string("File \""^s^"\" already loaded\n");true) else loadb s;;


(* limit changes in the state of the proof assistant  *)

let CHEAT_TAC = FAIL_TAC "cheaters never prosper";;
let new_axiom _ = failwith "new_axiom has been disabled in the Flyspeck build";; 

loadt (fullpath "general/snapshot.hl" );;

let (partially_restore_state:string->unit) =
  let (rewrites,conversions) = (basic_rewrites(),basic_convs()) in
  fun s ->
   (
       current_goalstack := ([]:goalstack);
       if not(List.length(axioms()) =3) then failwith ("Illegal axioms added by "^s); 
       if not(basic_rewrites()=rewrites) then set_basic_rewrites rewrites;
       if not(basic_convs()==conversions) then set_basic_convs conversions;
       the_overload_skeletons:= Snapshot_flyspeck_2010_02_11.the_overload_skeletons;
       the_interface:= Snapshot_flyspeck_2010_02_11.the_interface
   );;

partially_restore_state "build";;

let fileid s = 
  let s' = file_on_path (!load_path) (fullpath s) in
    (Filename.basename s',Digest.file s');;

let (flyspeck_needs,filetable,depend)  =
  let ftable = ref [("pervasives",List.length (constants()))] in (* associate constants with files *) 
  let depend = ref ([]:((string*Digest.t)*(string*Digest.t)) list) in (* dependency table *)
  let host = ref (fileid "build.hl") in
  let fn = fun s->
  let id = fileid s in 
    if (List.mem id (!loaded_files))
    then Format.print_string("File \""^s^"\" already loaded\n")
    else
      (
        if List.mem (!host,id) (!depend) then failwith "There may be circular needs.";
	depend := (!host,id)::(!depend);	       
	let h = !host in 
        let _ = (host := id) in
        let b= needb (fullpath s) in
        let _ = (host := h) in
        let _ = partially_restore_state s in
	  if b then (ftable:= (s,List.length(constants()))::(!ftable)) 
	  else (depend := tl (!depend); failwith "Aborting Flyspeck Needs")
      ) in
    (fn,(fun () -> !ftable),(fun() -> !depend));;



(* HOL LIGHT *)
hol_version;;
needs "Multivariate/flyspeck.ml";;

(* utilities *)
flyspeck_needs "general/print-types.ml";;
flyspeck_needs  "general/update_database_310.ml";;
flyspeck_needs "general/prove_by_refinement.hl";;
flyspeck_needs "general/flyspeck_utility.hl";;

(* general *)
flyspeck_needs  "general/sphere.hl";;

(* lemmas in geometry *)
flyspeck_needs "leg/geomdetail.hl";;
flyspeck_needs "leg/affprops.hl";;
flyspeck_needs "leg/cayleyR_def.hl";;
flyspeck_needs  "leg/collect_geom.hl";;


(* slow, and not generally needed. contains NUHSVLM on cayleyR:*)
(* flyspeck_needs  "leg/collect_geom2.hl";;  *)

(* nonlinear *)
flyspeck_needs  "nonlinear/ineq.hl";;
flyspeck_needs  "nonlinear/ineqdata3q1h.hl";;

(* trigonometry *)
flyspeck_needs  "trigonometry/trig1.hl";;
flyspeck_needs  "trigonometry/trig2.hl";;
flyspeck_needs  "trigonometry/trigonometry.hl";;

(* volume *)
flyspeck_needs  "volume/vol1.hl";;

(* hypermap *)
flyspeck_needs  "hypermap/hypermap.hl";;

(* fan *)
(* does not work with the 090731 HOL-light build, needs AZIM_UNIQUE which appears later *)
(* flyspeck_needs  "fan/fan.hl";; *)

(* packing *)
flyspeck_needs  "packing/formulation.ml";;

(* local fan -- no files *)

(* tame *)
