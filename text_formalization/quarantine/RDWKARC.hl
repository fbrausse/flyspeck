
(* ========================================================================= *)
(*                FLYSPECK - BOOK FORMALIZATION                              *)
(*                                                                           *)
(*      Authour   : VU KHAC KY                                               *)
(*      Book lemma: RDWKARC                                                  *)
(*      Chaper    : Packing (Clusters)                                       *)
(*      Date      : October 3, 2010                                          *)
(*                                                                           *)
(* ========================================================================= *)

(* In quarantine for use of new_axiom *)

(* ========================================================================= *)
(*                     FILES NEED TO BE LOADED                               *)
(* ========================================================================= *)

(* dmtcp: needs "flyspeck_load.hl";; *)
flyspeck_needs "nonlinear/vukhacky_tactics.hl";;
flyspeck_needs "packing/pack_defs.hl";;
flyspeck_needs "packing/pack_concl.hl";;
flyspeck_needs "packing/pack1.hl";;

module Rdwkarc = struct

  open Sphere;;
  open Pack_defs;;
  open Pack_concl;;
  open Vukhacky_tactics;;
  open Pack1;;

(* ============== Axioms in previous parts ===================================*)

let UPFZBZM = new_axiom UPFZBZM_concl;;

(*-------------------------------------------------------------------------- *) 
(*           The lemma needs to be formalized                                *)  
(*-------------------------------------------------------------------------- *) 

let RDWKARC_concl = 
`~kepler_conjecture /\ (!V. cell_cluster_estimate V) /\ marchal_inequality
  ==> (?V. packing V /\ V SUBSET ball_annulus /\ ~lmfun_ineq_center V)`;;


(* ------------------------------------------------------------------------- *)
(*   The following lemmas are necessary for the main theorem RDWKARC         *)
(* ------------------------------------------------------------------------- *)

(* Lemma 1 *)
let JGXZYGW_KY = prove_by_refinement (
 `!S.   packing S /\
         saturated S /\
         (?A. fcc_compatible A S /\ negligible_fun_0 A S)
         ==> (?c. !r. &1 <= r
                      ==> vol
                          (UNIONS {ball (v,&1) | v IN S} INTER ball (vec 0,r)) /
                          vol (ball (vec 0,r)) <=
                          pi / sqrt (&18) + c / r)`,
[(MP_TAC JGXZYGW THEN DISCH_THEN (LABEL_TAC "asm1"));
 GEN_TAC;
 (REWRITE_TAC[negligible_fun_0]);
 (USE_THEN "asm1" (MP_TAC o SPEC `S:real^3->bool`));
 (DISCH_THEN (LABEL_TAC "asm2"));
 (USE_THEN "asm2" (MP_TAC o SPEC `(vec 0):real^3`));
 (MESON_TAC[])]);;

(* ------------------------------------------------------------------------- *)
(*  Lemma 2 *)
let PACKING_SUBSET = prove_by_refinement (
 `!V S. packing V /\ S SUBSET V ==> packing S`,
[(REPEAT GEN_TAC THEN REWRITE_TAC[packing;SUBSET;IN_ELIM_THM]);
 (REPEAT STRIP_TAC);
 (MATCH_MP_TAC(ASSUME 
    `!u:real^3 v. V u /\ V v /\ ~(u = v) ==> &2 <= dist (u,v)`) );
 (ASM_REWRITE_TAC[]);
 (REWRITE_WITH `V (u:real^3) /\ V v <=> u IN V /\ v IN V`);
 (REWRITE_TAC[IN]);
 STRIP_TAC;
   (* Break into smaller subgoals *)

 (MATCH_MP_TAC(ASSUME `!(x:real^3). x IN S ==> x IN V`) );
 (ASM_REWRITE_TAC[IN]);
 (MATCH_MP_TAC(ASSUME `!(x:real^3). x IN S ==> x IN V`) );
 (ASM_REWRITE_TAC[IN])]);;


(* ------------------------------------------------------------------------  *)
(* Lemma 3 *)
let PACKING_TRANS = prove_by_refinement (
 `! V (x:real^3). packing V ==> packing {u | (u + x) IN V}`,

[(REPEAT GEN_TAC THEN REWRITE_TAC[packing;IN_ELIM_THM]);
(REPEAT STRIP_TAC);
(ABBREV_TAC `u' = (u:real^3) + x`);
(ABBREV_TAC `v' = (v:real^3) + x`);
  (NEW_GOAL `V (u':real^3) /\ V v' /\ ~(u' = v')`);
  (* New subgoal 1 *) 
  (REPEAT STRIP_TAC);
  (ASM_REWRITE_TAC[GSYM IN]); 
  (ASM_REWRITE_TAC[GSYM IN]);
  (NEW_GOAL `u = v:real^3`);
  (REPLICATE_TAC 3 UP_ASM_TAC );
  VECTOR_ARITH_TAC;
  (ASM_MESON_TAC[]);
  (* End subgoal 1 *)

  (REWRITE_WITH `dist (u:real^3, v) = dist (u', v':real^3)`);
  (* Subgoal 2 *)
  (EXPAND_TAC "u'" THEN EXPAND_TAC "v'");
  (REWRITE_TAC[dist]);
  (NORM_ARITH_TAC);
  (* End subgoal 2 *) 

(UP_ASM_TAC THEN ASM_REWRITE_TAC[])]);;


(* ------------------------------------------------------------------------- *)
(* Lemma 4 *)

let SATURATED_TRANS = prove_by_refinement (
`!V (x:real^3). saturated V ==> saturated {u | u + x IN V}`,

[(REPEAT GEN_TAC THEN REWRITE_TAC[saturated]);
(DISCH_THEN (LABEL_TAC "asm1"));
(GEN_TAC);
(USE_THEN "asm1" (MP_TAC  o SPEC `(x':real^3) + x`));
(DEL_TAC THEN DISCH_TAC);
(FIRST_X_ASSUM CHOOSE_TAC);
(EXISTS_TAC `y - (x:real^3)`);
(REWRITE_TAC[IN_ELIM_THM; VECTOR_ARITH `y - x + x = (y:real^3)`]);
(ASM_REWRITE_TAC[]);

  (NEW_GOAL `dist (x',y - x) = dist (x'+ x,y:real^3)`);
  (* Subgoal 1 *)  
  (REWRITE_TAC[dist]);
  (NORM_ARITH_TAC);
  (* End subgoal 1 *)

(ASM_MESON_TAC[])]);;


(* ------------------------------------------------------------------------- *)
(* Lemma 5 *)

let RADV_TRANS_EQ = prove_by_refinement (
 `!u v:real^3 x. ~(u = v) ==> radV {u, v} = radV {u + x, v + x}`,

[ (REPEAT STRIP_TAC);
 (REWRITE_TAC[radV]);

  (REWRITE_WITH 
   `(@c. !w. {u:real^3, v} w ==> c = dist (circumcenter {u, v},w)) = 
    &1 / &2 * dist (u, v)`);
  (* New subgoal 1 *)
  (MATCH_MP_TAC SELECT_UNIQUE);
  (REWRITE_TAC[IN_ELIM_THM]);
  (REWRITE_TAC[SET_RULE `{u:real^3, v} w <=> w = u \/ w = v`]);
  (ABBREV_TAC `c1 = &1 / &2 % ((u:real^3) + v)`);

(* Difficult lemma *)

    (NEW_GOAL `c1 = circumcenter {u:real^3, v}`);
    (* New subgoal 1.1 *) 
    (REWRITE_TAC[circumcenter]);
    (ONCE_REWRITE_TAC[EQ_SYM_EQ]);
    (MATCH_MP_TAC SELECT_UNIQUE);
    (REWRITE_TAC[IN_ELIM_THM]);
      
      (GEN_TAC THEN EQ_TAC);
      (* New_subgoal 1.1.1 *)  
      (REWRITE_TAC[affine;hull;IN_ELIM_THM;INTERS]);
      (REWRITE_TAC[SET_RULE `{u:real^3, v} w <=> w = u \/ w = v`]);
      (REPEAT STRIP_TAC);
      (EXPAND_TAC "c1");
      (UP_ASM_TAC THEN UP_ASM_TAC);
      (DISCH_THEN (LABEL_TAC "asm1"));
      (ABBREV_TAC `V1 ={ t % (u:real^3) + r % v | t + r = &1} `);
      (USE_THEN "asm1" (MP_TAC o SPEC `V1:real^3->bool`));
      (REPEAT STRIP_TAC);

      (NEW_GOAL `y:real^3 IN V1`);
      (* New_subgoal 1.1.1.1 *)      

      (SWITCH_TAC THEN FIRST_ASSUM MATCH_MP_TAC);
      (EXPAND_TAC "V1" THEN REWRITE_TAC[SUBSET;IN_ELIM_THM]);
      (STRIP_TAC);
      (* Break into 2 subgoal *)
    
      (* Begin first subgoal *)
      (REPEAT STRIP_TAC);
      (ASM_REWRITE_TAC[VECTOR_ADD_LDISTRIB;VECTOR_MUL_ASSOC]);
      (EXISTS_TAC `u' * t + v' * t'`);
      (EXISTS_TAC `u' * r + v' * r'`);
      STRIP_TAC;
      (* Break into 2 subgoals *)
      (REWRITE_TAC[REAL_ARITH 
        `(u' * t + v' * t') + u' * r + v' * r' = u' * (t + r) + 
         v' * (t' + r')`]);
      (ASM_REWRITE_TAC[REAL_MUL_LID;REAL_MUL_RID]);
      (VECTOR_ARITH_TAC);
      (* End 2 subgoals and also end first subgoal *)

      (* Begin second subgoal *)
      (GEN_TAC THEN REWRITE_TAC[SET_RULE `x IN {u,v} <=> x = u \/ x = v`]);
      (STRIP_TAC);
      (* Break into 2 subgoals *)
      (EXISTS_TAC `&1` THEN EXISTS_TAC `&0`);
      (STRIP_TAC);
      (REAL_ARITH_TAC);
      (UP_ASM_TAC THEN VECTOR_ARITH_TAC);
      (EXISTS_TAC `&0` THEN EXISTS_TAC `&1`);
      (STRIP_TAC);
      (REAL_ARITH_TAC);
      (UP_ASM_TAC THEN VECTOR_ARITH_TAC);
      (* End of 2 subgoals  and also end of subgoal 1.1.1.1 *)

      (UP_ASM_TAC THEN EXPAND_TAC "V1" THEN REWRITE_TAC[IN_ELIM_THM]);
      (DISCH_TAC);
      (FIRST_X_ASSUM CHOOSE_TAC);
      (FIRST_X_ASSUM CHOOSE_TAC);
      (REWRITE_TAC[VECTOR_ADD_LDISTRIB]);
      (ASM_REWRITE_TAC[]);

      (NEW_GOAL `dist (y, u:real^3) = dist (y, v)`);
      (* New_subgoal 1.1.1.2 *)       
      (ASM_MESON_TAC[]);

      (UP_ASM_TAC THEN ASM_REWRITE_TAC[dist;NORM_EQ]);

      (REWRITE_WITH `(t % (u:real^3) + r % v) - u = r % (v - u)`);
      (* New_subgoal 1.1.1.3 *)
      (REWRITE_TAC[VECTOR_SUB_LDISTRIB]);
      (REWRITE_WITH `r = (&1 - t)`);
      (ASM_REAL_ARITH_TAC);
      VECTOR_ARITH_TAC;
      (* End of subgoal 1.1.1.3 *)

      (REWRITE_WITH `(t % (u:real^3) + r % v) - v = t % (u - v)`);
      (* New_subgoal 1.1.1.4 *)
      (REWRITE_TAC[VECTOR_SUB_LDISTRIB]);
      (REWRITE_WITH `t = (&1 - r)`);
      (ASM_REAL_ARITH_TAC);
      VECTOR_ARITH_TAC;
      (* End of subgoal 1.1.1.4 *)

      (REWRITE_TAC[DOT_RMUL;DOT_LMUL;GSYM dist; DOT_SQUARE_NORM;
               VECTOR_ARITH `(x - y ) dot (x - y) = (y - x) dot (y - x)`;
               REAL_ARITH `a * b * c = (a * b) * c`;
               REAL_ARITH `a * b = c * b <=> (a - c) * b = &0`]);
      STRIP_TAC;

      (NEW_GOAL `~ (dist (u:real^3, v) pow 2 = &0)`);
      (* New_subgoal 1.1.1.5 *)

      (REWRITE_TAC[dist;REAL_POW_EQ_0; MESON[] `~(a /\ ~b) <=> ~a \/ b`]);
      DISJ1_TAC;
      (UNDISCH_TAC `~(u = v:real^3)`);
      (NORM_ARITH_TAC);
      (* End of subgoal 1.1.1.5 *)

      (NEW_GOAL `r * r - t * t = &0`);
      (* New_subgoal 1.1.1.6 *)
      (UP_ASM_TAC THEN UP_ASM_TAC THEN MESON_TAC[REAL_ENTIRE]);
      (* End of subgoal 1.1.1.6 *)

      (NEW_GOAL `r = &1 / &2`);
      (* New_subgoal 1.1.1.7 *)
      (UP_ASM_TAC THEN REWRITE_WITH `t = &1 - r`);
      (ASM_REAL_ARITH_TAC);
      REAL_ARITH_TAC;
      (* End of subgoal 1.1.1.7 *)

      (REWRITE_WITH `t = &1 / &2 /\ r = &1 / &2`);
      (ASM_REAL_ARITH_TAC);
      (* End of subgoal 1.1.1 *)

(* -------------------------------------------------------------------------- *)

    (REWRITE_TAC[hull;affine;INTERS;SUBSET;IN_ELIM_THM]);
    (DISCH_TAC THEN ASM_REWRITE_TAC[]);
    DEL_TAC;
    (EXPAND_TAC "c1" THEN REPEAT STRIP_TAC);
    (* Break into 2 subgoals *)

      (* Begin subgoal 1.1.2 *)
      (REWRITE_TAC[VECTOR_ADD_LDISTRIB]);
      (NEW_GOAL `(u:real^3) IN u' /\ v IN u' /\ (&1 / &2 + &1 / &2 = &1) `);
      (UP_ASM_TAC THEN MESON_TAC[SET_RULE `x IN {u, v} <=> x = u \/ x = v`;
                             REAL_ARITH `(&1 / &2 + &1 / &2 = &1)`]);
      (ASM_SIMP_TAC[]);
      (* End of subgoal 1.1.2 *)

    (EXISTS_TAC `&1 / & 2 * dist (u, v:real^3)`);
    (REWRITE_TAC[SET_RULE `{u, v} w <=> w = u \/ w = v`]);
    (REPEAT STRIP_TAC);
    (REWRITE_TAC[VECTOR_ADD_LDISTRIB;dist]);
    (ASM_REWRITE_TAC[]);
    (NORM_ARITH_TAC);

    (REWRITE_TAC[VECTOR_ADD_LDISTRIB;dist]);
    (ASM_REWRITE_TAC[]);
    (NORM_ARITH_TAC);
    (* End of subgoal 1.1 *)


(* This part is finished : c1 = circumcenter {u, v} *)

  (REWRITE_TAC[GSYM (ASSUME `c1 = circumcenter {u:real^3, v}`)]);
  (DEL_TAC THEN EXPAND_TAC "c1" THEN DEL_TAC THEN GEN_TAC THEN EQ_TAC);
  (* Break into 2 subgoals *)
 
  (* Begin subgoal 1.2 *)
  (DISCH_THEN (LABEL_TAC "asm1"));
  (USE_THEN "asm1" (MP_TAC o SPEC `u:real^3`));
  (NORM_ARITH_TAC);
  (* End subgoal 1.2 *)
  
  (* Begin subgoal 1.3 *)
  (DISCH_TAC THEN ASM_REWRITE_TAC[]);
  (NORM_ARITH_TAC);
  (* End subgoal 1.2 *)

  (* This also end subgoal 1 *)

(* Finish the first half part, the second half part is  similar *)


(* SECOND PART *)

(ABBREV_TAC `c1 = &1 / &2 % ((u:real^3) + v) + x`);

(* Difficult lemma *)

  (NEW_GOAL `c1 = circumcenter {(u:real^3) + x, v + x}`);
  (* Begin subgoal 2 *)
  (REWRITE_TAC[circumcenter]);
  (ONCE_REWRITE_TAC[EQ_SYM_EQ]);
  (MATCH_MP_TAC SELECT_UNIQUE);
  (REWRITE_TAC[IN_ELIM_THM]);

    (GEN_TAC THEN EQ_TAC);
    (* Break into 2 subgoals *)

    (REWRITE_TAC[affine;hull;IN_ELIM_THM;INTERS]);
    (* Begin first subgoal 2.1 *)  
    (REWRITE_TAC[SET_RULE `{(u:real^3) + x, v + x} w <=> 
                            w = u + x \/ w = v + x`]);
    (REPEAT STRIP_TAC);
    (EXPAND_TAC "c1");
    (UP_ASM_TAC THEN UP_ASM_TAC);
    (DISCH_THEN (LABEL_TAC "asm1"));
    (ABBREV_TAC `V1 ={ t % ((u:real^3) + x) + r % (v + x) | t + r = &1} `);
    (USE_THEN "asm1" (MP_TAC o SPEC `V1:real^3->bool`));
    (REPEAT STRIP_TAC);

      (NEW_GOAL `y:real^3 IN V1`);
      (* Begin new_subgoal 2.1.1 *)

      (SWITCH_TAC THEN FIRST_ASSUM MATCH_MP_TAC);
      (EXPAND_TAC "V1" THEN REWRITE_TAC[SUBSET;IN_ELIM_THM]);
      (STRIP_TAC);
      (* Break into 2 subgoals *)

      (* begin first subgoal 2.1.1 *)
      (REPEAT STRIP_TAC);
      (ASM_REWRITE_TAC[VECTOR_ADD_LDISTRIB;VECTOR_MUL_ASSOC]);
      (EXISTS_TAC `u' * t + v' * t'`);
      (EXISTS_TAC `u' * r + v' * r'`);
      STRIP_TAC;
      (REWRITE_TAC[REAL_ARITH 
    `(u' * t + v' * t') + u' * r + v' * r' = u' * (t + r) + v' * (t' + r')`]);
      (ASM_REWRITE_TAC[REAL_MUL_LID;REAL_MUL_RID]);
      (VECTOR_ARITH_TAC);

     (* Begin second subgoal 2.1.2 *)
     (GEN_TAC THEN REWRITE_TAC[SET_RULE `x':real^3 IN {u + x,v + x} <=> 
        x' = u + x \/ x' = v + x`]);
     (STRIP_TAC);

     (* Break into 2 subgoals *)
     (EXISTS_TAC `&1` THEN EXISTS_TAC `&0`);
     (STRIP_TAC);
     (REAL_ARITH_TAC);
     (UP_ASM_TAC THEN VECTOR_ARITH_TAC);
     (* End 2 above subgoals *)

     (EXISTS_TAC `&0` THEN EXISTS_TAC `&1`);
     (STRIP_TAC);
     (REAL_ARITH_TAC);
     (UP_ASM_TAC THEN VECTOR_ARITH_TAC);
     (* End of subgoal 2.1.2 *)

   (UP_ASM_TAC THEN EXPAND_TAC "V1" THEN REWRITE_TAC[IN_ELIM_THM]);
   (DISCH_TAC);
   (FIRST_X_ASSUM CHOOSE_TAC);
   (FIRST_X_ASSUM CHOOSE_TAC);
   (REWRITE_TAC[VECTOR_ADD_LDISTRIB]);
   (ASM_REWRITE_TAC[]);

     (NEW_GOAL `dist (y, (u:real^3) + x) = dist (y, v + x)`);
     (* Begin subgoal 2.1.3 *)
     (ASM_MESON_TAC[]);
     (* End subgoal 2.1.3 *)

   (UP_ASM_TAC THEN ASM_REWRITE_TAC[dist;NORM_EQ]);
   
     (REWRITE_WITH `(t % ((u:real^3) + x) + r % (v + x)) - (u + x) = 
                  r % (v - u)`);
     (* Subgoal 2.1.4 *)
     (REWRITE_TAC[VECTOR_SUB_LDISTRIB]);
     (REWRITE_WITH `r = (&1 - t)`);
     (ASM_REAL_ARITH_TAC);
     VECTOR_ARITH_TAC;
     (* End subgoal 2.1.4 *)

     (REWRITE_WITH `(t % ((u:real^3) + x) + r % (v + x)) - (v + x) = 
                  t % (u - v)`);
     (* Subgoal 2.1.5 *)
     (REWRITE_TAC[VECTOR_SUB_LDISTRIB]);
     (REWRITE_WITH `t = (&1 - r)`);
     (ASM_REAL_ARITH_TAC);
     VECTOR_ARITH_TAC;
     (* End subgoal 2.1.5 *)

    (REWRITE_TAC[DOT_RMUL;DOT_LMUL;GSYM dist; DOT_SQUARE_NORM;
               VECTOR_ARITH `(x - y ) dot (x - y) = (y - x) dot (y - x)`;
               REAL_ARITH `a * b * c = (a * b) * c`;
               REAL_ARITH `a * b = c * b <=> (a - c) * b = &0`]);
    STRIP_TAC;

      (NEW_GOAL `~ (dist (u:real^3, v) pow 2 = &0)`);
      (* New subgoal 2.1.6 *)
      (REWRITE_TAC[dist;REAL_POW_EQ_0; MESON[] `~(a /\ ~b) <=> ~a \/ b`]);
      DISJ1_TAC;
      (UNDISCH_TAC `~(u = v:real^3)`);
      (NORM_ARITH_TAC);
      (* End subgoal 2.1.6 *)

      (NEW_GOAL `r * r - t * t = &0`);
      (* Begin subgoal 2.1.7 *)
      (UP_ASM_TAC THEN UP_ASM_TAC THEN MESON_TAC[REAL_ENTIRE]);
      (NEW_GOAL `r = &1 / &2`);
      (UP_ASM_TAC THEN REWRITE_WITH `t = &1 - r`);
      (ASM_REAL_ARITH_TAC);
      REAL_ARITH_TAC;
      (* End subgoal 2.1.7 *)

    (REWRITE_WITH `t = &1 / &2 /\ r = &1 / &2`);
    (ASM_REAL_ARITH_TAC);
    (VECTOR_ARITH_TAC);
    (* End of subgoal 2.1 *)

(* -------------------------------------------------------------------------- *)

  (REWRITE_TAC[hull;affine;INTERS;SUBSET;IN_ELIM_THM]);
  (DISCH_TAC THEN ASM_REWRITE_TAC[]);
  DEL_TAC;
  (EXPAND_TAC "c1" THEN REPEAT STRIP_TAC);
  (REWRITE_TAC[VECTOR_ADD_LDISTRIB]);

    (NEW_GOAL 
    `(u:real^3) + x IN u' /\ v + x IN u' /\ (&1 / &2 + &1 / &2 = &1) `);
    (* Subgoal 2.2 *)  
    (UP_ASM_TAC THEN MESON_TAC[SET_RULE `x' IN {(u:real^3) + x, v + x} <=> 
                                       x' = u + x \/ x' = v + x`;
                             REAL_ARITH `(&1 / &2 + &1 / &2 = &1)`]);
 
    (REWRITE_WITH 
     `!u (v:real^3) x. 
      (&1 / &2 % u + &1 / &2 % v) + x = &1 / &2 % (u + x) + 
      &1 / &2 % (v + x)`);
    (VECTOR_ARITH_TAC);
    (ASM_SIMP_TAC[]);
    (* End of subgoal 2.2 *)

  (EXISTS_TAC `&1 / & 2 * dist (u, v:real^3)`);
  (REWRITE_TAC[SET_RULE `{u, v} w <=> w = u \/ w = v`]);
  (REPEAT STRIP_TAC);
  (REWRITE_TAC[VECTOR_ADD_LDISTRIB;dist]);
  (ASM_REWRITE_TAC[]);
  (NORM_ARITH_TAC);

  (REWRITE_TAC[VECTOR_ADD_LDISTRIB;dist]);
  (ASM_REWRITE_TAC[]);
  (NORM_ARITH_TAC);
  (* End of subgoal 2 *)

(* This part is finished : c1 = circumcenter {u + x, v + x} *)

(REWRITE_WITH 
 `(@c. !w. {u + x, v + x} w ==> c = dist (circumcenter {u + x, v + x},w)) = 
   &1 / &2 * dist ((u:real^3) + x, v + x)`);
(MATCH_MP_TAC SELECT_UNIQUE);
(REWRITE_TAC[IN_ELIM_THM]);
(REWRITE_TAC[SET_RULE `{u:real^3, v} w <=> w = u \/ w = v`]);

(REWRITE_TAC[GSYM (ASSUME `c1 = circumcenter {(u:real^3) + x, v + x}`)]);
(DEL_TAC THEN EXPAND_TAC "c1" THEN DEL_TAC THEN GEN_TAC THEN EQ_TAC);
(DISCH_THEN (LABEL_TAC "asm1"));
(USE_THEN "asm1" (MP_TAC o SPEC `(u:real^3) + x`));
(NORM_ARITH_TAC);

(DISCH_TAC THEN ASM_REWRITE_TAC[]);
(NORM_ARITH_TAC);

(* Finish the second half part *)

(REWRITE_TAC[dist]);
NORM_ARITH_TAC ]);;



(* ========================================================================= *)
(*                             MAIN THEOREM RDWKARC                          *)
(* ========================================================================= *)

let RDWKARC = prove_by_refinement (RDWKARC_concl, 
[ (REWRITE_TAC[kepler_conjecture]);
 (REWRITE_WITH 
 `~(!V. packing V /\ saturated V
        ==> (?c. !r. &1 <= r
                    ==> vol
                        (UNIONS {ball (v,&1) | v IN V} INTER ball (vec 0,r)) /
                        vol (ball (vec 0,r)) <=
                        pi / sqrt (&18) + c / r)) <=> 
 (?V. packing V /\ saturated V
        /\ ~(?c. !r. &1 <= r
                    ==> vol
                        (UNIONS {ball (v,&1) | v IN V} INTER ball (vec 0,r)) /
                        vol (ball (vec 0,r)) <=
                        pi / sqrt (&18) + c / r))`);

 (MESON_TAC[]);
 STRIP_TAC;

 (NEW_GOAL `~(lmfun_inequality (V:real^3->bool))`);
 STRIP_TAC;
 (NEW_GOAL `(?G. negligible_fun_0 G V /\ fcc_compatible G V)`);
 (ASM_MESON_TAC[UPFZBZM]);
 (NEW_GOAL `(?c. !r. &1 <= r
                ==> vol (UNIONS {ball (v,&1) | v IN V} INTER ball (vec 0,r)) /
                    vol (ball (vec 0,r)) <=
                    pi / sqrt (&18) + c / r)`);
 (MATCH_MP_TAC JGXZYGW_KY);
 (ASM_REWRITE_TAC[]);
 (CHOOSE_TAC (ASSUME `?G. negligible_fun_0 G V /\ fcc_compatible G V`));
 (EXISTS_TAC `G:real^3->real`);
 (ASM_REWRITE_TAC[]);
 (ASM_MESON_TAC[]);

(* ---------------------------------------------------------------------- *)

 (UP_ASM_TAC THEN REWRITE_TAC[lmfun_inequality]);
 (REWRITE_WITH 
 `~(!u:real^3. u IN V
       ==> sum {v | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
           (\v. lmfun (hl [u; v])) <=
           &12) <=> 
 (?u. u IN V
       /\ ~(sum {v | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
           (\v. lmfun (hl [u; v])) <=
           &12))`);
 (MESON_TAC[]);
 (REWRITE_TAC[REAL_ARITH `~(a <= b) <=> b < a`]);
 (DISCH_TAC);
 (FIRST_X_ASSUM CHOOSE_TAC);


 (ABBREV_TAC `V' = {v:real^3 | v + u IN V}`);
 (EXISTS_TAC `V':real^3->bool INTER ball_annulus`);
 (ASM_REWRITE_TAC[INTER_SUBSET]);

 (NEW_GOAL `packing (V':real^3->bool)`);
 (EXPAND_TAC "V'" THEN ASM_MESON_TAC[PACKING_TRANS]);
 STRIP_TAC;
 (ASM_MESON_TAC[PACKING_SUBSET;INTER_SUBSET]);

(* -------------------------------------------------------------------------- *)

 (REWRITE_TAC[lmfun_ineq_center]);
 (REWRITE_TAC[REAL_ARITH `~(a <= b) <=> b < a`]);
 (EXPAND_TAC "V'" THEN REWRITE_TAC[ball_annulus]);

 (REWRITE_WITH 
`sum ({v | v + u IN V} INTER (cball (vec 0,&2 * h0) DIFF ball (vec 0,&2)))
 (\v. lmfun (hl [vec 0; v])) =
 sum {v:real^3 | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
 (\v. lmfun (hl [u; v]))`);
 (MATCH_MP_TAC SUM_EQ_GENERAL_INVERSES);
 (REWRITE_TAC[IN_ELIM_THM]);
 (EXISTS_TAC `(\x:real^3. x + u)`);
 (EXISTS_TAC `(\x:real^3. x - u)`);
 (REPEAT STRIP_TAC);
 (REWRITE_TAC[IN_ELIM_THM;cball;INTER]);
 (CONJ_TAC);
 (ASM_REWRITE_TAC[VECTOR_ARITH `y:real^3 - u + u = y`]);
 (REWRITE_TAC[DIFF;IN_ELIM_THM;ball]);
 (UP_ASM_TAC THEN REWRITE_TAC[dist]);
 (DISCH_TAC THEN CONJ_TAC);
 (UP_ASM_TAC THEN NORM_ARITH_TAC);
 (REWRITE_WITH `norm (vec 0 - (y:real^3 - u)) = dist (u,y)`);
 (REWRITE_TAC[dist]);
 (NORM_ARITH_TAC);
 (REWRITE_TAC[REAL_ARITH `~(a < b) <=> b <= a`]);
 (NEW_GOAL `V u /\ V y /\ ~(u = (y:real^3))`);
 (ASM_REWRITE_TAC[]);
 STRIP_TAC;
 (ONCE_REWRITE_TAC[GSYM IN]);
 (ASM_REWRITE_TAC[]);
 (ONCE_REWRITE_TAC[GSYM IN]);
 (ASM_REWRITE_TAC[]);
 UP_ASM_TAC;
 (ASM_MESON_TAC[packing]);
 (REWRITE_TAC[BETA_THM]);
 VECTOR_ARITH_TAC;
 (REWRITE_TAC[BETA_THM]);
 (UP_ASM_TAC THEN REWRITE_TAC[INTER;IN_ELIM_THM]);
 (MESON_TAC[]);
 (UP_ASM_TAC THEN REWRITE_TAC[IN_ELIM_THM]);
 (REWRITE_TAC[VECTOR_ARITH `(u = x + u:real^3) <=> (x = vec 0)`]);
 (UP_ASM_TAC THEN REWRITE_TAC[INTER; DIFF;IN_ELIM_THM;ball]);
 (REPEAT STRIP_TAC);
 (NEW_GOAL `dist(vec 0, x:real^3) = &0`);
 (ASM_REWRITE_TAC[dist]);
 NORM_ARITH_TAC;
 (ASM_REAL_ARITH_TAC);
 (REWRITE_TAC[BETA_THM;dist]);
 (UP_ASM_TAC THEN REWRITE_TAC[INTER; DIFF;IN_ELIM_THM;ball]);
 (REWRITE_TAC[IN_ELIM_THM;cball]);
 NORM_ARITH_TAC;
 (REWRITE_TAC[BETA_THM]);
 (VECTOR_ARITH_TAC);
 (REWRITE_TAC[BETA_THM]);
 (AP_TERM_TAC);
 (REWRITE_TAC[HL]);
 (REWRITE_WITH `!u v:real^3. set_of_list [u; v] = {u , v}`);
 (REWRITE_TAC[set_of_list]);
 (UP_ASM_TAC THEN REWRITE_TAC[INTER; DIFF;IN_ELIM_THM;ball]);
 (REPEAT STRIP_TAC);
 (NEW_GOAL `~(x:real^3 = vec 0)`);
 (REPEAT STRIP_TAC);
 (NEW_GOAL `dist(vec 0, x:real^3) = &0`);
 (ASM_REWRITE_TAC[dist]);
 NORM_ARITH_TAC;
 (ASM_REAL_ARITH_TAC);
 (REWRITE_WITH `radV {u:real^3, x + u} = radV {vec 0 + u, x + u}`);
 (MESON_TAC[VECTOR_ARITH `!u. u = vec 0 + u`]);
 (ASM_MESON_TAC[RADV_TRANS_EQ]);
 (ASM_REWRITE_TAC[]) ]);;


(* Finish the Lemma *)
end;;
