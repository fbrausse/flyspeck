(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Packing                                                           *)
(* Lemma: OXLZLEZ                                                             *)
(* Author: Nguyen Quang Truong                                                *)
(* Date: 2012-12-21                                                           *)
(* ========================================================================== *)



(* 

dont worry about this: #use "/home/user1/flyspeck/working/boot.hl";;


let build_sequence = (
  ["general/hol_pervasives.hl";
   "general/lib.hl";
   "general/flyspeck_lib.hl";
   "general/sphere.hl";

   "leg/geomdetail.hl";
   "leg/AFF_SGN_TAC.hl";
   "leg/affprops.hl";
   "leg/cayleyR_def.hl";
   "leg/enclosed_def.hl";
   "leg/collect_geom.hl";
   "leg/collect_geom2.hl"; (* slow and rarely needed *)

   "jordan/refinement.hl"; 
   "jordan/lib_ext.hl"; 
   "jordan/hash_term.hl"; 
   "jordan/parse_ext_override_interface.hl"; 
   "jordan/goal_printer.hl"; 
   "jordan/real_ext.hl";  
   "jordan/tactics_jordan.hl"; 
   "jordan/num_ext_nabs.hl";   
   "jordan/taylor_atn.hl";
   "jordan/float.hl"; 
   "jordan/flyspeck_constants.hl";
   "jordan/misc_defs_and_lemmas.hl"; 
   "general/tactics.hl";
   "usr/thales/hales_tactic.hl"]);;



let build_all() =
  (needs "Multivariate/flyspeck.ml"; 
   map (fun t -> State_manager.neutralize_state(); flyspeck_needs t) build_sequence);;


build_all ();;

needs "/home/user1/flyspeck/working/oxl_lemma.hl";;



===================== dont worry about this ================
needs "/home/user1/flyspeck/working/update_database_310.ml";;
needs "/home/user1/flyspeck/working/asm_search.ml";;
needs "/home/user1/flyspeck/working/oxl_2012.hl";;


*)
module Oxl_2012 = struct

  open Oxl_def;;


let asms_search0 sths =
  let rec immediatesublist l1 l2 =
    match (l1,l2) with
      [],_ -> true
    | _,[] -> false
    | (h1::t1,h2::t2) -> h1 = h2 & immediatesublist t1 t2 in
  let rec sublist l1 l2 =
    match (l1,l2) with
      [],_ -> true
    | _,[] -> false
    | (h1::t1,h2::t2) -> immediatesublist l1 l2 or sublist l1 t2 in
  let exists_subterm_satisfying p (n,th) = can (find_term p) (concl th)
  and name_contains s (n,th) = sublist (explode s) (explode n) in
  let rec filterpred tm =
    match tm with
      Comb(Var("<omit this pattern>",_),t) -> not o filterpred t
    | Comb(Var("<match theorem name>",_),Var(pat,_)) -> name_contains pat
    | Comb(Var("<match aconv>",_),pat) -> exists_subterm_satisfying (aconv pat)
    | pat -> exists_subterm_satisfying (can (term_match [] pat)) in
  fun pats ->
    let triv,nontriv = partition is_var pats in
    (if triv <> [] then
      warn true
         ("Ignoring plain variables in search: "^
          end_itlist (fun s t -> s^", "^t) (map (fst o dest_var) triv))
     else ());
    (if nontriv = [] & triv <> [] then []
     else itlist (filter o filterpred) pats sths);;

let asms_search tms =
  let gstk = !current_goalstack in
  match gstk with
    [] -> []
  | (meta,gl::_,just)::_
       -> let (sths,_) = gl in
          map snd (asms_search0 sths tms)
  | _  -> failwith "asm_searchs: Invalid goal state";;

let ASMS_SEARCH_TCL (tms:(term)list) (thstac:(thm)list->tactic) : tactic =
  fun (gl:goal) ->
  let (sths,tm) = gl in
  let ths1 = map snd (asms_search0 sths tms) in
  thstac ths1 gl;;

let ASM_SEARCH_TCL (tms:(term)list) (thstac:thm->tactic) : tactic =
  let foo ths = match ths with
                  [] -> failwith "ASM_SEARCH_TCL: No matching asms found"
                | _  -> thstac (hd ths) in
  ASMS_SEARCH_TCL tms foo;;




let ATTACH thm = MATCH_MP (MESON[]` ! a b. ( a ==> b ) ==> ( a <=> a /\ b )`) thm;;

let NHANH tm = ONCE_REWRITE_TAC[ ATTACH (SPEC_ALL ( tm ))];;

let PHA = REWRITE_TAC[ MESON[] ` (a/\b)/\c <=> a/\ b /\ c `; MESON[]`
a ==> b ==> c <=> a /\ b ==> c `];;

let DOWN_TAC = REPEAT (FIRST_X_ASSUM MP_TAC) THEN REWRITE_TAC[IMP_IMP] THEN PHA;;


let types_thm th = let cl = concl th in
List.map dest_var (frees cl );;

let seans_fn () =
let (tms,tm) = top_goal () in
let vss = map frees (tm::tms) in
let vs = setify (flat vss) in
map dest_var vs;;





let PAT_REWRITE_TAC tm thms =
(CONV_TAC (PAT_CONV tm (REWRITE_CONV thms )));;

let FOR_ASM th =
let th1 = REWRITE_RULE[MESON[]` a /\ b ==> c <=>
a ==> b ==> c `] th in
let th2 = SPEC_ALL th1 in UNDISCH_ALL th2;;

(* change a th having form |- A ==> t to the form A |- t
to get ready to some other commands


|- A ==> t
----------- FOR_ASM
A |- t
*)

let ASSUME_TAC2 = ASSUME_TAC o FOR_ASM;;


let PAT_ONCE_REWRITE_TAC tm thms =
(CONV_TAC (PAT_CONV tm (ONCE_REWRITE_CONV thms )));;

let ASM_PAT_RW_TAC tm thms = EVERY_ASSUM (fun th ->
(CONV_TAC (PAT_CONV tm (ONCE_REWRITE_CONV
( th ::[ thms ] )))));;

let PAT_TH_TAC tm th =
(CONV_TAC (PAT_CONV tm (REWRITE_CONV[th] )));;


let IMP_TO_EQ_RULE th = MATCH_MP (TAUT` (a ==> b ) ==>
( a <=> a /\ b )`) (SPEC_ALL th);;

let NHANH_PAT tm th = PAT_ONCE_REWRITE_TAC tm
[ IMP_TO_EQ_RULE th ];;


let MAKE_FIRST_TAC tm = UNDISCH_TAC tm THEN DISCH_TAC;;


(* ------------- *)

let QU_OR_QXY = prove (` ! i. cc_qu_v9 cc i \/ cc_qx_v9 cc i \/ cc_qy_v9 cc i `,
REWRITE_TAC[cc_qu_v9; cc_qx_v9; cc_qy_v9] THEN MESON_TAC[]);;

let QX_NN0 = REWRITE_RULE[REAL_ARITH` #0.0 = &0`] QX_NN;;
let QY_NN0 = REWRITE_RULE[REAL_ARITH` #0.0 = &0`] QY_NN;;


let MOD_REFL = REWRITE_RULE[MULT_CLAUSES] (SPECL [`m:num `;`1`] MOD_MULT);;


let SUM_POS_LT_NUMSEG = prove_by_refinement (
`!m n f. m <= n /\ (!p. m <= p /\ p <= n ==> &0 < f p) ==> &0 < sum (m..n) f`,
[GEN_TAC;
INDUCT_TAC;
REWRITE_TAC[LE; SUM_CLAUSES_NUMSEG];
SIMP_TAC[];
GEN_TAC;
STRIP_TAC;
FIRST_X_ASSUM (MP_TAC o (SPEC` 0`));
ASM_REWRITE_TAC[LE];


GEN_TAC;
ASM_CASES_TAC` m = SUC n `;
ASM_REWRITE_TAC[SUM_SING_NUMSEG];
STRIP_TAC;
FIRST_X_ASSUM (MP_TAC o (SPEC` SUC n `));
FIRST_X_ASSUM MP_TAC;
CONV_TAC TAUT;

STRIP_TAC;
SUBGOAL_THEN`  &0 < sum (m..n) f ` MP_TAC;
FIRST_X_ASSUM MATCH_MP_TAC;
CONJ_TAC;
DOWN_TAC;
ARITH_TAC;
FIRST_X_ASSUM MP_TAC;
MESON_TAC[ARITH_RULE` a <= p ==> a <= SUC p `];
REWRITE_TAC[SUM_CLAUSES_NUMSEG];
ASM_REWRITE_TAC[];
STRIP_TAC;
MATCH_MP_TAC REAL_LT_ADD;
ASM_REWRITE_TAC[];
FIRST_X_ASSUM MATCH_MP_TAC;
ASM_REWRITE_TAC[LE_REFL]]);;




let periodic_mult = prove_by_refinement (
` periodic f n <=> !k p. f (k * n + p ) = f p `,
[REWRITE_TAC[periodic];
EQ_TAC;
STRIP_TAC;
INDUCT_TAC;
REWRITE_TAC[MULT; ADD];

REWRITE_TAC[ADD1; NUM_RING` (k + 1) * n = k * n + n `];
REWRITE_TAC[ARITH_RULE` (a + b) + c = a + b + (c:num) `];
DOWN_TAC;
MESON_TAC[ADD_SYM];

DISCH_THEN (MP_TAC o (SPEC`1 `));
REWRITE_TAC[MULT_CLAUSES];
MESON_TAC[ADD_SYM]]);;




(* =================================================== *)
CHQSQEY_concl;;




let glt = `cc_bool_model_v9 cc /\
 cc_real_model_v9 cc /\
 sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0 /\
 indSet = 0..cc_card_v9 cc - 1
 ==> (?i j k.
          ~(i = j \/ j = k \/ k = i) /\
          i IN indSet /\
          j IN indSet /\
          k IN indSet /\
          cc_4cell_v9 cc i /\
          cc_4cell_v9 cc j /\
          cc_4cell_v9 cc k)`;;


let e1 = (STRIP_TAC THEN ASSUME_TAC2 CC_CARD2 THEN 
DOWN_TAC THEN NHANH periodic_fn THEN 
ASM_CASES_TAC` ~ (?i. i IN indSet /\ cc_4cell_v9 cc i)` THENL [


SUBGOAL_THEN` ! i. i IN indSet ==> cc_qy_v9 cc i ` MP_TAC THENL 
[MP_TAC QU_OR_QXY THEN 
REWRITE_TAC[cc_qu_v9; cc_qx_v9] THEN 
FIRST_X_ASSUM MP_TAC THEN 
MESON_TAC[];

REWRITE_TAC[cc_real_model_v9; cc_bool_model_v9]] THEN 

REPEAT STRIP_TAC THEN 
SUBGOAL_THEN` ! i. i IN indSet ==> &0 < cc_gg_v9 cc i ` MP_TAC THENL [


UNDISCH_TAC`!i. i IN indSet ==> cc_qy_v9 cc i` THEN
DISCH_THEN NHANH THEN
UNDISCH_TAC`!i. cc_qy_v9 cc i ==> #0.008 * cc_azim_v9 cc i <= cc_gg_v9 cc i` THEN
STRIP_TAC THEN
FIRST_ASSUM NHANH THEN
GEN_TAC THEN

UNDISCH_TAC` !i. #0.606 <= cc_azim_v9 cc i ` THEN
DISCH_TAC THEN
FIRST_ASSUM (MP_TAC o (SPEC` i: num `)) THEN
REAL_ARITH_TAC;

STRIP_TAC] THEN 
SUBGOAL_THEN` &0 < sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) ` MP_TAC THENL


[MATCH_MP_TAC SUM_POS_LT_NUMSEG THEN CONJ_TAC THENL 
[UNDISCH_TAC` ~ (cc_card_v9 cc = 0) ` THEN 
ARITH_TAC;

REPEAT STRIP_TAC THEN 
FIRST_X_ASSUM MATCH_MP_TAC THEN 
ASM_REWRITE_TAC[IN_NUMSEG]];


UNDISCH_TAC` sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0 ` THEN 
REAL_ARITH_TAC];

FIRST_X_ASSUM MP_TAC] THEN 
REWRITE_TAC[] THEN STRIP_TAC THEN STRIP_TAC THEN 
ASM_CASES_TAC` ~ ( ?j. j IN indSet /\ ~(j = i) /\ cc_4cell_v9 cc j)`);;



let e2 = (FIRST_X_ASSUM MP_TAC THEN 
REWRITE_TAC [
MESON[]` ~(?j. j IN indSet /\ ~(j = i) /\ cc_4cell_v9 cc j) <=>
!j. j IN indSet /\ ~(j = i)  ==> ~ cc_4cell_v9 cc j `] THEN 

STRIP_TAC THEN 
SUBGOAL_THEN`!j. j IN indSet /\ ~(j = i) ==> cc_qy_v9 cc j ` MP_TAC THENL [



FIRST_ASSUM NHANH THEN 
REPEAT STRIP_TAC THEN 
MP_TAC (SPEC `j:num` QU_OR_QXY) THEN 
FIRST_ASSUM MP_TAC THEN 
SIMP_TAC[cc_qu_v9; cc_qx_v9];


SUBGOAL_THEN` cc_qu_v9 cc i \/ cc_qx_v9 cc i ` MP_TAC] THENL [

MP_TAC (SPEC_ALL QU_OR_QXY) THEN 
MATCH_MP_TAC (TAUT` ~ c ==> a \/ b \/ c ==> a \/ b `) THEN
ASM_REWRITE_TAC[cc_qy_v9];


STRIP_TAC THEN 
STRIP_TAC THEN 
SUBGOAL_THEN` cc_qy_v9 cc (i + 1)` MP_TAC]);;




let e3 = (ASM_CASES_TAC` i < cc_card_v9 cc - 1 ` THENL [
FIRST_ASSUM (MP_TAC o SPEC` i + 1 `) THEN ANTS_TAC THENL [
ASM_REWRITE_TAC[ARITH_RULE`~( i + 1 = i ) `; IN_NUMSEG] THEN 
FIRST_ASSUM MP_TAC THEN 
ARITH_TAC;

REWRITE_TAC[]];



UNDISCH_TAC` (i:num) IN indSet ` THEN 
ASM_REWRITE_TAC[IN_NUMSEG] THEN 
STRIP_TAC THEN 
ASSUME_TAC2 (ARITH_RULE` ~(i < cc_card_v9 cc - 1) /\ i <= cc_card_v9 cc - 1 ==> cc_card_v9 cc - 1 = i `) THEN 
UNDISCH_TAC` periodic (cc_qy_v9 cc) (cc_card_v9 cc) ` THEN 
EXPAND_TAC "i" THEN 
DOWN_TAC THEN 
REWRITE_TAC[cc_bool_model_v9] THEN 
NHANH (ARITH_RULE` ~( a = 0) ==> a - 1 + 1 = a `) THEN 
SIMP_TAC[periodic] THEN 


STRIP_TAC THEN 
ONCE_REWRITE_TAC[ARITH_RULE` a = 0 + a `] THEN 
ASM_REWRITE_TAC[] THEN 
FIRST_X_ASSUM MATCH_MP_TAC THEN 
ASM_REWRITE_TAC[IN_NUMSEG] THEN 

EXPAND_TAC "i" THEN 
REWRITE_TAC[LE] THEN 
MATCH_MP_TAC (ARITH_RULE` 2 <= a ==> ~( 0 = a - 1) `) THEN 
FIRST_ASSUM ACCEPT_TAC]);;


let e4 = (


(* ------------------------------------- *)
DOWN_TAC THEN 
REWRITE_TAC[cc_real_model_v9] THEN 
STRIP_TAC THEN 
UNDISCH_TAC` !i. cc_qu_v9 cc i /\ cc_qy_v9 cc (i + 1)
          ==> cc_eps <= cc_gg_v9 cc i + cc_gg3a_v9 cc (i + 1) ` THEN 
STRIP_TAC THEN 
FIRST_ASSUM (MP_TAC o SPEC_ALL) THEN 
ANTS_TAC THENL [ASM_REWRITE_TAC[];
MAKE_FIRST_TAC` !i. cc_qy_v9 cc i
          ==> cc_gg3a_v9 cc i + cc_gg3b_v9 cc i <= cc_gg_v9 cc i `] THEN 

SUBGOAL_THEN` cc_gg3a_v9 cc ( i + 1) <= cc_gg_v9 cc ( i + 1) ` MP_TAC THENL [
MATCH_MP_TAC REAL_LE_TRANS THEN 
EXISTS_TAC` cc_gg3a_v9 cc (i + 1) + cc_gg3b_v9 cc (i + 1)` THEN 

CONJ_TAC THENL [
REWRITE_TAC[REAL_LE_ADDR] THEN 
FIRST_X_ASSUM MATCH_MP_TAC THEN 
ASM_REWRITE_TAC[];

FIRST_X_ASSUM MATCH_MP_TAC THEN 
ASM_REWRITE_TAC[]];


PHA] THEN 
NHANH (REAL_ARITH` a <= b /\ c <= d + a ==> c <= d + b `));;



(* 
`(cc_gg3a_v9 cc (i + 1) <= cc_gg_v9 cc (i + 1) /\
  cc_eps <= cc_gg_v9 cc i + cc_gg3a_v9 cc (i + 1)) /\
 cc_eps <= cc_gg_v9 cc i + cc_gg_v9 cc (i + 1)
 ==> (?i j k.
          ~(i = j \/ j = k \/ k = i) /\
          i IN indSet /\
          j IN indSet /\
          k IN indSet /\
          cc_4cell_v9 cc i /\
          cc_4cell_v9 cc j /\
          cc_4cell_v9 cc k)`

*)

(* ---------- BG TEST ------------- *)

let WKR_COMPTED = prove_by_refinement (glt ,
[e1 ; e2 ; e3; e4;

STRIP_TAC THEN 
MP_TAC (SPECL [` cc_gg_v9 cc `;` cc_card_v9 cc`] periodic_sum) THEN 
ANTS_TAC THENL [
ASM_REWRITE_TAC[] THEN 
UNDISCH_TAC` cc_bool_model_v9 cc ` THEN 
SIMP_TAC[cc_bool_model_v9];
DISCH_THEN (ASSUME_TAC o (SPEC` i:num`))] THEN 
SUBGOAL_THEN` &0 <= sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) ` MP_TAC;

ASM_CASES_TAC` i < cc_card_v9 cc - 1 `;
SUBGOAL_THEN` 0..cc_card_v9 cc - 1 = ((0..cc_card_v9 cc - 1) DIFF {i, i +1} ) UNION {i, i + 1}` MP_TAC THENL [
MATCH_MP_TAC (SET_RULE` s SUBSET S ==> S = (S DIFF s) UNION s `) THEN 
UNDISCH_TAC` (i:num) IN indSet` THEN 
ASM_SIMP_TAC[INSERT_SUBSET; EMPTY_SUBSET] THEN 

REWRITE_TAC[IN_NUMSEG] THEN 
FIRST_ASSUM MP_TAC THEN 
ARITH_TAC;


DISCH_THEN SUBST1_TAC THEN 
REWRITE_TAC[]];

SUBGOAL_THEN` ! f.  sum ((0..cc_card_v9 cc - 1) DIFF {i, i + 1} UNION {i, i + 1}) f = sum ((0..cc_card_v9 cc - 1) DIFF {i, i + 1}) f + sum ({i, i + 1}) f ` MP_TAC THENL [
GEN_TAC THEN 
MATCH_MP_TAC SUM_UNION THEN
CONJ_TAC THENL [
MESON_TAC[FINITE_NUMSEG; FINITE_DIFF];
CONJ_TAC] THENL [
MESON_TAC[FINITE_EMPTY; FINITE_INSERT];
SET_TAC[]];


SIMP_TAC[] THEN
STRIP_TAC THEN 
MATCH_MP_TAC REAL_LE_ADD THEN 
CONJ_TAC];


MATCH_MP_TAC SUM_POS_LE THEN CONJ_TAC THENL [
MESON_TAC[FINITE_NUMSEG; FINITE_DIFF];
REPEAT STRIP_TAC];



REWRITE_TAC[REAL_ARITH` &0 = #0.0 `] THEN 
MATCH_MP_TAC QY_NN THEN 
ASM_REWRITE_TAC[cc_bool_model_v9; cc_real_model_v9] THEN
FIRST_ASSUM MATCH_MP_TAC
 THEN
ASM_REWRITE_TAC[] THEN 
FIRST_ASSUM MP_TAC THEN 
REWRITE_TAC[IN_DIFF; IN_INSERT] THEN 
MESON_TAC[];



MP_TAC (MATCH_MP Geomdetail.SUM_DIS2 (ARITH_RULE` ~( i = i + 1 ) `)) THEN
STRIP_TAC THEN
MATCH_MP_TAC REAL_LE_TRANS THEN
EXISTS_TAC` cc_eps:real` THEN
ASM_REWRITE_TAC[] THEN REWRITE_TAC[cc_eps] THEN
REAL_ARITH_TAC;


ASM_CASES_TAC` i = cc_card_v9 cc - 1 ` THENL [
SUBGOAL_THEN` 0..cc_card_v9 cc - 1 = ((0..cc_card_v9 cc - 1) DIFF {i, 0}) UNION {i, 0}` MP_TAC THENL [
MATCH_MP_TAC (SET_RULE` s SUBSET S ==> S = (S DIFF s) UNION s`) THEN
REWRITE_TAC[INSERT_SUBSET; EMPTY_SUBSET; IN_NUMSEG] THEN
FIRST_X_ASSUM MP_TAC THEN
UNDISCH_TAC` (i:num) IN indSet` THEN
ASM_REWRITE_TAC[IN_NUMSEG] THEN
SIMP_TAC[LE; LE_0];

DISCH_THEN SUBST1_TAC] THEN 

SUBGOAL_THEN` FINITE ((0..cc_card_v9 cc - 1) DIFF {i, 0}) /\
     FINITE {i, 0} /\
     DISJOINT ((0..cc_card_v9 cc - 1) DIFF {i, 0}) {i, 0} ` MP_TAC THENL [
REWRITE_TAC[SET_RULE` DISJOINT (S DIFF s) s`] THEN 
MESON_TAC[FINITE_NUMSEG; FINITE_INSERT; FINITE_EMPTY; FINITE_DIFF];
NHANH (ISPECL[` cc_gg_v9 cc`;` (0..cc_card_v9 cc - 1) DIFF {i, 0}`;` {i, 0}`] SUM_UNION) THEN 
SIMP_TAC[]] THEN 

STRIP_TAC THEN 
MATCH_MP_TAC REAL_LE_ADD THEN 
CONJ_TAC THENL [
MATCH_MP_TAC SUM_POS_LE THEN
ASM_REWRITE_TAC[] THEN
GEN_TAC THEN
REWRITE_TAC[IN_DIFF; IN_INSERT] THEN
STRIP_TAC THEN
MATCH_MP_TAC QY_NN0 THEN
ASM_REWRITE_TAC[cc_bool_model_v9; cc_real_model_v9] THEN
FIRST_X_ASSUM MATCH_MP_TAC THEN
ASM_REWRITE_TAC[] THEN
FIRST_X_ASSUM MP_TAC THEN
CONV_TAC TAUT;


SUBGOAL_THEN` ~( i = 0) ` MP_TAC THENL [
ASM_REWRITE_TAC[] THEN 
UNDISCH_TAC` 2 <= cc_card_v9 cc ` THEN 
ARITH_TAC; STRIP_TAC]] THEN 




ASSUME_TAC2 (ISPECL [`i:num `;` 0`; ` cc_gg_v9 cc `] Geomdetail.SUM_DIS2) THEN
UNDISCH_TAC` cc_eps <= cc_gg_v9 cc i + cc_gg_v9 cc (i + 1) ` THEN
ASSUME_TAC2 (ARITH_RULE` 2 <= cc_card_v9 cc ==> cc_card_v9 cc - 1 + 1 = cc_card_v9 cc `) THEN
ASM_REWRITE_TAC[] THEN
UNDISCH_TAC` periodic (cc_gg_v9 cc) (cc_card_v9 cc) ` THEN
REWRITE_TAC[periodic] THEN
STRIP_TAC THEN
FIRST_ASSUM (MP_TAC o (SPEC` 0 `)) THEN
SIMP_TAC[ARITH_RULE` 0 + a = a `] THEN
REPEAT STRIP_TAC THEN
MATCH_MP_TAC REAL_LE_TRANS THEN
EXISTS_TAC` cc_eps:real ` THEN
ASM_REWRITE_TAC[cc_eps] THEN
REAL_ARITH_TAC;


UNDISCH_TAC` (i:num) IN indSet` THEN
ASM_REWRITE_TAC[IN_NUMSEG] THEN
REPLICATE_TAC 2 (FIRST_X_ASSUM MP_TAC) THEN
ARITH_TAC];

ASM_REWRITE_TAC[REAL_ARITH` a <= b <=> ~( b < a ) `];

ASSUME_TAC2 QX_NN0 THEN
SUBGOAL_THEN` &0 <= sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc)` MP_TAC THENL [


MATCH_MP_TAC SUM_POS_LE_NUMSEG THEN
REPEAT STRIP_TAC THEN
ASM_CASES_TAC` p = (i:num) ` THENL [
ASM_REWRITE_TAC[];

MATCH_MP_TAC QY_NN0 THEN
ASM_REWRITE_TAC[] THEN
FIRST_X_ASSUM MATCH_MP_TAC THEN
ASM_REWRITE_TAC[IN_NUMSEG]];
ASM_REWRITE_TAC[REAL_ARITH` a <= b <=> ~( b < a ) `]];

STRIP_TAC;
SUBGOAL_THEN` &0 <= sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc)` MP_TAC;


MATCH_MP_TAC SUM_POS_LE_NUMSEG;
REPEAT STRIP_TAC;
ASM_CASES_TAC` p = (i:num) `;
ASM_REWRITE_TAC[];
MATCH_MP_TAC QX_NN0;

ASM_REWRITE_TAC[];
MATCH_MP_TAC QY_NN0;

ASM_REWRITE_TAC[];
FIRST_X_ASSUM MATCH_MP_TAC THEN
ASM_REWRITE_TAC[IN_NUMSEG];

ASM_REWRITE_TAC[REAL_ARITH` a <= b <=> ~( b < a ) `];


(* *********** *)

FIRST_X_ASSUM MP_TAC THEN 
REWRITE_TAC[] THEN 
STRIP_TAC THEN 
ASM_CASES_TAC` ~(? k. (k IN indSet /\ ~(k = i) /\ ~(k = j)) /\ cc_4cell_v9 cc k)`;


FIRST_X_ASSUM MP_TAC THEN
REWRITE_TAC[MESON[]` ~(?x. p x /\ q x) <=> !x. p x ==> ~ q x `] THEN
STRIP_TAC THEN

SUBGOAL_THEN` !k. k IN indSet /\ ~(k = i) /\ ~(k = j) ==> cc_qy_v9 cc k ` MP_TAC THENL [
FIRST_X_ASSUM NHANH THEN
REPEAT STRIP_TAC THEN
MP_TAC (SPEC` k:num` QU_OR_QXY) THEN
ASM_REWRITE_TAC[cc_qu_v9; cc_qx_v9] ;

STRIP_TAC THEN
ASM_CASES_TAC`~( ?qy. qy IN indSet /\ cc_qy_v9 cc qy)` THEN
FIRST_X_ASSUM MP_TAC THEN
FIRST_X_ASSUM MP_TAC THEN
PHA THEN
NHANH (SET_RULE` (!k. k IN indSet /\ ~(k = i) /\ ~(k = j) ==> cc_qy_v9 cc k) /\
 ~(?qy. qy IN indSet /\ cc_qy_v9 cc qy) ==> indSet SUBSET {i, j} `)] THEN 
DOWN_TAC THEN
REWRITE_TAC[cc_real_model_v9] THEN
STRIP_TAC THEN
UNDISCH_TAC` sum (0..cc_card_v9 cc - 1) (cc_azim_v9 cc) = &2 * pi ` THEN
UNDISCH_TAC` !i. #0.606 <= cc_azim_v9 cc i ` THEN
NHANH (REAL_ARITH` #0.606 <= f i ==> &0 <= f i `) THEN
STRIP_TAC THEN STRIP_TAC;



SUBGOAL_THEN` sum (0..cc_card_v9 cc - 1) (cc_azim_v9 cc) <= sum {i, j} (cc_azim_v9 cc) ` MP_TAC;


MATCH_MP_TAC SUM_SUBSET_SIMPLE THEN
UNDISCH_TAC` indSet SUBSET {i, j:num} ` THEN
ASM_SIMP_TAC[] THEN
MESON_TAC[FINITE_EMPTY; FINITE_INSERT];


ASSUME_TAC2 (ISPECL [`j:num `;` i:num `;` cc_azim_v9 cc `] Geomdetail.SUM_DIS2) THEN
ONCE_REWRITE_TAC[INSERT_COMM] THEN
ASM_REWRITE_TAC[] THEN
UNDISCH_TAC` cc_4cell_v9 cc j ` THEN
UNDISCH_TAC` cc_4cell_v9 cc i ` THEN
UNDISCH_TAC` !i. cc_4cell_v9 cc i ==> cc_azim_v9 cc i < #2.8 ` THEN
DISCH_TAC THEN
FIRST_ASSUM NHANH THEN
REPEAT STRIP_TAC;

MP_TAC (MESON[Flyspeck_constants.bounds]` #3.14159 < pi`) THEN
STRIP_TAC THEN
ASSUME_TAC2 (
REAL_ARITH` &2 * pi <= cc_azim_v9 cc j + cc_azim_v9 cc i /\
cc_azim_v9 cc j < #2.8 /\ cc_azim_v9 cc i < #2.8 ==>
pi < #2.8 `) THEN
REPLICATE_TAC 2 (FIRST_X_ASSUM MP_TAC) THEN
REAL_ARITH_TAC;




(* 

 46 [`qy IN indSet`]
 47 [`cc_qy_v9 cc qy`]
 48 [`!i. #0.606 <= cc_azim_v9 cc i /\ &0 <= cc_azim_v9 cc i`]
 49 [`sum (0..cc_card_v9 cc - 1) (cc_azim_v9 cc) = &2 * pi`]

`?i j k.
     ~(i = j \/ j = k \/ k = i) /\
     i IN indSet /\
     j IN indSet /\
     k IN indSet /\
     cc_4cell_v9 cc i /\
     cc_4cell_v9 cc j /\
     cc_4cell_v9 cc k`

*)



SUBGOAL_THEN` ?ii jj. {ii, jj} = {i:num, j} /\ cc_qy_v9 cc (ii + 1)` MP_TAC;

ASM_CASES_TAC` cc_qy_v9 cc ( (i:num) + 1) ` THENL [
EXISTS_TAC` i:num ` THEN
EXISTS_TAC` j:num ` THEN
FIRST_X_ASSUM MP_TAC THEN
SIMP_TAC[];

EXISTS_TAC` j:num ` ] THEN
EXISTS_TAC` i:num ` THEN
REWRITE_TAC[ INSERT_COMM] THEN
SUBGOAL_THEN` ! m. ~cc_qy_v9 cc m ==> (m) MOD (cc_card_v9 cc)  = (i:num)
\/ m MOD (cc_card_v9 cc) = j ` MP_TAC;

GEN_TAC THEN
ASSUME_TAC2 (ARITH_RULE` 2 <= cc_card_v9 cc ==> ~( cc_card_v9 cc = 0)`) THEN
ABBREV_TAC ` nn = cc_card_v9 cc ` THEN
ASSUME_TAC2 (SPECL [`m:num `;` nn:num `] MOD_IN_NUMSEG) THEN
ASSUME_TAC2 (ISPECL [` cc_qy_v9 cc `;` nn: num `;` m:num `] periodic_mod) THEN
ABBREV_TAC`m1 = m MOD nn ` THEN
ASM_REWRITE_TAC[] THEN
STRIP_TAC THEN
SUBGOAL_THEN` m1 = (i:num) \/ m1 = j ` MP_TAC;

UNDISCH_TAC` !k. k IN indSet /\ ~(k = i) /\ ~(k = j) ==> cc_qy_v9 cc k` THEN
DISCH_THEN (MP_TAC o (SPEC` m1 : num `)) THEN
UNDISCH_TAC` ~ cc_qy_v9 cc m1 ` THEN
UNDISCH_TAC` m1 IN 0..nn - 1 ` THEN
ASM_REWRITE_TAC[] THEN
CONV_TAC TAUT;

SIMP_TAC[];
(* *)
 
(* 
 50 [`~cc_qy_v9 cc (i + 1)`]

`(!m. ~cc_qy_v9 cc m ==> m MOD cc_card_v9 cc = i \/ m MOD cc_card_v9 cc = j)
 ==> cc_qy_v9 cc (j + 1)`

*)



ABBREV_TAC` nn = cc_card_v9 cc ` THEN 
STRIP_TAC THEN 
ASM_CASES_TAC` cc_qy_v9 cc (j + 1) ` THENL [
FIRST_X_ASSUM ACCEPT_TAC;
SUBGOAL_THEN` ! m. ~(m IN indSet /\ (m + 1) MOD nn = m)` MP_TAC];

GEN_TAC THEN 
ASM_REWRITE_TAC[IN_NUMSEG] THEN 
STRIP_TAC THEN 
ASM_CASES_TAC` m = nn - 1 `;

ASSUME_TAC2 (ARITH_RULE` 2 <= nn /\ m = nn - 1 ==> m + 1 = 1 * nn + 0  `) THEN
MP_TAC (SPECL [` m + 1`;` nn: num `;` 1`; ` 0`] MOD_UNIQ) THEN

ANTS_TAC THENL [
ASM_REWRITE_TAC[] THEN
UNDISCH_TAC` 2 <= nn ` THEN
ARITH_TAC;

DISCH_THEN SUBST_ALL_TAC THEN
UNDISCH_TAC` 0 = m` THEN
ASM_REWRITE_TAC[] THEN
UNDISCH_TAC` 2 <= nn ` THEN
ARITH_TAC ];

ASSUME_TAC2 (ARITH_RULE` m <= nn - 1 /\ ~(m = nn - 1) ==> m + 1 < nn`) THEN 
MP_TAC (SPECL[` m + 1 `;` nn: num `;` 0 `;` m + 1 `] MOD_UNIQ) THEN 
ANTS_TAC THENL [
ASM_REWRITE_TAC[] THEN ARITH_TAC;
DISCH_THEN SUBST_ALL_TAC] THEN 
UNDISCH_TAC` m + 1 = m`  THEN ARITH_TAC;


FIRST_ASSUM (ASSUME_TAC2 o (SPEC` i + 1 `));
FIRST_ASSUM (ASSUME_TAC2 o (SPEC` j + 1 `));
STRIP_TAC;
FIRST_ASSUM (ASSUME_TAC2 o (SPEC` i:num`));
FIRST_ASSUM (ASSUME_TAC2 o (SPEC` j:num`));
REPLICATE_TAC 2 (FIRST_X_ASSUM MP_TAC);
UNDISCH_TAC` (i:num) IN indSet `;
UNDISCH_TAC` (j:num) IN indSet`;
SIMP_TAC[];
REPEAT STRIP_TAC;
UNDISCH_TAC` (i + 1) MOD nn = i \/ (i + 1) MOD nn = j `;
UNDISCH_TAC` (j + 1) MOD nn = i \/ (j + 1) MOD nn = j`;
ASM_REWRITE_TAC[];

ASM_CASES_TAC` j + 1 = nn `;
ASM_REWRITE_TAC[];

(* 
`nn MOD nn = i ==> ~((i + 1) MOD nn = j)`

*)


ASSUME_TAC2 (ARITH_RULE` 2 <= nn ==> ~( nn = 0) `) THEN 
ASSUME_TAC2 (SPEC`nn:num` (GEN_ALL MOD_REFL)) THEN 
ASM_REWRITE_TAC[] THEN 
DISCH_THEN (SUBST_ALL_TAC o SYM) THEN 
REWRITE_TAC[ADD] THEN 
ASSUME_TAC2 (ARITH_RULE` 2 <= nn ==> 1 < nn `) THEN 
FIRST_ASSUM MP_TAC THEN 
NHANH MOD_LT THEN 
SIMP_TAC[] THEN 
REPEAT STRIP_TAC THEN 
FIRST_X_ASSUM (SUBST_ALL_TAC o SYM) THEN 
SUBST_ALL_TAC (ARITH_RULE` 1 + 1 = 2 `) THEN 

UNDISCH_TAC` qy IN (indSet: num -> bool) ` THEN 
ASM_REWRITE_TAC[IN_NUMSEG] THEN 
UNDISCH_TAC` 2 = nn ` THEN 
DISCH_THEN (SUBST_ALL_TAC o SYM) THEN 
REWRITE_TAC[ARITH_RULE` 0 <= x /\ x <= 2 - 1 <=> x = 0 \/ x = 1 `];


STRIP_TAC THENL [

FIRST_X_ASSUM SUBST_ALL_TAC THEN 
UNDISCH_TAC` cc_4cell_v9 cc 0 ` THEN 
UNDISCH_TAC` cc_qy_v9 cc 0 ` THEN 
ASM_REWRITE_TAC[cc_qy_v9];

FIRST_X_ASSUM SUBST_ALL_TAC THEN 
UNDISCH_TAC` cc_4cell_v9 cc 1 ` THEN 
UNDISCH_TAC` cc_qy_v9 cc 1 ` THEN 
ASM_REWRITE_TAC[cc_qy_v9]];

STRIP_TAC THEN 
SUBGOAL_THEN` j + 1 < (nn: num) ` MP_TAC THENL [
UNDISCH_TAC` j:num IN indSet` THEN 
ASM_REWRITE_TAC[IN_NUMSEG] THEN 
UNDISCH_TAC` ~( j + 1 = nn ) ` THEN 
UNDISCH_TAC` 2 <= nn ` THEN 
ARITH_TAC;

NHANH MOD_LT THEN 
ASM_REWRITE_TAC[] THEN 
SIMP_TAC[]];

REWRITE_TAC[ARITH_RULE` (j + 1) + 1 = j + 2 `] THEN
ASM_CASES_TAC` j + 2 < nn` THENL [
ASSUME_TAC2 (SPECL [`j + 2`;` nn:num `] MOD_LT) THEN
FIRST_X_ASSUM SUBST1_TAC THEN
ARITH_TAC;
STRIP_TAC];

ASSUME_TAC2  (ARITH_RULE` ~(j + 2 < nn) /\ j + 1 < nn ==> j + 2 = nn `) THEN
ASM_REWRITE_TAC[] THEN
ASSUME_TAC2 (ARITH_RULE` 2 <= nn ==> ~(nn = 0) `) THEN
ASSUME_TAC2 (SPEC`nn:num ` (GEN_ALL MOD_REFL)) THEN
ASM_REWRITE_TAC[] THEN
STRIP_TAC THEN
FIRST_X_ASSUM (SUBST_ALL_TAC o SYM) THEN
UNDISCH_TAC` qy:num IN indSet ` THEN
ASM_REWRITE_TAC[IN_NUMSEG] THEN
EXPAND_TAC "nn" THEN
REWRITE_TAC[ARITH_RULE` 0 <= qy /\ qy <= (0 + 2) - 1 <=> qy = 0 \/ qy = 1`] THEN
STRIP_TAC THENL [

UNDISCH_TAC` cc_qy_v9 cc qy ` THEN
UNDISCH_TAC` cc_4cell_v9 cc 0 ` THEN
ASM_SIMP_TAC[cc_qy_v9];

UNDISCH_TAC` cc_qy_v9 cc qy ` THEN
UNDISCH_TAC` cc_4cell_v9 cc i ` THEN
ASM_SIMP_TAC[cc_qy_v9; ADD]];




STRIP_TAC THEN ABBREV_TAC` nn = cc_card_v9 cc ` THEN 
SUBGOAL_THEN` ? nj k. nj < nn /\ nj + 1 = k * nn + jj /\ cc_qy_v9 cc nj ` MP_TAC;

ASM_CASES_TAC` jj = 0 `;

EXISTS_TAC` nn - 1 ` THEN
EXISTS_TAC` 1 ` THEN
FIRST_X_ASSUM SUBST_ALL_TAC THEN
ASSUME_TAC2 (ARITH_RULE` 2 <= nn ==> nn - 1 < nn /\ nn - 1 + 1 = 1 * nn + 0 `) THEN
ASM_SIMP_TAC[] THEN
ASSUME_TAC2 (ARITH_RULE` 2 <= nn ==> ~( nn - 1 = 0) `) THEN
ASM_CASES_TAC` nn - 1 = ii' ` THENL [
UNDISCH_TAC` cc_qy_v9 cc (ii' + 1)` THEN
FIRST_X_ASSUM (SUBST_ALL_TAC o SYM) THEN
ASM_REWRITE_TAC[ARITH_RULE` 1 * n + 0 = 0 + n`] THEN
UNDISCH_TAC` periodic (cc_qy_v9 cc) nn ` THEN
SIMP_TAC[periodic] THEN
STRIP_TAC THEN
UNDISCH_TAC` {nn - 1, 0} = {i, j} ` THEN
UNDISCH_TAC` cc_4cell_v9 cc i ` THEN
UNDISCH_TAC` cc_4cell_v9 cc j ` THEN
REWRITE_TAC[cc_qy_v9] THEN
SET_TAC[];


ASSUME_TAC2 (SET_RULE` ~(nn - 1 = 0) /\ ~(nn - 1 = ii') /\ {ii', 0} = {i, j} ==> ~( nn - 1 = i) /\ ~( nn - 1 = j ) `) THEN
FIRST_X_ASSUM MATCH_MP_TAC THEN
ASM_REWRITE_TAC[IN_NUMSEG; LE_REFL] THEN
MATCH_MP_TAC (ARITH_RULE` 2 <= nn ==> 0 <= nn - 1 `) THEN
FIRST_X_ASSUM ACCEPT_TAC];


EXISTS_TAC` jj - 1 ` THEN
EXISTS_TAC` 0 ` THEN
REWRITE_TAC[MULT; ADD] THEN
CONJ_TAC THENL [
     MATCH_MP_TAC (ARITH_RULE` jj <= nn - 1 /\ ~( jj = 0) ==> jj - 1 < nn `) THEN
ASM_REWRITE_TAC[] THEN
SUBGOAL_THEN` jj:num IN indSet` MP_TAC THENL [


MP_TAC (SET_RULE` jj IN {ii', jj:num}`) THEN
ASM_REWRITE_TAC[] THEN
ASM_REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY] THEN
UNDISCH_TAC` (i:num) IN indSet ` THEN
UNDISCH_TAC` (j:num) IN indSet ` THEN
ASM_REWRITE_TAC[] THEN
MESON_TAC[];

ASM_REWRITE_TAC[IN_NUMSEG] THEN
SIMP_TAC[]];

    CONJ_TAC THENL [FIRST_X_ASSUM MP_TAC THEN 
ARITH_TAC; REWRITE_TAC[]]];


ASM_CASES_TAC` jj - 1 = ii' ` THENL [

UNDISCH_TAC` cc_qy_v9 cc (ii' + 1) ` THEN
EXPAND_TAC "ii'" THEN
ASSUME_TAC2 (ARITH_RULE` ~( jj = 0) ==> jj - 1 + 1 = jj `) THEN
FIRST_X_ASSUM SUBST1_TAC THEN
MP_TAC (SET_RULE` jj IN {ii', jj:num} `) THEN
ASM_REWRITE_TAC[] THEN
REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY; cc_qy_v9 ] THEN
UNDISCH_TAC` cc_4cell_v9 cc i ` THEN
UNDISCH_TAC` cc_4cell_v9 cc j ` THEN
MESON_TAC[];

FIRST_X_ASSUM MATCH_MP_TAC THEN
CONJ_TAC];



ASM_REWRITE_TAC[IN_NUMSEG] THEN
MATCH_MP_TAC (ARITH_RULE` ~(jj = 0) /\ 0 <= jj /\ jj <= nn - 1 ==> 0 <= jj - 1 /\ jj - 1 <= nn - 1 `) THEN
ASM_REWRITE_TAC[] THEN
MP_TAC (SET_RULE` jj IN {ii', jj:num} `) THEN
ASM_REWRITE_TAC[GSYM IN_NUMSEG] THEN
REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY] THEN
UNDISCH_TAC` (i:num) IN indSet ` THEN
UNDISCH_TAC` (j:num) IN indSet ` THEN
ASM_REWRITE_TAC[] THEN
MESON_TAC[];

(* 
 52 [`~(jj = 0)`]
 53 [`~(jj - 1 = ii')`]

`~(jj - 1 = i) /\ ~(jj - 1 = j)`

*)


SUBGOAL_THEN` ~( jj - 1 IN {ii', jj:num})` MP_TAC;
REWRITE_TAC[IN_INSERT; NOT_IN_EMPTY];
ASM_REWRITE_TAC[];
UNDISCH_TAC` ~( jj = 0) `;
ARITH_TAC;

ASM_REWRITE_TAC[];
SET_TAC[];

(* ================== *)

STRIP_TAC;
(* 

 53 [`nj < nn`]
 54 [`nj + 1 = k * nn + jj`]
 55 [`cc_qy_v9 cc nj`]

`?i j k.
     ~(i = j \/ j = k \/ k = i) /\
     i IN indSet /\
     j IN indSet /\
     k IN indSet /\
     cc_4cell_v9 cc i /\
     cc_4cell_v9 cc j /\
     cc_4cell_v9 cc k`


*)

ASSUME_TAC2 (ARITH_RULE` 2 <= nn ==> ~( nn = 0) `) THEN
ASSUME_TAC2 (SPECL [` ii' + 1 `;` nn:num `] DIVMOD_EXIST) THEN
FIRST_X_ASSUM MP_TAC THEN STRIP_TAC THEN
SUBGOAL_THEN` {nj, r, ii', jj:num} SUBSET indSet ` MP_TAC THENL [
ONCE_REWRITE_TAC[INSERT_SUBSET] THEN
ONCE_REWRITE_TAC[INSERT_SUBSET] THEN
ASM_REWRITE_TAC[] THEN
CONJ_TAC THENL [
REWRITE_TAC[IN_NUMSEG] THEN 
UNDISCH_TAC` ~( nn = 0) ` THEN 
UNDISCH_TAC` nj < nn:num ` THEN 
ARITH_TAC;
CONJ_TAC] THENL [

  REWRITE_TAC[IN_NUMSEG] THEN 
UNDISCH_TAC` ~( nn = 0) ` THEN 
UNDISCH_TAC` r < nn:num ` THEN 
ARITH_TAC;

UNDISCH_TAC` i:num IN indSet`] THEN
UNDISCH_TAC` j:num IN indSet` THEN 
ASM_REWRITE_TAC[] THEN SET_TAC[];

STRIP_TAC];


SUBGOAL_THEN` &0 <= sum ({nj, r, ii', jj}) (cc_gg_v9 cc)` MP_TAC;


UNDISCH_TAC` cc_qy_v9 cc (ii' + 1) ` THEN
ASM_REWRITE_TAC[] THEN
UNDISCH_TAC` periodic (cc_qy_v9 cc) nn ` THEN
REWRITE_TAC[periodic_mult] THEN
SIMP_TAC[] THEN
STRIP_TAC THEN
UNDISCH_TAC` cc_qy_v9 cc nj ` THEN
REWRITE_TAC[cc_qy_v9] THEN
REPEAT STRIP_TAC THEN
ASSUME_TAC2 (SET_RULE` {ii', jj} = {i, j} /\ cc_4cell_v9 cc i /\ cc_4cell_v9 cc j /\
~ (cc_4cell_v9 cc nj) /\ ~( cc_4cell_v9 cc r) ==> DISJOINT {nj, r} {ii', jj}`) THEN
REWRITE_TAC[SET_RULE` {a,b,c,d} = {a,b} UNION {c,d} `] THEN
ASSUME_TAC (MESON[Geomdetail.FINITE6]` ! a (b:A). FINITE {a,b}`) THEN

SUBGOAL_THEN` ! f. sum ({nj, r:num} UNION {i, j}) f = sum {nj, r} f + sum {i, j} f ` MP_TAC THENL [
GEN_TAC THEN
MATCH_MP_TAC SUM_UNION THEN
UNDISCH_TAC` DISJOINT {nj, r} {ii', jj:num} ` THEN
ASM_SIMP_TAC[];


SIMP_TAC[] THEN
STRIP_TAC];


(*


61 [`!a b. FINITE {a, b}`]
 62 [`!f. sum ({nj, r} UNION {i, j}) f = sum {nj, r} f + sum {i, j} f`]

`&0 <= sum {nj, r} (cc_gg_v9 cc) + sum {i, j} (cc_gg_v9 cc)`


*)

SUBGOAL_THEN` (! i. cc_qy_v9 cc (i + 1)
          ==> &0 <= cc_gg_v9 cc i + cc_gg3a_v9 cc (i + 1)) /\
  (! i. cc_qy_v9 cc i
          ==> &0 <= cc_gg3b_v9 cc i + cc_gg_v9 cc (i + 1)) ` MP_TAC;
CONJ_TAC;
(* AHTYRED ================= *)
GEN_TAC;
ASM_CASES_TAC` cc_qu_v9 cc i' `;
FIRST_X_ASSUM MP_TAC;
PHA;
UNDISCH_TAC` !i. cc_qu_v9 cc i /\ cc_qy_v9 cc (i + 1)
       ==> cc_eps <= cc_gg_v9 cc i + cc_gg3a_v9 cc (i + 1) `;
DISCH_THEN NHANH;
REWRITE_TAC[cc_eps];
REAL_ARITH_TAC;


MP_TAC (SPEC` i':num ` QU_OR_QXY);
ASM_REWRITE_TAC[];
ASM_SEARCH_TCL [`#0.0 <= cc_gg_v9 cc i `] NHANH;
STRIP_TAC;
ASM_SEARCH_TCL [`&0 <= cc_gg3a_v9 cc i `] NHANH;
FIRST_X_ASSUM MP_TAC;
REAL_ARITH_TAC;

ASM_SEARCH_TCL [` &0 <= cc_gg3a_v9 cc i`] NHANH;
STRIP_TAC;
ASM_SEARCH_TCL [` cc_gg3a_v9 cc i + cc_gg3b_v9 cc i <= cc_gg_v9 cc i`] (ASSUME_TAC2 o (SPEC` i':num `));
MATCH_MP_TAC REAL_LE_ADD;
ASM_REWRITE_TAC[];
MATCH_MP_TAC REAL_LE_TRANS;
EXISTS_TAC` cc_gg3a_v9 cc i' + cc_gg3b_v9 cc i' `;
ASM_REWRITE_TAC[];
MATCH_MP_TAC REAL_LE_ADD;
CONJ_TAC;
ASM_SEARCH_TCL [` A ==> &0 <= cc_gg3a_v9 cc i' `] (MATCH_MP_TAC o (SPEC` i':num`));
FIRST_X_ASSUM ACCEPT_TAC;
ASM_SEARCH_TCL [` A ==> &0 <= cc_gg3b_v9 cc i' `] (MATCH_MP_TAC o (SPEC` i':num`));
FIRST_X_ASSUM ACCEPT_TAC;
(* AHTYRED ================= *)
(*

 60 [`DISJOINT {nj, nj} {ii', jj}`]
 61 [`!a b. FINITE {a, b}`]
 62 [`!f. sum ({nj, nj} UNION {i, j}) f = sum {nj, nj} f + sum {i, j} f`]

`!i. cc_qy_v9 cc i ==> &0 <= cc_gg3b_v9 cc i + cc_gg_v9 cc (i + 1)`

*)

GEN_TAC;
ASM_CASES_TAC` cc_qu_v9 cc (i' + 1) `;
FIRST_X_ASSUM MP_TAC THEN PHA;
ASM_SEARCH_TCL [`cc_eps <= cc_gg3b_v9 cc i' + cc_gg_v9 cc i `] NHANH;
REWRITE_TAC[cc_eps];
REAL_ARITH_TAC;

SUBST_ALL_TAC (REAL_ARITH` #0.0 = &0 `);
ASM_SEARCH_TCL [` &0 <= cc_gg3b_v9 cc i`] NHANH;
MP_TAC (SPEC` i' + 1 ` QU_OR_QXY);
ASMS_SEARCH_TCL [` ~cc_qu_v9 cc (i' + 1) `] REWRITE_TAC;
ASM_SEARCH_TCL [` &0 <= cc_gg_v9 cc i `] NHANH;
ASM_SEARCH_TCL [` &0 <= cc_gg_v9 cc i `] NHANH;
ASM_SEARCH_TCL [` cc_gg3a_v9 cc i + ccy `] NHANH;
REPEAT STRIP_TAC;
(* 2 goals *)

MATCH_MP_TAC REAL_LE_ADD;
ASMS_SEARCH_TCL [` &0 <= x `] REWRITE_TAC;
MATCH_MP_TAC REAL_LE_ADD;
ASMS_SEARCH_TCL [` &0 <= cc_gg3b_v9 cc i  `] REWRITE_TAC;
MATCH_MP_TAC REAL_LE_TRANS;
EXISTS_TAC` cc_gg3a_v9 cc (i' + 1) + cc_gg3b_v9 cc (i' + 1)`;
ASM_REWRITE_TAC[];
MATCH_MP_TAC REAL_LE_ADD;
UNDISCH_TAC` cc_qy_v9 cc (i' + 1)`;
ASMS_SEARCH_TCL [` cc_qy_v9 cc i ==> &0 <= x `] SIMP_TAC;

 (* end the 2nd goal
(!i. cc_qy_v9 cc i ==> &0 <= cc_gg3b_v9 cc i + cc_gg_v9 cc (i + 1))
*)

STRIP_TAC;
ASM_CASES_TAC` nj = (r:num) `;
FIRST_X_ASSUM (SUBST_ALL_TAC o SYM);
REWRITE_TAC[INSERT_INSERT; SUM_SING];

ASM_SEARCH_TCL [` {a,b} = {x,y} `] (SUBST1_TAC o SYM);
ASSUME_TAC2 (SET_RULE` ~(j = (i:num)) /\ {ii', jj} = {i, j} ==> ~( ii' = jj)`);
ASSUME_TAC2 (ISPECL [` ii':num `;` jj:num `;` cc_gg_v9 cc `] Geomdetail.SUM_DIS2);
FIRST_X_ASSUM SUBST1_TAC;
ASM_SEARCH_TCL [`  cc_qy_v9 cc (i + 1) ==> x `] (MP_TAC o (SPEC` ii':num `));
ANTS_TAC;
ASM_REWRITE_TAC[];
ASM_REWRITE_TAC[cc_qy_v9];
ASM_SEARCH_TCL [` periodic `;` cc_gg3a_v9`] MP_TAC;
REWRITE_TAC[periodic_mult];
ASM_REWRITE_TAC[];
SIMP_TAC[];
STRIP_TAC;
ASM_SEARCH_TCL [`  cc_qy_v9 cc i ==> x `;` cc_gg3b_v9 `] (MP_TAC o (SPEC`nj: num`));
ANTS_TAC;
ASM_REWRITE_TAC[cc_qy_v9];
ASM_SEARCH_TCL [` periodic `;` cc_gg_v9`] MP_TAC;
REWRITE_TAC[periodic_mult];
ASM_REWRITE_TAC[];
SIMP_TAC[];
STRIP_TAC;
ASM_SEARCH_TCL [` cc_qy_v9 cc i ==> a + b <= c`] (MP_TAC o (SPEC` nj: num `));
ANTS_TAC;
ASM_REWRITE_TAC[cc_qy_v9];
PHA;
REAL_ARITH_TAC;


ASM_SEARCH_TCL [` {a,b} = {c,d} `] (SUBST1_TAC o SYM);
ASSUME_TAC2 (ISPECL [`nj: num`;` r:num `;` cc_gg_v9 cc `] Geomdetail.SUM_DIS2);
ASSUME_TAC2 (SET_RULE` {ii', jj} = {i,j:num} /\ ~( j = i) ==> ~( ii' = jj) `);
ASSUME_TAC2 (ISPECL [`ii': num`;` jj:num `;` cc_gg_v9 cc `] Geomdetail.SUM_DIS2);
ASM_REWRITE_TAC[];
FIRST_X_ASSUM (MP_TAC o (SPEC ` nj: num`));
ANTS_TAC;
ASM_REWRITE_TAC[cc_qy_v9];
FIRST_X_ASSUM (MP_TAC o (SPEC ` ii': num`));
ANTS_TAC;
ASM_REWRITE_TAC[];
ASM_REWRITE_TAC[cc_qy_v9];
ASM_REWRITE_TAC[];
ASM_SEARCH_TCL [` periodic `;` cc_gg3a_v9`] MP_TAC;
ASM_SEARCH_TCL [` periodic `;` cc_gg_v9`] MP_TAC;
SIMP_TAC[periodic_mult];
STRIP_TAC THEN STRIP_TAC;
ASM_SEARCH_TCL [` cc_qy_v9 cc i ==> a + b <= c`] (MP_TAC o (SPEC` r:num `));
ANTS_TAC;
ASM_REWRITE_TAC[cc_qy_v9];
ASM_SEARCH_TCL [` cc_qy_v9 cc i ==> a + b <= c`] (MP_TAC o (SPEC` nj:num `));
ANTS_TAC;
ASM_REWRITE_TAC[cc_qy_v9];
ASM_SEARCH_TCL [` cc_qy_v9 cc i ==> &0 <= x`;` cc_gg3b_v9 `] (MP_TAC o (SPEC` r:num `));
ANTS_TAC;
ASM_REWRITE_TAC[cc_qy_v9];
ASM_SEARCH_TCL [` cc_qy_v9 cc i ==> &0 <= x`;` cc_gg3a_v9 `] (MP_TAC o (SPEC` nj:num `));
ANTS_TAC;
ASM_REWRITE_TAC[cc_qy_v9];
REAL_ARITH_TAC;

(* ======================================== *)

FIRST_X_ASSUM MP_TAC;
ASM_REWRITE_TAC[];
ABBREV_TAC` sts = {nj, r, i, j:num} `;
NHANH (SET_RULE` s SUBSET S ==> (S DIFF s) UNION s = S `);
REPEAT STRIP_TAC;
SUBGOAL_THEN` &0 <= sum ((0..nn - 1) DIFF sts) (cc_gg_v9 cc) ` MP_TAC;
MATCH_MP_TAC SUM_POS_LE;
CONJ_TAC;
MATCH_MP_TAC FINITE_DIFF;
REWRITE_TAC[FINITE_NUMSEG];
GEN_TAC;
REWRITE_TAC[IN_DIFF];
STRIP_TAC;
MATCH_MP_TAC QY_NN0;
ASM_REWRITE_TAC[];
ASM_REWRITE_TAC[cc_real_model_v9];
FIRST_X_ASSUM MATCH_MP_TAC;
ASM_REWRITE_TAC[];
UNDISCH_TAC` ~( (x:num) IN sts ) `;
EXPAND_TAC "sts";
REWRITE_TAC[IN_INSERT];
CONV_TAC TAUT;
STRIP_TAC;
SUBGOAL_THEN` &0 <= sum ((0..nn - 1)) (cc_gg_v9 cc)` MP_TAC;
SUBGOAL_THEN` sum (0..nn - 1) (cc_gg_v9 cc) = sum ((0..nn - 1) DIFF sts) (cc_gg_v9 cc) + sum sts (cc_gg_v9 cc)` MP_TAC;
ASM_SEARCH_TCL [` a UNION b = c `] (fun x -> PAT_ONCE_REWRITE_TAC`\x. x = y `[SYM x]);
MATCH_MP_TAC SUM_UNION;
CONJ_TAC;
MATCH_MP_TAC FINITE_DIFF;
REWRITE_TAC[FINITE_NUMSEG];
CONJ_TAC;
EXPAND_TAC "sts";
REWRITE_TAC[Geomdetail.FINITE6];
SET_TAC[];
DISCH_THEN SUBST1_TAC;
MATCH_MP_TAC REAL_LE_ADD;
ASM_REWRITE_TAC[];

NHANH (REAL_ARITH` &0 <= a ==> ~( a < &0) `);
ASM_REWRITE_TAC[];

FIRST_X_ASSUM MP_TAC;
REWRITE_TAC[];
STRIP_TAC;

EXISTS_TAC`i:num `;
EXISTS_TAC`j:num `;
EXISTS_TAC`k:num `;
ASM_REWRITE_TAC[]]);;




let oxl6142 = prove_by_refinement (CHQSQEY_concl,
[GEN_TAC;
ABBREV_TAC` indSet = 0..cc_card_v9 cc - 1 `;
STRIP_TAC;
MP_TAC WKR_COMPTED;
ANTS_TAC;
ASM_REWRITE_TAC[];
STRIP_TAC;

REWRITE_TAC[cc_size_v9];
SUBGOAL_THEN` {i,j,k} SUBSET {i | i IN 0..cc_card_v9 cc - 1 /\ cc_4cell_v9 cc i}` MP_TAC;
ASM_REWRITE_TAC[INSERT_SUBSET; EMPTY_SUBSET; IN_ELIM_THM];
ASM_REWRITE_TAC[];
STRIP_TAC;
SUBGOAL_THEN` FINITE {i | i IN indSet /\ cc_4cell_v9 cc i} ` MP_TAC;
MATCH_MP_TAC FINITE_SUBSET;
EXISTS_TAC` indSet:num -> bool `;
EXPAND_TAC "indSet";
REWRITE_TAC[FINITE_NUMSEG];
SET_TAC[];
FIRST_X_ASSUM MP_TAC;
PHA;
NHANH CARD_SUBSET;
STRIP_TAC;
ASM_SEARCH_TCL [` a \/ b`] MP_TAC;
REWRITE_TAC[GSYM Geomdetail.CARD3];
DISCH_THEN SUBST_ALL_TAC;
FIRST_X_ASSUM ACCEPT_TAC]);;


(*  

CHQSQEY_concl;;
cc_bool_prep_v9;;
CHQSQEY_concl;;

val it : term =
  `!cc. cc_bool_model_v9 cc /\
        cc_bool_prep_v9 cc /\
        cc_real_model_v9 cc /\
        sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0
        ==> 3 <= cc_size_v9 cc (cc_4cell_v9 cc)`
*)
end;;
