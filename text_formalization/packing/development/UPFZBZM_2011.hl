(* ========================================================================= *)
(* ========================================================================= *)
(*                   The working file of KIZHLTL3 lemma                      *)
(* ========================================================================= *)
(*                   Axioms and loads                                        *)
(* ========================================================================= *)
  (* Viet rieng thanh 1 bo de DIHX_SYM: 




#use "/home/ky/flyspeck/working/empty.hl";;




(* ========================================================================= *)


search [`inverse p i = j <=> p j = i`];;



b();;

type_of `TABLE_4`;;
TABLE_4;;


g `!V X u v.
     packing V /\ saturated V /\ mcell_set V X /\ {u, v} IN edgeX V X
     ==> dihX V X (u,v) = dihX V X (v,u)`;;
e (REPEAT STRIP_TAC);;
e (REWRITE_TAC[dihX]);;
e (COND_CASES_TAC);;
e (COND_CASES_TAC);;
e (REFL_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (DEL_TAC THEN REWRITE_TAC[cell_params_d] THEN REPEAT LET_TAC);;

e (UNDISCH_TAC `{u, v} IN edgeX V X` THEN REWRITE_TAC[edgeX; IN;IN_ELIM_THM]);;
e (REWRITE_WITH `VX V X = V INTER X`);;
e (MATCH_MP_TAC Hdtfnfz.HDTFNFZ);;
e (ASM_REWRITE_TAC[]);;
e (UNDISCH_TAC `mcell_set V X` THEN REWRITE_TAC[mcell_set;IN_ELIM_THM;IN]);;
e (MESON_TAC[]);;
e (STRIP_TAC);;
e (MP_TAC (ASSUME `(V INTER X) (u':real^3)`) THEN 
   MP_TAC (ASSUME `(V INTER X) (v':real^3)`));;
e (UNDISCH_TAC `mcell_set V X` THEN REWRITE_TAC[mcell_set_2;IN_ELIM_THM;IN]);;
e (STRIP_TAC);;
e (REWRITE_TAC[ASSUME `X = mcell i V ul''`]);;
e (REWRITE_WITH `(V INTER mcell i V ul'') = set_of_list (truncate_simplex (i-1) ul'')`);;
e (MATCH_MP_TAC Lepjbdj.LEPJBDJ);;
e (ASM_REWRITE_TAC[]);;
e (REWRITE_TAC[GSYM (ASSUME `X = mcell i V ul''`)]);;
e (STRIP_TAC);;
e (REWRITE_TAC[ARITH_RULE `1 <= i <=> ~(i = 0)`]);;
e (STRIP_TAC);;
e (MP_TAC (ASSUME `(V INTER X) (u':real^3)`));;
e (REWRITE_WITH `V INTER X:real^3->bool = {}`);;
e (ASM_REWRITE_TAC[]);;
e (MATCH_MP_TAC Lepjbdj.LEPJBDJ_0);;
e (ASM_REWRITE_TAC[]);;
e (REWRITE_TAC[MESON[IN] `{} x <=> x IN {}`]);;
e (SET_TAC[]);;
e (UNDISCH_TAC `~NULLSET X` THEN MESON_TAC[NEGLIGIBLE_EMPTY]);;
e (REPEAT STRIP_TAC);;
e (ASM_CASES_TAC `i <= 1`);;
e (NEW_GOAL `?w0 w1 w2 w3. ul'' = [w0;w1;w2;w3:real^3]`);;
e (MATCH_MP_TAC BARV_3_EXPLICIT);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;
e (UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (v':real^3)` THEN
   UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (u':real^3)`);;
e (NEW_GOAL `i - 1 = 0`);;
e (UNDISCH_TAC `i <= 1` THEN ARITH_TAC);;
e (ASM_REWRITE_TAC[TRUNCATE_SIMPLEX_EXPLICIT_0; set_of_list; 
   MESON[IN] `(A:real^3->bool) b <=> b IN A`]);;
e (REWRITE_TAC[SET_RULE `a IN {b} <=> a = b`]);;
e (UNDISCH_TAC `~(u' = v':real^3)`);;
e (SET_TAC[]);; 
e (UP_ASM_TAC THEN REWRITE_TAC[ARITH_RULE `~(i <= 1) <=> 2 <= i`] 
   THEN STRIP_TAC);;

(* ========================================================================== *)

e (NEW_GOAL `?p. p permutes 0..i - 1 /\ 
                 initial_sublist [u:real^3; v] (left_action_list p ul'')`);;
e (NEW_GOAL `?w0 w1 w2 w3. ul'' = [w0;w1;w2;w3:real^3]`);;
e (MATCH_MP_TAC BARV_3_EXPLICIT);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (ASM_CASES_TAC `i = 2`);;
e (UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (v':real^3)` THEN
   UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (u':real^3)`);;
e (NEW_GOAL `i - 1 = 1`);;
e (UNDISCH_TAC `i = 2` THEN ARITH_TAC);;
e (ASM_REWRITE_TAC[TRUNCATE_SIMPLEX_EXPLICIT_1; set_of_list; 
   MESON[IN] `(A:real^3->bool) b <=> b IN A`]);;
e (REPEAT STRIP_TAC);;
e (ASM_CASES_TAC `u = w0:real^3`);;
e (NEW_GOAL `v = w1:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UNDISCH_TAC 
  `~(u' = v':real^3)` THEN UNDISCH_TAC `{u,v} = {u',v':real^3}` 
   THEN SET_TAC[]);;
e (EXISTS_TAC `I:num->num`);;
e (ASM_REWRITE_TAC[PERMUTES_I; Packing3.LEFT_ACTION_LIST_I]);;
e (REWRITE_WITH `initial_sublist [w0; w1] [w0; w1; w2; w3] /\ 
                 LENGTH [w0;w1:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST]);;
e (REWRITE_TAC[TRUNCATE_SIMPLEX_EXPLICIT_1; LENGTH] THEN ARITH_TAC);;
e (NEW_GOAL `v = w0:real^3 /\ u = w1:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UNDISCH_TAC 
  `~(u' = v':real^3)` THEN UNDISCH_TAC `{u,v} = {u',v':real^3}` 
   THEN SET_TAC[]);;
e (ASM_REWRITE_TAC[]);;
e (NEW_GOAL `?p. p permutes 0..1 /\ 
                 [w1; w0; w2; w3:real^3] = left_action_list p ul''`);;
e (MATCH_MP_TAC Qzksykg.TWO_REARRANGEMENT_LEMMA);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (UP_ASM_TAC THEN ASM_REWRITE_TAC[] THEN STRIP_TAC);;
e (EXISTS_TAC `p:num->num` THEN ASM_REWRITE_TAC[] THEN REWRITE_TAC[GSYM 
   (ASSUME `[w1; w0; w2; w3] = left_action_list p [w0; w1; w2; w3:real^3]`)]);;
e (REWRITE_WITH `initial_sublist [w1; w0] [w1; w0; w2; w3] /\ 
                 LENGTH [w1;w0:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST]);;
e (REWRITE_TAC[TRUNCATE_SIMPLEX_EXPLICIT_1; LENGTH] THEN ARITH_TAC);;

e (ASM_CASES_TAC `i = 3`);;
e (UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (v':real^3)` THEN
   UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (u':real^3)`);;
e (ASM_REWRITE_TAC[ARITH_RULE `3 - 1 = 2`; TRUNCATE_SIMPLEX_EXPLICIT_2;
   set_of_list; MESON[IN] `(A:real^3->bool) b <=> b IN A`]);;
e (REPEAT STRIP_TAC);;

e (NEW_GOAL `u IN {w0, w1, w2} /\ v IN {w0, w1, w2:real^3} /\ ~(u = v)`);;
e (ASM_SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?a. {u,v, a} = {w0, w1, w2:real^3}`);;
e (NEW_GOAL `?w:real^3. w IN {w0, w1, w2} DIFF {u, v}`);;
e (REWRITE_TAC[SET_RULE `(?x. x IN s) <=> ~(s = {})`]);;
e (REWRITE_WITH `{w0, w1, w2} DIFF {u, v:real^3} = {} <=> 
                  CARD ({w0, w1, w2} DIFF {u, v}) = 0`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC CARD_EQ_0);;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{w0, w1, w2:real^3}`);;
e (REWRITE_TAC[Geomdetail.FINITE6] THEN SET_TAC[]);;

e (NEW_GOAL `CARD {w0, w1, w2} = CARD ({w0, w1, w2} DIFF {u, v:real^3}) +
                                 CARD {u, v}`);;
e (MATCH_MP_TAC Hypermap.CARD_MINUS_DIFF_TWO_SET);;
e (ASM_REWRITE_TAC[Geomdetail.FINITE6]);;
e (UP_ASM_TAC THEN REWRITE_WITH `CARD ({w0, w1, w2:real^3}) = 3`);;
e (ASM_CASES_TAC `CARD {w0,w1,w2:real^3} <= 2`);;
e (NEW_GOAL `F`);;
e (NEW_GOAL `CARD {w0, w1, w2, w3:real^3} = 4`);;
e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN REWRITE_WITH `CARD {w0, w1, w2, w3} = 
                                 CARD {w3, w0,w1,w2:real^3}`);;
e (AP_TERM_TAC THEN SET_TAC[]);;
e (NEW_GOAL `CARD ({w3, w0, w1, w2}) <= SUC (CARD {w0, w1, w2:real^3})`);;
e (SIMP_TAC[Geomdetail.CARD_CLAUSES_IMP; Geomdetail.FINITE6]);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN ARITH_TAC);;
e (ASM_MESON_TAC[]);;
e (NEW_GOAL `CARD {w0, w1, w2:real^3} <= 3`);;
e (REWRITE_TAC[Geomdetail.CARD3]);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN ARITH_TAC);;

e (SUBGOAL_THEN `CARD {u,v:real^3} <= 2` MP_TAC);;
e (REWRITE_TAC[Geomdetail.CARD2]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;
e (EXISTS_TAC `w:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?p. p permutes 0..2 /\
                [u; v; a; w3] = left_action_list p [w0; w1; w2; w3:real^3]`);;
e (MATCH_MP_TAC LEFT_ACTION_LIST_2_EXISTS);;
e (ASM_REWRITE_TAC[]);;

e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (EXISTS_TAC `p:num->num`);;
e (ASM_REWRITE_TAC[]);;
e (REWRITE_TAC[GSYM (ASSUME `[u; v; a; w3:real^3] = 
                             left_action_list p [w0; w1; w2; w3]`)]);;
e (REWRITE_WITH `initial_sublist [u; v] [u; v; a; w3] /\ 
                 LENGTH [u; v:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST; LENGTH;
   TRUNCATE_SIMPLEX_EXPLICIT_1] THEN ARITH_TAC);;

e (NEW_GOAL `i = 4`);;
e (ASM_ARITH_TAC);;
e (UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (v':real^3)` THEN
   UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (u':real^3)`);;
e (ASM_REWRITE_TAC[ARITH_RULE `4 - 1 = 3`; TRUNCATE_SIMPLEX_EXPLICIT_3;
   set_of_list; MESON[IN] `(A:real^3->bool) b <=> b IN A`]);;
e (REPEAT STRIP_TAC);;

e (NEW_GOAL `u IN {w0, w1, w2, w3} /\ v IN {w0, w1, w2, w3:real^3} /\ 
            ~(u = v)`);;
e (ASM_SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?a b. {u,v,a,b} = {w0, w1, w2, w3:real^3}`);;

e (NEW_GOAL `?w:real^3. w IN {w0, w1, w2, w3} DIFF {u, v}`);;
e (REWRITE_TAC[SET_RULE `(?x. x IN s) <=> ~(s = {})`]);;
e (REWRITE_WITH `{w0, w1, w2, w3} DIFF {u, v:real^3} = {} <=> 
                  CARD ({w0, w1, w2, w3} DIFF {u, v}) = 0`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC CARD_EQ_0);;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{w0, w1, w2, w3:real^3}`);;
e (REWRITE_TAC[Geomdetail.FINITE6] THEN SET_TAC[]);;

e (NEW_GOAL `CARD {w0, w1, w2, w3} = 
             CARD ({w0, w1, w2, w3} DIFF {u, v:real^3}) + CARD {u, v}`);;
e (MATCH_MP_TAC Hypermap.CARD_MINUS_DIFF_TWO_SET);;
e (ASM_REWRITE_TAC[Geomdetail.FINITE6]);;

e (UP_ASM_TAC THEN REWRITE_WITH `CARD ({w0, w1, w2, w3:real^3}) = 3 + 1`);;
e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (NEW_GOAL `CARD {u, v:real^3} <= 2`);;
e (REWRITE_TAC[Geomdetail.CARD2]);;
e (UP_ASM_TAC THEN ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?m:real^3. m IN {w0, w1, w2, w3} DIFF {u, v, w}`);;
e (REWRITE_TAC[SET_RULE `(?x. x IN s) <=> ~(s = {})`]);;
e (REWRITE_WITH `{w0, w1, w2, w3} DIFF {u, v, w:real^3} = {} <=> 
                  CARD ({w0, w1, w2, w3} DIFF {u, v, w}) = 0`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC CARD_EQ_0);;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{w0, w1, w2, w3:real^3}`);;
e (REWRITE_TAC[Geomdetail.FINITE6] THEN SET_TAC[]);;

e (NEW_GOAL `CARD ({w0, w1, w2, w3} DIFF {u,v,w:real^3}) = 
             CARD {w0, w1, w2, w3} - CARD {u,v,w}`);;
e (MATCH_MP_TAC CARD_DIFF);;
e (ASM_REWRITE_TAC[Geomdetail.FINITE6]);;

e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN SET_TAC[]);;
e (UP_ASM_TAC THEN REWRITE_WITH `CARD ({w0, w1, w2, w3:real^3}) = 3 + 1`);;
e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (NEW_GOAL `CARD {u, v, w:real^3} <= 3`);;
e (REWRITE_TAC[Geomdetail.CARD3]);;
e (UP_ASM_TAC THEN ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (EXISTS_TAC `w:real^3` THEN EXISTS_TAC `m:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN 
   UP_ASM_TAC THEN SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?p. p permutes 0..3 /\
                [u; v; a; b] = left_action_list p [w0; w1; w2; w3:real^3]`);;
e (MATCH_MP_TAC LEFT_ACTION_LIST_3_EXISTS);;
e (ASM_REWRITE_TAC[]);;

e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (EXISTS_TAC `p:num->num`);;
e (ASM_REWRITE_TAC[]);;
e (REWRITE_TAC[GSYM (ASSUME `[u; v; a; b:real^3] = 
                             left_action_list p [w0; w1; w2; w3]`)]);;
e (REWRITE_WITH `initial_sublist [u; v] [u; v; a; b] /\ 
                 LENGTH [u; v:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST; LENGTH;
   TRUNCATE_SIMPLEX_EXPLICIT_1] THEN ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

(* ========================================================================== *)

e (NEW_GOAL `?q. q permutes 0..i - 1 /\ 
                 initial_sublist [v:real^3; u] (left_action_list q ul'')`);;
e (NEW_GOAL `?w0 w1 w2 w3. ul'' = [w0;w1;w2;w3:real^3]`);;
e (MATCH_MP_TAC BARV_3_EXPLICIT);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (ASM_CASES_TAC `i = 2`);;
e (UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (v':real^3)` THEN
   UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (u':real^3)`);;
e (NEW_GOAL `i - 1 = 1`);;
e (UNDISCH_TAC `i = 2` THEN ARITH_TAC);;
e (ASM_REWRITE_TAC[TRUNCATE_SIMPLEX_EXPLICIT_1; set_of_list; 
   MESON[IN] `(A:real^3->bool) b <=> b IN A`]);;
e (REPEAT STRIP_TAC);;
e (ASM_CASES_TAC `v = w0:real^3`);;
e (NEW_GOAL `u = w1:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UNDISCH_TAC 
  `~(u' = v':real^3)` THEN UNDISCH_TAC `{u,v} = {u',v':real^3}` 
   THEN SET_TAC[]);;
e (EXISTS_TAC `I:num->num`);;
e (ASM_REWRITE_TAC[PERMUTES_I; Packing3.LEFT_ACTION_LIST_I]);;
e (REWRITE_WITH `initial_sublist [w0; w1] [w0; w1; w2; w3] /\ 
                 LENGTH [w0;w1:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST]);;
e (REWRITE_TAC[TRUNCATE_SIMPLEX_EXPLICIT_1; LENGTH] THEN ARITH_TAC);;
e (NEW_GOAL `u = w0:real^3 /\ v = w1:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UNDISCH_TAC 
  `~(u' = v':real^3)` THEN UNDISCH_TAC `{u,v} = {u',v':real^3}` 
   THEN SET_TAC[]);;
e (ASM_REWRITE_TAC[]);;
e (NEW_GOAL `?q. q permutes 0..1 /\ 
                 [w1; w0; w2; w3:real^3] = left_action_list q ul''`);;
e (MATCH_MP_TAC Qzksykg.TWO_REARRANGEMENT_LEMMA);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (UP_ASM_TAC THEN ASM_REWRITE_TAC[] THEN STRIP_TAC);;
e (EXISTS_TAC `q:num->num` THEN ASM_REWRITE_TAC[] THEN REWRITE_TAC[GSYM 
   (ASSUME `[w1; w0; w2; w3] = left_action_list q [w0; w1; w2; w3:real^3]`)]);;
e (REWRITE_WITH `initial_sublist [w1; w0] [w1; w0; w2; w3] /\ 
                 LENGTH [w1;w0:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST]);;
e (REWRITE_TAC[TRUNCATE_SIMPLEX_EXPLICIT_1; LENGTH] THEN ARITH_TAC);;

e (ASM_CASES_TAC `i = 3`);;
e (UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (v':real^3)` THEN
   UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (u':real^3)`);;
e (ASM_REWRITE_TAC[ARITH_RULE `3 - 1 = 2`; TRUNCATE_SIMPLEX_EXPLICIT_2;
   set_of_list; MESON[IN] `(A:real^3->bool) b <=> b IN A`]);;
e (REPEAT STRIP_TAC);;

e (NEW_GOAL `u IN {w0, w1, w2} /\ v IN {w0, w1, w2:real^3} /\ ~(u = v)`);;
e (ASM_SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?a. {u,v, a} = {w0, w1, w2:real^3}`);;
e (NEW_GOAL `?w:real^3. w IN {w0, w1, w2} DIFF {u, v}`);;
e (REWRITE_TAC[SET_RULE `(?x. x IN s) <=> ~(s = {})`]);;
e (REWRITE_WITH `{w0, w1, w2} DIFF {u, v:real^3} = {} <=> 
                  CARD ({w0, w1, w2} DIFF {u, v}) = 0`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC CARD_EQ_0);;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{w0, w1, w2:real^3}`);;
e (REWRITE_TAC[Geomdetail.FINITE6] THEN SET_TAC[]);;

e (NEW_GOAL `CARD {w0, w1, w2} = CARD ({w0, w1, w2} DIFF {u, v:real^3}) +
                                 CARD {u, v}`);;
e (MATCH_MP_TAC Hypermap.CARD_MINUS_DIFF_TWO_SET);;
e (ASM_REWRITE_TAC[Geomdetail.FINITE6]);;
e (UP_ASM_TAC THEN REWRITE_WITH `CARD ({w0, w1, w2:real^3}) = 3`);;
e (ASM_CASES_TAC `CARD {w0,w1,w2:real^3} <= 2`);;
e (NEW_GOAL `F`);;
e (NEW_GOAL `CARD {w0, w1, w2, w3:real^3} = 4`);;
e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN REWRITE_WITH `CARD {w0, w1, w2, w3} = 
                                 CARD {w3, w0,w1,w2:real^3}`);;
e (AP_TERM_TAC THEN SET_TAC[]);;
e (NEW_GOAL `CARD ({w3, w0, w1, w2}) <= SUC (CARD {w0, w1, w2:real^3})`);;
e (SIMP_TAC[Geomdetail.CARD_CLAUSES_IMP; Geomdetail.FINITE6]);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN ARITH_TAC);;
e (ASM_MESON_TAC[]);;
e (NEW_GOAL `CARD {w0, w1, w2:real^3} <= 3`);;
e (REWRITE_TAC[Geomdetail.CARD3]);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN ARITH_TAC);;

e (SUBGOAL_THEN `CARD {u,v:real^3} <= 2` MP_TAC);;
e (REWRITE_TAC[Geomdetail.CARD2]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;
e (EXISTS_TAC `w:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;
e (UP_ASM_TAC THEN REWRITE_WITH `{u,v,a} = {v, u, a:real^3}`);;
e (SET_TAC[]);;
e (STRIP_TAC);;

e (NEW_GOAL `?q. q permutes 0..2 /\
                [v; u; a; w3] = left_action_list q [w0; w1; w2; w3:real^3]`);;
e (MATCH_MP_TAC LEFT_ACTION_LIST_2_EXISTS);;
e (ASM_REWRITE_TAC[]);;

e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (EXISTS_TAC `q:num->num`);;
e (ASM_REWRITE_TAC[]);;
e (REWRITE_TAC[GSYM (ASSUME `[v; u; a; w3:real^3] = 
                             left_action_list q [w0; w1; w2; w3]`)]);;
e (REWRITE_WITH `initial_sublist [v; u] [v; u; a; w3] /\ 
                 LENGTH [v; u:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST; LENGTH;
   TRUNCATE_SIMPLEX_EXPLICIT_1] THEN ARITH_TAC);;

e (NEW_GOAL `i = 4`);;
e (ASM_ARITH_TAC);;
e (UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (v':real^3)` THEN
   UNDISCH_TAC `set_of_list (truncate_simplex (i - 1) ul'') (u':real^3)`);;
e (ASM_REWRITE_TAC[ARITH_RULE `4 - 1 = 3`; TRUNCATE_SIMPLEX_EXPLICIT_3;
   set_of_list; MESON[IN] `(A:real^3->bool) b <=> b IN A`]);;
e (REPEAT STRIP_TAC);;

e (NEW_GOAL `u IN {w0, w1, w2, w3} /\ v IN {w0, w1, w2, w3:real^3} /\ 
            ~(u = v)`);;
e (ASM_SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?a b. {u,v,a,b} = {w0, w1, w2, w3:real^3}`);;

e (NEW_GOAL `?w:real^3. w IN {w0, w1, w2, w3} DIFF {u, v}`);;
e (REWRITE_TAC[SET_RULE `(?x. x IN s) <=> ~(s = {})`]);;
e (REWRITE_WITH `{w0, w1, w2, w3} DIFF {u, v:real^3} = {} <=> 
                  CARD ({w0, w1, w2, w3} DIFF {u, v}) = 0`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC CARD_EQ_0);;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{w0, w1, w2, w3:real^3}`);;
e (REWRITE_TAC[Geomdetail.FINITE6] THEN SET_TAC[]);;

e (NEW_GOAL `CARD {w0, w1, w2, w3} = 
             CARD ({w0, w1, w2, w3} DIFF {u, v:real^3}) + CARD {u, v}`);;
e (MATCH_MP_TAC Hypermap.CARD_MINUS_DIFF_TWO_SET);;
e (ASM_REWRITE_TAC[Geomdetail.FINITE6]);;

e (UP_ASM_TAC THEN REWRITE_WITH `CARD ({w0, w1, w2, w3:real^3}) = 3 + 1`);;
e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (NEW_GOAL `CARD {u, v:real^3} <= 2`);;
e (REWRITE_TAC[Geomdetail.CARD2]);;
e (UP_ASM_TAC THEN ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (NEW_GOAL `?m:real^3. m IN {w0, w1, w2, w3} DIFF {u, v, w}`);;
e (REWRITE_TAC[SET_RULE `(?x. x IN s) <=> ~(s = {})`]);;
e (REWRITE_WITH `{w0, w1, w2, w3} DIFF {u, v, w:real^3} = {} <=> 
                  CARD ({w0, w1, w2, w3} DIFF {u, v, w}) = 0`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC CARD_EQ_0);;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{w0, w1, w2, w3:real^3}`);;
e (REWRITE_TAC[Geomdetail.FINITE6] THEN SET_TAC[]);;

e (NEW_GOAL `CARD ({w0, w1, w2, w3} DIFF {u,v,w:real^3}) = 
             CARD {w0, w1, w2, w3} - CARD {u,v,w}`);;
e (MATCH_MP_TAC CARD_DIFF);;
e (ASM_REWRITE_TAC[Geomdetail.FINITE6]);;

e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN SET_TAC[]);;
e (UP_ASM_TAC THEN REWRITE_WITH `CARD ({w0, w1, w2, w3:real^3}) = 3 + 1`);;
e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (NEW_GOAL `CARD {u, v, w:real^3} <= 3`);;
e (REWRITE_TAC[Geomdetail.CARD3]);;
e (UP_ASM_TAC THEN ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (EXISTS_TAC `w:real^3` THEN EXISTS_TAC `m:real^3`);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN UP_ASM_TAC THEN 
   UP_ASM_TAC THEN SET_TAC[]);;
e (UP_ASM_TAC THEN STRIP_TAC);;
e (UP_ASM_TAC THEN REWRITE_WITH `{u,v,a,b} = {v, u, a, b:real^3}`);;
e (SET_TAC[]);;
e (STRIP_TAC);;

e (NEW_GOAL `?q. q permutes 0..3 /\
                [v; u; a; b] = left_action_list q [w0; w1; w2; w3:real^3]`);;
e (MATCH_MP_TAC LEFT_ACTION_LIST_3_EXISTS);;
e (ASM_REWRITE_TAC[]);;

e (REWRITE_WITH `{w0, w1, w2, w3:real^3} = set_of_list ul''`);;
e (ASM_REWRITE_TAC[set_of_list]);;
e (REWRITE_WITH `LENGTH (ul'':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul'') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (EXISTS_TAC `q:num->num`);;
e (ASM_REWRITE_TAC[]);;
e (REWRITE_TAC[GSYM (ASSUME `[v; u; a; b:real^3] = 
                             left_action_list q [w0; w1; w2; w3]`)]);;
e (REWRITE_WITH `initial_sublist [v; u] [v; u; a; b] /\ 
                 LENGTH [v; u:real^3] = 1 + 1`);;
e (REWRITE_TAC[GSYM Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST; LENGTH;
   TRUNCATE_SIMPLEX_EXPLICIT_1] THEN ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

(* ========================================================================= *)

e (ABBREV_TAC `P = (\(k, ul). k <= 4 /\
                              ul IN barV V 3 /\
                              X = mcell k V ul /\
                              initial_sublist [v; u] ul)`);;
e (NEW_GOAL `(P:num#(real^3)list->bool) (k, ul)`);;
e (REWRITE_TAC[GSYM (ASSUME `(@) (P:num#(real^3)list->bool) = k,ul`)]);;
e (MATCH_MP_TAC SELECT_AX);;

e (EXISTS_TAC `(i:num, left_action_list q (ul'':(real^3)list))`);;
e (EXPAND_TAC "P" THEN REWRITE_TAC[BETA_THM]);;
e (ASM_REWRITE_TAC[IN]);;
e (REPEAT STRIP_TAC);;
e (MATCH_MP_TAC Qzksykg.QZKSYKG1);;
e (EXISTS_TAC `ul'':(real^3)list`);;
e (EXISTS_TAC `i:num` THEN EXISTS_TAC `q:num->num`);;
e (ASM_REWRITE_TAC[]);;
e (STRIP_TAC);;
e (ASM_REWRITE_TAC[GSYM Ajripqn.UP_TO_4_KY_LEMMA]);;
e (REWRITE_TAC[GSYM (ASSUME `X = mcell i V ul''`)]);;
e (UNDISCH_TAC `~NULLSET X` THEN MESON_TAC[NEGLIGIBLE_EMPTY]);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC Rvfxzbu.RVFXZBU);;
e (ASM_REWRITE_TAC[GSYM Ajripqn.UP_TO_4_KY_LEMMA]);;


e (ABBREV_TAC `Q = (\(k, ul). k <= 4 /\
                              ul IN barV V 3 /\
                              X = mcell k V ul /\
                              initial_sublist [u; v] ul)`);;
e (NEW_GOAL `(Q:num#(real^3)list->bool) (k', ul')`);;
e (REWRITE_TAC[GSYM (ASSUME `(@) (Q:num#(real^3)list->bool) = k',ul'`)]);;
e (MATCH_MP_TAC SELECT_AX);;

e (EXISTS_TAC `(i:num, left_action_list p (ul'':(real^3)list))`);;
e (EXPAND_TAC "Q" THEN REWRITE_TAC[BETA_THM]);;
e (ASM_REWRITE_TAC[IN]);;
e (REPEAT STRIP_TAC);;
e (MATCH_MP_TAC Qzksykg.QZKSYKG1);;
e (EXISTS_TAC `ul'':(real^3)list`);;
e (EXISTS_TAC `i:num` THEN EXISTS_TAC `p:num->num`);;
e (ASM_REWRITE_TAC[]);;
e (STRIP_TAC);;
e (ASM_REWRITE_TAC[GSYM Ajripqn.UP_TO_4_KY_LEMMA]);;
e (REWRITE_TAC[GSYM (ASSUME `X = mcell i V ul''`)]);;
e (UNDISCH_TAC `~NULLSET X` THEN MESON_TAC[NEGLIGIBLE_EMPTY]);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC Rvfxzbu.RVFXZBU);;
e (ASM_REWRITE_TAC[GSYM Ajripqn.UP_TO_4_KY_LEMMA]);;

e (UP_ASM_TAC THEN EXPAND_TAC "Q" THEN REWRITE_TAC[] THEN DEL_TAC);;
e (UP_ASM_TAC THEN EXPAND_TAC "P" THEN REWRITE_TAC[IN] THEN DEL_TAC);;
e (REPEAT STRIP_TAC);;

e (NEW_GOAL `i = k:num`);;
e (REWRITE_WITH `i = k /\ mcell i V ul'' = mcell k V ul`);;
e (MATCH_MP_TAC Ajripqn.AJRIPQN);;
e (ASM_REWRITE_TAC[GSYM Ajripqn.UP_TO_4_KY_LEMMA]);;
e (REWRITE_TAC[GSYM (ASSUME `X = mcell i V ul''`); 
               GSYM (ASSUME `X = mcell k V ul`); SET_RULE `a INTER a = a`]);;
e (ASM_REWRITE_TAC[]);;

e (NEW_GOAL `i = k':num`);;
e (REWRITE_WITH `i = k' /\ mcell i V ul'' = mcell k' V ul'`);;
e (MATCH_MP_TAC Ajripqn.AJRIPQN);;
e (ASM_REWRITE_TAC[GSYM Ajripqn.UP_TO_4_KY_LEMMA]);;
e (REWRITE_TAC[GSYM (ASSUME `X = mcell i V ul''`);  GSYM (ASSUME `i = k:num`);
               GSYM (ASSUME `X = mcell k' V ul'`); SET_RULE `a INTER a = a`]);;
e (ASM_REWRITE_TAC[]);;

e (NEW_GOAL `i = k /\ (!k. i - 1 <= k /\ k <= 3
                  ==> omega_list_n V ul k = omega_list_n V ul' k)`);;
e (MATCH_MP_TAC MCELL_ID_OMEGA_LIST_N);;
e (ASM_REWRITE_TAC[]);;
e (STRIP_TAC);;
e (ASM_MESON_TAC[]);;
e (STRIP_TAC);;
e (ASM_MESON_TAC[]);;
e (REWRITE_TAC[SET_RULE `a IN {m,n,p} <=> a = m \/ a = n \/ a = p`]);;
e (ASM_ARITH_TAC);;
e (UP_ASM_TAC THEN STRIP_TAC);;

e (REWRITE_WITH `k' = k:num`);;
e (ASM_MESON_TAC[]);;

e (NEW_GOAL `mxi V ul' = mxi V ul`);;
(* ========================================================================== *)

e (KY_CHEAT_TAC);;

Marchal_cells_2_new.LEFT_ACTION_LIST_PROPERTIES;;
Marchal_cells_2_new.LEFT_ACTION_LIST_1_PROPERTIES;;
MCELL_ID_OMEGA_LIST_N;;
MXI_EXPLICIT;;

(* ========================================================================== *)

e (NEW_GOAL `HD ul = HD [v; u:real^3]`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC Packing3.HD_INITIAL_SUBLIST);;
e (ASM_REWRITE_TAC[LENGTH] THEN ARITH_TAC);;

e (NEW_GOAL `HD ul' = HD [u; v:real^3]`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (MATCH_MP_TAC Packing3.HD_INITIAL_SUBLIST);;
e (ASM_REWRITE_TAC[LENGTH] THEN ARITH_TAC);;

e (NEW_GOAL `EL 1 ul = EL 1 ([v; u:real^3])`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (REWRITE_WITH `[v; u:real^3] = truncate_simplex 1 ul`);;
e (REWRITE_WITH `truncate_simplex 1 ul = [v;u:real^3] /\ 1 + 1 <= LENGTH ul`);;
e (REWRITE_TAC[Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST]);;
e (ASM_REWRITE_TAC[LENGTH] THEN ARITH_TAC);;
e (MATCH_MP_TAC Packing3.EL_TRUNCATE_SIMPLEX);;
e (REWRITE_WITH `LENGTH (ul:(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul) = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;

e (NEW_GOAL `EL 1 ul' = EL 1 ([u; v:real^3])`);;
e (ONCE_REWRITE_TAC[EQ_SYM_EQ]);;
e (REWRITE_WITH `[u; v:real^3] = truncate_simplex 1 ul'`);;
e (REWRITE_WITH `truncate_simplex 1 ul' =[u;v:real^3] /\ 1 + 1 <= LENGTH ul'`);;
e (REWRITE_TAC[Packing3.TRUNCATE_SIMPLEX_INITIAL_SUBLIST]);;
e (ASM_REWRITE_TAC[LENGTH] THEN ARITH_TAC);;
e (MATCH_MP_TAC Packing3.EL_TRUNCATE_SIMPLEX);;
e (REWRITE_WITH `LENGTH (ul':(real^3)list) = 3 + 1 /\ 
                 CARD (set_of_list ul') = 3 + 1`);;
e (MATCH_MP_TAC Rogers.BARV_IMP_LENGTH_EQ_CARD);;
e (EXISTS_TAC `V:real^3->bool` THEN ASM_REWRITE_TAC[]);;
e (ARITH_TAC);;

e (COND_CASES_TAC);;
e (COND_CASES_TAC);;
e (REWRITE_TAC[dihu2]);;
e (REWRITE_WITH `omega_list_n V ul 3 = omega_list_n V ul' 3`);;
e (FIRST_ASSUM MATCH_MP_TAC);;
e (ASM_ARITH_TAC);;
e (ASM_REWRITE_TAC[EL; HD; TL; ARITH_RULE `1 = SUC 0`; DIHV_SYM]);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (DEL_TAC THEN DEL_TAC);;
e (REWRITE_TAC[dihu3]);;
e (ASM_REWRITE_TAC[EL;HD;TL; ARITH_RULE `1 = SUC 0`]);;

e (REWRITE_WITH `EL 2 ul' = EL 2 (ul:(real^3)list)`);;
e (KY_CHEAT_TAC);;
e (REWRITE_TAC[DIHV_SYM]);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (REWRITE_TAC[dihu4]);;

(* ========================================================================= *)
e (KY_CHEAT_TAC);;
   (* viet them DIHV_SYM_3 : 
            g `!a b c d x y z t.
                         {a,b} = {c,d} /\ {x,y} = {z,t} ==> 
                         dihV a b x y = dihV c d z t`;;
   *)
(* ========================================================================= *)
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (REFL_TAC);;

let DIHX_SYM = top_thm();;



p();;

search [`mxi V ul = mxi V h`];;


b();;


p();;

search [`mcell i V ul = mcell j V vl`];;


b();;

search [`?p:num->num. P`];;


b();;
p();;


seans_fn();;

b();;

p();;


edgeX;;
search [`VX V X`];;
search [`V INTER X = set_of_list ul`];;

V INTER mcell k V ul =
               set_of_list (truncate_simplex (k - 1) ul));;

search [`mcell i V ul = mcell j V vl`];;
Rvfxzbu.RVFXZBU;;
p permutes 0..i - 1
           ==> mcell i V (left_action_list p ul) = mcell i V ul)


cell_params_d;;

 
          when x is mcell and {u,v} IN edgeX V x  *)




let gammaY = new_definition 
 `!V X f.
         gammaY V X f =
         (\({u, v}). if {u, v} IN edgeX V X
                     then dihX V X (u,v) * f (hl [u; v])
                     else &0)`;;

g `!V. packing V /\ saturated V
     ==> (?d. !X e. mcell_set V X /\ edgeX V X e ==> gammaY V X lmfun e <= d)`;;
e (REPEAT STRIP_TAC);;
e (EXISTS_TAC `pi * h0 / (h0 - &1)`);;
e (REPEAT STRIP_TAC);;
e (ABBREV_TAC `f = (\u v. if {u, v} IN edgeX V X
                             then dihX V X (u,v) * lmfun (hl [u; v])
                          else &0)`);;
e (REWRITE_WITH `gammaY V X lmfun = (\({u, v}). f u v)`);;
e (EXPAND_TAC "f" THEN REWRITE_TAC[gammaY]);;

e (NEW_GOAL `!u v. (f:real^3->real^3->real) u v = f v u`);;
e (EXPAND_TAC "f" THEN REWRITE_TAC[BETA_THM]);;
e (REWRITE_TAC[HL; set_of_list; SET_RULE `{a,b} = {b,a}`]);;
e (REPEAT GEN_TAC THEN COND_CASES_TAC);;
e (COND_CASES_TAC);;
e (REWRITE_WITH `dihX V X (u,v) = dihX V X (v,u)`);;
e (MATCH_MP_TAC DIHX_SYM);;
e (ASM_REWRITE_TAC[]);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (COND_CASES_TAC);;
e (UP_ASM_TAC THEN MESON_TAC[]);;
e (REFL_TAC);;

e (UNDISCH_TAC `edgeX V X e` THEN REWRITE_TAC[IN;IN_ELIM_THM; edgeX]);;
e (STRIP_TAC);;
e (ASM_REWRITE_TAC[]);;

e (REWRITE_WITH `(\({u, v}). f u v) {u, v} = 
                             (f:real^3->real^3->real) u v`);;
e (MATCH_MP_TAC BETA_PAIR_THM);;
e (ASM_REWRITE_TAC[]);;

e (EXPAND_TAC "f");;
e (COND_CASES_TAC);;

e (NEW_GOAL `dihX V X (u,v) * lmfun (hl [u;v]) <= pi * lmfun (hl [u;v])`);;
e (REWRITE_TAC[REAL_ARITH `a * x <= b * x <=> &0 <= (b - a) * x`]);;
e (MATCH_MP_TAC REAL_LE_MUL);;
e (REWRITE_TAC[lmfun_pos_le; REAL_ARITH `&0 <= a - b <=> b <= a`; DIHX_LE_PI]);;

e (NEW_GOAL `pi * lmfun (hl [u:real^3;v]) <= pi * h0 / (h0 - &1)`);;
e (REWRITE_TAC[REAL_ARITH `a * x <= a * y <=> &0 <= (y - x) * a`]);;
e (MATCH_MP_TAC REAL_LE_MUL);;
e (REWRITE_TAC[PI_POS_LE; REAL_ARITH `&0 <= a - b <=> b <= a`]);;
e (MATCH_MP_TAC lmfun_bounded);;
e (REWRITE_TAC[HL_2; REAL_ARITH `&0 <= inv (&2) * x <=> &0 <= x`; DIST_POS_LE]);;
e (UP_ASM_TAC THEN UP_ASM_TAC THEN REAL_ARITH_TAC);;
e (MATCH_MP_TAC REAL_LE_MUL);;
e (REWRITE_TAC[PI_POS_LE]);;
e (MATCH_MP_TAC REAL_LE_DIV);;
e (REWRITE_TAC[h0] THEN REAL_ARITH_TAC);;

let gamma_y_lmfun_bound = top_thm();;


let gammaX_2 = prove (`!V X f.
         gammaX V X f =
         vol X - (&2 * mm1 / pi) * total_solid V X +
         (&8 * mm2 / pi) * sum (edgeX V X) (gammaY V X f)`, 
           KY_CHEAT_TAC);;

HL_2;;

seans_fn();;
b();;

search [``]
HL_2;;

lmfun_bounded;;

type_of `dihX`;;


b();;

search [`dihX V X (u,v) <= s`];;

search [`h0`];;

DIHV_RANGE;;

p();;
lmfun;;

search [`dihV a b c d <= s`];;

 

open Upfzbzm_support_lemmas;;
#use "/home/vu/flyspeck/working/marchal_cells_3.hl";;
#use "/home/vu/flyspeck/working/KIZHLTL.hl";;
#use "/home/ky/flyspeck/working/UPFZBZM_2011.hl";;

let SUM_GAMMAX_LMFUN_ESTIMATE_concl = 
  `!V. ?c. !r. saturated V /\ packing V /\ &1 <= r /\ 
               cell_cluster_estimate V /\ marchal_inequality /\
               lmfun_inequality V ==> 
    c * r pow 2 <=  sum {X | X SUBSET ball (vec 0, r)  /\ mcell_set V X} 
    (\X. gammaX V X lmfun)`;;

let TSKAJXY_concl = 
`!V X. saturated V /\ packing V /\ mcell_set V X /\ critical_edgeX V X  = {} 
   ==> gammaX V X lmfun >= &0`;;

let TSKAJXY = prove (TSKAJXY_concl, KY_CHEAT_TAC);;
let OXLZLEZ = prove (OXLZLEZ_concl, KY_CHEAT_TAC);;

(* ========================================================================= *)
(*      The above lemmas are to be proved by computer calculations           *)
(* ========================================================================= *)
(*               Continue back up of complementary lemmas                    *)
(* ========================================================================= *)

g SUM_GAMMAX_LMFUN_ESTIMATE_concl;;
e (GEN_TAC);;
e (EXISTS_TAC `c:real`);;
e (REPEAT STRIP_TAC);;
e (NEW_GOAL `!X. mcell_set V X /\ critical_edgeX V X  = {} ==> 
                 gammaX V X lmfun >= &0`);;
e (ASM_MESON_TAC[TSKAJXY]);;

(* ------------------------------------------------------------------------ *)

e (ABBREV_TAC `B = {X | X SUBSET ball (vec 0, r)  /\ mcell_set V X}`);;
e (ABBREV_TAC `B0 = {X | X SUBSET ball (vec 0,r) /\ mcell_set V X /\
                         critical_edgeX V X = {}}`);;
e (ABBREV_TAC `B1 = {X | X SUBSET ball (vec 0,r) /\ mcell_set V X /\
                         ~(critical_edgeX V X = {})}`);;
e (NEW_GOAL `FINITE (B1:(real^3->bool)->bool)`);;
e (EXPAND_TAC "B1");;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{X | X SUBSET ball (vec 0,r) /\ mcell_set V X}`);;
e (STRIP_TAC);;
e (ASM_SIMP_TAC[FINITE_MCELL_SET_LEMMA]);;
e (SET_TAC[]);;

e (REWRITE_WITH `B = B0 UNION B1:(real^3->bool)->bool`);;
e (EXPAND_TAC "B" THEN EXPAND_TAC "B1" THEN EXPAND_TAC "B0");;
e (SET_TAC[]);;
e (REWRITE_WITH `sum (B0 UNION B1) (\X. gammaX V X lmfun) = 
   sum B0 (\X. gammaX V X lmfun) + sum B1 (\X. gammaX V X lmfun)`);;
e (MATCH_MP_TAC SUM_UNION);;
e (REPEAT STRIP_TAC);;
e (EXPAND_TAC "B0");;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{X | X SUBSET ball (vec 0,r) /\ mcell_set V X}`);;
e (STRIP_TAC);;
e (ASM_SIMP_TAC[FINITE_MCELL_SET_LEMMA]);;
e (SET_TAC[]);;
e (ASM_REWRITE_TAC[]);;
e (EXPAND_TAC "B1" THEN EXPAND_TAC "B0");;
e (SET_TAC[]);;
e (MATCH_MP_TAC (REAL_ARITH `&0 <= b /\ a <= c ==> a <= b + c`));;
e (STRIP_TAC);;
e (MATCH_MP_TAC SUM_POS_LE);;
e (STRIP_TAC);;
e (EXPAND_TAC "B0");;
e (MATCH_MP_TAC FINITE_SUBSET);;
e (EXISTS_TAC `{X | X SUBSET ball (vec 0,r) /\ mcell_set V X}`);;
e (STRIP_TAC);;
e (ASM_SIMP_TAC[FINITE_MCELL_SET_LEMMA]);;
e (SET_TAC[]);;
e (REWRITE_TAC[BETA_THM; REAL_ARITH `&0 <= a <=> a >= &0`]);;
e (EXPAND_TAC "B0" THEN REWRITE_TAC[IN; IN_ELIM_THM]);;
e (REPEAT STRIP_TAC);;
e (ASM_SIMP_TAC[]);;

e (REWRITE_WITH 
  `sum B1 (\X. gammaX V X lmfun) = 
   sum B1 (\X. (gammaX V X lmfun) * 
                sum (critical_edgeX V X) (\e. critical_weight V X))`);;
e (MATCH_MP_TAC SUM_EQ);;
e (EXPAND_TAC "B1" THEN REWRITE_TAC[IN; IN_ELIM_THM]);;
e (REPEAT STRIP_TAC);;
e (REWRITE_TAC[critical_weight]);;
e (REWRITE_WITH 
  `sum (critical_edgeX V x) (\e. &1 / &(CARD (critical_edgeX V x))) = 
   &(CARD (critical_edgeX V x)) * (&1 / &(CARD (critical_edgeX V x)))`);;
e (MATCH_MP_TAC SUM_CONST);;
e (REWRITE_TAC[FINITE_critical_edgeX]);;
e (REWRITE_TAC[REAL_ARITH `a * &1 / a = a / a`]);;
e (REWRITE_WITH `&(CARD (critical_edgeX V x)) / &(CARD (critical_edgeX V x)) = &1`);;
e (MATCH_MP_TAC REAL_DIV_REFL);;
e (REWRITE_TAC[REAL_OF_NUM_EQ]);;
e (REWRITE_WITH `CARD (critical_edgeX V x) = 0 <=> critical_edgeX V x = {}`);;
e (MATCH_MP_TAC CARD_EQ_0);;
e (REWRITE_TAC[FINITE_critical_edgeX]);;
e (ASM_REWRITE_TAC[]);;
e (REAL_ARITH_TAC);;

(* ------------------------------------------------------------------------- *)
(* Hint:      - See proofs of KIZHLTL1; KIZHLTL2 to adapt                    *)
(* ------------------------------------------------------------------------- *)

e (REWRITE_TAC[GSYM SUM_LMUL]);;
e (ABBREV_TAC `T1:real^3->bool = V INTER ball (vec 0, r)`);;
e (ABBREV_TAC `T2 = {{u0, u1:real^3} | u0 IN T1 /\ u1 IN T1}`);;
e (NEW_GOAL `FINITE (T2:(real^3->bool)->bool)`);;
e (EXPAND_TAC "T2" THEN MATCH_MP_TAC FINITE_SET_PRODUCT_KY_LEMMA);;
e (EXPAND_TAC "T1" THEN MATCH_MP_TAC Pack2.KIUMVTC);;
e (ASM_REWRITE_TAC[]);;

e (REWRITE_WITH 
 `sum B1 (\X. sum (critical_edgeX V X) 
                   (\x. gammaX V X lmfun * critical_weight V X)) =
  sum B1 (\X. sum {y:real^3->bool| y IN T2 /\ critical_edgeX V X y} 
                   (\x. gammaX V X lmfun * critical_weight V X))`);;
e (MATCH_MP_TAC SUM_EQ);;
e (EXPAND_TAC "B1" THEN REWRITE_TAC[IN; IN_ELIM_THM]);;
e (REPEAT STRIP_TAC);;
e (AP_THM_TAC THEN AP_TERM_TAC);;
e (REWRITE_TAC[SET_RULE `a = b <=> b SUBSET a /\ a SUBSET b`]);;
e (STRIP_TAC);;
e (SET_TAC[]);;
e (REWRITE_TAC[SET_RULE `A SUBSET {y | T2 y /\ A y} <=> A SUBSET T2`]);;
e (EXPAND_TAC "T2" THEN REWRITE_TAC[SUBSET; critical_edgeX; IN; IN_ELIM_THM; edgeX]);;
e (REPEAT STRIP_TAC);;
e (EXPAND_TAC "T1" THEN REWRITE_TAC[IN_ELIM_THM]);;
e (EXISTS_TAC `u':real^3` THEN EXISTS_TAC `v':real^3`);;
e (REWRITE_TAC[ASSUME `x' = {u, v:real^3}`; MESON[IN] `V (x:real^3) <=> x IN V`;
               GSYM (ASSUME `{u, v} = {u', v':real^3}`); IN_INTER]);;
e (NEW_GOAL `VX V x = V INTER x`);;
e (MATCH_MP_TAC Hdtfnfz.HDTFNFZ);;
e (UNDISCH_TAC `mcell_set V x` THEN REWRITE_TAC[mcell_set; IN; IN_ELIM_THM]);;
e (STRIP_TAC);;
e (EXISTS_TAC `ul:(real^3)list` THEN EXISTS_TAC `i:num`);;
e (ASM_REWRITE_TAC[]);;
e (STRIP_TAC);;
e (NEW_GOAL `VX V x = {}`);;
e (REWRITE_TAC[VX]);;
e (ASM_REWRITE_TAC[]);;
e (UNDISCH_TAC `VX V x u'` THEN ASM_REWRITE_TAC[MESON[IN] `{} x <=> x IN {}`]);;
e (SET_TAC[]);;
e (ASM_SET_TAC[]);;

e (ABBREV_TAC `f = (\X. (\x:real^3->bool. 
                            gammaX V X lmfun * critical_weight V X))`);;
e (REWRITE_WITH 
 `sum B1 (\X. sum {y | y IN T2 /\ critical_edgeX V X y}
                  (\x:real^3->bool. gammaX V X lmfun * critical_weight V X)) = 
  sum B1 (\X. sum {y | y IN T2 /\ critical_edgeX V X y}
                  (\x:real^3->bool. f X x))`);;
e (EXPAND_TAC "f" THEN REFL_TAC);;
e (REWRITE_WITH 
  `sum B1 (\X. sum {y | y IN T2 /\ critical_edgeX V X y} (\x. f X x)) = 
   sum T2 (\x. sum {X | X IN B1 /\ critical_edgeX V X x} (\X. f X x))`);;
e (ASM_SIMP_TAC[SUM_SUM_RESTRICT]);;

e (EXPAND_TAC "f");;
e (EXPAND_TAC "B1" THEN REWRITE_TAC[IN; IN_ELIM_THM]);;





seans_fn();;



search [`ball (a, b) DIFF ball (c, d)`];;

search []
gammaX;;
edgeX;;



VOLUME_BALL;;

b();;

seans_fn();;

search [`mcell`; `ball`];;


b();;


g `!V. ?c. (!X.
           saturated V /\
           packing V /\
           mcell_set V X /\
           critical_edgeX V X = {}
           ==> gammaX V X lmfun <= c)`;;
e (GEN_TAC);;
e (ASM_CASES_TAC `saturated V /\ packing V`);;
e (EXISTS_TAC `c:real`);;
e (REPEAT STRIP_TAC);;

e (REWRITE_TAC[gammaX]);;



p();;


total_solid;;

type_of `packing`;;
sol;;
p();;
edgeX;;

search [`sol`];;

search [``]
search [`gammaX`];;

critical_edgeX;;
critical_weight;;




search [`&0 <= dihX a b (c,d)`];;

search [`dihV a b c d <= e`];;

b();;

e (NEW_GOAL ``
gammaX;;


p();;

search [`CARD {}`];;
gammaX;;


search [`gammaX`];;
p();;
b();;

arcV;;
acs;;
search [`acs x <= t`];;

critical_weight;;
critical_edgeX;;
gammaX;;
dihX;;
dihu3;;
dihV;;
search [`dihV`];;

lmfun;;
p();;

g `[a;b] = list_of_set {a,b}`;;
e (REWRITE_TAC[list_of_set]);;

seans_fn();;
b();;

=sum B1 (\X. sum {y | y IN T2 /\ critical_edgeX V X y} (\x. f X x))
seans_fn();;

SUM_SUM_RESTRICT;;

search [`sum s (\x. f x * g x)`];;


search [``]

SUM_LMUL;;



mk_thm;;
p();;


cell_cluster;;

cell_cluster_estimate;;

cluster_gammaX;;





(*                FLYSPECK - BOOK FORMALIZATION                              *)
(*                                                                           *)
(*      Authour   : VU KHAC KY                                               *)
(*      Book lemma: UPFZBZM                                                  *)
(*      Chaper    : Packing (Clusters)                                       *)
(*      Date      : October 3, 2010                                          *)
(*                                                                           *)
(* ========================================================================= *)
(*           Latest revision on 20 Jan 2012                                  *)

(* ========================================================================= *)
(*                     FILES NEED TO BE LOADED                               *)
(* ========================================================================= *)
(*                      Conclusions                                          *)
  
let UPFZBZM_concl = 
   `!V.  saturated V /\ packing V /\ cell_cluster_estimate V /\ 
         marchal_inequality /\
         lmfun_inequality V ==>
    (?G. negligible_fun_0 G V /\ fcc_compatible G V)`;;

let FCC_COMPATABILITY_FUNC_concl =  
 `!V.  saturated V /\ packing V /\ cell_cluster_estimate V /\ 
   marchal_inequality /\
   lmfun_inequality V /\ G = (\u. --vol(voronoi_open V u) + 
   &8 * mm1 - &8 * mm2 * sum { v | v IN V /\ ~(u=v) /\ dist(u,v) <= &2*h0 } 
   (\v. lmfun (hl [u;v]))) 
   ==> fcc_compatible G V`;;

let NEGLIGIBLE_FUNC_concl = 
  `!V. saturated V /\
       packing V /\
       cell_cluster_estimate V /\
       marchal_inequality /\
       lmfun_inequality V /\
       G =
       (\u. --vol (voronoi_open V u) +
            &8 * mm1 -
            &8 *
            mm2 *
            sum {v | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
            (\v. lmfun (hl [u; v])))
       ==> negligible_fun_0 G V`;;


(* ======================================================================= *)
(*
#use "/home/vu/flyspeck/working/marchal_cells_3.hl";;
#use "/home/vu/flyspeck/working/KIZHLTL.hl";;
*)
(* ======================================================================= *)
(* Axioms *)

let KY_CHEAT_TAC = MP_TAC (mk_fthm([],`F`)) THEN SET_TAC[];;
let KIZHLTL4 = prove (KIZHLTL4_concl, KY_CHEAT_TAC);;
let SUM_GAMMAX_LMFUN_ESTIMATE = prove (SUM_GAMMAX_LMFUN_ESTIMATE_concl, KY_CHEAT_TAC);;

(* ========================================================================= *)
(*                            THE THEOREM                                    *)
(* ========================================================================= *)

(* PART 1 OF THE LEMMA *)

let FCC_COMPATABILITY_FUNC = prove_by_refinement (FCC_COMPATABILITY_FUNC_concl,
[(REWRITE_TAC[lmfun_inequality;fcc_compatible]);
 (REPEAT STRIP_TAC);
 (ASM_REWRITE_TAC[REAL_ARITH `a + --a + b - c = b - c`]);
 (MATCH_MP_TAC (REAL_ARITH 
  `x = &8 * mm1 - &8 * (&12 * mm2) /\ y <= &8 * (&12 * mm2) ==> 
   x <= &8 * mm1 - y`));
 STRIP_TAC;
 (REWRITE_TAC[SQRT_OF_32_lemma]);
 (REWRITE_TAC[REAL_ARITH `a * b - a * c = a * (b - c)`]);
 (REWRITE_TAC[m1_minus_12m2]);
 (MATCH_MP_TAC REAL_LE_LMUL);
 (REWRITE_TAC[REAL_ARITH `&0 <= &8`]);
 (REWRITE_TAC[REAL_ARITH `&12 * mm2 = mm2 * &12`]);
 (MATCH_MP_TAC REAL_LE_LMUL);
 (REWRITE_TAC[ZERO_LE_MM2_LEMMA]);
 (ASM_MESON_TAC[])]);;


(* ========================================================================= *)
(* PART 2 OF THE LEMMA *)
(* ========================================================================= *)

g NEGLIGIBLE_FUNC_concl;;
e (REWRITE_TAC[negligible_fun_0; negligible_fun_any_C]);;
e (REPEAT STRIP_TAC);;

e (MP_TAC (SPEC `V:real^3->bool`  KIZHLTL1));;
e (STRIP_TAC);;
e (MP_TAC (SPEC `V:real^3->bool`  KIZHLTL2));;
e (STRIP_TAC);;
e (MP_TAC (SPEC `V:real^3->bool`  KIZHLTL4));;
e (STRIP_TAC);;
e (MP_TAC (SPEC `V:real^3->bool` SUM_GAMMAX_LMFUN_ESTIMATE));;
e (STRIP_TAC);;
e (EXISTS_TAC `--c''' - c - c' - c''`);;
e (REPEAT STRIP_TAC);;

e (ABBREV_TAC `f1 =  (\u:real^3. --vol (voronoi_open V u))`);;
e (ABBREV_TAC `f2 =  (\u:real^3.  &8 * mm1 -  &8 * mm2 *
                     sum {v | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
                     (\v. lmfun (hl [u; v])))`);;
e (REWRITE_WITH `sum ((V:real^3->bool) INTER ball (vec 0,r)) G = 
                 sum (V INTER ball (vec 0,r)) f1 + 
                 sum (V INTER ball (vec 0,r)) f2`);;
e (ASM_REWRITE_TAC[] THEN EXPAND_TAC "f1" THEN EXPAND_TAC "f2");;
e (MATCH_MP_TAC SUM_ADD);;
e (ASM_SIMP_TAC[FINITE_PACK_LEMMA]);;
e (ABBREV_TAC `f3 =  (\u:real^3.  &8 * mm1)`);;
e (ABBREV_TAC `f4 =  (\u:real^3.  &8 * mm2 *
                     sum {v | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
                     (\v. lmfun (hl [u; v])))`);;
e (REWRITE_WITH `sum ((V:real^3->bool) INTER ball (vec 0,r)) f2 = 
                 sum (V INTER ball (vec 0,r)) f3 - 
                 sum (V INTER ball (vec 0,r)) f4`);;
e (EXPAND_TAC "f2" THEN EXPAND_TAC "f3" THEN EXPAND_TAC "f4");;
e (MATCH_MP_TAC SUM_SUB);;
e (ASM_SIMP_TAC[FINITE_PACK_LEMMA]);;
e (EXPAND_TAC "f4" THEN DEL_TAC THEN 
   ASM_SIMP_TAC[SUM_NEG;SUM_CONST;SUM_LMUL;FINITE_PACK_LEMMA]);;
e (ABBREV_TAC `f5 =  (\u:real^3.  
                     sum {v | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
                     (\v. lmfun (hl [u; v])))`);;
e (ABBREV_TAC `B = {X | X SUBSET ball (vec 0, r)  /\ mcell_set V X}`);;
e (ABBREV_TAC `T1 = sum B vol`);;
e (ABBREV_TAC `T2 = --(&2 * mm1 / pi) * sum B (total_solid V)`);;
e (ABBREV_TAC `T3 = (&8 * mm2 / pi) * sum B (\X. sum (edgeX V X)
                (\({u, v}). dihX V X (u,v) * lmfun (hl [u; v])))`);;

(* ======================================================================== *)

e (NEW_GOAL `sum (V:real^3->bool INTER ball (vec 0,r)) f1 <= --T1 - c * r pow 2`);;
e (EXPAND_TAC "T1" THEN EXPAND_TAC "B");;
e (EXPAND_TAC "f1");;
e (REWRITE_TAC[SUM_NEG; REAL_ARITH `-- a <= --b - c <=> b + c <= a`]);;
e (FIRST_ASSUM MATCH_MP_TAC);;
e (ASM_REWRITE_TAC[]);;

e (NEW_GOAL 
  `sum (V:real^3->bool INTER ball (vec 0,r)) f3 <= --T2 - c' * r pow 2`);;
e (EXPAND_TAC "T2" THEN EXPAND_TAC "B");;
e (EXPAND_TAC "f3");;
e (REWRITE_TAC[SUM_NEG; REAL_ARITH `a <= --(-- b * d) - c<=> a + c <= b * d`]);;
e (REWRITE_WITH `sum (V INTER ball (vec 0,r)) (\u:real^3. &8 * mm1) = 
   &(CARD (V INTER ball (vec 0,r))) * (&8 * mm1)`);;
e (MATCH_MP_TAC SUM_CONST);;
e (ASM_SIMP_TAC[FINITE_PACK_LEMMA]);;
e (FIRST_ASSUM MATCH_MP_TAC);;
e (ASM_REWRITE_TAC[]);;

e (NEW_GOAL `T3 + c'' * r pow 2 <= 
   &8 * mm2 * sum (V:real^3->bool INTER ball (vec 0,r)) f5`);;
e (EXPAND_TAC "T3" THEN EXPAND_TAC "B");;
e (FIRST_ASSUM MATCH_MP_TAC);;
e (ASM_REWRITE_TAC[]);;

e (MATCH_MP_TAC (REAL_ARITH `(?s. A <= s /\ s <= b) ==> A <= b`));;
e (EXISTS_TAC `--T1 + --T2 + --T3  - (c + c' + c'') * r pow 2`);;
e (STRIP_TAC);;
e (ASM_REAL_ARITH_TAC);;
e (REWRITE_TAC[REAL_ARITH 
   `--T1 + --T2 + --T3 - (c + c' + c'') * r pow 2 <=
   (--c''' - c - c' - c'') * r pow 2 
   <=> c''' * r pow 2 <= T1 + T2 + T3`]);;
e (REWRITE_WITH `T1 + T2 + T3 = 
                 sum {X | X SUBSET ball (vec 0,r) /\ mcell_set V X}
                 (\X. gammaX V X lmfun)`);;
e (ASM_REWRITE_TAC[]);;
e (REWRITE_TAC[gammaX]);;
e (NEW_GOAL `FINITE (B:(real^3->bool)->bool)`);;
e (EXPAND_TAC "B");;
e (ASM_SIMP_TAC [FINITE_MCELL_SET_LEMMA]);;
e (ASM_SIMP_TAC[SUM_ADD; SUM_SUB; SUM_LMUL; ETA_AX]);;
e (EXPAND_TAC "T2");;
e (REAL_ARITH_TAC);;
e (FIRST_ASSUM MATCH_MP_TAC);;
e (ASM_REWRITE_TAC[]);;
 
let NEGLIGIBLE_FUNC = top_thm();;

(* ========================================================================= *)
(*             Main theorm                                                   *)
(* ========================================================================= *)

let UPFZBZM = prove (UPFZBZM_concl,
 (REPEAT STRIP_TAC) THEN (ABBREV_TAC `G = (\u. --vol (voronoi_open V u) +
              &8 * mm1 -
              &8 *
              mm2 *
              sum {v:real^3 | v IN V /\ ~(u = v) /\ dist (u,v) <= &2 * h0}
              (\v. lmfun (hl [u; v])))`) THEN
 (EXISTS_TAC `G:real^3->real`) THEN 
 (ASM_MESON_TAC[NEGLIGIBLE_FUNC;FCC_COMPATABILITY_FUNC]));;


