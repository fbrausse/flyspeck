
(* ========================================================================= *)
(*                FLYSPECK - BOOK FORMALIZATION                              *)
(*                                                                           *)
(*      Authour   : VU KHAC KY                                               *)
(*      Unproved lemmas for UPFZBZM                                          *)
(*      Book lemma: UPFZBZM                                                  *)
(*      Chaper    : Packing (Clusters)                                       *)
(*      Date      : October 3, 2010                                          *)
(*                                                                           *)
(* ========================================================================= *)

flyspeck_needs "jordan/refinement.hl";;
flyspeck_needs "jordan/hash_term.hl";;
flyspeck_needs "jordan/parse_ext_override_interface.hl";;
flyspeck_needs "jordan/real_ext.hl";;
flyspeck_needs "jordan/lib_ext.hl";;
flyspeck_needs "jordan/tactics_jordan.hl";;
flyspeck_needs "jordan/num_ext_nabs.hl";;
flyspeck_needs "jordan/taylor_atn.hl";;
flyspeck_needs "jordan/float.hl";;
flyspeck_needs "jordan/flyspeck_constants.hl";;
flyspeck_needs "packing/lemma_negligible.hl";;


module Upfzbzm_axioms = struct

open Flyspeck_constants;;
open Lemma_negligible;;

(* ========================================================================= *)

g `~(tau0 = &0)`;;
e (SUBGOAL_THEN `#1.54065 < tau0` ASSUME_TAC);;
e (REWRITE_TAC[bounds]);;
e (STRIP_TAC);;
e (ASM_MESON_TAC[REAL_ARITH `~(#1.54065 < &0)`]);;
let tau0_not_zero = top_thm();;

(* ========================================================================= *)

g `&0 < mm2`;;
e (SUBGOAL_THEN `#0.02541 < mm2` ASSUME_TAC);;
e (REWRITE_TAC[bounds]);;
e (ASM_REAL_ARITH_TAC);;
let ZERO_LT_MM2_LEMMA = top_thm();;

(* ========================================================================= *)


(* Can be proved by using the new calculation tool of Prof T.Hales           *)

let lmfun_vs_marchal = new_definition 
  `lmfun_vs_marchal = 
   !h. ~(hminus <= h /\ h <= hplus)  ==> lmfun (h) >= marchal (h)`;;

let FINITE_MCELL_SET_LEMMA = new_definition 
   `FINITE_MCELL_SET_LEMMA = 
   !V r. FINITE {X | X SUBSET ball (vec 0,r) /\ mcell_set V X}`;;


let DIHX_SYM = new_definition 
        `DIHX_SYM = !u v V X. dihX V X (u,v) = dihX V X (v,u)`;; 


let SUM_GAMMAX_LMFUM_ESTIMATE = new_definition
  `SUM_GAMMAX_LMFUM_ESTIMATE = 
   !V. ?c. !r. saturated V /\ packing V /\ &1 <= r /\ 
               cell_cluster_estimate V /\ marchal_inequality /\
               lmfun_inequality V ==> 
    c * r pow 2 <=  sum {X | X SUBSET ball (vec 0, r)  /\ mcell_set V X} 
    (\X. gammaX V X lmfun)`;;

let FINITE_PACK_LEMMA = new_definition
  `FINITE_PACK_LEMMA = 
   !V p:real^3 r. packing V ==> FINITE (V:real^3->bool INTER ball (p,r))` ;;  

let FINITE_PERMUTE_3 = prove_by_refinement 
  (`FINITE {p | p permutes {0, 1, 2}}`, 
  [MATCH_MP_TAC FINITE_PERMUTATIONS THEN MESON_TAC[FINITE_RULES]]);;
let FINITE_PERMUTE_4 = prove_by_refinement 
  (`FINITE {p | p permutes {0, 1, 2, 3}}`, 
  [MATCH_MP_TAC FINITE_PERMUTATIONS THEN MESON_TAC[FINITE_RULES]]);;

end;;
