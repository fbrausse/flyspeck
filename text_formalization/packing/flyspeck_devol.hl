open Native_strictbuild;;
load_begin();;

open Wo;;
open Vectors;;
open Topology;;
open Measure;;
open Transcendentals;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Packing                                           *)
(* Author:  John Harrison     *)
(* Date: 2013-08-31                                                *)
(* ========================================================================== *)


(* ========================================================================= *)
(* Deriving a volume-free version of the final Flyspeck statement.           *)
(* ========================================================================= *)

(* module Flyspeck_devol = struct *)

let VOLUME_BALL_POS = prove
 (`!x:real^3 r. &0 < vol(ball(x,r)) <=> &0 < r`,
  REPEAT GEN_TAC THEN ASM_CASES_TAC `&0 < r` THENL
   [ASM_SIMP_TAC[VOLUME_BALL; REAL_LT_MUL_EQ; PI_POS;
                 REAL_ARITH `&0 < &4 / &3`; REAL_LT_IMP_LE;
                 REAL_ARITH `r pow 3 = (r:real) pow 2 * r`; REAL_POW_LT];
    ASM_SIMP_TAC[BALL_EMPTY; GSYM REAL_NOT_LT; MEASURE_EMPTY] THEN
    ASM_REAL_ARITH_TAC]);;

let FLYSPECK_DEVOLUTION = prove
 (`(!V. packing V /\ saturated V
        ==> (?c. !r. &1 <= r
                     ==> vol
                         (UNIONS {ball (v,&1) | v IN V} INTER ball(vec 0,r)) /
                         vol(ball(vec 0,r)) <=
                         pi / sqrt(&18) + c / r))
   ==> (!V. packing V /\ saturated V
            ==> (?c. !r. &1 <= r
                         ==> &(CARD(V INTER ball(vec 0,r))) <=
                             pi * r pow 3 / sqrt(&18) + c * r pow 2))`,
  MATCH_MP_TAC MONO_FORALL THEN GEN_TAC THEN
  DISCH_THEN(fun th -> STRIP_TAC THEN MP_TAC th) THEN
  ASM_REWRITE_TAC[] THEN DISCH_THEN(X_CHOOSE_TAC `c:real`) THEN
  EXISTS_TAC `pi / sqrt (&18) * &7 + abs c * &4` THEN
  X_GEN_TAC `r:real` THEN DISCH_TAC THEN
  FIRST_X_ASSUM(MP_TAC o SPEC `r + &1`) THEN
  ANTS_TAC THENL [ASM_REAL_ARITH_TAC; ALL_TAC] THEN
  ASM_SIMP_TAC[REAL_LE_LDIV_EQ; VOLUME_BALL_POS; VOLUME_BALL; REAL_LT_IMP_LE;
               REAL_ARITH `&1 <= r ==> &0 < r + &1`] THEN
  DISCH_THEN(MP_TAC o MATCH_MP (REAL_ARITH
   `a <= b ==> !x y. x <= y /\ y <= a ==> x <= b`)) THEN
  DISCH_THEN(MP_TAC o SPECL
   [`vol(UNIONS {ball(v,&1) | v IN V /\ v IN ball(vec 0,r)})`;
    `vol(UNIONS { ball(v,&1) |
                  v IN V /\ ball(v,&1) SUBSET ball(vec 0,r + &1)})`]) THEN
  ANTS_TAC THENL
   [CONJ_TAC THEN MATCH_MP_TAC MEASURE_SUBSET THEN REWRITE_TAC[CONJ_ASSOC] THEN
    REWRITE_TAC[INTER_UNIONS] THEN CONJ_TAC THENL
     [CONJ_TAC THEN MATCH_MP_TAC MEASURABLE_UNIONS THEN
      SIMP_TAC[FORALL_IN_GSPEC; MEASURABLE_BALL; MEASURABLE_INTER] THEN
      ONCE_REWRITE_TAC[SIMPLE_IMAGE_GEN] THEN
      MATCH_MP_TAC FINITE_IMAGE THEN
      ASM_SIMP_TAC[GSYM INTER; Upfzbzm_support_lemmas.FINITE_PACK_LEMMA] THEN
      MATCH_MP_TAC FINITE_SUBSET THEN
      EXISTS_TAC `V INTER ball(vec 0:real^3,r + &1)` THEN
      ASM_SIMP_TAC[Upfzbzm_support_lemmas.FINITE_PACK_LEMMA] THEN
      REWRITE_TAC[SUBSET; IN_ELIM_THM; IN_INTER; IN_BALL] THEN
      REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[] THEN
      FIRST_X_ASSUM MATCH_MP_TAC THEN CONV_TAC NORM_ARITH;
      MATCH_MP_TAC SUBSET_UNIONS THEN
      ONCE_REWRITE_TAC[SIMPLE_IMAGE_GEN] THEN
      MATCH_MP_TAC IMAGE_SUBSET THEN
      SIMP_TAC[SUBSET; IN_ELIM_THM; IN_BALL] THEN CONV_TAC NORM_ARITH;
      REWRITE_TAC[SET_RULE
       `{f x | x IN {g y | y IN s}} = {f(g y) | y IN s}`] THEN
      GEN_REWRITE_TAC (RAND_CONV o RAND_CONV)
        [Misc_defs_and_lemmas.UNIONS_DELETE] THEN
      REWRITE_TAC[SET_RULE
       `{f x | x IN s} DELETE a = {f x |x| x IN s /\ ~(f x = a)}`] THEN
      CONJ_TAC THEN MATCH_MP_TAC MEASURABLE_UNIONS THEN
      SIMP_TAC[FORALL_IN_GSPEC; MEASURABLE_BALL; MEASURABLE_INTER] THEN
      ONCE_REWRITE_TAC[SIMPLE_IMAGE_GEN] THEN MATCH_MP_TAC FINITE_IMAGE THEN
      MATCH_MP_TAC FINITE_SUBSET THEN
      EXISTS_TAC `V INTER ball(vec 0:real^3,r + &2)` THEN
      ASM_SIMP_TAC[Upfzbzm_support_lemmas.FINITE_PACK_LEMMA] THEN
      REWRITE_TAC[SUBSET; IN_ELIM_THM; IN_INTER; IN_BALL;
                  GSYM MEMBER_NOT_EMPTY]
      THENL [ALL_TAC; SIMP_TAC[] THEN CONV_TAC NORM_ARITH] THEN
      X_GEN_TAC `v:real^3` THEN STRIP_TAC THEN
      FIRST_X_ASSUM(MP_TAC o SPEC `v:real^3`) THEN
      ASM_REWRITE_TAC[] THEN CONV_TAC NORM_ARITH;
      REWRITE_TAC[UNIONS_SUBSET; FORALL_IN_GSPEC] THEN
      X_GEN_TAC `v:real^3` THEN STRIP_TAC THEN MATCH_MP_TAC
       (SET_RULE `!t. t IN u /\ s SUBSET t ==> s SUBSET UNIONS u`) THEN
      REWRITE_TAC[EXISTS_IN_GSPEC] THEN EXISTS_TAC `v:real^3` THEN
      ASM SET_TAC[]];
    ONCE_REWRITE_TAC[SIMPLE_IMAGE_GEN] THEN
    W(MP_TAC o PART_MATCH (lhs o rand) MEASURE_DISJOINT_UNIONS_IMAGE o
        lhand o lhand o snd) THEN
    REWRITE_TAC[GSYM INTER] THEN
    ASM_SIMP_TAC[SUM_CONST; VOLUME_BALL; REAL_POS; MEASURABLE_BALL;
                 Pack1.KIUMVTC; REAL_ARITH `&1 <= r ==> &0 <= r`] THEN
    ANTS_TAC THENL
     [MAP_EVERY X_GEN_TAC [`v:real^3`; `w:real^3`] THEN
      REWRITE_TAC[IN_INTER] THEN STRIP_TAC THEN
      FIRST_X_ASSUM(MP_TAC o GEN_REWRITE_RULE I [Sphere.packing_in]) THEN
      DISCH_THEN(MP_TAC o SPECL [`v:real^3`; `w:real^3`]) THEN
      ASM_REWRITE_TAC[IN_BALL; SET_RULE
       `DISJOINT s t <=> !x. ~(x IN s /\ x IN t)`] THEN
      CONV_TAC NORM_ARITH;
      DISCH_THEN SUBST1_TAC] THEN
    REWRITE_TAC[REAL_ARITH `a * b * pi * &1 pow 3 <= x * y * pi * z <=>
                            pi * b * a <= pi * y * x * z`] THEN
    ASM_SIMP_TAC[REAL_LE_LMUL_EQ; PI_POS; REAL_LT_DIV; REAL_OF_NUM_LT; ARITH;
                 REAL_FIELD `&1 <= r
                             ==> (a + b / (r + &1)) * (r + &1) pow 3 =
                                 a * (r + &1) pow 3 + b * (r + &1) pow 2`] THEN
    MATCH_MP_TAC(REWRITE_RULE[IMP_CONJ_ALT] REAL_LE_TRANS) THEN
    REWRITE_TAC[REAL_LE_LADD; REAL_ARITH
     `pi / s * (r + &1) pow 3 + x =
      pi * r pow 3 / s + pi / s * (&3 * r pow 2 + &3 * r + &1) + x`] THEN
    REWRITE_TAC[REAL_ADD_RDISTRIB] THEN MATCH_MP_TAC REAL_LE_ADD2 THEN
    REWRITE_TAC[GSYM REAL_MUL_ASSOC] THEN CONJ_TAC THENL
     [MATCH_MP_TAC REAL_LE_LMUL THEN
      SIMP_TAC[REAL_LE_DIV; SQRT_POS_LE; REAL_POS; PI_POS_LE] THEN
      MATCH_MP_TAC(REAL_ARITH
       `r pow 1 <= r pow 2 /\ &1 <= r
        ==> &3 * r pow 2 + &3 * r + &1 <= &7 * r pow 2`) THEN
      ASM_SIMP_TAC[REAL_POW_MONO; ARITH];
      MATCH_MP_TAC REAL_LE_TRANS THEN
      EXISTS_TAC `abs c * (r + &1) pow 2` THEN CONJ_TAC THENL
       [MATCH_MP_TAC REAL_LE_RMUL THEN REWRITE_TAC[REAL_LE_POW_2] THEN
        REAL_ARITH_TAC;
        MATCH_MP_TAC REAL_LE_LMUL THEN REWRITE_TAC[REAL_ABS_POS] THEN
        MATCH_MP_TAC(REAL_ARITH
         `r pow 1 <= r pow 2 /\ &1 <= r
          ==> (r + &1) pow 2 <= &4 * r pow 2`) THEN
        ASM_SIMP_TAC[REAL_POW_MONO; ARITH]]]]);;

let CPNKNXN = prove
 (`!V:real^3->bool.
        packing V ==> ?V'. packing V' /\ saturated V' /\ V SUBSET V'`,
  REPEAT STRIP_TAC THEN
  MP_TAC(ISPEC `\V':real^3->bool. packing V' /\ V SUBSET V'`
    ZL_SUBSETS_UNIONS_NONEMPTY) THEN
  REWRITE_TAC[] THEN ANTS_TAC THENL
   [CONJ_TAC THENL [ASM_MESON_TAC[SUBSET_REFL]; ALL_TAC] THEN
    X_GEN_TAC `c:(real^3->bool)->bool` THEN
    DISCH_THEN(REPEAT_TCL CONJUNCTS_THEN ASSUME_TAC) THEN
    CONJ_TAC THENL [ALL_TAC; ASM SET_TAC[]] THEN
    REWRITE_TAC[Sphere.packing_in; IMP_CONJ; RIGHT_FORALL_IMP_THM] THEN
    REWRITE_TAC[FORALL_IN_UNIONS] THEN
    MAP_EVERY X_GEN_TAC [`W:real^3->bool`; `w:real^3`] THEN STRIP_TAC THEN
    MAP_EVERY X_GEN_TAC [`X:real^3->bool`; `x:real^3`] THEN STRIP_TAC THEN
    FIRST_X_ASSUM(MP_TAC o SPECL [`W:real^3->bool`; `X:real^3->bool`]) THEN
    ASM_REWRITE_TAC[Sphere.packing_in] THEN
    RULE_ASSUM_TAC(REWRITE_RULE[Sphere.packing_in]) THEN ASM SET_TAC[];
    MATCH_MP_TAC MONO_EXISTS THEN X_GEN_TAC `V':real^3->bool` THEN
    STRIP_TAC THEN ASM_REWRITE_TAC[Sphere.saturated] THEN
    X_GEN_TAC `z:real^3` THEN
    FIRST_X_ASSUM(MP_TAC o SPEC `(z:real^3) INSERT V'`) THEN
    ASM_CASES_TAC `(z:real^3) IN V'` THEN
    ASM_REWRITE_TAC[SET_RULE `s = x INSERT s <=> x IN s`] THENL
     [EXISTS_TAC `z:real^3` THEN ASM_REWRITE_TAC[DIST_REFL] THEN
      REAL_ARITH_TAC;
      MATCH_MP_TAC(TAUT
       `(q /\ r) /\ (~t ==> p) ==> ~((p /\ q) /\ r) ==> t`) THEN
      CONJ_TAC THENL [ASM SET_TAC[]; REWRITE_TAC[NOT_EXISTS_THM]] THEN
      UNDISCH_TAC `packing(V':real^3->bool)` THEN
      REWRITE_TAC[Sphere.packing_in; IMP_CONJ; RIGHT_FORALL_IMP_THM] THEN
      REWRITE_TAC[DE_MORGAN_THM; REAL_NOT_LT; FORALL_IN_INSERT] THEN
      ASM_MESON_TAC[DIST_SYM]]]);;


(* end;; *)
load_end __FILE__;;
