(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(* Section: Counting Spheres                                                             *)
(* Chapter: packing                                                           *)
(* Author: Thomas C. Hales                                  *)
(* Date: 2011-06-18                                                           *)
(* ========================================================================== *)

(* YSSKQOY *)



(* great study example. It is an obvious conseq. of 
  Trigonometry1.ACS_ARCLENGTH, but a direct match doesn't work *)

let arclength2 = prove_by_refinement(
  `!h.  (&1 <= h /\ h <= h0) ==> arclength (&2) (&2 * h) (&2) = acs(h / &2)`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  MP_TAC (SPECL [`&2`;`&2 * h`;`&2`] Trigonometry1.ACS_ARCLENGTH);
  BRANCH_A [
    ANTS_TAC ;
    MP_TAC Sphere.h0;
    ASM_REAL_ARITH_TAC;
  ];
  DISCH_THEN SUBST1_TAC;
  AP_TERM_TAC;
  UNDISCH_TAC `&1 <= h`;
  BY (CONV_TAC REAL_FIELD);
  ]);;
  (* }}} *)

let yssk_reduction = prove_by_refinement(
  `(!a1 a2 b1 b2. (&2 <= a1) /\ (a1 <= a2) /\ (a2 <= &2 * h0) /\
      (&2 <= b1 /\ b1 <= b2 /\ b2 <= &2 * h0) ==>
     (&0 <= arclength a2 b2 (&2) - arclength a1 b2 (&2) - arclength a2 b1 (&2) +
     arclength a1 b1 (&2))) ==>  
    (!h h'. (&1 <= h) /\ (h <= h0) /\ (&1 <= h') /\ (h' <= h0) ==>
    acs (h/ &2) + acs (h'/ &2) - pi/ &3 <= arclength (&2 * h) (&2 * h') (&2))`,
  (* {{{ proof *)
  [
    REPEAT STRIP_TAC;
    FIRST_X_ASSUM (fun t -> MP_TAC(SPECL[`&2`;`&2 * h`;`&2`;`&2 * h'`] t));
    BRANCH_A [
      ANTS_TAC ;
      MP_TAC Sphere.h0;
      ASM_REAL_ARITH_TAC;
    ];
    MATCH_MP_TAC (REAL_ARITH ` (b = b') /\ (c = c') /\ (d = d') ==> ((&0 <= a - b - c +d) ==> c' + b' - d' <= a)`);
    SUBST1_TAC (SPECL[`&2 * h`;`&2`;`&2`] Arc_properties.arc_sym);
    ASM_SIMP_TAC [arclength2;Arc_properties.arc_sym;];
    MP_TAC (SPEC `&1` arclength2);
    BY(REWRITE_TAC[REAL_ARITH `&2 * &1 = &2`;Nonlinear_lemma.ACS_2;Sphere.h0;REAL_ARITH `&1 <= &1 /\ &1 <= #1.26`]);
]);;
  (* }}} *)

 let TRI_UPS_X_STRICT_POS = prove
   (`!a b c. (&0 < a) /\ (&0 < b) /\ (&0 <= c) /\ (c < a + b) /\ (a < b + c) /\ (b < c + a) ==>
     &0 < ups_x (a * a) (b * b) (c * c)`,
    REPEAT STRIP_TAC THEN 
      REWRITE_TAC [UPS_X_SQUARES] THEN
      BY(REPEAT (MATCH_MP_TAC REAL_LT_MUL ORELSE CONJ_TAC ORELSE 
		ASM_REAL_ARITH_TAC)));;

 let ups_x_pos = prove_by_refinement(
  `!a b. &2 <= a /\ a <= #2.52 /\ &2 <= b /\ b <= #2.52 ==> &0 < ups_x (a pow 2) (b pow 2) (&4)`,
  (* {{{ proof *)
  [
    REPEAT STRIP_TAC;
    REWRITE_TAC[REAL_ARITH `&4 = &2 * &2 /\ a pow 2 = a*a`];
    MATCH_MP_TAC TRI_UPS_X_STRICT_POS;
    BY(ASM_REAL_ARITH_TAC);
  ]);;
  (* }}} *)

(*
  let expand_poly_tac = REWRITE_TAC[REAL_ADD_LDISTRIB;REAL_ADD_RDISTRIB;REAL_ARITH `-- -- x = x /\ -- (x + y ) = -- x - y /\ -- (x - y) = y - x /\ (a * b) * c = a * b * c /\ x - (u - v) = x + v - u /\ (x - y) - z = x - y - z /\ (x - y) * z = x * z - y * z /\ (-- (a * b) = (-- a) * b) /\ (a + b) + c = a + b + c /\ x*(y-z) = x * y - x * z `;REAL_POW_MUL];;
*)



let arc_derivative = prove_by_refinement(
  `!a b.  (&2 <= a /\ a <= #2.52) /\ &2 <= b /\ b <= #2.52
         ==>( ((\x. arclength x b (&2)) has_real_derivative
              (-- (&4 + a pow 2 - b pow 2) / (a * sqrt(ups_x (a pow 2) (b pow 2) (&4)) )))
             (atreal a within real_interval [&2,#2.52]))`,
  (* {{{ proof *)
  [
    REPEAT STRIP_TAC;
    MP_TAC (SPECL [`a:real`;`b:real`] Arc_properties.arc_derivative);
    ASM_REWRITE_TAC[];
    FORCE_MATCH;
    BRANCH_A [
      (   SUBGOAL_THEN `(&0 < a) /\ (&0 < b) /\ &0 < ups_x (a pow 2) (b pow 2) (&4)` ASSUME_TAC) ;
      (   REPEAT (CONJ_TAC ORELSE MATCH_MP_TAC ups_x_pos ORELSE ASM_REAL_ARITH_TAC));
    ];
    SUBGOAL_THEN `(&1 - ((a * a + b * b - &2 * &2) / (&2 * a * b)) pow 2) = (inv (&2 * a * b)) pow 2 * (ups_x (a pow 2) (b pow 2) (&4)) ` SUBST1_TAC;
    REWRITE_TAC[Sphere.ups_x];
    FIRST_X_ASSUM MP_TAC;
    BY(CONV_TAC REAL_FIELD);
    BRANCH_A [
      SUBGOAL_THEN `((a + a) * &2 * a * b - (a * a + b * b - &2 * &2) * &2 * b) = ( &2 * b * (&4 + a pow 2 - b pow 2))` SUBST1_TAC;
      BY (   CONV_TAC REAL_FIELD);
    ];
    MP_TAC (SPECL[`inv(&2 * a * b)`;`ups_x (a pow 2) (b pow 2) (&4)`] (GSYM Trigonometry1.SQRT_MUL_L));
    BRANCH_A [
      ANTS_TAC;
      REWRITE_TAC[REAL_LE_INV_EQ] THEN 
	   BY(REPEAT (CONJ_TAC ORELSE MATCH_MP_TAC REAL_LE_MUL ORELSE ASM_REAL_ARITH_TAC));
    ];
    DISCH_THEN SUBST1_TAC;
    FIRST_X_ASSUM MP_TAC;
    BY(CONV_TAC REAL_FIELD);
  ]);;
  (* }}} *)


(*  implement a derivative tactic that automates most of arc_derivative2 proof:

snd(top_realgoal());;
let (h1,[f;f';r]) = strip_comb (snd(top_realgoal()));;
let _ = (h1 = `(has_real_derivative)`) or 
  failwith "form 'f has_real_derivative f' atreal b within s' expected." ;;
let (h2,[atb;s1]) = strip_comb r;;
let (h3,b) = dest_comb atb;;

let HAS_REAL_DERIVATIVE_WITHIN_TAC =
  fun (asl,w) ->;;

*)

let arc_derivative2 = prove_by_refinement(
  `!a b.  (&2 <= a /\ a <= #2.52) /\ &2 <= b /\ b <= #2.52
  ==>( ((\x. -- (&4 + a pow 2 - x pow 2)/(a * sqrt(ups_x (a pow 2) (x pow 2) (&4)))) 
	  has_real_derivative
              (&32 * a * b /( (sqrt (ups_x (a pow 2) (b pow 2) (&4))) pow 3)))
             (atreal b within real_interval [&2,#2.52]))`,
  (* {{{ proof *)
  [
    REPEAT STRIP_TAC;
    REWRITE_TAC[Sphere.ups_x];
    MP_TAC (REWRITE_RULE[Calc_derivative.derived_form] (Calc_derivative.differentiate `(\x. --(&4 + a pow 2 - x pow 2) /       (a *        sqrt        (--(a pow 2) * a pow 2 - x pow 2 * x pow 2 - &4 * &4 +         &2 * a pow 2 * &4 +         &2 * a pow 2 * x pow 2 +         &2 * x pow 2 * &4)))` `b:real` `real_interval [&2,#2.52]`));
    REWRITE_TAC[GSYM Sphere.ups_x];
    BRANCH_A [
      SUBGOAL_THEN `&0 < ups_x (a pow 2) (b pow 2) (&4) ` ASSUME_TAC;
      REWRITE_TAC[REAL_ARITH `a pow 2 = a * a /\ &4 = &2 * &2`];
      MATCH_MP_TAC TRI_UPS_X_STRICT_POS;
      BY(ASM_REAL_ARITH_TAC);
    ];
    ASM_REWRITE_TAC[REAL_ENTIRE;TAUT `~(a\/b) <=> ~a /\ ~b`];
    BRANCH_A [
      SUBGOAL_THEN `~(sqrt( ups_x (a pow 2) (b pow 2) (&4)) = &0) ` ASSUME_TAC;
      ASM_SIMP_TAC[SQRT_EQ_0;REAL_ARITH `&0 < u ==> &0 <= u`];
      BY(ASM_REAL_ARITH_TAC);
    ];
    ASM_REWRITE_TAC[];
    BRANCH_A [
      ANTS_TAC;
      (FIRST_X_ASSUM (fun t -> MP_TAC t THEN REAL_ARITH_TAC));
    ];
    FORCE_MATCH;    
    ABBREV_TAC `c = ups_x (a pow 2) (b pow 2) (&4)`;  
    (fun (asl,w) -> MATCH_MP_TAC (Calc_derivative.rational_identity w) (asl,w));
    ASM_SIMP_TAC[REAL_ARITH `~(&2 = &0) /\ (&2 <= a ==> ~(a = &0))`];
    BRANCH_A [
      SUBGOAL_THEN `sqrt c pow 2 = ups_x (a pow 2) (b pow 2) (&4)` MP_TAC;
      EXPAND_TAC "c";
      MATCH_MP_TAC SQRT_POW_2;
      BY(ASM_MESON_TAC[REAL_ARITH `&0 < c ==> &0 <= c`])
    ];
    ABBREV_TAC `d = sqrt c`;
    REWRITE_TAC[Sphere.ups_x];
    BY(CONV_TAC REAL_RING);
  ]);;
  (* }}} *)

(* This is a good candidate for automation, long but trivial *)

let arc_length2_increasing = prove_by_refinement(
  `!a b1 b2.   (&2 <= a /\ a <= #2.52) /\ &2 <= b1 /\ b1 <= #2.52 /\ &2 <= b2 /\ b2 <= #2.52 /\ b1 <= b2 ==> 
  let fa = (\x. -- (&4 + a pow 2 - x pow 2)/(a * sqrt(ups_x (a pow 2) (x pow 2) (&4))))  in
    (
      fa b1 <= fa b2
    )`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
    LET_TAC;
    ABBREV_TAC `fa' =  \x. (&32 * a * x /( (sqrt (ups_x (a pow 2) (x pow 2) (&4))) pow 3))`;
  MP_TAC (SPECL[`fa:real->real`;`fa':real->real`;`b1:real`;`b2:real`] REAL_MVT_VERY_SIMPLE);
  ASM_REWRITE_TAC[IN_ELIM_THM;IN;];
  ANTS_TAC;
  REPEAT STRIP_TAC;
  MATCH_MP_TAC HAS_REAL_DERIVATIVE_WITHIN_SUBSET;
  EXISTS_TAC `real_interval [&2, #2.52]`;
  CONJ_TAC;
  EXPAND_TAC "fa";
  EXPAND_TAC "fa'";
  MATCH_MP_TAC arc_derivative2;
  REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[real_interval;IN_ELIM_THM];
  REAL_ARITH_TAC;
  REWRITE_TAC[real_interval;SUBSET;IN_ELIM_THM];
  GEN_TAC;
  ASM_REAL_ARITH_TAC;
  REWRITE_TAC[real_interval;IN_ELIM_THM];
  REPEAT STRIP_TAC;
  ONCE_REWRITE_TAC[REAL_ARITH `(x <= y) = (&0 <= y - x)`];
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC REAL_LE_MUL;
  CONJ_TAC THENL [ALL_TAC;ASM_MESON_TAC[REAL_ARITH `x <= y ==> &0 <= y -x`]];
  EXPAND_TAC "fa'";
  REWRITE_TAC [real_div];
  REPEAT ((MATCH_MP_TAC REAL_LE_MUL) ORELSE CONJ_TAC ORELSE ASM_REAL_ARITH_TAC);
  REWRITE_TAC[REAL_LE_INV_EQ];
  MATCH_MP_TAC REAL_POW_LE;
  MATCH_MP_TAC SQRT_POS_LE;
  REWRITE_TAC[REAL_ARITH `a pow 2 = a*a /\ &4 = &2 * &2`];
  MATCH_MP_TAC TRI_UPS_X_POS;
  ASM_REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let arc_length1_increasing = prove_by_refinement(
  `!a1 a2 b1 b2. (&2 <= a1) /\ (a1 <= a2) /\ (a2 <= #2.52) /\
      (&2 <= b1 /\ b1 <= b2 /\ b2 <= #2.52) ==>
    (let f = \x. arclength x b2 (&2) - arclength x b1 (&2) in
    (f a1 <= f a2))`,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
    LET_TAC;
    ABBREV_TAC `fa = \b a.  (-- (&4 + a pow 2 - b pow 2) / (a * sqrt(ups_x (a pow 2) (b pow 2) (&4)) ))`;
    MP_TAC (SPECL [`f:real->real`;`\(a:real). (((fa:real->real->real) b2 a - fa b1 a):real)`;`a1:real`;`a2:real`] REAL_MVT_VERY_SIMPLE);
    ASM_REWRITE_TAC[IN;IN_ELIM_THM];
    (* BRANCH will go 3 deep *)
    ANTS_TAC;
    REPEAT STRIP_TAC;
  MATCH_MP_TAC HAS_REAL_DERIVATIVE_WITHIN_SUBSET;
  EXISTS_TAC `real_interval [&2, #2.52]`;
  CONJ_TAC;
  EXPAND_TAC "f";
    MATCH_MP_TAC HAS_REAL_DERIVATIVE_SUB;
    EXPAND_TAC "fa";
    CONJ_TAC THEN MATCH_MP_TAC arc_derivative THEN FIRST_X_ASSUM MP_TAC THEN REWRITE_TAC[IN_ELIM_THM;real_interval] THEN (ASM_REAL_ARITH_TAC);
    REWRITE_TAC[SUBSET;real_interval;IN_ELIM_THM];
    ASM_REAL_ARITH_TAC;
   REWRITE_TAC[SUBSET;real_interval;IN_ELIM_THM];
   REPEAT STRIP_TAC;
   ONCE_REWRITE_TAC[REAL_ARITH `x <= y <=> &0 <= y - x`];
   ASM_REWRITE_TAC[];
  MATCH_MP_TAC REAL_LE_MUL;
  CONJ_TAC THENL[ALL_TAC;UNDISCH_TAC `a1 <= a2` THEN REAL_ARITH_TAC];
  MP_TAC (SPECL[`x:real`;`b1:real`;`b2:real`] arc_length2_increasing);
  LET_TAC;
  EXPAND_TAC "fa'";
  EXPAND_TAC "fa";
  ANTS_TAC;
  ASM_REAL_ARITH_TAC;
 REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let YSSKQOY= prove_by_refinement(
  `  (!h h'. (&1 <= h) /\ (h <= h0) /\ (&1 <= h') /\ (h' <= h0) ==>
    acs (h/ &2) + acs (h'/ &2) - pi/ &3 <= arclength (&2 * h) (&2 * h') (&2))`,
  (* {{{ proof *)
  [
    MATCH_MP_TAC yssk_reduction;
    REPEAT STRIP_TAC;
    MP_TAC (SPECL[`a1:real`;`a2:real`;`b1:real`;`b2:real` ] arc_length1_increasing);
    LET_TAC;
    EXPAND_TAC "f";
    ASM_REWRITE_TAC[];
    BRANCH_A [
      ANTS_TAC;    
      MP_TAC Sphere.h0;
      ASM_REAL_ARITH_TAC;
    ];
    REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let lemma = prove_by_refinement(
  `!a2 b c. (&0 < a2)  /\ (&0 < c) /\ (!t. &0 <= t /\ t < c ==> a2*t <= b) ==> (!t. &0 <= t /\ t <= c ==> a2*t <= b)`,
  (* {{{ proof *)
[
REPEAT STRIP_TAC ;
DISJ_CASES_TAC (REAL_ARITH `t < c \/  ~(t <= c) \/ t=c `);
BY(ASM_MESON_TAC []);
HASH_UNDISCH_TAC 9516 ;
ASM_REWRITE_TAC [];
  DISCH_THEN SUBST1_TAC;
HASH_UNDISCH_TAC 6171  ;
  DISCH_THEN (fun t -> ASSUME_TAC t THEN ASSUME_TAC t);
HASH_RULE_TAC 6171   (SPEC `(b/(&2 * a2) + c/(&2))`);
HASH_RULE_TAC 6171  (SPEC `&0`);
ANTS_TAC;
ASM_REAL_ARITH_TAC;
REWRITE_TAC [REAL_ARITH`x* &0= &0`];
DISCH_TAC ;
SUBGOAL_THEN  `(&0 <= b / (&2 * a2) + c / &2)=T` SUBST1_TAC;
ASM_REWRITE_TAC [];
MATCH_MP_TAC (REAL_ARITH `&0 <= x /\( &0 < y) ==> &0 <= x + y/ &2`);
ASM_REWRITE_TAC [];
MATCH_MP_TAC REAL_LE_DIV;
ASM_REAL_ARITH_TAC;
REWRITE_TAC [];
ONCE_REWRITE_TAC [REAL_ARITH `((x < y) = (x - y < &0)) /\((x <= y) = (x - y <= &0))`];
MP_TAC (Calc_derivative.rational_identity `(b / (&2 * a2) + c / &2) - c = -- (a2*c - b)/(&2 * a2)`);
MP_TAC (Calc_derivative.rational_identity `(a2 * (b/ (&2 * a2) + c / &2) - b) = (a2 * c - b) /(&2)`);
ASM_SIMP_TAC [REAL_ARITH `~(&2 = &0) /\( &0 < a2 ==> ~(a2 = &0))`];
  DISCH_THEN SUBST1_TAC;
  DISCH_THEN SUBST1_TAC;
ABBREV_TAC `u = a2 * c - b `;
HASH_UNDISCH_TAC 3659 ;
REWRITE_TAC[REAL_ARITH `--x / a < &0 <=> &0 < x / a`];
SIMP_TAC [REAL_ARITH`&0 < x ==> &0 < &2 * x`;Trigonometry2.REAL_LT_DIV_0];
REAL_ARITH_TAC 
]
);;
  (* }}} *)

(* REMOVE:
let eus1 = prove_by_refinement(
  `!(P:real^2 -> bool) c r. (&0 < r) /\ polyhedron P /\ c facet_of P /\  
  (!p. norm p < r ==> P p) ==>
     (?a b.  (norm a = &1) /\ 
      (r <= b) /\
                    P SUBSET {x | a dot x <= b} /\
                    c = P INTER {x | a dot x = b})`,
  (* {{{ proof *)
[
REPEAT STRIP_TAC ;
MP_TAC (SPECL[`P:real^2->bool`;`c:real^2->bool`] (INST_TYPE [(`:2`,`:N`)] FACET_OF_POLYHEDRON));
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
EXISTS_TAC  `&1/ norm a % (a:real^2)`;
EXISTS_TAC  `&1/ norm (a:real^2) * (b:real)`;
ASM_REWRITE_TAC [GSYM Trigonometry2.NOT_VEC0_UNITABLE];
SUBGOAL_THEN  `&0 < norm (a:real^2)` ASSUME_TAC;
ASM_REWRITE_TAC [NORM_POS_LT];
SUBGOAL_THEN `&0 < &1/ norm (a:real^2)` ASSUME_TAC;
MATCH_MP_TAC  REAL_LT_DIV THEN CONJ_TAC THEN TRY REAL_ARITH_TAC THEN ASM_REWRITE_TAC[];
HASH_UNDISCH_TAC 7978 ;
REWRITE_TAC  [DOT_LMUL];
ASM_SIMP_TAC [REAL_LE_LMUL_EQ];
REWRITE_TAC [REAL_EQ_MUL_LCANCEL];
SIMP_TAC [REAL_ARITH `&0 < d==> ~(d= &0)`];
DISCH_TAC ;
SUBGOAL_THEN `!p. norm (p:real^2) < r ==> (a:real^2) dot p <= b` ASSUME_TAC;
REPEAT STRIP_TAC ;
HASH_UNDISCH_TAC 5889 ;
REWRITE_TAC [SUBSET;IN;IN_ELIM_THM];
DISCH_THEN MATCH_MP_TAC;
FIRST_X_ASSUM MATCH_MP_TAC;
ASM_REWRITE_TAC [];
SUBGOAL_THEN  `(&0 < norm (a:real^2) pow 2) /\(&0 < r/ norm a) /\(!t. &0 <= t /\( t < r/ norm a) ==> (norm a pow 2 )*t <= b)` (fun t -> MP_TAC (MATCH_MP lemma t));
CONJ_TAC ;
HASH_UNDISCH_TAC 7435 ;
REWRITE_TAC [GSYM Trigonometry2.NOT_ZERO_EQ_POW2_LT];
REAL_ARITH_TAC ;
CONJ_TAC ;
MATCH_MP_TAC REAL_LT_DIV;
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
HASH_RULE_TAC 4896 (SPEC `t % (a:real^2)`);
ASM_SIMP_TAC [NORM_MUL;REAL_ARITH `&0 <= t ==> (abs t = t)`];
REWRITE_TAC [DOT_RMUL];
REWRITE_TAC [DOT_SQUARE_NORM];
ANTS_TAC;
HASH_RULE_TAC 7310 (Calc_derivative.rational_ineq_rule);
HASH_UNDISCH_TAC 7435 ;
SIMP_TAC [REAL_LT_MUL_EQ];
MP_TAC (REAL_ARITH `&0 < x ==> ~(x = &0)`);
REAL_ARITH_TAC ;
REAL_ARITH_TAC ;
DISCH_THEN (fun t-> MP_TAC (SPEC `r/ norm (a:real^2)` t));
ANTS_TAC;
REWRITE_TAC [REAL_ARITH `x <= x`];
REWRITE_TAC [invert_den_le];
MATCH_MP_TAC REAL_LE_MUL;
ASM_REAL_ARITH_TAC;
DISCH_THEN (MP_TAC o Calc_derivative.rational_ineq_rule);
DISCH_TAC ;
MATCH_MP_TAC (REAL_ARITH `((x < y) ==> F) ==> (y <= x)`);
DISCH_THEN (MP_TAC o Calc_derivative.rational_ineq_rule);
HASH_UNDISCH_TAC 5880 ;
SUBGOAL_THEN `~(norm (a:real^2) = &0)` ASSUME_TAC;
ASM_REAL_ARITH_TAC;
ASM_REWRITE_TAC [];
REWRITE_TAC [REAL_ARITH `~(&0 < (x - y) * b) <=> (&0 <= (y - x)*b)`];
REWRITE_TAC [REAL_RING `(b * norm (a:real^2) - norm a pow 2 * r) = (b - r * norm a) * norm a`];
HASH_UNDISCH_TAC 7435 ;
REWRITE_TAC [REAL_MUL_POS_LE;REAL_MUL_POS_LT;REAL_ENTIRE;REAL_ARITH `a * b < &0 <=> ~(&0 <= a * b)`];
REAL_ARITH_TAC
]);;
  (* }}} *)
*)

let eus1 = prove_by_refinement(
  `!(P:real^2 -> bool) c. polyhedron P /\ c facet_of P  ==>  
     (?a b.  (norm a = &1) /\
        (!r. (&0 < r) /\ (!p. norm p < r ==> P p) ==> (r <= b)) /\
                    P SUBSET {x | a dot x <= b} /\
                    c = P INTER {x | a dot x = b})`,
  (* {{{ proof *)
[
REPEAT STRIP_TAC ;
MP_TAC (SPECL[`P:real^2->bool`;`c:real^2->bool`] (INST_TYPE [(`:2`,`:N`)] FACET_OF_POLYHEDRON));
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
EXISTS_TAC  `&1/ norm a % (a:real^2)`;
EXISTS_TAC  `&1/ norm (a:real^2) * (b:real)`;
ASM_REWRITE_TAC [GSYM Trigonometry2.NOT_VEC0_UNITABLE];
SUBGOAL_THEN  `&0 < norm (a:real^2)` ASSUME_TAC;
ASM_REWRITE_TAC [NORM_POS_LT];
SUBGOAL_THEN `&0 < &1/ norm (a:real^2)` ASSUME_TAC;
MATCH_MP_TAC  REAL_LT_DIV THEN CONJ_TAC THEN TRY REAL_ARITH_TAC THEN ASM_REWRITE_TAC[];
HASH_UNDISCH_TAC 7978 ;
REWRITE_TAC  [DOT_LMUL];
ASM_SIMP_TAC [REAL_LE_LMUL_EQ];
REWRITE_TAC [REAL_EQ_MUL_LCANCEL];
SIMP_TAC [REAL_ARITH `&0 < d==> ~(d= &0)`];
DISCH_TAC ;
REPEAT STRIP_TAC;
SUBGOAL_THEN `!p. norm (p:real^2) < r ==> (a:real^2) dot p <= b` ASSUME_TAC;
REPEAT STRIP_TAC ;
HASH_UNDISCH_TAC 5889 ;
REWRITE_TAC [SUBSET;IN;IN_ELIM_THM];
DISCH_THEN MATCH_MP_TAC;
FIRST_X_ASSUM MATCH_MP_TAC;
ASM_REWRITE_TAC [];
SUBGOAL_THEN  `(&0 < norm (a:real^2) pow 2) /\(&0 < r/ norm a) /\(!t. &0 <= t /\( t < r/ norm a) ==> (norm a pow 2 )*t <= b)` (fun t -> MP_TAC (MATCH_MP lemma t));
CONJ_TAC ;
HASH_UNDISCH_TAC 7435 ;
REWRITE_TAC [GSYM Trigonometry2.NOT_ZERO_EQ_POW2_LT];
REAL_ARITH_TAC ;
CONJ_TAC ;
MATCH_MP_TAC REAL_LT_DIV;
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
HASH_RULE_TAC 4896 (SPEC `t % (a:real^2)`);
ASM_SIMP_TAC [NORM_MUL;REAL_ARITH `&0 <= t ==> (abs t = t)`];
REWRITE_TAC [DOT_RMUL];
REWRITE_TAC [DOT_SQUARE_NORM];
ANTS_TAC;
HASH_RULE_TAC 7310 (Calc_derivative.rational_ineq_rule);
HASH_UNDISCH_TAC 7435 ;
SIMP_TAC [REAL_LT_MUL_EQ];
MP_TAC (REAL_ARITH `&0 < x ==> ~(x = &0)`);
REAL_ARITH_TAC ;
REAL_ARITH_TAC ;
DISCH_THEN (fun t-> MP_TAC (SPEC `r/ norm (a:real^2)` t));
ANTS_TAC;
REWRITE_TAC [REAL_ARITH `x <= x`];
REWRITE_TAC [Calc_derivative.invert_den_le];
MATCH_MP_TAC REAL_LE_MUL;
ASM_REAL_ARITH_TAC;
DISCH_THEN (MP_TAC o Calc_derivative.rational_ineq_rule);
DISCH_TAC ;
MATCH_MP_TAC (REAL_ARITH `((x < y) ==> F) ==> (y <= x)`);
DISCH_THEN (MP_TAC o Calc_derivative.rational_ineq_rule);
HASH_UNDISCH_TAC 5880 ;
SUBGOAL_THEN `~(norm (a:real^2) = &0)` ASSUME_TAC;
ASM_REAL_ARITH_TAC;
ASM_REWRITE_TAC [];
REWRITE_TAC [REAL_ARITH `~(&0 < (x - y) * b) <=> (&0 <= (y - x)*b)`];
REWRITE_TAC [REAL_RING `(b * norm (a:real^2) - norm a pow 2 * r) = (b - r * norm a) * norm a`];
HASH_UNDISCH_TAC 7435 ;
REWRITE_TAC [REAL_MUL_POS_LE;REAL_MUL_POS_LT;REAL_ENTIRE;REAL_ARITH `a * b < &0 <=> ~(&0 <= a * b)`];
REAL_ARITH_TAC
]);;
  (* }}} *)


let facet_rep_uniq = prove_by_refinement(
  `!(P:real^2 -> bool) a b1 b2. polyhedron P /\ 
    c1 facet_of P  /\ c2 facet_of P /\
    P SUBSET {x | a dot x <= b1} /\
    P SUBSET {x | a dot x <= b2} /\
    c1 = P INTER {x | a dot x = b1} /\
    c2 = P INTER {x | a dot x = b2} ==>
    (b1 = b2) /\ (c1 = c2)`,
  (* {{{ proof *)
[
REPEAT GEN_TAC ;
REWRITE_TAC [facet_of;face_of;SUBSET;GSYM MEMBER_NOT_EMPTY;IN;IN_ELIM_THM;INTER];
STRIP_TAC ;
SUBGOAL_THEN `a dot x = b1 /\ (a:real^2) dot x' = b2` ASSUME_TAC;
HASH_UNDISCH_TAC 4776 ;
HASH_UNDISCH_TAC 6239 ;
ASM_REWRITE_TAC [IN_ELIM_THM];
MESON_TAC [];
ASM_MESON_TAC [REAL_ARITH `b1 <= b2 /\ b2 <= b1 ==> (b1 = b2)`]
]
);;
  (* }}} *)

let facet_rep_spec = prove_by_refinement(
  `?a b. !(P:real^2 -> bool) c. polyhedron P /\ c facet_of P
   ==>
     (  (norm (a P c) = &1) /\ 
     (!r. (&0 < r) /\ (!p. norm p < r ==> P p) ==> (r <= (b P c))) /\
     P SUBSET {x | (a P c) dot x <= (b P c)} /\
     c = P INTER {x | (a P c) dot x = (b P c)})`,
  (* {{{ proof *)
  [
REWRITE_TAC [GSYM SKOLEM_THM;RIGHT_EXISTS_IMP_THM];
MESON_TAC [eus1]
  ]);;
  (* }}} *)

let facet_rep_def = new_specification ["facet_rep_a";"facet_rep_b"] facet_rep_spec;;

let facet_rep_uniq_c = prove_by_refinement(
  `!(P:real^2 -> bool) c1 c2. polyhedron P /\ c1 facet_of P /\ c2 facet_of P /\
    (facet_rep_a P c1 = facet_rep_a P c2) ==> (c1 = c2)`,
  (* {{{ proof *)
  [
REPEAT STRIP_TAC ;
MP_TAC (SPECL[`P:real^2->bool`;`facet_rep_a P c1`;`facet_rep_b P c1`;`facet_rep_b P c2`] facet_rep_uniq);
ASM_REWRITE_TAC [];
MP_TAC (SPECL[`P:real^2->bool`;`c1:real^2->bool`] facet_rep_def);
MP_TAC (SPECL[`P:real^2->bool`;`c2:real^2->bool`] facet_rep_def);
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
ASM_MESON_TAC []
  ]);;
  (* }}} *)

let norm1_cauchy_eq = prove_by_refinement(
  `!(x:real^N) y. norm x = &1 /\ norm y = &1 /\ x dot y = &1 ==> (x = y)`,
  (* {{{ proof *)
  [
REPEAT STRIP_TAC ;
MP_TAC (SPECL [`x:real^N`;`y:real^N`] NORM_CAUCHY_SCHWARZ_EQ);
ASM_REWRITE_TAC [REAL_ARITH `&1 * &1 = &1`;VECTOR_MUL_LID];
MESON_TAC []
  ]);;
  (* }}} *)

let facet_rep_in_facet = prove_by_refinement(
  `!(P:real^2->bool) c1 c2 r. polyhedron P /\ c1 facet_of P /\ c2 facet_of P /\ 
  (&0 < r) /\ (!p. norm p < r ==> P p) /\ 
  (facet_rep_b P c1 <= facet_rep_a P c1 dot (r % facet_rep_a P c2)) ==>
   (c1 = c2)`,
  (* {{{ proof *)
  [
REWRITE_TAC [DOT_RMUL];
REPEAT STRIP_TAC ;
MATCH_MP_TAC facet_rep_uniq_c;
EXISTS_TAC `P:real^2->bool`;
ASM_REWRITE_TAC [];
MATCH_MP_TAC (norm1_cauchy_eq);
SUBGOAL_THEN `norm (facet_rep_a (P:real^2->bool) c1) = &1 /\  norm (facet_rep_a P c2) = &1 /\  facet_rep_a P c1 dot facet_rep_a P c2 <= &1` (MP_TAC);
ASM_MESON_TAC [facet_rep_def;REAL_ARITH `&1 * &1 = &1`;NORM_CAUCHY_SCHWARZ];
REPEAT STRIP_TAC  THEN ASM_REWRITE_TAC[];
SUBGOAL_THEN `r <= facet_rep_b P c1` MP_TAC;
ASM_MESON_TAC [facet_rep_def];
DISCH_TAC ;
HASH_UNDISCH_TAC 4642 ;
REWRITE_TAC [REAL_ARITH `x <= &1 <=> (x = &1) \/ (x < &1)`];
DISCH_THEN DISJ_CASES_TAC THEN ASM_REWRITE_TAC[];
ABBREV_TAC `d = facet_rep_a P c1 dot facet_rep_a P c2 `;
SUBGOAL_THEN `&0 < (r * (&1 - d))` ASSUME_TAC;
MATCH_MP_TAC REAL_LT_MUL;
ASM_REAL_ARITH_TAC ;
ASM_REAL_ARITH_TAC 
  ]);;
  (* }}} *)

let facet_rep_refl = prove_by_refinement(
  `!(P:real^2->bool) c r. polyhedron P /\ c facet_of P /\ 
  (&0 < r) /\ (!p. norm p < r ==> P p)  ==>
   (facet_rep_a P c dot (r % facet_rep_a P c) <= facet_rep_b P c)`,
  (* {{{ proof *)
  [
REWRITE_TAC [DOT_RMUL;Collect_geom.X_DOT_X_EQ];
REPEAT STRIP_TAC ;
MP_TAC (SPECL[`P:real^2->bool`;`c:real^2->bool`] facet_rep_def);
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
ASM_REWRITE_TAC [Trigonometry2.POW2_1;REAL_ARITH ` r * &1 = r`];
ASM_MESON_TAC []
  ]);;
  (* }}} *)


let NORM1_NZ = prove_by_refinement(
  `!(a:real^N). norm a = &1 ==> ~(a = vec 0)`,
  (* {{{ proof *)
  [
MESON_TAC [NORM_0;REAL_ARITH `~(&1 = &0)`]
  ]);;
  (* }}} *)

let norm_normalize = prove_by_refinement(
 `! (v:real^N). ~(v = vec 0) ==> norm (normalize v) = &1 `,
[
(GEN_TAC THEN STRIP_TAC);
(PURE_REWRITE_TAC[normalize;NORM_MUL;REAL_ABS_INV;REAL_ABS_NORM]);
(MATCH_MP_TAC REAL_MUL_LINV);
(ASM_MESON_TAC[NORM_EQ_0]);
]);;

let NZ_IMP_NORM1 = prove_by_refinement(
  `!(a:real^N) b. ~(a = vec 0) ==> 
   (?a' b'. (norm a' = &1) /\ 
      (!x. (a dot x <= b) <=>  (a' dot x <= b') ) /\
      (!x. (a dot x = b) <=> (a' dot x = b') ))`,
  (* {{{ proof *)
  [
REPEAT STRIP_TAC ;
EXISTS_TAC `normalize (a:real^N)`;
EXISTS_TAC `inv(norm (a:real^N)) * b`;
ASM_SIMP_TAC [norm_normalize];
ASM_SIMP_TAC [norm_normalize];
REWRITE_TAC [normalize;DOT_LMUL];
FIRST_X_ASSUM (ASSUME_TAC o (REWRITE_RULE[GSYM NORM_POS_LT]));
FIRST_X_ASSUM (ASSUME_TAC o (ONCE_REWRITE_RULE[GSYM REAL_LT_INV_EQ]));
ASM_SIMP_TAC [REAL_LE_LMUL_EQ];
ASM_MESON_TAC [REAL_EQ_MUL_LCANCEL;REAL_ARITH `&0 < u ==> ~(u= &0)`]
  ]);;
  (* }}} *)

let DOT_EQ_IMP_INEQ_LEMMA = prove_by_refinement(
  `!(a:real^N) b a' b'.
    (!x. a dot x = b <=> a' dot x = b') /\ (&0 <  b) /\ (&0 < b') ==>
   (!x. ~(a dot x = &0) ==> (a dot x <= b <=> a' dot x <= b'))`,
  (* {{{ proof *)
  [
REPEAT STRIP_TAC ;
HASH_RULE_TAC 2720 (SPEC `((b/(a dot x)) % (x:real^N))`);
REWRITE_TAC [DOT_RMUL];
SUBGOAL_THEN `b / (a dot x) * (a dot (x:real^N)) = b` SUBST1_TAC;
HASH_UNDISCH_TAC 5506 ;
BY(CONV_TAC REAL_FIELD);
REWRITE_TAC [REAL_FIELD `b/ (a dot x) * (a' dot x) = b * ((a' dot x) / (a dot (x:real^N)))`];
  DISCH_THEN (fun t-> ASSUME_TAC(GSYM t));
ASM_REWRITE_TAC [];
SUBGOAL_THEN `&0 < (a' dot (x:real^N)) / (a dot x) ` ASSUME_TAC;
HASH_UNDISCH_TAC 9752 ;
ASM_REWRITE_TAC [REAL_MUL_POS_LT];
ASM_REAL_ARITH_TAC;
SUBGOAL_THEN `a dot (x:real^N) <= b <=> (a dot x) * ((a' dot x)/(a dot x)) <= b * (a' dot x)/(a dot x)` SUBST1_TAC;
ASM_SIMP_TAC [REAL_LE_RMUL_EQ];
SUBGOAL_THEN  `(a dot (x:real^N)) * (a' dot x)/ (a dot x) = a' dot x` SUBST1_TAC;
HASH_UNDISCH_TAC 5506 ;
BY (CONV_TAC REAL_FIELD);
BY(REWRITE_TAC[])
  ]);;
  (* }}} *)


let DOT_EQ_IMP_INEQ = prove_by_refinement(
  `!(a:real^N) b a' b'.
    (!x. a dot x = b <=> a' dot x = b') /\ (&0 <= b) /\ (&0 < b') ==>
   (!x. (a dot x <= b) <=> a' dot x <= b')`,
  (* {{{ proof *)
  [
REPEAT STRIP_TAC ;
SUBGOAL_THEN `&0 < b` ASSUME_TAC;
HASH_RULE_TAC 2720 (fun t -> (REWRITE_RULE[DOT_RZERO] (SPEC `(vec 0):real^N` t)));
ASM_REAL_ARITH_TAC ;
ASM_CASES_TAC `~(a dot (x:real^N) = &0)`;
ASM_MESON_TAC [DOT_EQ_IMP_INEQ_LEMMA];
ASM_CASES_TAC `~(a' dot (x:real^N) = &0)`;
ASM_MESON_TAC [DOT_EQ_IMP_INEQ_LEMMA];
ASM_REAL_ARITH_TAC 
  ]);;
  (* }}} *)

(*
let POLYHEDRON_INTER_AFFINE_MINIMAL_NORM = prove_by_refinement(
  `!(s:real^N->bool). polyhedron s <=>
         (?f. FINITE f /\
              s = affine hull s INTER INTERS f /\
              (!h. h IN f ==> (?a b. (norm a = &1) /\ h = {x | a dot x <= b})) /\
              (!f'. f' PSUBSET f ==> s PSUBSET affine hull s INTER INTERS f'))`,
  (* {{{ proof *)
  [
REPEAT STRIP_TAC ;
MP_TAC (SPECL[`(s:real^N->bool)`] POLYHEDRON_INTER_AFFINE_MINIMAL);
DISCH_TAC ;
ASM_REWRITE_TAC [];
ONCE_REWRITE_TAC[MESON [] `(x = y) <=> (y = x)`];
MATCH_MP_TAC (MESON[] `(!(f:A). (P f <=> Q f)) ==> ((?f. P f) <=> (?f. Q f))`);
GEN_TAC ;
REWRITE_TAC [TAUT `(x /\ y <=> x /\ z) <=> (~x \/ (y <=> z))`;TAUT `(x /\ y <=> z /\ y) <=> (~y \/ (x <=>z))`];
REPEAT DISJ2_TAC;
MATCH_MP_TAC (MESON[] `(!h:A. (P h <=> Q h)) ==> ((!h. P h) <=> (!h. Q h))`);
GEN_TAC ;
MATCH_MP_TAC (TAUT  ` (q = r) ==> ((p ==> q) <=> (p ==> r))`);
EQ_TAC;
MESON_TAC [NORM1_NZ];
ONCE_REWRITE_TAC[FUN_EQ_THM];
REWRITE_TAC [IN_ELIM_THM];
REPEAT STRIP_TAC ;
HASH_KILL_TAC 230 ;
MP_TAC (SPECL [`a:real^N`;`b:real`] NZ_IMP_NORM1);
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
HASH_KILL_TAC 6572 ;
ASM_MESON_TAC []
  ]);;
  (* }}} *)
*)


FACET_OF_POLYHEDRON_EXPLICIT;;
FACET_OF_POLYHEDRON;;
POLYHEDRON_INTER_AFFINE_MINIMAL;;
suggest();;

search [`facet_of`];;

let facet_rep_in_poly = prove_by_refinement(
  `!(P:real^2->bool) c r. polyhedron P /\ (c facet_of P) /\ 
  (&0 < r) /\ (!p. norm p < r ==> P p) ==>
  P (r % facet_ref_a P c)
`,
  (* {{{ proof *)
  [
  #
  ]);;
  (* }}} *)

let facet_rep_a_uniq = prove_by_refinement(
  `!(P:real^2->bool) c1 c2. polyhedron P /\ c1 facet_of P /\ c2 facet_of P /\
    (?s. (&0 < s) /\ facet_rep_a P c1 = s % facet_rep_a P c2) ==> (c1 = c2)
      `,
  (* {{{ proof *)
  [
st/r,
  ]);;
  (* }}} *)




let REAL_SORT  = prove_by_refinement(
  `!n s. s HAS_SIZE n /\ (1 <= n) ==>
    (?(f:num->real). (s = IMAGE f (0..(n-1)) /\ ( (!j k.
                                     j < n /\ k < n /\ j < k
                                     ==> ~(f j < f k)))))`,
  (* {{{ proof *)
[
REPEAT STRIP_TAC ;
MP_TAC (SPEC `((>):real->real->bool)` (INST_TYPE [(`:real`,`:A`)] TOPOLOGICAL_SORT));
ANTS_TAC ;
ARITH_TAC ;
DISCH_THEN (fun t -> MP_TAC (SPECL[`n:num`;`s:real->bool`] t));
ASM_REWRITE_TAC [];
REPEAT STRIP_TAC ;
EXISTS_TAC `\ (i:num). (f:num->real) (SUC i)`;
CONJ_TAC ;
ASM_REWRITE_TAC [IMAGE];
ONCE_REWRITE_TAC[FUN_EQ_THM] ;
REWRITE_TAC [IN_ELIM_THM;IN;X_IN IN_NUMSEG];
X_GEN_TAC `t:real`;
HASH_UNDISCH_TAC 6963 ;
MESON_TAC [ARITH_RULE `(1 <= x /\ x <= n ==> (0 <= PRE x /\ PRE x <= n-1 /\ SUC (PRE x) = x)) /\ (0 <= x /\ x <= (n-1) /\ (1 <= n) ==> 1 <= SUC x /\ SUC x <= n)`];
BETA_TAC ;
HASH_UNDISCH_TAC 4230 ;
REWRITE_TAC [IN_ELIM_THM;IN;X_IN IN_NUMSEG];
REPEAT STRIP_TAC ;
HASH_RULE_TAC 4713 (SPECL [`SUC j`;`SUC k`]);
ASM_REWRITE_TAC [REAL_ARITH `(x > y) = (y<x)`];
REPEAT (POP_ASSUM MP_TAC);
ARITH_TAC
]
);;
  (* }}} *)

(* ------------------------------------------------------------ *)
(* later *)

let eus_cos  = prove_by_refinement(
  `!phi psi. &0 <= psi /\ psi <= phi /\ phi <= &2 * pi - psi ==> 
    cos phi <= cos psi`,
  (* {{{ proof *)
[
REPEAT STRIP_TAC ;
DISJ_CASES_TAC (REAL_ARITH `phi <= pi \/ (pi <= phi)`);
MATCH_MP_TAC COS_MONO_LE;
ASM_REWRITE_TAC [];
ABBREV_TAC `phi' = &2 * pi - phi`;
HASH_UNDISCH_TAC 6556 ;
    DISCH_THEN (fun t -> (REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[REWRITE_RULE[REAL_ARITH `x - y = u <=> (y = x - u)`] t]));
REWRITE_TAC [REAL_ARITH `pi <= &2 * pi - phi' <=> phi' <= pi`;GSYM Trigonometry2.COS_SUM_2PI];
REPEAT STRIP_TAC ;
MATCH_MP_TAC COS_MONO_LE;
ASM_REAL_ARITH_TAC
]);;
  (* }}} *)

(*
let EUSOTYP = prove_by_refinement(
  `!(P:real^2 -> bool) k r. polyhedron P /\ bounded P /\
    (CARD { f | f facet_of P } = k) /\
  (!p. norm p < r ==> P p) ==>
     (?w sigma .
	(!i. w (i + 2 * k) = w i) /\
	polar_cycle_on sigma (IMAGE w (:num)) /\
	(!i. sigma (w i) = w (i+1)) /\
	(!i. (arg_diff (w (2 * i )) (w (2 * i + 1)) = arg_diff (w (2 * i + 1)) (w (2 * i + 2)))) /\
	(!i. arg_diff (w i) (w (i+1)) < pi / &2) /\
	(!i. norm (w (2 * i)) = r) /\
	(!i. norm (w (2 * i+1)) = r / cos (arg_diff (w(2 * i)) (w(2 * i+1)))) /\
	(!i. (w (2 * i) dot (w (2* i + 1) - w (2 * i)) = &0)))
	`,
  (* {{{ proof *)
  [
  #
  ]);;
  (* }}} *)
*)


(*
let convex_fn_ineq = prove_by_refinement(
  `!f f' f'' a b t.
    (a <= b) /\ 
    (!x. x IN real_interval [a,b]
              ==> (f has_real_derivative f' x)
                  (atreal x within real_interval [a,b])) /\
    (!x. x IN real_interval [a,b]
              ==> (f' has_real_derivative f'' x)
                  (atreal x within real_interval [a,b])) /\
    (!x. x IN real_interval [a,b]
       ==> (&0 <= f'' x))
    ==> (!x. x IN real_interval [a,b] ==> f t + f' t * (x - t) <= f x)
    `,
  (* {{{ proof *)
  [
  REPEAT STRIP_TAC;
  (* REAL_MVT_VERY_SIMPLE *)
  ]);;
  (* }}} *)
*)

def_of_regexp "wedge";;
def_of_regexp "cyclic_set";;
search [`wedge_ge`;];;
search [`azim v1 v2 x y + azim v1 v2 y z`;name "sum"];;
search [`wedge_ge`];;
search [`cwedge`];;
search [`cw_dart_fan`];;
search [`cwedge`];;
search [`fan`];;
search [`FAN`];;
