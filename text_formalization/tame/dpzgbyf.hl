open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Tame Hypermap                                           *)
(* Lemma:  DPZGBYF                                                            *)
(* Author:  Thomas Hales     *)
(* Date: Jan 24, 2014                                                *)
(* ========================================================================== *)

(* XX STRIP_TAC failure: *)
(*
g `(?p:num. A p) /\ C (p:num) ==> E`;;
e STRIP_TAC;;
*)

module Dpzgbyf = struct

  open Hales_tactic;;
open Hypermap;;
open Tame_defs;;
(* open Tame_concl;; *)

open Import_tame_classification;;
open Tame_list;;
open More_tame_concl;;
open Oxaxucs;;
open Asfutbf;;
open Elllnyz;;
open Wmlnymd;;
open Tame_defs2;; 

let DPZGBYF_concl = `!g. planegraph g ==> planegraph_relaxed g`;;



let planegraph_induct = prove_by_refinement(
  `!B. ((!p. B (Seed p) /\ (!g g' i. (B g /\ 3 <= i /\ i <= maxGon p /\ 
   (  (let fs = nonFinals g in
     if (fs = []) then F else
       (let f = minimalFace fs in
	let v = minimalVertex g f in
	  (MEM g' (generatePolygon i v f g)))))) ==> B g'))) ==>
    (!g. planegraph g ==> B g)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[planegraph];
  REWRITE_TAC[IMAGE;UNIONS;IN_UNIV;IN_ELIM_THM];
  REWRITE_TAC[planegraphP;IN_ELIM_THM;RTranCl;IN;UNCURRY_DEF];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`p`]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC RTC_INDUCT_L [`(\x y. MEM y (next_plane p x))`;`\ x y. (x = Seed p) ==> B y`];
  REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ANTS_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    GEXISTL_TAC [`y`];
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `MEM` MP_TAC;
    REWRITE_TAC[next_plane];
    REWRITE_TAC[LET_THM];
    TYPIFY `nonFinals y = []` ASM_CASES_TAC;
      ASM_REWRITE_TAC[];
      BY(ASM_REWRITE_TAC[MEM]);
    ASM_REWRITE_TAC[];
    REWRITE_TAC[Seq2.mem_flatten;MEM_MAP;upt;Seq.mem_iota];
    REPEAT WEAKER_STRIP_TAC;
    GEXISTL_TAC [`x'`];
    FIRST_X_ASSUM_ST `SUC` MP_TAC;
    ASM_SIMP_TAC [arith `3 <= x' ==> (x' < 3 + SUC (maxGon m) - 3 <=> x' <= maxGon m)`];
    BY(ASM_MESON_TAC[]);
  DISCH_THEN (C INTRO_TAC [`Seed p`]) THEN REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let planegraph_relaxed_induct = prove_by_refinement(
  `!B. ((!p. B (Seed p) /\ 
   (!g g' i. (B g /\ 3 <= i /\ 
		(  (let fs = nonFinals g in
		      if (fs = []) then F else
			(let f = minimalFace fs in
			 let v = minimalVertex g f in
			   (MEM g' (generatePolygon i v f g)))))) ==> B g'))) ==>
    (!g. planegraph_relaxed g ==> B g)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[planegraph_relaxed];
  REWRITE_TAC[RTranCl;IN;UNCURRY_DEF];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`p`]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC RTC_INDUCT_L [`(\x y. MEM y (next_plane q x))`;`\ x y. (x = Seed p) ==> B y`];
  REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ANTS_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    GEXISTL_TAC [`y`];
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `MEM` MP_TAC;
    REWRITE_TAC[next_plane];
    REWRITE_TAC[LET_THM];
    TYPIFY `nonFinals y = []` ASM_CASES_TAC;
      ASM_REWRITE_TAC[];
      BY(ASM_REWRITE_TAC[MEM]);
    ASM_REWRITE_TAC[];
    REWRITE_TAC[Seq2.mem_flatten;MEM_MAP;upt;Seq.mem_iota];
    REPEAT WEAKER_STRIP_TAC;
    GEXISTL_TAC [`x'`];
    FIRST_X_ASSUM_ST `SUC` MP_TAC;
    ASM_SIMP_TAC [arith `3 <= x' ==> (x' < 3 + SUC (maxGon m) - 3 <=> x' <= maxGon m)`];
    BY(ASM_MESON_TAC[]);
  DISCH_THEN (C INTRO_TAC [`Seed p`]) THEN REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let DPZGBYF = prove_by_refinement(
  `!g. planegraph g ==> planegraph_relaxed g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[planegraph;planegraph_relaxed];
  BY(MESON_TAC[])  
  ]);;
  (* }}} *)

let subdivFace0_induct = prove_by_refinement(
  `!B vs g f u n.  ((!f' g. B g ==> B(makeFaceFinal f' g)) /\ (!g u v f'' n .
        B g /\ (~(n=0) \/  ~(nextVertex f'' u = v)) ==> 
    (let ws = upt (countVertices g) (countVertices g + n) in
     let (f1,f2,g') = splitFace g u v f'' ws in B g'))) ==>
    (B g ==> (B(subdivFace0 g f u n vs)))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC;
    ASM_REWRITE_TAC[subdivFace0];
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[subdivFace0];
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT LET_TAC;
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  FIRST_X_ASSUM_ST `makeFaceFinal` (C INTRO_TAC [`g'`;`f2`;`v`;`0`]);
  ASM_REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`g`;`u`;`v`;`f`;`n`]);
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  LET_TAC;
  ASM_REWRITE_TAC[];
  LET_TAC;
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let subdivFace0_induct = prove_by_refinement(
  `!B vs g f u n.  ((!f' g. B g ==> B(makeFaceFinal f' g)) /\ (!g u v f'' n .
        B g /\ 
	(~(n=0) \/  ~(nextVertex f'' u = v)) ==> 
    (let ws = upt (countVertices g) (countVertices g + n) in
     let (f1,f2,g') = splitFace g u v f'' ws in B g'))) ==>
    (B g ==> (B(subdivFace0 g f u n vs)))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC;
    ASM_REWRITE_TAC[subdivFace0];
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[subdivFace0];
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT LET_TAC;
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  FIRST_X_ASSUM_ST `makeFaceFinal` (C INTRO_TAC [`g'`;`f2`;`v`;`0`]);
  ASM_REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`g`;`u`;`v`;`f`;`n`]);
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  LET_TAC;
  ASM_REWRITE_TAC[];
  LET_TAC;
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let nonFinals_subdivFace0_induct = prove_by_refinement(
  `!B vs g f u n.  ((!f' g. B g ==> B(makeFaceFinal f' g)) /\ (!g u v f'' n .
        B g /\ MEM f'' (nonFinals g) /\ (~(n=0) \/  ~(nextVertex f'' u = v)) ==> 
    (let ws = upt (countVertices g) (countVertices g + n) in
     let (f1,f2,g') = splitFace g u v f'' ws in B g'))) ==>
    (B g /\ MEM f (nonFinals g) ==> (B(subdivFace0 g f u n vs)))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC;
    ASM_REWRITE_TAC[subdivFace0];
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[subdivFace0];
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT LET_TAC;
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  FIRST_X_ASSUM_ST `makeFaceFinal` (C INTRO_TAC [`g'`;`f2`;`v`;`0`]);
  ASM_REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`g`;`u`;`v`;`f`;`n`]);
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  LET_TAC;
  ASM_REWRITE_TAC[];
  LET_TAC;
  (REWRITE_TAC[]);
  DISCH_TAC;
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `splitFace` MP_TAC;
  REWRITE_TAC[splitFace;split_face];
  REPEAT LET_TAC;
  FIRST_X_ASSUM_ST `REVERSE` MP_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "g'";
  FIRST_X_ASSUM_ST `nonFinals` MP_TAC;
  REWRITE_TAC[nonFinals];
  REWRITE_TAC[MEM_FILTER];
  REPEAT WEAKER_STRIP_TAC;
  CONJ_TAC;
    EXPAND_TAC "f2";
    EXPAND_TAC "f2'";
    BY(REWRITE_TAC[type_face_SND]);
  REWRITE_TAC[faces_graph];
  FULL_EXPAND_TAC "f2";
  REWRITE_TAC[MEM_APPEND];
  DISJ1_TAC;
  FULL_EXPAND_TAC "fs";
  MATCH_MP_TAC MEM2_replace;
  BY(ASM_REWRITE_TAC[MEM])
  ]);;
  (* }}} *)

let MEM_generatePolygon = prove_by_refinement(
  `!i v f g g'. MEM g' (generatePolygon i v f g) ==> (?e vs.
     MEM e (enumerator i (LENGTH (FST f))) /\
     ~containsDuplicateEdge g f v e /\
     vs = indexToVertexList f v e /\
     g' = subdivFace g f vs)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[generatePolygon;LET_THM;MEM_MAP;MEM_FILTER];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let planegraph_all_nonempty = prove_by_refinement(
 `!g. planegraph_relaxed g  ==> all (\(l:(num)list). ~(l = [])) (fgraph g)`,
  (* {{{ proof *)
  [
  MATCH_MP_TAC planegraph_relaxed_induct;
  REWRITE_TAC[all_nonempty_seed;LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  COND_CASES_TAC;
    BY(REWRITE_TAC[]);
  DISCH_THEN (MP_TAC o (MATCH_MP MEM_generatePolygon));
  REWRITE_TAC[subdivFace];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM SUBST1_TAC;
  INTRO_TAC subdivFace0_induct [`(all (\ (l:(num)list). ~(l = []))) o fgraph`;`TL vs`;`g`;`(minimalFace (nonFinals g))`;`the (HD vs)`;`0`];
  REWRITE_TAC[o_THM];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ASM_REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  REWRITE_TAC[fgraph_makeFaceFinal];
  REPEAT (FIRST_X_ASSUM kill);
  REPEAT WEAKER_STRIP_TAC;
  REPEAT LET_TAC;
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[splitFace;split_face];
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  EXPAND_TAC "g'";
  REWRITE_TAC[fgraph];
  REWRITE_TAC[faces_graph];
  REWRITE_TAC[MAP_APPEND];
  REWRITE_TAC[APPEND_cat;Seq.all_cat];
  REWRITE_TAC[MAP];
  FIRST_X_ASSUM_ST `Face` MP_TAC;
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  CONJ2_TAC;
    REWRITE_TAC[Seq.all];
    ASM_REWRITE_TAC[];
    TYPIFY `~(FST (Face (APPEND (REVERSE ws) f1'') F) = [])` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[]);
    REWRITE_TAC[vertices_face_FST];
    REWRITE_TAC[APPEND_EQ_NIL];
    EXPAND_TAC "f1''";
    REWRITE_TAC[APPEND_EQ_NIL];
    BY(MESON_TAC[NOT_CONS_NIL]);
  COMMENT "last case";
  FULL_EXPAND_TAC "f2";
  FULL_EXPAND_TAC "f2'";
  FULL_EXPAND_TAC "f1";
  FULL_EXPAND_TAC "f1'";
  FULL_EXPAND_TAC "fs";
  FULL_EXPAND_TAC "ws";
  FULL_EXPAND_TAC "f2''";
  REWRITE_TAC[GSYM Seq.map_MAP];
  REWRITE_TAC[GSYM Seq.allP];
  REWRITE_TAC[Seq.map_MAP;MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `MEM` MP_TAC;
  DISCH_THEN (MP_TAC o (MATCH_MP MEM_replace));
  REWRITE_TAC[MEM];
  DISCH_THEN DISJ_CASES_TAC;
    FIRST_X_ASSUM_ST `all` MP_TAC;
    REWRITE_TAC[fgraph];
    REWRITE_TAC[GSYM Seq.map_MAP;GSYM Seq.allP];
    REWRITE_TAC[Seq.map_MAP;MEM_MAP];
    BY(REPLICATE_TAC 3 (FIRST_X_ASSUM MP_TAC) THEN MESON_TAC[]);
  FIRST_X_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "x'";
  FIRST_X_ASSUM kill;
  FIRST_X_ASSUM_ST `upt` MP_TAC;
  REWRITE_TAC[vertices_face_FST];
  ASM_REWRITE_TAC[];
  ONCE_REWRITE_TAC[EQ_SYM_EQ];
  REWRITE_TAC[APPEND_EQ_NIL];
  BY(REWRITE_TAC[NOT_CONS_NIL])
]);;
  (* }}} *)

(* mem_minimalFace_nonFinals was here *)

let flatten_partition0 = prove_by_refinement(
  `!n r a. flatten(partition_into_atom0 n a r) = cat (rev r) (flatten a)`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC THEN REWRITE_TAC[partition_into_atom0];
    BY(REWRITE_TAC[rev0;Seq.flatten0;Seq.cat0s]);
  GEN_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[Seq.flatten_cons;Seq.flatten0;Seq.cats0];
    BY(REWRITE_TAC[Seq.rev_cons;Seq.cats1]);
  COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    REWRITE_TAC[Seq.flatten_cons;Seq.rev_cons;GSYM Seq.cats1];
    REWRITE_TAC[GSYM Seq.catA];
    AP_TERM_TAC;
    REWRITE_TAC[Seq.cat1s];
    REWRITE_TAC[Seq.cat1s];
    ONCE_REWRITE_TAC[GSYM Seq.cat1s];
    REWRITE_TAC[GSYM Seq.catA];
    AP_TERM_TAC;
    REWRITE_TAC[Seq.flatten_cons];
    REWRITE_TAC[GSYM Seq.flatten_cons];
    BY(ASM_MESON_TAC[CONS_HD_TL]);
  REWRITE_TAC[GSYM Seq.flatten_cons];
  REWRITE_TAC[Seq.rev_cons;GSYM Seq.cats1];
  ONCE_REWRITE_TAC[Seq.flatten_cons];
  ONCE_REWRITE_TAC[GSYM Seq.catA];
  AP_TERM_TAC;
  BY(REWRITE_TAC[Seq.flatten_cons])
  ]);;
  (* }}} *)

let flatten_partition = prove_by_refinement(
  `!n r. flatten (partition_into_atom n r) = r`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[partition_into_atom;flatten_partition0;Seq.flatten0;Seq.cats0;Seq.revK])
  ]);;
  (* }}} *)

(* was uniq_partition0 *)

let nonnil_partition0 = prove_by_refinement(
  `!n r a. all (\c. ~(c = [])) a ==>
    all (\c. ~(c = [])) (partition_into_atom0 n a r)`,
  (* {{{ proof *)
  [
 GEN_TAC THEN LIST_INDUCT_TAC THEN ASM_REWRITE_TAC[partition_into_atom0];
  REPEAT WEAKER_STRIP_TAC;
  COND_CASES_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(REWRITE_TAC[Seq.all;NOT_CONS_NIL]);
  COND_CASES_TAC THEN (FIRST_X_ASSUM MATCH_MP_TAC) THEN ASM_REWRITE_TAC[Seq.all;NOT_CONS_NIL];
  BY(ASM_MESON_TAC[CONS_HD_TL;Seq.all])
  ]);;
  (* }}} *)

let nonnil_partition = prove_by_refinement(
  `!n r. all (\c. ~(c = [])) (partition_into_atom n r)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[partition_into_atom];
  REPEAT WEAKER_STRIP_TAC THEN MATCH_MP_TAC nonnil_partition0;
  BY(REWRITE_TAC[Seq.all])
  ]);;
  (* }}} *)

 end;;


load_end __FILE__;;