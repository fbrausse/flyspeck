open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

 (* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Tame Hypermap                                           *)
(* Lemma:  AUQTZYZ_list                                                            *)
(* Author:  Thomas Hales     *)
(* Date: March 17, 2014                                                *)
(* ========================================================================== *)

(* module Auqtzyz_list = struct *)

open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Hypermap;;


let AUQTZYZ_list = prove_by_refinement(
  `!L (f:(A#A)list).  good_list L /\ good_list_nodes L /\
    is_restricted (hypermap_of_list L) /\ 
    MEM f (list_of_faces L)  ==>
    (?r.  normal_list L [f;r] /\ 
       dih2k_list (quotient_list L [f;r]))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `d = HD ( f)`;
  TYPIFY `~(f = [])` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `MEM` MP_TAC;
    REWRITE_TAC[List_hypermap.list_of_faces];
    REWRITE_TAC[MEM_MAP];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `list_parts` MP_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[List_hypermap.list_pairs_empty];
    BY(ASM_MESON_TAC[good_list;Seq.allP]);
  TYPIFY `MEM d f` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[MEM_HD]);
  INTRO_TAC Auqtzyz.AUQTZYZ [`hypermap_of_list L`;`d`;`loop_of_face (hypermap_of_list L) d`];
  ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
  TYPIFY `MEM d (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC List_hypermap.mem_find_face_nonempty;
    REWRITE_TAC[List_hypermap.find_face];
    CONJ_TAC;
      BY(ASM_MESON_TAC[good_list]);
    MATCH_MP_TAC List_hypermap.mem_find_list;
    REWRITE_TAC[Seq2.mem_flatten];
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `k = sizel f`;
  TYPED_ABBREV_TAC `n = CARD (dart_of_loop L2)`;
  TYPED_ABBREV_TAC `qH = quotient (hypermap_of_list L)      {loop_of_face (hypermap_of_list L) d, L2}`;
  TYPIFY `CARD (face (hypermap_of_list L) d) = k` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_SIMP_TAC[List_hypermap.card_face_of_list];
    INTRO_TAC List_hypermap.find_face_eq [`L`;`d`;`f`];
    ASM_SIMP_TAC[];
    BY(ASM_MESON_TAC[good_list]);
  TYPIFY `uniq (list_of_darts L) /\ uniq f` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[good_list;List_hypermap.uniq_face]);
  TYPIFY `!x. MEM x f ==> MEM x (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.list_of_darts_alt;Seq2.mem_flatten];
    BY(ASM_MESON_TAC[]);
  TYPIFY `final_list L f` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC final_list_face;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `dart_of_loop (loop_of_list f) = set_of_list f` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[dart_of_loop_of_list]);
  TYPIFY `loop_of_face (hypermap_of_list L) d = loop_of_list f` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC loop_of_face_list [`L`;`f`;`d`];
    BY(ASM_REWRITE_TAC[]);
  REPEAT (FIRST_X_ASSUM_ST `{x,y}` MP_TAC) THEN ASM_REWRITE_TAC[];
  REPLICATE_TAC 2 DISCH_TAC;
  FIRST_X_ASSUM_ST `complement` kill;
  TYPIFY `~(k=0)` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `CARD` kill;
    FULL_EXPAND_TAC "k";
    BY(ASM_REWRITE_TAC[Seq.size_eq0]);
  COMMENT "1. pick out distinguished dart in second face";
  TYPIFY `?d'. d' IN dart_of_loop L2 /\ d' IN node (hypermap_of_list L) d` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC (GEN_ALL Wrgcvdr_cizmrrh.DIH_IMP_EVERY_NODE_INTER_FACE) [`k`;`qH`];
    FIRST_X_ASSUM_ST `dih2k` MP_TAC;
    ASM_SIMP_TAC[];
    DISCH_TAC;
    TYPIFY `?a. a IN (dart_of_loop L2)` (C SUBGOAL_THEN MP_TAC);
      BY(MESON_TAC[Hypermap.lemma_card_dart_of_loop;EXTENSION;NOT_IN_EMPTY]);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [ `atom (hypermap_of_list L) (loop_of_list f) d`;`atom (hypermap_of_list L) L2 a`]);
    REWRITE_TAC[SUBSET;IN_INSERT;NOT_IN_EMPTY];
    ANTS_TAC;
      FULL_EXPAND_TAC "qH";
      REPEAT STRIP_TAC THEN ASM_SIMP_TAC[lemma_quotient;atoms_of_family;IN_ELIM_THM;IN_INSERT;NOT_IN_EMPTY;in_dart_of_loop];
        BY(ASM_MESON_TAC[IN_SET_OF_LIST]);
      BY(ASM_MESON_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `d':A#A->bool` (RENAME_TAC "atm");
    INTRO_TAC lemma_quotient [`hypermap_of_list L`;`{loop_of_list f,L2}`];
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC lemmaQF [`hypermap_of_list L`;`{loop_of_list f,L2}`;`L2`;`a`];
    ASM_REWRITE_TAC[in_dart_of_loop;IN_INSERT];
    REWRITE_TAC[Auqtzyz.atoms_of_loop_rep];
    REWRITE_TAC[EXTENSION;IN_ELIM_THM];
    DISCH_THEN (C INTRO_TAC [`atm`]);
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `atom (hypermap_of_list L) L2 x = atm` (C SUBGOAL_THEN ASSUME_TAC);
      BY(REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN SET_TAC[]);
    FULL_EXPAND_TAC "atm";
    POP_ASSUM kill;
    FIRST_X_ASSUM MP_TAC;
    FIRST_X_ASSUM kill;
    REWRITE_TAC[in_dart_of_loop];
    TYPIFY `x` (RENAME_TAC "d'");
    DISCH_TAC;
    TYPIFY `d'` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    MATCH_MP_TAC Hypermap.lemma_in_node3;
    TYPIFY `{loop_of_list f,L2}` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    REPEAT (GMATCH_SIMP_TAC Hypermap.unique_atom_choice);
    TYPIFY `loop_of_list f` EXISTS_TAC;
    ASM_REWRITE_TAC[IN_INSERT;in_dart_of_loop;IN_SET_OF_LIST];
    TYPIFY `L2` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[Hypermap.darts_of_family;IN_UNIONS;IN_ELIM_THM;IN_INSERT];
    TYPIFY `dart_of_loop (loop_of_list f)` EXISTS_TAC;
    BY(ASM_MESON_TAC[IN_SET_OF_LIST]);
  FIRST_X_ASSUM MP_TAC;
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "end pick out distinguished dart";
  TYPED_ABBREV_TAC `last_d' = head_of_atom (hypermap_of_list L) {loop_of_list f,L2} d'`;
  INTRO_TAC loop_of_list_surj2 [`L2`;`last_d'`];
  ASM_REWRITE_TAC[];
  INTRO_TAC change_to_margin [`hypermap_of_list L`;`{loop_of_list f,L2}`;`d'`;`L2`];
  ASM_REWRITE_TAC[in_dart_of_loop;IN_INSERT];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC Hypermap.lemma_atom_sub_loop [`hypermap_of_list L`;`L2`;`d'`];
  FIRST_X_ASSUM_ST `tail_of_atom` kill;
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[in_dart_of_loop]);
  DISCH_TAC;
  TYPIFY `last_d' IN atom (hypermap_of_list L) L2 last_d'` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[atom_reflect]);
  TYPIFY `last_d' IN dart_of_loop L2` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REPLICATE_TAC 5 (FIRST_X_ASSUM MP_TAC) THEN SET_TAC[]);
  FIRST_X_ASSUM_ST `LAST` MP_TAC;
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `r` EXISTS_TAC;
  FULL_EXPAND_TAC "L2";
  COMMENT "end construction of d' and last_d'";
  COMMENT "normal list";
  COMMENT "all non nil";
  TYPIFY `all (\s. ~(s = [])) [f;r]` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[GSYM Seq.allP;MEM];
    BY(REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[] THEN POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[]);
  COMMENT "uniq flatten";
  TYPIFY `~(loop_of_list f = loop_of_list r)` (C SUBGOAL_THEN ASSUME_TAC);
    DISCH_TAC;
    INTRO_TAC dih2k_quotient_card_NF [`hypermap_of_list L`;`{loop_of_list f,loop_of_list r}`;`d`];
    ASM_REWRITE_TAC[];
    REWRITE_TAC[SING];
    DISCH_THEN MP_TAC THEN ANTS_TAC;
      BY(FIRST_X_ASSUM_ST `dih2k` MP_TAC THEN ASM_REWRITE_TAC[]);
    ASM_REWRITE_TAC[];
    BY(SET_TAC[]);
  TYPIFY `uniq (flatten [f;r])` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[Seq.flatten_cons;Seq.flatten0;Seq.cats0;Seq.cat_uniq];
    REWRITE_TAC[GSYM Seq.hasP;NOT_EXISTS_THM];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `is_normal` MP_TAC;
    REWRITE_TAC[is_normal];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `L = L'` (C INTRO_TAC [`loop_of_list f`;`loop_of_list r`;`x`]);
    BY(ASM_SIMP_TAC[IN_INSERT;in_dart_of_loop;in_dart_loop_of_list]);
  COMMENT "loop_list";
  INTRO_TAC is_normal_loop_list [`L`;`[f;r]`];
  ASM_REWRITE_TAC[];
  TYPIFY `all uniq [f;r]` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_REWRITE_TAC[GSYM Seq.allP;MEM];
    BY(ASM_MESON_TAC[]);
  TYPIFY `loop_family_of_list [f;r] = {loop_of_list f,loop_of_list r}` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[loop_family_of_list;upper_case;MAP;set_of_list]);
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  COMMENT "is_normal_nodal";
  INTRO_TAC is_normal_nodal [`L`;`[f;r]`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  COMMENT "f_last";
  INTRO_TAC Hypermap.value_loop_map_of_head_of_atom [`hypermap_of_list L`;`{loop_of_list f,loop_of_list r}`;`loop_of_list r`;`d'`];
  ASM_REWRITE_TAC[IN_INSERT;in_dart_of_loop];
  ASM_SIMP_TAC[loop_map_next_el];
  GMATCH_SIMP_TAC face_map_list;
  ASM_REWRITE_TAC[];
  FULL_EXPAND_TAC "last_d'";
  TYPIFY `MEM (LAST r) r` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEM_LAST;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `MEM (LAST r) (list_of_darts L)` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `loop_list` MP_TAC;
    REWRITE_TAC[GSYM Seq.allP;loop_list;MEM];
    BY(POP_ASSUM MP_TAC THEN MESON_TAC[]);
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  SUBCONJ_TAC;
    REWRITE_TAC[normal_list];
    ASM_REWRITE_TAC[];
    ASM_REWRITE_TAC[GSYM Seq.allP;MEM];
    REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[];
      MATCH_MP_TAC final_list_f_last;
      BY(ASM_REWRITE_TAC[]);
    REWRITE_TAC[f_last];
    BY(ASM_REWRITE_TAC[]);
  DISCH_TAC;
  COMMENT "dih2k";
  REWRITE_TAC[dih2k_list;quotient_list;core_list];
  INTRO_TAC good_face_rep [`L`;`f`];
  ANTS_TAC;
    FIRST_X_ASSUM_ST `is_restricted` MP_TAC;
    BY(ASM_SIMP_TAC[is_restricted]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `f0` EXISTS_TAC;
  ASM_REWRITE_TAC[upper_case;MAP;CONS_11];
  TYPED_ABBREV_TAC `r0 = MAP (\x. FST (HD x)) (parts L r)`;
  REWRITE_TAC[lower_case];
  SUBCONJ_TAC;
    GMATCH_SIMP_TAC final_list_parts;
    ASM_REWRITE_TAC[];
    nCONJ_TAC 1;
      BY(FIRST_X_ASSUM_ST `is_restricted` MP_TAC THEN MESON_TAC[is_restricted]);
    nCONJ_TAC 2;
      REWRITE_TAC[upper_case;GSYM MAP_o];
      FULL_EXPAND_TAC "f0";
      MATCH_MP_TAC MAP_EQ;
      BY(REWRITE_TAC[lower_case;GSYM Seq.allP;HD;o_THM]);
    POP_ASSUM SUBST1_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[List_hypermap.list_of_darts_alt];
    REWRITE_TAC[GSYM Seq.allP;Seq2.mem_flatten];
    FIRST_X_ASSUM_ST `MEM f (list_of_faces L)` MP_TAC;
    BY(MESON_TAC[]);
  DISCH_TAC;
  MATCH_MP_TAC e_list_pairs_rev;
  (ASM_REWRITE_TAC[]);
  COMMENT "LAST 3 subgoals. e_list_pairs_rev";
  TYPIFY `is_edge_nondegenerate (hypermap_of_list L) /\ all uniq L` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `is_restricted` MP_TAC;
    BY(ASM_MESON_TAC[is_restricted;simple_hypermap_uniq]);
  COMMENT "1. size subgoal";
  SUBCONJ_TAC;
    FULL_EXPAND_TAC "r0";
    FULL_EXPAND_TAC "f0";
    REWRITE_TAC[lower_case;Seq.size_map];
    REPEAT (GMATCH_SIMP_TAC (GSYM card_atoms_of_loop));
    CONJ_TAC;
      TYPIFY `[f;r]` EXISTS_TAC;
      BY(ASM_REWRITE_TAC[MEM]);
    CONJ_TAC;
      TYPIFY `[f;r]` EXISTS_TAC;
      BY(ASM_REWRITE_TAC[MEM]);
    REPEAT (GMATCH_SIMP_TAC (GSYM Hypermap.lemmaQF));
    TYPIFY `{loop_of_list f,loop_of_list r}` EXISTS_TAC;
    ASM_REWRITE_TAC[IN_ELIM_THM;IN_INSERT;in_dart_of_loop];
    TYPIFY `LAST r` EXISTS_TAC;
    ASM_SIMP_TAC[in_dart_loop_of_list];
    GEXISTL_TAC [`{loop_of_list f,loop_of_list r}`;`d`];
    ASM_SIMP_TAC[IN_ELIM_THM;IN_INSERT;in_dart_of_loop;in_dart_loop_of_list;IN_SET_OF_LIST];
    INTRO_TAC dih2k_card_face [`k`;`qH`];
    DISCH_THEN (REPEAT o GMATCH_SIMP_TAC);
    FIRST_X_ASSUM_ST `dih2k` MP_TAC THEN ASM_SIMP_TAC[];
    FULL_EXPAND_TAC "qH";
    DISCH_TAC;
    ASM_SIMP_TAC[lemma_quotient];
    INTRO_TAC lemma_in_quotient [`hypermap_of_list L`;`{loop_of_list f,loop_of_list r}`];
    DISCH_THEN (REPEAT o GMATCH_SIMP_TAC);
    BY(ASM_SIMP_TAC[IN_INSERT;in_dart_of_loop;in_dart_loop_of_list]);
  DISCH_TAC;
  COMMENT "3. HD-LAST";
  SUBCONJ2_TAC;
    FIRST_X_ASSUM_ST `map` kill;
    FULL_EXPAND_TAC "f0";
    FULL_EXPAND_TAC "r0";
    GMATCH_SIMP_TAC HD_MAP;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC LAST_MAP;
    SUBCONJ_TAC;
      POP_ASSUM MP_TAC;
      REWRITE_TAC[Seq.size_map;lower_case];
      REWRITE_TAC[GSYM Seq.size_eq0];
      DISCH_THEN (SUBST1_TAC o GSYM);
      BY(ASM_REWRITE_TAC[Seq.size_eq0]);
    DISCH_TAC;
    TYPIFY `MEM (LAST (parts L r)) (parts L r)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(POP_ASSUM MP_TAC THEN SIMP_TAC[MEM_LAST]);
    INTRO_TAC parts_fst [`L`;`[f;r]`;`r`;`LAST (parts L r)`;`LAST r`];
    ASM_SIMP_TAC[MEM];
    ANTS_TAC;
      MATCH_MP_TAC MEM_LAST_PARTS;
      BY(ASM_REWRITE_TAC[]);
    DISCH_THEN (SUBST1_TAC o GSYM);
    FIRST_X_ASSUM_ST `head_of_atom` MP_TAC;
    DISCH_THEN (fun t -> REPEAT (POP_ASSUM MP_TAC) THEN SUBST1_TAC (GSYM t));
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `head_of_atom (hypermap_of_list L) {loop_of_list f,loop_of_list r} d'  IN (node (hypermap_of_list L) d')` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[lemma_atom_sub_node;SUBSET]);
    TYPIFY `node (hypermap_of_list L) d = node (hypermap_of_list L) d'` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[lemma_node_identity]);
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    INTRO_TAC List_hypermap.fst_node_hypermap_of_list [`L`];
    ASM_REWRITE_TAC[];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_MESON_TAC[]);
  DISCH_TAC;
  (COMMENT "2. e_list sym");
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "r0";
  INTRO_TAC parts_list_pairs [`L`;`[f;r]`;`r`];
  ASM_REWRITE_TAC[MEM];
  DISCH_THEN SUBST1_TAC;
  MATCH_MP_TAC e_list_on_normal2;
  TYPIFY `f` EXISTS_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

 (* end;; *)


load_end __FILE__;;