(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Aq9= struct

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;


open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;
open Pbflhet;;
open Kbwpbhq;;
open Hojodcm;;
open Aq1;;
open Aq23;;
open Aq4;;


let r_not_eq_snd_split_norm_v0=prove_by_refinement( 
`!L N r x:A#A.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r)
==> ~(r =
   SND
   (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)
   (prev_el r (l'z L N r x))))`,
[
REPEAT GEN_TAC
THEN STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN STRIP_TAC
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(15-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(27-15)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`d=((next_el f) POWER (indexf w (ytrans L N r x 0) f +1) ) w`
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`;`x`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`f`;`indexf w (ytrans L N r x 0) f + 1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`w`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<c==> a+1<c/\ a<=b/\ a+1<= b`)[`indexf w y f`;`indexf w z f`;` sizel f`]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`indexf w (ytrans L N r x 0) f + 1`;`w`;`d`;`f`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`d`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN DICH_TAC(42-34)
THEN ASM_REWRITE_TAC[ARITH_RULE`0<1`];


MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`indexf y z f`];

MRESA_TAC Tame_list.indexf0[`y`;`z`;`f`];

MRESA_TAC Tame_list.indexf1[`y`;`z`;`f`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[ARITH_RULE`a+1=SUC b<=> a=b`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`f`]
THEN MRESAL_TAC(SET_RULE`!a. ~a\/ a`)[`(betwn f y z)=[]`][List_hypermap.mem_not_nil];


MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`x'`;`z`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;

MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN REWRITE_TAC[APPEND_NIL]
THEN STRIP_TAC
THEN ONCE_REWRITE_TAC[SET_RULE`a=b<=>b=a`]
THEN STRIP_TAC;

MRESA_TAC Ncvibwu.next_el_last_hd[`y`;`z`;`(betwn r z y)`]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`];


STRIP_TAC
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESAL_TAC betwn_not_in_rtrans[`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans]
THEN DICH_TAC 0
THEN MATCH_MP_TAC Ssrbool.contraNN
THEN RESA_TAC
THEN POP_ASSUM( fun th-> ONCE_REWRITE_TAC[th;])
THEN ASM_REWRITE_TAC[MEM_APPEND]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
]);;


let r_not_eq_fst_split_norm_v0=prove_by_refinement( 
`!L N r x:A#A.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r)
==> ~(r =
   FST
   (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)
   (prev_el r (l'z L N r x))))`,
[
REPEAT GEN_TAC
THEN STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN STRIP_TAC
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(15-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(27-15)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`d=((next_el f) POWER (indexf w (ytrans L N r x 0) f +1) ) w`
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`;`x`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`f`;`indexf w (ytrans L N r x 0) f + 1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`w`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<c==> a+1<c/\ a<=b/\ a+1<= b`)[`indexf w y f`;`indexf w z f`;` sizel f`]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`indexf w (ytrans L N r x 0) f + 1`;`w`;`d`;`f`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`d`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN DICH_TAC(42-34)
THEN ASM_REWRITE_TAC[ARITH_RULE`0<1`];



MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`indexf y z f`];


MRESA_TAC Tame_list.indexf0[`y`;`z`;`f`];

MRESA_TAC Tame_list.indexf1[`y`;`z`;`f`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[ARITH_RULE`a+1=SUC b<=> a=b`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`f`]
THEN MRESAL_TAC(SET_RULE`!a. ~a\/ a`)[`(betwn f y z)=[]`][List_hypermap.mem_not_nil];


MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`x'`;`z`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;


MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN REWRITE_TAC[APPEND;REVERSE;Seq.map;Seq.flatten0]
THEN STRIP_TAC
THEN ONCE_REWRITE_TAC[SET_RULE`a=b<=>b=a`]
THEN STRIP_TAC;



MRESAL_TAC Ncvibwu.next_el_last_hd[`z1`;`next_el r y `;`(betwn r (next_el r y ) z1)`][APPEND]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`];



STRIP_TAC
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESAL_TAC betwn_not_in_fst_rtrans[`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans];



STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th]);



REWRITE_TAC[MEM_MAP;MEM_APPEND;GSYM Tame_list.lower_case]
THEN ASM_REWRITE_TAC[Seq.mem_rev;Tame_list.REVERSE_rev;Seq2.mem_flatten;MEM_MAP;Seq.map_MAP]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN GABBREV_TAC`j=PRE (sizel (filter (MEM (FST d)) L))`
THEN GEXISTS_TAC`((n_list L) POWER j) d`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;



MATCH_MP_TAC(SET_RULE`A==> A\/B\/C\/D`)
THEN GEXISTS_TAC`MAP (\i. (n_list L POWER i) d)
          (upt 1 (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;


GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`];


REWRITE_TAC[MEM_MAP;Tame_list.upt_rec;GSYM Tame_list.lower_case]
THEN REWRITE_TAC[Tame_list.lower_case];

REWRITE_TAC[MEM_MAP;Tame_list.upt_rec;GSYM Tame_list.lower_case]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN GEXISTS_TAC`j`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN DICH_ASM_TAC(46-5)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`];

MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(59-53)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face]
THEN MRESA_TAC(ARITH_RULE`!a. 2<=a==> 0<a`)[`sizel (filter (MEM (FST d)) L)`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`sizel (filter (MEM (FST d)) L)`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MRESA_TAC (ARITH_RULE`!a. 2<= SUC a==> 1<= a`)[`j`]
THEN SYM_DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_list.upt_rec;MEM_APPEND;Seq.mem_seq1;];


MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESAL_TAC Lebhirj.FST_N_LIST_POWER[`L`;`j`;`d`][List_hypermap.dart_in_face]

]);;


let r_not_eq_split_norm_v0=prove_by_refinement( 
`!L N N' r s x:A#A.
  good_list L /\ good_list_nodes L /\
  ntrans L N r x 1 = N' /\
  marked_list L N r x /\ MEM s N' /\ MEM s N/\
~(final_list L r)
==> ~(s=r)`,
[
REPEAT RESA_TAC
THEN DICH_TAC 3
THEN EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC;

MRESA_TAC NOT_MEM_REPLACE[`r`;`[SND
        (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)
        (prev_el r (l'z L N r x)))]`;`N`];


DICH_ASM_TAC (9-5)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(24-18)[Tame_defs2.normal_list]
THEN MRESA_TAC List_hypermap.uniq_flatten[`N`];


REWRITE_TAC[Seq.mem_seq1]
THEN MATCH_MP_TAC r_not_eq_snd_split_norm_v0
THEN ASM_REWRITE_TAC[];

DICH_TAC 0
THEN REWRITE_TAC[]
THEN MATCH_MP_TAC r_not_eq_fst_split_norm_v0
THEN ASM_REWRITE_TAC[];
]);;




let eq_sizel_gt_1=prove(`uniq r ==> (1< sizel r <=> ?a b. MEM a r /\ MEM b r/\ ~(a=b))`,

REPEAT RESA_TAC
THEN EQ_TAC
THENL[
STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a. 1<a==> 0<a`)[`sizel r`]
THEN MRESA_TAC Pwssrat.sizel0_not_nil[`r`]
THEN GEXISTS_TAC`HD r`
THEN MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC 4
THEN DICH_TAC 3
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[HD;Seq.uniq;Seq.size_cons;MEM;ARITH_RULE`1< SUC a<=> 0<a`]
THEN CHANGE_TAC`l= TL r`
THEN RESA_TAC
THEN MRESA_TAC Pwssrat.sizel0_not_nil[`l`]
THEN RESA_TAC
THEN GEXISTS_TAC`HD l`
THEN MRESA_TAC Tame_list.MEM_HD[`l`]
THEN DICH_TAC 0
THEN DICH_TAC 1
THEN SET_TAC[];

RESA_TAC
THEN MATCH_MP_TAC Tame_list.sizel_gt_1
THEN GEXISTS_TAC`a`
THEN GEXISTS_TAC`b`
THEN ASM_REWRITE_TAC[]]);;



let sizel_gt_1_eq_exists_mem=prove_by_refinement( `
  !L N (v:A).
all uniq L /\ is_edge_nondegenerate (hypermap_of_list L)/\    good_list L /\ good_list_nodes L /\ normal_list L N /\ MEM v (flatten (quotient_list L  N))==>
(    sizel (filter (MEM v) (quotient_list L  N)) > 1
<=> ?f1 f2. ~(f1=f2) /\ MEM f1 N /\ MEM f2 N /\
MEM v (MAP FST f1) /\ MEM v (MAP FST f2))`,
[
REPEAT RESA_TAC
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.good_list_quotient[`L`;`N`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`quotient_list L N`]
THEN MRESA_TAC Seq.filter_uniq[`(quotient_list L N)`;`MEM v`]
THEN REWRITE_TAC[ARITH_RULE`a>1<=> 1<a`]
THEN ASM_SIMP_TAC[eq_sizel_gt_1;Seq.mem_filter;Tame_list.quotient_list_core;MEM_MAP]
THEN EQ_TAC
THEN RESA_TAC;

CHANGE_TAC`f1=x`
THEN CHANGE_TAC`f2=x'`
THEN GEXISTS_TAC`f1`
THEN GEXISTS_TAC`f2`
THEN ASM_REWRITE_TAC[]
THEN REPEAT STRIP_TAC;

DICH_TAC 1
THEN ASM_REWRITE_TAC[];

DICH_TAC(16-10)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.mem_core[`N`;`L`;`f1`;`v`][MEM_MAP];

DICH_TAC(16-13)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.mem_core[`N`;`L`;`f2`;`v`][MEM_MAP];

GEXISTS_TAC`core L f1`
THEN GEXISTS_TAC`core L f2`
THEN ASM_REWRITE_TAC[]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.mem_core[`N`;`L`;`f2`;`v`][MEM_MAP]
THEN MRESAL_TAC Tame_list.mem_core[`N`;`L`;`f1`;`v`][MEM_MAP];

GEXISTS_TAC`x`
THEN ASM_REWRITE_TAC[];


GEXISTS_TAC`f1`
THEN ASM_REWRITE_TAC[];

GEXISTS_TAC`x'`
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC 2
THEN RESA_TAC;

GEXISTS_TAC`f2`
THEN ASM_REWRITE_TAC[];

DICH_TAC(19-10)
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(18-8)
THEN REWRITE_TAC[Tame_list.quotient_list_core]
THEN STRIP_TAC
THEN MRESA_TAC Aq8.uniq_imp_inj[`core L`;`N`]
THEN MATCH_DICH_TAC 0
THEN ASM_REWRITE_TAC[]]);;






let CASES_CORE= prove_by_refinement(
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x
/\ MEM v (flatten (MAP (core L) (ntrans L N r x 1))) /\ l'y L r x=y /\
l'z L N r x = z/\ 
find_face L x = f==>
MEM v (flatten (MAP (core L) N))\/ MEM v ((MAP FST (betwn f y z)))`,
[

REPEAT RESA_TAC
THEN DICH_ASM_TAC (4)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(26-14)
THEN DICH_TAC(28-4)
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN RESA_TAC
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;ARITH_RULE`SUC 0=1`]
THEN RESA_TAC
THEN STRIP_TAC
THEN DICH_TAC(28-9)
THEN ASM_REWRITE_TAC[LET_THM]
THEN RESA_TAC
THEN DICH_TAC 3
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;Tame_defs2.transform_list;LET_THM]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN REWRITE_TAC[MEM_MAP;Seq.mem_cat]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN RESA_TAC
THEN CHANGE_TAC`s=x'`;



MRESAL_TAC Tame_list.MEM_replace[`s`;`r`;`[SND (split_normal_list L r (find_face L y) y z1)]`;`N`][Seq.mem_seq1;Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;];



MATCH_MP_TAC (SET_RULE`A==> A\/B`)
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[]
THEN GEXISTS_TAC`s`
THEN ASM_REWRITE_TAC[]
;


POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN DICH_TAC 0
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`betwn (find_face L y) y z = []`][Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM;LAST_CLAUSES;APPEND_NIL]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[Tame_defs2.core];



STRIP_TAC
THEN GSUBGOAL_THEN`MEM v (MAP (FST o HD) (parts L r))`ASSUME_TAC;



DICH_TAC 0
THEN REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x''`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`]
THEN GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;





EXPAND_TAC"s"
THEN REWRITE_TAC[APPEND_EQ_NIL;Ohcgkfu.sing_not_nil];



MRESAL_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND [z] (APPEND (betwn r z y) [y]))`;`p`]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x'''`
THEN THAYTHE_TAC 1[`d1`]
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;





DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d1`]
;




MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`(APPEND [z] (APPEND (betwn r z y) [y]))`;`p`;`d1`]
THEN MRESA_TAC Aq8.parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[]
;



MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN GEXISTS_TAC`(MAP (FST o HD) (parts L r))`
THEN ASM_REWRITE_TAC[]
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[];




MRESAL_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL]
THEN MRESAL_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL]
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`APPEND [z] (APPEND (betwn r z y) [y])`;`(betwn f y z)`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`f`;`y`;`z`]
THEN GSUBGOAL_THEN`~(next_el f y = f_list L (e_list y))`ASSUME_TAC
;




MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESAS_TAC F_LIST_INJ[`L`;`y`;`e_list y`][List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`y`]
;




MRESAL_TAC Tame_list.parts_cat[`L`;`(APPEND (APPEND [z] (APPEND (betwn r z y) [y])) (betwn f y z))`;
`APPEND [z] (APPEND (betwn r z y) [y])`;`(betwn f y z)`;`y`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;MAP_APPEND]
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.cat_uniq]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat]
THEN REWRITE_TAC[MEM_APPEND]
THEN RESA_TAC;








GABBREV_TAC`s1=APPEND [z] (APPEND (betwn r z y) [y])`
THEN GSUBGOAL_THEN`MEM v (MAP (FST o HD) (parts L r))`ASSUME_TAC;



DICH_TAC 1
THEN REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x''`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`]
THEN GSUBGOAL_THEN`~(s1=[])`ASSUME_TAC
;





EXPAND_TAC"s1"
THEN REWRITE_TAC[APPEND_EQ_NIL;Ohcgkfu.sing_not_nil];



MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`s1`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s1"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s1 (betwn f y z)`;`p`][MEM_APPEND]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x'''`
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;





THAYTHE_TAC(54-50)[`d1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d1`]
;




MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND s1 (betwn f y z)`;`p`;`d1`][MEM_APPEND]
THEN MRESA_TAC Aq8.parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d1`]
;



MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN GEXISTS_TAC`(MAP (FST o HD) (parts L r))`
THEN ASM_REWRITE_TAC[]
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[];



MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN DICH_TAC 0
THEN REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`p=x''`
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`(betwn f y z)`]
THEN MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND (APPEND [z] (APPEND (betwn r z y) [y])) (betwn f y z)`;`p`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_HD[`p`]
THEN THAYTHE_TAC (58-52)[`HD p`]
THEN GEXISTS_TAC`HD p`
THEN ASM_REWRITE_TAC[];



GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];



DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;




DICH_TAC (52-39)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`betwn (find_face L y) y z = []`][Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM;LAST_CLAUSES;APPEND_NIL]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.core];



REWRITE_TAC[Seq.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN STRIP_TAC
THEN DICH_TAC(53-40)
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN MRESAL_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN RESA_TAC
THEN GSUBGOAL_THEN`MEM v (MAP (FST o HD) (parts L r))`ASSUME_TAC;




DICH_TAC(0)
THEN REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x'`
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`;`p`]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x''`
THEN THAYTHE_TAC 1[`d1`]
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;



DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d1`]
;




MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`;`p`;`d1`]
THEN MRESA_TAC Aq8.parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[];



MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN GEXISTS_TAC`(MAP (FST o HD) (parts L r))`
THEN ASM_REWRITE_TAC[]
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[];




MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL]
THEN MRESAL_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL]
THEN GABBREV_TAC`g=(REVERSE
  (flatten
  (map
   (\x. map (\i. (n_list L POWER i) x)
        (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
  (betwn f y z))))`
THEN GSUBGOAL_THEN`~(g=[])` ASSUME_TAC;





DICH_TAC(39-36)
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN EXPAND_TAC"g"
THEN REWRITE_TAC[ Tame_list.lower_case;Seq.mem_rev;Seq2.mem_flatten]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`map (\i. (n_list L POWER i) d)
          (upt (SUC 0) (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;



GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
;



REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(58-6)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;



ASM_TAC
THEN REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN REPEAT RESA_TAC
THEN DICH_TAC 1
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC
THEN REWRITE_TAC[th]
THEN REPEAT STRIP_TAC
THEN MP_TAC th
THEN REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN STRIP_TAC)
THEN DICH_TAC(57-53)
THEN DICH_TAC(56-53)
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`g`;`(APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1]))`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;ARITH_RULE`SUC 0=1`]
;




GSUBGOAL_THEN`~((flatten
   (map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y z))) =[])`ASSUME_TAC
;


ONCE_REWRITE_TAC[GSYM Aq4.nil_rev]
THEN ASM_REWRITE_TAC[ GSYM Tame_list.REVERSE_rev]
;





GSUBGOAL_THEN`~(HD
        (map
         (\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
        (betwn f y z)) =
        [])` ASSUME_TAC;




MRESAL_TAC Tame_list.HD_MAP[`(betwn f y z)`;`(\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`][ Tame_list.lower_case]
THEN GABBREV_TAC`d=(HD (betwn f y z))`
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn f y z`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(65-6)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;





GSUBGOAL_THEN`~(next_el r y = f_list L (e_list (LAST g)))`ASSUME_TAC
;



EXPAND_TAC"g"
THEN REWRITE_TAC[ Tame_list.lower_case;Tame_list.LAST_rev]
THEN ASM_SIMP_TAC[Tame_list.LAST_rev]
THEN MRESA_TAC Tame_list.HD_flatten[`(map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y z))`]
THEN MRESAL_TAC Tame_list.HD_MAP[`(betwn f y z)`;`(\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`][ Tame_list.lower_case]
THEN GABBREV_TAC`d=(HD (betwn f y z))`
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn f y z`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(67-6)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN GABBREV_TAC`a=sizel (filter (MEM (FST d)) L)`
THEN MRESA_TAC Aq4.nil_upt[`a`]
THEN MRESAL_TAC Tame_list.HD_MAP[`(upt 1 (sizel (filter (\t. t = FST (HD (betwn f y z))) (flatten L))))`;`(\i. (n_list L POWER i) (HD (betwn f y z)))`][ Tame_list.lower_case]
THEN MRESA_TAC Aq4.HD_UPT[`a`]
THEN ASM_REWRITE_TAC[ARITH_RULE`1=SUC 0`;POWER;o_DEF;I_DEF]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`f`;`y`;`z`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Tame_list.f_list_ext_f_list[`L`;`y`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`y`;`L`;`SUC 0`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.n_list_ext_n_list[`(f_list_ext L y)`;`L`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`(f_list_ext L y)`;`L`;`SUC 0`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Lp_gen_theory.e_list_ext_eq_e_list[`L`;`(n_list_ext L (f_list_ext L y))`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.e_n_f_id[`L`][o_DEF;I_DEF;FUN_EQ_THM]
THEN MRESA_TAC Aq1.next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
;



DICH_TAC 0
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.parts_cat[`L`;`(APPEND g
      (APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1])))`;
`g`;`    (APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1]))`;`LAST g`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;MAP_APPEND;HD_APPEND;HD]
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.cat_uniq]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat]
THEN DICH_TAC(62-40)
THEN ASM_REWRITE_TAC[Tame_defs2.core;MAP_APPEND;MEM_APPEND]
THEN RESA_TAC;



MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN MRESA_TAC Aq8.eq_fst_betwn_rev_parts[`g`;`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN DICH_TAC(62-52)
THEN REWRITE_TAC[Seq.map_rev;Seq.rev_uniq;GSYM Seq.map_comp;o_DEF;Tame_list.lower_case]
THEN RESA_TAC
THEN DICH_TAC(62-55)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[ Tame_list.lower_case]
THEN ONCE_REWRITE_TAC[Seq.cat_uniq]
THEN RESA_TAC
THEN STRIP_TAC
THEN DICH_TAC(65-60)
THEN ASM_REWRITE_TAC[o_DEF;Tame_list.lower_case;Seq.mem_rev;Seq.mapP];





GSUBGOAL_THEN`MEM v (MAP (FST o HD) (parts L r))`ASSUME_TAC;




DICH_TAC(0)
THEN REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x'`
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND g (APPEND [y1] (APPEND (betwn r y1 z1) [z1])))`;`p`][MEM_APPEND]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x''`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y1`;`z1`]
THEN MRESAL_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;` (APPEND [y1] (APPEND (betwn r y1 z1) [z1]))`][APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN THAYTHE_TAC 0[`d1`]
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;


DICH_TAC 0
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d1`]
;





MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`;`p`;`d1`]
THEN MRESA_TAC Aq8.parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[];



MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`(APPEND g (APPEND [y1] (APPEND (betwn r y1 z1) [z1])))`;`p`;`d1`][MEM_APPEND]
THEN MRESA_TAC Aq8.parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[];




MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN GEXISTS_TAC`(MAP (FST o HD) (parts L r))`
THEN ASM_REWRITE_TAC[]
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[]]);;



let element_in_ntrans_suc=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\ 
MEM f1 N /\ ~(f1=r)
==> MEM f1 (ntrans L N r x 1)
`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC (2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-4)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC (28-16)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;ARITH_RULE`SUC 0=1`;Seq.mem_cat]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[]);;



let mem_fst_rtrans_split=prove_by_refinement(
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\ 
MEM v (MAP FST r) /\ ~(final_list L r)
==> MEM v (MAP FST (FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x))))) \/ MEM v (MAP FST (SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) )))
`,
[

REPEAT RESA_TAC
THEN DICH_ASM_TAC (2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(15-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(20-6)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC (28-16)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN REPEAT RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN DICH_TAC (37-3)
THEN REWRITE_TAC[MEM_MAP]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN MRESA_TAC Tame_list.betwn_cases[`r`;`y`;`d`;`z`];

MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN GEXISTS_TAC`y`
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1];


MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN GEXISTS_TAC`z`
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1];



MATCH_MP_TAC(SET_RULE`A==> A \/B`)
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];

DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r y z`;`d`]
THEN MRESA_TAC Aq56.case_hd_betwn_last[`d`;`r`;`y`;`z`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`y`;`z`]
THEN MRESA_TAC next_last_betwn[`r`;`y`;`z`;]
THEN MRESA_TAC Seq2.prev_next_id[`(LAST (betwn r y z))`;`r`]
THEN GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN DICH_TAC(55-52)
THEN RESA_TAC;



MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]]);;



let fst_not_eq_rtrans_split=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\ 
MEM f1 N  /\ ~(final_list L r) /\ ~(f1=r)
==> ~((FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x))))=f1)
`,

REPEAT RESA_TAC
THEN DICH_TAC 1
THEN DICH_ASM_TAC (3)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC (28-16)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN REPEAT RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN GSUBGOAL_THEN`MEM (next_el r y) f1`ASSUME_TAC
THENL[

EXPAND_TAC"f1"
THEN REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1];

MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`f1`;`r`;`N`;`next_el r y`]
]);;



let snd_not_eq_rtrans_split=prove(
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\ 
MEM f1 N  /\ ~(final_list L r) /\ ~(f1=r)
==> ~((SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) ))=f1)
`,
REPEAT RESA_TAC
THEN DICH_TAC 1
THEN DICH_ASM_TAC (3)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC (28-16)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN REPEAT RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN GSUBGOAL_THEN`MEM y f1`ASSUME_TAC
THENL[

EXPAND_TAC"f1"
THEN REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1];


MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`f1`;`r`;`N`;`y`]
]);;

let fst_is_not_eq_snd_split=prove_by_refinement(
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~(final_list L r) 
==> ~((FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x))))=(SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) )))
`,
[

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC (28-16)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Tame_list.not_betwn1[`y`;`z`;`r`]
THEN GSUBGOAL_THEN`MEM y (APPEND (APPEND [z] (APPEND (betwn r z y) [y])) (betwn f y z))`ASSUME_TAC;


REWRITE_TAC[MEM_APPEND;Seq.mem_seq1];

STRIP_TAC
THEN DICH_TAC 1
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th;])
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_list.REVERSE_rev;Seq.mem_rev]
THEN RESA_TAC;

DICH_TAC 0
THEN MRESA_TAC Aq1.node_betwn_not_in_rtrans[`f`;`y`;`z`;`y`;`L`;`N`;`r`;`x`];


POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN MRESA_TAC Tame_list.next_el_refl[`y`;`r`]
THEN DICH_TAC(39-28)
THEN DICH_TAC(38-28)
THEN ASM_REWRITE_TAC[Seq.mem_seq1];


GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];


DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`y1`;`y`;`z1`]
THEN MRESA_TAC Tame_list.indexf_prev[`y`;`y1`;`r`]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`y1`;`z1`]
THEN DICH_TAC 0
THEN ARITH_TAC;

DICH_TAC 0
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r y z = []`];

MRESA_TAC Aq4.betwn_eq_nil[`y`;`z`;`r`]
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`];


MRESA_TAC Aq23.next_last_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Seq2.prev_next_id[`(LAST (betwn r y z))`;`r`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.MEM_LAST[`(betwn r y z)`]
THEN DICH_TAC 0
THEN POP_ASSUM(fun th-> ASM_REWRITE_TAC[SYM th])]);;



let AQ9_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    all (\v. sizel (filter (MEM v) (quotient_list L  (ntrans L N r x 1))) > 1) 
    (flatten (quotient_list L  (ntrans L N r x 1)))`;;

let AQ9= prove_by_refinement( AQ9_concl,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC (0)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-4)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC (26-7)
THEN ASM_REWRITE_TAC[LET_THM;GSYM Seq.allP;Tame_list.quotient_list_core]
THEN REPEAT RESA_TAC
THEN DICH_TAC (28-13)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`v=x'`
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESA_TAC CASES_CORE[`v`;`f`;`y`;`z`;`L`;`N`;`r`;`x`];




THAYTHE_TAC(31-26)[`v`]
THEN DICH_ASM_TAC (31-3)[Hypermap.is_restricted]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC sizel_gt_1_eq_exists_mem[`L`;`N`;`v`][Tame_list.quotient_list_core]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;ARITH_RULE`SUC 0=1`]
;



ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`];


MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC sizel_gt_1_eq_exists_mem[`L`;`ntrans L N r x 1`;`v`][Tame_list.quotient_list_core];




MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`f1=r`];



DICH_TAC(51-43)
THEN RESA_TAC
THEN DICH_TAC(51-45)
THEN RESA_TAC
THEN MRESA_TAC element_in_ntrans_suc[`f2`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC mem_fst_rtrans_split[`v`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`][]
THEN MRESAL_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`][]
THEN MRESA_TAC fst_not_eq_rtrans_split[`f2`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC snd_not_eq_rtrans_split[`f2`;`L`;`N`;`r`;`x`]
;



GEXISTS_TAC`FST (split_normal_list L r (find_face L y) y z1)`
THEN GEXISTS_TAC`f2`
THEN ASM_REWRITE_TAC[]
;



GEXISTS_TAC`SND (split_normal_list L r (find_face L y) y z1)`
THEN GEXISTS_TAC`f2`
THEN ASM_REWRITE_TAC[]
;






MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`f2=r`];



DICH_TAC 1
THEN STRIP_TAC
THEN REMOVE_ASSUM_TAC
THEN DICH_TAC(51-43)
THEN RESA_TAC
THEN DICH_TAC(51-46)
THEN RESA_TAC
THEN MRESA_TAC element_in_ntrans_suc[`f1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC mem_fst_rtrans_split[`v`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`][]
THEN MRESAL_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`][]
THEN MRESA_TAC fst_not_eq_rtrans_split[`f1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC snd_not_eq_rtrans_split[`f1`;`L`;`N`;`r`;`x`]
;



GEXISTS_TAC`FST (split_normal_list L r (find_face L y) y z1)`
THEN GEXISTS_TAC`f1`
THEN ASM_REWRITE_TAC[]
;



GEXISTS_TAC`SND (split_normal_list L r (find_face L y) y z1)`
THEN GEXISTS_TAC`f1`
THEN ASM_REWRITE_TAC[]
;


MRESA_TAC element_in_ntrans_suc[`f1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC element_in_ntrans_suc[`f2`;`L`;`N`;`r`;`x`]
THEN GEXISTS_TAC`f2`
THEN GEXISTS_TAC`f1`
THEN ASM_REWRITE_TAC[]
;







MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;ARITH_RULE`SUC 0=1`]
;



DICH_TAC(32-27)
THEN ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`];





DICH_ASM_TAC (32-3)[Hypermap.is_restricted]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC sizel_gt_1_eq_exists_mem[`L`;`ntrans L N r x 1`;`v`][Tame_list.quotient_list_core]
THEN MRESAL_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`][]
THEN MRESAL_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`][]
THEN GEXISTS_TAC`FST (split_normal_list L r (find_face L y) y z1)`
THEN GEXISTS_TAC`SND (split_normal_list L r (find_face L y) y z1)`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC fst_is_not_eq_snd_split[`L`;`N`;`r`;`x`]
THEN DICH_TAC(48-31)
THEN REWRITE_TAC[MEM_MAP]
THEN STRIP_TAC
THEN CHANGE_TAC`d=x'`
THEN STRIP_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.ntrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;MEM_APPEND]
;




GEXISTS_TAC`n_list L d`
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_list.REVERSE_rev;Seq.mem_rev]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESAL_TAC Lebhirj.FST_N_LIST_POWER[`L`;`SUC 0`;`d`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face;Seq2.mem_flatten]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B\/C\/D`)
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`map (\i. (n_list L POWER i) d)
          (upt (SUC 0) (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;





GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
;




REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(58-39)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;



GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
]);;


 end;;



