open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Jcajydu= struct

  open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Hypermap;;

let JCAJYDU1 = prove_by_refinement(
  `(!L:((A->bool)list)list. 
  good_list L /\ good_list_nodes L /\
  is_restricted (hypermap_of_list L) ==>
  (?g. PlaneGraphs g /\ 
     good_graph_v4 g /\
     iso (hypermap_of_list L) (hypermap_of_list (fgraph g))))
   ==> 
   (!H:(A)hypermap. is_restricted H ==>
  (?gH. PlaneGraphs gH /\ good_graph_v4 gH /\
     iso H (hypermap_of_list (fgraph gH))))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC Rxokskc.RXOKSKC[`H`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`L`]);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[Tame_list.DAKEFCC]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `g` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[Hypermap.iso_trans])
  ]);;
  (* }}} *)

let JCAJYDU = prove_by_refinement(
  `(!Ln:((num)list)list. 
  good_list Ln /\ good_list_nodes Ln /\
  is_restricted (hypermap_of_list Ln) ==>
  (?gn. PlaneGraphs gn /\ 
     good_graph_v4 gn /\
     iso (hypermap_of_list Ln) (hypermap_of_list (fgraph gn))))
   ==> 
   (!H:(A)hypermap. is_restricted H ==>
  (?gH. PlaneGraphs gH /\ good_graph_v4 gH /\
     iso H (hypermap_of_list (fgraph gH))))`,
  (* {{{ proof *)
  [
  DISCH_TAC;
  MATCH_MP_TAC JCAJYDU1;
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC JXBJOAB [`L`];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`Ln`]);
  ANTS_TAC;
    SUBCONJ_TAC;
      BY(ASM_MESON_TAC[iso_list_good_list;iso_list_sym_nil_eq]);
    DISCH_TAC;
    SUBCONJ_TAC;
      BY(ASM_MESON_TAC[iso_list_good_list_nodes;iso_list_sym_nil_eq]);
    DISCH_TAC;
    INTRO_TAC iso_list_restricted [`L`;`Ln`];
    ASM_SIMP_TAC[];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_MESON_TAC[iso_list_sym_nil_eq]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `gn` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `iso (hypermap_of_list L) (hypermap_of_list Ln)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC GNBEVVU;
    BY(ASM_MESON_TAC[]);
  INTRO_TAC iso_trans [`hypermap_of_list L`;`hypermap_of_list Ln`;`hypermap_of_list (fgraph gn)`];
  DISCH_THEN MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

 end;;








load_end __FILE__;;