open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


(* module  Aq1= struct *)

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;


open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;
open Pbflhet;;
open Kbwpbhq;;
open Hojodcm;;


let replace_not_eq=prove(`!N. uniq N/\ ~(l=s) /\ MEM l (replace r [s] N) ==> ~(l=r)`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_defs.replace;MEM;Seq.uniq]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`h=r`][MEM_APPEND;Seq.mem_seq1;MEM]
THEN RESA_TAC
THEN DICH_TAC 5
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`r`;`l`;`t`]
THEN DICH_TAC 2
THEN RESA_TAC);;




let change_flatten_replace_filter=prove_by_refinement( 
`uniq (flatten N) /\ all (\l. ~(l = [])) N/\ MEM r N==> 
!x. (MEM x (flatten (replace r [s] N))<=> MEM x (APPEND s (filter (\d:A. ~(MEM d r)) (flatten N))))`,
[
REPEAT RESA_TAC
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_filter;Tame_list.MEM_replace;Seq2.mem_flatten]
THEN EQ_TAC
THEN RESA_TAC;

MRESAL_TAC Tame_list.MEM_replace[`l`;`r`;`[s]`;`N`][Seq.mem_seq1];

MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`s=l`]
THEN MRESA_TAC List_hypermap.uniq_flatten[`N`]
THEN MRESA_TAC replace_not_eq[`s`;`l`;`r`;`N`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`l`;`r`;`N`;`x`]
THEN MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[];

DICH_TAC 1
THEN RESA_TAC;

GEXISTS_TAC`s`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1];

GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM a b==> ~(t=b)`)[`x`;`l`;`r`]]);;


let flatten_sing=prove(`flatten [s:(A)list]=s`,
MRESAL_TAC Tame_list.concat_flatten[`s`;`[]:((A)list)list`][APPEND_NIL]);;


let MEM_NOT_MEM_FILTER=prove(`!x. ~(MEM x (filter (\d. ~MEM d h) h ))`,
REWRITE_TAC[Seq.mem_filter]
THEN SET_TAC[]);;


let filter_not_mem=prove(`(filter (\d. ~MEM d h) h )=[]`,
MRESA_TAC MEM_NOT_MEM_FILTER[`h`]
THEN MRESA_TAC List_hypermap.mem_not_nil[`(filter (\d. ~MEM d h) h )`]);;



let filter_not_mem_cat=prove(`!r. uniq (APPEND h r)==>
filter (\d. ~MEM d h) (APPEND h r)=r`,
LIST_INDUCT_TAC
THEN SIMP_TAC[APPEND_NIL;filter_not_mem]
THEN DICH_TAC 0
THEN ASM_SIMP_TAC [Seq.filter_cat;Tame_list.lower_case;Seq.cat_uniq;filter_not_mem;Seq.cat;Seq.has_cons;DE_MORGAN_THM;Seq.cons_uniq;Seq.filter_cons]);;


let filter_has_not_mem=prove(`!r. ~has (\x. MEM x h) r
==> filter (\d. ~MEM d h) r=r`,
LIST_INDUCT_TAC
THEN SIMP_TAC[Tame_list.filter_rec;Seq.has;DE_MORGAN_THM]
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC);;


let has_flatten=prove(`!t. ~has (\x. MEM x h) (flatten t) /\ MEM r t
==> ~has (\x. MEM x h) r`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;Seq.flatten_cons;Seq.has_cat;DE_MORGAN_THM]
THEN RESA_TAC
THEN DICH_TAC 3
THEN RESA_TAC);;

let has_sym1=prove(`!r. ~has (\x. MEM x h) r ==> ~has (\x. MEM x r) h`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;Seq.flatten_cons;Seq.has_cat;DE_MORGAN_THM;Seq.has;Seq.has_cons]
THENL[
ONCE_REWRITE_TAC[GSYM Seq.hasP]
THEN SET_TAC[];
RESA_TAC
THEN DICH_TAC 2
THEN DICH_TAC 0
THEN ONCE_REWRITE_TAC[GSYM Seq.hasP]
THEN RESA_TAC
THEN MATCH_MP_TAC Ssrbool.contraNN
THEN RESA_TAC
THEN DICH_TAC 1
THEN RESA_TAC
THEN GEXISTS_TAC`x`
THEN ASM_REWRITE_TAC[]]);;


let has_sym=prove(`~has (\x. MEM x h) r <=> ~has (\x. MEM x r) h`,
EQ_TAC
THEN SIMP_TAC[has_sym1]);;



let sizel_replace_filter_flatten=prove_by_refinement( 
`!N. uniq (flatten N)/\ MEM r N==>
 sizel (flatten (replace r [s] N))= sizel (APPEND s (filter (\d:A. ~(MEM d r)) (flatten N)))`,
[

LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_defs.replace;MEM;Seq.uniq;Tame_list.lower_case;Seq.size_cat;Seq.flatten_cat;Tame_list.concat_flatten;Seq.cat_uniq]
THEN RESA_TAC
THEN REWRITE_TAC[Tame_defs.replace;MEM;Seq.uniq;Tame_list.lower_case;Seq.size_cat;Seq.flatten_cat;flatten_sing;Tame_list.concat_flatten]
THEN ASM_SIMP_TAC[filter_not_mem_cat];

MRESAL_TAC filter_not_mem_cat[`h`;`flatten t`][Tame_list.lower_case;Seq.cat_uniq];
DICH_TAC 4
THEN RESA_TAC;

MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`h=r`][Seq.flatten_cat;Seq.size_cat;flatten_sing;Seq.flatten_cons;Tame_list.lower_case;Seq.filter_cat;filter_not_mem;Seq.size_nil;];

MRESAL_TAC filter_not_mem_cat[`h`;`flatten t`][Tame_list.lower_case;Seq.cat_uniq]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN RESA_TAC;

ASM_SIMP_TAC[filter_has_not_mem]
THEN ARITH_TAC;

MRESA_TAC has_flatten[`h`;`r`;`t`]
THEN MRESA_TAC filter_has_not_mem[`r`;`h`]
THEN DICH_TAC 0
THEN ONCE_REWRITE_TAC[has_sym]
THEN RESA_TAC
THEN ARITH_TAC]);;


let uniq_replace_filter_flatten=prove(`uniq (flatten N) /\ all (\l. ~(l = [])) N/\ MEM r N==> 
(uniq (flatten (replace r [s] N))<=> uniq (APPEND s (filter (\d:A. ~(MEM d r)) (flatten N))))`,
REPEAT RESA_TAC
THEN MRESA_TAC change_flatten_replace_filter[`s`;`r`;`N`]
THEN MRESA_TAC Seq.perm_uniq[`flatten (replace r [s] N)`;`(APPEND s (filter (\d:A. ~(MEM d r)) (flatten N)))`]
THEN MATCH_DICH_TAC 0
THEN MATCH_MP_TAC sizel_replace_filter_flatten
THEN ASM_REWRITE_TAC[]);;




let indexf_in_rtrans_suc_not_rtrans_new2_v0=prove(`!L N d r (x:A#A). 
 good_list L /\ good_list_nodes L/\
marked_list L N r x /\
   find_face L x=f /\
   next_el f x=w /\
~final_list L r/\
   MEM d (rtrans L N r x (SUC 0)) /\
 ~(MEM d r)
   ==> MEM d f/\
MEM d (betwn f (l'y L r x) (ztrans L N r x 0))`,

REPEAT GEN_TAC
THEN STRIP_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN DICH_ASM_TAC (7-2)[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MRESAL_TAC in_rtrans_suc_not_rtrans_new_v0[`w`;`f`;`L`;`N`;`d`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC PPLHULJ_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_ASM_TAC(23)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`y`;`d`;`z`;`f`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC (ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y f`;`indexf w z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`] 
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num . a+b=c /\ d+e=b==> e<=c`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.indexf_add_right[`w`;`d`;`z`;`f`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e f:num . a+b=c /\ d+e=b/\ f+e=c/\ 0<d /\ d<b ==> f<c/\ a<f`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`;`indexf w d  f`]
);;


let f_list_power_ytrans_not_mem_v0=prove( 
 `!L N r (x:A#A).
         good_list L /\
         good_list_nodes L /\
marked_list L N r x 
/\ ~(final_list L r)
==> (!j.  j< l'p L N r x
==> ~(MEM ((f_list L POWER (SUC j)) (ytrans L N r x 0)) r))`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC 2[Tame_defs2.marked_list;]
THEN GABBREV_TAC`y=(l'y L r x)`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC minnum_not[`l'p L N r x`;`(\p. MEM ((f_list L POWER SUC p) (l'y L r x)) (flatten N))`;`j`][GSYM Tame_defs2.l_p]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[ Tame_defs2.l_p]
THEN MATCH_MP_TAC Ssrbool.contraNN
THEN ASM_REWRITE_TAC[Seq2.mem_flatten]
THEN RESA_TAC
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
);;


let f_list_power_ytrans_not_mem_flatten_v0=prove( 
 `!L N r (x:A#A).
         good_list L /\
         good_list_nodes L /\
marked_list L N r x 
/\ ~(final_list L r)
==> (!j.  j< l'p L N r x
==> ~(MEM ((f_list L POWER (SUC j)) (ytrans L N r x 0)) (flatten N)))`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC 2[Tame_defs2.marked_list;]
THEN GABBREV_TAC`y=(l'y L r x)`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC minnum_not[`l'p L N r x`;`(\p. MEM ((f_list L POWER SUC p) (l'y L r x)) (flatten N))`;`j`][GSYM Tame_defs2.l_p]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[ Tame_defs2.l_p;POWER;o_DEF;I_DEF]
);;




let  indexf_ytrans_suc_lp_v0=  prove_by_refinement(
`!L N r (x:A#A). 
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ find_face L (ytrans L N r x 0) = L1
/\ ~(final_list L r)
==> indexf (ytrans L N r x 0) (ztrans L N r x 0) L1 =SUC(l'p L N r x)`,
[

REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC 2[Tame_defs2.marked_list;]
THEN GABBREV_TAC`y=(l'y L r x)`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN DICH_TAC (13-3)
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN RESA_TAC
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN DICH_ASM_TAC(15)[List_hypermap.good_list]
THEN MP_TAC ztran_in_face_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.uniq_find_face[`y`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.l_z;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`p=l'p L N r x`
THEN MRESAL_TAC f_list_power_next_el[`L`;`y`;`SUC p`][Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC(ARITH_RULE`!a b:num. b=a \/a<b \/ b< a`)[`sizel L1`;`SUC p`];

MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.ztrans;Tame_defs2.l_z;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_TAC 2
THEN RESA_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC next_el_sizel[`y`;`L1`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 1
THEN SIMP_TAC[POWER;o_DEF;I_DEF];


MP_TAC f_list_power_ytrans_not_mem_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`L1`;`y`]
THEN MRESA_TAC sizel0_not_nil[`L1`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`sizel L1`][ARITH_RULE`1<=a<=> 0<a`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a< SUC b==> a<b`)[`PRE (sizel L1)`;`p`]
THEN THAYTHE_TAC (32-28)[`PRE (sizel L1)`]
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`(sizel L1)`]
THEN MRESA_TAC next_el_sizel[`y`;`L1`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_TAC 0
THEN DICH_TAC 1
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th])
THEN SYM_DICH_TAC 1
THEN DICH_TAC 2
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th])
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
]);;




let betwn_not_in_rtrans=prove( `!L N r (x:A#A).
         good_list L /\
         good_list_nodes L /\
marked_list L N r x 
/\ ~(final_list L r)
/\ MEM d (betwn f (ytrans L N r x 0) (ztrans L N r x 0))
/\(find_face L x) =f
==> ~(MEM d r)`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC 3[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN GABBREV_TAC`w=   next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESAL_TAC indexf_ytrans_suc_lp_v0[`f`;`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;MEM_APPEND;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF]
THEN MRESA_TAC f_list_power_ytrans_not_mem_v0[`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN ONCE_REWRITE_TAC[ARITH_RULE`a<b<=> SUC a< SUC b`]
THEN SYM_DICH_TAC 0
THEN RESA_TAC
THEN DICH_TAC(34-4)
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf y d f`][ARITH_RULE`1<=a<=> 0<a`]
THEN GABBREV_TAC`j=PRE (indexf y d f)`
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESAL_TAC Tame_list.indexf_n[`y`;`d`;`f`][GSYM List_hypermap.dart_in_face]
THEN THAYTHEL_TAC (41-33)[`j`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`indexf y d f`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(42-37)
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]);;




let uniq_snd_split_norm=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
uniq (SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) ))`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;Ohcgkfu.uniq_sing]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN ONCE_REWRITE_TAC[GSYM Seq.hasP]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN MRESAL_TAC indexf_in_rtrans_suc_not_rtrans_new2_v0[`w`;`f`;`L`;`N`;`d`;`r`;`x`]
[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;MEM_APPEND]
THEN GSUBGOAL_THEN`MEM d r`ASSUME_TAC
THENL[


DICH_TAC 0
THEN REWRITE_TAC[GSYM Seq2.APPEND_cat;MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`];

ASM_REWRITE_TAC[]
THEN DICH_TAC 0
THEN MRESAL_TAC betwn_not_in_rtrans[`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans]]);;



let betwn_not_in_flatten=prove( 
`!L N r (x:A#A).
         good_list L /\
         good_list_nodes L /\
marked_list L N r x 
/\ ~(final_list L r)
/\ MEM d (betwn f (ytrans L N r x 0) (ztrans L N r x 0))
/\(find_face L x) =f
==> ~(MEM d (flatten N))`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC 3[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN GABBREV_TAC`w=   next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESAL_TAC indexf_ytrans_suc_lp_v0[`f`;`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;MEM_APPEND;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF]
THEN MRESA_TAC f_list_power_ytrans_not_mem_flatten_v0[`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN ONCE_REWRITE_TAC[ARITH_RULE`a<b<=> SUC a< SUC b`]
THEN SYM_DICH_TAC 0
THEN RESA_TAC
THEN DICH_TAC(34-4)
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf y d f`][ARITH_RULE`1<=a<=> 0<a`]
THEN GABBREV_TAC`j=PRE (indexf y d f)`
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESAL_TAC Tame_list.indexf_n[`y`;`d`;`f`][GSYM List_hypermap.dart_in_face]
THEN THAYTHEL_TAC (41-33)[`j`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`indexf y d f`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(42-37)
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
);;


let has_snd_norm_list_fliter=  prove_by_refinement(`  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
~has (\d. MEM d (SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) )))
  (filter (\d. ~MEM d r) (flatten N))`,
[
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;Ohcgkfu.uniq_sing]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;Seq.mem_filter]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN ONCE_REWRITE_TAC[GSYM Seq.hasP]
THEN ASM_REWRITE_TAC[Seq.mem_filter]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`;

DICH_TAC 2
THEN RESA_TAC;


DICH_TAC 2
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`];

DICH_TAC 2
THEN RESA_TAC;

DICH_TAC 1
THEN MRESAL_TAC betwn_not_in_flatten[`f`;`d`;`L`;`N`;`r`;`x`]
[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans]]);;



let next_mark_mem_r_trans_v0=prove(
`!L N r (x:A#A) f w.
         good_list L /\
         good_list_nodes L /\
                marked_list L N r x /\
                find_face L x =f/\
                next_el f x=w
                ==>  MEM w r`,
REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC 2[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`r`]
THEN DICH_ASM_TAC(21-4)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
);;


let next_r_not_eq_f_v0=prove(`!L N r x:A#A.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r) /\
l'y L r x = y /\
(find_face L x)=f
==> ~(next_el r y = next_el f y)`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC 3[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(15-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-6)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;Ohcgkfu.uniq_sing]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN GABBREV_TAC`w=next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN ASM_REWRITE_TAC[Seq.flatten_cat]
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESAL_TAC Tame_defs2.final_list[`L`;`r`][GSYM Seq.allPn]
THEN MRESA_TAC next_mark_mem_r_trans_v0[`L`;`N`;`r`;`x`;`f`;`w`]
THEN MRESA_TAC Tame_list.indexf_n[`w`;`x'`;`r`]
THEN DICH_TAC(2)
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th])
THEN RESA_TAC
THEN GSUBGOAL_THEN`(indexf w x' r) IN {m | ~(ITER (SUC (SUC m)) (next_el r) x =
                f_list L (ITER (SUC m) (next_el r) x))}`ASSUME_TAC
THENL[

REWRITE_TAC[IN_ELIM_THM]
THEN REWRITE_TAC[GSYM Tame_list.POWER_TO_ITER]
THEN GEN_REWRITE_TAC(RAND_CONV o DEPTH_CONV)[POWER;o_DEF;I_DEF]
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_TAC 0
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN ONCE_REWRITE_TAC[SET_RULE`a=b<=> b=a`]
THEN ASM_REWRITE_TAC[];


MRESAL_TAC Nuxcoea.MIN_LEAST[`{m | ~(ITER (SUC (SUC m)) (next_el r) x =
                f_list L (ITER (SUC m) (next_el r) x))}`;`(indexf w x' r)`][GSYM Tame_defs2.l_m]
THEN DICH_TAC 1
THEN REWRITE_TAC[IN_ELIM_THM;GSYM Tame_list.POWER_TO_ITER;]
THEN MRESAL_TAC Pwssrat.l_y_rep_power[`L`;`r`;`x`][GSYM Tame_list.POWER_TO_ITER;GSYM Tame_defs2.ytrans;COM_POWER;o_DEF]
THEN REWRITE_TAC[COM_POWER;o_DEF]
THEN SYM_DICH_TAC 0
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF]
])
;;



let prev_r_not_eq_f_v0=  prove_by_refinement(`!L N r x:A#A.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r) /\
l'z L N r x =z/\
prev_el r z=z1
==> ~(f_list L z1 = z)`,
[
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC 3[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN GABBREV_TAC`f=(find_face L x)`
THEN GABBREV_TAC`w=   next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESAL_TAC indexf_ytrans_suc_lp_v0[`f`;`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;Tame_defs2.ztrans;MEM_APPEND;Tame_defs2.ntrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ytrans]
THEN GABBREV_TAC`y1=next_el r y`
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN DICH_TAC(38-23)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`z1`][Tame_defs2.loop_list;]
THEN MP_TAC f_list_power_ytrans_not_mem_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC f_list_power_next_el[`L`;`z1`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN STRIP_TAC
THEN MRESAL_TAC Seq2.mem_next_el[`z1`;`(find_face L z1)`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`z`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`z`;`z1`;`L`]
THEN DICH_TAC 3
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Seq2.prev_next_id[`z1`;`f`]
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`f`]
THEN DICH_TAC 0
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel f`];

MRESA_TAC Dangeyj.mem_imp_not_nil[`f`;`y`]
THEN MRESA_TAC Seq.size_eq0[`f`];



MRESA_TAC Seq2.size1_eq[`f`]
THEN DICH_TAC(47-28)
THEN DICH_TAC(46-28)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC (48-28)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;


STRIP_TAC
THEN MRESA_TAC Tame_list.next_el_indexf[`z1`;`z`;`f`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`y`;`z1`;`z`;`f`][ARITH_RULE`1<=SUC a`;ARITH_RULE`a+1=SUC b<=> a=b`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~(A)`)[`y=z1`];

MRESA_TAC Seq2.next_prev_id[`z`;`r`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC (50-44)
THEN MRESA_TAC next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN DICH_TAC (50-33)
THEN RESA_TAC;


DICH_TAC 2
THEN MRESAL_TAC Tame_list.indexf0[`y`;`z1`;`f`][ARITH_RULE`~(a=0)<=> 0<a`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`l'p L N r x`][ARITH_RULE`1<=a<=> 0<a`]
THEN GABBREV_TAC`j=PRE (l'p L N r x)`
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a=b==> a<b`)[`j`;`l'p L N r x`]
THEN THAYTHE_TAC (53-40)[`j`]
THEN MRESAL_TAC Tame_list.indexf_n[`y`;`z1`;`f`][GSYM List_hypermap.dart_in_face]
THEN DICH_TAC 0
THEN SYM_DICH_TAC (53-50)
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;]
[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC f_list_power_next_el[`L`;`y`;`SUC j`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN SYM_DICH_TAC (0)
THEN STRIP_TAC
THEN DICH_TAC 2
THEN RESA_TAC]);;


let FST_EQ_PREV_ZTRANS_v0=prove_by_refinement( 
`!L N r x:A#A.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r) /\
l'z L N r x =z/\
prev_el r z=z1
==> FST (z1) = FST z`,
[
REPEAT RESA_TAC
THEN GABBREV_TAC`y=l'y L r x`
THEN DICH_ASM_TAC(7-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (12-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC prev_r_not_eq_f_v0[`z1`;`z`;`L`;`N`;`r`;`x`];

ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`z`];

MRESA_TAC Seq2.mem_prev_el[`z`;`r`];



DICH_TAC(37-23)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`z1`][Tame_defs2.one_step_list]
THEN MRESAL_TAC Tame_list.inverse_node_map_list_power[`L`;`SUC 0`;`z1`][POWER;I_DEF;o_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Hypermap.lemma_power_inverse_in_node2[`hypermap_of_list L`;`z1`;`SUC 0`;][POWER;I_DEF;o_DEF]
THEN MRESA_TAC lemma_via_node_map[`(hypermap_of_list L)`;`z1`;`inverse (node_map (hypermap_of_list L)) z1`]
THEN ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list]
THEN MRESAL_TAC List_hypermap.fst_n_list_ext_power[`FST z1`;`SND z1`;`L`;`j`][List_hypermap.darts_of_list;IN_SET_OF_LIST]
]);;



let FST_EQ_NEXT_YTRANS_v0=prove( `!L N r x:A#A.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r) /\
l'y L r x =y
==> FST (next_el r y) = FST y`,


REPEAT RESA_TAC
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(7-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (12-3)[Tame_defs2.marked_list]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-11)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN 
ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`y`]
THEN 

DICH_TAC(37-23)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`y`][Tame_defs2.one_step_list]
THEN MRESAL_TAC Tame_list.inverse_node_map_list_power[`L`;`SUC 0`;`y`][POWER;I_DEF;o_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Hypermap.lemma_power_inverse_in_node2[`hypermap_of_list L`;`y`;`SUC 0`;][POWER;I_DEF;o_DEF]
THEN MRESA_TAC lemma_via_node_map[`(hypermap_of_list L)`;`y`;`inverse (node_map (hypermap_of_list L)) y`]
THEN ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list]
THEN MRESAL_TAC List_hypermap.fst_n_list_ext_power[`FST y`;`SND y`;`L`;`j`][List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN DICH_TAC (41-37)
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF]
);;



let all_has_flatten=prove(`!s. (!a. MEM a s==> ~has (\x. MEM x h) (f a))
==> ~has (\x. MEM x h) (flatten (map f s))`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Seq.map;Tame_list.concat_flatten;Seq.uniq;Seq.all_cons;Tame_list.lower_case;Seq.cat_uniq;Seq.has;Seq.has_cat;DE_MORGAN_THM;MEM]
THEN RESA_TAC
THEN GSUBGOAL_THEN`(!a. MEM a t ==> ~has (\x. MEM x h) (f a))`ASSUME_TAC
THENL[
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN THAYTHE_TAC 1[`a`];

DICH_TAC 2
THEN RESA_TAC
THEN THAYTHE_TAC 2[`h'`]]);;





let MEM_UPT=prove(`!a. MEM j (upt 1 a)==>  0 < j /\ j < a`,
INDUCT_TAC
THEN REWRITE_TAC[Tame_list.upt_rec;MEM]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`1<=a`][MEM;MEM_APPEND]
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC
THEN ASM_TAC
THEN ARITH_TAC);;


let MEM_EQ_UPT=prove(`MEM j (upt 1 a)<=>  (0 < j /\ j < a)`,
EQ_TAC
THEN SIMP_TAC[MEM_UPT;Hojodcm.mem_upt1]
THEN RESA_TAC
THEN MRESA_TAC MEM_UPT[`j`;`a`]);;


let uniq_upt1=prove(`!j. uniq (upt 1 j)`,
INDUCT_TAC
THEN REWRITE_TAC[Tame_list.upt_rec;MEM;Seq.uniq]
THEN MRESAL_TAC(ARITH_RULE`!a b. a<=b\/ ~(a<=b:num)`)[`1`;`j`][Seq.uniq;Tame_list.lower_case;Seq.cat_uniq;MEM;Seq.has;DE_MORGAN_THM]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC);;



let all_uniq_node1=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
all uniq
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
 (list_of_darts L))`,

REPEAT RESA_TAC
THEN REWRITE_TAC[GSYM Seq.allP;Seq.mapP]
THEN REPEAT RESA_TAC
THEN REMOVE_ASSUM_TAC
THEN CHANGE_TAC`d=x''`
THEN DICH_ASM_TAC(4)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN DICH_ASM_TAC (8-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(16-9)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Seq.map_inj_in_uniq[`(\i. (n_list L POWER i) d)`;`(upt (SUC 0) (sizel (filter (MEM (FST d)) L)))`][ARITH_RULE`SUC 0=1`;uniq_upt1]
THEN MATCH_DICH_TAC 0
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN SYM_DICH_TAC(30-27)
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Hypermap_and_fan.ORBIT_MAP_INJ[`dart(hypermap_of_list L)`;`node_map (hypermap_of_list L)`;`d`;`x'`;`y`;`CARD (node (hypermap_of_list L) d)`][Hypermap.node_map_and_darts;GSYM node]
THEN MATCH_DICH_TAC 0
THEN ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;GSYM Lebhirj.n_list_ext_n_list_power]);;

let all_uniq_mem=prove(`(!a. MEM a r==> MEM a s) /\ all uniq s==> all uniq r`,
REWRITE_TAC[GSYM Seq.allP;Seq.mapP]
THEN REPEAT RESA_TAC
THEN MATCH_DICH_TAC 1
THEN MATCH_DICH_TAC 1
THEN ASM_REWRITE_TAC[]);;



let all_uniq_betwn_node=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r
/\
l'y L r x=y /\
l'z L N r x = z/\ 
find_face L x = f==>
all uniq
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
 (betwn f y z))`,
REPEAT RESA_TAC
THEN MATCH_MP_TAC (GEN_ALL all_uniq_mem)
THEN GEXISTS_TAC`(map
  (\x. map (\i. (n_list L POWER i) x)
       (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
 (list_of_darts L))`
THEN MRESAL_TAC all_uniq_node1[`L`;`N`;`r`;`x`][Seq.mapP]
THEN REPEAT RESA_TAC
THEN GEXISTS_TAC`x'`
THEN ASM_REWRITE_TAC[]
THEN CHANGE_TAC`d=x'`
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN DICH_ASM_TAC(10-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN ASM_REWRITE_TAC[List_hypermap.dart_in_face]);;



let all_uniq_flatten=prove(
`!s. uniq s /\ all uniq (map f s) /\ (!a b. MEM a s/\ MEM b s/\ ~(a=b)==> ~has (\x. MEM x (f a)) (f b))==> uniq(flatten (map f s))`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Seq.map;Tame_list.concat_flatten;Seq.uniq;Seq.all_cons;Tame_list.lower_case;Seq.cat_uniq]
THEN RESA_TAC
THEN GSUBGOAL_THEN`(!a. MEM a t==> ~has (\x. MEM x (f h)) (f a))` ASSUME_TAC
THENL[

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`a`;`t`]
THEN THAYTHEL_TAC 2[`h`;`a`][MEM];

MRESA_TAC all_has_flatten[`f h`;`f`;`t`]
THEN MATCH_DICH_TAC 7
THEN ASM_REWRITE_TAC[]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN THAYTHEL_TAC 5[`a`;`b`][MEM]
]);;



let EQ_LIST_NODE_HY=prove_by_refinement(
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ 
MEM d (list_of_darts L) 
==>
(!x. MEM x  (map (\i. (n_list L POWER i) d)
       (upt (SUC 0) (sizel (filter (\t. t = FST d) (flatten L)))))
<=> x IN (node (hypermap_of_list L) d)/\ ~(x=d))
 `,
[
REPEAT RESA_TAC
THEN REWRITE_TAC[Seq.mapP]
THEN EQ_TAC
THEN RESA_TAC;

ASM_SIMP_TAC[GSYM List_hypermap.components_hypermap_of_list; Lebhirj.n_list_ext_n_list_power;Hypermap.lemma_in_node]
THEN DICH_TAC 1
THEN DICH_ASM_TAC(4)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN DICH_ASM_TAC (8-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(17-9)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN SYM_DICH_TAC(1)
THEN REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT]
THEN REPEAT RESA_TAC;


GEXISTS_TAC`x''`
THEN ASM_REWRITE_TAC[];

MRESAL_TAC Hypermap_and_fan.ORBIT_MAP_INJ[`dart(hypermap_of_list L)`;`node_map (hypermap_of_list L)`;`d`;`x''`;`0`;`CARD (node (hypermap_of_list L) d)`][Hypermap.node_map_and_darts;GSYM node;POWER;o_DEF;I_DEF]
THEN DICH_TAC 0
THEN DICH_TAC 1
THEN DICH_TAC 1
THEN ARITH_TAC;

REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT]
THEN DICH_TAC 0
THEN DICH_ASM_TAC(4)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN DICH_ASM_TAC (8-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(17-9)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN SYM_DICH_TAC(1)
THEN STRIP_TAC
THEN MRESA_TAC lemma_via_node_map[`(hypermap_of_list L)`;`d`;`x'`]
THEN ASM_SIMP_TAC[GSYM List_hypermap.components_hypermap_of_list; Lebhirj.n_list_ext_n_list_power;Hypermap.lemma_in_node]
THEN GEXISTS_TAC`j`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ 0<a`)[`j`]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]]);;




let betwn_in_dart=prove(
` !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r
/\
l'y L r x=y /\
l'z L N r x = z/\ 
find_face L x = f/\
MEM d  (betwn f y z)
==> MEM d (list_of_darts L)`,

REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN DICH_ASM_TAC(8-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN ASM_REWRITE_TAC[List_hypermap.dart_in_face]);;


let uniq_flatten_map_upt_betwn=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r/\
l'y L r x=y /\
l'z L N r x = z/\ 
find_face L x = f
==>
uniq
 (flatten
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
 (betwn f y z)))`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC(7-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (12-3)[Tame_defs2.marked_list]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN ASM_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN REPEAT RESA_TAC
THEN GABBREV_TAC`w=next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN 
ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`y`]
THEN MATCH_MP_TAC all_uniq_flatten
THEN RESA_TAC
THEN MRESA_TAC all_uniq_betwn_node[`f`;`y`;`z`;`L`;`N`;`r`;`x`]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN REWRITE_TAC[GSYM Seq.hasP]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN MRESA_TAC betwn_in_dart[`f`;`y`;`z`;`a`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC betwn_in_dart[`f`;`y`;`z`;`b`;`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`d=x'`
THEN MRESA_TAC EQ_LIST_NODE_HY[`a`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC EQ_LIST_NODE_HY[`b`;`L`;`N`;`r`;`x`]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Hypermap.lemma_node_identity[`hypermap_of_list L`;`a`;`d`]
THEN MRESA_TAC Hypermap.lemma_node_identity[`hypermap_of_list L`;`b`;`d`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`a`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`b`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`a`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`b`;`x`;`L`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC List_hypermap.face_of_list[`L`;`a`]
THEN MRESA_TAC List_hypermap.face_of_list[`L`;`b`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN REPEAT RESA_TAC
THEN DICH_ASM_TAC(54-12)[Hypermap.is_restricted;Hypermap.simple_hypermap]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\x. node (hypermap_of_list L) x INTER face (hypermap_of_list L) x =
              {x})`]
THEN THAYTHE_ASM_TAC 0[`a`]
THEN THAYTHE_ASM_TAC 0[`b`]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[SET_RULE`{a}={b}<=> a=b`]);;


let FST_EQ_UPT_FLATTEN=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r/\
MEM d (betwn f y z)/\
 l'y L r x = y /\ l'z L N r x = z /\ find_face L x = f/\
MEM d1 
  (map (\i. (n_list L POWER i) d)
       (upt (SUC 0) (sizel (filter (\t. t = FST d) (flatten L)))))
==> FST d= FST d1`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN MRESA_TAC betwn_in_dart[`f`;`y`;`z`;`d`;`L`;`N`;`r`;`x`]
 THEN MRESA_TAC EQ_LIST_NODE_HY[`d`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN MRESA_TAC lemma_via_node_map[`(hypermap_of_list L)`;`d`;`d1`]
THEN ASM_SIMP_TAC[ List_hypermap.components_hypermap_of_list; GSYM Lebhirj.n_list_ext_n_list_power;Hypermap.lemma_in_node;Lebhirj.FST_N_LIST_POWER]
);;





let betwn_not_in_fst_faltten=prove( 
`!L N r (x:A#A).
         good_list L /\
         good_list_nodes L /\
marked_list L N r x 
/\ ~(final_list L r)
/\ MEM d (betwn f (ytrans L N r x 0) (ztrans L N r x 0))
/\(find_face L x) =f
==> ~(MEM (FST d) (map FST (flatten N)))`,
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC 3[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN GABBREV_TAC`w=   next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESAL_TAC indexf_ytrans_suc_lp_v0[`f`;`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;MEM_APPEND;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF]
THEN MRESA_TAC f_list_power_ytrans_not_mem_flatten_v0[`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN ONCE_REWRITE_TAC[ARITH_RULE`a<b<=> SUC a< SUC b`]
THEN SYM_DICH_TAC 0
THEN RESA_TAC
THEN DICH_TAC(34-4)
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf y d f`][ARITH_RULE`1<=a<=> 0<a`]
THEN GABBREV_TAC`j=PRE (indexf y d f)`
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESAL_TAC Tame_list.indexf_n[`y`;`d`;`f`][GSYM List_hypermap.dart_in_face]
THEN THAYTHEL_TAC (41-33)[`j`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`indexf y d f`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(42-37)
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN ASM_REWRITE_TAC[Seq.mapP]
THEN RESA_TAC
THEN CHANGE_TAC`d1=x'`
THEN THAYTHE_TAC (44-25)[`d1`]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`d1`;`d`][List_hypermap.dart_in_face]
THEN DICH_TAC 0
THEN DICH_ASM_TAC (45-42)[Seq2.mem_flatten]
THEN DICH_TAC(47-24)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`l`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`d1`][Tame_defs2.loop_list;List_hypermap.dart_in_face]
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a A B. a IN A /\ A SUBSET B==> a IN B`)[`d`;`node (hypermap_of_list L) d1`;`set_of_list (flatten N)`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;]);;



let betwn_not_in_fst_rtrans=prove(`!L N r (x:A#A).
         good_list L /\
         good_list_nodes L /\
marked_list L N r x 
/\ ~(final_list L r)
/\ MEM d (betwn f (ytrans L N r x 0) (ztrans L N r x 0))
/\(find_face L x) =f
==> ~(MEM (FST d) (map FST r))`,
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN MRESA_TAC betwn_not_in_fst_faltten[`f`;`d`;`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN MATCH_MP_TAC Ssrbool.contraNN
THEN ASM_REWRITE_TAC[Seq.mapP]
THEN RESA_TAC
THEN GEXISTS_TAC`x'`
THEN ASM_REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[]
THEN DICH_ASM_TAC 5[Tame_defs2.marked_list;]);;



let node_betwn_not_in_rtrans=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r/\
 l'y L r x = y /\ l'z L N r x = z /\ find_face L x = f/\
MEM d
       (flatten
       (map
        (\x. map (\i. (n_list L POWER i) x)
             (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
       (betwn f y z)))
==> ~(MEM d r)`,

REWRITE_TAC[Seq2.mem_flatten;Seq.mapP]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`d1=x'`
THEN DICH_TAC 1
THEN RESA_TAC
THEN MRESA_TAC FST_EQ_UPT_FLATTEN[`y`;`z`;`f`;`d1`;`d`;`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN MRESAL_TAC betwn_not_in_fst_rtrans[`f`;`d1`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans]
THEN STRIP_TAC
THEN GSUBGOAL_THEN`MEM (FST d1) (map FST r)`ASSUME_TAC
THENL[

REWRITE_TAC[Seq.mapP]
THEN GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[];

DICH_TAC 0
THEN ASM_REWRITE_TAC[]]);;



let uniq_fst_split_norm=prove_by_refinement( 
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r
==>
uniq (FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x))))`,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;Ohcgkfu.uniq_sing]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN ASM_REWRITE_TAC[Seq.flatten_cat]
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];

DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Ohcgkfu.uniq_betwn[`y1`;`z1`;`r`]
THEN ASM_REWRITE_TAC[Seq.rev_uniq;Tame_list.lower_case];

MRESA_TAC uniq_flatten_map_upt_betwn[`f`;`y`;`z`;`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[GSYM Seq.hasP;Seq.mem_seq1;Seq.mem_cat;Seq.mem_rev]
THEN REPEAT RESA_TAC;

DICH_TAC 1
THEN MRESA_TAC node_betwn_not_in_rtrans[`f`;`y`;`z`;`x'`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN RESA_TAC;
DICH_TAC 1
THEN MRESA_TAC node_betwn_not_in_rtrans[`f`;`y`;`z`;`x'`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`x'`];

DICH_TAC 1
THEN MRESA_TAC node_betwn_not_in_rtrans[`f`;`y`;`z`;`x'`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN RESA_TAC;

DICH_TAC 1
THEN RESA_TAC
THEN MRESA_TAC Tame_list.not_betwn1[`y1`;`z1`;`r`];

DICH_TAC 1
THEN ASM_REWRITE_TAC[];


DICH_TAC 0
THEN RESA_TAC
THEN MRESA_TAC Tame_list.not_betwn2[`y1`;`z1`;`r`]]);;















let FST_SND_MEM_SPLIT_NORMAL_F=  prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r/\
MEM d (FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)))) /\
MEM d (SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) ))
==> F`,
[

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;Ohcgkfu.uniq_sing]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN ASM_REWRITE_TAC[Tame_list.lower_case;Seq.mem_rev;]
THEN REPEAT RESA_TAC;




MRESA_TAC node_betwn_not_in_rtrans[`f`;`y`;`z`;`d`;`L`;`N`;`r`;`x`]
;



DICH_TAC 0
THEN MRESA_TAC node_betwn_not_in_rtrans[`f`;`y`;`z`;`d`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`];




MRESA_TAC node_betwn_not_in_rtrans[`f`;`y`;`z`;`d`;`L`;`N`;`r`;`x`]
;


DICH_TAC 1
THEN REWRITE_TAC[Seq2.mem_flatten;Seq.mapP]
THEN RESA_TAC
THEN DICH_TAC 0
THEN RESA_TAC
THEN CHANGE_TAC`d1=x'`
THEN MRESA_TAC betwn_in_dart[`f`;`y`;`z`;`d1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC EQ_LIST_NODE_HY[`d1`;`L`;`N`;`r`;`x`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN MRESA_TAC Hypermap.lemma_node_identity[`hypermap_of_list L`;`d1`;`d`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d1`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d1`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC betwn_in_dart[`f`;`y`;`z`;`d`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC List_hypermap.face_of_list[`L`;`d`]
THEN MRESA_TAC List_hypermap.face_of_list[`L`;`d1`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN REPEAT RESA_TAC
THEN DICH_ASM_TAC(54-4)[Hypermap.is_restricted;Hypermap.simple_hypermap]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\x. node (hypermap_of_list L) x INTER face (hypermap_of_list L) x =
              {x})`]
THEN THAYTHE_ASM_TAC 0[`d`]
THEN THAYTHE_ASM_TAC 0[`d1`]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[SET_RULE`{a}={b}<=> a=b`];



DICH_TAC 0
THEN ASM_REWRITE_TAC[]
;


GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN DICH_TAC(53-46)
THEN RESA_TAC;



GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


DICH_TAC 1
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(48-26)
THEN DICH_TAC(47-26)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC (48-27)
THEN ASM_REWRITE_TAC[]
;



MRESA_TAC Tame_list.next_el_indexf[`y`;`y1`;`r`]
THEN MRESAL_TAC Tame_list.indexf_n[`z`;`y`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`z`;`y`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b ==> b= SUC a\/ SUC a<b`)[`indexf z y r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`z`;`y`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN MRESA_TAC Tame_list.indexf1[`y`;`z`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN STRIP_TAC
;


MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf z y r)`;`z`;`y1`;`r`][COM_POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`z`;`y1`;`y`]
THEN DICH_TAC 0
THEN ARITH_TAC;



MRESA_TAC Tame_list.next_el_refl[`y`;`r`]
THEN DICH_TAC(44-26)
THEN DICH_TAC(43-26)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
;




MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESAL_TAC betwn_not_in_rtrans[`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans]
;





GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


DICH_TAC 1
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(48-26)
THEN DICH_TAC(47-26)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC (48-27)
THEN ASM_REWRITE_TAC[]
;




MRESA_TAC Tame_list.next_el_indexf[`z1`;`z`;`r`]
THEN MRESAL_TAC Tame_list.indexf_n[`y1`;`z1`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`y1`;`z1`]
;



MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`]
;


DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


MRESA_TAC(ARITH_RULE`!a b:num. a<b ==> b= SUC a\/ SUC a<b`)[`indexf y1 z1 r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`y1`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN MRESA_TAC Tame_list.indexf1[`z1`;`y1`;`r`]
THEN DICH_TAC (61-57)
THEN RESA_TAC;





MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf y1 z1 r)`;`y1`;`z`;`r`][COM_POWER;o_DEF;I_DEF]
THEN DICH_TAC(60-42)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`y1`;`z`;`z1`]
THEN DICH_TAC 0
THEN ARITH_TAC;




GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


DICH_TAC 1
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(48-26)
THEN DICH_TAC(47-26)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC (48-27)
THEN ASM_REWRITE_TAC[]
;



MRESA_TAC Tame_list.next_el_indexf[`y`;`y1`;`r`]
THEN MRESAL_TAC Tame_list.indexf_n[`z`;`y`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`z`;`y`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b ==> b= SUC a\/ SUC a<b`)[`indexf z y r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`z`;`y`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN MRESA_TAC Tame_list.indexf1[`y`;`z`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN STRIP_TAC
;


MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf z y r)`;`z`;`y1`;`r`][COM_POWER;o_DEF;I_DEF]
;




MRESA_TAC Tame_list.next_el_indexf[`z1`;`z`;`r`]
THEN MRESAL_TAC Tame_list.indexf_n[`y1`;`z1`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`y1`;`z1`]
;



MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`]
;


DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


MRESA_TAC(ARITH_RULE`!a b:num. a<b ==> b= SUC a\/ SUC a<b`)[`indexf y1 z1 r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`y1`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN MRESA_TAC Tame_list.indexf1[`z1`;`y1`;`r`]
THEN DICH_TAC (61-57)
THEN RESA_TAC;





MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf y1 z1 r)`;`y1`;`z`;`r`][COM_POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`y1`;`d`;`z1`;`r`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z`]
;


DICH_TAC(67-56)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;



MRESAS_TAC Tame_list.indexf_antisym[`y1`;`z`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 1
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c d. SUC(a+b)+SUC c=d==> a+ SUC c< d`)[`indexf y1 d r`;`indexf  d z1 r`;`indexf z y r`;`sizel r`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d`]
THEN MRESAL_TAC Tame_list.indexf_n[`z`;`y1`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.indexf_n[`y1`;`d`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`indexf y1 d r+indexf z y1 r`;`z`;`d`;`r`][Hypermap.lemma_add_exponent_function]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`z`;`d`;`y`]
THEN DICH_TAC 0
THEN ARITH_TAC;





GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


DICH_TAC 1
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(48-26)
THEN DICH_TAC(47-26)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC (48-27)
THEN ASM_REWRITE_TAC[]
;



MRESA_TAC Tame_list.next_el_indexf[`y`;`y1`;`r`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`y1`;`z1`]
;



MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`]
;


DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


MRESA_TAC(ARITH_RULE`!a b:num. a<b ==> b= SUC a\/ SUC a<b`)[`indexf y1 z1 r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`y1`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN MRESA_TAC Tame_list.indexf1[`z1`;`y1`;`r`]
THEN DICH_TAC (61-57)
THEN RESA_TAC;



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =y`]
;


DICH_TAC(59-48)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`y`;`r`]
THEN ARITH_TAC;



MRESAS_TAC Tame_list.indexf_antisym[`y1`;`y`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
;


MRESAL_TAC Tame_list.indexf_n[`y1`;`z1`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf y1 z1 r)`;`y`;`z1`;`r`][POWER;o_DEF;I_DEF]
THEN DICH_TAC(62-42)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`y1`;`y`;`z1`]
THEN DICH_TAC 0
THEN DICH_TAC(63-57)
THEN SYM_DICH_TAC(62-58)
THEN ARITH_TAC;



GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d`]
THEN DICH_TAC 0
THEN MRESAL_TAC betwn_not_in_rtrans[`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans];




DICH_TAC 0
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


DICH_TAC 1
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(47-26)
THEN DICH_TAC(46-26)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC (48-27)
THEN ASM_REWRITE_TAC[]
;




MRESA_TAC Tame_list.next_el_indexf[`z1`;`z`;`r`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_refl[`z`;`r`]
THEN DICH_TAC 0
THEN ARITH_TAC;





GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


DICH_TAC 1
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(48-26)
THEN DICH_TAC(47-26)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC (48-27)
THEN ASM_REWRITE_TAC[]
;



MRESA_TAC Tame_list.next_el_indexf[`y`;`y1`;`r`]
THEN MRESAL_TAC Tame_list.indexf_n[`z`;`y`;`r`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`z`;`y`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b ==> b= SUC a\/ SUC a<b`)[`indexf z y r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`z`;`y`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN MRESA_TAC Tame_list.indexf1[`y`;`z`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN STRIP_TAC
;


MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf z y r)`;`z`;`y1`;`r`][COM_POWER;o_DEF;I_DEF]
;




MRESA_TAC Tame_list.next_el_indexf[`z1`;`z`;`r`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`z=z1`]
;


DICH_TAC 1
THEN MRESA_TAC Tame_list.indexf_refl[`z`;`r`]
THEN ARITH_TAC;



MRESAS_TAC Tame_list.indexf_antisym[`z`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`;ARITH_RULE`a+b= SUC a<=> b=1`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`z`;`z1`;`y`]
THEN DICH_TAC 0
THEN DICH_TAC (56-51)
THEN SYM_DICH_TAC 1
THEN ARITH_TAC;



MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
;



DICH_TAC 1
THEN MRESAL_TAC betwn_not_in_rtrans[`f`;`z1`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans]
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
]);;



let node_betwn_not_in_flatten=prove(
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r/\
 l'y L r x = y /\ l'z L N r x = z /\ find_face L x = f/\
MEM d
       (flatten
       (map
        (\x. map (\i. (n_list L POWER i) x)
             (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
       (betwn f y z)))
==> ~(MEM d (flatten N))`,


REWRITE_TAC[Seq2.mem_flatten;Seq.mapP]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`d1=x'`
THEN DICH_TAC 2
THEN RESA_TAC
THEN MRESA_TAC FST_EQ_UPT_FLATTEN[`y`;`z`;`f`;`d1`;`d`;`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN MRESAL_TAC betwn_not_in_fst_faltten[`f`;`d1`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans]
THEN STRIP_TAC
THEN GSUBGOAL_THEN`MEM (FST d1) (map FST (flatten N))`ASSUME_TAC
THENL[

REWRITE_TAC[Seq.mapP]
THEN GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`l'`
THEN ASM_REWRITE_TAC[Seq2.mem_flatten];


DICH_TAC 0
THEN ASM_REWRITE_TAC[]]);;


let  FST_FLITER_MEM_SPLIT_NORMAL_F=  prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r/\
MEM d (FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)))) /\
MEM d (filter (\d. ~MEM d r) (flatten N))
==> F`,
[
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq;Ohcgkfu.uniq_sing]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN ASM_REWRITE_TAC[Tame_list.lower_case;Seq.mem_rev;]
THEN REPEAT RESA_TAC;

MRESA_TAC node_betwn_not_in_flatten[`f`;`y`;`z`;`d`;`L`;`N`;`r`;`x`];

MRESA_TAC Seq2.mem_next_el[`y`;`r`];

MRESA_TAC Tame_list.betwn_mem[`r`;`(next_el r y)`;`z1`;`d`];

MRESA_TAC Seq2.mem_prev_el[`z`;`r`]]);;



let AQ1_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
   uniq (flatten (ntrans L N r x 1))`;;


let AQ1=  prove_by_refinement( AQ1_concl,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC (0)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-4)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN RESA_TAC;

MRESA_TAC uniq_replace_filter_flatten[`SND (split_normal_list L r (find_face L y) y z1)`;`r`;`N`]
THEN REWRITE_TAC[Tame_list.lower_case;Seq.cat_uniq]
THEN RESA_TAC
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Seq.filter_uniq[`flatten N`;`(\d:A#A. ~MEM d r)`;]
THEN MRESA_TAC has_snd_norm_list_fliter[`L`;`N`;`r`;`x`];

ASM_SIMP_TAC[change_flatten_replace_filter;flatten_sing;uniq_fst_split_norm];
MRESA_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[GSYM Seq.hasP;Seq.mem_seq1;Seq.mem_cat;Seq.mem_rev;MEM_APPEND]
THEN RESA_TAC;


MRESA_TAC FST_SND_MEM_SPLIT_NORMAL_F[`x'`;`L`;`N`;`r`;`x`];

MRESA_TAC FST_FLITER_MEM_SPLIT_NORMAL_F[`x'`;`L`;`N`;`r`;`x`]]);;


 (* end;; *)





load_end __FILE__;;