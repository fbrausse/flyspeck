open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


(* module  Pplhulj= struct *)

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;
open Auqtzyz;;
open List_hypermap;;
open Rxokskc;;
open Dangeyj;;
open Pwssrat;;
open Ohcgkfu;;







let marked_list_of_dart=prove(`!L N r (x:A#A). marked_list L N r x 
==> MEM x (list_of_darts L)`,
REPEAT RESA_TAC
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(10-3)[Tame_defs2.normal_list]
THEN DICH_TAC (1)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`x`][Tame_defs2.loop_list]);;


let ytran_me_f=prove(`!L N r (x:A#A) f i. good_list L /\ marked_list L N r x /\
    f = find_face L x ==>
    MEM (ytrans L N r x i) f`,
REPEAT RESA_TAC
THEN ASM_SIMP_TAC[Tame_defs2.ytrans;Tame_defs2.l_y]
THEN MATCH_MP_TAC mem_f_list_power
THEN DICH_ASM_TAC(2)[List_hypermap.good_list]
THEN DICH_ASM_TAC 4[Tame_defs2.marked_list;transform_list_power_rep]
THEN MATCH_MP_TAC marked_list_of_dart
THEN GEXISTS_TAC`N`
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[]);;



let  ztran_me_f=prove(

`!L N r (x:A#A) d i. transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\
    f = find_face L x /\ ~final_list L (rtrans L N r x i) ==>
    MEM (ztrans L N r x i) f`,

REPEAT RESA_TAC
THEN MRESA_TAC ytran_me_f[`L`;`N`;`r`;`x`;`f`;`i`]
THEN DICH_ASM_TAC(6-1)[List_hypermap.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`ytrans L N r x i`;`x`;`L`]
THEN MP_TAC ztran_in_face_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]);;












let indexl_hd=prove(`!t:(A)list. indexl (HD t) t= 0`,
LIST_INDUCT_TAC
THEN ASM_SIMP_TAC[ Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;]
THEN MRESAL_TAC Seq2.index_eq_size[`(HD []):A`;`[]:(A)list`][MEM;Seq.size_nil]);;


let mem_next_mark_inface=prove(`!L N r(x:A#A).  good_list L /\ marked_list L N r x /\
    f = find_face L x /\
    w = next_el f x ==>
MEM w (find_face L x)`,
REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(5-2)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN SYM_DICH_TAC 0
THEN MATCH_MP_TAC List_hypermap.mem_f_list
THEN ASM_REWRITE_TAC[]);;




let indexf_ytrans_eq_l_m=prove(  `!L N r(x:A#A) d i f w. ~(final_list L (rtrans L N r x i))/\ transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
	marked_list L N r x /\
    f = find_face L x /\
    w = next_el f x ==>
    indexf w (ytrans L N r x i) f = (l'm L (rtrans L N r x i) x)`,

REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z=prev_el r1 (ztrans L N r x i)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN DICH_ASM_TAC(17-1)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESA_TAC mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC ytran_me_f[`L`;`N`;`r`;`x`;`f`;`i`]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(l'm L r1 x)`][POWER;o_DEF]
THEN SYM_DICH_TAC 0
THEN EXPAND_TAC"y"
THEN REWRITE_TAC[Tame_defs2.l_y;POWER;o_DEF]
THEN MRESA_TAC(ARITH_RULE`!b a :num. a<=b\/ b<a`)[`l'm L r1 x`;`sizel (find_face L x)`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(l'm L r1 x)`][COM_POWER;o_DEF]
THEN MRESAL_TAC min_not_eq_imp_eq[`l'm L r1 x`;`f_list L`;`next_el r1`;`x`][Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN ASM_TAC
THEN STRIP_TAC
THEN REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN REPEAT RESA_TAC
THEN DICH_ASM_TAC(29-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC next_el_rotate_to_eq[`x`;`r1`]
THEN GABBREV_TAC`k=min_num
 {m | ~((next_el r1 POWER SUC (SUC m)) x =
        f_list L ((next_el r1 POWER SUC m) x))}`
THEN DICH_TAC(39-31)
THEN SYM_DICH_TAC 1
THEN MP_TAC ztran_me_f
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`indexf x (ztrans L N r x i) (find_face L x)`][COM_POWER;o_DEF]
THEN MRESAL_TAC Tame_list.indexf_n[`x`;`(ztrans L N r x i)`;`f`][GSYM List_hypermap.dart_in_face]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ 0<a`)[`indexf x (ztrans L N r x i) (find_face L x)`]

THENL[

ASM_REWRITE_TAC[POWER;I_DEF;o_DEF;]
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM]
THEN THAYTHEL_TAC 0[`sizel (find_face L x)`][ARITH_RULE`1<=a<=> 0<a`;Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN ASM_REWRITE_TAC[POWER;I_DEF;o_DEF;Tame_defs2.ztrans;GSYM sizel0_not_nil]
THEN MRESAL_TAC Dangeyj.mem_imp_not_nil[`find_face L x`;`(ytrans L N r x i)`][sizel0_not_nil]
THEN MRESA_TAC (ARITH_RULE`!a b. a<=b==>a<= SUC b`)[`sizel (find_face L x)`;`k`]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`PRE (sizel (find_face L x))`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`sizel (find_face L x)`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MRESA_TAC (ARITH_RULE`!a b. SUC a<=b==> a<= b`)[`PRE(sizel (find_face L x))`;`k`]
THEN DICH_TAC 3
THEN MRESA_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`sizel (find_face L x)`]
THEN MRESAL_TAC Pwssrat.next_el_sizel[`x`;`(find_face L x)`][GSYM List_hypermap.dart_in_face]
THEN DICH_TAC (45-37)
THEN SET_TAC[];

MRESAL_TAC Tame_list.indexf_lt_sizel[`(find_face L x)`;`x`;`(ztrans L N r x i)`;][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf x (ztrans L N r x i) (find_face L x)`][ARITH_RULE`1<=a<=> 0<a`]
THEN MRESA_TAC(ARITH_RULE`!a b c. SUC a<b/\ b<=c==>a<=c/\ SUC a<=SUC c`)[`PRE(indexf x (ztrans L N r x i) (find_face L x))`;`sizel (find_face L x)`;`k`]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM]
THEN THAYTHEL_TAC 0[`SUC(PRE(indexf x (ztrans L N r x i) (find_face L x)))`][ARITH_RULE`1<=a<=> 0<a`;Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN ASM_REWRITE_TAC[POWER;I_DEF;o_DEF;Tame_defs2.ztrans;]
]);;




let PPLHULJ3= prove( `!L N r(x:A#A) d i.  transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ ~final_list L (rtrans L N r x i)/\
    f = find_face L x /\
    w = next_el f x ==>
    indexf w (ytrans L N r x i) f < indexf w (ztrans L N r x i) f`,
REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z=prev_el r1 (ztrans L N r x i)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN MP_TAC ztran_me_f
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(21-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(28-2)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESAL_TAC Seq2.mem_next_el[`x`;`(find_face L x)`][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.indexf_n[`next_el (find_face L x) x`;`(ztrans L N r x i)`;`f`][GSYM List_hypermap.dart_in_face]
THEN GABBREV_TAC`k=indexf (next_el (find_face L x) x) (ztrans L N r x i) (find_face L x)`
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(k)`][POWER;o_DEF;Tame_defs2.ztrans]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!b a :num. a<=b\/ b<a`)[`l'm L r1 x`;`k`]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM]
THEN THAYTHEL_TAC 0[`SUC k`][ARITH_RULE`1<= SUC a/\ (SUC a<= SUC b<=> a<=b)`;POWER;o_DEF]
);;






let PPLHULJ_concl = `!L N r (x:A#A) d i f w. transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ ~final_list L (rtrans L N r x i) /\
    f = find_face L x /\
    w = next_el f x ==>
    MEM (ytrans L N r x i) f /\ MEM (ztrans L N r x i) f /\
    indexf w (ytrans L N r x i) f < indexf w (ztrans L N r x i) f`;;




let PPLHULJ=prove( PPLHULJ_concl,
ASM_SIMP_TAC[PPLHULJ3;ytran_me_f;ztran_me_f]);;



 (* end;; *)





load_end __FILE__;;