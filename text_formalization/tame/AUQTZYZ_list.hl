 (* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Tame Hypermap                                           *)
(* Lemma:  AUQTZYZ_list                                                            *)
(* Author:  Thomas Hales     *)
(* Date: March 17, 2014                                                *)
(* ========================================================================== *)

module Auqtzyz_list = struct

end;;


open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Hypermap;;


let INJ_EMPTY = prove_by_refinement(
  `!f:A->B Y. INJ f {} Y`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[INJ;NOT_IN_EMPTY])
  ]);;
  (* }}} *)

let set_of_list_rev = prove_by_refinement(
  `!u. set_of_list (rev u) = set_of_list u`,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[EXTENSION;IN_SET_OF_LIST;Seq.mem_rev])
  ]);;
  (* }}} *)

let el_iota = prove_by_refinement(
  `!j n i. i < n ==> EL i (iota j n) = j+i`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  (GMATCH_SIMP_TAC Seq2.EL_nth);
  TYPIFY `0` EXISTS_TAC;
  GMATCH_SIMP_TAC Seq.nth_iota;
  BY(ASM_REWRITE_TAC[Seq.size_iota])
  ]);;
  (* }}} *)

let I_POWER = prove_by_refinement(
  `!n. I POWER n = I`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  INDUCT_TAC THEN REWRITE_TAC[POWER_0;I_THM];
  BY(ASM_REWRITE_TAC[POWER;I_THM;o_THM])
  ]);;
  (* }}} *)

let hd_iota = prove_by_refinement(
  `!n a. ~(n=0) ==> HD (iota a n) = a`,
  (* {{{ proof *)
  [
  REWRITE_TAC[GSYM EL];
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC el_iota;
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let list_pairs_empty_alt = prove_by_refinement(
  `list_pairs [] = []`,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[List_hypermap.list_pairs;Seq2.rot_nil;Seq.zip])
  ]);;
  (* }}} *)

let set_of_list_pairs_set_of_list_subset = prove_by_refinement(
  `!u v. set_of_list (list_pairs u) SUBSET 
    set_of_list (list_pairs v) ==>
    set_of_list u SUBSET set_of_list v`,
  (* {{{ proof *)
  [
  REWRITE_TAC[SUBSET;IN_SET_OF_LIST];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC List_hypermap.mem_list_pairs_exists [`x`;`u`];
  ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  BY(ASM_MESON_TAC[List_hypermap.mem_list_pairs_exists])
  ]);;
  (* }}} *)

let set_of_list_pairs_set_of_list_eq = prove_by_refinement(
  `!u v. set_of_list (list_pairs u) =
    set_of_list (list_pairs v) ==>
    set_of_list u = set_of_list v`,
  (* {{{ proof *)
  [
BY(ASM_MESON_TAC[SUBSET_ANTISYM_EQ;set_of_list_pairs_set_of_list_subset])
  ]);;
  (* }}} *)

let card_set_of_list_uniq2 = prove_by_refinement(
  `!l. CARD (set_of_list l) = sizel l ==> uniq l`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  PROOF_BY_CONTR_TAC;
  RULE_ASSUM_TAC (REWRITE_RULE[GSYM Seq.ltn_size_undup]);
  INTRO_TAC Seq2.set_of_list_undup [`l`];
  BY(ASM_MESON_TAC[Seq.undup_uniq;Seq2.card_set_of_list_uniq;arith `x = (y:num) ==> ~(x < y)`])
  ]);;
  (* }}} *)

let list_pairs_rot = prove_by_refinement(
  `!u v. uniq u  /\ sizel u = sizel v /\ 
    set_of_list (list_pairs u) = set_of_list (list_pairs v) ==>
    (?k. rot k u = v)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `u = []` ASM_CASES_TAC;
    ASM_REWRITE_TAC[Seq2.rot_nil];
    FIRST_X_ASSUM_ST `set_of_list` MP_TAC;
    ASM_REWRITE_TAC[list_pairs_empty_alt;set_of_list];
    BY(ASM_MESON_TAC[SET_OF_LIST_EQ_EMPTY;List_hypermap.list_pairs_empty]);
  MATCH_MP_TAC next_el_power_rot;
  TYPIFY `HD u` EXISTS_TAC;
  TYPIFY `set_of_list u = set_of_list v` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[set_of_list_pairs_set_of_list_eq]);
  TYPIFY `MEM (HD u) u` (C SUBGOAL_THEN ASSUME_TAC);
    BY(MATCH_MP_TAC MEM_HD THEN ASM_REWRITE_TAC[]);
  TYPIFY `MEM (HD u) v` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[IN_SET_OF_LIST]);
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    MATCH_MP_TAC card_set_of_list_uniq2;
    BY(ASM_MESON_TAC[Seq2.card_set_of_list_uniq;]);
  DISCH_TAC;
  TYPIFY `!i d. MEM d u /\ MEM d v ==> (next_el u POWER i) d = (next_el v POWER i) d` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  INDUCT_TAC;
    BY(REWRITE_TAC[POWER_0]);
  REWRITE_TAC[POWER;o_THM];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `next_el u d = next_el v d /\ MEM (next_el u d) u` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[IN_SET_OF_LIST]);
  ASM_SIMP_TAC[Seq2.mem_next_el];
  INTRO_TAC List_hypermap.mem_list_pairs_exists [`d`;`u`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_MESON_TAC[List_hypermap.mem_list_pairs_explicit;IN_SET_OF_LIST])
  ]);;
  (* }}} *)

let list_pairs_rot_subset = prove_by_refinement(
  `!u v. uniq u  /\ sizel u = sizel v /\ 
    set_of_list (list_pairs u) SUBSET set_of_list (list_pairs v) ==>
    (?k. rot k u = v)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC list_pairs_rot;
  ASM_REWRITE_TAC[];
  INTRO_TAC set_of_list_pairs_set_of_list_subset [`u`;`v`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  INTRO_TAC CARD_SUBSET_LE [`set_of_list u`;`set_of_list v`];
  ASM_REWRITE_TAC[FINITE_SET_OF_LIST];
  ANTS_TAC;
    BY(ASM_MESON_TAC[CARD_SET_OF_LIST_LE;Seq2.card_set_of_list_uniq;lower_case]);
  DISCH_TAC;
  TYPIFY `uniq v` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC card_set_of_list_uniq2;
    BY(ASM_MESON_TAC[Seq2.card_set_of_list_uniq]);
  TYPIFY `!d. d IN set_of_list (list_pairs v) ==> d IN set_of_list (list_pairs u)` ENOUGH_TO_SHOW_TAC;
    BY(ASM_TAC THEN SET_TAC[]);
  REWRITE_TAC[IN_SET_OF_LIST;FORALL_PAIR_THM];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM p1 (u)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[List_hypermap.mem_list_pairs_exists;IN_SET_OF_LIST]);
  TYPIFY `?p2. MEM (p1,p2) (list_pairs u)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[List_hypermap.mem_list_pairs_exists;IN_SET_OF_LIST]);
  FIRST_X_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `(p1,p2) = (p1,p2')` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  MATCH_MP_TAC list_pairs_unique;
  ASM_REWRITE_TAC[];
  TYPIFY `v` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[SUBSET;IN_SET_OF_LIST])
  ]);;
  (* }}} *)

let e_list_o = prove_by_refinement(
  `e_list o e_list = I`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;o_THM;FORALL_PAIR_THM;List_hypermap.e_list;I_THM])
  ]);;
  (* }}} *)

let e_list_image = prove_by_refinement(
  `!f r.
    uniq f /\ ~(f = []) /\ sizel f = sizel r /\
     (!d. MEM d (list_pairs f) ==> MEM (e_list d) (list_pairs r)) ==>
     (?k.  rot k f = rev r)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC list_pairs_rot_subset;
  ASM_REWRITE_TAC[];
  ASM_REWRITE_TAC[Seq.size_rev];
  REWRITE_TAC[SUBSET;IN_SET_OF_LIST;upper_case;FORALL_PAIR_THM];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC list_pairs_rev_eq [`r`;`(p2,p1)`];
  REWRITE_TAC[];
  DISCH_THEN (SUBST1_TAC o GSYM);
  FIRST_X_ASSUM (C INTRO_TAC [`p1,p2`]);
  REWRITE_TAC[List_hypermap.e_list];
  BY(ASM_SIMP_TAC[])
  ]);;
  (* }}} *)

let e_list_pairs_rev = prove_by_refinement(
  `!f r. uniq f /\ ~(f = []) /\ sizel f = sizel r /\
    (!d. MEM d (list_pairs f) ==> MEM (e_list d) (list_pairs r)) /\
    HD f = LAST r 
   ==> r = rev f`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC e_list_image [`f`;`r`];
  ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `rev (rot k f) = r` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.revK]);
  FULL_EXPAND_TAC "r";
  TYPIFY `rot k f  = f` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[Seq.revK]);
  FIRST_X_ASSUM_ST `LAST` MP_TAC;
  GMATCH_SIMP_TAC LAST_rev;
  SUBCONJ_TAC;
    REWRITE_TAC[GSYM Seq.size_eq0;Seq.size_rot];
    BY(ASM_REWRITE_TAC[Seq.size_eq0]);
  DISCH_TAC;
  TYPIFY `sizel f <= k` ASM_CASES_TAC;
    BY(ASM_MESON_TAC[Seq.rot_oversize]);
  INTRO_TAC Seq2.index_rot [`f`;`k`;`HD f`];
  ASM_SIMP_TAC[MEM_HD;arith `~(n <= k:num) ==> k < n`];
  TYPIFY `indexl (HD f) f = 0` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[index_hd0]);
  ASM_REWRITE_TAC[];
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[arith `k <= 0 ==> k = 0`;Seq.rot0]);
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `indexl` MP_TAC;
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `rev` kill);
  ASM_SIMP_TAC[index_hd0;Seq.size_rev;Seq.size_rot];
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

(* DIHEDRAL IN A DAY *)

(* MOVE THESE *)

let fgraph_seed = prove_by_refinement(
  `!p. fgraph (Seed p) = [iota 0 (maxGon p);rev (iota 0 (maxGon p))]`,
  (* {{{ proof *)
  [
  REWRITE_TAC[fgraph;SEED;faces;graphl;LET_THM;GRAPH;MAP];
  BY(REWRITE_TAC[lower_case;upt0])
  ]);;
  (* }}} *)

let uniq_list_of_darts_seed = prove_by_refinement(
 `!p. uniq(list_of_darts(fgraph (Seed p)))`, 
  (* {{{ proof *)
  [
  REWRITE_TAC[SEED;graphl;LET_THM;fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_darts_cons;List_hypermap.list_of_darts_nil];
  REWRITE_TAC[Seq.cats0];
  REWRITE_TAC[Seq.cat_uniq];
  GEN_TAC;
  CONJ_TAC;
    MATCH_MP_TAC List_hypermap.uniq_list_pairs;
    REWRITE_TAC[upt]; 
    BY(REWRITE_TAC[Seq.iota_uniq]);
  CONJ2_TAC;
    MATCH_MP_TAC List_hypermap.uniq_list_pairs;
    REWRITE_TAC[REVERSE_rev];
    REWRITE_TAC[Seq.rev_uniq];
    REWRITE_TAC[upt]; 
    BY(REWRITE_TAC[Seq.iota_uniq]);
  REWRITE_TAC[GSYM Seq.hasP];
  REWRITE_TAC[NOT_EXISTS_THM];
  GEN_TAC;
  REWRITE_TAC[TAUT `~(a /\ b) <=> (a ==> ~b)`];
  REWRITE_TAC[upt0;maxGon]; 
  TYPIFY `?i j. x = i,j` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[PAIR_SURJECTIVE]);
  WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[REVERSE_rev;Seq.mem_rev;list_pairs_iota];
  GMATCH_SIMP_TAC list_pairs_rev_iota;
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let all_nonempty_seed = prove_by_refinement(
  `!p. all (\l. ~(l = [])) (fgraph (Seed p))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[SEED;graphl;LET_THM;fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_darts_cons;List_hypermap.list_of_darts_nil];
  REWRITE_TAC[Seq.all];
  REWRITE_TAC[upt;maxGon];
  REWRITE_TAC[GSYM Seq.size_eq0;REVERSE_rev;Seq.size_rev];
  REWRITE_TAC[Seq.size_iota];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let mem_transpose_seed = prove_by_refinement(
  `!p d. MEM d (list_of_darts (fgraph (Seed p))) ==> MEM (SND d,FST d) (list_of_darts (fgraph (Seed p)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[SEED;graphl;LET_THM;fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_darts_cons;List_hypermap.list_of_darts_nil];
  REWRITE_TAC[Seq.mem_cat];
  REWRITE_TAC[upt;maxGon;REVERSE_rev];
  REPEAT GEN_TAC;
  TYPIFY_GOAL_THEN `(p+3)-0 = p+3` SUBST1_TAC;
    BY(ARITH_TAC);
  TYPIFY `?i j. d = (i,j)` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[PAIR_SURJECTIVE]);
  WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[list_pairs_iota];
  REPEAT (GMATCH_SIMP_TAC list_pairs_rev_iota);
  REWRITE_TAC[MEM];
  REWRITE_TAC[arith `0 < p + 3 /\ (p+3)- 1 = p+2 /\ (i + 1 = p + 3 <=> i = p+ 2) /\ (i + 1 < p + 3 <=> i < p + 2)`];
  REPEAT STRIP_TAC;
        BY(ASM_TAC THEN ARITH_TAC);
      BY(ASM_REWRITE_TAC[]);
    BY(ASM_REWRITE_TAC[]);
  DISJ1_TAC;
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let good_list_seed = prove_by_refinement(
  `!p. good_list (fgraph (Seed p))`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[List_hypermap.good_list;mem_transpose_seed;all_nonempty_seed;uniq_list_of_darts_seed])
  ]);;
  (* }}} *)

(* was elements_of_list_seed *)

let list_of_elements_seed = prove_by_refinement(
  `!p. list_of_elements (fgraph (Seed p)) = REVERSE (upt 0 (p+3))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[SEED;maxGon;graphl];
  GEN_TAC;
  REWRITE_TAC[LET_THM];
  REWRITE_TAC[fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_elements];
  REWRITE_TAC[Seq.flatten_cons;Seq.cats0;Seq.flatten0];
  GMATCH_SIMP_TAC undup_cat;
  CONJ_TAC;
    BY(ASM_MESON_TAC[Seq.mem_rev;REVERSE_rev]);
  MATCH_MP_TAC Seq.undup_id;
  REWRITE_TAC[Seq.rev_uniq;REVERSE_rev];
  BY(REWRITE_TAC[upt0;Seq.iota_uniq])
  ]);;
  (* }}} *)

let good_vertices_set2_seed = prove_by_refinement(
  `!p. vertices_set2 (Seed p) = elements_of_list (fgraph (Seed p))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.elements_of_list;list_of_elements_seed];
  REWRITE_TAC[vertices_set2;SEED;graphl;maxGon;LET_THM;vertices_graph;countVertices];
  REWRITE_TAC[EXTENSION;IN_SET_OF_LIST];
  BY(MESON_TAC[Seq.mem_rev;REVERSE_rev])
  ]);;
  (* }}} *)

let all_uniq_seed = prove_by_refinement(
  `!p. all uniq (fgraph (Seed p))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[vertices_set2;SEED;graphl;maxGon;LET_THM;vertices_graph;countVertices];
  REWRITE_TAC[fgraph_graph];
  REWRITE_TAC[fgraph_graph;MAP;Seq.all];
  REWRITE_TAC[Seq.rev_uniq;REVERSE_rev];
  BY(REWRITE_TAC[upt0;Seq.iota_uniq])
  ]);;
  (* }}} *)

let good_facesAt_seed = prove_by_refinement(
  `!p. (!v. v IN vertices_set2 (Seed p)
        ==> facesAt (Seed p) v = FILTER (\f. MEM v (FST f)) (faces (Seed p)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[good_vertices_set2_seed;List_hypermap.elements_of_list;IN_SET_OF_LIST;list_of_elements_seed];
  REWRITE_TAC[REVERSE_rev;Seq.mem_rev];
  REWRITE_TAC[vertices_set2;SEED;graphl;maxGon;LET_THM;vertices_graph;countVertices];
  REWRITE_TAC[faces_graph];
  REWRITE_TAC[facesAt;FACE_LIST_AT];
  REWRITE_TAC[upt0];
  REWRITE_TAC[Seq.mem_iota] THEN REWRITE_TAC[arith `0 + n = n /\ 0 <= n`];
  SIMP_TAC[EL_REPLICATE];
  ONCE_REWRITE_TAC[EQ_SYM_EQ];
  REWRITE_TAC[Seq.all_filterP;GSYM filter_FILTER];
  REWRITE_TAC[Seq.all;REVERSE_rev;Seq.mem_rev];
  BY(REWRITE_TAC[Seq.mem_iota] THEN REWRITE_TAC[arith `0 + n = n /\ 0 <= n`])
  ]);;
  (* }}} *)

let lemma_node_representation_eq = prove_by_refinement(
  `!H u. u IN node_set H <=> (?x. x IN dart H /\ u = node H x)`,
  (* {{{ proof *)
  [
BY(MESON_TAC[Hypermap.lemma_node_representation;Hypermap.lemma_in_hypermap_orbits])
  ]);;
  (* }}} *)


let uniq_inj_on = prove_by_refinement(
  `!u v. sizel u = sizel v /\ uniq u /\ uniq v ==>
   ?(f:A->B). inj_on f (set_of_list u) /\ v = MAP f u
    `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `f = (\(x:A). EL (indexl x u) v)`;
  TYPIFY `f` EXISTS_TAC;
  REWRITE_TAC[inj_on];
  REWRITE_TAC[IN_ELIM_SET_OF_LIST];
  REPEAT WEAKER_STRIP_TAC;
  SUBCONJ2_TAC;
    FULL_EXPAND_TAC "f";
    ONCE_REWRITE_TAC[Packing3.LIST_EL_EQ];
    ASM_REWRITE_TAC[lower_case;Seq.size_map];
    TYPIFY `LENGTH u = LENGTH v` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[upper_case]);
    ASM_SIMP_TAC[upper_case;EL_MAP];
    REPEAT WEAKER_STRIP_TAC;
    GMATCH_SIMP_TAC index_el;
    BY(ASM_MESON_TAC[upper_case]);
  DISCH_TAC;
  FULL_EXPAND_TAC "f";
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `indexl (EL (indexl x u) v) v = indexl (EL (indexl y u) v) v` (C SUBGOAL_THEN MP_TAC);
    BY(ASM_REWRITE_TAC[]);
  REPEAT (GMATCH_SIMP_TAC index_el);
  BY(ASM_MESON_TAC[index_uniq;Seq.index_mem])
  ]);;
  (* }}} *)


let elements_of_list_pr = prove_by_refinement(
  `!u. elements_of_list [u;rev u] = set_of_list u`,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.elements_of_list;List_hypermap.list_of_elements];
  REWRITE_TAC[Seq2.set_of_list_undup;concat_flatten;APPEND_NIL];
  REWRITE_TAC[SET_OF_LIST_APPEND;set_of_list_rev];
  BY(REWRITE_TAC[UNION_IDEMPOT])
  ]);;
  (* }}} *)

let iso_list_dih2k = prove_by_refinement(
  `!(L:((A)list)list) (L':((B)list)list). 
    dih2k_list L /\ dih2k_list L' /\ 
    sizel (HD L) = sizel (HD L') ==> iso_list (L,[]) (L',[])`,
  (* {{{ proof *)
  [
  REWRITE_TAC[iso_list;MAP;dih2k_list];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC uniq_inj_on [`u`;`u'`];
  FIRST_X_ASSUM MP_TAC THEN ASM_SIMP_TAC[HD];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `f` EXISTS_TAC;
  ASM_REWRITE_TAC[elements_of_list_pr];
  REWRITE_TAC[MAP];
  BY(REWRITE_TAC[upper_case;MAP_REVERSE])
  ]);;
  (* }}} *)

let iso_list_imp_dih2k = prove_by_refinement(
  `!L L'. iso_list (L,[]) (L',[]) /\ dih2k_list L ==> dih2k_list L'`,
  (* {{{ proof *)
  [
  REWRITE_TAC[dih2k_list;iso_list;MAP];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MAP phi u` EXISTS_TAC;
  ASM_REWRITE_TAC[MAP;upper_case;MAP_REVERSE];
  MATCH_MP_TAC uniq_map;
  ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `inj_on` MP_TAC THEN REWRITE_TAC[inj_on];
  ASM_REWRITE_TAC[elements_of_list_pr;IN_ELIM_SET_OF_LIST];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let dih2k_all_uniq = prove_by_refinement(
  `!L. dih2k_list L ==> all uniq L`,
  (* {{{ proof *)
  [
  REWRITE_TAC[dih2k_list;GSYM Seq.allP];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC THEN ASM_REWRITE_TAC[MEM];
  BY(REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[Seq.rev_uniq])
  ]);;
  (* }}} *)

let fgraph_seed = prove_by_refinement(
  `!p. fgraph (Seed p) = [iota 0 (maxGon p);rev (iota 0 (maxGon p))]`,
  (* {{{ proof *)
  [
  REWRITE_TAC[dih2k_list;fgraph;SEED;faces;graphl;LET_THM;GRAPH;MAP];
  BY(REWRITE_TAC[lower_case;upt0])
  ]);;
  (* }}} *)

let seed_dih2k = prove_by_refinement(
  `!p. dih2k_list (fgraph (Seed p))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[fgraph_seed;dih2k_list];
  GEN_TAC;
  TYPIFY `iota 0 (maxGon p)` EXISTS_TAC;
  BY(REWRITE_TAC[Seq.iota_uniq])
  ]);;
  (* }}} *)

let dih2k_0 = prove_by_refinement(
  `dih2k_list [([]:(A)list);[]]`,
  (* {{{ proof *)
  [
  REWRITE_TAC[dih2k_list;CONS_11];
  BY(MESON_TAC[Seq.nil_uniq;rev0])
  ]);;
  (* }}} *)

let dih2k_1 = prove_by_refinement(
  `!x:A. dih2k_list [[x];[x]]`,
  (* {{{ proof *)
  [
  REWRITE_TAC[dih2k_list;CONS_11];
  BY(MESON_TAC[rev1;Seq.rev_uniq;Seq.cons_uniq;Seq.nil_uniq;MEM])
  ]);;
  (* }}} *)

let rev2 = prove_by_refinement(
  `!x y. rev [x;y] = [y;x]`,
  (* {{{ proof *)
  [
  ONCE_REWRITE_TAC[Seq.rev_cons];
  REWRITE_TAC[rev1];
  REWRITE_TAC[GSYM Seq.cats1];
  BY(REWRITE_TAC[GSYM Seq.cats1;Seq.cat1s])
  ]);;
  (* }}} *)

let dih2k_2 = prove_by_refinement(
  `!x:A y. ~(x = y) ==> dih2k_list [[x;y];[y;x]]`,
  (* {{{ proof *)
  [
  REWRITE_TAC[dih2k_list;CONS_11];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `[x;y]` EXISTS_TAC;
  ASM_REWRITE_TAC[Seq.cons_uniq;rev2];
  BY(ASM_REWRITE_TAC[MEM;Seq.nil_uniq])
  ]);;
  (* }}} *)

let dih2k_good_list = prove_by_refinement(
  `!L. 3 <= sizel (HD L) /\ dih2k_list L ==> good_list L`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `p = sizel (HD L) - 3`;
  INTRO_TAC (* Dpzgbyf. *) good_list_seed [`p`];
  DISCH_TAC;
  INTRO_TAC seed_dih2k [`p`];
  DISCH_TAC;
  TYPIFY `sizel (HD (fgraph (Seed p))) = sizel (HD L)` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[fgraph_seed;HD;Seq.size_iota;maxGon];
    BY(ASM_TAC THEN ARITH_TAC);
  INTRO_TAC iso_list_dih2k [`fgraph (Seed p)`;`L`];
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[iso_list_good_list])
  ]);;
  (* }}} *)

let seed_good_list_nodes = prove_by_refinement(
  `!p. good_list_nodes (fgraph(Seed p))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  TYPIFY `good_list (fgraph (Seed p))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[good_list_seed]);
  POP_ASSUM MP_TAC;
  REWRITE_TAC[fgraph_seed;maxGon];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC Tame_list.good_list_nodes_condition2;
  ASM_REWRITE_TAC[];
  TYPIFY `uniq (iota 0 (p+3)) /\ uniq (rev (iota 0 (p+3)))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(MESON_TAC[Seq.iota_uniq;Seq.rev_uniq]);
  COMMENT "symmetry reduction";
  TYPIFY `!d d'. MEM d (list_pairs (iota 0 (p+3))) /\ MEM d' (list_pairs (rev (iota 0 (p+3)))) /\ (FST d = FST d') ==> d' IN (node (hypermap_of_list [iota 0 (p+3);rev (iota 0 (p+3))]) d)` ENOUGH_TO_SHOW_TAC;
    REWRITE_TAC[List_hypermap.list_of_darts_cons];
    REWRITE_TAC[Seq.mem_cat;MEM;List_hypermap.list_of_darts_nil];
    REPEAT STRIP_TAC;
          BY(ASM_MESON_TAC[list_pairs_unique;node_refl]);
        BY(ASM_MESON_TAC[]);
      BY(ASM_MESON_TAC[Hypermap.lemma_node_identity;node_refl]);
    BY(ASM_MESON_TAC[list_pairs_unique;node_refl]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `d' = inverse (node_map (hypermap_of_list [iota 0 (p + 3); rev (iota 0 (p + 3))])) d` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN SUBST1_TAC;
    MATCH_MP_TAC Hypermap.lemma_inverse_in_node;
    BY(REWRITE_TAC[node_refl]);
  MATCH_MP_TAC list_pairs_unique;
  (TYPIFY `rev (iota 0 (p+3))` EXISTS_TAC);
  ASM_REWRITE_TAC[];
  CONJ2_TAC;
    INTRO_TAC List_hypermap.fst_node_hypermap_of_list [`[iota 0 (p + 3); rev (iota 0 (p + 3))]`;`d`];
    ASM_REWRITE_TAC[];
    DISCH_THEN (C INTRO_TAC [`(inverse      (node_map (hypermap_of_list [iota 0 (p + 3); rev (iota 0 (p + 3))]))     d)`]);
    ANTS_TAC;
      MATCH_MP_TAC Hypermap.lemma_inverse_in_node;
      BY(REWRITE_TAC[node_refl]);
    BY(MESON_TAC[]);
  GMATCH_SIMP_TAC inverse_node_map_list;
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    BY(ASM_REWRITE_TAC[List_hypermap.list_of_darts_cons;Seq.mem_cat]);
  REPLICATE_TAC 2 (POP_ASSUM kill);
  DISCH_TAC;
  TYPIFY `find_face [iota 0 (p + 3); rev (iota 0 (p + 3))] (e_list d) = list_pairs (rev (iota 0 (p+3)))` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN (SUBST1_TAC o GSYM);
    MATCH_MP_TAC List_hypermap.mem_f_list;
    INTRO_TAC mem_transpose_seed [`p`;`d`];
    ASM_REWRITE_TAC[fgraph_seed;maxGon];
    BY(REWRITE_TAC[List_hypermap.e_list]);
  TYPIFY `MEM (e_list d) (list_of_darts [iota 0 (p + 3); rev (iota 0 (p + 3))])` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.e_list];
    INTRO_TAC mem_transpose_seed [`p`;`d`];
    REWRITE_TAC[fgraph_seed;maxGon];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[List_hypermap.find_face_cons];
  TYPIFY `?i j.  (i,j) = d` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[PAIR_SURJECTIVE]);
  WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "d";
  REPEAT (FIRST_X_ASSUM_ST `e_list` MP_TAC);
  REWRITE_TAC[List_hypermap.e_list];
  (ASM_REWRITE_TAC[]);
  DISCH_TAC;
  FIRST_X_ASSUM_ST `list_of_darts` MP_TAC;
  (ASM_REWRITE_TAC[List_hypermap.list_of_darts_cons;Seq.mem_cat]);
  REWRITE_TAC[List_hypermap.list_of_darts_nil;MEM];
  TYPIFY `~(MEM (j,i) (list_pairs (iota 0 (p+3))))` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `list_pairs` MP_TAC;
    REWRITE_TAC[list_pairs_iota];
    BY(ARITH_TAC);
  ASM_REWRITE_TAC[];
  BY(ASM_SIMP_TAC[])
  ]);;
  (* }}} *)

let dih2k_good_list_nodes = prove_by_refinement(
  `!L. 3 <= sizel (HD L) /\ dih2k_list L ==> good_list_nodes L`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `p = sizel (HD L) - 3`;
  INTRO_TAC  seed_good_list_nodes [`p`];
  DISCH_TAC;
  INTRO_TAC seed_dih2k [`p`];
  DISCH_TAC;
  TYPIFY `sizel (HD (fgraph (Seed p))) = sizel (HD L)` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[fgraph_seed;HD;Seq.size_iota;maxGon];
    BY(ASM_TAC THEN ARITH_TAC);
  INTRO_TAC iso_list_dih2k [`fgraph (Seed p)`;`L`];
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[iso_list_good_list_nodes;good_list_seed])
  ]);;
  (* }}} *)

let is_normal_loop_list = prove_by_refinement(
  `!L N.  is_restricted (hypermap_of_list L) /\
     good_list L /\
    good_list_nodes L /\
   all (\r. ~(r=[])) N /\
    all uniq N /\
    is_normal (hypermap_of_list L) (loop_family_of_list N) ==>
    all (loop_list L) N`,
  (* {{{ proof *)
  [
  REWRITE_TAC[normal_list];
  REWRITE_TAC[GSYM Seq.allP] THEN REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC Hypermap.lemma_in_dart [`(hypermap_of_list L)`;`(loop_family_of_list N)`];
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
  COMMENT "expand is_normal";
  FIRST_X_ASSUM_ST `is_normal` MP_TAC;
  REWRITE_TAC[is_normal;loop_family_of_list;IN_SET_OF_LIST;upper_case];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `is_loop` (C INTRO_TAC [`loop_of_list x`]);
  REWRITE_TAC[loop_family_of_list;IN_SET_OF_LIST];
  TYPIFY `MEM (loop_of_list x) (MAP loop_of_list N)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEMf_MAP;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[is_loop;loop_list];
  REWRITE_TAC[GSYM Seq.allP] THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `dart` MP_TAC;
  ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
  DISCH_TAC;
  TYPIFY `x` (RENAME_TAC "r");
  TYPIFY `x''` (RENAME_TAC "d");
  SUBCONJ_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    TYPIFY `loop_of_list r` EXISTS_TAC;
    SUBCONJ_TAC;
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    DISCH_TAC;
    REWRITE_TAC[in_dart_of_loop;];
    GMATCH_SIMP_TAC in_dart_loop_of_list;
    ASM_REWRITE_TAC[];
    BY(ASM_SIMP_TAC[]);
  DISCH_TAC;
  REWRITE_TAC[one_step_list];
  FIRST_X_ASSUM (C INTRO_TAC [`d`]);
  REWRITE_TAC[in_dart_of_loop];
  ASM_SIMP_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[in_dart_loop_of_list]);
  REWRITE_TAC[one_step_contour];
  REPEAT (GMATCH_SIMP_TAC loop_map_next_el);
  REPEAT (GMATCH_SIMP_TAC face_map_list);
  REPEAT (GMATCH_SIMP_TAC inverse_node_map_list);
  BY(ASM_SIMP_TAC[])
  ]);;
  (* }}} *)

let is_normal_nodal = prove_by_refinement(
  `!(L:((A)list)list) N.  is_restricted (hypermap_of_list L) /\
     good_list L /\
    good_list_nodes L /\
    is_normal (hypermap_of_list L) (loop_family_of_list N) /\
   all (\r. ~(r=[])) N /\
    all uniq N ==>
(!d. MEM d (flatten N)
              ==> node (hypermap_of_list L) d SUBSET 
	      set_of_list (flatten N))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[GSYM Seq.allP] THEN REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC Hypermap.lemma_in_dart [`(hypermap_of_list L)`;`(loop_family_of_list N)`];
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
  COMMENT "expand is_normal";
  FIRST_X_ASSUM_ST `is_normal` MP_TAC;
  REWRITE_TAC[is_normal;loop_family_of_list;IN_SET_OF_LIST;upper_case];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[SUBSET] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x:A#A` (RENAME_TAC "d'");
  FIRST_X_ASSUM_ST `flatten` MP_TAC;
  REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `node` (C INTRO_TAC [`loop_of_list l`;`d`;`d'`]);
  ANTS_TAC;
    CONJ_TAC;
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[in_dart_of_loop;in_dart_loop_of_list]);
  REWRITE_TAC[MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x` EXISTS_TAC;
  FIRST_X_ASSUM MP_TAC;
  BY(ASM_MESON_TAC[in_dart_of_loop;in_dart_loop_of_list])
  ]);;
  (* }}} *)

let path_of_loop_of_list = prove_by_refinement(
  `!r d.
   d = HD r /\ uniq r /\ ~(r = []) ==>
   MAP (path_of_loop (loop_of_list r) d) (iota 0 (sizel r)) = r`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MAP (path_of_loop (loop_of_list r) d) (iota 0 (sizel r)) = MAP (\k. (next_el r POWER k) d) (iota 0 (sizel r))` (C SUBGOAL_THEN SUBST1_TAC);
    MATCH_MP_TAC MAP_EQ;
    REWRITE_TAC[lower_case;GSYM Seq.allP];
    REWRITE_TAC[Seq.mem_iota;arith `0 + n = n`];
    REPEAT WEAKER_STRIP_TAC;
    REWRITE_TAC[ path_of_loop];
    BY(ASM_SIMP_TAC[loop_map_next_el]);
  REWRITE_TAC[Packing3.LIST_EL_EQ];
  REWRITE_TAC[LENGTH_MAP;Seq.size_iota];
  REWRITE_TAC[lower_case;Seq.size_iota];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[upper_case;EL_MAP];
  GMATCH_SIMP_TAC EL_MAP;
  INTRO_TAC nth_iota_nod [`0`;`LENGTH r`;`j`];
  ASM_SIMP_TAC[lower_case;Seq.size_iota];
  GMATCH_SIMP_TAC (GSYM Seq2.EL_nth);
  ASM_SIMP_TAC[Seq.size_iota];
  GMATCH_SIMP_TAC Seq2.next_el_power;
  ASM_SIMP_TAC[index_hd0;arith `0+j=j`;MEM_HD];
  TYPIFY `HD r` EXISTS_TAC;
  TYPIFY `j MOD sizel r = j` (C SUBGOAL_THEN SUBST1_TAC);
    MATCH_MP_TAC MOD_LT;
    BY(ASM_REWRITE_TAC[]);
  GMATCH_SIMP_TAC (GSYM Seq2.EL_nth);
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let path_of_loop_uniq = prove_by_refinement(
  `!l d n. CARD (dart_of_loop l) = n /\
       d IN dart_of_loop l 
==> uniq (
     MAP (path_of_loop l d) (iota 0 n))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC lemma_inj_path_of_loop [`l`;`d`];
  ASM_REWRITE_TAC[in_dart_of_loop];
  REWRITE_TAC[lemma_inj_list2;pre_card_dart_of_loop];
  REWRITE_TAC[Seq2.uniq_nthP];
  DISCH_THEN (C INTRO_TAC [`PRE (CARD (dart_of_loop l))`]);
  REWRITE_TAC[arith `n:num <= n`];
  INTRO_TAC Hypermap.lemma_card_dart_of_loop [`l`];
  ASM_REWRITE_TAC[card_dart_of_loop;pre_card_dart_of_loop];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `PRE` MP_TAC;
  ASM_SIMP_TAC[arith `0 < n ==> (!i. i <= PRE n <=> i < n)`];
  DISCH_TAC;
  FIRST_X_ASSUM_ST `nth` MP_TAC;
  REWRITE_TAC[];
  REPEAT (GMATCH_SIMP_TAC (GSYM Seq2.EL_nth));
  REPEAT (GMATCH_SIMP_TAC EL_MAP);
  REPEAT (GMATCH_SIMP_TAC Seq2.EL_nth);
  ASM_REWRITE_TAC[Seq.size_map;lower_case;Seq.size_iota];
  FIRST_X_ASSUM_ST `sizel` MP_TAC;
  REWRITE_TAC[lower_case;Seq.size_map;Seq.size_iota];
  DISCH_TAC;
  TYPIFY `0` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `0` EXISTS_TAC;
  REPEAT (GMATCH_SIMP_TAC nth_iota_nod);
  ASM_SIMP_TAC[arith `i < j /\ j < n ==> i < n`;arith `i < j ==> ~(i=j)`];
  TYPIFY `i < n:num` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_TAC THEN ARITH_TAC);
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`i`;`j`]);
  ASM_REWRITE_TAC[];
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)


let path_of_loop_inj = prove_by_refinement(
  `!l l' d n.
    CARD (dart_of_loop l) = CARD (dart_of_loop l') /\
     CARD (dart_of_loop l') = n /\
   d IN dart_of_loop l /\ 
   d IN dart_of_loop l' /\
    MAP (path_of_loop l d) (iota 0 (n)) = 
    MAP (path_of_loop l' d) (iota 0 (n)) ==>
      l = l'`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Hypermap.lemma_loop_identity];
  REPEAT WEAKER_STRIP_TAC;
  SUBCONJ_TAC;
    REPEAT (GMATCH_SIMP_TAC Hypermap.lemma_dart_loop_via_path);
    REWRITE_TAC[RIGHT_AND_EXISTS_THM;in_dart_of_loop];
    GEXISTL_TAC [`d`;`d`];
    ASM_REWRITE_TAC[pre_card_dart_of_loop];
    REWRITE_TAC[support_of_sequence;EXTENSION;IN_ELIM_THM];
    GEN_TAC;
    INTRO_TAC Hypermap.lemma_card_dart_of_loop [`l`];
    INTRO_TAC Hypermap.lemma_card_dart_of_loop [`l'`];
    ASM_REWRITE_TAC[card_dart_of_loop;pre_card_dart_of_loop];
    ASM_SIMP_TAC[arith `0 < n ==> (!i. i <= PRE n <=> i < n)`];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `MAP` (MP_TAC o MATCH_MP MEM_EXTENSION);
    REWRITE_TAC[MEM_MAP;Seq.mem_iota;arith `0 <= x`;arith `0+n=n`];
    BY(MESON_TAC[]);
  DISCH_TAC;
  REWRITE_TAC[FUN_EQ_THM];
  GEN_TAC;
  TYPIFY `!k. k < n ==> (loop_map l POWER k) d = (loop_map l' POWER k) d` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `EL k (MAP (path_of_loop l d) (iota 0 n)) = EL k (MAP (path_of_loop l' d) (iota 0 n))` (C SUBGOAL_THEN MP_TAC);
      BY(ASM_REWRITE_TAC[]);
    REPEAT (GMATCH_SIMP_TAC EL_MAP);
    REPEAT (GMATCH_SIMP_TAC el_iota);
    ASM_SIMP_TAC[arith `0+k=k`;lower_case;Seq.size_iota];
    BY(REWRITE_TAC[path_of_loop]);
  INTRO_TAC Hypermap.lemma_card_dart_of_loop [`l`];
  ASM_REWRITE_TAC[card_dart_of_loop;pre_card_dart_of_loop];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `!k. (loop_map l POWER k) d = (loop_map l' POWER k) d` (C SUBGOAL_THEN ASSUME_TAC);
    GEN_TAC;
    INTRO_TAC DIVMOD_EXIST [`k`;`n`];
    ASM_SIMP_TAC[arith `0 < n ==> ~(n=0)`];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    ONCE_REWRITE_TAC [arith `a + b:num = b + a`];
    REWRITE_TAC[multiplication_exponents;addition_exponents;o_THM];
    INTRO_TAC Hypermap.lemma_order_loop_map [`l`];
    INTRO_TAC Hypermap.lemma_order_loop_map [`l'`];
    BY(ASM_SIMP_TAC[card_dart_of_loop;I_POWER;I_THM]);
  INTRO_TAC Hypermap.lemma_in_dart_of_loop_loop [`l`;`d`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[in_dart_of_loop]);
  ASM_REWRITE_TAC[pre_card_dart_of_loop;in_dart_of_loop];
  ASM_SIMP_TAC[arith `0 < n ==> (!i. i <= PRE n <=> i < n)`];
  DISCH_TAC;
  TYPIFY `(x IN dart_of_loop l)` ASM_CASES_TAC;
    FIRST_X_ASSUM MP_TAC;
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `loop_map l ((loop_map l POWER i) d)  = loop_map l' ((loop_map l' POWER i) d)` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[]);
    BY(ASM_MESON_TAC[COM_POWER;o_THM]);
  TYPIFY `(x IN dart_of_loop l')` ASM_CASES_TAC;
    FIRST_X_ASSUM MP_TAC;
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `loop_map l ((loop_map l POWER i) d)  = loop_map l' ((loop_map l' POWER i) d)` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[]);
    BY(ASM_MESON_TAC[COM_POWER;o_THM]);
  INTRO_TAC Hypermap.loop_map_and_loop_darts [`l`];
  INTRO_TAC Hypermap.loop_map_and_loop_darts [`l'`];
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_MESON_TAC[Hypermap.map_permutes_outside_domain])
  ]);;
  (* }}} *)


let loop_of_list_path_of_loop = prove_by_refinement(
  `!l d n.
     d IN (dart_of_loop l) /\
    CARD (dart_of_loop l) =n ==>
    loop_of_list (MAP (path_of_loop l d) (iota 0 n)) = l`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC path_of_loop_inj;
  GEXISTL_TAC [`d`;`n`];
  INTRO_TAC path_of_loop_of_list [`MAP (path_of_loop l d) (iota 0 n)`;`d`];
  TYPIFY `~(n = 0)` (C SUBGOAL_THEN ASSUME_TAC);
    DISCH_TAC;
    FIRST_X_ASSUM_ST `CARD` MP_TAC THEN ASM_REWRITE_TAC[] THEN GMATCH_SIMP_TAC CARD_EQ_0;
    BY(REWRITE_TAC[Hypermap.loop_map_and_loop_darts] THEN ASM_TAC THEN SET_TAC[]);
  TYPIFY `uniq (MAP (path_of_loop l d) (iota 0 n))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[path_of_loop_uniq]);
  TYPIFY `~(MAP (path_of_loop l d) (iota 0 n) = [])` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[MAP_EQ_NIL];
    BY(ASM_REWRITE_TAC[GSYM Seq.size_eq0;Seq.size_iota]);
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    GMATCH_SIMP_TAC HD_MAP;
    ASM_SIMP_TAC[hd_iota];
    ASM_REWRITE_TAC[GSYM Seq.size_eq0;Seq.size_iota];
    BY(REWRITE_TAC[path_of_loop;POWER_0;I_THM]);
  TYPIFY `sizel (MAP (path_of_loop l d) (iota 0 n)) = n` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Seq.size_map;lower_case;Seq.size_iota]);
  ASM_SIMP_TAC[];
  DISCH_THEN kill;
  REPEAT (GMATCH_SIMP_TAC dart_of_loop_of_list);
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  ASM_REWRITE_TAC[IN_SET_OF_LIST];
  REWRITE_TAC[ MEM_MAP];
  TYPIFY `0` EXISTS_TAC;
  REWRITE_TAC[Seq.mem_iota;path_of_loop;POWER_0;I_THM];
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let loop_of_list_surj = prove_by_refinement(
  `!l d. d IN dart_of_loop l  ==>
    ?r. l = loop_of_list r /\ sizel r = CARD (dart_of_loop l) /\
      uniq r /\ ~(r = []) /\ HD r = d`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `n = CARD (dart_of_loop l)`;
  TYPIFY `(MAP (path_of_loop l d) (iota 0 n))` EXISTS_TAC;
  INTRO_TAC loop_of_list_path_of_loop [`l`;`d`;`n`];
  ASM_SIMP_TAC[];
  DISCH_TAC;
  TYPIFY `~(n = 0)` (C SUBGOAL_THEN ASSUME_TAC);
    DISCH_TAC;
    FIRST_X_ASSUM_ST `CARD` MP_TAC THEN ASM_REWRITE_TAC[] THEN GMATCH_SIMP_TAC CARD_EQ_0;
    BY(REWRITE_TAC[Hypermap.loop_map_and_loop_darts] THEN ASM_TAC THEN SET_TAC[]);
  TYPIFY `uniq (MAP (path_of_loop l d) (iota 0 n))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[path_of_loop_uniq]);
  TYPIFY `~(MAP (path_of_loop l d) (iota 0 n) = [])` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[MAP_EQ_NIL];
    BY(ASM_REWRITE_TAC[GSYM Seq.size_eq0;Seq.size_iota]);
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC HD_MAP;
  ASM_SIMP_TAC[hd_iota];
  ASM_REWRITE_TAC[GSYM Seq.size_eq0;Seq.size_iota];
  (REWRITE_TAC[path_of_loop;POWER_0;I_THM]);
  BY(REWRITE_TAC[Seq.size_map;lower_case;Seq.size_iota])
  ]);;
  (* }}} *)

let loop_of_list_rot = prove_by_refinement(
  `!r k. uniq r  ==> 
    loop_of_list (rot k r) = loop_of_list r`,
  (* {{{ proof *)
  [
  REWRITE_TAC[loop_of_list];
  REWRITE_TAC[set_of_list_rot];
  BY(ASM_SIMP_TAC[Seq2.next_el_rot_eq])
  ]);;
  (* }}} *)

let loop_of_list_surj2 = prove_by_refinement(
  `!l d. d IN dart_of_loop l  ==>
    ?r. loop_of_list r = l /\ CARD (dart_of_loop (l)) =sizel r  /\
      uniq r /\ ~(r = []) /\ LAST r = d`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC (GSYM loop_of_list_surj) [`l`;`d`];
  ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `rot 1 r` EXISTS_TAC;
  ASM_REWRITE_TAC[Seq.size_rot;Seq.rot_uniq];
  INTRO_TAC Seq2.nth_shift_left [`HD r`;`r`;`sizel r - 1`];
  REWRITE_TAC[];
  REPEAT (GMATCH_SIMP_TAC (GSYM Seq2.EL_nth));
  TYPIFY `~(sizel r = 0)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_REWRITE_TAC[Seq.size_eq0]);
  ASM_SIMP_TAC[GSYM Seq.size_eq0;arith `~(n=0)==> 0<n`;Seq.size_rot;arith `~(n=0)==> (n-1)<n`];
  REWRITE_TAC[EL];
  DISCH_THEN (SUBST1_TAC o GSYM);
  CONJ2_TAC;
    GMATCH_SIMP_TAC LAST_EL;
    BY(ASM_REWRITE_TAC[GSYM Seq.size_eq0;lower_case;Seq.size_rot]);
  BY(ASM_SIMP_TAC[loop_of_list_rot])
  ]);;
  (* }}} *)

let DIH2K_IMP_PRE_SIMPLE_HYP2 = prove_by_refinement(
  `!H k x.  dih2k H k /\ ~(k=0) /\ x IN dart H ==>
     ~(node_map H x IN face H x)`,
  (* {{{ proof *)
  [
  BY(ASM_MESON_TAC[Hypermap.node_map_and_darts;Wrgcvdr_cizmrrh.DIH2K_IMP_PRE_SIMPLE_HYP])
  ]);;
  (* }}} *)

let set_of_list_pairs_set_of_list = 0;;


let quotient_bij_face_set = prove_by_refinement(
  `!H NF. is_normal H NF ==>
    BIJ (atoms_of_loop H) NF (face_set (quotient H NF))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[BIJ;SURJ;INJ];
  REPEAT WEAKER_STRIP_TAC;
  SUBCONJ_TAC;
    ASM_SIMP_TAC[Hypermap.lemmaQuotientFace;IN_ELIM_THM];
    CONJ_TAC;
      BY(MESON_TAC[]);
    POP_ASSUM MP_TAC THEN REWRITE_TAC[is_normal];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM MP_TAC;
    REWRITE_TAC[EXTENSION];
    INTRO_TAC Hypermap.lemma_card_dart_of_loop [`x`];
    REWRITE_TAC[card_dart_of_loop];
    REWRITE_TAC[EXTENSION;NOT_IN_EMPTY;NOT_FORALL_THM];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`atom H x x'`]);
    ASM_SIMP_TAC[lemma_in_atoms_of_loop2;in_dart_of_loop];
    FIRST_X_ASSUM_ST `L = L'` (C INTRO_TAC [`x`;`y`;`x'`]);
    ASM_REWRITE_TAC[in_dart_of_loop];
    REPEAT WEAKER_STRIP_TAC THEN FIRST_X_ASSUM MATCH_MP_TAC;
    TYPIFY `x' IN atom H x x'` (C SUBGOAL_THEN ASSUME_TAC);
      BY(REWRITE_TAC[atom_reflect]);
    FIRST_X_ASSUM_ST `atoms_of_loop` MP_TAC THEN REWRITE_TAC[atoms_of_loop;IN_ELIM_THM;in_dart_of_loop];
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC Hypermap.lemma_atom_sub_loop [`H`;`y`;`x''`];
    ASM_REWRITE_TAC[in_dart_of_loop];
    BY(REPLICATE_TAC 3 (POP_ASSUM MP_TAC) THEN SET_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[Hypermap.lemmaQuotientFace;IN_ELIM_THM];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let dih2k_quotient_card_NF = prove_by_refinement(
  `!H NF x. ~(CARD(face H x)=0) /\ 
    is_normal H NF /\ dih2k (quotient H NF) (CARD (face H x))
     ==>
    ~(SING NF)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC ZBHENEI_hypermap [`H`;`NF`];
  INTRO_TAC lemma_finite_atoms_of_family [`H`;`NF`];
  INTRO_TAC quotient_bij_face_set [`H`;`NF`];
  ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `k = CARD (face H x)`;
  INTRO_TAC Wrgcvdr_cizmrrh.dih2k [`k`;`quotient H NF`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `SING` MP_TAC;
  REWRITE_TAC[SING] THEN REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC DIH2K_IMP_PRE_SIMPLE_HYP2 [`quotient H NF`;`k`];
  ASM_SIMP_TAC[];
  REWRITE_TAC[NOT_FORALL_THM;NOT_IMP_THM];
  TYPIFY `~(dart(quotient H NF) = {})` (C SUBGOAL_THEN MP_TAC);
    TYPIFY `FINITE (dart(quotient H NF))` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[CARD_EQ_0;arith `k = 0 <=> 2 * k = 0`]);
    BY(REWRITE_TAC[Hypermap.node_map_and_darts]);
  ASM_REWRITE_TAC[EXTENSION;NOT_IN_EMPTY;NOT_FORALL_THM];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x''` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `node_map (quotient H {x'}) x'' IN dart (quotient H {x'})` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[Hypermap.lemma_dart_invariant]);
  TYPED_ABBREV_TAC `d = node_map (quotient H {x'}) x''`;
  TYPIFY `d IN face (quotient H {x'}) d` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[face_refl]);
  FIRST_X_ASSUM_ST `BIJ` MP_TAC;
  ASM_REWRITE_TAC[];
  TYPED_ABBREV_TAC `Hq = quotient H {x'}`;
  REWRITE_TAC[BIJ;SURJ;IN_INSERT;NOT_IN_EMPTY];
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_MESON_TAC[Hypermap.lemma_in_face_set])
  ]);;
  (* }}} *)

let final_list_f_last = prove_by_refinement(
  `!L r. ~(r = []) /\ final_list L r ==> f_last L r`,
  (* {{{ proof *)
  [
  REWRITE_TAC[final_list;f_last;GSYM Seq.allP];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM (LAST r) r` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEM_LAST;
    BY(ASM_REWRITE_TAC[]);
  ONCE_REWRITE_TAC[EQ_SYM_EQ];
  FIRST_X_ASSUM MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)


let AUQTZYZ_list = prove_by_refinement(
  `!L (f:(A#A)list).  good_list L /\ good_list_nodes L /\
    is_restricted (hypermap_of_list L) /\ 
    MEM f (list_of_faces L)  ==>
    (?r.  normal_list L [f;r] /\ 
       dih2k_list (quotient_list L [f;r]))`,
  (* {{{ proof *)
  [
  st/r
  abbrev `d = HD ( f)` 
  typ `~(f = [])` sat
  fxast `MEM` mp
  rt[List_hypermap.list_of_faces]
  rt[MEM_MAP]
  st/r
  fxast `list_parts` mp
  art[]
  rt[List_hypermap.list_pairs_empty]  
  amt[good_list;Seq.allP]
  typ `MEM d f` sat
  amt[MEM_HD]
  intro Auqtzyz.AUQTZYZ [`hypermap_of_list L`;`d`;`loop_of_face (hypermap_of_list L) d`]
  asimp[dart_hypermap_of_list;IN_SET_OF_LIST]
  typ `MEM d (list_of_darts L)` sat
  gm List_hypermap.mem_find_face_nonempty
  rt[List_hypermap.find_face]
  conj
  amt[good_list]
  mmp List_hypermap.mem_find_list
 rt[Seq2.mem_flatten]
  amt[]
  art[]
  st/r
  abbrev `k = sizel f`
  abbrev `n = CARD (dart_of_loop L2)`
  abbrev `qH = quotient (hypermap_of_list L)      {loop_of_face (hypermap_of_list L) d, L2}`
  typ `CARD (face (hypermap_of_list L) d) = k` sat
 asimp[List_hypermap.card_face_of_list]
  intro  List_hypermap.find_face_eq [`L`;`d`;`f`]
  asimp[]
  amt[good_list]
  typ `uniq (list_of_darts L) /\ uniq f` sat
  amt[good_list;List_hypermap.uniq_face]
  typ `!x. MEM x f ==> MEM x (list_of_darts L)` sat
  rt[List_hypermap.list_of_darts_alt;Seq2.mem_flatten]
  amt[]
  typ `final_list L f` sat
  mmp final_list_face
  art[]
    typ `dart_of_loop (loop_of_list f) = set_of_list f` sat
  asimp[dart_of_loop_of_list]
  typ `loop_of_face (hypermap_of_list L) d = loop_of_list f` sat
  intro loop_of_face_list [`L`;`f`;`d`]
  art[]
  repeat (fxast `{x,y}` mp) then art[]
  rep 2 dt
  fxast `complement` kill
  typ `~(k=0)` sat
  fxast `CARD` kill
  fexp "k"
  art[Seq.size_eq0]
  comment "1. pick out distinguished dart in second face"
  typ `?d'. d' IN dart_of_loop L2 /\ d' IN node (hypermap_of_list L) d` sat
  intro (GEN_ALL Wrgcvdr_cizmrrh.DIH_IMP_EVERY_NODE_INTER_FACE) [`k`;`qH`]
  fxast `dih2k` mp
  asimp[]
  dt
  typ `?a. a IN (dart_of_loop L2)` smp
  mt[Hypermap.lemma_card_dart_of_loop;EXTENSION;NOT_IN_EMPTY]
  st/r
  fxa (C intro [ `atom (hypermap_of_list L) (loop_of_list f) d`;`atom (hypermap_of_list L) L2 a`])
  rt[SUBSET;IN_INSERT;NOT_IN_EMPTY]
  ants
  fexp "qH"
  strip/r then asimp[lemma_quotient;atoms_of_family;IN_ELIM_THM;IN_INSERT;NOT_IN_EMPTY;in_dart_of_loop]
  amt[IN_SET_OF_LIST]
  amt[]
  st/r
  typ `d':A#A->bool` (name "atm")
  intro lemma_quotient [`hypermap_of_list L`;`{loop_of_list f,L2}`]
  art[]
  st/r
  intro lemmaQF [`hypermap_of_list L`;`{loop_of_list f,L2}`;`L2`;`a`]
  art[in_dart_of_loop;IN_INSERT]
  rt[Auqtzyz.atoms_of_loop_rep]
  rt[EXTENSION;IN_ELIM_THM]
  dthen (C intro [`atm`])
  art[]
  st/r
  typ `atom (hypermap_of_list L) L2 x = atm` sat
  rep 2 (pop mp) then set[]
  fexp "atm"
  pop kill
  fxa mp
  fxa kill
  rt[in_dart_of_loop]
  typ `x` (name "d'")
  dt
  typ `d'` ex
  art[]
  mmp Hypermap.lemma_in_node3
  typ `{loop_of_list f,L2}` ex
  art[]
  repeat (gm Hypermap.unique_atom_choice)
  typ `loop_of_list f` ex
  art[IN_INSERT;in_dart_of_loop;IN_SET_OF_LIST]
  typ `L2` ex
  art[]
  rt[Hypermap.darts_of_family;IN_UNIONS;IN_ELIM_THM;IN_INSERT]
  typ `dart_of_loop (loop_of_list f)` ex
  amt[IN_SET_OF_LIST]
  fxa mp
  st/r
  comment "end pick out distinguished dart"
  abbrev `last_d' = head_of_atom (hypermap_of_list L) {loop_of_list f,L2} d'`
  intro loop_of_list_surj2 [`L2`;`last_d'`]
  art[]
  intro change_to_margin [`hypermap_of_list L`;`{loop_of_list f,L2}`;`d'`;`L2`]
  art[in_dart_of_loop;IN_INSERT]
  st/r
  intro Hypermap.lemma_atom_sub_loop [`hypermap_of_list L`;`L2`;`d'`]
  fxast `tail_of_atom` kill
  ants
  art[in_dart_of_loop]
  dt
  typ `last_d' IN atom (hypermap_of_list L) L2 last_d'` sat
  rt[atom_reflect]
  typ `last_d' IN dart_of_loop L2` sat
  rep 5 (fxa mp) then set[]
 fxast `LAST` mp
  art[]
  st/r
  typ `r` ex
  fexp "L2"
  comment "end construction of d' and last_d'"
  comment "normal list"
  comment "all non nil"
  typ `all (\s. ~(s = [])) [f;r]` sat
  art[sym Seq.allP;MEM]
  strip/r then art[] then pop mp then art[]
  comment "uniq flatten"
  typ `~(loop_of_list f = loop_of_list r)` sat
  dt
  intro dih2k_quotient_card_NF [`hypermap_of_list L`;`{loop_of_list f,loop_of_list r}`;`d`]
  art[]
  rt[SING]
  dthen mp then ants
  fxast `dih2k` mp then art[]
  art[]
  set[]
  typ `uniq (flatten [f;r])` sat
  art[Seq.flatten_cons;Seq.flatten0;Seq.cats0;Seq.cat_uniq]
  rt[sym Seq.hasP;NOT_EXISTS_THM]
  st/r
  fxast `is_normal` mp  
  rt[is_normal]
  st/r
  fxast `L = L'` (C intro [`loop_of_list f`;`loop_of_list r`;`x`])
  asimp[IN_INSERT;in_dart_of_loop;in_dart_loop_of_list]
  comment "loop_list"
  intro is_normal_loop_list [`L`;`[f;r]`]
  art[]
  typ `all uniq [f;r]` sat
  art[sym Seq.allP;MEM]
  amt[]
  typ `loop_family_of_list [f;r] = {loop_of_list f,loop_of_list r}` sat
  rt[loop_family_of_list;upper_case;MAP;set_of_list]
  art[]
  dt
  comment "is_normal_nodal"
  intro is_normal_nodal [`L`;`[f;r]`]
  art[]
  dt
  comment "f_last"
  intro lemma_head_of_atom_via_restricted [`hypermap_of_list L`;`{loop_of_list f,loop_of_list r}`;`loop_of_list r`;`last_d'`]
  art[IN_INSERT;in_dart_of_loop]
  asimp[loop_map_next_el]  
  gm face_map_list
  art[]
  rt[sym Seq.allP;MEM]
  fexp "last_d'"

....

  comment "dih2k"
  ]);;
  (* }}} *)

normal_list;;
f_last;;
bb 3;;
Auqtzyz.AUQTZYZ;;
iso_list_good_list_nodes;;
mem_transpose_seed;;
list_pairs_unique;;
(* ... ... ... ... ...*)
xxd
