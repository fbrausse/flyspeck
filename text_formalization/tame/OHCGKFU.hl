(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Ohcgkfu= struct

open Pwssrat;;


let indexf_indexl_hd=  prove_by_refinement(`!x:(A)list. indexf (HD x) y x= indexl y x`,
[
LIST_INDUCT_TAC;

REWRITE_TAC[APPEND_NIL;MEM;HD;Tame_list.indexf;Seq2.index_eq_size]
THEN MRESAL_TAC Seq2.index_eq_size[`y`;`[]:(A)list`][MEM];

REWRITE_TAC[APPEND_NIL;MEM;HD;Tame_list.indexf;Seq2.index_eq_size]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`y = h \/ MEM y t`][Seq.index_head;ARITH_RULE`A-0=A`;Oxl_2012.MOD_ADD_CANCEL;MOD_0]
THEN MRESAL_TAC Dangeyj.mem_imp_not_nil[`h::t`;`h`][MEM]
THEN MRESAL_TAC sizel0_not_nil[`h::t`][ARITH_RULE`0<a<=> ~(a=0)`;MOD_0];

MATCH_MP_TAC MOD_LT
THEN ASM_SIMP_TAC[Seq.index_mem;MEM];

MRESAL_TAC Seq2.index_eq_size[`y`;`h :: t:(A)list`][MEM]]);;

let indexl_append_not=prove(`!x. MEM d x /\ uniq x/\ ~(MEM d y) ==> indexl d (APPEND x y)= 
indexl d x`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;APPEND;HD;Seq.uniq;Seq.index_head]
THEN RESA_TAC
THEN REWRITE_TAC[MEM;APPEND;HD;Seq.uniq;Seq.index_head;Seq2.index_cons]
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`d`;`t`]
THEN DICH_TAC 5
THEN RESA_TAC);;


let indexf_append_not=prove(`!x z. MEM d x /\ uniq x/\ ~(MEM d y)/\ HD x = z ==> indexf z d (APPEND x y)= 
indexf z d x`,
REPEAT RESA_TAC
THEN MRESA_TAC indexf_indexl_hd[`d`;`x`]
THEN MRESAL_TAC Dangeyj.mem_imp_not_nil[`x`;`d`][MEM]
THEN MRESAL_TAC indexf_indexl_hd[`d`;`APPEND x y`][HD_APPEND]
THEN MATCH_MP_TAC indexl_append_not
THEN ASM_REWRITE_TAC[]);;

let uniq_sing=prove(`uniq [x]`,
REWRITE_TAC[Seq2.uniq;MEM]);;


let uniq_fst_split=prove(`!r u. uniq (APPEND u r) ==> uniq (FST (split_at_rec r1 u r))`,
LIST_INDUCT_TAC
THEN SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`h=r1`]
THENL[ SIMP_TAC[Seq.cat_uniq;Seq2.APPEND_cat;Seq.mem_seq1;GSYM Seq.hasPn;uniq_sing];
GEN_TAC
THEN MRESAL_TAC APPEND_ASSOC[`u`;`[h]`;`t`][APPEND;MEM;DE_MORGAN_THM]
]);;


let uniq_fst_snd_split= prove_by_refinement(`!r:(A)list. uniq r /\ MEM x (FST (split_at r1 r))==> ~(MEM x (SND (split_at r1 r)))`,
[
LIST_INDUCT_TAC
THEN SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL;MEM;Seq.uniq]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`h=r1`]
THEN SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL;MEM;Seq.uniq];

MRESAL_TAC APPEND_FST_SPLIT[`r1`;`t`;`APPEND [] [h]`;`[]:(A)list`][APPEND_NIL;APPEND;MEM]
THEN MRESA_TAC snd_split_at_rec_const[`r1`;`t`;`[h]`;`[]:(A)list`]
THEN RES_TAC;

STRIP_TAC
THEN MRESA_TAC Tame_list.split_at_mem_snd[`t`;`r1`;`x`;`[]:(A)list`];

DICH_TAC 6
THEN ASM_SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL;MEM;Seq.uniq]]);;



let uniq_betwn= prove_by_refinement(`!r:(A)list. uniq r /\ MEM z r /\ MEM y r /\ ~(z=y)==> uniq (betwn r z y)`,
[
REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs.betwn;LET_THM;fst_snd_fun;IN_SET_OF_LIST]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~ A`)[`MEM y (SND (split_at z r))`];

SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL]
THEN MATCH_MP_TAC uniq_fst_split
THEN REWRITE_TAC[APPEND]
THEN MATCH_MP_TAC Dangeyj.uniq_snd_split
THEN ASM_REWRITE_TAC[];

REWRITE_TAC[Seq.cat_uniq;Seq2.APPEND_cat;Seq.mem_seq1;GSYM Seq.hasPn;uniq_sing]
THEN REPEAT RESA_TAC;

SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL]
THEN MATCH_MP_TAC Dangeyj.uniq_snd_split
THEN ASM_REWRITE_TAC[];

DICH_TAC 1
THEN SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.split_at_mem_fst[`FST (split_at_rec z [] r)`;`y`;`x`;`[]:(A)list`]
THEN DICH_TAC 1
THEN MRESAL_TAC uniq_fst_snd_split[`x`;`z`;`r`][Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL]
THEN DICH_TAC 1
THEN REWRITE_TAC[MEM];

SIMP_TAC[Tame_defs.split_at;Tame_defs.split_at_rec;APPEND;APPEND_NIL]
THEN MATCH_MP_TAC uniq_fst_split
THEN ASM_REWRITE_TAC[APPEND]
THEN MATCH_MP_TAC uniq_fst_split
THEN ASM_REWRITE_TAC[APPEND]]);;



let uniq_append_betwn= prove_by_refinement(`uniq r /\ MEM z r /\ MEM y r /\ ~(z=y)==> uniq(APPEND [z] (APPEND (betwn r z y) [y]))`,
[
REWRITE_TAC[Seq.cat_uniq;Seq2.APPEND_cat;Seq.mem_seq1;GSYM Seq.hasPn;uniq_sing]
THEN REPEAT RESA_TAC;

DICH_TAC 1
THEN ASM_SIMP_TAC[GSYM Seq2.APPEND_cat;MEM_APPEND;Seq.mem_seq1;Tame_list.not_betwn1];

MATCH_MP_TAC uniq_betwn
THEN ASM_REWRITE_TAC[];

DICH_TAC 0
THEN ASM_SIMP_TAC[Tame_list.not_betwn2]]);;


let sing_not_nil=prove(`~([x] = [])`,
ASM_SIMP_TAC[List_hypermap.mem_not_nil]
THEN GEXISTS_TAC`x`
THEN REWRITE_TAC[MEM]);;


let indexl_last_sizel=prove(`!s. uniq (APPEND s [y])==> indexl y (APPEND s [y])= sizel s `,
LIST_INDUCT_TAC
THEN ASM_SIMP_TAC[APPEND;Seq.size_nil;Seq.index_head;Seq2.index_cons;Seq.uniq;MEM_APPEND;Seq.mem_seq1;Seq.size_cons;DE_MORGAN_THM]);;



let AQIUNPP3_concl = 
  `!L N r (x:A#A) i.
    marked_list L N r x ==> 
    marked_list L (ntrans L N r x i) (rtrans L N r x i) x`;;

let HQYMRTX1_list = `!L N r (x:A#A). marked_list L N r x /\ ~final_list L r
  ==> MEM (l'z L N r x) r /\
    (!i. 1 <= i /\ i <= SUC (l'm L r x) ==>
       ~(l'z L N r x = (f_list L POWER i) x))`;;



let OHCGKFU_concl = `!L N r (x:A#A) d i.  good_list L/\ marked_list L N r x /\ 
  MEM d (rtrans L N r x i) /\ (MEM d (rtrans L N r x (SUC i))) ==>
      indexf (ztrans L N r x i) d (rtrans L N r x i) =
      indexf (ztrans L N r x i) d (rtrans L N r x (SUC i))`;;




let OHCGKFU= prove_by_refinement( (mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,OHCGKFU_concl)))),
[
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN THAYTHEL_ASM_TAC 3[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z=prev_el r1 (ztrans L N r x i)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r1`];


DICH_ASM_TAC(17-6)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN GABBREV_TAC`z1=(ztrans L N r x i)`
THEN MRESA_TAC(SET_RULE`!A. A\/ ~ A`)[`MEM d (betwn (find_face L y) y z1)`];





STRIP_TAC
THEN MP_TAC ztran_in_face_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC mem_ytrans_list_of_darts
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(32)[List_hypermap.good_list]
THEN GABBREV_TAC`L1=(find_face L y)`
THEN MRESA_TAC List_hypermap.uniq_find_face[`y`;`L`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`L1`;`y`;`d`;`z1`]
THEN MRESA_TAC Tame_list.betwn_mem[`L1`;`y`;`z1`;`d`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`d`;`L1`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`z1`;`L1`]
THEN MP_TAC indexf_ytrans_suc_lp
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`ntrans L N r x i`][Tame_defs2.ytrans;]
THEN DICH_TAC(42-38)
THEN RESA_TAC
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf y d L1`][ARITH_RULE`1<=a<=> 0<a`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a< SUC b==> a<b`)[`PRE (indexf y d L1)`;`(l'p L (ntrans L N r x i) r1 x)`]
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`indexf y d L1`]
THEN MP_TAC f_list_power_ytrans_not_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN THAYTHE_TAC 0[`PRE(indexf y d L1)`];





MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC uniq_append_betwn[`r1`;`z1`;`y`]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RES_TAC;


MRESAL_TAC indexf_append_not[`(betwn (find_face L y) y z1)`;`d`;`(APPEND [z1] (APPEND (betwn r1 z1 y) [y]))`;`z1`][HD_APPEND;sing_not_nil;HD;MEM_APPEND;Seq.mem_seq1]
THEN ASM_SIMP_TAC[Tame_list.indexf_refl]
THEN MRESAL_TAC Tame_list.indexf_refl[`z1`;`(APPEND [z1] (APPEND (betwn r1 z1 y) [y]))`][HD_APPEND;sing_not_nil;HD;MEM_APPEND;Seq.mem_seq1];



MRESAL_TAC indexf_append_not[`(betwn (find_face L y) y z1)`;`d`;`(APPEND [z1] (APPEND (betwn r1 z1 y) [y]))`;`z1`][HD_APPEND;sing_not_nil;HD;MEM_APPEND;Seq.mem_seq1;]
THEN MRESAL_TAC indexf_indexl_hd[`d`;`(APPEND [z1] (APPEND (betwn r1 z1 y) [y]))`][HD_APPEND;sing_not_nil;HD;MEM_APPEND;Seq.mem_seq1;]
THEN MRESA_TAC Tame_list.indexl_betwn[`z1`;`d`;`y`;`r1`]
THEN SYM_DICH_TAC 0
THEN REWRITE_TAC[APPEND;Seq2.index_cons]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`z1 = d`];


MRESA_TAC Tame_list.not_betwn1[`z1`;`y`;`r1`]
THEN DICH_TAC(36-32)
THEN RESA_TAC;



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y = d`];


MRESA_TAC Tame_list.not_betwn2[`z1`;`y`;`r1`]
THEN DICH_TAC(37-32)
THEN RESA_TAC;



MRESA_TAC uniq_betwn[`z1`;`y`;`r1`]
THEN MRESAL_TAC indexl_append_not[`[y]`;`d`;`betwn r1 z1 y`;][Seq.mem_seq1;]
;




MRESAL_TAC indexf_append_not[`(betwn (find_face L y) y z1)`;`d`;`(APPEND [z1] (APPEND (betwn r1 z1 y) [y]))`;`z1`][HD_APPEND;sing_not_nil;HD;MEM_APPEND;Seq.mem_seq1;]
THEN MRESAL_TAC indexf_indexl_hd[`d`;`(APPEND [z1] (APPEND (betwn r1 z1 y) [y]))`][HD_APPEND;sing_not_nil;HD;MEM_APPEND;Seq.mem_seq1;]
THEN MRESA_TAC Tame_list.size_betwn[`z1`;`y`;`r1`]
THEN MRESA_TAC Tame_list.indexf0[`z1`;`y`;`r1`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf z1 y r1`][ARITH_RULE`1<=a<=> ~(a=0)`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th])
THEN SYM_DICH_TAC 1
THEN ASM_REWRITE_TAC[APPEND;Seq2.index_cons]
THEN GSUBGOAL_THEN`uniq (APPEND (betwn r1 z1 y) [y])`ASSUME_TAC
;


DICH_TAC(35-31)
THEN REWRITE_TAC[Seq.cat_uniq;Seq2.APPEND_cat;Seq.mem_seq1;GSYM Seq.hasPn;uniq_sing]
THEN REPEAT RESA_TAC;



MRESA_TAC indexl_last_sizel[`y`;`(betwn r1 z1 y)`]]);;



 end;;



