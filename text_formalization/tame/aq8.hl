open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Aq8= struct

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;


open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;
open Pbflhet;;
open Kbwpbhq;;
open Hojodcm;;
open Aq1;;
open Aq23;;
open Aq4;;


let AQ_normal_list=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
normal_list L (ntrans L N r x 1)`,
REPEAT RESA_TAC
THEN ASM_SIMP_TAC[Tame_defs2.normal_list;AQ1;AQ2;AQ3;Aq4.AQ4;Aq56.AQ5]);;


let snd_mem_rtran1=prove(`  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
MEM (SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) )) (ntrans L N r x 1)`,
REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MATCH_MP_TAC (SET_RULE`A==>A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1]);;


let parts_mem_exists=prove(`!L r. uniq r /\ MEM x r ==> ?p. MEM p (parts L r) /\ MEM x p`,
REPEAT RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN DICH_TAC 2
THEN POP_ASSUM(fun th-> GEN_REWRITE_TAC(LAND_CONV o ONCE_DEPTH_CONV)[SYM th])
THEN REWRITE_TAC[Seq2.mem_flatten]);;


let MEM_POWER_NEXT_EL=prove(`!k. MEM x r ==> MEM (((next_el r) POWER k) x) r`,
INDUCT_TAC
THEN
REWRITE_TAC[POWER;COM_POWER;o_DEF;I_DEF]
THEN RESA_TAC
THEN DICH_TAC 1
THEN RESA_TAC
THEN ASM_SIMP_TAC[GSYM next_el_rotate;Seq2.mem_next_el]);;



let uniq_imp_inj=prove_by_refinement(`!y. uniq (MAP f y)
==> (!u v. MEM u y /\ MEM v y /\ f u = f v ==> u = v)`,
[
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;MEM;Seq.uniq;MAP]
THEN RESA_TAC
THEN DICH_TAC 2
THEN REPEAT RESA_TAC;

DICH_TAC 5
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[MEM_MAP]
THEN RESA_TAC
THEN GSUBGOAL_THEN`?x. MEM x t /\ f v = f x`ASSUME_TAC;

GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

ASM_REWRITE_TAC[];

DICH_TAC 5
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[MEM_MAP]
THEN RESA_TAC
THEN GSUBGOAL_THEN`?x. MEM x t /\ f h = f x`ASSUME_TAC;

GEXISTS_TAC`u`
THEN ASM_REWRITE_TAC[];

ASM_REWRITE_TAC[];

MATCH_DICH_TAC 3
THEN ASM_REWRITE_TAC[]]);;



let next_cat_betwn_same=prove_by_refinement(`uniq r /\ MEM y r /\ MEM z r/\ ~(y=z) /\ MEM a s/\ APPEND [z] (APPEND (betwn r z y) [y]) =s/\ ~(a=y)
==> next_el s a = next_el r a`,
[
REPEAT RESA_TAC
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`]
THEN DICH_TAC 3
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC;

MRESAL_TAC Tame_list.next_el_cat_last1[`[z]`;`(APPEND (betwn r z y) [y])`][Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat;APPEND_EQ_NIL;LAST_CLAUSES;HD_APPEND] 
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r z y = []`];

MRESAL_TAC Aq4.betwn_eq_nil[`z`;`y`;`r`][HD];

MRESA_TAC Dangeyj.HD_BETWN2[`r`;`z`;`y`];

MRESAL_TAC Tame_list.next_el_cat2[`a`;`[z]`;`(APPEND (betwn r z y) [y])`][MEM_APPEND;LAST_APPEND;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat;LAST]
THEN  MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST(betwn r z y)=a`];

DICH_TAC(9-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.cat_uniq]
THEN RESA_TAC
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;Seq.cat_uniq]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r z y`;`a`]
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`(betwn r z y)`;`[y]`][Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat;APPEND_EQ_NIL;LAST_CLAUSES;HD_APPEND;Seq.cat_uniq;HD] 
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`z`;`y`];

DICH_TAC(9-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.cat_uniq]
THEN RESA_TAC
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;Seq.cat_uniq]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r z y`;`a`]
THEN MRESAL_TAC Tame_list.next_el_cat1[`a`;`betwn r z y`;`[y]`][GSYM Seq2.APPEND_cat]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`z`;`y`;`a`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`z`;`y`;`a`;`r`]]);;



let last_parts_y_not_y=prove(`  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r /\ l'y L r x = y /\ l'z L N r x = z
/\ MEM p (parts L r) /\ MEM y p
==>
~((LAST p)=y)`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (7-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`z1=prev_el r z`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Aq1.next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`p`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN RESA_TAC);;


let last_parts_y_not_z=prove(`  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r /\ l'y L r x = y /\ l'z L N r x = z
/\ MEM p (parts L r) /\ MEM y p
==>
~(LAST p=z)`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (7-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`z1=prev_el r z`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Aq1.next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`LAST p`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC 2
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]);;



let indexf_eq_in_parts=prove(`normal_list L N /\ MEM r N/\
    MEM x p /\
    MEM p (parts L r)
==> indexf (HD p) x r = indexl x p`,
REPEAT RESA_TAC
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p`]
THEN THAYTHE_ASM_TAC 0[`x`]
THEN MRESA_TAC Tame_list.MEM_HD[`p`]
THEN THAYTHE_ASM_TAC 1[`HD p`]
THEN MRESA_TAC Seq.index_mem[`x`;`p`]
THEN MRESA_TAC Seq.uniq_leq_size[`p`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b /\ b<=c ==> a<c`)[`indexl x p`;`sizel p`;`sizel r`]
THEN MRESAL_TAC Tame_list.next_el_parts_power[`L`;`r`;`p`;`indexl x p`;`HD p`][Pplhulj.indexl_hd;ARITH_RULE`0+a=a`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`x`;`p`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Tame_list.indexf_n[`HD p`;`x`;`p`]);;



let last_parts_y_not_betwn=prove(`  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r /\ l'y L r x = y /\ l'z L N r x = z
/\ MEM p (parts L r) /\ MEM y p
==>
~(MEM (LAST p) (betwn r z y))`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (7-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`z1=prev_el r z`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Aq1.next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`p`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~ A`)[`LAST p= y`]
THENL[

DICH_TAC 1
THEN RESA_TAC;

MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p`]
THEN MRESA_TAC last_parts_y_not_z[`y`;`p`;`z`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`z`;`LAST p`;`y`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`z`;`LAST p`;`y`;`r`]
THEN MRESA_TAC(ARITH_RULE`! a b c:num. a+b=c==> b<=c`)[`indexf z (LAST p) r `;` indexf (LAST p) y r `;` indexf z y r`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`LAST p`]
THEN MRESA_TAC Tame_list.indexf_antisym[`LAST p`;`y`;`r`]
THEN MRESA_TAC Tame_list.indexf_antisym[`z`;`y`;`r`]
THEN MRESA_TAC (ARITH_RULE`!a b c d e:num. a+b=c /\ d+e=c /\ a<=d==> e<=b`)
[`indexf (LAST p) y r `;` indexf y (LAST p) r `;` sizel r`;`indexf z y r `;` indexf y z r`]
THEN MRESA_TAC indexf_eq_in_parts[`N`;`L`;`r`;`y`;`p`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC indexf_eq_in_parts[`N`;`L`;`r`;`LAST p`;`p`]
THEN MRESA_TAC Tame_list.indexl_LAST[`p`]
THEN MRESA_TAC Seq.index_mem[`y`;`p`]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b==> a<=b-1`)[`indexl y p`;`sizel p`]
THEN MRESA_TAC Tame_list.MEM_HD[`p`]
THEN THAYTHE_ASM_TAC(62-45)[`HD p`]
THEN MRESA_TAC Tame_list.indexf_add_left[`HD p`;`y`;`LAST p`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a b c d. a+b=c-1/\a<c /\ d<=b==> a+d< c`)[`indexl y p `;` indexf y (LAST p) r `;` sizel p`;`indexf y z r`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`z`;`r`]
THEN MRESA_TAC Tame_list.next_el_parts_power[`L`;`r`;`p`;`indexf y z r`;`y`]
THEN MRESA_TAC MEM_POWER_NEXT_EL[`y`;`p`;`indexf y z r`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`y`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`z`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]]);;


let last_parts_y_not_cat=prove(`  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r /\ l'y L r x = y /\ l'z L N r x = z
/\ MEM p (parts L r) /\ MEM y p
==>
~(MEM (LAST p) (APPEND [z] (APPEND (betwn r z y) [y])))`,
REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN MRESA_TAC last_parts_y_not_z[`y`;`p`;`z`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC last_parts_y_not_betwn[`p`;`z`;`y`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC last_parts_y_not_y[`z`;`p`;`y`;`L`;`N`;`r`;`x`]);;

let MEM_PARTS_IMP=prove(`uniq r /\ ~(r = []) /\ MEM p (parts L r) ==>
(!a. MEM a p==> MEM a r) `,
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th])
THEN REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[]);;





let  parts_f_betwn_pure=prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
(parts L (betwn (find_face L x) ((l'y L r x)) (l'z L N r x)))=MAP (\x. [x]) (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))`,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core];

GSUBGOAL_THEN`(!x. MEM x (betwn f y z)
           ==> x = LAST (betwn f y z) \/
               ~(next_el (betwn f y z) x = f_list L (e_list x)))`ASSUME_TAC;

REPEAT RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d = LAST (betwn f y z)`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`f`;`y`;`z`;`d`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`y`;`z`;`d`;`f`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`d`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.good_list_e_list[`L`;`d`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`d`;`e_list (d)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;List_hypermap.dart_in_face]
THEN DICH_TAC 0
THEN MRESAL_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`d`][List_hypermap.dart_in_face];

MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN MRESA_TAC Tame_list.parts_impure[`L`;`betwn f y z`]])
;;



let uniq_fst_betwn_parts=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
uniq (MAP (FST o HD) (parts L (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))))`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC parts_f_betwn_pure[`L`;`N`;`r`;`x`][GSYM MAP_o;o_DEF;HD]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN MRESA_TAC Tame_list.uniq_map[`betwn f y z`;`(\x:A#A. FST x):(A#A)->A`]
THEN MATCH_DICH_TAC 0
THEN REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`u`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`v`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`u`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`v`;`x`;`L`]
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`u`;`v`][List_hypermap.dart_in_face]
THEN DICH_ASM_TAC(45-4)[Hypermap.is_restricted;Hypermap.simple_hypermap]
THEN MRESAL_TAC List_hypermap.face_of_list[`L`;`u`][List_hypermap.dart_in_face]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\u. node (hypermap_of_list L) u INTER face (hypermap_of_list L) u = {u})`]
THEN THAYTHEL_TAC(0)[`u`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;]
THEN DICH_TAC 0
THEN GSUBGOAL_THEN`v IN node (hypermap_of_list L) u INTER set_of_list f`ASSUME_TAC
THENL[
ASM_REWRITE_TAC[INTER;IN_ELIM_THM;IN_SET_OF_LIST];

STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[IN_SING]
THEN RESA_TAC]);;







let uniq_snd_split_normal_parts=prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
uniq (core L (SND (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)) )))`,
[


REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core];



ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`betwn (find_face L y) y z = []`][Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM;LAST_CLAUSES]
;



ASM_REWRITE_TAC[APPEND_NIL]
THEN MRESAL_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL]
THEN MRESAL_TAC snd_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL]
THEN DICH_TAC (38-8)
THEN ASM_REWRITE_TAC[LET_THM;GSYM Seq.allP;Tame_list.quotient_list_core]
THEN RESA_TAC
THEN THAYTHES_TAC 1[`core L r`][Tame_list.MEMf_MAP;]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN GSUBGOAL_THEN`!d. MEM d (MAP (FST o HD) (parts L (APPEND [z] (APPEND (betwn r z y) [y])))) ==> MEM d (MAP (FST o HD) (parts L r))`ASSUME_TAC;




REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x'`
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND [z] (APPEND (betwn r z y) [y]))`;`p`]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x''`
THEN THAYTHE_TAC 1[`d1`]
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;



DICH_TAC 0
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d1`]
;



MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`(APPEND [z] (APPEND (betwn r z y) [y]))`;`p`;`d1`]
THEN MRESA_TAC parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[];


GABBREV_TAC`s=(APPEND [z] (APPEND (betwn r z y) [y]))`
THEN GABBREV_TAC`s1=(MAP (FST o HD) (parts L s))`
THEN GABBREV_TAC`r1=(MAP (FST o HD) (parts L r))`
THEN GSUBGOAL_THEN`~(s1=[])`ASSUME_TAC
;


EXPAND_TAC"s1"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN MRESA_TAC parts_mem_exists[`y`;`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN GEXISTS_TAC`(FST o HD) p`
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[];


GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;


EXPAND_TAC"s"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN GEXISTS_TAC`z`
THEN REWRITE_TAC[];



GSUBGOAL_THEN`uniq(MAP (LAST) ((parts L s)))`ASSUME_TAC
;


MATCH_MP_TAC Tame_list.uniq_map
THEN MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN REPEAT RESA_TAC
THEN MATCH_MP_TAC Tame_list.parts_last_inj
THEN GEXISTS_TAC`L`
THEN GEXISTS_TAC`(ntrans L N r x 1)`
THEN GEXISTS_TAC`s`
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
;




GSUBGOAL_THEN`(!u. MEM u (parts L s)==> ?v. MEM v (parts L r)/\ (!a. MEM a u==> MEM a v)/\ FST(HD u)= FST(HD v)) `ASSUME_TAC
;



REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND [z] (APPEND (betwn r z y) [y]))`;`u`]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d=x'`
THEN THAYTHE_ASM_TAC 1[`d`]
THEN GSUBGOAL_THEN`MEM d r`ASSUME_TAC;



DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`]
;


MRESA_TAC parts_mem_exists[`d`;`L`;`r`]
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[]
THEN REPEAT RESA_TAC
;


THAYTHE_ASM_TAC (55-51)[`a`]
THEN GSUBGOAL_THEN`MEM a r`ASSUME_TAC;



DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`a`]
;



MRESA_TAC parts_mem_exists[`a`;`L`;`r`]
THEN CHANGE_TAC`p1=p'`
THEN MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`s`;`u`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`s`;`u`;`a`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p1`;`a`]
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p`;`p1`][o_DEF];




MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`s`;`u`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
;




GSUBGOAL_THEN`(!u v. MEM u (parts L s) /\ MEM v (parts L s) /\ (FST o HD) u = (FST o HD) v ==> u = v)`ASSUME_TAC
;



REWRITE_TAC[o_DEF]
THEN REPEAT RESA_TAC
THEN THAYTHE_ASM_TAC 3[`u`]
THEN THAYTHE_ASM_TAC 0[`v`]
THEN CHANGE_TAC`p=v'`
THEN CHANGE_TAC`p1=v''`
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p1`;`p`][o_DEF]
THEN POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th])
THEN REPEAT RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_next_unlast[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`p`]
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST u=LAST v`]
;



MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`u`;`v`;`(parts L s)`;`LAST u`]
;



MRESA_TAC(SET_RULE`!a b c. ~(a=b)==> ~(a=c)\/ ~(b=c)`)[`LAST u`;`LAST v`;`y`]
;



MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN THAYTHE_TAC 1[`LAST u`]
THEN MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST u`]
THEN THAYTHE_TAC (66-51)[`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u= LAST p`];



DICH_TAC(67-59)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN THAYTHE_TAC 1[`LAST v`]
THEN THAYTHE_TAC (71-52)[`LAST v`]
THEN THAYTHE_TAC (71-54)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v=y`];







POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_y_not_cat[`p`;`z`;`y`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(74-61)
THEN RESA_TAC;




MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST v`]
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];



THAYTHE_TAC(67-55)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(3)
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];









MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN THAYTHE_TAC 1[`LAST v`]
THEN MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST v`]
THEN THAYTHE_TAC (66-53)[`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v= LAST p`];



DICH_TAC(67-59)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN THAYTHE_TAC 1[`LAST u`]
THEN THAYTHE_TAC (71-51)[`LAST u`]
THEN THAYTHE_TAC (71-54)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u=y`];







POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_y_not_cat[`p`;`z`;`y`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(74-61)
THEN RESA_TAC;




MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST u`]
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];



THAYTHE_TAC(67-55)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(3)
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];



MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN MRESA_TAC Tame_list.uniq_map[`(parts L s)`;`(FST o HD):(A#A)list->A`]
;





MRESAL_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL]
THEN MRESAL_TAC snd_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL]
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`APPEND [z] (APPEND (betwn r z y) [y])`;`(betwn f y z)`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`f`;`y`;`z`]
THEN GSUBGOAL_THEN`~(next_el f y = f_list L (e_list y))`ASSUME_TAC
;



MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAS_TAC F_LIST_INJ[`L`;`y`;`e_list y`][List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`y`]
;



MRESAL_TAC Tame_list.parts_cat[`L`;`(APPEND (APPEND [z] (APPEND (betwn r z y) [y])) (betwn f y z))`;
`APPEND [z] (APPEND (betwn r z y) [y])`;`(betwn f y z)`;`y`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;MAP_APPEND]
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.cat_uniq]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat]
THEN RESA_TAC;





(***CASE 1***)


DICH_TAC (42-8)
THEN ASM_REWRITE_TAC[LET_THM;GSYM Seq.allP;Tame_list.quotient_list_core]
THEN RESA_TAC
THEN THAYTHES_TAC 1[`core L r`][Tame_list.MEMf_MAP;]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN GSUBGOAL_THEN`!d. MEM d (MAP (FST o HD) (parts L (APPEND [z] (APPEND (betwn r z y) [y])))) ==> MEM d (MAP (FST o HD) (parts L r))`ASSUME_TAC;




REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x'`
THEN GABBREV_TAC`s=APPEND [z] (APPEND (betwn r z y) [y])`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`]
THEN GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;


EXPAND_TAC"s"
THEN REWRITE_TAC[APPEND_EQ_NIL;Ohcgkfu.sing_not_nil];


MRESA_TAC MEM_PARTS_IMP[`L`;`p`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`p`][MEM_APPEND]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x''`
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;



THAYTHE_TAC(54-50)[`d1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d1`]
;



MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`p`;`d1`][MEM_APPEND]
THEN MRESA_TAC parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d1`]
;


GABBREV_TAC`s=(APPEND [z] (APPEND (betwn r z y) [y]))`
THEN GABBREV_TAC`s1=(MAP (FST o HD) (parts L s))`
THEN GABBREV_TAC`r1=(MAP (FST o HD) (parts L r))`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`]
THEN GSUBGOAL_THEN`~(s1=[])`ASSUME_TAC
;


EXPAND_TAC"s1"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN MRESA_TAC parts_mem_exists[`y`;`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN GEXISTS_TAC`(FST o HD) p`
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[];


GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;


EXPAND_TAC"s"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN GEXISTS_TAC`z`
THEN REWRITE_TAC[];




GSUBGOAL_THEN`(!u. MEM u (parts L s)==> ?v. MEM v (parts L r)/\ (!a. MEM a u==> MEM a v)/\ FST(HD u)= FST(HD v)) `ASSUME_TAC
;



REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`][MEM_APPEND]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d=x'`
THEN MRESA_TAC MEM_PARTS_IMP[`L`;`u`;`s`]
THEN THAYTHE_ASM_TAC 0[`d`]
THEN GSUBGOAL_THEN`MEM d r`ASSUME_TAC;



DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`]
;


MRESA_TAC parts_mem_exists[`d`;`L`;`r`]
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[]
THEN REPEAT RESA_TAC
;


THAYTHE_ASM_TAC (55-51)[`a`]
THEN GSUBGOAL_THEN`MEM a r`ASSUME_TAC;



DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`a`]
;



MRESA_TAC parts_mem_exists[`a`;`L`;`r`]
THEN CHANGE_TAC`p1=p'`
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`;`d`][MEM_APPEND]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`;`a`][MEM_APPEND]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p1`;`a`]
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p`;`p1`][o_DEF];




MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`;`d`][MEM_APPEND]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
;




GSUBGOAL_THEN`(!u v. MEM u (parts L s) /\ MEM v (parts L s) /\ (FST o HD) u = (FST o HD) v ==> u = v)`ASSUME_TAC
;



REWRITE_TAC[o_DEF]
THEN REPEAT RESA_TAC
THEN THAYTHE_ASM_TAC 3[`u`]
THEN THAYTHE_ASM_TAC 0[`v`]
THEN CHANGE_TAC`p=v'`
THEN CHANGE_TAC`p1=v''`
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p1`;`p`][o_DEF]
THEN POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th])
THEN REPEAT RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_next_unlast[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`p`]
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`][MEM_APPEND]
THEN MRESAL_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`v`][MEM_APPEND]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST u=LAST v`]
;



MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`][MEM_APPEND]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`v`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`u`;`v`;`(parts L s)`;`LAST u`]
;



MRESA_TAC(SET_RULE`!a b c. ~(a=b)==> ~(a=c)\/ ~(b=c)`)[`LAST u`;`LAST v`;`y`]
;



MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN MRESA_TAC MEM_PARTS_IMP[`L`;`u`;`s`]
THEN THAYTHE_TAC 0[`LAST u`]
THEN MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST u`]
THEN THAYTHE_TAC (72-55)[`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u= LAST p`];



DICH_TAC(73-63)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`v`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC MEM_PARTS_IMP[`L`;`v`;`s`]
THEN THAYTHE_TAC 0[`LAST v`]
THEN THAYTHE_TAC (78-56)[`LAST v`]
THEN THAYTHE_TAC (78-58)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v=y`];







POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_y_not_cat[`p`;`z`;`y`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(81-67)
THEN RESA_TAC;




MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST v`]
THEN MRESA_TAC Tame_list.next_el_cat1[`LAST v`;`s`;`betwn f y z`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];



THAYTHE_TAC(73-59)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.next_el_cat1[`LAST u`;`s`;`betwn f y z`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];








(***************)


MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`v`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC MEM_PARTS_IMP[`L`;`v`;`s`]
THEN THAYTHE_TAC 0[`LAST v`]
THEN MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST v`]
THEN THAYTHE_TAC (72-57)[`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v= LAST p`];



DICH_TAC(73-63)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND s (betwn f y z)`;`u`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN MRESA_TAC MEM_PARTS_IMP[`L`;`u`;`s`]
THEN THAYTHE_TAC 0[`LAST u`]
THEN THAYTHE_TAC (78-55)[`LAST u`]
THEN THAYTHE_TAC (78-58)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u=y`];







POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_y_not_cat[`p`;`z`;`y`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(81-67)
THEN RESA_TAC;




MRESA_TAC next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST u`]
THEN MRESA_TAC Tame_list.next_el_cat1[`LAST u`;`s`;`betwn f y z`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];



THAYTHE_TAC(73-59)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.next_el_cat1[`LAST v`;`s`;`betwn f y z`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];




(*************)


MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN MRESA_TAC Tame_list.uniq_map[`(parts L s)`;`(FST o HD):(A#A)list->A`]
;



MRESA_TAC uniq_fst_betwn_parts[`L`;`N`;`r`;`x`]
THEN ASM_REWRITE_TAC[GSYM Seq.hasP;MEM_MAP]
THEN MRESAL_TAC parts_f_betwn_pure[`L`;`N`;`r`;`x`][GSYM MAP_o;o_DEF;HD]
THEN STRIP_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[MEM_MAP]
THEN RESA_TAC
THEN DICH_TAC (49-45)
THEN ASM_REWRITE_TAC[HD]
THEN CHANGE_TAC`d=x''''`
THEN CHANGE_TAC`p=x'''`
THEN REMOVE_ASSUM_TAC
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`z`;`y`]
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`p`;`(APPEND [z] (APPEND (betwn r z y) [y]))`]
[APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND (APPEND [z] (APPEND (betwn r z y) [y])) (betwn f y z)`;`p`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_HD[`p`]
THEN GSUBGOAL_THEN`MEM (FST (HD p)) (map FST r)` ASSUME_TAC;



ASM_REWRITE_TAC[MEM_MAP; GSYM Tame_list.lower_case]
THEN GEXISTS_TAC`HD p`
THEN THAYTHEL_TAC(55-49)[`HD p`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`HD p`]
;


MRESAL_TAC Aq1.betwn_not_in_fst_rtrans[`f`;`d`;`L`;`N`;`r`;`x`][MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM;Tame_defs2.ztrans]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN DICH_TAC 1
THEN RESA_TAC]);;



let fst_mem_rtran1=prove(`  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
MEM (FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)))) (ntrans L N r x 1)`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core;ARITH_RULE`SUC 0=1`]
);;



let last_parts_z1_not_y1=prove( `!L N r x:A#A.
         good_list L /\
         good_list_nodes L /\
         marked_list L N r x /\
         ~final_list L r /\
         l'y L r x = y /\
         l'z L N r x = z /\
next_el r y = y1/\
prev_el r z = z1 /\
MEM p (parts L r) /\ MEM z1 p
         ==> ~((LAST p) = y1)`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (9-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-11)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`z1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`LAST p`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC));;


let last_parts_z1_not_z1=prove( `!L N r x:A#A.
         good_list L /\
         good_list_nodes L /\
         marked_list L N r x /\
         ~final_list L r /\
         l'y L r x = y /\
         l'z L N r x = z /\
next_el r y = y1/\
prev_el r z = z1 /\
MEM p (parts L r) /\ MEM z1 p
         ==> ~((LAST p) = z1)`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (9-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-11)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`z1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`LAST p`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN DICH_TAC 2
THEN STRIP_TAC
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC THEN ASSUME_TAC th)
THEN DICH_TAC(53-29)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Aq1.prev_r_not_eq_f_v0[`z1`;`z`;`L`;`N`;`r`;`x`]);;


let last_parts_z1_not_betwn=prove(`!L N r x:A#A.
         good_list L /\
         good_list_nodes L /\
         marked_list L N r x /\
         ~final_list L r /\
         l'y L r x = y /\
         l'z L N r x = z /\
next_el r y = y1/\
prev_el r z = z1 /\
MEM p (parts L r) /\ MEM z1 p
         ==> ~(MEM (LAST p) (betwn r y1 z1))`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (9-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-11)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`z1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`LAST p`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`]
THENL[

DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y1`;`z1`;`r`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`y1`;`LAST p`;`z1`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`y1`;`LAST p`;`z1`;`r`]
THEN MRESA_TAC(ARITH_RULE`! a b c:num. a+b=c==> b<=c`)[`indexf y1 (LAST p) r `;` indexf (LAST p) z1 r `;` indexf y1 z1 r`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`LAST p`]
THEN DICH_TAC 0
THEN MRESA_TAC last_parts_z1_not_z1[`y`;`y1`;`z`;`p`;`z1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC last_parts_z1_not_y1[`y`;`z`;`z1`;`p`;`y1`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_antisym[`LAST p`;`z1`;`r`]
THEN MRESA_TAC Tame_list.indexf_antisym[`y1`;`z1`;`r`]
THEN MRESA_TAC (ARITH_RULE`!a b c d e:num. a+b=c /\ d+e=c /\ a<=d==> e<=b`)
[`indexf (LAST p) z1 r `;` indexf z1 (LAST p) r `;` sizel r`;`indexf y1 z1 r `;` indexf z1 y1 r`]
THEN MRESA_TAC indexf_eq_in_parts[`N`;`L`;`r`;`z1`;`p`]
THEN MRESA_TAC indexf_eq_in_parts[`N`;`L`;`r`;`LAST p`;`p`]
THEN MRESA_TAC Tame_list.indexl_LAST[`p`]
THEN MRESA_TAC Seq.index_mem[`z1`;`p`]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b==> a<=b-1`)[`indexl z1 p`;`sizel p`]
THEN MRESA_TAC Tame_list.MEM_HD[`p`]
THEN THAYTHE_ASM_TAC(75-44)[`HD p`]
THEN MRESA_TAC Tame_list.indexf_add_left[`HD p`;`z1`;`LAST p`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a b c d. a+b=c-1/\a<c /\ d<=b==> a+d< c`)[`indexl z1 p `;` indexf z1 (LAST p) r `;` sizel p`;`indexf z1 y1 r`]
THEN MRESA_TAC Tame_list.indexf_n[`z1`;`y1`;`r`]
THEN MRESA_TAC Tame_list.next_el_parts_power[`L`;`r`;`p`;`indexf z1 y1 r`;`z1`]
THEN MRESA_TAC MEM_POWER_NEXT_EL[`z1`;`p`;`indexf z1 y1 r`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`y1`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`z1`]]);;



let last_parts_z1_not_cat=prove(`!L N r x:A#A.
         good_list L /\
         good_list_nodes L /\
         marked_list L N r x /\
         ~final_list L r /\
         l'y L r x = y /\
         l'z L N r x = z /\
next_el r y = y1/\
prev_el r z = z1 /\
MEM p (parts L r) /\ MEM z1 p
         ==> ~(MEM (LAST p) (APPEND [y1] (APPEND (betwn r y1 z1) [z1])))`,
REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN MRESA_TAC last_parts_z1_not_z1[`y`;`y1`;`z`;`p`;`z1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC last_parts_z1_not_y1[`y`;`z`;`z1`;`p`;`y1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC last_parts_z1_not_betwn[`y`;`z`;`p`;`y1`;`z1`;`L`;`N`;`r`;`x`]);;



let flatten_rev=prove(`!r. flatten(rev (map (rev o f ) r)) =rev (flatten (map f r))`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Seq.map;Tame_list.rev0;Seq.flatten0;Seq.rev_cons;GSYM Seq.map_rev;Seq.flatten_cons;Seq.rev_cat;GSYM Seq.cats1;Seq.map_cat;Seq.flatten_cat]
THEN SYM_DICH_TAC 0
THEN REWRITE_TAC[Seq.map;Tame_list.rev0;Seq.flatten0;Seq.rev_cons;GSYM Seq.map_rev;Seq.flatten_cons;Seq.rev_cat;GSYM Seq.cats1;Seq.map_cat;Seq.flatten_cat]
THEN REWRITE_TAC[Seq.cats0;o_DEF]);;




let  parts_rev_f_betwn_pure=prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r
/\ rev
 (flatten
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
 (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))
))=g
/\ ~(betwn (find_face L x) ((l'y L r x)) (l'z L N r x)=[])
/\ uniq g
==>
 parts L g=(rev
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (rev(upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))
 (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))
)) `,
[



REPEAT RESA_TAC
THEN DICH_ASM_TAC (4)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC parts_f_betwn_pure[`L`;`N`;`r`;`x`][GSYM MAP_o;o_DEF;HD]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN MATCH_MP_TAC Tame_list.parts_characterize
THEN REPEAT RESA_TAC;



DICH_TAC 0
THEN DICH_TAC (40-5)
THEN ASM_REWRITE_TAC[]
THEN REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d=x'`
THEN EXPAND_TAC"g"
THEN REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil;Seq2.mem_flatten]
THEN ASM_REWRITE_TAC[]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`map (\i. (n_list L POWER i) d)
           (upt 1 (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;


GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
;




REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(43-6)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;




MRESAL_TAC flatten_rev[`(\x. map (\i. (n_list L POWER i) x)
            (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`;`(betwn f y z)`][o_DEF;GSYM Seq.map_rev;ARITH_RULE`SUC 0=1`]
THEN DICH_TAC (41-4)
THEN RESA_TAC;


REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil]
THEN REPEAT RESA_TAC
THEN REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil]
THEN CHANGE_TAC`d=x''`
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;I_DEF;o_DEF]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(45-7)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;




DICH_TAC 2
THEN REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil]
THEN RESA_TAC
THEN CHANGE_TAC`d1=x'`
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;Seq.mem_rev]
THEN RESA_TAC
THEN CHANGE_TAC`n=x'`
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th]
THEN ASSUME_TAC (SYM th))
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d1`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d1`;`x`;`L`]
THEN DICH_ASM_TAC(48-7)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d1`;`FST d1`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d1`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d1`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN GABBREV_TAC`a=sizel (filter (MEM (FST d1)) L)`
THEN MRESA_TAC Aq4.nil_upt[`a`]
THEN MRESA_TAC Aq4.nil_rev[`upt 1 a`]
THEN MRESAS_TAC Tame_list.LAST_MAP[`(rev (upt 1 a))`;`(\i. (n_list L POWER i) d1) `][Tame_list.lower_case;Tame_list.LAST_rev;Aq4.HD_UPT]
THEN ASM_REWRITE_TAC[ARITH_RULE`1= SUC 0`;POWER;o_DEF;I_DEF]
THEN MRESA_TAC Aq4.AQ4[`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil]
THEN RESA_TAC
THEN MRESA_TAC fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN THAYTHE_TAC 1[`(FST (split_normal_list L r f y z1))`]
THEN MRESA_TAC Seq.rev_uniq[`(flatten
   (map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y (l'z L N r x))))`]
THEN GSUBGOAL_THEN`MEM d
      (flatten
      (map
       (\x. map (\i. (n_list L POWER i) x)
            (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
      (betwn f y z)))` ASSUME_TAC
;






REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil;Seq2.mem_flatten]
THEN ASM_REWRITE_TAC[]
THEN GEXISTS_TAC`map (\i. (n_list L POWER i) d1)
           (upt 1 (sizel (filter (\t. t = FST d1) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;


GEXISTS_TAC`d1`
THEN ASM_REWRITE_TAC[]
;




REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`n`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN DICH_TAC(69-44)
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`];


MRESA_TAC Elllnyz.next_el_rev[`(flatten
   (map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y (l'z L N r x))))`;`d`]
THEN GABBREV_TAC`l=map (\i. (n_list L POWER i) d1)
           (upt 1 (sizel (filter (\t. t = FST d1) (flatten L))))`
THEN GABBREV_TAC`l2=map
       (\x. map (\i. (n_list L POWER i) x)
            (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
      (betwn f y z)`
THEN GSUBGOAL_THEN`all (\r. ~(r = [])) l2`ASSUME_TAC
;



EXPAND_TAC"l2"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;Seq2.mem_flatten;GSYM Seq.allP; Seq.mapP]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`e2=x''`
THEN MRESA_TAC Hojodcm.count_node_face[`e2`;`L`]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`e2`][List_hypermap.dart_in_face;List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`e2`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`e2`;`x`;`L`]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`e2`;`FST e2`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case;Seq.mapP;List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN STRIP_TAC
;




GEXISTS_TAC`n_list L e2`
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN ONCE_REWRITE_TAC[Aq1.MEM_EQ_UPT]
THEN DICH_TAC 0
THEN ARITH_TAC;




GSUBGOAL_THEN`MEM l l2`ASSUME_TAC
;




EXPAND_TAC"l2"
THEN 
REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_list.lower_case;Seq.mem_rev;Seq.mem_cat;Seq2.mem_flatten;Seq.mapP]
THEN GEXISTS_TAC`d1`
THEN ASM_REWRITE_TAC[];







GSUBGOAL_THEN`(!u v.
           MEM u (betwn f y z) /\
           MEM v (betwn f y z) /\
           map (\i. (n_list L POWER i) u)
           (upt 1 (sizel (filter (\t. t = FST u) (flatten L)))) =
           map (\i. (n_list L POWER i) v)
           (upt 1 (sizel (filter (\t. t = FST v) (flatten L))))
           ==> u = v)`ASSUME_TAC
;





REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`u`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`v`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`v`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`u`;`x`;`L`]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`u`;`FST u`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case;Seq.mapP]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`v`;`FST v`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case;Seq.mapP]
THEN MRESA_TAC Hojodcm.count_node_face[`u`;`L`]
THEN MRESA_TAC Hojodcm.count_node_face[`v`;`L`]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`u`][List_hypermap.dart_in_face]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`v`][List_hypermap.dart_in_face]
THEN MRESA_TAC Aq4.nil_upt[`sizel (filter (MEM (FST u)) L)`]
THEN MRESA_TAC Aq4.nil_upt[`sizel (filter (MEM (FST v)) L)`]
THEN MRESAL_TAC Tame_list.HD_MAP[`(upt 1 (sizel (filter (MEM (FST u)) L)))`;`(\i. (n_list L POWER i) u)`][ Tame_list.lower_case]
THEN MRESAL_TAC Tame_list.HD_MAP[`(upt 1 (sizel (filter (MEM (FST v)) L)))`;`(\i. (n_list L POWER i) v)`][ Tame_list.lower_case]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN DICH_TAC (90-78)
THEN RESA_TAC
THEN RESA_TAC
THEN ASM_SIMP_TAC[Aq4.HD_UPT;ARITH_RULE`1= SUC 0`;POWER;o_DEF;I_DEF;GSYM Tame_list.n_list_ext_n_list;List_hypermap.dart_in_face;GSYM List_hypermap.components_hypermap_of_list;Hypermap.node_map_injective]
;




MRESAL_TAC Aq4.prev_el_MEM_map[`(betwn f y z)`;`d1`;`(\x. map (\i. (n_list L POWER i) x)
           (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`][Tame_list.lower_case]
;



MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`d= HD l`];



MRESA_TAC Aq4.prev_el_hd_flatten[`l2`;`l`]
THEN GABBREV_TAC`e=prev_el (betwn f y z) d1`
THEN MRESA_TAC Seq2.mem_prev_el[`d1`;`(betwn f y z)`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`e`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`e`;`x`;`L`]
THEN MRESA_TAC Hojodcm.count_node_face[`e`;`L`]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`e`;`FST e`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case;Seq.mapP]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHEL_TAC 0[`e`][List_hypermap.dart_in_face]
THEN GABBREV_TAC`a1=sizel (filter (MEM (FST e)) L)`
THEN MRESA_TAC Aq4.nil_upt[`a1`]
THEN ASM_REWRITE_TAC[GSYM Tame_list.lower_case;]
THEN MRESA_TAC Tame_list.LAST_MAP[`(upt 1 a1)`;`(\i. (n_list L POWER i) e)`;]
THEN MRESA_TAC Aq23.LAST_UPT[`a1`]
THEN DICH_TAC(90-72)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.HD_MAP[`(upt 1 a)`;`(\i. (n_list L POWER i) d1)`][Tame_list.lower_case;]
THEN MRESA_TAC Aq4.HD_UPT[`a`]
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.n_list_ext_n_list[`d1`;`L`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`d1`;`L`;`SUC 0`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.inverse_node_map_list[`L`;`(n_list_ext L d1)`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC List_hypermap.components_hypermap_of_list[`L`]
THEN SYM_DICH_TAC 1
THEN ASM_REWRITE_TAC[Lvducxu.HYP_MAPS_INVS]
THEN MRESAL_TAC Lebhirj.n_list_ext_n_list_power[`L`;`e`;`PRE a1`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESA_TAC List_hypermap.components_hypermap_of_list[`L`]
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Hypermap.lemma_in_node2[`hypermap_of_list L`;`e`;`PRE a1`]
THEN GSUBGOAL_THEN`d1 IN face (hypermap_of_list L) e`ASSUME_TAC;




MRESAL_TAC List_hypermap.face_of_list[`L`;`e`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
;


MRESA_TAC(SET_RULE`!a A B. a IN A /\ a IN B ==> a IN A INTER B`)[`d1`;`node (hypermap_of_list L) e`;`face (hypermap_of_list L) e`]
THEN DICH_TAC(103-53)
THEN REWRITE_TAC[Hypermap.simple_hypermap]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`e`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[IN_SING]
THEN STRIP_TAC
THEN MRESA_TAC Seq2.next_prev_id[`d1`;`betwn f y z`;]
THEN MRESA_TAC Tame_list.next_el_refl[`e`;`betwn f y z`]
THEN DICH_TAC(105-41)
THEN EXPAND_TAC "g"
THEN DICH_TAC(104-4)
THEN ASM_REWRITE_TAC[Seq2.map;Aq1.flatten_sing]
THEN GSUBGOAL_THEN`~(map (\i. (n_list L POWER i) e) (upt 1 a1)=[])`ASSUME_TAC
;



REWRITE_TAC[List_hypermap.mem_not_nil]
THEN GEXISTS_TAC`n_list L e`
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN ONCE_REWRITE_TAC[Aq1.MEM_EQ_UPT]
THEN DICH_TAC (103-82)
THEN ARITH_TAC;


MRESA_TAC Tame_list.LAST_rev[`map (\i. (n_list L POWER i) e) (upt 1 a1)`]
THEN MRESAL_TAC Tame_list.HD_MAP[`upt 1 a1`;`(\i. (n_list L POWER i) e)`][Tame_list.lower_case]
THEN MRESA_TAC Aq4.HD_UPT[`a1`]
;




GSUBGOAL_THEN`MEM d l`ASSUME_TAC
;




EXPAND_TAC"l"
THEN 
REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_list.lower_case;Seq.mem_rev;Seq.mem_cat;Seq2.mem_flatten;Seq.mapP]
THEN GEXISTS_TAC`n`
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(78-44)
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`];




MRESA_TAC Aq4.prev_el_not_hd_flatten[`l2`;`l`;`d`]
;




GSUBGOAL_THEN`(!u v.
           MEM u (upt 1 (sizel (filter (MEM (FST d1)) L))) /\
           MEM v (upt 1 (sizel (filter (MEM (FST d1)) L))) /\
           (n_list L POWER u) d1 = (n_list L POWER v) d1
           ==> u = v)`ASSUME_TAC
;




ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Hypermap_and_fan.ORBIT_MAP_INJ[`dart(hypermap_of_list L)`;`node_map (hypermap_of_list L)`;`d1`;`u`;`v`;`CARD (node (hypermap_of_list L) d1)`][Hypermap.node_map_and_darts;GSYM node]
THEN MATCH_DICH_TAC 0
THEN ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list; GSYM Lebhirj.n_list_ext_n_list_power;List_hypermap.dart_in_face]
;



DICH_TAC 0
THEN RESA_TAC
THEN DICH_TAC(81-44)
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN RESA_TAC
THEN MRESA_TAC Aq4.prev_el_map_upt[`(sizel (filter (\t. t = FST d1) (flatten L)))`;`(\i. (n_list L POWER i) d1)`;`n`]
THEN MRESAL_TAC Lebhirj.n_list_ext_n_list_power[`L`;`d1`;`n`][List_hypermap.dart_in_face]
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`d1`;`L`;`n`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN MRESAL_TAC Tame_list.inverse_node_map_list[`L`;`d`][List_hypermap.dart_in_face]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC List_hypermap.components_hypermap_of_list[`L`]
THEN DICH_TAC (90-81)
THEN ASM_REWRITE_TAC[]
THEN ONCE_REWRITE_TAC[Aq1.MEM_EQ_UPT]
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!n. 0<n==> n=SUC(n-1)`)[`n`]
THEN POP_ASSUM(fun th-> GEN_REWRITE_TAC(LAND_CONV o ONCE_DEPTH_CONV)[th] THEN ASSUME_TAC (SYM th))
THEN REWRITE_TAC[COM_POWER;o_DEF]
THEN MRESAL_TAC Lebhirj.n_list_ext_n_list_power[`L`;`d1`;`n-1`][List_hypermap.dart_in_face]
THEN SYM_DICH_TAC (93-88)
THEN ASM_REWRITE_TAC[Lvducxu.HYP_MAPS_INVS]
THEN MRESA_TAC List_hypermap.components_hypermap_of_list[`L`]
THEN STRIP_TAC
THEN THAYTHEL_TAC(94-80)[`n`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN ONCE_REWRITE_TAC[Aq1.MEM_EQ_UPT]
THEN MRESA_TAC(ARITH_RULE`!a n. 0<n/\ n<a==> 0< SUC 0/\ SUC 0<a`)[`a`;`n`]
THEN STRIP_TAC
THEN DICH_TAC(96-77)
THEN EXPAND_TAC"l"
THEN REWRITE_TAC[]
THEN DICH_TAC (95-59)
THEN SIMP_TAC[]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.HD_MAP[`upt 1 a`;`(\i. (n_list L POWER i) d1)`][Tame_list.lower_case]
THEN MRESA_TAC Aq4.HD_UPT[`a`]
THEN REWRITE_TAC[ARITH_RULE`1= SUC 0`;POWER;o_DEF;I_DEF]]);;



let DICHS_SIMP_TAC th n=  
REPLICATE_TAC n (POP_ASSUM MP_TAC)
THEN POP_ASSUM(fun th-> ASSUME_TAC th
THEN REPLICATE_TAC n DISCH_TAC
THEN MP_TAC th) 
THEN SIMP_TAC th
THEN DISCH_TAC
THEN REMOVE_ASSUM_TAC
;;

let DICH_SIMP_TAC l th= 
MAP_EVERY (DICHS_SIMP_TAC th) l
;;



let uniq_fst_betwn_rev_parts= prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r
/\ rev
 (flatten
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
 (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))
))=g
/\ ~(betwn (find_face L x) ((l'y L r x)) (l'z L N r x)=[])
/\ uniq g
==>
uniq (map (FST o HD)
 (parts L
 (rev
 (flatten
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
 (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))
)))))`,
[

REPEAT RESA_TAC
THEN DICH_ASM_TAC (4)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC parts_f_betwn_pure[`L`;`N`;`r`;`x`][GSYM MAP_o;o_DEF;HD]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN DICH_TAC(40-4)
THEN RESA_TAC
THEN DICH_TAC(40-4)
THEN RESA_TAC
THEN MRESA_TAC parts_rev_f_betwn_pure[`g`;`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[Seq.map_rev;Seq.rev_uniq;GSYM Seq.map_comp;o_DEF]
THEN GSUBGOAL_THEN`
(!d. MEM d  (betwn f y z) ==> (\x. FST
       (HD
       (rev
       (map (\i. (n_list L POWER i) x)
       (upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))))d= FST d)`ASSUME_TAC;


REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN DICH_ASM_TAC(45-5)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN GABBREV_TAC`a=sizel (filter (MEM (FST d)) L)`
THEN GSUBGOAL_THEN`~((map (\i. (n_list L POWER i) d)
 (upt 1 a))=[])`ASSUME_TAC;


REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 1
THEN ARITH_TAC;

DICH_SIMP_TAC [0][Tame_list.HD_rev]
THEN MRESA_TAC Aq4.nil_upt[`a`]
THEN DICH_SIMP_TAC [0][Tame_list.LAST_MAP;GSYM  Tame_list.lower_case]
THEN DICH_SIMP_TAC [3][Aq23.LAST_UPT]
THEN MATCH_MP_TAC Lebhirj.FST_N_LIST_POWER
THEN ASM_REWRITE_TAC[List_hypermap.dart_in_face];

MRESA_TAC Seq.eq_in_map[`(\x. FST
                   (HD
                   (rev
                   (map (\i. (n_list L POWER i) x)
                   (upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))))`;`FST:A#A->A`;`betwn f y z`]
THEN MRESAL_TAC Tame_list.uniq_map[`betwn f y z`;`FST:(A#A)->A`][ Tame_list.lower_case]
THEN MATCH_DICH_TAC 0
THEN REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`u`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`v`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`u`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`v`;`x`;`L`]
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`u`;`v`][List_hypermap.dart_in_face]
THEN DICH_ASM_TAC(51-5)[Hypermap.is_restricted;Hypermap.simple_hypermap]
THEN MRESAL_TAC List_hypermap.face_of_list[`L`;`u`][List_hypermap.dart_in_face]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\u. node (hypermap_of_list L) u INTER face (hypermap_of_list L) u = {u})`]
THEN THAYTHEL_TAC(0)[`u`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;]
THEN DICH_TAC 0
THEN GSUBGOAL_THEN`v IN node (hypermap_of_list L) u INTER set_of_list f`ASSUME_TAC;

ASM_REWRITE_TAC[INTER;IN_ELIM_THM;IN_SET_OF_LIST];

STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[IN_SING]
THEN RESA_TAC]);;



let eq_fst_betwn_rev_parts= prove_by_refinement(
`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r
/\ rev
 (flatten
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
 (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))
))=g
/\ ~(betwn (find_face L x) ((l'y L r x)) (l'z L N r x)=[])
/\ uniq g
==>
(map (FST o HD)
 (parts L
 (rev
 (flatten
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
 (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))
)))))
=rev (map FST (betwn (find_face L x) ((l'y L r x)) (l'z L N r x)))`,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC (4)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC parts_f_betwn_pure[`L`;`N`;`r`;`x`][GSYM MAP_o;o_DEF;HD]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN DICH_TAC(40-4)
THEN RESA_TAC
THEN DICH_TAC(40-4)
THEN RESA_TAC
THEN MRESA_TAC parts_rev_f_betwn_pure[`g`;`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[Seq.map_rev;Seq.rev_uniq;GSYM Seq.map_comp;o_DEF]
THEN MATCH_MP_TAC(SET_RULE`a=b==> rev a= rev b`)
THEN GSUBGOAL_THEN`
(!d. MEM d  (betwn f y z) ==> (\x. FST
       (HD
       (rev
       (map (\i. (n_list L POWER i) x)
       (upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))))d= FST d)`ASSUME_TAC;

REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN DICH_ASM_TAC(45-5)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN GABBREV_TAC`a=sizel (filter (MEM (FST d)) L)`
THEN GSUBGOAL_THEN`~((map (\i. (n_list L POWER i) d)
 (upt 1 a))=[])`ASSUME_TAC;

REWRITE_TAC[GSYM Seq.allP;Seq.mem_rev;Seq.mapP;List_hypermap.mem_not_nil]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 1
THEN ARITH_TAC;


DICH_SIMP_TAC [0][Tame_list.HD_rev]
THEN MRESA_TAC Aq4.nil_upt[`a`]
THEN DICH_SIMP_TAC [0][Tame_list.LAST_MAP;GSYM  Tame_list.lower_case]
THEN DICH_SIMP_TAC [3][Aq23.LAST_UPT]
THEN MATCH_MP_TAC Lebhirj.FST_N_LIST_POWER
THEN ASM_REWRITE_TAC[List_hypermap.dart_in_face];


MRESA_TAC Seq.eq_in_map[`(\x. FST
                   (HD
                   (rev
                   (map (\i. (n_list L POWER i) x)
                   (upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))))`;`FST:A#A->A`;`betwn f y z`]]);;


let uniq_fst_split_normal_parts=prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
uniq (core L (FST (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x) (prev_el r(l'z L N r x)))))`,
[

REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core];


ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`betwn (find_face L y) y z = []`][Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM;LAST_CLAUSES]
;


ASM_REWRITE_TAC[APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN MRESAL_TAC fst_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN DICH_TAC (38-8)
THEN ASM_REWRITE_TAC[LET_THM;GSYM Seq.allP;Tame_list.quotient_list_core]
THEN RESA_TAC
THEN THAYTHES_TAC 1[`core L r`][Tame_list.MEMf_MAP;]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];

DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


GSUBGOAL_THEN`!d. MEM d (MAP (FST o HD) (parts L (APPEND [y1] (APPEND (betwn r (y1) z1) [z1])))) ==> MEM d (MAP (FST o HD) (parts L r))`ASSUME_TAC;



REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x'`
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`;`p`]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x''`
THEN THAYTHE_TAC 1[`d1`]
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;


DICH_TAC 0
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d1`]
;


MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`;`p`;`d1`]
THEN MRESA_TAC parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[];

GABBREV_TAC`s=(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`
THEN GABBREV_TAC`s1=(MAP (FST o HD) (parts L s))`
THEN GABBREV_TAC`r1=(MAP (FST o HD) (parts L r))`
THEN GSUBGOAL_THEN`~(s1=[])`ASSUME_TAC
;

EXPAND_TAC"s1"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN MRESA_TAC parts_mem_exists[`y1`;`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN GEXISTS_TAC`(FST o HD) p`
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;

EXPAND_TAC"s"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN GEXISTS_TAC`y1`
THEN REWRITE_TAC[];





GSUBGOAL_THEN`(!u. MEM u (parts L s)==> ?v. MEM v (parts L r)/\ (!a. MEM a u==> MEM a v)/\ FST(HD u)= FST(HD v)) `ASSUME_TAC
;


REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`;`u`]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d=x'`
THEN THAYTHE_ASM_TAC 1[`d`]
THEN GSUBGOAL_THEN`MEM d r`ASSUME_TAC;


DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d`]
;

MRESA_TAC parts_mem_exists[`d`;`L`;`r`]
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[]
THEN REPEAT RESA_TAC
;

THAYTHE_ASM_TAC (55-51)[`a`]
THEN GSUBGOAL_THEN`MEM a r`ASSUME_TAC;


DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`a`]
;


MRESA_TAC parts_mem_exists[`a`;`L`;`r`]
THEN CHANGE_TAC`p1=p'`
THEN MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`s`;`u`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`s`;`u`;`a`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p1`;`a`]
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p`;`p1`][o_DEF];



MRESA_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`s`;`u`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
;



GSUBGOAL_THEN`(!u v. MEM u (parts L s) /\ MEM v (parts L s) /\ (FST o HD) u = (FST o HD) v ==> u = v)`ASSUME_TAC
;


REWRITE_TAC[o_DEF]
THEN REPEAT RESA_TAC
THEN THAYTHE_ASM_TAC 3[`u`]
THEN THAYTHE_ASM_TAC 0[`v`]
THEN CHANGE_TAC`p=v'`
THEN CHANGE_TAC`p1=v''`
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p1`;`p`][o_DEF]
THEN POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th])
THEN REPEAT RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_next_unlast[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`p`]
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST u=LAST v`]
;


MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`u`;`v`;`(parts L s)`;`LAST u`]
;


MRESA_TAC(SET_RULE`!a b c. ~(a=b)==> ~(a=c)\/ ~(b=c)`)[`LAST u`;`LAST v`;`z1`]
;


MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN THAYTHE_TAC 1[`LAST u`]
THEN MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST u`]
THEN THAYTHE_TAC (66-51)[`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u= LAST p`];


DICH_TAC(67-59)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN THAYTHE_TAC 1[`LAST v`]
THEN THAYTHE_TAC (71-52)[`LAST v`]
THEN THAYTHE_TAC (71-54)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v=z1`];






POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_z1_not_cat[`y`;`z`;`p`;`y1`;`z1`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(74-61)
THEN RESA_TAC;




MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST v`]
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];


THAYTHE_TAC(67-55)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(3)
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];








MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN THAYTHE_TAC 1[`LAST v`]
THEN MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST v`]
THEN THAYTHE_TAC (66-53)[`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v= LAST p`];


DICH_TAC(67-59)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`s`;`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN THAYTHE_TAC 1[`LAST u`]
THEN THAYTHE_TAC (71-51)[`LAST u`]
THEN THAYTHE_TAC (71-54)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u=z1`];






POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_z1_not_cat[`y`;`z`;`p`;`y1`;`z1`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(74-61)
THEN RESA_TAC;



MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST u`]
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];


THAYTHE_TAC(67-55)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(3)
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];


MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN MRESA_TAC Tame_list.uniq_map[`(parts L s)`;`(FST o HD):(A#A)list->A`]
;




MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL]
THEN MRESAL_TAC fst_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL]
THEN GABBREV_TAC`g=(REVERSE
  (flatten
  (map
   (\x. map (\i. (n_list L POWER i) x)
        (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
  (betwn f y z))))`
THEN GSUBGOAL_THEN`~(g=[])` ASSUME_TAC;


DICH_TAC(39-36)
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN EXPAND_TAC"g"
THEN REWRITE_TAC[ Tame_list.lower_case;Seq.mem_rev;Seq2.mem_flatten]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`map (\i. (n_list L POWER i) d)
          (upt (SUC 0) (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;

GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
;


REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(42-4)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;


ASM_TAC
THEN REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN REPEAT RESA_TAC
THEN DICH_TAC 1
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC
THEN REWRITE_TAC[th]
THEN REPEAT STRIP_TAC
THEN MP_TAC th
THEN REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN STRIP_TAC)
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`g`;`(APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1]))`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;ARITH_RULE`SUC 0=1`]
;


GSUBGOAL_THEN`~((flatten
   (map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y z))) =[])`ASSUME_TAC
;

ONCE_REWRITE_TAC[GSYM Aq4.nil_rev]
THEN ASM_REWRITE_TAC[ GSYM Tame_list.REVERSE_rev]
;




GSUBGOAL_THEN`~(HD
        (map
         (\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
        (betwn f y z)) =
        [])` ASSUME_TAC;


MRESAL_TAC Tame_list.HD_MAP[`(betwn f y z)`;`(\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`][ Tame_list.lower_case]
THEN GABBREV_TAC`d=(HD (betwn f y z))`
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn f y z`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(48-4)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;



GSUBGOAL_THEN`~(next_el r y = f_list L (e_list (LAST g)))`ASSUME_TAC
;


EXPAND_TAC"g"
THEN REWRITE_TAC[ Tame_list.lower_case;Tame_list.LAST_rev]
THEN ASM_SIMP_TAC[Tame_list.LAST_rev]
THEN MRESA_TAC Tame_list.HD_flatten[`(map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y z))`]
THEN MRESAL_TAC Tame_list.HD_MAP[`(betwn f y z)`;`(\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`][ Tame_list.lower_case]
THEN GABBREV_TAC`d=(HD (betwn f y z))`
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn f y z`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(50-4)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN GABBREV_TAC`a=sizel (filter (MEM (FST d)) L)`
THEN MRESA_TAC Aq4.nil_upt[`a`]
THEN MRESAL_TAC Tame_list.HD_MAP[`(upt 1 (sizel (filter (\t. t = FST (HD (betwn f y z))) (flatten L))))`;`(\i. (n_list L POWER i) (HD (betwn f y z)))`][ Tame_list.lower_case]
THEN MRESA_TAC Aq4.HD_UPT[`a`]
THEN ASM_REWRITE_TAC[ARITH_RULE`1=SUC 0`;POWER;o_DEF;I_DEF]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`f`;`y`;`z`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Tame_list.f_list_ext_f_list[`L`;`y`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`y`;`L`;`SUC 0`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.n_list_ext_n_list[`(f_list_ext L y)`;`L`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`(f_list_ext L y)`;`L`;`SUC 0`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Lp_gen_theory.e_list_ext_eq_e_list[`L`;`(n_list_ext L (f_list_ext L y))`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.e_n_f_id[`L`][o_DEF;I_DEF;FUN_EQ_THM]
THEN MRESA_TAC Aq1.next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
;



MRESAL_TAC Tame_list.parts_cat[`L`;`(APPEND g
      (APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1])))`;
`g`;`    (APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1]))`;`LAST g`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;MAP_APPEND;HD_APPEND;HD]
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.cat_uniq]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat]
THEN ONCE_REWRITE_TAC[SET_RULE`A/\B/\C<=> C/\B/\A`]
THEN RESA_TAC;







(***CASE 1***)



DICH_TAC (45-8)
THEN ASM_REWRITE_TAC[LET_THM;GSYM Seq.allP;Tame_list.quotient_list_core]
THEN RESA_TAC
THEN THAYTHES_TAC 1[`core L r`][Tame_list.MEMf_MAP;]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];

DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


GSUBGOAL_THEN`!d. MEM d (MAP (FST o HD) (parts L (APPEND [y1] (APPEND (betwn r (y1) z1) [z1])))) ==> MEM d (MAP (FST o HD) (parts L r))`ASSUME_TAC;



REWRITE_TAC[MEM_MAP;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN CHANGE_TAC`p=x'`
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND g (APPEND [y1] (APPEND (betwn r y1 z1) [z1])))`;`p`][MEM_APPEND]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d1=x''`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y1`;`z1`]
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`p`;` (APPEND [y1] (APPEND (betwn r y1 z1) [z1]))`][APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN THAYTHE_TAC 0[`d1`]
THEN GSUBGOAL_THEN`MEM d1 r`ASSUME_TAC;


DICH_TAC 0
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d1`]
;


MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`(APPEND g (APPEND [y1] (APPEND (betwn r y1 z1) [z1])))`;`p`;`d1`][MEM_APPEND]
THEN MRESA_TAC parts_mem_exists[`d1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p'`;`d1`]
THEN GEXISTS_TAC`p'`
THEN ASM_REWRITE_TAC[];



GABBREV_TAC`s=(APPEND [y1] (APPEND (betwn r (y1) z1) [z1]))`
THEN GABBREV_TAC`s1=(MAP (FST o HD) (parts L s))`
THEN GABBREV_TAC`r1=(MAP (FST o HD) (parts L r))`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y1`;`z1`]
THEN GSUBGOAL_THEN`~(s1=[])`ASSUME_TAC
;

EXPAND_TAC"s1"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN MRESA_TAC parts_mem_exists[`y1`;`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN GEXISTS_TAC`(FST o HD) p`
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;

EXPAND_TAC"s"
THEN REWRITE_TAC[List_hypermap.mem_not_nil;MEM_MAP]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN GEXISTS_TAC`y1`
THEN REWRITE_TAC[];





GSUBGOAL_THEN`(!u. MEM u (parts L s)==> ?v. MEM v (parts L r)/\ (!a. MEM a u==> MEM a v)/\ FST(HD u)= FST(HD v)) `ASSUME_TAC
;


REPEAT RESA_TAC
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`(APPEND g s)`;`u`][MEM_APPEND]
THEN DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN CHANGE_TAC`d=x'`
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`u`;` s`][APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN THAYTHE_ASM_TAC 0[`d`]
THEN GSUBGOAL_THEN`MEM d r`ASSUME_TAC;


DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`d`]
;

MRESA_TAC parts_mem_exists[`d`;`L`;`r`]
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[]
THEN REPEAT RESA_TAC
;

THAYTHE_ASM_TAC (55-51)[`a`]
THEN GSUBGOAL_THEN`MEM a r`ASSUME_TAC;


DICH_TAC 1
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`a`]
;


MRESA_TAC parts_mem_exists[`a`;`L`;`r`]
THEN CHANGE_TAC`p1=p'`
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`u`;`d`][MEM_APPEND]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`u`;`a`][MEM_APPEND]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p1`;`a`]
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p`;`p1`][o_DEF];



MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`u`;`d`][MEM_APPEND]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`]
;



GSUBGOAL_THEN`(!u v. MEM u (parts L s) /\ MEM v (parts L s) /\ (FST o HD) u = (FST o HD) v ==> u = v)`ASSUME_TAC
;


REWRITE_TAC[o_DEF]
THEN REPEAT RESA_TAC
THEN THAYTHE_ASM_TAC 3[`u`]
THEN THAYTHE_ASM_TAC 0[`v`]
THEN CHANGE_TAC`p=v'`
THEN CHANGE_TAC`p1=v''`
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`(parts L r)`]
THEN THAYTHEL_TAC 0[`p1`;`p`][o_DEF]
THEN POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th])
THEN REPEAT RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESAL_TAC Tame_list.parts_next_unlast[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`p`]
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`u`][MEM_APPEND]
THEN MRESAL_TAC Tame_list.normal_list_parts_next_last[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`v`][MEM_APPEND]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST u=LAST v`]
;


MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`u`][MEM_APPEND]
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`v`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`u`;`v`;`(parts L s)`;`LAST u`]
;


MRESA_TAC(SET_RULE`!a b c. ~(a=b)==> ~(a=c)\/ ~(b=c)`)[`LAST u`;`LAST v`;`z1`]
;


MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`u`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN DICH_TAC 1
THEN STRIP_TAC
THEN REMOVE_ASSUM_TAC
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`u`;` s`][APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN THAYTHE_TAC 0[`LAST u`]
THEN MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST u`]
THEN THAYTHE_TAC (85-69)[`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u= LAST p`];


DICH_TAC(86-77)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`v`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN DICH_TAC 1
THEN STRIP_TAC
THEN REMOVE_ASSUM_TAC
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`v`;` s`][APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN THAYTHE_TAC 0[`LAST v`]
THEN THAYTHE_TAC (90-70)[`LAST v`]
THEN THAYTHE_TAC (90-72)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v=z1`];






POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_z1_not_cat[`y`;`z`;`p`;`y1`;`z1`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(74-61)
THEN RESA_TAC;




MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST v`]
THEN MRESA_TAC Tame_list.next_el_cat2[`LAST v`;`g`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];


THAYTHE_TAC(86-73)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.next_el_cat2[`LAST u`;`g`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];






MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`v`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN DICH_TAC 1
THEN STRIP_TAC
THEN REMOVE_ASSUM_TAC
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`v`;` s`][APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN THAYTHE_TAC 0[`LAST v`]
THEN MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST v`]
THEN THAYTHE_TAC (85-71)[`LAST v`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST v= LAST p`];


DICH_TAC(86-77)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`APPEND g s`;`u`][MEM_APPEND]
THEN MRESA_TAC Tame_list.MEM_LAST[`u`]
THEN DICH_TAC 1
THEN STRIP_TAC
THEN REMOVE_ASSUM_TAC
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`u`;` s`][APPEND_EQ_NIL;Ohcgkfu.sing_not_nil]
THEN THAYTHE_TAC 0[`LAST u`]
THEN THAYTHE_TAC (90-69)[`LAST u`]
THEN THAYTHE_TAC (90-72)[`LAST u`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST u`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`LAST u=z1`];






POP_ASSUM(fun th-> ASM_TAC THEN REWRITE_TAC[th]
THEN REPEAT RESA_TAC
THEN ASSUME_TAC th)
THEN MRESA_TAC last_parts_z1_not_cat[`y`;`z`;`p`;`y1`;`z1`;`L`;`N`;`r`;`x`]
THEN DICH_TAC(74-61)
THEN RESA_TAC;




MRESA_TAC next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST u`]
THEN MRESA_TAC Tame_list.next_el_cat2[`LAST u`;`g`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST u`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST u`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST u`;`e_list (LAST u)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST u`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];


THAYTHE_TAC(86-73)[`LAST v`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`LAST v`]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.next_el_cat2[`LAST v`;`g`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[LAST;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;GSYM Seq2.APPEND_cat]
THEN RESA_TAC
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`LAST v`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`LAST v`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`LAST v`;`e_list (LAST v)`]
[List_hypermap.darts_of_list;IN_SET_OF_LIST;Tame_list.good_list_e_list;]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`LAST v`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[];








MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN MRESA_TAC Tame_list.uniq_map[`(parts L s)`;`(FST o HD):(A#A)list->A`]
;

(****************)

DICH_TAC (45-40)
THEN REWRITE_TAC[ Tame_list.lower_case]
THEN STRIP_TAC
THEN DICH_TAC(45-37)
THEN REWRITE_TAC[ Tame_list.lower_case]
THEN ONCE_REWRITE_TAC[Seq.cat_uniq]
THEN STRIP_TAC
THEN MRESA_TAC uniq_fst_betwn_rev_parts[`g`;`L`;`N`;`r`;`x`]
THEN ASM_REWRITE_TAC[GSYM Seq.hasP;MEM_MAP]
THEN MRESA_TAC eq_fst_betwn_rev_parts[`g`;`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[Seq.mem_rev;Seq.mapP]
THEN STRIP_TAC
THEN CHANGE_TAC`d=x'''`
THEN CHANGE_TAC`p=x''`
THEN DICH_TAC 2
THEN RESA_TAC
THEN DICH_TAC 1
THEN STRIP_TAC
THEN REMOVE_ASSUM_TAC
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];

DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


DICH_TAC 3
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y1`;`z1`]
THEN MRESAL_TAC MEM_PARTS_IMP[`L`;`p`;`(APPEND [y1] (APPEND (betwn r y1 z1) [z1]))`]
[APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;Tame_list.lower_case]
THEN MRESA_TAC AQ_normal_list[`L`;`N`;`r`;`x`]
THEN ASM_TAC
THEN REWRITE_TAC[Tame_list.lower_case]
THEN REPEAT STRIP_TAC
THEN DICH_TAC 0
THEN MRESAL_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1)`;`cat g (cat [y1] (cat (betwn r y1 z1) [z1]))`;`p`][MEM_APPEND;GSYM Tame_list.lower_case]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_list.lower_case]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.MEM_HD[`p`]
THEN GSUBGOAL_THEN`MEM (FST (HD p)) (map FST r)` ASSUME_TAC;


ASM_REWRITE_TAC[MEM_MAP; GSYM Tame_list.lower_case]
THEN GEXISTS_TAC`HD p`
THEN THAYTHEL_TAC(70-63)[`HD p`][MEM_APPEND;Seq.mem_seq1;Seq.mem_cat]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`HD p`]
;

MRESAL_TAC Aq1.betwn_not_in_fst_rtrans[`f`;`d`;`L`;`N`;`r`;`x`][MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM;Tame_defs2.ztrans]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN DICH_TAC 1
THEN RESA_TAC]);;



let AQ8_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    all uniq (quotient_list L  (ntrans L N r x 1))`;;

let AQ8= prove_by_refinement( 
AQ8_concl,
[

REPEAT RESA_TAC
THEN DICH_ASM_TAC (0)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-4)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(26-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN DICH_TAC(26-7)
THEN ASM_REWRITE_TAC[LET_THM]
THEN RESA_TAC
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`l=x''`
THEN REMOVE_ASSUM_TAC;


MRESAL_TAC Tame_list.MEM_replace[`l`;`r`;`[SND (split_normal_list L r (find_face L y) y z1)]`;`N`][Seq.mem_seq1;Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;];

DICH_TAC (42-28)
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`core L l`]
THEN MATCH_DICH_TAC 0
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[];



MRESAL_TAC uniq_snd_split_normal_parts[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL];

MRESAL_TAC uniq_fst_split_normal_parts[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL]]);;



 end;;





load_end __FILE__;;