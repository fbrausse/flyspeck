(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Tame Hypermap                                           *)
(* Lemma:  ELLLNYZ                                                            *)
(* Author:  Thomas Hales     *)
(* Date: Jan 11, 2014                                                *)
(* ========================================================================== *)

module Elllnyz = struct

  open Hales_tactic;;
  open Hypermap;;
  open Import_tame_classification;;
  open More_tame_concl;;
  open Tame_list;;

let ELLLNYZ_concl = `!x y. good_list x /\ good_list y /\ iso_fgraph x y ==>
  (iso (hypermap_of_list (x)) (hypermap_of_list (y)) \/
     iso (opposite_hypermap (hypermap_of_list (x))) (hypermap_of_list (y)))`;;

(* ************************************************************************ *)
(*  congruences *)
(* ************************************************************************ *)

(*
let CONG_NIL = prove_by_refinement(
  `!x. (__cong) x = {[]} <=> (x:(A)list) = [] `,
  (* {{{ proof *)
  [
  GEN_TAC;
  REWRITE_TAC[EXTENSION;IN_SING];
  REWRITE_TAC[IN;cong];
  TYPIFY `x = []` ASM_CASES_TAC;
    ASM_REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
    BY(REWRITE_TAC[rotate_nil]);
  ASM_REWRITE_TAC[NOT_FORALL_THM];
  TYPIFY `[]:(A) list` EXISTS_TAC;
  REWRITE_TAC[NOT_EXISTS_THM];
  ONCE_REWRITE_TAC[EQ_SYM_EQ];
  REWRITE_TAC[rotate_eq_nil];
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)
*)

let cong_sym = prove_by_refinement(
  `!a b. __cong a b ==> __cong b a`,
  (* {{{ proof *)
  [
  REWRITE_TAC[congs_rot];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  TYPIFY `sizel a - n` EXISTS_TAC;
  GMATCH_SIMP_TAC (GSYM Seq.rot_addn);
  FIRST_X_ASSUM_ST `LENGTH` MP_TAC THEN REWRITE_TAC[GSYM Seq.size];
  REWRITE_TAC[Seq.size_rot];
  SIMP_TAC [arith `n <= (s:num) ==> (s - n + n = s /\ s - n <= s)`];
  BY(REWRITE_TAC[Seq.rot_size;arith `n:num <= n`])
  ]);;
  (* }}} *)

let cong_refl = prove_by_refinement(
  `!a b. __cong a a`,
  (* {{{ proof *)
  [
  REWRITE_TAC[congs_rot];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `0` EXISTS_TAC;
  REWRITE_TAC[Seq.rot0];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let cong_trans = prove_by_refinement(
  `!a b c. __cong a b /\ __cong b c ==> __cong a c`,
  (* {{{ proof *)
  [
  REWRITE_TAC[congs_rot];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC (REWRITE_RULE[TAUT `(a ==> b ==> c) <=> (a /\ b ==> c)`] Seq.rot_add_mod);
  REPEAT (FIRST_X_ASSUM_ST `LENGTH` MP_TAC) THEN REWRITE_TAC[GSYM Seq.size];
  SIMP_TAC[];
  ASM_REWRITE_TAC[Seq.size_rot];
  SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `(if n' + n <= sizel a then n' + n else (n' + n) - sizel a)` EXISTS_TAC;
  REWRITE_TAC[];
  BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC)
  ]);;
  (* }}} *)

let cong_class = prove_by_refinement(
  `!a b. __cong a = __cong b ==> __cong a b`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  REPEAT WEAKER_STRIP_TAC;
  BY(FIRST_X_ASSUM (C INTRO_TAC [`b`]) THEN REWRITE_TAC[cong_refl])
  ]);;
  (* }}} *)

let cong_eq_hypermap_of_list = prove_by_refinement(
  `!x (y:((A)list)list). uniq(list_of_darts y) /\ MAP __cong x = MAP __cong y ==>
    hypermap_of_list x = hypermap_of_list y`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC List_hypermap_iso.rot_hypermap_of_list_eq;
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM MP_TAC;
  TYPIFY `x` (fun t -> SPEC_TAC (t,t));
  FIRST_X_ASSUM kill;
  TYPIFY `y` (fun t -> SPEC_TAC (t,t));
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[ALL2_DEF;MAP_EQ_NIL;MAP]);
  LIST_INDUCT_TAC;
    BY(ASM_REWRITE_TAC[MAP;NOT_CONS_NIL;MAP_EQ_NIL;]);
  REWRITE_TAC[ALL2_DEF;MAP;CONS_11];
  REWRITE_TAC[ALL2_DEF;MAP;CONS_11;NOT_CONS_NIL];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`t'`]);
  ASM_SIMP_TAC[TL;HD];
  DISCH_TAC;
  REPLICATE_TAC 2 (FIRST_X_ASSUM kill);
  FIRST_X_ASSUM (ASSUME_TAC o (MATCH_MP cong_class));
  FIRST_X_ASSUM (MP_TAC o (MATCH_MP cong_sym));
  REWRITE_TAC[congs_rot];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let good_list_cong_uniq = prove_by_refinement(
  `!x:((A)list)list. good_list x ==> uniq (MAP __cong x)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `uniq (MAP __cong x) <=> uniq x` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN SUBST1_TAC;
    MATCH_MP_TAC List_hypermap.good_list_uniq;
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[GSYM Seq.map_MAP];
  MATCH_MP_TAC Seq.map_inj_in_uniq;
  X_GENv_TAC "a";
  X_GENv_TAC "b";
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (MP_TAC o (MATCH_MP cong_class));
  REWRITE_TAC[congs_rot];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC List_hypermap.uniq_imp_unique_list;
  ASM_REWRITE_TAC[GSYM List_hypermap.rot_list_pairs;Seq.mem_rot];
  TYPIFY `?d. MEM d (list_pairs a)` (C SUBGOAL_THEN MP_TAC);
    REWRITE_TAC[GSYM List_hypermap.mem_not_nil];
    REWRITE_TAC[List_hypermap.size_list_pairs];
    REWRITE_TAC[List_hypermap.size_list_pairs;GSYM Seq.size_eq0];
    REWRITE_TAC[Seq.size_eq0];
    FIRST_X_ASSUM_ST `good_list` MP_TAC THEN REWRITE_TAC[List_hypermap.good_list];
    BY(ASM_MESON_TAC[Seq.allP]);
  REPEAT WEAKER_STRIP_TAC;
  GEXISTL_TAC [`d`;`x`];
  ASM_REWRITE_TAC[];
  CONJ2_TAC;
    BY(ASM_MESON_TAC[]);
  BY(ASM_MESON_TAC[List_hypermap.good_list])
  ]);;
  (* }}} *)

let good_list_cong_perm_eq = prove_by_refinement(
  `!x y. good_list x /\ good_list y /\ IMAGE __cong (set_of_list x) = IMAGE __cong (set_of_list y) ==> perm_eq (MAP __cong x) (MAP __cong y)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC uniq_perm_eq_map;
  ASM_SIMP_TAC[good_list_cong_uniq];
  BY(ASM_REWRITE_TAC[SET_OF_LIST_MAP])
  ]);;
  (* }}} *)

let CONG_hypermap_of_list = prove_by_refinement(
  `!x y. good_list x /\ good_list y /\ IMAGE __cong (set_of_list x) = IMAGE __cong (set_of_list y) ==>
    hypermap_of_list x = hypermap_of_list y`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC good_list_cong_perm_eq [`x`;`y`];
  ASM_SIMP_TAC[];
  REWRITE_TAC[GSYM Seq.map_MAP];
  DISCH_THEN (MP_TAC o (MATCH_MP perm_eq_map));
  REPEAT WEAKER_STRIP_TAC;
  RULE_ASSUM_TAC (REWRITE_RULE[Seq.map_MAP]);
  TYPIFY `hypermap_of_list x' = hypermap_of_list y` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN (SUBST1_TAC o GSYM);
    MATCH_MP_TAC List_hypermap_iso.hypermap_of_list_perm;
    ASM_REWRITE_TAC[];
    ONCE_REWRITE_TAC[Seq.perm_eq_sym];
    BY(ASM_REWRITE_TAC[]);
  MATCH_MP_TAC cong_eq_hypermap_of_list;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[List_hypermap.good_list])
  ]);;
  (* }}} *)


let map_good_list = prove_by_refinement(
  `!x (phi:A->B). 
    good_list x /\ inj_on phi    (elements_of_list x) ==>
    good_list (MAP (MAP phi) x)
  `,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.good_list];
  REWRITE_TAC[GSYM Seq.allP];
  REPEAT WEAKER_STRIP_TAC;
  nCONJ_TAC 1;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `MEM` MP_TAC THEN ASM_REWRITE_TAC[];
    REWRITE_TAC[MEM_EXISTS_EL];
    REWRITE_TAC[NOT_EXISTS_THM];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `~` (C INTRO_TAC [`EL i x`]);
    ANTS_TAC;
      BY(ASM_MESON_TAC[LENGTH_MAP;MEM_EL]);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `[] = u` MP_TAC THEN (ASM_SIMP_TAC[LENGTH_MAP;EL_MAP]);
    GMATCH_SIMP_TAC EL_MAP;
    CONJ_TAC;
      BY(ASM_MESON_TAC[LENGTH_MAP]);
    BY(ASM_MESON_TAC [MAP_EQ_NIL]);
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `[]` kill);
  COMMENT "uniq";
  REWRITE_TAC[map_list_of_darts];
  REWRITE_TAC[FORALL_PAIR_THM];
  REWRITE_TAC[MEM_MAP];
  REWRITE_TAC[EXISTS_PAIR_THM;PAIR_EQ];
  CONJ2_TAC;
    X_GENv_TAC "q1";
    X_GENv_TAC "q2";
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`(p1,p2)`]);
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[GSYM Seq.map_MAP];
  GMATCH_SIMP_TAC Seq.map_inj_in_uniq;
  ASM_REWRITE_TAC[PAIR_EQ];
  MATCH_MP_TAC inj_on_imp_inj_dart;
  BY(ASM_REWRITE_TAC[])
]);;
  (* }}} *)

(*
let MAP_find_face = prove_by_refinement(
  `!L (phi:A->B) p1 p2. inj_on phi (elements_of_list L) /\ 
     (p1,p2) IN darts_of_list L ==>
     find_face (MAP (MAP phi) L) (phi p1,phi p2) = MAP (\ x. phi(FST x),phi(SND x)) (find_face L (p1,p2)) `,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC then rt[MAP;List_hypermap.find_face_cons]
  rt[List_hypermap.darts_of_list;IN_SET_OF_LIST;List_hypermap.list_of_darts_nil;MEM]
st/r
fxa (C intro [`phi`;`p1`;`p2`])
st/r
rt[map_list_pairs]
rt[GSYM Seq.map_MAP]
fxast `x::y` mp
rt[List_hypermap.darts_of_list;IN_SET_OF_LIST;MEM;List_hypermap.list_of_darts_cons]
rt[Seq.mem_cat]
comment "cases"
typ `MEM (p1,p2) (list_pairs h)` asmcase
art[]
typ `MEM (phi p1,phi p2) (map (\u. phi (FST u),phi (SND u)) (list_pairs h))` ets
mt[]
typ `MEM (phi p1,phi p2) = MEM ((\u. phi (FST u),phi(SND u)) (p1,p2))` s1
rt[]
mmp Seq.map_f
art[]
art[]
dt
comment "0"
typ `~(MEM (phi p1,phi p2) (map (\u. phi (FST u),phi (SND u)) (list_pairs h)))` ets
dthen (unlist rt)
rt[ Seq.map_MAP]
fxa mmp
art[]
conj2
fxast `IN` mp then rt[List_hypermap.darts_of_list;IN_SET_OF_LIST;List_hypermap.list_of_darts_nil;MEM]
amt[List_hypermap.list_of_darts_cons;Seq.mem_cat]
mmp inj_on_subset
typ `elements_of_list (CONS h t)` ex
art[]
rt[List_hypermap.elements_of_list;SUBSET;IN_SET_OF_LIST]
rt[Seq.mem_undup;List_hypermap.list_of_elements] 
rt[Seq.flatten_cons;Seq.mem_cat]
mt[]
  ]);;
  (* }}} *)
*)

let find_face_map = prove_by_refinement(
  `!p1 p2 x. good_list x /\ inj_on phi (elements_of_list x) /\
     MEM (p1,p2) (list_of_darts x) ==>
    find_face (MAP (MAP phi) x) (phi p1,phi p2) = 
    MAP (\d. phi(FST d),phi(SND d)) (find_face x (p1,p2))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC List_hypermap.find_face_eq;
  INTRO_TAC map_good_list [`x`;`phi`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  SUBCONJ_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[List_hypermap.good_list]);
    REWRITE_TAC[map_list_of_darts;MEM_MAP;EXISTS_PAIR_THM;PAIR_EQ];
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  CONJ2_TAC;
    REWRITE_TAC[MEM_MAP;EXISTS_PAIR_THM;PAIR_EQ];
    GEXISTL_TAC [`p1`;`p2`];
    BY(ASM_REWRITE_TAC[GSYM List_hypermap.dart_in_face]);
  FIRST_X_ASSUM MP_TAC;
  FIRST_ASSUM (MP_TAC o (MATCH_MP List_hypermap.mem_find_face));
  REWRITE_TAC[List_hypermap.list_of_faces];
  REWRITE_TAC[GSYM MAP_o];
  TYPIFY `list_pairs o (MAP phi) = MAP (\d. phi (FST d),phi (SND d)) o list_pairs` (C SUBGOAL_THEN SUBST1_TAC);
    BY(MESON_TAC[GSYM map_list_pairs;FUN_EQ_THM;o_THM]);
  REWRITE_TAC[MAP_o];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[GSYM Seq.map_MAP];
  MATCH_MP_TAC Seq.map_f;
  BY(ASM_MESON_TAC[Seq.map_MAP])
  ]);;
  (* }}} *)

let hypermap_of_list_map = prove_by_refinement(
  `!x (phi:A->B). good_list x /\ inj_on phi (elements_of_list x) ==>
    iso (hypermap_of_list x) (hypermap_of_list (MAP (MAP phi) x))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC map_good_list [`x`;`phi`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  MATCH_MP_TAC Hypermap_iso.hyp_iso_imp_iso;
  TYPIFY `(\ u. phi (FST u),phi (SND u))` EXISTS_TAC;
  REWRITE_TAC[Hypermap_iso.hyp_iso_edge_face];
  ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list];
  REWRITE_TAC[FORALL_PAIR_THM];
  COMMENT "BIJ";
  SUBCONJ_TAC;
    BY(ASM_SIMP_TAC[BIJ_IMAGE_darts_of_list]);
  DISCH_TAC;
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "0";
  TYPIFY `phi p1,phi p2 IN darts_of_list (MAP (MAP phi) x)` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `BIJ` MP_TAC THEN REWRITE_TAC[BIJ;SURJ;FORALL_PAIR_THM];
    BY(ASM_MESON_TAC[]);
  REPEAT (GMATCH_SIMP_TAC Lp_gen_theory.e_list_ext_eq_e_list);
  TYPIFY `MEM (p1,p2) (list_of_darts x) /\  MEM (phi p1,phi p2) (list_of_darts (MAP (MAP phi) x))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_REWRITE_TAC[GSYM IN_SET_OF_LIST;GSYM List_hypermap.darts_of_list]);
  ASM_REWRITE_TAC[];
  ASM_REWRITE_TAC[List_hypermap.e_list];
  COMMENT "f_list";
  REPEAT (GMATCH_SIMP_TAC f_list_ext_f_list);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[ List_hypermap.f_list];
  GMATCH_SIMP_TAC find_face_map;
  ASM_REWRITE_TAC[];
  TYPIFY `(phi p1,phi p2) = (\d. phi (FST d),phi (SND d)) (p1,p2)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[]);
  GMATCH_SIMP_TAC next_el_MEM_map;
  SUBCONJ_TAC;
    MATCH_MP_TAC List_hypermap.uniq_find_face;
    BY(RULE_ASSUM_TAC(REWRITE_RULE[List_hypermap.good_list]) THEN ASM_REWRITE_TAC[]);
  DISCH_TAC;
  CONJ_TAC;
    BY(ASM_REWRITE_TAC[GSYM List_hypermap.dart_in_face]);
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (ASSUME_TAC o (MATCH_MP inj_on_imp_inj_dart));
  FIRST_X_ASSUM (fun t -> MATCH_MP_TAC (REWRITE_RULE[TAUT `(a ==> b ==> c) <=> (a /\ b ==> c)`] t));
  RULE_ASSUM_TAC (REWRITE_RULE[PAIR_EQ]) THEN ASM_REWRITE_TAC[];
  RULE_ASSUM_TAC(REWRITE_RULE[List_hypermap.good_list]) THEN ASM_REWRITE_TAC[];
  TYPIFY `find_face x u = find_face x (p1,p2) /\ find_face x v = find_face x (p1,p2)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[List_hypermap.mem_find_face_imp_faces_eq]);
  BY(ASM_MESON_TAC[List_hypermap.dart_in_face])
  ]);;
  (* }}} *)

(* ************************************************************************ *)
(*  REVERSE *)
(* ************************************************************************ *)

(* redone below
let list_pairs_rev = prove_by_refinement(
  `!(x:(A)list) d. MEM d (list_pairs x) ==> MEM (SND d,FST d) (list_pairs ( REVERSE x))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.list_pairs;FORALL_PAIR_THM];
  TYPIFY_GOAL_THEN `!s x. MEM x s <=> (?i. i < sizel s /\ nth (CHOICE (:A),CHOICE(:A)) s i = x)` (unlist REWRITE_TAC);
    BY(MESON_TAC[Seq.nthP]);
  TYPED_ABBREV_TAC `c = CHOICE (:A)`;
  REPEAT GEN_TAC;
  GMATCH_SIMP_TAC Seq.size2_zip;
  REWRITE_TAC[Seq.size_rot];
  REWRITE_TAC[arith `n:num <= n`];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `nth` MP_TAC;
  TYPIFY `sizel x = sizel (rot 1 x)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(MESON_TAC[Seq.size_rot]);
  ASM_SIMP_TAC[Seq.nth_zip;PAIR_EQ];
  REWRITE_TAC[REVERSE_rev];
  TYPIFY `sizel (rev x) = sizel (rot 1 (rev x))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(MESON_TAC[Seq.size_rot;Seq.size_rev]);
  ASM_SIMP_TAC[Seq.nth_zip;PAIR_EQ];
  ASM_SIMP_TAC[Seq2.nth_shift_left];
  REWRITE_TAC[Seq.size_rot];
  TYPIFY `sizel (rev x) = sizel x` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Seq.size_rev]);
  TYPIFY `sizel (zip (rev x) (rot 1 (rev x))) = sizel x` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC Seq.size2_zip;
    REWRITE_TAC[ Seq.size_rot;Seq.size_rev];
    BY(ARITH_TAC);
  COND_CASES_TAC;
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `i` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC Seq2.nth_shift_left;
    REWRITE_TAC[ Seq.size_rot;Seq.size_rev];
    REPEAT (GMATCH_SIMP_TAC Seq.nth_rev);
    ASM_REWRITE_TAC[arith `n - SUC (n - 1) = 0`];
    TYPIFY `i = (sizel (rot 1 x) - SUC 0)` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN (SUBST1_TAC o GSYM);
      REWRITE_TAC[Seq.size_rot];
      REPLICATE_TAC 2 (FIRST_X_ASSUM (unlist REWRITE_TAC));
      BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
    REWRITE_TAC[Seq.size_rot];
    BY(FIRST_X_ASSUM_ST `sizel` MP_TAC THEN ARITH_TAC);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `sizel x - i - 2` EXISTS_TAC;
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[arith `i < n /\ ~(i = n-1) ==> (n - i - 2 < n)`]);
  DISCH_TAC;
  GMATCH_SIMP_TAC Seq2.nth_shift_left;
  REPEAT (GMATCH_SIMP_TAC Seq.nth_rev);
  FIRST_X_ASSUM_ST `u = sizel (rot 1 (rev x))` kill;
  FIRST_X_ASSUM_ST `u = sizel (rot 1 ( x))` kill;
  FIRST_X_ASSUM MP_TAC THEN ASM_REWRITE_TAC[];
  TYPED_ABBREV_TAC `n = sizel x`;
  REPEAT (FIRST_X_ASSUM_ST `sizel` kill);
  DISCH_TAC;
  COND_CASES_TAC;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  EXPAND_TAC "p1";
  EXPAND_TAC "p2";
  BY(REPEAT (CONJ_TAC) THEN REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC) THEN (REPEAT (FIRST_X_ASSUM MP_TAC)) THEN ARITH_TAC)
  ]);;
  (* }}} *)
*)


let good_list_REVERSE = prove_by_refinement(
  `!(x:((A)list)list). good_list x ==> good_list (MAP REVERSE x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.good_list];
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "[]";
  nCONJ_TAC 1;
    FIRST_X_ASSUM_ST `all` MP_TAC;
    REWRITE_TAC[GSYM Seq.allP;MEM_MAP];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`x''`]);
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[REVERSE_REVERSE;REVERSE]);
  ASM_REWRITE_TAC[];
  CONJ2_TAC;
    REWRITE_TAC[FORALL_PAIR_THM;list_of_darts_rev];
    BY(ASM_MESON_TAC[FST;SND;PAIR]);
  COMMENT "uniq";
  FIRST_X_ASSUM (MP_TAC o (MATCH_MP list_of_darts_rev_uniq));
  GMATCH_SIMP_TAC Seq.map_inj_uniq;
  CONJ_TAC;
    REWRITE_TAC[FORALL_PAIR_THM];
    REWRITE_TAC[FORALL_PAIR_THM;PAIR_EQ];
    BY(MESON_TAC[]);
  BY(MESON_TAC[Seq.map_MAP])
  ]);;
  (* }}} *)

let dart_REVERSE = prove_by_refinement(
  `!x. good_list x ==> dart(hypermap_of_list (MAP REVERSE x)) = 
    dart(hypermap_of_list x)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP good_list_REVERSE));
  ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list];
  REWRITE_TAC[EXTENSION;IN_SET_OF_LIST;List_hypermap.darts_of_list];
  REWRITE_TAC[FORALL_PAIR_THM];
  REWRITE_TAC[list_of_darts_rev];
  RULE_ASSUM_TAC (REWRITE_RULE[List_hypermap.good_list;FORALL_PAIR_THM]);
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let edge_map_reverse = prove_by_refinement(
  `!x p1 p2. good_list x /\ MEM (p1,p2) (list_of_darts x) ==> 
    edge_map (hypermap_of_list (MAP REVERSE x)) (p1,p2) = (p2,p1)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP good_list_REVERSE));
  ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;];
  GMATCH_SIMP_TAC Lp_gen_theory.e_list_ext_eq_e_list;
  REWRITE_TAC[GSYM IN_SET_OF_LIST];
  INTRO_TAC dart_REVERSE [`x`];
  ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;List_hypermap.darts_of_list;List_hypermap.e_list];
  BY(ASM_MESON_TAC[IN_SET_OF_LIST;List_hypermap.darts_of_list])
  ]);;
  (* }}} *)

let list_of_faces_rev = prove_by_refinement(
  `!x (f). MEM f (list_of_faces x) ==> MEM (rot 1 (REVERSE (MAP (\ (d:A#A). SND d,FST d)  f)))
 (list_of_faces (MAP REVERSE x)) `,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.list_of_faces;GSYM MAP_o];
  TYPIFY `list_pairs o REVERSE = (\x:(A)list. rot 1 (REVERSE (MAP (\d. SND d,FST d) (list_pairs x))))` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[FUN_EQ_THM;o_THM;list_pairs2_rev]);
  REWRITE_TAC[MEM_MAP];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let find_face_rev = prove_by_refinement(
  `!x p1 p2. good_list x /\ MEM (p1,p2) (list_of_darts x) ==>
   find_face (MAP REVERSE x) (p1,p2) = rot 1 (REVERSE(MAP (\d. SND d,FST d)
				   (find_face x (p2,p1))))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC List_hypermap.find_face_eq;
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP good_list_REVERSE));
  SUBCONJ_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[List_hypermap.good_list]);
    REWRITE_TAC[list_of_darts_rev];
    BY(ASM_MESON_TAC[List_hypermap.good_list;PAIR;SND;FST]);
  REPEAT WEAKER_STRIP_TAC;
  CONJ2_TAC;
    REWRITE_TAC[Seq.mem_rot;REVERSE_rev;Seq.mem_rev];
    REWRITE_TAC[MEM_MAP;EXISTS_PAIR_THM;PAIR_EQ];
    GEXISTL_TAC [`p2`;`p1`];
    ASM_REWRITE_TAC[GSYM List_hypermap.dart_in_face];
    BY(ASM_MESON_TAC[List_hypermap.good_list;SND;FST;PAIR]);
  TYPIFY `MEM (p2,p1) (find_face x (p2,p1))` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[GSYM List_hypermap.dart_in_face];
    BY(ASM_MESON_TAC[List_hypermap.good_list;SND;FST;PAIR]);
  INTRO_TAC List_hypermap.mem_find_face [`p2,p1`;`x`];
  ANTS_TAC;
    BY(ASM_MESON_TAC[List_hypermap.good_list;SND;FST;PAIR]);
  DISCH_TAC;
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP list_of_faces_rev));
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let indexl_rev = prove_by_refinement(
  `!y (d:A). uniq y /\ 
     MEM d y ==> indexl d (rev y) = sizel y - SUC(indexl d y)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC indexl_uniq;
  TYPED_ABBREV_TAC `c = CHOICE (:A)`;
  TYPIFY `c` EXISTS_TAC;
  REWRITE_TAC[Seq.rev_uniq];
  ASM_REWRITE_TAC[Seq.rev_uniq];
  GMATCH_SIMP_TAC Seq.nth_rev;
  GMATCH_SIMP_TAC (arith `i < s ==> (s - SUC (s - SUC i) = i)`);
  ASM_SIMP_TAC[Seq.nth_index];
  REWRITE_TAC[Seq.size_rev];
  SUBCONJ_TAC;
    BY(ASM_REWRITE_TAC[Seq.index_mem]);
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let next_el_rev = prove_by_refinement(
  `!y (d:A). uniq y /\ MEM d y ==> next_el (rev y) d = prev_el y d`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC Seq2.next_el_alt [`CHOICE(:A)`];
  TYPED_ABBREV_TAC `c = CHOICE (:A)`;
  DISCH_THEN (GMATCH_SIMP_TAC);
  INTRO_TAC Seq2.prev_el_alt [`CHOICE(:A)`];
  DISCH_THEN GMATCH_SIMP_TAC;
  ASM_REWRITE_TAC[Seq.mem_rev];
  GMATCH_SIMP_TAC indexl_rev;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC Seq2.nth_shift_left;
  GMATCH_SIMP_TAC Seq2.nth_shift_right;
  REWRITE_TAC[Seq.size_rev];
  SUBCONJ_TAC;
    BY(ASM_REWRITE_TAC[Seq.index_mem]);
  DISCH_TAC;
  SUBCONJ_TAC;
    BY(FIRST_X_ASSUM MP_TAC THEN ARITH_TAC);
  DISCH_TAC;
  COND_CASES_TAC THEN ASM_REWRITE_TAC[] THEN REPEAT (GMATCH_SIMP_TAC Seq.nth_rev) THEN COND_CASES_TAC THEN NUM_REDUCE_TAC;
        BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
      BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  TYPIFY `(sizel y - SUC (sizel y - SUC (indexl d y) + 1)) = indexl d y - 1` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  REWRITE_TAC[];
  BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC)
  ]);;
  (* }}} *)

let face_map_reverse = prove_by_refinement(
  `!x p1 p2. good_list x /\ MEM (p1,p2) (list_of_darts x) ==> 
    face_map (hypermap_of_list (MAP REVERSE x)) (p1,p2) = 
   (\d. SND d,FST d) (inverse (face_map (hypermap_of_list x)) (p2,p1))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP good_list_REVERSE));
  ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;];
  (GMATCH_SIMP_TAC f_list_ext_f_list);
  SUBCONJ_TAC;
    REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST;];
    ASM_REWRITE_TAC[list_of_darts_rev];
    RULE_ASSUM_TAC (REWRITE_RULE[List_hypermap.good_list;FORALL_PAIR_THM]);
    BY(ASM_MESON_TAC[]);
  DISCH_TAC;
  GMATCH_SIMP_TAC List_hypermap.f_list_ext_inverse;
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[List_hypermap.good_list;]);
  DISCH_TAC;
  REWRITE_TAC[Sphere.res];
  TYPIFY `p2,p1 IN darts_of_list x` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[IN_SET_OF_LIST;List_hypermap.darts_of_list;List_hypermap.good_list;PAIR;FST;SND]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[List_hypermap.f_list];
  INTRO_TAC List_hypermap.mem_find_face_nonempty [`p1,p2`;`x`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[List_hypermap.good_list;]);
  TYPED_ABBREV_TAC `f = find_face x (p1,p2)`;
  DISCH_TAC;
  GMATCH_SIMP_TAC find_face_rev;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC Seq2.next_el_rot_eq;
  SUBCONJ_TAC;
    REWRITE_TAC[REVERSE_rev;Seq.rev_uniq];
    REWRITE_TAC[GSYM Seq.map_MAP];
    GMATCH_SIMP_TAC Seq.map_inj_uniq;
    CONJ_TAC;
      REWRITE_TAC[FORALL_PAIR_THM;PAIR_EQ];
      BY(MESON_TAC[]);
    MATCH_MP_TAC List_hypermap.uniq_find_face;
    BY(ASM_MESON_TAC[List_hypermap.good_list;]);
  DISCH_TAC;
  REWRITE_TAC[REVERSE_rev];
  (GMATCH_SIMP_TAC next_el_rev);
  SUBCONJ_TAC;
    CONJ_TAC;
      REWRITE_TAC[GSYM Seq.map_MAP];
      GMATCH_SIMP_TAC Seq.map_inj_uniq;
      CONJ_TAC;
        REWRITE_TAC[FORALL_PAIR_THM;PAIR_EQ];
        BY(MESON_TAC[]);
      MATCH_MP_TAC List_hypermap.uniq_find_face;
      BY(ASM_MESON_TAC[List_hypermap.good_list;]);
    REWRITE_TAC[MEM_MAP;EXISTS_PAIR_THM;PAIR_EQ];
    GEXISTL_TAC [`p2`;`p1`];
    REWRITE_TAC[];
    REWRITE_TAC[GSYM List_hypermap.dart_in_face];
    BY(ASM_MESON_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `p1,p2 = (\d. SND d,FST d) (p2,p1)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[]);
  GMATCH_SIMP_TAC prev_el_map;
  REWRITE_TAC[FORALL_PAIR_THM;PAIR_EQ];
  REWRITE_TAC[];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

(*
let hypermap_of_list_reverse = prove_by_refinement(
  `!(x:((A)list)list). good_list x ==> 
     hyp_iso I (hypermap_of_list (MAP REVERSE x),
     hyp_conj (inverse (face_map (hypermap_of_list x))) 
       (opposite_hypermap (hypermap_of_list x)))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP good_list_REVERSE));
  REWRITE_TAC[Hypermap_iso.hyp_iso_edge_face;I_BIJ_EQ;I_THM];
  TYPIFY `(inverse(face_map (hypermap_of_list x))) permutes dart (hypermap_of_list x)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC PERMUTES_INVERSE;
    BY(REWRITE_TAC[Hypermap.face_map_and_darts]);
  ASM_SIMP_TAC[dart_REVERSE];
  TYPIFY `dart (opposite_hypermap (hypermap_of_list x)) =          dart (hypermap_of_list x)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[ Tame_opposite.opposite_components]);
  SUBCONJ_TAC;
    GMATCH_SIMP_TAC hyp_conj_components;
    BY(ASM_REWRITE_TAC[]);
  DISCH_TAC;
  REWRITE_TAC[FORALL_PAIR_THM];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC hyp_conj_components [`(inverse (face_map (hypermap_of_list x)))`;`(opposite_hypermap (hypermap_of_list x))`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  REWRITE_TAC[opposite_hypermap_map];
  REPEAT (GMATCH_SIMP_TAC PERMUTES_INVERSE_INVERSE);
  CONJ_TAC;
    BY(MESON_TAC[Hypermap.face_map_and_darts]);
  ASM_SIMP_TAC[o_THM];
  TYPIFY `((face_map (hypermap_of_list x))) permutes dart (hypermap_of_list x)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Hypermap.face_map_and_darts]);
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP PERMUTES_INVERSES));
  (ASM_REWRITE_TAC[])
  gm edge_map_reverse
  art[]
  subconj
  amt[List_hypermap.components_hypermap_of_list;List_hypermap.darts_of_list;IN_SET_OF_LIST]
  dt
  conj
    typ`edge_map (hypermap_of_list x) (node_map (hypermap_of_list x) (face_map (hypermap_of_list x) (p1,p2)) ) = edge_map (hypermap_of_list x) (p2,p1)` ets
gm PERMUTES_INJECTIVE
mt[Hypermap.edge_map_and_darts]
typ `edge_map (hypermap_of_list x) (node_map (hypermap_of_list x) (face_map (hypermap_of_list x) (p1,p2))) = (edge_map (hypermap_of_list x) o  (node_map (hypermap_of_list x)) o  (face_map (hypermap_of_list x))) (p1,p2)` s1
rt[ o_THM]
rt[Hypermap.hypermap_lemma;I_THM]
  ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;];
  GMATCH_SIMP_TAC Lp_gen_theory.e_list_ext_eq_e_list;
subconj
  rule(rr[List_hypermap.good_list])
 amt[FST;SND;PAIR]
dt
  ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;List_hypermap.darts_of_list;List_hypermap.e_list];
 comment "face"
  ]);;
  (* }}} *)
*)

let hypermap_of_list_reverse = prove_by_refinement(
  `!(x:((A)list)list). good_list x ==> 
     hyp_iso I (hypermap_of_list (MAP REVERSE x),
     hyp_conj ( (node_map (hypermap_of_list x))) 
       (opposite_hypermap (hypermap_of_list x)))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP good_list_REVERSE));
  REWRITE_TAC[Hypermap_iso.hyp_iso_edge_face;I_BIJ_EQ;I_THM];
  TYPIFY `((node_map (hypermap_of_list x))) permutes dart (hypermap_of_list x)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Hypermap.node_map_and_darts]);
  ASM_SIMP_TAC[dart_REVERSE];
  REWRITE_TAC[Asfutbf.hyp_conj_opposite_components];
  REWRITE_TAC[FORALL_PAIR_THM];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM (p1,p2) (list_of_darts x)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[List_hypermap.components_hypermap_of_list;List_hypermap.darts_of_list;IN_SET_OF_LIST]);
  GMATCH_SIMP_TAC edge_map_reverse;
  GMATCH_SIMP_TAC face_map_reverse;
  ASM_REWRITE_TAC[];
  TYPED_ABBREV_TAC `H = hypermap_of_list x`;
  TYPIFY `inverse (node_map H) = face_map H o edge_map H` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[Hypermap.inverse_hypermap_maps]);
  TYPIFY `node_map H = inverse (edge_map H) o inverse (face_map H)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[GSYM Hypermap.inverse2_hypermap_maps]);
  TYPIFY `inverse (face_map H) o   face_map H o  edge_map H = edge_map H` (C SUBGOAL_THEN SUBST1_TAC);
    ONCE_REWRITE_TAC[o_ASSOC];
    BY(REWRITE_TAC[Local_lemmas.HYP_MAPS_INVERSABLE;I_O_ID]);
  TYPIFY `MEM (p2,p1)  (list_of_darts x)` (C SUBGOAL_THEN ASSUME_TAC);
    RULE_ASSUM_TAC (REWRITE_RULE[FST;SND;PAIR;FORALL_PAIR_THM;List_hypermap.good_list]);
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[o_THM];
  REPEAT (GMATCH_SIMP_TAC PERMUTES_INVERSE_EQ);
  SUBCONJ_TAC;
    BY(MESON_TAC[Hypermap.edge_map_and_darts]);
  DISCH_THEN (unlist REWRITE_TAC);
  TYPIFY `edge_map (hypermap_of_list x) = e_list_ext x` (C SUBGOAL_THEN MP_TAC);
    BY(ASM_MESON_TAC[List_hypermap.components_hypermap_of_list]);
  ASM_REWRITE_TAC[];
  DISCH_THEN SUBST1_TAC;
  REPEAT (GMATCH_SIMP_TAC Lp_gen_theory.e_list_ext_eq_e_list);
  ASM_REWRITE_TAC[List_hypermap.e_list];
  TYPIFY `!d. d IN dart H <=> MEM d (list_of_darts x)` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "H";
    (ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list]);
    BY((ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;List_hypermap.darts_of_list;IN_SET_OF_LIST]));
  RULE_ASSUM_TAC (REWRITE_RULE[List_hypermap.good_list]);
  REPEAT (FIRST_X_ASSUM MP_TAC) THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  INTRO_TAC Hypermap.lemma_dart_inveriant_under_inverse_maps [`H`;`(p2,p1)`];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let good_list_iso_fgraph_proper = prove_by_refinement(
  `!phi:A -> B x y. good_list x /\ good_list y /\ 
  IMAGE __cong (IMAGE (MAP phi) (set_of_list x)) =
            IMAGE __cong (set_of_list y) /\
            inj_on phi (UNIONS (IMAGE (\f. set_of_list f) (set_of_list x)))
    ==>
	      (iso (hypermap_of_list (x)) (hypermap_of_list (y)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[iso_fgraph;is_iso;is_Iso;is_pr_Iso;is_pr_Hom;EQ_CLASS;IMAGE_INFIX];
  REPEAT WEAKER_STRIP_TAC;
  RULE_ASSUM_TAC (REWRITE_RULE[GSYM elements_of_list_unions]);
  COMMENT "proper";
  RULE_ASSUM_TAC(REWRITE_RULE[GSYM SET_OF_LIST_MAP]);
  RULE_ASSUM_TAC(ONCE_REWRITE_RULE[SET_OF_LIST_MAP]);
  INTRO_TAC CONG_hypermap_of_list [`(MAP (MAP phi) x)`;`y`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    MATCH_MP_TAC map_good_list;
    BY(ASM_REWRITE_TAC[]);
  DISCH_THEN (SUBST1_TAC o GSYM);
  MATCH_MP_TAC hypermap_of_list_map;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

(*
let ELLLNYZ = prove_by_refinement(
  `!(x:((A)list) list) (y:((B)list)list). good_list x /\ good_list y /\ iso_fgraph x y ==>
  (iso (hypermap_of_list (x)) (hypermap_of_list (y)) \/
     iso (opposite_hypermap (hypermap_of_list (x))) (hypermap_of_list (y)))`,
  (* {{{ proof *)
  [
(* redo with good_list_iso_fgraph_proper *)
rt[iso_fgraph;is_iso;is_Iso;is_pr_Iso;is_pr_Hom;EQ_CLASS;IMAGE_INFIX]
st/r
rule (rr[GSYM elements_of_list_unions])
comment "proper"
fxa disjcase
disj1
rule(rr[GSYM SET_OF_LIST_MAP])
rule(orr[SET_OF_LIST_MAP])
intro CONG_hypermap_of_list [`(MAP (MAP phi) x)`;`y`]
art[]
ants
mmp map_good_list
art[]
dthen (sub1 o GSYM)
comment "improper"
  ]);;
  (* }}} *)
*)

let ELLLNYZ = prove_by_refinement(
  `!(x:((A)list) list) (y:((B)list)list). good_list x /\ good_list y /\ iso_fgraph x y ==>
  (iso (hypermap_of_list (x)) (hypermap_of_list (y)) \/
     iso (opposite_hypermap (hypermap_of_list (x))) (hypermap_of_list (y)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[iso_fgraph;is_iso;is_Iso;is_pr_Iso;is_pr_Hom;EQ_CLASS;IMAGE_INFIX];
  REPEAT WEAKER_STRIP_TAC;
  COMMENT "proper";
  FIRST_X_ASSUM DISJ_CASES_TAC;
    DISJ1_TAC;
    MATCH_MP_TAC good_list_iso_fgraph_proper;
    BY(ASM_MESON_TAC[]);
  COMMENT "improper";
  DISJ2_TAC;
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[GSYM SET_OF_LIST_MAP];
  FIRST_ASSUM (ASSUME_TAC o (MATCH_MP good_list_REVERSE));
  INTRO_TAC hypermap_of_list_reverse [`y`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[GSYM Asfutbf.iso_opposite_adjoint];
  INTRO_TAC Hypermap.iso_trans [`hypermap_of_list x`;`hypermap_of_list (MAP REVERSE y)`;`opposite_hypermap (hypermap_of_list y)`];
  DISCH_THEN MATCH_MP_TAC;
  CONJ_TAC;
    MATCH_MP_TAC good_list_iso_fgraph_proper;
    ASM_REWRITE_TAC[];
    TYPIFY `phi` EXISTS_TAC;
    BY(ASM_REWRITE_TAC[GSYM SET_OF_LIST_MAP]);
  INTRO_TAC Hypermap.iso_trans [`hypermap_of_list (MAP REVERSE y)`;`hyp_conj (node_map (hypermap_of_list y)) (opposite_hypermap (hypermap_of_list y))`;`opposite_hypermap (hypermap_of_list y)`];
  DISCH_THEN MATCH_MP_TAC;
  CONJ_TAC;
    BY(ASM_MESON_TAC[Hypermap_iso.hyp_iso_imp_iso]);
  MATCH_MP_TAC Hypermap.iso_sym;
  MATCH_MP_TAC Hypermap_iso.hyp_iso_imp_iso;
  TYPIFY `(node_map (hypermap_of_list y))` EXISTS_TAC;
  MATCH_MP_TAC Asfutbf.hyp_conj_hyp_iso;
  REWRITE_TAC[Tame_opposite.opposite_components];
  BY(REWRITE_TAC[Hypermap.node_map_and_darts])
  ]);;
  (* }}} *)

 end;;
