(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Definitions 2                                                              *)
(* Chapter: Tame Hypermap                                                     *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2013-12-12                                                           *)
(* ========================================================================== *)


needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
(* flyspeck_needs "tame/import_tame_classification.hl";; *)

module Tame_defs2 = struct

(*
open Hales_tactic;;
open Hypermap;;
open Import_tame_classification;;
*)

parse_as_infix("POWER",(24,"right"));;
unparse_as_infix "iso";;

  let new_definition' t = 
    if Hales_tactic.has_stv t 
    then (Print_types.print_term_types t; failwith "new_definition has stv") 
    else new_definition t;;

(* ========================================================================== *)
(* February 2014 additions *)
(* definitions
 *)
(* ========================================================================== *)

let good_list = new_definition'
  `!(L:((A)list)list). good_list L <=>
            uniq (list_of_darts L) /\
            all (\l. ~(l = [])) L /\
            (!d. MEM d (list_of_darts L)
                 ==> MEM (SND d,FST d) (list_of_darts L))`;;

let good_list_nodes = new_definition'
  `!(L:((A)list)list). good_list_nodes L <=>
            node_set (hypermap_of_list L) = 
      set_of_list (nodes_of_list L)`;;

let good_graph = new_definition'
 `!g. good_graph g <=>
            good_list (fgraph g) /\
            good_list_nodes (fgraph g) /\
            finalGraph g /\
            all uniq (fgraph g) /\
            (!v. v IN vertices_set2 g
                 ==> facesAt g v = FILTER (\f. MEM v (FST f)) (faces g)) /\
            vertices_set2 g = elements_of_list (fgraph g)`;;

let iso_list = new_definition' `!L N L' N'. iso_list (L,N) (L',N') <=>
   (?(phi:A->B).  inj_on phi (elements_of_list L) /\
      L' = MAP (MAP phi) L /\
      N' = MAP (MAP (\u. phi (FST u),phi (SND u))) N)`;;

let isop_list = new_definition' `!L N L' N'. 
  isop_list (phi:A->B) (L,N) (L',N') <=>
   (inj_on phi (elements_of_list L) /\
      L' = MAP (MAP phi) L /\
      N' = MAP (MAP (\u. phi (FST u),phi (SND u))) N)`;;

(*
let indexf = new_definition' `!s x y. indexf (x:A) y s = 
   (indexl y s + (sizel s - indexl x s) MOD (sizel s))`;;
*)

let indexf = new_definition' `!s x y. indexf (x:A) y s = 
  if (MEM x s /\ MEM y s) then (indexl y s + (sizel s - indexl x s)) MOD sizel s 
  else sizel s`;;

let f_last = new_definition'
 `f_last L (s:(A#A)list) <=> (next_el s (LAST s) = f_list L (LAST s))`;;

let one_step_list = new_definition' `one_step_list L (x:A#A) y = 
  (y = f_list L x \/ y = (f_list L (e_list x)))`;;

let loop_list = new_definition'
  `loop_list L (s:(A#A)list) <=>
    (all (\x. MEM x (list_of_darts L) /\ one_step_list L x (next_el s x)) s)`;;

(* March 9, 2014. Def. no good.  next_el requires uniq s
let contour_list = new_definition'
  `contour_list L (s:(A#A) list) <=>
    (all (\x. MEM x (list_of_darts L) /\ 
       (x = LAST s \/ one_step_list L x (next_el s x))) s)`;;
*)

let contour_list = new_definition'
  `contour_list L (s:(A#A) list) <=>
    (all (\x. MEM x (list_of_darts L)) s /\ 
     (!i. SUC i < sizel s ==> one_step_list L (EL i s) (EL (SUC i) s)))`;;

let normal_list = new_definition'
  `normal_list L N <=>
    (uniq (flatten N) /\
     all (\s. ~(s = [])) N /\
     all (f_last L) N /\
     all (loop_list L) N /\
     (!(d:A#A). MEM d (flatten N) ==> 
	(node (hypermap_of_list L) d SUBSET set_of_list (flatten N))))`;;

let list_of_face = new_definition' `list_of_face H (ff:A->bool) = 
  map (\i. node H ((face_map H POWER i) (CHOICE ff))) (upt 0 (CARD ff))`;;

let list_of_hypermap = new_definition' `list_of_hypermap (H:(A)hypermap) = 
  map (list_of_face H) (list_of_set (face_set H))`;;

let core_list = new_definition' `core_list PN = 
  map (\f. map (\x. FST (HD (x:(A#B)list))) f) PN`;;

let partition_into_atom0 = new_recursive_definition list_RECURSION
  `partition_into_atom0 (n:A->A) acc [] = acc /\
   partition_into_atom0 (n:A->A) acc (r::rs) = 
     if (acc = []) then partition_into_atom0 n [[r]] rs
     else (if (n r = HD(HD acc)) 
           then partition_into_atom0 n ((r:: HD acc)::TL acc) rs
	   else partition_into_atom0 n ([r]::acc) rs)`;;

let partition_into_atom0r = new_definition' 
  `partition_into_atom0r n acc (r:(A)list) = 
  partition_into_atom0 n acc (rev r)`;;
     
let partition_into_atom = new_definition' `partition_into_atom n r =
  partition_into_atom0 (n:A->A) [] (rev r)`;;

(* old:
let parts = new_definition `parts L r = 
  (let H = hypermap_of_list L in
     partition_into_atom (inverse (node_map H)) r)`;;
*)

let parts = new_definition' `parts L (r:(A#A)list) = 
  partition_into_atom ((f_list L) o e_list) r`;;

(* redone, feb 2 2014 *)

let quotient_list = new_definition'
 `quotient_list (L:((A)list)list) N = 
  core_list (map (parts L) N)`;;

let final_list = new_definition' 
  `final_list L r <=> all (\ (d:A#A). f_list L d = next_el r d) r`;;

(* removed feb 28 2014.
let final_list = new_definition' `final_list L (r:(A#A)list) = 
   all (\p. sizel p = 1) (parts L r)`;;
*)

let final_dart_list = new_definition' `final_dart_list (L:((A)list)list) N = 
  flatten (filter (final_list L) N)`;;

let loop_of_list = new_definition' `loop_of_list (r:(A)list) = 
  loop(set_of_list r, next_el r)`;;

(* next_el_permutes...
let loop_of_list = new_definition' `loop_of_list (r:(A)list) = 
  loop(set_of_list r, res (next_el r) (set_of_list r) )`;;
*)

let loop_family_of_list = new_definition' `loop_family_of_list (N:((A)list)list) = 
  set_of_list (map loop_of_list N )`;;

let split_list_face_n = new_definition' `!newVs (f:(A) list) ram1 ram2.
         split_list_face_n f ram1 ram2 newVs =
         (let f1 = APPEND [ram1] (APPEND (betwn f ram1 ram2) [ram2]) in
          let f2 = APPEND [ram2] (APPEND (betwn f ram2 ram1) [ram1]) in
          APPEND (REVERSE newVs) f1,APPEND f2 newVs)`;;

let splitFace_list = new_definition'
  `!newVs oldF ram1 ram2 (fs:((A) list)list).
      splitFace_list fs ram1 ram2 oldF newVs =
         (let f1,f2 = split_list_face_n oldF ram1 ram2 newVs in
            f1,f2,(APPEND (replace oldF [f2] fs) [f1]))`;;

let split_normal_list = new_definition' `!L r f (ram1:A#A) (ram2:A#A). 
  split_normal_list L r f ram1 ram2 = 
    (let ram1' = next_el r ram1 in
     let ram2' = next_el r ram2 in
     let sz = (\x. sizel (filter (\t. t = x) (flatten L))) in
     let nd = (\x. map (\i. (n_list L POWER i) x) (upt 1 (sz (FST x)))) in
     let new2 = betwn f ram1 ram2' in
     let new1 = flatten (map nd new2) in
     let f1 = APPEND [ram1'] (APPEND (betwn r ram1' ram2) [ram2]) in
     let f2 = APPEND [ram2'] (APPEND (betwn r ram2' ram1) [ram1]) in
       (APPEND (REVERSE new1) f1,APPEND f2 new2))`;;

(* 9. Plane Graph Enumeration  *)
(* planarity *)

let C_EL = new_definition' `( #!# ) (l:(A) list) n = EL n l`;;

let not_equal = new_definition' `( ~= ) (x : A) y <=> ( ~(x = y))`;;

let list_prod1 = new_definition' `list_prod1 (a:A) (b:B list) = 
   MAP(\x. (a,x)) b`;;

let list_prod = new_definition' `list_prod (a:A list) (b:B list) =
   flatten (MAP (\x. list_prod1 x b) a)`;;

(* clean this up later.  Isabelle has special notation for (list_update f n [] xs) *)

let list_update = new_recursive_definition list_RECURSION
  `list_update [] i (v:A) = [] /\
   list_update (x :: xs) i (v:A) = 
      if (i=0) then (v :: xs) else (x :: list_update xs (i-1) v)`;;

let mapAt = new_recursive_definition list_RECURSION 
  `(mapAt [] (f:A->A) (xs:A list) = xs) /\
    (mapAt ((n:num) :: ns) (f:A->A) (xs:A list) = if (n < LENGTH xs) 
       then mapAt ns f (list_update xs n (f (EL n xs))) else mapAt ns f xs)`;;

let sub1 = new_definition' `sub1 ((xs:A list), (n:num)) = EL n xs`;;

let sub = new_definition' `sub   (a:A list) n = sub1 (a,n)`;;

let enumBase = new_definition' 
  `enumBase nmax = MAP (\i. [i]) (upt 0  (SUC nmax))`;;

let enumAppend = new_definition'
  (* `enumAppend nmax iss = 
   flatten (MAP (\is.   MAP (\n.  is #@# [n]) (upt (LAST is) (SUC nmax))) iss)`;; *)
  `enumAppend nmax iss =
         flatten
         (MAP (\is. MAP (\n. APPEND is [n]) (upt (LAST is) (SUC nmax))) iss)`;;

let enumerator = new_definition'
(*   `enumerator inner outer = 
      (let nmax = outer - 2 in
       let k = inner - 3 in
       (MAP (\is.  [0] #@# is #@# [outer -1]) 
	  ( (enumAppend nmax ^^ k) (enumBase nmax))))`;; *)
   `enumerator inner outer =
         (let nmax = outer - 2 in
          let k = inner - 3 in
          MAP (\is. APPEND [0] (APPEND is [outer - 1]))
          ((enumAppend nmax POWER k) (enumBase nmax)))`;;

let hideDupsRec = new_recursive_definition list_RECURSION 
  `hideDupsRec (a:A) [] = []  /\
    hideDupsRec a (b :: bs) = 
      if (a = b) then NONE :: (hideDupsRec b bs) 
      else  (SOME b) :: (hideDupsRec b bs)`;;

let hideDups = new_recursive_definition list_RECURSION
  `hideDups ([]:A list) = [] /\
    hideDups ((b:A) :: bs) = (SOME b) :: (hideDupsRec b bs)`;;

let indexToVertexList = new_definition' `indexToVertexList f v is = 
  hideDups (MAP (\k. nextVertices f k v) is)`;;

let height = new_definition' `height g v = EL v (heights g)`;;

let heightsNewVertices = new_definition' 
  `heightsNewVertices h1 h2 n = 
       MAP (\i. MIN  (h1 + i + 1) (h2 + n -i)  ) (upt 0  n)`;;

let minimalFace = new_definition' 
  `minimalFace = minimal_el (LENGTH o (FST:num list # bool -> num list))`;;

let minimalVertex = new_definition'
  `minimalVertex g f = minimal_el (height g) (FST (f:num list # bool))`;;

let split_face = new_definition' 
(*   `split_face (f:num list # bool) (ram1) ram2 newVs = 
      (let vs = vertices f in
       let f1 =  [ram1] #@#  (betwn vs ram1 ram2) #@# [ram2] in
       let f2 =  [ram2] #@# (betwn vs ram2 ram1) #@# [ram1] in
	 (Face (REVERSE newVs #@# f1) F), Face (f2 #@# newVs) F)`;; *)
 `split_face (f:num list # bool) ram1 ram2 newVs =
         (let vs = FST f in
          let f1 = APPEND [ram1] (APPEND (betwn vs ram1 ram2) [ram2]) in
          let f2 = APPEND [ram2] (APPEND (betwn vs ram2 ram1) [ram1]) in
          Face (APPEND (REVERSE newVs) f1) F,Face (APPEND f2 newVs) F)`;;

let split_list_face_n = new_definition' 
(*   `split_list_face_n (f:(A) list) (ram1) ram2 newVs = 
      (let f1 =  [ram1] #@#  (betwn f ram1 ram2) #@# [ram2] in
       let f2 =  [ram2] #@# (betwn f ram2 ram1) #@# [ram1] in
	 ( (REVERSE newVs #@# f1)),  (f2 #@# newVs))`;; *)
   `split_list_face_n (f:(A) list) ram1 ram2 newVs =
         (let f1 = APPEND [ram1] (APPEND (betwn f ram1 ram2) [ram2]) in
          let f2 = APPEND [ram2] (APPEND (betwn f ram2 ram1) [ram1]) in
          APPEND (REVERSE newVs) f1,APPEND f2 newVs)`;;


let replacefacesAt = new_definition'
  `replacefacesAt ns (f:(A) list # bool) fs Fs = mapAt ns (replace f fs) Fs`;;


(* a and b are vertices on the face f.  True if a and b are not
   equal and not adjacent, but connected by some "remote" edge *)

let duplicateEdge = new_definition' `duplicateEdge g f a b <=>
   (2 <= directedLength f a b /\ 2 <= directedLength f b a /\
    b IN set_of_list (neighbors g a))`;;

(* in practice, N = as defined below in containsDuplicateEdge.
   We test for enumerators (a weakly increasing list of indices)
   that are situated as v < w < w' with N w w' remote connection.
  
   N.B. The code states N w w'. That is, we never test for more
   than double joins.  The predecessor v is examined to make sure
   that there are no inserted vertices, as in v = w or w = w'.

   There is no testing for triangles or quads with enclosed vertices.

*)

let containsUnacceptableEdgeSnd = new_recursive_definition list_RECURSION
  `containsUnacceptableEdgeSnd N (v:num) [] = F /\
    (containsUnacceptableEdgeSnd N v (w :: ws) = 
  if (ws = []) then F else
    (let w' = HD ws in
     let ws' = TL ws in
  if (v < w /\ w < w' /\ N w w') then T 
  else containsUnacceptableEdgeSnd N w ws))`;;

(* in practice, N = as defined below in containsDuplicateEdge.
   We test for enumerators (a weakly increasing list of indices)
   that are situated as v < w  with N v w remote connection.
   This would create a double join. 

   Note that the first call is containsUnacceptableEdge, then the
   recursion continues with containsDuplicateEdge.

*)
  
let containsUnacceptableEdge = new_recursive_definition list_RECURSION
  `containsUnacceptableEdge N [] = F /\
  containsUnacceptableEdge N (v :: vs) = 
  if (vs = []) then F else
    (let w = HD vs in
     let ws = TL vs in
       if ((v:num) < w /\ N v w) then T else containsUnacceptableEdgeSnd N v vs)`;;

let containsDuplicateEdge = new_definition'
  `containsDuplicateEdge g f v is = containsUnacceptableEdge
    (\i j. duplicateEdge g f (nextVertices f i v ) (nextVertices f j v)) is`;;

(*
let splitFace = new_definition'
  `splitFace g ram1 ram2 oldF newVs = 
     (let fs = faces g in
      let n = countVertices g in
      let Fs = faceListAt g in
      let h = heights g in
      let vs1 = betwn (vertices oldF) ram1 ram2 in
      let vs2  = betwn (vertices oldF) ram2 ram1 in
      let (f1,f2) = split_face oldF ram1 ram2 newVs in
      let Fs = replacefacesAt vs1 oldF [f1] Fs in
      let Fs = replacefacesAt vs2 oldF [f2] Fs in
      let Fs = replacefacesAt [ram1] oldF [f2;f1] Fs in
      let Fs = replacefacesAt [ram2] oldF [f1;f2] Fs in
      let Fs = Fs #@# (REPLICATE (LENGTH (newVs)) [f1;f2]) in
	  (f1,f2, 
	   Graph ((replace oldF [f2] fs ) #@# [f1]) (n + LENGTH (newVs)) Fs 
	     (h #@# (heightsNewVertices ( h #!# ram1) (h #!# ram2) (LENGTH (newVs))))
	))`;;
*)

let splitFace = new_definition'
  `splitFace g ram1 ram2 oldF newVs =
         (let fs = faces g in
          let n = countVertices g in
          let Fs = faceListAt g in
          let h = heights g in
          let vs1 = betwn (FST oldF) ram1 ram2 in
          let vs2 = betwn (FST oldF) ram2 ram1 in
          let f1,f2 = split_face oldF ram1 ram2 newVs in
          let Fs = replacefacesAt vs1 oldF [f1] Fs in
          let Fs = replacefacesAt vs2 oldF [f2] Fs in
          let Fs = replacefacesAt [ram1] oldF [f2; f1] Fs in
          let Fs = replacefacesAt [ram2] oldF [f1; f2] Fs in
          let Fs = APPEND Fs (REPLICATE (LENGTH newVs) [f1; f2]) in
          f1,
          f2,
          Graph (APPEND (replace oldF [f2] fs) [f1]) (n + LENGTH newVs) Fs
          (APPEND h
          (heightsNewVertices (#!# h ram1) (#!# h ram2) (LENGTH newVs))))`;;

let subdivFace0 = new_recursive_definition list_RECURSION
  `subdivFace0 g f u n [] = makeFaceFinal f g /\
    subdivFace0 g f u n (vo :: vos) = 
      if (vo = NONE) then subdivFace0 g f u (SUC n) vos else
	(let v = the vo in
	   if (nextVertex f u = v /\ n = 0) then subdivFace0 g f v 0 vos
	   else 
	     (let ws = upt (countVertices g) (countVertices g + n) in
	      let (f1,f2,g') = splitFace g u v f ws in
		subdivFace0 g' f2 v 0 vos))`;;

let subdivFace = new_definition' 
  `subdivFace g f vos = subdivFace0 g f (the(HD vos)) 0 (TL vos)`;;

(* second version, where makeFaceFinal is pulled out *)

let subdivFace0_alt = new_recursive_definition list_RECURSION
  `subdivFace0_alt g f u n [] = (f,g) /\
    subdivFace0_alt g f u n (vo :: vos) = 
      if (vo = NONE) then subdivFace0_alt g f u (SUC n) vos else
	(let v = the vo in
	   if (nextVertex f u = v /\ n = 0) then subdivFace0_alt g f v 0 vos
	   else 
	     (let ws = upt (countVertices g) (countVertices g + n) in
	      let (f1,f2,g') = splitFace g u v f ws in
		subdivFace0_alt g' f2 v 0 vos))`;;

let subdivFaceFinal = new_definition' 
  `subdivFaceFinal g f vos = 
  (let (f,g) =subdivFace0_alt g f (the(HD vos)) 0 (TL vos)
   in makeFaceFinal f g)`;;

(* subdivFace = subdivFaceFinal *)

(* Feb 4, 2014.
 yet another variant that preprocesses the list vos into triples (u,v,n) *)

let subdivFace0_alt2 = new_recursive_definition list_RECURSION
  `subdivFace0_alt2 g f n0 ([]:(num#num#num) list) = (f,g) /\
  subdivFace0_alt2 g f n0 (uvn :: uvnos) = 
    (let (u,v,n) = uvn in
     let ws = upt n0 (n0+n) in
     let (f1,f2,g') = splitFace g u v f ws in
       subdivFace0_alt2 g' f2 (n+n0) uvnos)`;;

let subdivFaceFinal2 = new_definition'
  `subdivFaceFinal2 g f uvns = 
  (let (f,g) = subdivFace0_alt2 g f (countVertices g) uvns in
     makeFaceFinal f g)`;;

let generatePolygon = new_definition' 
  `generatePolygon n v (f:(num)list#bool) g = 
  (let enumeration = enumerator n (LENGTH (FST f)) in
   let enumeration = FILTER (\is. ~(containsDuplicateEdge g f v is)) enumeration in
   let vertexLists = MAP (\is. indexToVertexList f v is) enumeration in
     MAP (\vs. subdivFace g f vs) vertexLists)`;;

(* 1/2014 problem with this definition.  For there to be dart-uniqueness,
   which is a property of good_lists, we must filter out the duplicate
   edges.  So this doesn't work. *)

(* deprecated: 
let generatePolygon_relaxed = new_definition' 
  `generatePolygon_relaxed n v (f:(num)list#bool) g = 
  (let enumeration = enumerator n (LENGTH (vertices f)) in
   let vertexLists = MAP (\is. indexToVertexList f v is) enumeration in
     MAP (\vs. subdivFace g f vs) vertexLists)`;;
*)

let next_plane = new_definition'
  `next_plane p g = 
  (let fs = nonFinals g in
     if (fs = []) then [] else
       (let f = minimalFace fs in
	let v = minimalVertex g f in
	  (flatten (MAP (\i. generatePolygon i v f g) 
		      (upt 3 (SUC (maxGon p))) ))))`;;

(*
let next_plane_relaxed = new_definition'
  `next_plane_relaxed p g = 
  (let fs = nonFinals g in
     if (fs = []) then [] else
       (let f = minimalFace fs in
	let v = minimalVertex g f in
	  (flatten (MAP (\i. generatePolygon_relaxed i v f g) 
		      (upt 3 (SUC (maxGon p))) ))))`;;
*)

let PlaneGraphsP = new_definition'
  `planeGraphsP p = 
   { g | (Seed p,g) IN RTranCl (next_plane p)  /\ finalGraph g} `;;

(* XX Complete_Lattices.thy 930--955 contains special syntax for UNION <Union>,... *)

let PlaneGraphs = new_definition'
  `PlaneGraphs = UNIONS (IMAGE planeGraphsP UNIV)`;;

let planegraph = new_definition'
  `planegraph g = (?p. 
   (Seed p,g) IN RTranCl (next_plane p))`;;

(* add parameter q for variable upper bound on polygon size. *)

let planegraph_relaxed = new_definition'
  `planegraph_relaxed g = (?p q. 
   (Seed p,g) IN RTranCl (next_plane q))`;;

let planegraphP = new_definition'
  `planegraphP p g = ((Seed p,g) IN RTranCl (next_plane p))`;;



(* hyp'm: l'm *) (* was l'm *)

(*
let l_m = new_definition' `!L r (x:A#A). l'm L r x = 
  (let r' = rotate_to r x in
     min_num 
       { m | ~(ITER (SUC(SUC m)) (next_el r') x = 
	     f_list L (ITER (SUC m) (next_el r') x))  })`;;
2/28/2014 changed.
*)

let l_m = new_definition' `!L r (x:A#A). l'm L r x = 
     min_num 
       { m | ~(ITER (SUC(SUC m)) (next_el r) x = 
	     f_list L (ITER (SUC m) (next_el r) x))  }`;;

let l_y = new_definition' `!L r (x:A#A). l'y L r x = 
   ((f_list L) POWER (SUC (l'm L r x))) x`;;

let l_p = new_definition' `!L N r (x:A#A). l'p L N r x = 
  min_num 
  { p | MEM ((f_list L POWER (SUC p)) (l'y L r x)) (flatten N) }`;;

let l_z = new_definition' `!L N r (x:A#A). l'z L N r x =
  (f_list L POWER (SUC (l'p L N r x))) (l'y L r x)`;;


(* changed March 9, 2014.
   hypermap.hl defines hyp'q by an existence theorem and never establishes
   its minimality.  To be compatible with hypermap.hl, we do the same here.

   Then we prove a theorem about its range of values.

let l_q = new_definition' `!L N r (x:A#A). l'q L N r x = 
  (let x' = find_list (parts L r) x in
   let z' = find_list (parts L r) (l'z L N r x) in
  min_num { q | l'm L r x < q /\ 
		(next_el (parts L r) POWER (SUC q)) x' = z' })`;;

*)

let l_q = new_definition' `!L N r (x:A#A). l'q L N r x = 
    hyp'q (hypermap_of_list L) (loop_family_of_list N) (loop_of_list r) x`;;


let transform_list = new_definition' `!L N r (x:A#A).
  transform_list L x (N, r)  = 
  (
   let y = l'y L r x in
   let z = l'z L N r x in
   let ram2 = prev_el r z in
   let f = find_face L y in
   let split = split_normal_list L r f y ram2 in
   let N' = APPEND (replace r [SND split] N) [FST split] in
     if (final_list L r) then (N,r) else (N', SND split))`;;

let ntrans = new_definition' `!L N r (x:A#A) i.
  ntrans L N r x i = FST ((transform_list L x POWER i) (N,r))`;;

let rtrans = new_definition' `!L N r (x:A#A) i.
  rtrans L N r x i = SND ((transform_list L x POWER i) (N,r))`;;

let ytrans = new_definition' `!L N r (x:A#A) i.
  ytrans L N r x i = l'y L (rtrans L N r x i) x`;;

let ztrans = new_definition' `!L N r (x:A#A) i.
  ztrans L N r x i = l'z L (ntrans L N r x i) (rtrans L N r x i) x`;;

let mtrans = new_definition' `!L N r (x:A#A) i.
  mtrans L N r x i = l'm L (rtrans L N r x i) x`;;

let transform_count = new_definition'
  `!L N r (x:A#A). transform_count L N r x = 
      min_num {i | final_list L (rtrans L N r x i) }`;;



(* hyp'S: *)

(* March 9, 2014.  
let s_list = new_definition' `!L r (x:A#A). s_list L r x =
  (let r' = rotate_to r x in
     betwn r x (ITER (SUC (l'm L r x)) (next_el r') x))`;;

let s_list = new_definition' `!L r (x:A#A). s_list L r x =
     betwn r x (ITER (SUC (l'm L r x)) (next_el r) x)`;;

This has size l'm:  f^1 x... f^(m) x
*)

let s_list = new_definition' `!L r (d:A#A).
     s_list L r d = 
    MAP (\i. (f_list L POWER i) d) (iota 1  (l'm L r d))`;;


(* feb 28 2014 HD p -> LAST p, mar 10 2014 ~(s=[]) *)

let s_flag_list = new_definition' `!L N r (x:A#A).
     s_flag_list L N r x <=>
     (!u v.
          MEM u (final_dart_list L N) /\ MEM v (final_dart_list L N)
          ==> (?s. contour_list L s /\
		   ~(s = []) /\
                   HD s = u /\
                   LAST s = v /\
                   set_of_list s SUBSET set_of_list (final_dart_list L N))) /\
     (!r' p y.
          y = LAST p /\ // was HD
          MEM p (parts L r') /\
          MEM r' N /\
          ~final_list L r' /\
          ~MEM y (s_list L r x)
          ==> MEM (e_list y) (cat (s_list L r x) (final_dart_list L N)))`;;

(* was empty_flag_list, feb 28 2014 HD p -> LAST p, mar 10 2014 ~(s=[]) *)

let flag_list = new_definition' `!L N.
     flag_list L N <=>
     (!(u:A#A) v.
          MEM u (final_dart_list L N) /\ MEM v (final_dart_list L N)
          ==> (?s. contour_list L s /\
		   ~(s = []) /\
                   HD s = u /\
                   LAST s = v /\
                   set_of_list s SUBSET set_of_list (final_dart_list L N))) /\
     (!r' p y.
          y = LAST p /\ 
          MEM p (parts L r') /\
          MEM r' N /\
          ~final_list L r' 
          ==> MEM (e_list y) (final_dart_list L N))`;;


(* was respect_final_exact.  The set of finals in g can
   lag behind the set of finals in L//N. 

  March 14, 2014. Definition updated. xxd
  Was match_core_list.
  *)

let match_quotient_list = new_definition'
 `match_quotient_list g L N <=>
   (
    set_of_list (MAP (list_pairs o FST) 
       (filter SND (faces g)))
     SUBSET (set_of_list (filter (final_list L) N)) /\
   (fgraph g = quotient_list L N))`;;

(* Compare with the definition of marked_list.
   premarked_list gives conditions that will lead to a marked_list, 
   when supplied with a loop_choice r and x *)

let premarked_list = new_definition'
  `!g L N. premarked_list g L N <=> 
     (normal_list L N /\
     match_quotient_list g L N /\ 
     flag_list L N /\
     all uniq (fgraph g) /\  
     all (\v. sizel (filter (MEM v) (fgraph g)) > 1) 
       (flatten (fgraph g)))  
     `;;

let marked_list = new_definition' `!L N r (x:A#A).
  marked_list L N r x <=>
    is_restricted (hypermap_of_list L) /\
    normal_list L N /\
    MEM r N /\
    MEM x r /\
    (let qs = quotient_list L N in
       all uniq qs /\ // 1. simple
       all (\v. sizel (filter (MEM v) qs) > 1) 
	 (flatten qs)) /\ // 2. n' nondeg.
    next_el r x = f_list L x /\  // 3.
    (let r' = find_list N (e_list x) in final_list L r') /\ // 4.
    (final_list L r ==> flag_list L N) /\
    (~final_list L r ==> s_flag_list L N r x) // 5. flag
     `;;

(* This needs to be proved as a theorem *)

let transform_assumption = new_definition'
   `transform_assumption_v2 L  <=> (!N r (x:A#A).
    (good_list L /\ good_list_nodes L /\ marked_list L N r x ==> 
    marked_list L (ntrans L N r x 1) (rtrans L N r x 1) x))`;;

let loop_choice = new_definition'
 `!g L N. loop_choice g (L:((num)list)list) N =
  (let f = minimalFace (nonFinals g) in
   let v = minimalVertex g f in
   let w = nextVertex f v in
   let d = (v,w) in
   let r = find_list N d in
   let p = parts L r in
     (r,LAST (find_list p d)))`;;

(* Feb 9, 2014
  rotate_to w not x.  It puts ys and zs in increasing order. *)

let triple_data = new_definition'
  `!g L N. triple_data g L N = 
    (
      let (r,x) = loop_choice g L N in
      let k = transform_count L N r x in
      let w = next_el r x in
      let f = rotate_to (find_face L x) w in
      let ys = filter (\x. MEM x r /\ ~(next_el f x = next_el r x)) f in
      let zs = filter (\x. MEM x r /\ ~(prev_el f x = prev_el r x)) f in
      let zp = zip ys zs in
	(MAP (\ (y,z). (y,z,betwn f y z)) zp))`;;

let core_triple = new_definition'
  `core_triple g L N = 
  MAP (\ (u,v,ns). (FST u,FST v,sizel ns)) (triple_data g L N)`;;

let ordered_list = new_definition'
  `!vset extra. ordered_list vset extra <=>
      (let n = CARD vset in
	 vset = (0.. (n-1)) /\ extra = upt n (n+sizel extra))`;;

let dih2k_list =
  new_definition' `dih2k_list L <=> (?(u:A list). uniq u /\
				      L = [u;rev u])`;;

(*  enumeration lists.
    mk_triple1 inverse of dest_triple
    enum_of_VertexList inverse of indexToVertexList.

   enum (Isabelle side) -> VertexList -> triples (hypermap list side)

 *)

(* was mk_triples0, mk_triples *)

let mk_triple0 = new_recursive_definition list_RECURSION
    `mk_triple0 f u n sofar [] = rev sofar /\
     mk_triple0 f u n sofar (vo::vos) = 
      if (vo = NONE) then mk_triple0 f u (SUC n) sofar vos else
	(let (v:A) = the vo in 
	   if (next_el f u = v /\ n = 0) 
	   then 
	     mk_triple0 f v 0 sofar vos
	   else 
	     mk_triple0 f v 0 ((u,v,n)::sofar) vos)`;;

let mk_triple1 = new_definition'
 `mk_triple1 f (vs:((A)option)list) = 
   if (vs = []) then [] else mk_triple0 f (the (HD vs)) 0 [] (TL vs)`;;

(* was dest_triples0, dest_triple *)

let dest_triple0 = new_recursive_definition list_RECURSION
   `dest_triple0 f sofar [] = sofar /\
    dest_triple0 f sofar (uvn::uvns) =
      (let ((u:A),v,n) = uvn in
       let ns = nseq n NONE in
       let u0 = the (LAST sofar) in
       let b = MAP SOME (betwn f u0 u) in
	 if (sofar = []) 
	 then dest_triple0 f (flatten[sofar;[SOME u];ns;[SOME v]]) uvns
	 else
	   (if (u0 = u) then dest_triple0 f (flatten[sofar;ns;[SOME v]]) uvns
	    else (if (next_el f u0 = u) 
		  then dest_triple0 f (flatten[sofar;[SOME u];ns;[SOME v]]) uvns
		  else (dest_triple0 f (flatten[sofar;b;[SOME u];ns;[SOME v]]) uvns)
		 )))`;;

let dest_triple = new_definition'
  `dest_triple f uvns = dest_triple0 (f:(A)list) [] uvns`;;

(* next 3 defs are from Isabelle *)

let hideDupsRec = new_recursive_definition list_RECURSION 
  `hideDupsRec (a:A) [] = []  /\
    hideDupsRec a (b :: bs) = 
      if (a = b) then NONE :: (hideDupsRec b bs) 
      else  (SOME b) :: (hideDupsRec b bs)`;;

let hideDups = new_recursive_definition list_RECURSION
  `hideDups ([]:A list) = [] /\
    hideDups ((b:A) :: bs) = (SOME b) :: (hideDupsRec b bs)`;;

let indexToVertexList = new_definition' `indexToVertexList f v is = 
  hideDups (MAP (\k. nextVertices f k v) is)`;;

let showDups0 = new_recursive_definition list_RECURSION
  `showDups0 (a:A) [] = [] /\
   showDups0 a (b::bs) = 
    if (b = NONE) then (a:: (showDups0 a bs))
    else ((the b) :: (showDups0 (the b) bs))`;;

let showDups = new_recursive_definition list_RECURSION
  `showDups ([]:((A)option)list) = [] /\
   showDups ((b:(A)option)::bs) = showDups0 (the b) (b::bs)`;;

let enum_of_VertexList = new_definition'
  `enum_of_VertexList f (v:A) vs = 
    MAP (\u. indexf v u f  ) (showDups vs)`;;

let unadj = new_recursive_definition list_RECURSION
  `(unadj ([]:(A)list) = T) /\
   unadj ((h:A) ::t) = if (t = []) then T else (~((h:A) = HD t) /\ unadj t)`;;

let pairwisel = new_recursive_definition list_RECURSION
  `(pairwisel f ([]:(A)list) = T) /\
    pairwisel f ((h:A)::t) = if (t=[]) then T else (f h (HD t) /\ pairwisel f t)`;;

(* deleted image_hide1 *)

let image_hideDups = new_definition
  `image_hideDups s = 
    (s = [] \/ (unadj (filter isSome s) /\ isSome (HD s)))`;;

let foldr2 = new_definition'
  `foldr2 (f:B->A->A) xs z = foldr f z xs`;;

let split_condition_list = new_definition'
  `split_condition_list L N r (d:A#A) <=>
    is_restricted (hypermap_of_list L) /\
    normal_list L N /\ 
    MEM r N /\
    ~(final_list L r) /\
    MEM d r /\
    LAST (find_list (parts L r) d) = d`;;

let atom_list = new_definition'
  `atom_list L r (d:A#A) = find_list (parts L r) d`;;

let find_atom = new_definition'
   `find_atom L N (d:A#A) = atom_list L (find_list N d) d`;;

let good_graph = new_definition `good_graph g <=> 
   good_list (fgraph g) /\
   good_list_nodes (fgraph g) /\
   finalGraph g /\ 
   all uniq (fgraph g) /\
   (!v. v IN vertices_set2 g
     ==> facesAt g v = FILTER (\f. MEM v (  FST f)) (faces g)) /\
   (vertices_set2 g = elements_of_list (fgraph g)) `;;

let facesAt_list = new_definition 
 `facesAt_list (L:((A)list)list) (v:A) =  FILTER (MEM v) L`;;



end;;
