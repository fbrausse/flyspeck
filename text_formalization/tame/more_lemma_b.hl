(* ========================================================================== *)
(* FlxSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  More_lemma_b = struct

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;


open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;
open Pbflhet;;
open Kbwpbhq;;
open Hojodcm;;
open Aq1;;
open Aq23;;
open Aq4;;
open Aq8;;

let FST_next_face_eq_SND=prove(`!L N r x k. 
     good_list L /\
     good_list_nodes L /\
     marked_list L N r x /\
     ~final_list L r
==> FST(next_el (find_face L x) x)=SND x`,
REPEAT RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN DICH_ASM_TAC (5-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(13-0)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN DICH_ASM_TAC(18-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Reduction4.uniq_flatten_all_uniq[`L`]
THEN MRESA_TAC Tame_list.simple_hypermap_uniq[`L`]
THEN DICH_ASM_TAC(25-6)[Hypermap.is_restricted;]
THEN MRESA_TAC Tame_list.f_list_fst_snd[`L`;`x`]);;


let MEM_CORE=prove(`!L N r x k. 
MEM d r/\
     good_list L /\
     good_list_nodes L /\
     marked_list L N r x /\
     ~final_list L r
==> MEM (FST d) (core L r)`,
REPEAT RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN DICH_ASM_TAC (5-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(13-0)[Tame_defs2.good_list]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`N`;`r`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L r`][Tame_list.MEMf_MAP;]
THEN REWRITE_TAC[Tame_defs2.core]
THEN DICH_ASM_TAC(17-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Aq8.parts_mem_exists[`d`;`L`;`r`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`][MEM_MAP]
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[o_DEF]);;


let prev_core_x=prove(`!L N r x:A#A. 
     good_list L /\
     good_list_nodes L /\
     marked_list L N r x /\
     ~final_list L r
==> prev_el (core L r) (FST(next_el (find_face L x) x))=FST x`,

REPEAT RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN DICH_ASM_TAC (5-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(13-0)[Tame_defs2.good_list]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`N`;`r`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L r`][Tame_list.MEMf_MAP;]
THEN MRESA_TAC MEM_CORE[`x`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`r`]
THEN MRESA_TAC MEM_CORE[`w`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC More.sym_power_prev_next[`(core L r)`;`SUC 0`;`FST w`;`FST x`][POWER;I_DEF;o_DEF]
THEN REWRITE_TAC[Tame_defs2.core]
THEN DICH_ASM_TAC(23-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Aq8.parts_mem_exists[`x`;`L`;`r`]
THEN MRESA_TAC Aq8.parts_mem_exists[`w`;`L`;`r`]
THEN CHANGE_TAC`pw=p'`
THEN DICH_TAC (33-17)
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`parts L r`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`x`][MEM_MAP]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`(parts L r)`;`p`;`(FST o HD):(A#A)list->A`]
THEN DICH_TAC 0
THEN REWRITE_TAC[o_DEF]
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pw`;`w`][MEM_MAP]
THEN MATCH_MP_TAC(SET_RULE`!a b f. a=b==> f a= f b`)
THEN MATCH_MP_TAC(SET_RULE`!a b f. a=b==> f a= f b`)
THEN MRESA_TAC Tame_list.f_list_quotient_alt[`L`;`N`;`r`;`r`;`p`;`pw`]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`x`]
THEN DICH_ASM_TAC(41-6)[Hypermap.is_restricted]
THEN MRESA_TAC Tame_list.edge_nondeg_f_xor_ni[`L`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x=LAST r`]
THENL[

MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_nonnil[`L`;`r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`parts L r`]
THEN MRESAL_TAC Tame_list.parts_all_nonnil[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`LAST(parts L r)`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`LAST(parts L r)`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`p`;`LAST(parts L r)`;`parts L r`;`x`]
THEN SYM_DICH_TAC 2
THEN SYM_DICH_TAC (58-52)
THEN ASM_REWRITE_TAC[];

MRESA_TAC Aq12.condition_last_parts[`r`;`L`;`p`;`x`]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]]);;



let prev_el_core_all_x=prove(`!L N r x k. 
     good_list L /\
     good_list_nodes L /\
     is_restricted (hypermap_of_list L) /\
     marked_list L N r x /\
     ~final_list L r /\
     (transform_count L N r x = k) ==>
    (!v. 
	     (prev_el (core L r) v,v = x)  ==>
	     (!i. i < k ==> prev_el (core L (rtrans L N r x i)) v,v = x ))`,

REPEAT RESA_TAC
THEN MRESA_TAC Reduction3.AQIUNPP[`L`;`N`;`r`;`x`;`i`]
THEN MRESA_TAC Kbwpbhq.transform_count_not[`L`;`N`;`r`;`x`;`i`]
THEN MRESA_TAC prev_core_x[`L`;`(ntrans L N r x i)`;`(rtrans L N r x i)`;`x`]
THEN MRESA_TAC prev_core_x[`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN DICH_TAC(10-6)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th] THEN ASM_REWRITE_TAC[]
THEN ASSUME_TAC(th)
THEN ASM_REWRITE_TAC[])
THEN DICH_ASM_TAC (10-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`N`;`r`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L r`][Tame_list.MEMf_MAP;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESA_TAC MEM_CORE[`x`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`r`]
THEN MRESA_TAC MEM_CORE[`w`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN MRESA_TAC Seq2.next_prev_id[`FST w`;`core L r`]
THEN MRESA_TAC Seq2.next_prev_id[`v`;`core L r`]
THEN DICH_TAC (31-9)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN GEN_REWRITE_TAC(RAND_CONV o ONCE_DEPTH_CONV)[GSYM PAIR]
THEN REWRITE_TAC[PAIR_EQ]
THEN DICH_TAC(31-9)
THEN GEN_REWRITE_TAC(LAND_CONV o RAND_CONV o ONCE_DEPTH_CONV)[GSYM PAIR]
THEN REWRITE_TAC[PAIR_EQ]
THEN RESA_TAC);;



let v_final_lemmas=prove(`!L N r x k. 
     good_list L /\
     good_list_nodes L /\
     is_restricted (hypermap_of_list L) /\
     marked_list L N r x /\
     ~final_list L r /\
     (transform_count L N r x = k) ==>
    (!v. 
	     (prev_el (core L r) v,v = x)  ==>
	     (!i. i < k ==> prev_el (core L (rtrans L N r x i)) v,v = x )
/\ (FST (next_el (find_face L x) x) = v))`,

REPEAT RESA_TAC
THENL[
MRESA_TAC prev_el_core_all_x[`L`;`N`;`r`;`x`;`k`]
THEN THAYTHE_TAC 0[`v`]
THEN THAYTHE_TAC 0[`i`];
MRESA_TAC FST_next_face_eq_SND[`L`;`N`;`r`;`x`]
THEN DICH_TAC 1
THEN GEN_REWRITE_TAC(LAND_CONV o RAND_CONV o ONCE_DEPTH_CONV)[GSYM PAIR]
THEN REWRITE_TAC[PAIR_EQ]
THEN RESA_TAC]);;




let next_core_FST=prove(`!L N r x:A#A. 
     good_list L /\
     good_list_nodes L /\
     marked_list L N r x /\
     ~final_list L r /\
MEM d r
/\ f_list L d= next_el r d
==> next_el (core L r) (FST d)=FST (next_el r d)`,

REPEAT RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN DICH_ASM_TAC (7-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(15-0)[Tame_defs2.good_list]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`N`;`r`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L r`][Tame_list.MEMf_MAP;]
THEN MRESA_TAC MEM_CORE[`x`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Seq2.mem_next_el[`d`;`r`]
THEN MRESA_TAC MEM_CORE[`next_el r d`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC MEM_CORE[`d`;`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[Tame_defs2.core]
THEN DICH_ASM_TAC(23-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Aq8.parts_mem_exists[`d`;`L`;`r`]
THEN MRESA_TAC Aq8.parts_mem_exists[`next_el r d`;`L`;`r`]
THEN CHANGE_TAC`pn=p'`
THEN DICH_TAC (33-17)
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`parts L r`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`d`][MEM_MAP]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`(parts L r)`;`p`;`(FST o HD):(A#A)list->A`]
THEN DICH_TAC 0
THEN REWRITE_TAC[o_DEF]
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pn`;`next_el r d`][MEM_MAP]
THEN MATCH_MP_TAC(SET_RULE`!a b f. a=b==> f a= f b`)
THEN MATCH_MP_TAC(SET_RULE`!a b f. a=b==> f a= f b`)
THEN MRESA_TAC Tame_list.f_list_quotient_alt[`L`;`N`;`r`;`r`;`p`;`pn`]
THEN DICH_TAC(42-28)
THEN REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`r`]
THEN THAYTHE_TAC 0[`d`]
THEN MRESA_TAC Tame_list.is_restricted_e_list_nondeg[`L`;`d`]
THEN DICH_ASM_TAC(44-8)[Hypermap.is_restricted]
THEN MRESA_TAC Tame_list.edge_nondeg_f_xor_ni[`L`;`d`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d=LAST r`]
THENL[
MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_nonnil[`L`;`r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`parts L r`]
THEN MRESAL_TAC Tame_list.parts_all_nonnil[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`LAST(parts L r)`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`LAST(parts L r)`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`p`;`LAST(parts L r)`;`parts L r`;`d`]
THEN SYM_DICH_TAC 2
THEN SYM_DICH_TAC (58-52)
THEN ASM_REWRITE_TAC[];

MRESA_TAC Aq12.condition_last_parts[`r`;`L`;`p`;`d`]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]]);;



let next_power_core=prove_by_refinement(`!n. 
     good_list L /\
     good_list_nodes L /\
     marked_list L N r (x:A#A) /\
     ~final_list L r /\
n<= indexf w (ytrans L N r x 0) r/\
(find_face L x)=f/\
next_el f x=w
==> (next_el (core L r) POWER n) (FST x)=FST ((next_el r POWER n) x)`,
[
INDUCT_TAC;

REWRITE_TAC[POWER;I_DEF;o_DEF];

REPEAT RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!A B. SUC A<= B==> A<=B`)[`n`;`indexf w (ytrans L N r x 0) r`]
THEN DICH_TAC(8)
THEN RESA_TAC
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN GABBREV_TAC`d=(next_el r POWER n) x`
THEN MATCH_MP_TAC next_core_FST
THEN GEXISTS_TAC`N`
THEN GEXISTS_TAC`x`
THEN ASM_REWRITE_TAC[]
THEN DICH_ASM_TAC (9-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(17-11)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`x`;`r`;`n`]
THEN MRESAL_TAC Reduction2.transform_assumption_v2_lemma[`L`][]
THEN MRESAL_TAC Kbwpbhq.next_el_power_trans_eq_f[`n`;`w`;`L`;`N`;`r`;`x`;`0`][Reduction2.trans0]THEN DICH_TAC 0
THEN DICH_TAC(25-7)
THEN REWRITE_TAC[Reduction2.trans0]
THEN RESA_TAC
THEN STRIP_TAC
THEN DICH_ASM_TAC(26-0)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESAL_TAC COM_POWER[`n`;`(\d. next_el r d)`][o_DEF;POWER;I_DEF;GSYM Seq.eq_ext]
THEN THAYTHEL_TAC 0[`x`][I_DEF]
THEN DICH_TAC 0
THEN REWRITE_TAC[BETA_THM;ETA_AX]
THEN RESA_TAC
THEN MRESAL_TAC COM_POWER[`n`;`(\d. next_el f d)`][o_DEF;POWER;I_DEF;GSYM Seq.eq_ext]
THEN THAYTHEL_TAC 0[`x`][I_DEF]
THEN DICH_TAC 0
THEN REWRITE_TAC[BETA_THM;ETA_AX]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ 1<=a`)[`n`];

EXPAND_TAC"d"
THEN POP_ASSUM(fun th-> REWRITE_TAC[th;POWER;I_DEF;o_DEF])
THEN ASM_REWRITE_TAC[];

MRESA_TAC Hypermap.LE_SUC_PRE[`n`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<=b`)[`PRE n`;`indexf w (l'y L r x) r`]
THEN MRESAL_TAC Kbwpbhq.next_el_power_trans_eq_f[`PRE n`;`w`;`L`;`N`;`r`;`x`;`0`][Reduction2.trans0]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC Reduction2.marked_x_find_face[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`x`;`f`;` n`][I_DEF;o_DEF;List_hypermap.dart_in_face]
THEN DICH_TAC 0
THEN DICH_TAC(39-8)
THEN DICH_TAC 4
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th])
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 2
THEN RESA_TAC
THEN DICH_TAC(37-19)
THEN REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`r`]
THEN THAYTHE_TAC 0[`d`]
THEN STRIP_TAC
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`d`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
]);;



let next_power_core_w=prove(`!n. 
     good_list L /\
     good_list_nodes L /\
     marked_list L N r (x:A#A) /\
     ~final_list L r /\
n<= indexf w (ytrans L N r x 0) r/\
(find_face L x)=f/\
next_el f x=w
==> (next_el (core L r) POWER n) (FST w)=FST ((next_el r POWER n) w)`,
INDUCT_TAC
THENL[


REWRITE_TAC[POWER;I_DEF;o_DEF];


REPEAT RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!A B. SUC A<= B==> A<=B`)[`n`;`indexf w (ytrans L N r x 0) r`]
THEN DICH_TAC(8)
THEN RESA_TAC
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN GABBREV_TAC`d=(next_el r POWER n) w`
THEN MATCH_MP_TAC next_core_FST
THEN GEXISTS_TAC`N`
THEN GEXISTS_TAC`x`
THEN ASM_REWRITE_TAC[]
THEN DICH_ASM_TAC (9-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(17-11)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`x`;`r`;`n`]
THEN MRESAL_TAC Reduction2.transform_assumption_v2_lemma[`L`][]
THEN MRESAL_TAC Kbwpbhq.next_el_power_trans_eq_f[`n`;`w`;`L`;`N`;`r`;`x`;`0`][Reduction2.trans0]
THEN DICH_TAC 0
THEN DICH_TAC(25-7)
THEN REWRITE_TAC[Reduction2.trans0]
THEN RESA_TAC
THEN STRIP_TAC
THEN DICH_ASM_TAC(26-0)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`x`;`r`;` SUC 0`][I_DEF;o_DEF;List_hypermap.dart_in_face;POWER]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`r`;` n`][I_DEF;o_DEF;List_hypermap.dart_in_face]
THEN DICH_TAC(33-4)
THEN REWRITE_TAC[Reduction2.trans0]
THEN RESA_TAC
THEN MRESAL_TAC Kbwpbhq.next_el_power_trans_eq_f[`SUC n`;`w`;`L`;`N`;`r`;`x`;`0`][Reduction2.trans0;COM_POWER;o_DEF;I_DEF]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC Reduction2.marked_x_find_face[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`f`]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`f`;` n`][I_DEF;o_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`d`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]

]);;




 end;;



