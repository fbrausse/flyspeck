flyspeck_needs "tame/TameGeneral.hl";;
flyspeck_needs "CDTETAT.hl";;
flyspeck_needs "TameAssumptions.hl";;


open Hypermap_and_fan;;
open Tame_defs;;
open Tame_general;;
open Fan_defs;;

open Cdtetat_tame;;
open Tame_assumptions;;


(* Groups of required inequalities *)
let azim_ineq = map (fun id -> (hd (Ineq.getexact id)).ineq) ["2570626711"; "5490182221"];; 

let taum_ineq3 = map (fun id -> (hd (Ineq.getexact id)).ineq) ["3296257235"; "8519146937"; "4667071578"];;

let taum_ineq3_b50 = map (fun id -> (hd (Ineq.getexact id)).ineq) ["4652969746 1"; "4652969746 2"];;

let tauq_ineq4 = map (fun id -> (hd (Ineq.getexact id)).ineq) ["7043724150"; "6944699408"; "4240815464"; "3862621143"];;


(* Inequalities for tauVEF in the case |f| = 3 *)
let tauVEF_3_ineq = prove(`!V x a b. (!y1 y2 y3 y4 y5 y6. ineq (dart_std3 y1 y2 y3 y4 y5 y6) (taum y1 y2 y3 y4 y5 y6 + a * dih_y y1 y2 y3 y4 y5 y6 + b > #0.0)) /\
			     contravening V /\ 
			     x IN dart_of_fan (V,ESTD V) /\
			     CARD (face (hypermap_of_fan (V,ESTD V)) x) = 3
                                ==> tauVEF (V,ESTD V,face (hypermap_of_fan (V,ESTD V)) x) + a * azim_dart (V,ESTD V) x + b > #0.0`,
   REWRITE_TAC[Ineq.dart_std3; INEQ_ALT; ALL] THEN
     REPEAT STRIP_TAC THEN
     POP_ASSUM MP_TAC THEN
     MP_TAC (SPEC_ALL CONTRAVENING_FAN) THEN ASM_REWRITE_TAC[] THEN DISCH_TAC THEN
     MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] IN_DART_OF_FAN) THEN
     ASM_REWRITE_TAC[] THEN STRIP_TAC THEN ASM_REWRITE_TAC[] THEN DISCH_TAC THEN
     MP_TAC (SPEC_ALL CONTRAVENING_AZIM_DART_EQ_DIH_Y) THEN
     MP_TAC (SPEC_ALL CONTRAVENING_TAUVEF_EQ_TAUM) THEN
     ASM_REWRITE_TAC[] THEN
     CONV_TAC (DEPTH_CONV let_CONV) THEN
     ABBREV_TAC `w' = sigma_fan (vec 0) V (ESTD V) v w` THEN
     DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN
     DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN
     FIRST_X_ASSUM MATCH_MP_TAC THEN
     MP_TAC (SPEC_ALL CONTRAVENING_TRIANGULAR_FACE_DIST) THEN
     ASM_REWRITE_TAC[] THEN
     CONV_TAC (DEPTH_CONV let_CONV) THEN
     SIMP_TAC[REAL_ARITH `&2 = #2.0`]);;


let tauVEF_3_INEQS_concl = `!V x. let H = hypermap_of_fan (V,ESTD V) in 
			      contravening V /\ x IN dart_of_fan (V,ESTD V) /\ CARD (face H x) = 3
				==> tauVEF (V,ESTD V,face H x) + #0.626 * azim_dart (V,ESTD V) x - #0.77 > #0.0 /\
				    tauVEF (V,ESTD V,face H x) - #0.259 * azim_dart (V,ESTD V) x + #0.32 > #0.0 /\
				    tauVEF (V,ESTD V,face H x) - #0.507 * azim_dart (V,ESTD V) x + #0.724 > #0.0`;;


let tauVEF_3_INEQS_concl2 = mk_imp(list_mk_conj taum_ineq3, tauVEF_3_INEQS_concl);;



g(tauVEF_3_INEQS_concl2);;
let tauVEF_3_INEQS = prove(tauVEF_3_INEQS_concl2,
   REPEAT STRIP_TAC THEN
     CONV_TAC let_CONV THEN
     STRIP_TAC THEN
     MP_TAC (SPECL [`V:real^3->bool`; `x:real^3#real^3`; `#0.626`; `-- #0.77`] tauVEF_3_ineq) THEN
     ASM_REWRITE_TAC[GSYM real_sub] THEN DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN
     MP_TAC (SPECL [`V:real^3->bool`; `x:real^3#real^3`; `-- #0.259`; `#0.32`] tauVEF_3_ineq) THEN
     ASM_REWRITE_TAC[REAL_ARITH `a + --b * x + c = a - b * x + c`] THEN
     DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN
     MP_TAC (SPECL [`V:real^3->bool`; `x:real^3#real^3`; `-- #0.507`; `#0.724`] tauVEF_3_ineq) THEN
     ASM_REWRITE_TAC[REAL_ARITH `a + --b * x + c = a - b * x + c`]);;





(***************************************************************)
let SUM_OVER_TRIANGLES_lemma = prove(`!V x. FAN (vec 0,V,ESTD V) /\ simple_hypermap (hypermap_of_fan (V,ESTD V)) /\
				       contravening V /\ x IN dart_of_fan (V,ESTD V)
				     ==> let H = hypermap_of_fan (V,ESTD V) in
				       sum (set_of_triangles_meeting_node H x) (\f. tauVEF (V,ESTD V,f))
				         = sum {y | y IN node H x /\ CARD (face H y) = 3} (\y. tauVEF (V,ESTD V,face H y))`,
   REPEAT STRIP_TAC THEN CONV_TAC let_CONV THEN
     ABBREV_TAC `H = hypermap_of_fan (V,ESTD V)` THEN
     ABBREV_TAC `A = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 3}` THEN
     ABBREV_TAC `g = (\y:real^3#real^3. face H y)` THEN
     
     SUBGOAL_THEN `set_of_triangles_meeting_node H (x:real^3#real^3) = IMAGE g (A:real^3#real^3->bool)` ASSUME_TAC THENL
     [
       REWRITE_TAC[set_of_triangles_meeting_node] THEN
	 EXPAND_TAC "g" THEN REWRITE_TAC[GSYM IMAGE_LEMMA] THEN
	 EXPAND_TAC "A" THEN REWRITE_TAC[IN_ELIM_THM] THEN
	 SUBGOAL_THEN `!y:real^3#real^3. (y IN dart H /\ CARD (face H y) = 3 /\ y IN node H x) <=> y IN node H x /\ CARD (face H y) = 3` MP_TAC THENL
	 [
	   GEN_TAC THEN MATCH_MP_TAC (TAUT `(C ==> A) ==> (A /\ B /\ C <=> C /\ B)`) THEN
	     EXPAND_TAC "H" THEN ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
	     MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] NODE_SUBSET_DART_OF_FAN) THEN
	     ASM_SIMP_TAC[SUBSET];
	   ALL_TAC
	 ] THEN
	 DISCH_THEN (fun th -> REWRITE_TAC[th]);
       ALL_TAC
     ] THEN
     ASM_REWRITE_TAC[] THEN

     SUBGOAL_THEN `(\y. tauVEF (V,ESTD V,face H y)) = (\f. tauVEF (V,ESTD V,f)) o g` (fun th -> REWRITE_TAC[th]) THENL
     [
       EXPAND_TAC "g" THEN REWRITE_TAC[FUN_EQ_THM; o_THM];
       ALL_TAC
     ] THEN

     MATCH_MP_TAC SUM_IMAGE THEN
     REPEAT GEN_TAC THEN
     EXPAND_TAC "g" THEN BETA_TAC THEN
     STRIP_TAC THEN POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[] THEN
     POP_ASSUM MP_TAC THEN POP_ASSUM MP_TAC THEN EXPAND_TAC "A" THEN
     REPEAT STRIP_TAC THEN
     MATCH_MP_TAC SIMPLE_HYPERMAP_IMP_FACE_INJ THEN
     MAP_EVERY EXISTS_TAC [`hypermap_of_fan (V,ESTD V)`; `x:real^3#real^3`] THEN
     ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
     REMOVE_ASSUM THEN REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN
     SIMP_TAC[IN_ELIM_THM]);;





let SUM_OVER_QUADS_lemma = prove(`!V x. FAN (vec 0,V,ESTD V) /\ simple_hypermap (hypermap_of_fan (V,ESTD V)) /\
				       contravening V /\ x IN dart_of_fan (V,ESTD V)
				     ==> let H = hypermap_of_fan (V,ESTD V) in
				       sum (set_of_quadrilaterals_meeting_node H x) (\f. tauVEF (V,ESTD V,f))
				         = sum {y | y IN node H x /\ CARD (face H y) = 4} (\y. tauVEF (V,ESTD V,face H y))`,
   REPEAT STRIP_TAC THEN CONV_TAC let_CONV THEN
     ABBREV_TAC `H = hypermap_of_fan (V,ESTD V)` THEN
     ABBREV_TAC `A = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 4}` THEN
     ABBREV_TAC `g = (\y:real^3#real^3. face H y)` THEN
     
     SUBGOAL_THEN `set_of_quadrilaterals_meeting_node H (x:real^3#real^3) = IMAGE g (A:real^3#real^3->bool)` ASSUME_TAC THENL
     [
       REWRITE_TAC[set_of_quadrilaterals_meeting_node] THEN
	 EXPAND_TAC "g" THEN REWRITE_TAC[GSYM IMAGE_LEMMA] THEN
	 EXPAND_TAC "A" THEN REWRITE_TAC[IN_ELIM_THM] THEN
	 SUBGOAL_THEN `!y:real^3#real^3. (y IN dart H /\ CARD (face H y) = 4 /\ y IN node H x) <=> y IN node H x /\ CARD (face H y) = 4` MP_TAC THENL
	 [
	   GEN_TAC THEN MATCH_MP_TAC (TAUT `(C ==> A) ==> (A /\ B /\ C <=> C /\ B)`) THEN
	     EXPAND_TAC "H" THEN ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
	     MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] NODE_SUBSET_DART_OF_FAN) THEN
	     ASM_SIMP_TAC[SUBSET];
	   ALL_TAC
	 ] THEN
	 DISCH_THEN (fun th -> REWRITE_TAC[th]);
       ALL_TAC
     ] THEN
     ASM_REWRITE_TAC[] THEN

     SUBGOAL_THEN `(\y. tauVEF (V,ESTD V,face H y)) = (\f. tauVEF (V,ESTD V,f)) o g` (fun th -> REWRITE_TAC[th]) THENL
     [
       EXPAND_TAC "g" THEN REWRITE_TAC[FUN_EQ_THM; o_THM];
       ALL_TAC
     ] THEN

     MATCH_MP_TAC SUM_IMAGE THEN
     REPEAT GEN_TAC THEN
     EXPAND_TAC "g" THEN BETA_TAC THEN
     STRIP_TAC THEN POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[] THEN
     POP_ASSUM MP_TAC THEN POP_ASSUM MP_TAC THEN EXPAND_TAC "A" THEN
     REPEAT STRIP_TAC THEN
     MATCH_MP_TAC SIMPLE_HYPERMAP_IMP_FACE_INJ THEN
     MAP_EVERY EXISTS_TAC [`hypermap_of_fan (V,ESTD V)`; `x:real^3#real^3`] THEN
     ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
     REMOVE_ASSUM THEN REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN
     SIMP_TAC[IN_ELIM_THM]);;



(*let tauVEF_POS_concl = `!V E f. contravening V ==> &0 <= tauVEF (V,E,f)`;;*)



let SET_OF_FACE_MEETING_NODE_EQ_UNION = prove(`!V x. contravening V /\ x IN dart_of_fan (V,ESTD V)
					      ==> let H = hypermap_of_fan (V,ESTD V) in
						     set_of_face_meeting_node H x =
                                                        set_of_triangles_meeting_node H x UNION
							set_of_quadrilaterals_meeting_node H x UNION
							set_of_exceptional_meeting_node H x`,
   REPEAT STRIP_TAC THEN CONV_TAC let_CONV THEN
     ABBREV_TAC `H = hypermap_of_fan (V,ESTD V)` THEN
     MP_TAC (SPEC_ALL CONTRAVENING_FAN) THEN ASM_REWRITE_TAC[] THEN DISCH_TAC THEN
     REWRITE_TAC[set_of_face_meeting_node; set_of_triangles_meeting_node; set_of_quadrilaterals_meeting_node; set_of_exceptional_meeting_node] THEN
     REWRITE_TAC[EXTENSION; IN_ELIM_THM; IN_UNION] THEN
     GEN_TAC THEN
     EQ_TAC THENL
     [
       STRIP_TAC THEN
	 MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`] FULLY_SURROUNDED_IMP_CARD_FACE_GE_3) THEN
	 ASM_SIMP_TAC[CONTRAVENING_IMP_FULLY_SURROUNDED] THEN
	 DISCH_THEN (MP_TAC o SPEC `y:real^3#real^3`) THEN
	 ANTS_TAC THENL
	 [
	   UNDISCH_TAC `y:real^3#real^3 IN dart H` THEN
	     EXPAND_TAC "H" THEN
	     ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN];
	   ALL_TAC
	 ] THEN
	 REWRITE_TAC[ARITH_RULE `n >= 3 <=> n = 3 \/ n = 4 \/ n >= 5`] THEN
	 STRIP_TAC THENL
	 [
	   DISJ1_TAC;
	   DISJ2_TAC THEN DISJ1_TAC;
	   DISJ2_TAC THEN DISJ2_TAC
	 ] THEN
	 EXISTS_TAC `y:real^3#real^3` THEN
	 ASM_REWRITE_TAC[];
       ALL_TAC
     ] THEN
     STRIP_TAC THEN EXISTS_TAC `y:real^3#real^3` THEN ASM_REWRITE_TAC[]);;



let SET_OF_FACE_MEETING_NODE_EQ_IMAGE = prove(`!V x. contravening V /\ x IN dart_of_fan (V,ESTD V)
						==> let H = hypermap_of_fan (V,ESTD V) in
						  set_of_face_meeting_node H x = IMAGE (\y. face H y) (node H x)`,
   REPEAT STRIP_TAC THEN CONV_TAC let_CONV THEN
     ABBREV_TAC `H = hypermap_of_fan (V,ESTD V)` THEN
     REWRITE_TAC[set_of_face_meeting_node] THEN
     REWRITE_TAC[GSYM IMAGE_LEMMA] THEN
     SUBGOAL_THEN `!y:real^3#real^3. (y IN dart H /\ y IN node H x) <=> y IN node H x` MP_TAC THENL
     [
       GEN_TAC THEN MATCH_MP_TAC (TAUT `(C ==> A) ==> (A /\ C <=> C)`) THEN
	 EXPAND_TAC "H" THEN ASM_SIMP_TAC[Hypermap.dart; CONTRAVENING_FAN; HYPERMAP_OF_FAN] THEN
	 MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] NODE_SUBSET_DART_OF_FAN) THEN
	 ASM_SIMP_TAC[CONTRAVENING_FAN; SUBSET];
       ALL_TAC
     ] THEN
     DISCH_THEN (fun th -> REWRITE_TAC[th]));;
     



let SUM_OVER_FACES_lemma = prove(`!V x. simple_hypermap (hypermap_of_fan (V,ESTD V)) /\ contravening V /\ x IN dart_of_fan (V,ESTD V)
				     ==> let H = hypermap_of_fan (V,ESTD V) in
				       sum (set_of_face_meeting_node H x) (\f. tauVEF (V,ESTD V,f)) =
					 sum {y | y IN node H x /\ CARD (face H y) = 3} (\y. tauVEF (V,ESTD V,face H y)) +
					 sum {y | y IN node H x /\ CARD (face H y) = 4} (\y. tauVEF (V,ESTD V,face H y)) +
					 sum {y | y IN node H x /\ CARD (face H y) >= 5} (\y. tauVEF (V,ESTD V,face H y))`,
   REPEAT STRIP_TAC THEN CONV_TAC let_CONV THEN
     MP_TAC (SPEC_ALL CONTRAVENING_FAN) THEN ASM_REWRITE_TAC[] THEN DISCH_TAC THEN
     ABBREV_TAC `H = hypermap_of_fan (V,ESTD V)` THEN
     SUBGOAL_THEN `sum (set_of_face_meeting_node H (x:real^3#real^3)) (\f. tauVEF (V,ESTD V,f)) = sum (node H x) (\y. tauVEF (V,ESTD V,face H y))` (fun th -> REWRITE_TAC[th]) THENL
     [
       ABBREV_TAC `g = \y:real^3#real^3. face H y` THEN
	 MP_TAC (SPEC_ALL (let_RULE SET_OF_FACE_MEETING_NODE_EQ_IMAGE)) THEN
	 ASM_REWRITE_TAC[] THEN DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN
	 SUBGOAL_THEN `(\y:real^3#real^3. tauVEF (V,ESTD V,face H y)) = (\f. tauVEF (V,ESTD V,f)) o g` (fun th -> REWRITE_TAC[th]) THENL
	 [
	   EXPAND_TAC "g" THEN
	     REWRITE_TAC[FUN_EQ_THM; o_THM];
	   ALL_TAC
	 ] THEN
	 MATCH_MP_TAC SUM_IMAGE THEN
	 REPEAT GEN_TAC THEN
	 EXPAND_TAC "g" THEN BETA_TAC THEN
	 STRIP_TAC THEN POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[] THEN
	 DISCH_TAC THEN
	 MATCH_MP_TAC SIMPLE_HYPERMAP_IMP_FACE_INJ THEN
	 MAP_EVERY EXISTS_TAC [`hypermap_of_fan (V,ESTD V)`; `x:real^3#real^3`] THEN
	 ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN];
       ALL_TAC
     ] THEN

     MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] FULLY_SURROUNDED_NODE_DECOMPOSITION) THEN
     ASM_SIMP_TAC[CONTRAVENING_IMP_FULLY_SURROUNDED] THEN
     CONV_TAC (DEPTH_CONV let_CONV) THEN

     ABBREV_TAC `A = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 3}` THEN
     ABBREV_TAC `B = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 4}` THEN
     ABBREV_TAC `C = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) >= 5}` THEN
     ABBREV_TAC `D = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) >= 4}` THEN

     DISCH_THEN (CONJUNCTS_THEN2 (fun th -> REWRITE_TAC[th]) MP_TAC) THEN
     DISCH_THEN (CONJUNCTS_THEN2 ASSUME_TAC MP_TAC) THEN
     DISCH_THEN (CONJUNCTS_THEN2 (LABEL_TAC "D" o SYM) STRIP_ASSUME_TAC) THEN
     ASM_SIMP_TAC[SUM_UNION] THEN

     SUBGOAL_THEN `FINITE (B:real^3#real^3->bool) /\ FINITE (C:real^3#real^3->bool)` ASSUME_TAC THENL
     [
       CONJ_TAC THEN MATCH_MP_TAC FINITE_SUBSET THEN EXISTS_TAC `D:real^3#real^3->bool` THEN ASM_REWRITE_TAC[] THEN EXPAND_TAC "D" THEN REWRITE_TAC[SUBSET_UNION];
       ALL_TAC
     ] THEN
     REMOVE_THEN "D" (fun th -> REWRITE_TAC[SYM th]) THEN
     ASM_SIMP_TAC[SUM_UNION]);;






(****************************************************************)


let KCBLRQC_concl = `!V x. contravening V /\ x IN dart_of_fan (V,ESTD V) ==> 
    (let H = hypermap_of_fan (V,ESTD V) in
    let (p,q,r) = type_of_node H x in
       (r > 0) \/ (sum (set_of_face_meeting_node H x) (\ f. tauVEF (V,ESTD V,f)) >= b_tame p q))`;;







(****************************************************************)

let BDJYFFB2_concl = `!V x. contravening V /\ x IN dart_of_fan (V, ESTD V) ==>
     (let H = hypermap_of_fan (V,ESTD V) in
      (type_of_node H x = (5,0,1)) ==> 
        sum {f | f IN set_of_face_meeting_node H x /\ CARD(f)=3 }  (\f. tauVEF (V, ESTD V,f)) > #0.63)`;;



let BDJYFFB2_assumptions = [`!V. contravening V ==> simple_hypermap (hypermap_of_fan (V,ESTD V))`;
			    NON_TRIANGULAR_FACE_AZIM_DART_BOUND_concl] @
                           map (fun id -> (hd (Ineq.getexact id)).ineq) ["2570626711"; "3296257235"];;



let BDJYFFB2_concl2 = mk_imp (list_mk_conj BDJYFFB2_assumptions, BDJYFFB2_concl);;



g(BDJYFFB2_concl2);;
let BDJYFFB2 = prove(BDJYFFB2_concl2,
   REPEAT STRIP_TAC THEN
     FIRST_X_ASSUM (MP_TAC o SPEC `V:real^3->bool`) THEN
     MP_TAC (SPEC_ALL CONTRAVENING_FAN) THEN
     ASM_REWRITE_TAC[] THEN REPEAT DISCH_TAC THEN
     CONV_TAC let_CONV THEN ABBREV_TAC `H = hypermap_of_fan (V,ESTD V)` THEN
     SUBGOAL_THEN `{f | f IN set_of_face_meeting_node H (x:real^3#real^3) /\ CARD f = 3} = set_of_triangles_meeting_node H x` (fun th -> REWRITE_TAC[th]) THENL
     [
       REWRITE_TAC[set_of_triangles_meeting_node; set_of_face_meeting_node; IN_ELIM_THM] THEN
	 REWRITE_TAC[EXTENSION; IN_ELIM_THM] THEN
	 X_GEN_TAC `f:real^3#real^3->bool` THEN
         EQ_TAC THEN STRIP_TAC THENL
         [
	   EXISTS_TAC `y:real^3#real^3` THEN
	     ASM_REWRITE_TAC[] THEN
	     SUBGOAL_THEN `face H (y:real^3#real^3) = f` MP_TAC THENL
	     [
	       REWRITE_TAC[EXTENSION] THEN ASM_REWRITE_TAC[];
	       ALL_TAC
	     ] THEN
	     ASM_SIMP_TAC[];
	   SUBGOAL_THEN `f = face H (y:real^3#real^3)` ASSUME_TAC THENL
	     [
	       REWRITE_TAC[EXTENSION] THEN ASM_REWRITE_TAC[];
	       ALL_TAC
	     ] THEN
	     ASM_REWRITE_TAC[] THEN
	     EXISTS_TAC `y:real^3#real^3` THEN
	     ASM_REWRITE_TAC[]
	 ];
       ALL_TAC
     ] THEN

     MP_TAC (SPEC_ALL SUM_OVER_TRIANGLES_lemma) THEN
     ASM_REWRITE_TAC[] THEN CONV_TAC (DEPTH_CONV let_CONV) THEN
     DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN

     MP_TAC (ISPECL [`H:(real^3#real^3)hypermap`; `x:real^3#real^3`] NODE_TYPE_lemma) THEN
     EXPAND_TAC "H" THEN ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
     DISCH_THEN (fun th -> ALL_TAC) THEN
     REWRITE_TAC[PAIR_EQ] THEN STRIP_TAC THEN
     
     REWRITE_TAC[real_gt] THEN
     MATCH_MP_TAC REAL_LT_TRANS THEN
     EXISTS_TAC `&5 * #0.77 - (&2 * pi - #1.15) * #0.626` THEN
     CONJ_TAC THENL
     [
       MP_TAC PI_APPROX_32 THEN
	 REAL_ARITH_TAC;
       ALL_TAC
     ] THEN

     MATCH_MP_TAC REAL_LT_TRANS THEN
     EXISTS_TAC `sum {y | y IN node H x /\ CARD (face H y) = 3} (\y. #0.77 - #0.626 * azim_dart (V,ESTD V) y)` THEN
     SUBGOAL_THEN `FINITE {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 3}` ASSUME_TAC THENL
     [
       MATCH_MP_TAC FINITE_SUBSET THEN
	 EXISTS_TAC `node H (x:real^3#real^3)` THEN
	 REWRITE_TAC[Hypermap.NODE_FINITE] THEN
	 SIMP_TAC[SUBSET; IN_ELIM_THM];
       ALL_TAC
     ] THEN

     CONJ_TAC THENL
     [
       ASM_SIMP_TAC[SUM_SUB; SUM_CONST; SUM_LMUL] THEN
	 REWRITE_TAC[REAL_ARITH `a - b < a - c <=> c < b`; REAL_MUL_AC] THEN
	 MATCH_MP_TAC REAL_LT_LMUL THEN
	 REWRITE_TAC[REAL_ARITH `&0 < #0.626`; REAL_ARITH `a < b - c <=> a + c < b`] THEN

	 ABBREV_TAC `A = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 3}` THEN
	 ABBREV_TAC `B = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 4}` THEN
	 ABBREV_TAC `C = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) >= 5}` THEN

	 MATCH_MP_TAC REAL_LTE_TRANS THEN
	 EXISTS_TAC `sum A (\y. azim_dart (V,ESTD V) y) + sum (B UNION C) (\y. azim_dart (V,ESTD V) y)` THEN
	 MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] SUM_AZIM_DART_FULLY_SURROUNDED) THEN
	 MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] FULLY_SURROUNDED_NODE_DECOMPOSITION) THEN
	 ASM_SIMP_TAC[CONTRAVENING_IMP_FULLY_SURROUNDED] THEN
	 CONV_TAC (DEPTH_CONV let_CONV) THEN
	 ASM_REWRITE_TAC[] THEN
	 STRIP_TAC THEN ASM_REWRITE_TAC[] THEN
	 DISCH_TAC THEN

	 CONJ_TAC THENL
	 [
	   ABBREV_TAC `D = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) >= 4}` THEN
	     SUBGOAL_THEN `B:real^3#real^3->bool = {}` (fun th -> REWRITE_TAC[th]) THENL
	     [
	       SUBGOAL_THEN `FINITE (B:real^3#real^3->bool)` ASSUME_TAC THENL
		 [
		   MATCH_MP_TAC FINITE_SUBSET THEN
		     EXISTS_TAC `D:real^3#real^3->bool` THEN
		     ASM_REWRITE_TAC[SUBSET_UNION];
		   ALL_TAC
		 ] THEN
		 ASM_SIMP_TAC[GSYM CARD_EQ_0];
	       ALL_TAC
	     ] THEN
	     
	     SUBGOAL_THEN `?y:real^3#real^3. y IN dart_of_fan (V,ESTD V) /\ CARD (face H y) > 3 /\ C = {y}` ASSUME_TAC THENL
	     [
	       SUBGOAL_THEN `FINITE (C:real^3#real^3->bool)` ASSUME_TAC THENL
		 [
		   MATCH_MP_TAC FINITE_SUBSET THEN
		     EXISTS_TAC `D:real^3#real^3->bool` THEN
		      ASM_REWRITE_TAC[SUBSET_UNION];
		   ALL_TAC
		 ] THEN
		 SUBGOAL_THEN `C:real^3#real^3->bool HAS_SIZE 1` ASSUME_TAC THENL
	         [
		   ASM_REWRITE_TAC[HAS_SIZE];
		   ALL_TAC
		 ] THEN
	       
	       MP_TAC (ISPEC `C:real^3#real^3->bool` HAS_SIZE_1_EXISTS) THEN
	       ASM_REWRITE_TAC[EXISTS_UNIQUE] THEN
	       DISCH_THEN (X_CHOOSE_THEN `y:real^3#real^3` STRIP_ASSUME_TAC) THEN
	       REMOVE_ASSUM THEN
	       EXISTS_TAC `y:real^3#real^3` THEN
	       MP_TAC (ISPECL [`C:real^3#real^3->bool`; `y:real^3#real^3`] Hypermap.set_one_point) THEN
	       ASM_REWRITE_TAC[] THEN
	       DISCH_THEN (fun th -> REWRITE_TAC[th]) THEN
	       POP_ASSUM MP_TAC THEN
	       EXPAND_TAC "C" THEN
	       REWRITE_TAC[IN_ELIM_THM] THEN
	       SIMP_TAC[ARITH_RULE `a >= 5 ==> a > 3`] THEN
	       DISCH_TAC THEN
	       MATCH_MP_TAC Hypermap.lemma_in_subset THEN
	       EXISTS_TAC `node H (x:real^3#real^3)` THEN
	       CONJ_TAC THENL [ EXPAND_TAC "H" THEN ASM_SIMP_TAC[NODE_SUBSET_DART_OF_FAN]; ASM_REWRITE_TAC[] ];
	       ALL_TAC
	     ] THEN

	     POP_ASSUM MP_TAC THEN STRIP_TAC THEN
	     ASM_REWRITE_TAC[UNION_EMPTY; SUM_SING] THEN
	     REWRITE_TAC[REAL_ARITH `a + b < a + c <=> b < c`] THEN
	     
	     FIRST_X_ASSUM (fun th1 -> FIRST_X_ASSUM (MP_TAC o MATCH_MP th1)) THEN
	     DISCH_THEN MATCH_MP_TAC THEN
	     ASM_REWRITE_TAC[];
	   ALL_TAC
	 ] THEN

	 ASM_REWRITE_TAC[ETA_AX; REAL_MUL_AC; REAL_LE_REFL];
       ALL_TAC
     ] THEN

     MATCH_MP_TAC SUM_LT THEN
     ASM_REWRITE_TAC[] THEN
     SUBGOAL_THEN `!y. y IN {y | y IN node H x /\ CARD (face H y) = 3} ==> #0.77 - #0.626 * azim_dart (V,ESTD V) y < tauVEF (V,ESTD V,face H y)` ASSUME_TAC THENL
     [
       GEN_TAC THEN REWRITE_TAC[IN_ELIM_THM] THEN DISCH_TAC THEN
	 SUBGOAL_THEN `y IN dart_of_fan (V,ESTD V)` ASSUME_TAC THENL
	 [
	   MATCH_MP_TAC Hypermap.lemma_in_subset THEN
	     EXISTS_TAC `node H (x:real^3#real^3)` THEN
	     EXPAND_TAC "H" THEN ASM_SIMP_TAC[NODE_SUBSET_DART_OF_FAN];
	   ALL_TAC
	 ] THEN
	 MP_TAC (SPECL [`V:real^3->bool`; `y:real^3#real^3`; `#0.626`; `-- #0.77`] tauVEF_3_ineq) THEN
	 ASM_REWRITE_TAC[REAL_ARITH `a + --b = a - b`] THEN
	 REAL_ARITH_TAC;
       ALL_TAC
     ] THEN

     ASM_SIMP_TAC[REAL_LT_IMP_LE] THEN
     SUBGOAL_THEN `?y. y IN {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 3}` MP_TAC THENL
     [
       REWRITE_TAC[MEMBER_NOT_EMPTY; GSYM HAS_SIZE_0; HAS_SIZE] THEN
	 ASM_SIMP_TAC[ARITH_RULE `~(5 = 0)`];
       ALL_TAC
     ] THEN
     STRIP_TAC THEN EXISTS_TAC `y:real^3#real^3` THEN
     ASM_SIMP_TAC[]);;
     
     

     









(***********************************************************)

let SUM_OVER_TRIANGLES_lemma = prove(`!V x. FAN (vec 0,V,ESTD V) /\ simple_hypermap (hypermap_of_fan (V,ESTD V)) /\
				       contravening V /\ x IN dart_of_fan (V,ESTD V)
				     ==> let H = hypermap_of_fan (V,ESTD V) in
				       sum (set_of_triangles_meeting_node H x) (\f. tauVEF (V,ESTD V,f))
				         = sum {y | y IN node H x /\ CARD (face H y) = 3} 
					        (\(v,w). let w' = sigma_fan (vec 0) V (ESTD V) v w in
					                 let y1 = norm v in
							 let y2 = norm w in
							 let y3 = norm w' in
							 let y4 = dist(w,w') in
							 let y5 = dist(v,w') in
							 let y6 = dist(v,w) in
							   taum y1 y2 y3 y4 y5 y6)`,
   REPEAT STRIP_TAC THEN CONV_TAC let_CONV THEN
     ABBREV_TAC `H = hypermap_of_fan (V,ESTD V)` THEN
     ABBREV_TAC `h = (\(v:real^3,w:real^3). let w' = sigma_fan (vec 0) V (ESTD V) v w in let y1 = norm v in let y2 = norm w in let y3 = norm w' in let y4 = dist(w,w') in let y5 = dist(v,w') in let y6 = dist(v,w) in taum y1 y2 y3 y4 y5 y6)` THEN
     ABBREV_TAC `A = {y:real^3#real^3 | y IN node H x /\ CARD (face H y) = 3}` THEN
     ABBREV_TAC `g = (\y:real^3#real^3. if y IN A then face H y else {y})` THEN
     
     SUBGOAL_THEN `set_of_triangles_meeting_node H (x:real^3#real^3) = IMAGE g (A:real^3#real^3->bool)` ASSUME_TAC THENL
     [
       REWRITE_TAC[set_of_triangles_meeting_node] THEN
	 EXPAND_TAC "g" THEN REWRITE_TAC[GSYM IMAGE_LEMMA] THEN
	 SUBGOAL_THEN `{if (x:real^3#real^3) IN A then face H x else {x} | x | x IN A} = {face H y | y | y IN A}` (fun th -> REWRITE_TAC[th]) THENL
	 [
	   SET_TAC[];
	   ALL_TAC
	 ] THEN
	 EXPAND_TAC "A" THEN REWRITE_TAC[IN_ELIM_THM] THEN
	 SUBGOAL_THEN `!y:real^3#real^3. (y IN dart H /\ CARD (face H y) = 3 /\ y IN node H x) <=> y IN node H x /\ CARD (face H y) = 3` MP_TAC THENL
	 [
	   GEN_TAC THEN MATCH_MP_TAC (TAUT `(C ==> A) ==> (A /\ B /\ C <=> C /\ B)`) THEN
	     EXPAND_TAC "H" THEN ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
	     MP_TAC (SPECL [`V:real^3->bool`; `ESTD V`; `x:real^3#real^3`] NODE_SUBSET_DART_OF_FAN) THEN
	     ASM_SIMP_TAC[SUBSET];
	   ALL_TAC
	 ] THEN
	 DISCH_THEN (fun th -> REWRITE_TAC[th]);
       ALL_TAC
     ] THEN
     ASM_REWRITE_TAC[] THEN

     SUBGOAL_THEN `FINITE (A:real^3#real^3->bool)` ASSUME_TAC THENL
     [
       MATCH_MP_TAC FINITE_SUBSET THEN
	 EXISTS_TAC `node H (x:real^3#real^3)` THEN
	 REWRITE_TAC[Hypermap.NODE_FINITE] THEN
	 EXPAND_TAC "A" THEN
	 SIMP_TAC[SUBSET; IN_ELIM_THM];
       ALL_TAC
     ] THEN

     SUBGOAL_THEN `FINITE (IMAGE (g:real^3#real^3 -> (real^3#real^3->bool)) A)` ASSUME_TAC THENL
     [
       MATCH_MP_TAC FINITE_IMAGE THEN
	 ASM_REWRITE_TAC[];
       ALL_TAC
     ] THEN

     ONCE_ASM_SIMP_TAC[GSYM SUM_RESTRICT] THEN
     BETA_TAC THEN
     SUBGOAL_THEN `(\x:real^3#real^3. if x IN A then h x else &0) = (\f. if f IN IMAGE g A then tauVEF (V,ESTD V,f) else &0) o g` (fun th -> REWRITE_TAC[th]) THENL
     [
       REWRITE_TAC[FUN_EQ_THM] THEN X_GEN_TAC `y:real^3#real^3` THEN
	 EXPAND_TAC "g" THEN REWRITE_TAC[o_THM] THEN
	 ASM_CASES_TAC `y:real^3#real^3 IN A` THEN ASM_REWRITE_TAC[] THENL
	 [
	   SUBGOAL_THEN `face H (y:real^3#real^3) IN IMAGE g (A:real^3#real^3->bool)` (fun th -> REWRITE_TAC[th]) THENL
	     [
	       REWRITE_TAC[IN_IMAGE] THEN
		 EXISTS_TAC `y:real^3#real^3` THEN
		 EXPAND_TAC "g" THEN BETA_TAC THEN
		 ASM_REWRITE_TAC[];
	       ALL_TAC
	     ] THEN

	     MP_TAC (SPECL [`V:real^3->bool`; `face H (y:real^3#real^3)`] tauVEF_EQ_taum) THEN
	     ASM_REWRITE_TAC[face_set_of_fan; Hypermap.face_set; Hypermap.set_of_orbits; GSYM Hypermap.face] THEN
	     ANTS_TAC THENL
	     [
	       POP_ASSUM MP_TAC THEN
		 EXPAND_TAC "A" THEN
		 SIMP_TAC[IN_ELIM_THM] THEN
		 DISCH_TAC THEN
		 EXISTS_TAC `y:real^3#real^3` THEN
		 EXPAND_TAC "H" THEN ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
		 MATCH_MP_TAC Hypermap.lemma_in_subset THEN
		 EXISTS_TAC `node H (x:real^3#real^3)` THEN
		 EXPAND_TAC "H" THEN
		 ASM_SIMP_TAC[NODE_SUBSET_DART_OF_FAN];
	       ALL_TAC
	     ] THEN

	     MP_TAC (ISPEC `y:real^3#real^3` PAIR_SURJECTIVE) THEN
	     DISCH_THEN (X_CHOOSE_THEN `v:real^3` MP_TAC) THEN
	     DISCH_THEN (X_CHOOSE_THEN `w:real^3` ASSUME_TAC) THEN
	     ASM_REWRITE_TAC[] THEN

	     DISCH_THEN (MP_TAC o SPEC `v:real^3`) THEN
	     DISCH_THEN (MP_TAC o SPEC `w:real^3`) THEN
	     REWRITE_TAC[Hypermap.face_refl] THEN

	     EXPAND_TAC "h" THEN
	     CONV_TAC (DEPTH_CONV let_CONV) THEN
	     SIMP_TAC[];
	   ALL_TAC
	 ] THEN

	 SUBGOAL_THEN `~({y:real^3#real^3} IN IMAGE g (A:real^3#real^3->bool))` (fun th -> REWRITE_TAC[th]) THEN
	 POP_ASSUM MP_TAC THEN
	 REWRITE_TAC[CONTRAPOS_THM] THEN
	 REPLICATE_TAC 2 REMOVE_ASSUM THEN
	 POP_ASSUM (fun th -> REWRITE_TAC[SYM th]) THEN
	 REWRITE_TAC[set_of_triangles_meeting_node; IN_ELIM_THM] THEN
	 STRIP_TAC THEN
	 POP_ASSUM MP_TAC THEN REMOVE_ASSUM THEN POP_ASSUM MP_TAC THEN
	 REWRITE_TAC[IMP_IMP] THEN
	 DISCH_THEN (CONJUNCTS_THEN2 MP_TAC (ASSUME_TAC o SYM)) THEN
	 ASM_REWRITE_TAC[Hypermap.CARD_SINGLETON; ARITH_RULE `~(1 = 3)`];

       ALL_TAC
     ] THEN

     MATCH_MP_TAC SUM_IMAGE THEN
     REPEAT GEN_TAC THEN
     EXPAND_TAC "g" THEN BETA_TAC THEN
     STRIP_TAC THEN POP_ASSUM MP_TAC THEN ASM_REWRITE_TAC[] THEN
     POP_ASSUM MP_TAC THEN POP_ASSUM MP_TAC THEN EXPAND_TAC "A" THEN
     REPEAT STRIP_TAC THEN
     MATCH_MP_TAC SIMPLE_HYPERMAP_IMP_FACE_INJ THEN
     MAP_EVERY EXISTS_TAC [`hypermap_of_fan (V,ESTD V)`; `x:real^3#real^3`] THEN
     ASM_SIMP_TAC[Hypermap.dart; HYPERMAP_OF_FAN] THEN
     REMOVE_ASSUM THEN REPLICATE_TAC 2 (POP_ASSUM MP_TAC) THEN
     SIMP_TAC[IN_ELIM_THM]);;







let tgt = new_definition `tgt = #1.541`;;


    let b_tame = new_definition 
  `b_tame p q= 
           if p,q =0,3 then #0.618
    else if p,q=0,4 then #1.0
    else if p,q=1,2 then #0.66
    else if p,q=1,3 then #0.618
    else if p,q=2,1 then #0.8
    else if p,q=2,2 then #0.412
    else if p,q=2,3 then #1.2851
    else if p,q=3,1 then #0.315
    else if p,q=3,2 then #0.83
    else if p,q=4,0 then #0.35
    else if p,q=4,1 then #0.374
    else if p,q=5,0 then #0.04
    else if p,q=5,1 then #1.144
    else if p,q=6,0 then #0.689
    else if p,q=7,0 then #1.450
    else tgt`;;




let tri_ineqs = [`t + #0.626 * z >= #0.77`;
		 `t - #0.259 * z >= -- #0.32`;
		 `t - #0.507 * z >= -- #0.724`;
		 `t >= &0`;
		 `z >= #0.852`;
		 `z <= #1.893`];;


let quad_ineqs = [`t + #4.72 * z >= #6.248`;
		  `t + #0.972 * z >= #1.707`;
		  `t + #0.7573 * z >= #1.433`;
		  `t - #0.453 * z >= -- #0.777`;
		  `z >= #1.15`;
		  `t >= #0.206`];;

let subst_all list t z = map (fun tm -> subst [t, `t:real`; z, `z:real`] tm) list;;


let rec range a b = 
  if (a > b) then []
  else a :: range (a+1) b
;;



let gen_lp p q =
  let vars name a b = map (fun i -> mk_var (String.concat "" [name; string_of_int i], `:real`)) (range a b) in
  let ts = vars "t" 1 (p + q) in
  let zs = vars "z" 1 (p + q) in

  (* Generate main constraints *)
  let gen_ineqs t z list = List.concat (map (fun (t,z) -> subst_all list t z) (zip t z)) in
  let tri = gen_ineqs (vars "t"  1 p) (vars "z" 1 p) tri_ineqs in
  let quad = gen_ineqs (vars "t" (p + 1) (p + q)) (vars "z" (p + 1) (p + q)) quad_ineqs in

  (* Generate additional constraints for z's *)
  let z_constraints = 
    let zsum = list_mk_binop `(+):real->real->real` zs in
      [mk_eq (zsum, `#6.283185307`)] in
(*    let lower_bound = mk_binop `(>=):real->real->bool` zsum `#6.283185307` in
    let upper_bound = mk_binop `(<=):real->real->bool` zsum `#6.283185308` in
      [lower_bound; upper_bound] in
*)
  (* Generate the objective function *)
  let t_objective = 
    let lhs = list_mk_binop `(+):real->real->real` ts in
    let rhs = 
      let b_tame_tm = mk_comb (mk_comb (`b_tame`, mk_small_numeral p), mk_small_numeral q) in
	rand (concl (NUM_REDUCE_CONV (rand (concl (REWRITE_CONV [b_tame; PAIR_EQ; tgt] b_tame_tm))))) in
      mk_binop `(>=):real->real->bool` lhs rhs in

  (* Generate the lp *)
  let constraints = list_mk_conj (tri @ quad @ z_constraints) in
  let objective = t_objective in
    mk_imp (constraints, objective);;



let gen_lp2 p q =;;
let p = 2;;
let q = 2;;
  let tp = mk_var ("tp", `:real`);;
  let zp = mk_var ("zp", `:real`);;
  let tq = mk_var ("tq", `:real`);;
  let zq = mk_var ("zq", `:real`);;
  let preal = mk_comb (`(&):num->real`, mk_small_numeral p);;
  let qreal = mk_comb (`(&):num->real`, mk_small_numeral q);;

  (* Generate main constraints *)
  let tri = subst_all tri_ineqs tp zp;;
  let quad = subst_all quad_ineqs tq zq;;

  (* Generate additional constraints for z's *)
  let z_constraints;;
    let ptm = mk_binop `(*):real->real->real` preal zp;;
    let qtm = mk_binop `(*):real->real->real` qreal zq;;
    let z_constraints = [mk_eq (mk_binop `(+):real->real->real` ptm qtm, `#6.283185308`)];;

  (* Generate the objective function *)
  let t_objective = ;;
    let ptm = mk_binop `(*):real->real->real` preal tp;;
    let qtm = mk_binop `(*):real->real->real` qreal zq;;
    let lhs = list_mk_binop `(+):real->real->real` [ptm; qtm];;
    let rhs = 
      let b_tame_tm = mk_comb (mk_comb (`b_tame`, mk_small_numeral p), mk_small_numeral q) in
	rand (concl (NUM_REDUCE_CONV (rand (concl (REWRITE_CONV [b_tame; PAIR_EQ; tgt] b_tame_tm))))) in
      mk_binop `(>=):real->real->bool` lhs rhs in

  (* Generate the lp *)
  let constraints = list_mk_conj (tri @ quad @ z_constraints) in
  let objective = t_objective in
    mk_imp (constraints, objective);;



gen_lp 3 2;;
REAL_ARITH (gen_lp 3 2);;



let PI = 3.1415926;;


let test_f p q a3 b3 a4 b4 =
  let p = float_of_int p in
  let q = float_of_int q in
  let smin = p *. 0.852 in
  let smax = min (2.0 *. PI -. q *. 1.15) (p *. 1.893) in
  let s = if (a3 -. a4 > 0.0) then smin else smax in
    2.0 *. PI *. a4 +. s *. (a3 -. a4) +. q *. b4 +. p *. b3;;



let a4b4 = [(-4.72, 6.248); (-0.972, 1.707); (-0.7573, 1.433); (0.453, -0.777)];;
let a3b3 = [(0.507, -0.724); (-0.626, 0.77); (0.259, -0.32)];;

let pq = [(0,3); (0,4); (0,5); (1,2); (1,3); (1,4); 
             (2,1); (2,2); (2,3); (3,1); (3,2); (3,3); 
             (4,0); (4,1); (4,2); (5,0); (5,1); 
             (6,0); (6,1); (7,0)];;

let test_f_pq = map (fun (p,q) -> test_f p q) pq;;

let test funs args = List.concat (map (fun f -> map (fun (a,b) -> f a b) args) funs);;


let test1 = [test_f 5 1];;

test (test test1 a3b3) a4b4;;
