(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Tame Hypermap                                           *)
(* Lemma:  WMLNYMD                                                            *)
(* Author:  Thomas Hales     *)
(* Date: Dec 26, 2013                                                *)
(* ========================================================================== *)

needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
flyspeck_needs "../tame_archive/tame_archive.hl";;
flyspeck_needs "tame/import_tame_classification.hl";;
flyspeck_needs "tame/more_tame_concl.hl";;

module Wmlnymd = struct


open Hypermap;;
open Import_tame_classification;;
open Tame_defs;;
open Tame_concl;;
open More_tame_concl;;
open Oxaxucs;;

(*
  let new_definition' t = 
    if has_stv t 
    then (Print_types.print_term_types t; failwith "new_definition has stv") 
    else new_definition t;;
*)

parse_as_infix("POWER",(24,"right"));;
parse_as_infix("in_dart_of_loop",(11,"right"));;
(* parse_as_infix("iso",(24,"right"));; *)
unparse_as_infix "iso";;
make_overloadable "vertices" `:B -> (num list)`;;
overload_interface ("vertices",`FST:num list # bool -> num list`);;

let FILTER_CONJ = prove_by_refinement(
  `!f g xs. FILTER f (FILTER g xs) = FILTER (\(x:A). f x /\ g x) xs`,
  (* {{{ proof *)
  [
  REPLICATE_TAC 2 GEN_TAC;
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[FILTER]);
  REWRITE_TAC[FILTER];
  REPEAT COND_CASES_TAC THEN RULE_ASSUM_TAC(REWRITE_RULE[]) THEN ASM_REWRITE_TAC[FILTER];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let FILTER_NEGATE  = prove_by_refinement(
  `!f xs. FILTER f xs = xs <=> FILTER (\ (x:A). ~(f x)) xs = []`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC THEN REWRITE_TAC[FILTER];
  BY(REPEAT COND_CASES_TAC THEN ASM_REWRITE_TAC[FILTER;CONS_11;NOT_CONS_NIL] THEN ASM_MESON_TAC[MEM_FILTER;Seq.mem_head])
  ]);;
  (* }}} *)

let CARD_upt = prove_by_refinement(
  `!n. CARD (set_of_list (upt 0 n)) = n`,
  (* {{{ proof *)
  [
  GEN_TAC;
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  REWRITE_TAC[Oxaxucs.upt0];
  REWRITE_TAC[Seq.iota_uniq];
  BY(REWRITE_TAC[Seq.iota_uniq;Seq.size_iota])
  ]);;
  (* }}} *)

let MEMf_MAP = prove_by_refinement(
  `!f:A->B x u. MEM x u ==> MEM (f x) (MAP f u)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[MEM_MAP];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let fgraph_Faces = prove_by_refinement(
  `!g f. f IN Faces g ==> MEM (FST f) (fgraph g)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[fgraph;bn_Faces];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC MEMf_MAP;
  BY(ASM_REWRITE_TAC[GSYM IN_SET_OF_LIST])
  ]);;
  (* }}} *)

let MEM_HD = prove_by_refinement(
  `!xs:(A)list. ~(xs = []) ==> MEM (HD xs) xs`,
  (* {{{ proof *)
  [
  REWRITE_TAC[GSYM EL];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC MEM_EL;
  BY(ASM_REWRITE_TAC[arith `0 < m <=> ~(m=0)`;LENGTH_EQ_NIL])
  ]);;
  (* }}} *)

let dart_hypermap_of_list = prove_by_refinement(
  `!(L:((A)list)list). good_list L ==> 
   (dart(hypermap_of_list L) = set_of_list (list_of_darts (L)))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC List_hypermap.components_hypermap_of_list [`L`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  BY(REWRITE_TAC[List_hypermap.darts_of_list])
  ]);;
  (* }}} *)

let tame9a_correspondence = prove_by_refinement(
 `!g. tame_9a (hypermap_of_list (fgraph g)) /\ good_list (fgraph g) 
   ==>
  tame9a g`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC List_hypermap.card_face_of_list [`fgraph g`];
  INTRO_TAC List_hypermap.components_hypermap_of_list [`fgraph g`];
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM MP_TAC);
  REWRITE_TAC[tame9a;tame_hypermap;tame_9a;List_hypermap.good_list];
  REPEAT WEAKER_STRIP_TAC;
  ENOUGH_TO_SHOW_TAC `?d. MEM d (list_of_darts (fgraph g)) /\ sizel (find_face (fgraph g) d) = LENGTH (vertices f)`;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (unlist REWRITE_TAC o GSYM);
    FIRST_X_ASSUM (C INTRO_TAC [`d`]);
    ANTS_TAC;
      BY(ASM_REWRITE_TAC[]);
    DISCH_THEN (unlist REWRITE_TAC o GSYM);
    REWRITE_TAC[arith `3 <= m <=> m >= 3`];
    FIRST_X_ASSUM MATCH_MP_TAC;

    ASM_REWRITE_TAC[];
    REWRITE_TAC[List_hypermap.darts_of_list];
    BY(ASM_REWRITE_TAC[IN_SET_OF_LIST]);
  COMMENT "1";
  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC fgraph_Faces;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `~(vertices f = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPED_ABBREV_TAC `ff = vertices f`;
  TYPIFY `MEM (HD ff) ff` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPED_ABBREV_TAC `L = fgraph g`;
  TYPED_ABBREV_TAC `d = HD (list_pairs ff)`;
  TYPIFY `d` EXISTS_TAC;
  TYPIFY `sizel (list_pairs ff) = sizel (ff)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[List_hypermap.size_list_pairs]);
  INTRO_TAC List_hypermap.list_pairs_empty [`ff`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `MEM d (list_pairs ff)` (C SUBGOAL_THEN ASSUME_TAC);
    EXPAND_TAC "d";
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `find_face L d = list_pairs ff` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.find_face_alt];
    AP_TERM_TAC;
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    MATCH_MP_TAC List_hypermap.find_pair_list_unique;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Seq.size];
  REWRITE_TAC[List_hypermap.dart_in_find_pair_list];
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[List_hypermap.find_face_alt];
  DISCH_THEN SUBST1_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

(* Assumes ETDLJXT1_concl *)

let tame10_correspondence = prove_by_refinement(
 `!g. tame_10 (hypermap_of_list (fgraph g)) /\ good_list (fgraph g) /\
   good_list_nodes (fgraph g) /\ 
   (vertices_set2 g = elements_of_list (fgraph g)) 
   ==>
  tame10 g`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC List_hypermap.good_list_nodes_condition [`fgraph g`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_X_ASSUM_ST `tame_10` MP_TAC;
  ASM_REWRITE_TAC[tame10;tame_10;Hypermap.number_of_nodes];
  REWRITE_TAC[LET_THM];
  ENOUGH_TO_SHOW_TAC `sizel (list_of_elements(fgraph g)) = countVertices g`;
    REWRITE_TAC[IN_INSERT;NOT_IN_EMPTY];
    DISCH_THEN (SUBST1_TAC o GSYM);
    BY(ARITH_TAC);
  FIRST_X_ASSUM_ST `vertices_set2` MP_TAC;
  REWRITE_TAC[vertices_set2];
  REWRITE_TAC[Import_tame_classification.vertices_graph];
  REWRITE_TAC[List_hypermap.elements_of_list];
  DISCH_TAC;
  INTRO_TAC CARD_upt [`countVertices g`];
  DISCH_THEN (SUBST1_TAC o GSYM);
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  BY(REWRITE_TAC[List_hypermap.uniq_list_of_elements])
  ]);;
  (* }}} *)

let finalGraph_except = prove_by_refinement(
  `!g v. finalGraph g /\  
     facesAt g v = FILTER (\f. MEM v (vertices f)) (faces g)
   ==> 
   (except g v = LENGTH(FILTER (\f.  5 <= LENGTH(vertices f)) (facesAt g v)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[except;finalGraph;nonFinals];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  AP_TERM_TAC;
  REWRITE_TAC[FILTER_CONJ];
  TYPIFY `FILTER (\f. SND f) (faces g) = faces g` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[FILTER_NEGATE];
    BY(ASM_REWRITE_TAC[]);
  TYPIFY_GOAL_THEN `!x. ((SND x /\ 5 <= LENGTH (vertices x)) /\ MEM v (vertices x)) <=> (( 5 <= LENGTH (vertices x) /\ MEM v (vertices x)) /\ SND x)` (unlist REWRITE_TAC);
    BY(MESON_TAC[]);
  ONCE_REWRITE_TAC[GSYM FILTER_CONJ];
  RULE_ASSUM_TAC (REWRITE_RULE[ETA_AX]);
  ASM_REWRITE_TAC[];
  BY(REWRITE_TAC[FILTER_CONJ])
  ]);;
  (* }}} *)

(*
let good_list_card_node = prove_by_refinement(
  `!L (x:A#A). good_list L /\ good_list_nodes L /\ x IN darts_of_list L ==>
    CARD (node (hypermap_of_list L) x) = sizel (filter (MEM (FST x)) L)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[List_hypermap.good_list_node];
typ `FINITE {FST x,y | y | FST x,y IN darts_of_list L} /\ BIJ SND {FST x,y | y | FST x,y IN darts_of_list L} {y | FST x,y IN darts_of_list L}` sat
    CONJ_TAC;
      MATCH_MP_TAC FINITE_SUBSET;
      TYPIFY `dart(hypermap_of_list L)` EXISTS_TAC;
      CONJ_TAC;
        BY(REWRITE_TAC[Hypermap.node_map_and_darts]);
      REWRITE_TAC[SUBSET;IN_ELIM_THM];
      REPEAT WEAKER_STRIP_TAC;
      ASM_REWRITE_TAC[];
      GMATCH_SIMP_TAC dart_hypermap_of_list;
      BY(ASM_REWRITE_TAC[GSYM List_hypermap.darts_of_list]);
    REWRITE_TAC[BIJ];
    SUBCONJ_TAC;
      REWRITE_TAC[INJ;IN_ELIM_THM];
      CONJ_TAC;
        REPEAT WEAKER_STRIP_TAC;
        BY(ASM_REWRITE_TAC[]);
      REPEAT WEAKER_STRIP_TAC;
      ASM_REWRITE_TAC[];
      FIRST_X_ASSUM MP_TAC;
      BY(ASM_REWRITE_TAC[PAIR_EQ]);
    REWRITE_TAC[SURJ;INJ;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `(FST x,x')` EXISTS_TAC;
    REWRITE_TAC[];
    TYPIFY `x'` EXISTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `CARD {FST x,y | y | FST x,y IN darts_of_list L} = CARD {y | FST x,y IN darts_of_list L}` (C SUBGOAL_THEN SUBST1_TAC);
    MATCH_MP_TAC Misc_defs_and_lemmas.BIJ_CARD;
    EXISTS_TAC `SND:A#A->A`;
art[]
  COMMENT "2";
  TYPIFY `sizel (filter (MEM (FST x)) L)  = CARD (set_of_list (filter (MEM (FST x)) L))` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
    MATCH_MP_TAC Seq.filter_uniq;
    MATCH_MP_TAC List_hypermap.good_list_uniq;
    BY(ASM_REWRITE_TAC[])
    typ `FINITE {y | FST x, y IN darts_of_list L}` sat
amt[Misc_defs_and_lemmas.FINITE_BIJ]
mmp Misc_defs_and_lemmas.BIJ_CARD
art[]
rt[Seq2.set_of_list_filter]

  ]);;
  (* }}} *)


let tame11_correspondence = prove_by_refinement(
 `!g. tame_11a (hypermap_of_list (fgraph g)) /\ 
   tame_11b (hypermap_of_list (fgraph g)) /\
   tame_12o (hypermap_of_list (fgraph g)) /\
   finalGraph g /\ 
   good_list (fgraph g) /\
   good_list_nodes (fgraph g) /\ 
   (!v. v IN vertices_set2 g
     ==> facesAt g v = FILTER (\f. MEM v (vertices f)) (faces g))
   ==>
  tame11a g /\ tame11b g`,
  (* {{{ proof *)
  [
  ASM_REWRITE_TAC[tame11a;tame_11a;tame_12o;tame_11b;tame11b;Import_tame_classification.degree;Tame_defs.node_exceptional_face;Tame_defs.exceptional_face];
st/r
mmp (MESON[] `(!v. r v ==> (P v /\ Q v)) ==> ((!v. r v ==> P v) /\ (!v. r v ==> Q v))`)
st/r
asimp[finalGraph_except]
comment "cases"
condcases
  ENOUGH_TO_SHOW_TAC `?d. MEM d (list_of_darts (fgraph g)) /\ CARD (node (hypermap_of_list (fgraph g)) d) = LENGTH (FILTER (\f. MEM v (vertices f)) (faces g))`
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (sub1 o GSYM)
intro dart_hypermap_of_list [`fgraph g`]
art[]
dt
fxast `MEM` mp
art[GSYM IN_SET_OF_LIST]
amt[arith `m >= 3 <=> 3 <= m`]
xxd

  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC fgraph_Faces;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `~(vertices f = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPED_ABBREV_TAC `ff = vertices f`;
  TYPIFY `MEM (HD ff) ff` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPED_ABBREV_TAC `L = fgraph g`;
  TYPED_ABBREV_TAC `d = HD (list_pairs ff)`;
  TYPIFY `d` EXISTS_TAC;
  TYPIFY `sizel (list_pairs ff) = sizel (ff)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[List_hypermap.size_list_pairs]);
  INTRO_TAC List_hypermap.list_pairs_empty [`ff`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `MEM d (list_pairs ff)` (C SUBGOAL_THEN ASSUME_TAC);
    EXPAND_TAC "d";
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `find_face L d = list_pairs ff` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.find_face_alt];
    AP_TERM_TAC;
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    MATCH_MP_TAC List_hypermap.find_pair_list_unique;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Seq.size];
  REWRITE_TAC[List_hypermap.dart_in_find_pair_list];
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[List_hypermap.find_face_alt];
  DISCH_THEN SUBST1_TAC;
  BY(ASM_REWRITE_TAC[])

  ]);;
  (* }}} *)

*)

end;;
