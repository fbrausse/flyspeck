(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter:  Tame Hypermap                                           *)
(* Lemma:  WMLNYMD                                                            *)
(* Author:  Thomas Hales     *)
(* Date: Dec 26, 2013                                                *)
(* ========================================================================== *)

needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
flyspeck_needs "tame/import_tame_classification.hl";;
flyspeck_needs "tame/more_tame_concl.hl";;

module Wmlnymd = struct

open Hypermap;;
open Import_tame_classification;;
open Tame_defs;;
open Tame_concl;;
open More_tame_concl;;
open Oxaxucs;;
open Asfutbf;;
open Elllnyz;;


parse_as_infix("POWER",(24,"right"));;
parse_as_infix("in_dart_of_loop",(11,"right"));;
(* parse_as_infix("iso",(24,"right"));; *)
unparse_as_infix "iso";;


make_overloadable "vertices" `:B -> (num list)`;;
overload_interface ("vertices",`FST:num list # bool -> num list`);;
remove_interface "vertices";;

let FILTER_CONJ = prove_by_refinement(
  `!f g xs. FILTER f (FILTER g xs) = FILTER (\(x:A). f x /\ g x) xs`,
  (* {{{ proof *)
  [
  REPLICATE_TAC 2 GEN_TAC;
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[FILTER]);
  REWRITE_TAC[FILTER];
  REPEAT COND_CASES_TAC THEN RULE_ASSUM_TAC(REWRITE_RULE[]) THEN ASM_REWRITE_TAC[FILTER];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let FILTER_NEGATE  = prove_by_refinement(
  `!f xs. FILTER f xs = xs <=> FILTER (\ (x:A). ~(f x)) xs = []`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC THEN REWRITE_TAC[FILTER];
  BY(REPEAT COND_CASES_TAC THEN ASM_REWRITE_TAC[FILTER;CONS_11;NOT_CONS_NIL] THEN ASM_MESON_TAC[MEM_FILTER;Seq.mem_head])
  ]);;
  (* }}} *)

let CARD_upt = prove_by_refinement(
  `!n. CARD (set_of_list (upt 0 n)) = n`,
  (* {{{ proof *)
  [
  GEN_TAC;
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  REWRITE_TAC[Oxaxucs.upt0];
  REWRITE_TAC[Seq.iota_uniq];
  BY(REWRITE_TAC[Seq.iota_uniq;Seq.size_iota])
  ]);;
  (* }}} *)

let MEMf_MAP = prove_by_refinement(
  `!f:A->B x u. MEM x u ==> MEM (f x) (MAP f u)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[MEM_MAP];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let fgraph_Faces = prove_by_refinement(
  `!g f. f IN Faces g ==> MEM (FST f) (fgraph g)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[fgraph;bn_Faces];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC MEMf_MAP;
  BY(ASM_REWRITE_TAC[GSYM IN_SET_OF_LIST])
  ]);;
  (* }}} *)

let MEM_HD = prove_by_refinement(
  `!xs:(A)list. ~(xs = []) ==> MEM (HD xs) xs`,
  (* {{{ proof *)
  [
  REWRITE_TAC[GSYM EL];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC MEM_EL;
  BY(ASM_REWRITE_TAC[arith `0 < m <=> ~(m=0)`;LENGTH_EQ_NIL])
  ]);;
  (* }}} *)

let dart_hypermap_of_list = prove_by_refinement(
  `!(L:((A)list)list). good_list L ==> 
   (dart(hypermap_of_list L) = set_of_list (list_of_darts (L)))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC List_hypermap.components_hypermap_of_list [`L`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  BY(REWRITE_TAC[List_hypermap.darts_of_list])
  ]);;
  (* }}} *)

let tame9a_correspondence = prove_by_refinement(
 `!g. tame_9a (hypermap_of_list (fgraph g)) /\ good_list (fgraph g) 
   ==>
  tame9a g`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC List_hypermap.card_face_of_list [`fgraph g`];
  INTRO_TAC List_hypermap.components_hypermap_of_list [`fgraph g`];
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM MP_TAC);
  REWRITE_TAC[tame9a;tame_hypermap;tame_9a;List_hypermap.good_list];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `?d. MEM d (list_of_darts (fgraph g)) /\ sizel (find_face (fgraph g) d) = LENGTH (  FST f)` ENOUGH_TO_SHOW_TAC;
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (unlist REWRITE_TAC o GSYM);
    FIRST_X_ASSUM (C INTRO_TAC [`d`]);
    ANTS_TAC;
      BY(ASM_REWRITE_TAC[]);
    DISCH_THEN (unlist REWRITE_TAC o GSYM);
    REWRITE_TAC[arith `3 <= m <=> m >= 3`];
    FIRST_X_ASSUM MATCH_MP_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[List_hypermap.darts_of_list];
    BY(ASM_REWRITE_TAC[IN_SET_OF_LIST]);
  COMMENT "1";
  TYPIFY `MEM (FST f) (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC fgraph_Faces;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `~(  FST f = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Seq.allP]);
  TYPED_ABBREV_TAC `ff =   FST f`;
  TYPIFY `MEM (HD ff) ff` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPED_ABBREV_TAC `L = fgraph g`;
  TYPED_ABBREV_TAC `d = HD (list_pairs ff)`;
  TYPIFY `d` EXISTS_TAC;
  TYPIFY `sizel (list_pairs ff) = sizel (ff)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[List_hypermap.size_list_pairs]);
  INTRO_TAC List_hypermap.list_pairs_empty [`ff`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `MEM d (list_pairs ff)` (C SUBGOAL_THEN ASSUME_TAC);
    EXPAND_TAC "d";
    MATCH_MP_TAC MEM_HD;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `find_face L d = list_pairs ff` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[List_hypermap.find_face_alt];
    AP_TERM_TAC;
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    MATCH_MP_TAC List_hypermap.find_pair_list_unique;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Seq.size];
  REWRITE_TAC[List_hypermap.dart_in_find_pair_list];
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[List_hypermap.find_face_alt];
  DISCH_THEN SUBST1_TAC;
  ASM_REWRITE_TAC[];
  ]);;
  (* }}} *)

(* Assumes ETDLJXT1_concl *)

let tame10_correspondence = prove_by_refinement(
 `!g. tame_10 (hypermap_of_list (fgraph g)) /\ good_list (fgraph g) /\
   good_list_nodes (fgraph g) /\ 
   (vertices_set2 g = elements_of_list (fgraph g)) 
   ==>
  tame10 g`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC List_hypermap.good_list_nodes_condition [`fgraph g`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_X_ASSUM_ST `tame_10` MP_TAC;
  ASM_REWRITE_TAC[tame10;tame_10;Hypermap.number_of_nodes];
  REWRITE_TAC[LET_THM];
  ENOUGH_TO_SHOW_TAC `sizel (list_of_elements(fgraph g)) = countVertices g`;
    REWRITE_TAC[IN_INSERT;NOT_IN_EMPTY];
    DISCH_THEN (SUBST1_TAC o GSYM);
    BY(ARITH_TAC);
  FIRST_X_ASSUM_ST `vertices_set2` MP_TAC;
  REWRITE_TAC[vertices_set2];
  REWRITE_TAC[Import_tame_classification.vertices_graph];
  REWRITE_TAC[List_hypermap.elements_of_list];
  DISCH_TAC;
  INTRO_TAC CARD_upt [`countVertices g`];
  DISCH_THEN (SUBST1_TAC o GSYM);
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  BY(REWRITE_TAC[List_hypermap.uniq_list_of_elements])
  ]);;
  (* }}} *)

let finalGraph_except = prove_by_refinement(
  `!g v. finalGraph g /\  
     facesAt g v = FILTER (\f. MEM v (  FST f)) (faces g)
   ==> 
   (except g v = LENGTH(FILTER (\f.  5 <= LENGTH(  FST f)) (facesAt g v)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[except;finalGraph;nonFinals];
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  AP_TERM_TAC;
  REWRITE_TAC[FILTER_CONJ];
  TYPIFY `FILTER (\f. SND f) (faces g) = faces g` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[FILTER_NEGATE];
    BY(ASM_REWRITE_TAC[]);
  TYPIFY_GOAL_THEN `!x. ((SND x /\ 5 <= LENGTH (  FST x)) /\ MEM v (  FST x)) <=> (( 5 <= LENGTH (  FST x) /\ MEM v (  FST x)) /\ SND x)` (unlist REWRITE_TAC);
    BY(MESON_TAC[]);
  ONCE_REWRITE_TAC[GSYM FILTER_CONJ];
  RULE_ASSUM_TAC (REWRITE_RULE[ETA_AX]);
  ASM_REWRITE_TAC[];
  BY(REWRITE_TAC[FILTER_CONJ])
  ]);;
  (* }}} *)


(* good_graph, jan 2014 
let good_graph = new_definition `good_graph g <=> 
   good_list (fgraph g) /\
   good_list_nodes (fgraph g) /\
   finalGraph g /\ 
   (!v. v IN vertices_set2 g
     ==> facesAt g v = FILTER (\f. MEM v (  FST f)) (faces g)) /\
   (vertices_set2 g = elements_of_list (fgraph g)) `;;
*)

let good_graph = new_definition `good_graph g <=> 
   good_list (fgraph g) /\
   good_list_nodes (fgraph g) /\
   finalGraph g /\ 
   all uniq (fgraph g) /\
   (!v. v IN vertices_set2 g
     ==> facesAt g v = FILTER (\f. MEM v (  FST f)) (faces g)) /\
   (vertices_set2 g = elements_of_list (fgraph g)) `;;


let facesAt_list = new_definition 
 `facesAt_list (L:((A)list)list) (v:A) =  FILTER (MEM v) L`;;

let tame11a_list = new_definition
  `tame11a_list L <=> 
    (!v:A. v IN elements_of_list L ==> 3 <= LENGTH (facesAt_list L v))`;;

(* was facesAt_list, duplicate name *)

let facesAt2_list = prove_by_refinement(
  `!g. good_graph g /\ v IN vertices_set2 g ==> map FST (facesAt g v) = 
     facesAt_list (fgraph g) v`,
  (* {{{ proof *)
  [
  REWRITE_TAC[good_graph;facesAt_list];
  REPEAT WEAKER_STRIP_TAC THEN ASM_SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC THEN ASM_SIMP_TAC[faces;fgraph];
  REWRITE_TAC[FILTER_MAP];
  REWRITE_TAC[Seq.map_MAP];
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  BY(REWRITE_TAC[FUN_EQ_THM;o_THM])
  ]);;
  (* }}} *)

let tame11a_good_graph = prove_by_refinement(
  `!g. good_graph g /\ tame11a_list (fgraph g) ==> tame11a g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[tame11a_list;tame11a;degree];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`v`]);
  ANTS_TAC;
    BY(ASM_MESON_TAC[good_graph]);
  GMATCH_SIMP_TAC (GSYM facesAt2_list);
  CONJ_TAC;
    BY(ASM_REWRITE_TAC[]);
  BY(REWRITE_TAC[LENGTH_MAP;Seq.map_MAP])
  ]);;
  (* }}} *)

let except_list = new_definition `except_list L (v:A) = 
  LENGTH (FILTER (\f. 5 <= LENGTH f) (facesAt_list L v))`;;

let MEM_EQ_NIL = prove_by_refinement(
  `!s. s = [] <=> (!x. ~MEM x s)`,
  (* {{{ proof *)
  [
  BY(MESON_TAC[List_hypermap.mem_not_nil])
  ]);;
  (* }}} *)

let good_final_filter = prove_by_refinement(
  `!P g v. good_graph g /\ v IN vertices_set2 g ==>
    FILTER (\f. SND f /\ P f) (facesAt g v) = 
      FILTER P (facesAt g v)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[good_graph;finalGraph;nonFinals];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `(\f. SND f /\ P f) = (\f. P f /\ SND f)` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[FUN_EQ_THM];
    BY(MESON_TAC[]);
  REWRITE_TAC[GSYM FILTER_CONJ];
  AP_TERM_TAC;
  REWRITE_TAC[FILTER_NEGATE];
  REPEAT (FIRST_X_ASSUM_ST `[]` MP_TAC) THEN REWRITE_TAC[MEM_EQ_NIL];
  REWRITE_TAC[MEM_FILTER;DE_MORGAN_THM];
  TYPIFY `!x. MEM x (facesAt g v) ==> MEM x (faces g)` ENOUGH_TO_SHOW_TAC;
    BY(MESON_TAC[]);
  FIRST_X_ASSUM GMATCH_SIMP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[MEM_FILTER];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let good_type_filter = prove_by_refinement(
  `!P g v. good_graph g /\ v IN vertices_set2 g ==>
      FILTER (\f. P (LENGTH f)) (facesAt_list (fgraph g) v) = 
       MAP FST (FILTER (\f. P (LENGTH (FST f))) (facesAt g v))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC (GSYM facesAt2_list);
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Seq.map_MAP;FILTER_MAP];
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  BY(REWRITE_TAC[FUN_EQ_THM;o_THM])
  ]);;
  (* }}} *)

let except_list_except = prove_by_refinement(
  `!g. good_graph g /\ v IN vertices_set2 g ==>
    except_list (fgraph g) v = except g v`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[except_list];
  GMATCH_SIMP_TAC finalGraph_except;
  CONJ_TAC;
    BY(ASM_MESON_TAC[good_graph]);
  GMATCH_SIMP_TAC good_type_filter;
  BY(ASM_REWRITE_TAC[LENGTH_MAP])
  ]);;
  (* }}} *)

let tame11b_list = new_definition `tame11b_list L <=>
  (!v. v IN  elements_of_list L ==>
    LENGTH (facesAt_list L v) <= if except_list L v = 0 then 7 else 6)`;;   

let tame11b_list_tame11b = prove_by_refinement(
  `!g. good_graph g /\ tame11b_list (fgraph g) ==> tame11b g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[tame11b_list;tame11b;degree];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`v`]);
  ANTS_TAC;
    BY(ASM_MESON_TAC[good_graph]);
  GMATCH_SIMP_TAC except_list_except;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC (GSYM facesAt2_list);
  BY(ASM_REWRITE_TAC[Seq.map_MAP;LENGTH_MAP])
  ]);;
  (* }}} *)

let tri_list = new_definition `tri_list L (v:A) = 
  LENGTH (FILTER (\f. LENGTH f = 3) (facesAt_list L v))`;;

let quad_list = new_definition `quad_list L (v:A) = 
  LENGTH (FILTER (\f. LENGTH f = 4) (facesAt_list L v))`;;

let vertextype_list = new_definition `vertextype_list L (v:A) = 
  tri_list L v, quad_list L v, except_list L v`;;

let tri_list_tri = prove_by_refinement(
  `!g v. good_graph g /\ v IN vertices_set2 g ==>
    tri_list (fgraph g) v = tri g v`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[tri_list;Import_tame_classification.tri];
  GMATCH_SIMP_TAC good_type_filter;
  ASM_REWRITE_TAC[LENGTH_MAP];
  GMATCH_SIMP_TAC good_final_filter;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let quad_list_quad = prove_by_refinement(
  `!g v. good_graph g /\ v IN vertices_set2 g ==>
    quad_list (fgraph g) v = quad g v`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[quad_list;Import_tame_classification.quad];
  GMATCH_SIMP_TAC good_type_filter;
  ASM_REWRITE_TAC[LENGTH_MAP];
  GMATCH_SIMP_TAC good_final_filter;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let vertextype_list_vertextype = prove_by_refinement(
  `!g v. good_graph g /\ v IN vertices_set2 g ==>
    vertextype_list (fgraph g) v = vertextype g v`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[vertextype_list;Import_tame_classification.vertextype;PAIR_EQ];
  BY(ASM_SIMP_TAC[tri_list_tri;quad_list_quad;except_list_except])
  ]);;
  (* }}} *)

let tame12o_list = new_definition `tame12o_list L <=>
  (!v. v IN elements_of_list L /\ ~(except_list L v = 0) /\
    LENGTH (facesAt_list L v) = 6 ==>
      vertextype_list L v = 5,0,1)`;;

let tame12o_list_tame12o = prove_by_refinement(
  `!g. good_graph g /\ tame12o_list (fgraph g) ==> tame12o g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[tame12o_list;tame12o;degree];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`v`]);
  ANTS_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[good_graph]);
    GMATCH_SIMP_TAC except_list_except;
    GMATCH_SIMP_TAC (GSYM facesAt2_list);
    ASM_REWRITE_TAC[Seq.map_MAP;LENGTH_MAP];
    BY(ASM_MESON_TAC[not_equal]);
  GMATCH_SIMP_TAC vertextype_list_vertextype;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let admissible1_list = new_definition `admissible1_list w L <=>
  (!f. MEM f L ==> squanderFace (LENGTH f) <= w f)`;;

let admissible1_list_admissible1 = prove_by_refinement(
  `!g w. admissible1_list w (fgraph g) ==> 
     admissible1 (w o FST) g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[admissible1_list;admissible1;bn_Faces;faces;IN_SET_OF_LIST;fgraph;o_THM];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`FST f`]);
  DISCH_THEN MATCH_MP_TAC;
  MATCH_MP_TAC MEMf_MAP;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let admissible2_list = new_definition `admissible2_list w L <=>
  (!v. v IN elements_of_list L /\ except_list L v = 0 ==>
     squanderVertex (tri_list L v) (quad_list L v) <=
      sumn (MAP w (facesAt_list L v)))`;;

let admissible2_list_admissible2 = prove_by_refinement(
  `!g w. good_graph g /\ admissible2_list w (fgraph g) ==> 
     admissible2 (w o FST) g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[admissible2_list;admissible2];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`v`]);
  ANTS_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[good_graph]);
    GMATCH_SIMP_TAC except_list_except;
    BY(ASM_REWRITE_TAC[]);
  ASM_SIMP_TAC[tri_list_tri;quad_list_quad];
  GMATCH_SIMP_TAC (GSYM facesAt2_list);
  ASM_REWRITE_TAC[Seq.map_MAP;GSYM MAP_o];
  MATCH_MP_TAC (arith `(a = b) ==> (a ==> b)`);
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  BY(REWRITE_TAC[FUN_EQ_THM;o_THM])
  ]);;
  (* }}} *)

let admissible3_list = new_definition `admissible3_list w L <=>
  (!v. v IN elements_of_list L /\ vertextype_list L v = 5,0,1 ==>
   sumn (MAP w (FILTER (\f. LENGTH f = 3) (facesAt_list L v))) >=
    excessTCount)`;;

let admissible3_list_admissible3 = prove_by_refinement(
  `!g w. good_graph g /\ admissible3_list w (fgraph g) ==> 
     admissible3 (w o FST) g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[admissible3_list;admissible3];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`v`]);
  ANTS_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[good_graph]);
    GMATCH_SIMP_TAC vertextype_list_vertextype;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `(MAP w (FILTER (\f. LENGTH f = 3) (facesAt_list (fgraph g) v))) = (map (\f. (w o FST) f) (FILTER triangle (facesAt g v)))` ENOUGH_TO_SHOW_TAC;
    DISCH_THEN SUBST1_TAC;
    BY(REWRITE_TAC[]);
  REWRITE_TAC[triangle;Seq.map_MAP];
  GMATCH_SIMP_TAC (GSYM facesAt2_list);
  ASM_REWRITE_TAC[Seq.map_MAP;GSYM MAP_o];
  REWRITE_TAC[FILTER_MAP;GSYM MAP_o];
  TYPIFY `triangle = (\f. LENGTH f = 3) o FST` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[triangle;FUN_EQ_THM;o_THM]);
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  BY(REWRITE_TAC[FUN_EQ_THM;o_THM])
  ]);;
  (* }}} *)

let tame13a_list = new_definition `tame13a_list L <=>
   (?w. admissible1_list w L /\ admissible2_list w L /\ admissible3_list w L /\
     sumn (MAP w L) < squanderTarget)`;;


let tame13a_list_tame13a_lemma = prove_by_refinement(
  `!g. good_graph g /\ tame13a_list (fgraph g) ==>
      (?w. admissible' (w o FST) g /\
        sumn (MAP (\f. (w o FST) f) (faces g)) < squanderTarget)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[tame13a_list;admissible'];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `w` EXISTS_TAC;
  REPEAT (FIRST_X_ASSUM_ST `fgraph` MP_TAC);
  ASM_SIMP_TAC[admissible1_list_admissible1];
  ASM_SIMP_TAC[admissible2_list_admissible2];
  ASM_SIMP_TAC[admissible3_list_admissible3];
  REWRITE_TAC[fgraph;faces];
  REWRITE_TAC[fgraph;faces;GSYM MAP_o];
  BY(REWRITE_TAC[ETA_AX])
  ]);;
  (* }}} *)

let tame13a_list_tame13a = prove_by_refinement(
  `!g. good_graph g /\ tame13a_list (fgraph g) ==>
    tame13a g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[tame13a];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC tame13a_list_tame13a_lemma [`g`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `(w o FST):(num)list#bool->num` EXISTS_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let dart_of_exists = prove_by_refinement(
  `!L f (v:A). ?d. good_list L /\ MEM f L /\ MEM v f ==> 
    MEM d (list_of_darts L) /\  f = find_pair_list L d /\ FST d = v`,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.list_of_darts_alt;List_hypermap.list_of_faces];
  REWRITE_TAC[RIGHT_EXISTS_IMP_THM];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Seq2.mem_flatten];
  REWRITE_TAC[LEFT_AND_EXISTS_THM];
  ONCE_REWRITE_TAC[MESON [] `(?a b. P a b ) <=> (?b a. P a b)`];
  TYPIFY `list_pairs f` EXISTS_TAC;
  INTRO_TAC List_hypermap.mem_list_pairs_exists [`v`;`f`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[EXISTS_PAIR_THM];
  GEXISTL_TAC [`v`;`y`];
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    MATCH_MP_TAC MEMf_MAP;
    BY(ASM_REWRITE_TAC[]);
  MATCH_MP_TAC List_hypermap.find_pair_list_unique;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[List_hypermap.good_list])
  ]);;
  (* }}} *)

let dart_of = new_specification ["dart_of"] 
  (REWRITE_RULE[SKOLEM_THM] dart_of_exists);;

let dart_of_find_face = prove_by_refinement(
  `!L f v. good_list L /\ MEM f L /\ MEM v f ==>
      find_face L (dart_of L f v) = list_pairs f`,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.find_face_alt];
  BY(MESON_TAC[dart_of])
  ]);;
  (* }}} *)

let dart_of_card_face = prove_by_refinement(
  `!L f v. good_list L /\ MEM f L /\ MEM v f ==>
    CARD (face (hypermap_of_list L) (dart_of L f v)) = LENGTH f`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of [`L`;`f`;`v`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC List_hypermap.card_face_of_list;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC dart_of_find_face;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[List_hypermap.size_list_pairs];
  BY(REWRITE_TAC[Seq.size])
  ]);;
  (* }}} *)

let list_pairs_unique = prove_by_refinement(
  `!f:(A)list d1 d2. uniq f /\ MEM d1 (list_pairs f) /\ MEM d2 (list_pairs f) /\
     FST d1 = FST d2 ==> d1 = d2`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FORALL_PAIR_THM;PAIR_EQ];
  BY(ASM_MESON_TAC[List_hypermap.mem_list_pairs_explicit])
  ]);;
  (* }}} *)

let dart_of_unique = prove_by_refinement(
  `!L f v d. good_list L /\ all uniq L /\ MEM f L /\ MEM v f /\
     MEM d (list_of_darts L) /\ find_pair_list L d = f /\
     FST d = v ==> (d = dart_of L f v)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of [`L`;`f`;`v`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM d (list_pairs f)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[List_hypermap.dart_in_face;List_hypermap.find_face_alt]);
  MATCH_MP_TAC list_pairs_unique;
  TYPIFY `f` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(ASM_MESON_TAC[Seq.allP]);
  BY(ASM_MESON_TAC[List_hypermap.dart_in_face;List_hypermap.find_face_alt])
  ]);;
  (* }}} *)

let dart_of_node = prove_by_refinement(
  `!L x (v:A). 
    good_list L /\ good_list_nodes L /\ all uniq L /\
    MEM x (list_of_darts L) /\
    FST x = v ==> 
    BIJ (\f. dart_of L f v) (set_of_list (facesAt_list L v)) 
    (node (hypermap_of_list L) x)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x IN darts_of_list L` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST]);
  ASM_SIMP_TAC[List_hypermap.good_list_node];
  REWRITE_TAC[BIJ];
  SUBCONJ2_TAC;
    REWRITE_TAC[SURJ;IN_SET_OF_LIST;IN_ELIM_THM];
    CONJ_TAC;
      REPEAT WEAKER_STRIP_TAC;
      INTRO_TAC dart_of [`L`;`x'`;`v`];
      ASM_REWRITE_TAC[];
      ANTS_TAC;
        FIRST_X_ASSUM MP_TAC;
        REWRITE_TAC[facesAt_list];
        REWRITE_TAC[MEM_FILTER];
        BY(SIMP_TAC[]);
      REPEAT WEAKER_STRIP_TAC;
      TYPIFY `SND (dart_of L x' v)` EXISTS_TAC;
      SUBCONJ2_TAC;
        BY(ASM_MESON_TAC[FST;SND;PAIR]);
      DISCH_THEN (SUBST1_TAC o GSYM);
      BY(ASM_REWRITE_TAC[ List_hypermap.darts_of_list;IN_SET_OF_LIST]);
    REPEAT WEAKER_STRIP_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[facesAt_list;MEM_FILTER];
    FIRST_X_ASSUM_ST `darts_of_list` MP_TAC;
    ASM_REWRITE_TAC[ List_hypermap.darts_of_list;IN_SET_OF_LIST;List_hypermap.list_of_darts_alt];
    REWRITE_TAC[Seq2.mem_flatten];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `list_of_faces` MP_TAC;
    REWRITE_TAC[List_hypermap.list_of_faces;MEM_MAP];
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `x''` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    SUBCONJ_TAC;
      BY(ASM_MESON_TAC[List_hypermap.mem_list_pairs]);
    DISCH_TAC;
    ONCE_REWRITE_TAC[EQ_SYM_EQ];
    MATCH_MP_TAC dart_of_unique;
    ASM_REWRITE_TAC[];
    CONJ_TAC;
      REWRITE_TAC[List_hypermap.mem_list_of_darts];
      BY(ASM_MESON_TAC[]);
    MATCH_MP_TAC List_hypermap.list_pairs_inj;
    REWRITE_TAC[GSYM List_hypermap.find_face_alt];
    REWRITE_TAC[GSYM List_hypermap.find_face_alt];
    GMATCH_SIMP_TAC List_hypermap.find_face_eq;
    ASM_REWRITE_TAC[List_hypermap.mem_list_of_darts];
    REPEAT CONJ_TAC;
          BY(ASM_MESON_TAC[List_hypermap.good_list]);
        BY(ASM_MESON_TAC[]);
      REWRITE_TAC[List_hypermap.list_of_faces];
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    BY(ASM_MESON_TAC[]);
  COMMENT "INJ";
  REWRITE_TAC[SURJ;INJ] THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  REWRITE_TAC[IN_SET_OF_LIST;facesAt_list;MEM_FILTER];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of [`L`;`x'`;`v`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of [`L`;`y`;`v`];
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let dart_of_card_node = prove_by_refinement(
  `!L x (v:A). 
    good_list L /\ good_list_nodes L /\ all uniq L /\
    MEM x (list_of_darts L) /\
    FST x = v ==> 
    CARD (node (hypermap_of_list L) x) = LENGTH (facesAt_list L v)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of_node [`L`;`x`;`v`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_X_ASSUM (MP_TAC o MATCH_MP (REWRITE_RULE[MESON[] `( a /\ b ==> c) <=> (b ==> a ==> c)`]Misc_defs_and_lemmas.BIJ_CARD));
  REWRITE_TAC[FINITE_SET_OF_LIST];
  DISCH_THEN (SUBST1_TAC o GSYM);
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  REWRITE_TAC[Seq.size];
  REWRITE_TAC[facesAt_list;GSYM filter_FILTER];
  MATCH_MP_TAC Seq.filter_uniq;
  MATCH_MP_TAC List_hypermap.good_list_uniq;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let node_of_element = prove_by_refinement(
  `!L (v:A).  MEM v (list_of_elements L) ==>
    MEM (filter (\d. FST d = v) (list_of_darts L)) (list_of_nodes L)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[List_hypermap.list_of_nodes;MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `v` EXISTS_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let MEM_hypermap_of_list_node = prove_by_refinement(
  `!L x y.  good_list_nodes L /\ MEM x (list_of_darts L) ==>
     (y IN (node (hypermap_of_list L) x) <=>
     (FST x = FST y /\ MEM y (list_of_darts L)))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC More_list_hypermap.node_hypermap_of_list_explicit;
  TYPIFY ` ((filter (\d. FST d = FST x) (list_of_darts L)))` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    CONJ_TAC;
      MATCH_MP_TAC node_of_element;
      INTRO_TAC Elllnyz.mem_list_of_darts_imp_mem_list_of_elements_alt [`L`;`FST x`;`SND x`];
      BY(ASM_MESON_TAC[PAIR]);
    BY(ASM_REWRITE_TAC[filter_FILTER;MEM_FILTER]);
  ASM_REWRITE_TAC[IN_SET_OF_LIST;filter_FILTER;MEM_FILTER];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let set_of_n_meeting_node = prove_by_refinement(
  `!P L (x:A#A).  
   good_list L /\ good_list_nodes L /\ MEM x (list_of_darts L) ==>
   BIJ (set_of_list o list_pairs) 
  (set_of_list (filter (\f. P(LENGTH f)) (facesAt_list L (FST x))))
  {face (hypermap_of_list L) y | y | 
     y IN dart (hypermap_of_list L) /\ 
     P(CARD (face (hypermap_of_list L) y)) /\
       y IN node (hypermap_of_list L) x}`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
  ASM_SIMP_TAC[MEM_hypermap_of_list_node];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `{face (hypermap_of_list L) y | y | MEM y (list_of_darts L) /\  P  (CARD  (face (hypermap_of_list L) y)) /\  FST x = FST y /\  MEM y (list_of_darts L)} = {face (hypermap_of_list L) y | y | MEM y (list_of_darts L) /\  P  (sizel (find_face L y)) /\  FST x = FST y }` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[EXTENSION;IN_ELIM_THM];
    X_GENv_TAC "u";
    BY(ASM_MESON_TAC[List_hypermap.card_face_of_list]);
  REWRITE_TAC[BIJ];
  SUBCONJ_TAC;
    COMMENT "IMAGE";
    REWRITE_TAC[INJ];
    CONJ_TAC;
      X_GENv_TAC "f";
      REWRITE_TAC[IN_ELIM_THM;IN_SET_OF_LIST;o_THM;filter_FILTER;MEM_FILTER;facesAt_list];
      REPEAT WEAKER_STRIP_TAC;
      TYPIFY `dart_of L f (FST x)` EXISTS_TAC;
      INTRO_TAC dart_of [`L`;`f`;`FST x`];
      ASM_REWRITE_TAC[];
      REPEAT WEAKER_STRIP_TAC;
      ASM_REWRITE_TAC[];
      GMATCH_SIMP_TAC More_list_hypermap.face_hypermap_of_list_explicit;
      TYPIFY `list_pairs f` EXISTS_TAC;
      ASM_REWRITE_TAC[];
      GMATCH_SIMP_TAC dart_of_find_face;
      REWRITE_TAC[List_hypermap.size_list_pairs];
      ASM_REWRITE_TAC[Seq.size];
      CONJ2_TAC;
        GMATCH_SIMP_TAC (GSYM dart_of_find_face);
        GEXISTL_TAC [`L`;`FST x`];
        ASM_REWRITE_TAC[];
        BY(ASM_MESON_TAC[List_hypermap.dart_in_face]);
      REWRITE_TAC[List_hypermap.list_of_faces];
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    COMMENT "INJ";
    REWRITE_TAC[IN_SET_OF_LIST;o_THM];
    REPEAT WEAKER_STRIP_TAC;
    REPEAT (FIRST_X_ASSUM MP_TAC);
    REWRITE_TAC[filter_FILTER;MEM_FILTER;facesAt_list];
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC List_hypermap.mem_face_lemma [`list_pairs x'`;`L`];
    ANTS_TAC;
      ASM_REWRITE_TAC[];
      REWRITE_TAC[List_hypermap.list_of_faces];
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC List_hypermap.find_face_eq [`L`;`d`;`list_pairs y`];
    ANTS_TAC;
      BY(ASM_MESON_TAC[List_hypermap.good_list]);
    TYPIFY `MEM (list_pairs y) (list_of_faces L) /\ MEM d (list_pairs y)` ENOUGH_TO_SHOW_TAC;
      DISCH_THEN (unlist REWRITE_TAC);
      BY(ASM_MESON_TAC[List_hypermap.list_pairs_inj]);
    CONJ_TAC;
      REWRITE_TAC[List_hypermap.list_of_faces];
      MATCH_MP_TAC MEMf_MAP;
      BY(ASM_REWRITE_TAC[]);
    TYPIFY `MEM d (find_face L d)` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[IN_SET_OF_LIST]);
    BY(ASM_MESON_TAC[List_hypermap.dart_in_face]);
  COMMENT "SURJ";
  REWRITE_TAC[INJ;SURJ;IN_ELIM_THM] THEN REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[IN_ELIM_THM];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[o_THM;IN_SET_OF_LIST;filter_FILTER;MEM_FILTER;facesAt_list];
  ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM_ST `filter` kill);
  ASM_SIMP_TAC[List_hypermap.face_of_list];
  REWRITE_TAC[List_hypermap.find_face_alt];
  TYPIFY `find_pair_list L y` EXISTS_TAC;
  REWRITE_TAC[];
  CONJ_TAC;
    FIRST_X_ASSUM_ST `sizel` MP_TAC;
    REWRITE_TAC[List_hypermap.find_face_alt];
    REWRITE_TAC[List_hypermap.size_list_pairs];
    BY(REWRITE_TAC[Seq.size]);
  CONJ_TAC;
    ONCE_REWRITE_TAC[List_hypermap.mem_list_pairs_exists];
    TYPIFY `SND y` EXISTS_TAC;
    REWRITE_TAC[PAIR];
    BY(ASM_REWRITE_TAC[GSYM List_hypermap.dart_in_find_pair_list]);
  MATCH_MP_TAC List_hypermap.mem_find_pair_list;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let card_set_of_n_meeting_node = prove_by_refinement(
  `!P L (x:A#A).  
   good_list L /\ good_list_nodes L /\ MEM x (list_of_darts L) ==>
  CARD {face (hypermap_of_list L) y | y | 
     y IN dart (hypermap_of_list L) /\ 
     P(CARD (face (hypermap_of_list L) y)) /\
       y IN node (hypermap_of_list L) x} = 
  LENGTH
  ( (filter (\f. P(LENGTH f)) (facesAt_list L (FST x))))
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC set_of_n_meeting_node [`P`;`L`;`x`];
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  FIRST_X_ASSUM (MP_TAC o MATCH_MP (REWRITE_RULE[MESON[] `( a /\ b ==> c) <=> (b ==> a ==> c)`]Misc_defs_and_lemmas.BIJ_CARD));
  REWRITE_TAC[FINITE_SET_OF_LIST];
  DISCH_THEN (SUBST1_TAC o GSYM);
  GMATCH_SIMP_TAC Seq2.card_set_of_list_uniq;
  REWRITE_TAC[Seq.size];
  REWRITE_TAC[facesAt_list;GSYM filter_FILTER];
  MATCH_MP_TAC Seq.filter_uniq;
  MATCH_MP_TAC Seq.filter_uniq;
  MATCH_MP_TAC List_hypermap.good_list_uniq;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

(* CARD set_of_triangles_meeting_node *)

let card_set_of_n_meeting_node_pqr = prove_by_refinement(
  `! L (x:A#A).  
   good_list L /\ good_list_nodes L /\ MEM x (list_of_darts L) ==>
  CARD (set_of_triangles_meeting_node (hypermap_of_list L) x) = 
    tri_list L (FST x) /\ 
  CARD (set_of_quadrilaterals_meeting_node (hypermap_of_list L) x) = 
    quad_list L (FST x) /\ 
  CARD (set_of_exceptional_meeting_node (hypermap_of_list L) x) = 
    except_list L (FST x)
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[set_of_triangles_meeting_node;set_of_quadrilaterals_meeting_node;set_of_exceptional_meeting_node];
  ASM_SIMP_TAC[ card_set_of_n_meeting_node];
  REWRITE_TAC[tri_list;quad_list;except_list];
  REWRITE_TAC[tri_list;quad_list;except_list;filter_FILTER];
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  REWRITE_TAC[FUN_EQ_THM];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let type_of_node_vertextype = prove_by_refinement(
  `! L (x:A#A).  
   good_list L /\ good_list_nodes L /\ MEM x (list_of_darts L) ==>
  type_of_node (hypermap_of_list L) x = 
  vertextype_list L (FST x)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_SIMP_TAC[type_of_node;vertextype_list;card_set_of_n_meeting_node_pqr])
  ]);;
  (* }}} *)

let tame11_correspondence = prove_by_refinement(
 `!L.    good_list L /\ 
   good_list_nodes L  /\
   all uniq L /\
   tame_11a (hypermap_of_list L) /\ 
   tame_11b (hypermap_of_list L) /\
   tame_12o (hypermap_of_list L) 
   ==>
  tame11a_list L /\ tame11b_list L`,
  (* {{{ proof *)
  [
  ASM_REWRITE_TAC[tame11a_list;tame11b_list;tame_12o;tame_11b;tame_11a;Tame_defs.node_exceptional_face;Tame_defs.exceptional_face;node_type_exceptional_face];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC (MESON[] `(!v. r v ==> (P v /\ Q v)) ==> ((!v. r v ==> P v) /\ (!v. r v ==> Q v))`);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[except_list];
  TYPIFY `?f. MEM v f /\  MEM f L` (C SUBGOAL_THEN MP_TAC);
    FIRST_X_ASSUM MP_TAC;
    REWRITE_TAC[List_hypermap.elements_of_list;IN_SET_OF_LIST];
    REWRITE_TAC[List_hypermap.list_of_elements;Seq.mem_undup];
    REWRITE_TAC[Seq2.mem_flatten];
    BY(MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `CARD` MP_TAC;
  REPEAT (FIRST_X_ASSUM (C INTRO_TAC [`dart_of L f v`]));
  INTRO_TAC dart_of [`L`;`f`;`v`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  STRIP_TAC;
  ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
  ASM_SIMP_TAC[dart_of_card_node];
  ASM_SIMP_TAC[arith `n >= 3 ==> 3 <= n`];
  COMMENT "cases";
  COND_CASES_TAC;
    BY(SIMP_TAC[]);
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[LENGTH_EQ_NIL;List_hypermap.mem_not_nil];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`dart_of L x v`]);
  FIRST_X_ASSUM_ST `FILTER` MP_TAC;
  REWRITE_TAC[MEM_FILTER];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of [`L`;`x`;`v`];
  TYPIFY `MEM x L /\ MEM v x` (C SUBGOAL_THEN ASSUME_TAC);
    FIRST_X_ASSUM_ST `facesAt_list` MP_TAC;
    REWRITE_TAC[facesAt_list;MEM_FILTER];
    BY(MESON_TAC[]);
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `CARD` MP_TAC;
  ASM_SIMP_TAC [dart_of_card_face];
  ASM_REWRITE_TAC[arith `n >= 5 <=> 5 <= n`];
  BY(ASM_SIMP_TAC[dart_of_card_node])
  ]);;
  (* }}} *)

let tame12o_correspondence = prove_by_refinement(
 `!L.    good_list L /\ 
   good_list_nodes L  /\
   all uniq L /\
   tame_12o (hypermap_of_list L) 
   ==>
  tame12o_list L`,
  (* {{{ proof *)
  [
  ASM_REWRITE_TAC[tame_12o;tame12o_list;Tame_defs.node_exceptional_face;Tame_defs.exceptional_face;node_type_exceptional_face;except_list];
  REWRITE_TAC[LENGTH_EQ_NIL;List_hypermap.mem_not_nil];
  REWRITE_TAC[MEM_FILTER];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM x L /\ MEM v x` (C SUBGOAL_THEN ASSUME_TAC);
    REPEAT (FIRST_X_ASSUM_ST `facesAt_list` MP_TAC);
    REWRITE_TAC[facesAt_list;MEM_FILTER];
    BY(MESON_TAC[]);
  FIRST_X_ASSUM (C INTRO_TAC [`dart_of L x v`]);
  INTRO_TAC dart_of [`L`;`x`;`v`];
  ASM_REWRITE_TAC[];
  STRIP_TAC;
  ASM_SIMP_TAC [dart_of_card_face];
  ASM_REWRITE_TAC[arith `n >= 5 <=> 5 <= n`];
  (ASM_SIMP_TAC[dart_of_card_node]);
  BY((ASM_SIMP_TAC[type_of_node_vertextype]))
  ]);;
  (* }}} *)

(* for tame13a_correspondence, 
   we need to round real numbers to natural numbers. *)

let floor_lemma = prove_by_refinement(
  `!y. &0 <= y ==> (?m. &m <= y /\ y < &m + &1)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC FLOOR [`y`];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `?n. &n = floor y` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  BY(ASM_MESON_TAC[FLOOR_POS])
  ]);;
  (* }}} *)

let nfloor_exists = prove_by_refinement(
  `!(d:num) x. ?(n:num).  &0 <= x ==> &n <= x * &d /\ x * &d < &n + &1`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC floor_lemma [`x * &d`];
  DISCH_TAC;
  RULE_ASSUM_TAC( REWRITE_RULE[GSYM RIGHT_EXISTS_IMP_THM]);
  FIRST_X_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `m` EXISTS_TAC;
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  GMATCH_SIMP_TAC REAL_LE_MUL;
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let nfloor = new_specification ["nfloor"] 
   (REWRITE_RULE[SKOLEM_THM] nfloor_exists);;

let wt_floor = new_definition `wt_floor w (f:A->bool) = 
  if (CARD f) > 4 then squanderFace (CARD f) else nfloor 10000 (w f)`;;

let adm_1_floor = new_definition `adm_1_floor (H:(A)hypermap) w <=>
   (!x. x IN dart H ==> w (face H x) >= squanderFace (CARD (face H x)))`;;

let adm_2_floor = new_definition `adm_2_floor (H:(A)hypermap) w <=>
   (!x. x IN dart H /\ CARD (set_of_exceptional_meeting_node H x) = 0
              ==> nsum (set_of_face_meeting_node H x) w >=
                  squanderVertex (CARD (set_of_triangles_meeting_node H x))
                  (CARD (set_of_quadrilaterals_meeting_node H x)))`;;

let adm_3_floor = new_definition `adm_3_floor (H:(A)hypermap) w <=>
         (!x. x IN dart H /\ type_of_node H x = 5,0,1
            ==> nsum (set_of_triangles_meeting_node H x) w >= excessTCount)`;;

let tame_13a_floor = new_definition `tame_13a_floor (H:(A)hypermap) <=>
  (?w. adm_1_floor H w /\ adm_2_floor H w /\ adm_3_floor H w /\
         nsum (face_set H) w < squanderTarget)`;;

let wt_floor_nn = prove_by_refinement(
  `!H w x. x IN dart H /\ adm_1 H w ==>
    &0 <= w (face H x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[adm_1;d_tame;Tame_defs.tgt];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`x`]) THEN ASM_REWRITE_TAC[];
  BY(REPEAT COND_CASES_TAC THEN ASM_REWRITE_TAC[] THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let wt_floor_le_wt = prove_by_refinement(
  `!H w x. x IN dart H /\ adm_1 H w  ==> 
   &(wt_floor w (face H x)) <= w (face H x) * &10000`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC wt_floor_nn [`H`;`w`;`x`] THEN ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM MP_TAC);
  REWRITE_TAC[adm_1;wt_floor;arith `x >= y <=> y <= x`];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`x`]);
  ASM_REWRITE_TAC[];
  COND_CASES_TAC;
    DISCH_TAC;
    MATCH_MP_TAC REAL_LE_TRANS;
    TYPIFY `d_tame (CARD (face H x)) * &10000` EXISTS_TAC;
    CONJ2_TAC;
      BY(FIRST_X_ASSUM MP_TAC THEN REAL_ARITH_TAC);
    REWRITE_TAC[squanderFace;d_tame];
    ASM_SIMP_TAC [arith `n > 4 ==> ~(n = 3) /\ ~(n=4)`];
    COND_CASES_TAC;
      ASM_REWRITE_TAC[];
      BY(REAL_ARITH_TAC);
    ASM_REWRITE_TAC[];
    COND_CASES_TAC THEN ASM_REWRITE_TAC[];
      BY(REAL_ARITH_TAC);
    REWRITE_TAC[squanderTarget;Tame_defs.tgt];
    BY(REAL_ARITH_TAC);
  BY(ASM_SIMP_TAC[nfloor])
  ]);;
  (* }}} *)

let total_weight_floor = prove_by_refinement(
  `!H w. adm_1 H w /\ total_weight H w < tgt ==> 
    nsum (face_set H) (wt_floor w) < squanderTarget`,
  (* {{{ proof *)
  [
  REWRITE_TAC[total_weight;Tame_defs.tgt];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC wt_floor_le_wt [`H`;`w`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[GSYM REAL_OF_NUM_LT];
  GMATCH_SIMP_TAC REAL_OF_NUM_SUM;
  REWRITE_TAC[Hypermap.FINITE_HYPERMAP_ORBITS];
  RULE_ASSUM_TAC (ONCE_REWRITE_RULE[arith `x < y <=> x * &10000 < y * &10000`]);
  RULE_ASSUM_TAC (REWRITE_RULE[GSYM SUM_RMUL]);
  TYPIFY `&squanderTarget =  #1.541 * &10000` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[squanderTarget] THEN REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC REAL_LET_TRANS;
  TYPIFY `sum (face_set H) (\x. w x * &10000)` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC SUM_LE;
  REWRITE_TAC[Hypermap.FINITE_HYPERMAP_ORBITS];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (MP_TAC o (MATCH_MP Hypermap.lemma_face_representation));
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let adm_1_floor_adm_1 = prove_by_refinement(
  `!H w. adm_1 H w /\ tame_9a H ==> adm_1_floor H (wt_floor w)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC wt_floor_nn [`H`;`w`] THEN ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM MP_TAC);
  REWRITE_TAC[adm_1;adm_1_floor;d_tame;squanderFace];
  REPEAT WEAKER_STRIP_TAC;
  REPEAT (FIRST_X_ASSUM (C INTRO_TAC [`x`]));
  TYPED_ABBREV_TAC `n = CARD (face H x)`;
  ASM_REWRITE_TAC[Tame_defs.tgt;squanderTarget;squanderFace] THEN REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC wt_floor [`w`;`face H x`];
  INTRO_TAC nfloor [`10000`;`w (face H x)`];
  ASM_REWRITE_TAC[];
  TYPIFY `n >= 3` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[tame_9a]);
  ASM_CASES_TAC `n = 3` THEN ASM_REWRITE_TAC[];
    BY(ARITH_TAC);
  FIRST_X_ASSUM_ST `#0.206` MP_TAC;
  ASM_CASES_TAC `n = 4` THEN ASM_REWRITE_TAC[arith `~(4 > 4)`;squanderFace];
    SIMP_TAC[];
    REWRITE_TAC[arith `a >= (b:num) <=> b <= a`;GSYM REAL_OF_NUM_LE];
    BY(REAL_ARITH_TAC);
  ASM_CASES_TAC `n= 5` THEN ASM_REWRITE_TAC[arith `5 > 4`];
    BY(ARITH_TAC);
  ASM_CASES_TAC `n=6` THEN ASM_REWRITE_TAC[arith `6 > 4`];
    BY(ARITH_TAC);
  TYPIFY_GOAL_THEN `n > 4` (unlist REWRITE_TAC);
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  BY(REWRITE_TAC[squanderTarget] THEN ARITH_TAC)
  ]);;
  (* }}} *)

let FINITE_set_of_face_meeting_node = prove_by_refinement(
  `!H x. FINITE (set_of_face_meeting_node H x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[set_of_face_meeting_node];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC FINITE_SUBSET;
  TYPIFY `face_set H` EXISTS_TAC;
  REWRITE_TAC[Hypermap.FINITE_HYPERMAP_ORBITS];
  REWRITE_TAC[SUBSET;IN_ELIM_THM];
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_REWRITE_TAC[GSYM Hypermap.lemma_in_face_set])
  ]);;
  (* }}} *)

let FINITE_set_of_n_meeting_node = prove_by_refinement(
  `!H x. FINITE (set_of_triangles_meeting_node H x) /\ 
    FINITE (set_of_quadrilaterals_meeting_node H x)  /\
   FINITE (set_of_exceptional_meeting_node H x) `,
  (* {{{ proof *)
  [
  REWRITE_TAC[set_of_triangles_meeting_node;set_of_quadrilaterals_meeting_node;set_of_exceptional_meeting_node];
  BY(REPEAT STRIP_TAC THEN MATCH_MP_TAC FINITE_SUBSET THEN TYPIFY `set_of_face_meeting_node H x` EXISTS_TAC THEN REWRITE_TAC[FINITE_set_of_face_meeting_node] THEN REWRITE_TAC[set_of_face_meeting_node;SUBSET;IN_ELIM_THM] THEN MESON_TAC[])
  ]);;
  (* }}} *)

let set_of_n_meeting_node_union = prove_by_refinement(
  `!H x. tame_9a H ==> set_of_face_meeting_node H x = set_of_triangles_meeting_node H x UNION set_of_quadrilaterals_meeting_node H x UNION set_of_exceptional_meeting_node H x`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC THEN REWRITE_TAC[EXTENSION;IN_ELIM_THM;set_of_triangles_meeting_node;set_of_quadrilaterals_meeting_node;set_of_exceptional_meeting_node;set_of_face_meeting_node;IN_UNION];
  REWRITE_TAC[OR_EXISTS_THM];
  X_GENv_TAC "u";
  TYPIFY `!y. y IN dart H ==> CARD (face H y) >= 3` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[tame_9a]);
  TYPIFY `!n. n >= 3 <=> (n = 3 \/ n = 4 \/ n >= 5)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ARITH_TAC);
  REWRITE_TAC[Geomdetail.EQ_EXPAND];
  CONJ_TAC THEN REPEAT WEAKER_STRIP_TAC;
    TYPIFY `CARD (face H y) = 3 \/ CARD (face H y) = 4 \/ CARD (face H y) >= 5` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[]);
    BY(TYPIFY `y` EXISTS_TAC THEN ASM_REWRITE_TAC[]);
  TYPIFY `y` EXISTS_TAC THEN ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let b_tame_explicit = prove_by_refinement(
  `b_tame 0 3 = #0.618 /\ b_tame 0 4 = #0.97 /\ 
   b_tame 1 2 = #0.656 /\ b_tame 1 3 = #0.618 /\
   b_tame 2 1 = #0.797 /\ b_tame 2 2 = #0.412 /\ b_tame 2 3 = #1.2851 /\ 
   b_tame 3 1 = #0.311 /\ b_tame 3 2 = #0.817 /\
   b_tame 4 0 = #0.347 /\ b_tame 4 1 = #0.366 /\
   b_tame 5 0 = #0.04 /\ b_tame 5 1 = #1.136 /\
   b_tame 6 0 = #0.686 /\ b_tame 7 0 = #1.450 /\
  (!p q. ~((p,q)=(0,3)) /\ ~((p,q)=(0,4)) /\
~((p,q)=(1,2)) /\ ~((p,q)=(1,3)) /\
~((p,q)=(2,1)) /\ ~((p,q)=(2,2)) /\ ~((p,q)=(2,3)) /\
~((p,q)=(3,1)) /\ ~((p,q)=(3,2)) /\
~((p,q)=(4,0)) /\ ~((p,q)=(4,1)) /\
~((p,q)=(5,0)) /\ ~((p,q)=(5,1)) /\
~((p,q)=(6,0)) /\ ~((p,q)=(7,0)) ==> b_tame p q = tgt)
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[b_tame;PAIR_EQ] THEN NUM_REDUCE_TAC;
  BY(REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let squanderVertex_explicit = prove_by_refinement(
  `squanderVertex 0 3 = 6177 /\ squanderVertex 0 4 = 9696 /\ 
   squanderVertex 1 2 = 6557 /\ squanderVertex 1 3 = 6176 /\
   squanderVertex 2 1 = 7967 /\ squanderVertex 2 2 = 4116 /\ squanderVertex 2 3 = 12846 /\ 
   squanderVertex 3 1 = 3106 /\ squanderVertex 3 2 = 8165 /\
   squanderVertex 4 0 = 3466 /\ squanderVertex 4 1 = 3655 /\
   squanderVertex 5 0 =  395 /\ squanderVertex 5 1 =11354 /\
   squanderVertex 6 0 = 6854 /\ squanderVertex 7 0 =14493 /\
  (!p q. ~((p,q)=(0,3)) /\ ~((p,q)=(0,4)) /\
~((p,q)=(1,2)) /\ ~((p,q)=(1,3)) /\
~((p,q)=(2,1)) /\ ~((p,q)=(2,2)) /\ ~((p,q)=(2,3)) /\
~((p,q)=(3,1)) /\ ~((p,q)=(3,2)) /\
~((p,q)=(4,0)) /\ ~((p,q)=(4,1)) /\
~((p,q)=(5,0)) /\ ~((p,q)=(5,1)) /\
~((p,q)=(6,0)) /\ ~((p,q)=(7,0)) ==> squanderVertex p q = squanderTarget)
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[squanderVertex;PAIR_EQ] THEN NUM_REDUCE_TAC;
  BY(REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let vertextypes_explicit = prove_by_refinement(
  `!H w x p q. total_weight H w < tgt /\ tame_9a H /\ adm_1 H w /\ adm_2 H w /\ x IN dart H /\
    CARD(set_of_exceptional_meeting_node H x) = 0 /\
    CARD (set_of_triangles_meeting_node H x) = p /\ CARD (set_of_quadrilaterals_meeting_node H x) = q ==>
   ( ((p,q)=(0,3)) \/ ((p,q)=(0,4)) \/
((p,q)=(1,2)) \/ ((p,q)=(1,3)) \/
((p,q)=(2,1)) \/ ((p,q)=(2,2)) \/ ((p,q)=(2,3)) \/
((p,q)=(3,1)) \/ ((p,q)=(3,2)) \/
((p,q)=(4,0)) \/ ((p,q)=(4,1)) \/
((p,q)=(5,0)) \/ ((p,q)=(5,1)) \/
((p,q)=(6,0)) \/ ((p,q)=(7,0))    ) `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  PROOF_BY_CONTR_TAC;
  RULE_ASSUM_TAC(REWRITE_RULE[DE_MORGAN_THM]);
  TYPIFY `b_tame p q = tgt` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[b_tame_explicit]);
  FIRST_X_ASSUM_ST `0,3` kill;
  TYPIFY `b_tame p q <= total_weight H w` ENOUGH_TO_SHOW_TAC;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  REPEAT (FIRST_X_ASSUM_ST `tgt` kill);
  REWRITE_TAC[total_weight];
  RULE_ASSUM_TAC (REWRITE_RULE[adm_2]);
  FIRST_X_ASSUM (C INTRO_TAC [`x`]) THEN ASM_REWRITE_TAC[];
  TYPIFY `sum (set_of_face_meeting_node H x) w <= sum (face_set H) w` ENOUGH_TO_SHOW_TAC;
    BY(REAL_ARITH_TAC);
  MATCH_MP_TAC SUM_SUBSET_SIMPLE;
  REWRITE_TAC[Hypermap.FINITE_HYPERMAP_ORBITS];
  CONJ2_TAC;
    REWRITE_TAC[IN_DIFF];
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC wt_floor_nn [`H`;`w`];
    BY(ASM_MESON_TAC[Hypermap.lemma_face_representation]);
  REWRITE_TAC[set_of_face_meeting_node;SUBSET;IN_ELIM_THM;];
  BY(MESON_TAC[Hypermap.lemma_in_face_set])
  ]);;
  (* }}} *)

let no_except_empty = prove_by_refinement(
  `!H x. CARD(set_of_exceptional_meeting_node H x) = 0  ==>
     set_of_exceptional_meeting_node H x = {}`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC (GSYM CARD_EQ_0);
  BY(ASM_REWRITE_TAC[FINITE_set_of_n_meeting_node])
  ]);;
  (* }}} *)

let no_except_wfloor = prove_by_refinement(
  `!H w x. CARD (set_of_exceptional_meeting_node H x) = 0 /\ x IN dart H ==>
      wt_floor w (face H x) = nfloor 10000 (w (face H x))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[wt_floor];
  REWRITE_TAC[arith `!n. n > 4 <=> n >= 5`];
  COND_CASES_TAC;
    FIRST_X_ASSUM (MP_TAC o MATCH_MP no_except_empty);
    REWRITE_TAC[GSYM NOT_EXISTS_THM;NOT_IN_EMPTY;IN_ELIM_THM;EXTENSION;set_of_exceptional_meeting_node];
    REPEAT WEAKER_STRIP_TAC;
    PROOF_BY_CONTR_TAC;
    FIRST_X_ASSUM kill;
    FIRST_X_ASSUM MP_TAC THEN REWRITE_TAC[];
    TYPIFY `face H x` EXISTS_TAC;
    TYPIFY `x` EXISTS_TAC THEN ASM_REWRITE_TAC[];
    BY(REWRITE_TAC[Hypermap.node_refl]);
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

(* was set_of_exceptional_meeting_node_transfer *)

let set_of_exceptional_meeting_node_identity = prove_by_refinement(
  `!x y. x IN dart H /\ y IN node H x ==> set_of_exceptional_meeting_node H x = set_of_exceptional_meeting_node H y`,
  (* {{{ proof *)
  [
  REWRITE_TAC[set_of_exceptional_meeting_node;EXTENSION;IN_ELIM_THM];
  BY(MESON_TAC[Hypermap.lemma_node_identity])
  ]);;
  (* }}} *)

let adm_2_floor_adm_2 = prove_by_refinement(
  `!H w. tame_9a H /\ adm_1 H w /\ adm_2 H w /\ total_weight H w < tgt ==> adm_2_floor H (wt_floor w)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC wt_floor_nn [`H`;`w`] THEN ASM_REWRITE_TAC[];
  INTRO_TAC vertextypes_explicit [`H`;`w`] THEN ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM MP_TAC);
  REWRITE_TAC[adm_2;adm_2_floor];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `face` MP_TAC;
  REPEAT (FIRST_X_ASSUM (C INTRO_TAC [`x`])) THEN ASM_REWRITE_TAC[];
  INTRO_TAC FINITE_set_of_face_meeting_node [`H`;`x`] THEN DISCH_TAC;
  TYPED_ABBREV_TAC `p = CARD (set_of_triangles_meeting_node H x)`;
  TYPED_ABBREV_TAC `q = CARD (set_of_quadrilaterals_meeting_node H x)`;
  INTRO_TAC FINITE_set_of_n_meeting_node [`H`;`x`] THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`p`;`q`]) THEN REWRITE_TAC[] THEN REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[arith `(n:num) >= m <=> m <= n`];
  REWRITE_TAC[GSYM REAL_OF_NUM_LE];
  GMATCH_SIMP_TAC REAL_OF_NUM_SUM;
  ASM_REWRITE_TAC[];
  TYPIFY `&(squanderVertex p q) + &p + &q <= sum (set_of_face_meeting_node H x) (\x. &(wt_floor w x)) + &p + &q` ENOUGH_TO_SHOW_TAC;
    BY(REAL_ARITH_TAC);
  MATCH_MP_TAC REAL_LE_TRANS;
  TYPIFY `b_tame p q * &10000` EXISTS_TAC;
  CONJ_TAC;
    BY(FIRST_X_ASSUM MP_TAC THEN REWRITE_TAC[PAIR_EQ] THEN REPEAT STRIP_TAC THEN ASM_REWRITE_TAC[squanderVertex_explicit;b_tame_explicit] THEN TRY REAL_ARITH_TAC);
  FIRST_X_ASSUM kill;
  MATCH_MP_TAC REAL_LE_TRANS;
  TYPIFY `sum (set_of_face_meeting_node H x) w * &10000` EXISTS_TAC;
  CONJ_TAC;
    BY(REPLICATE_TAC 2 (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  REWRITE_TAC[GSYM SUM_RMUL];
  MATCH_MP_TAC REAL_LE_TRANS;
  TYPIFY `sum (set_of_face_meeting_node H x) (\x. &(wt_floor w x) + &1)` EXISTS_TAC;
  CONJ_TAC;
    MATCH_MP_TAC SUM_LE;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[set_of_face_meeting_node;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
    ASM_SIMP_TAC[no_except_wfloor];
    GMATCH_SIMP_TAC no_except_wfloor;
    ASM_REWRITE_TAC[];
    CONJ_TAC;
      BY(ASM_MESON_TAC[set_of_exceptional_meeting_node_identity]);
    INTRO_TAC nfloor [`10000`;`w (face H y)`];
    ANTS_TAC;
      BY(ASM_MESON_TAC[]);
    BY(REAL_ARITH_TAC);
  GMATCH_SIMP_TAC SUM_ADD;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC (arith `b <= c ==> a + b <= a + c`);
  ASM_SIMP_TAC[GSYM CARD_EQ_SUM];
  ASM_SIMP_TAC[set_of_n_meeting_node_union];
  ASM_SIMP_TAC[no_except_empty];
  REWRITE_TAC[UNION_EMPTY];
  EXPAND_TAC "p";
  EXPAND_TAC "q";
  REWRITE_TAC[REAL_OF_NUM_ADD];
  REWRITE_TAC[ REAL_OF_NUM_LE];
  MATCH_MP_TAC CARD_UNION_LE;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let adm_3_floor_adm_3 = prove_by_refinement(
  `!H w. tame_9a H /\ adm_1 H w /\ adm_3 H w ==> adm_3_floor H (wt_floor w)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[adm_3;adm_3_floor];
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC wt_floor_nn [`H`;`w`] THEN ASM_REWRITE_TAC[];
  REPEAT (FIRST_X_ASSUM (C INTRO_TAC [`x`])) THEN ASM_REWRITE_TAC[];
  INTRO_TAC FINITE_set_of_n_meeting_node [`H`;`x`] THEN REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[arith `(n:num) >= m <=> m <= n`];
  REWRITE_TAC[GSYM REAL_OF_NUM_LE];
  GMATCH_SIMP_TAC REAL_OF_NUM_SUM;
  ASM_REWRITE_TAC[];
  TYPIFY `CARD (set_of_triangles_meeting_node H x) = 5` (C SUBGOAL_THEN ASSUME_TAC);
    BY(FIRST_X_ASSUM_ST `type_of_node` MP_TAC THEN ASM_SIMP_TAC[type_of_node;PAIR_EQ]);
  TYPIFY `&excessTCount + &5 <= sum (set_of_triangles_meeting_node H x) (\x. &(wt_floor w x)) + &5` ENOUGH_TO_SHOW_TAC;
    BY(REAL_ARITH_TAC);
  MATCH_MP_TAC REAL_LE_TRANS;
  TYPIFY `a_tame * &10000` EXISTS_TAC;
  CONJ_TAC;
    BY(REWRITE_TAC[excessTCount;a_tame] THEN REAL_ARITH_TAC);
  MATCH_MP_TAC REAL_LE_TRANS;
  TYPIFY `sum (set_of_triangles_meeting_node H x) w * &10000` EXISTS_TAC;
  CONJ_TAC;
    BY(REPLICATE_TAC 3 (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  REWRITE_TAC[GSYM SUM_RMUL];
  MATCH_MP_TAC REAL_LE_TRANS;
  TYPIFY `sum (set_of_triangles_meeting_node H x) (\x. &(wt_floor w x) + &1)` EXISTS_TAC;
  CONJ_TAC;
    MATCH_MP_TAC SUM_LE;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[set_of_triangles_meeting_node;IN_ELIM_THM];
    REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
    REWRITE_TAC[wt_floor];
    ASM_SIMP_TAC[arith `~(3 > 4)`];
    INTRO_TAC nfloor [`10000`;`w (face H y)`];
    ANTS_TAC;
      BY(ASM_MESON_TAC[]);
    BY(REAL_ARITH_TAC);
  GMATCH_SIMP_TAC SUM_ADD;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC (arith `b <= c ==> a + b <= a + c`);
  ASM_SIMP_TAC[GSYM CARD_EQ_SUM];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let tame_13_a_floor_tame_13_a = prove_by_refinement(
  `!H. tame_13a H /\ tame_9a H ==> tame_13a_floor H`,
  (* {{{ proof *)
  [
  REWRITE_TAC[tame_13a;tame_13a_floor;admissible_weight];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `wt_floor w` EXISTS_TAC;
  ASM_SIMP_TAC[adm_3_floor_adm_3;adm_2_floor_adm_2;adm_1_floor_adm_1];
  BY(ASM_SIMP_TAC[total_weight_floor])
  ]);;
  (* }}} *)

let sumn_cons = prove_by_refinement(
  `!h hs. sumn (h::hs) = h + sumn hs`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[Seq.sumn;Seq.foldr])
  ]);;
  (* }}} *)

let sumn_nsum = prove_by_refinement(
  `!(s:(A)list) f. uniq s ==> sumn (map f s) = nsum (set_of_list s) f`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[GSYM REAL_OF_NUM_EQ];
  GMATCH_SIMP_TAC REAL_OF_NUM_SUM;
  REWRITE_TAC[FINITE_SET_OF_LIST];
  ASM_SIMP_TAC[ (GSYM Seq2.list_sum_set_of_list)];
  FIRST_X_ASSUM kill;
  SPEC_TAC (`s:(A)list`,`s:(A)list`);
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[Seq2.list_sum_nil;Seq.sumn0;Seq.map]);
  BY(ASM_REWRITE_TAC[Seq.map;Seq2.list_sum_cons;sumn_cons;GSYM REAL_OF_NUM_ADD])
  ]);;
  (* }}} *)

let uniq_facesAt_list = prove_by_refinement(
  `!L v. good_list L ==> uniq (facesAt_list L v)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[facesAt_list];
  REWRITE_TAC[GSYM filter_FILTER];
  MATCH_MP_TAC Seq.filter_uniq;
  BY(ASM_MESON_TAC[List_hypermap.good_list_uniq])
  ]);;
  (* }}} *)

let BIJ_NSUM = prove_by_refinement(
  `!A B f (ab:A->B). FINITE A /\ BIJ ab A B ==> nsum A (f o ab) = nsum B f`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `FINITE B` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[ Misc_defs_and_lemmas.FINITE_BIJ]);
  FIRST_X_ASSUM (MP_TAC o MATCH_MP Basics.BIJ_SUM);
  DISCH_TAC;
  REWRITE_TAC[GSYM REAL_OF_NUM_EQ];
  ASM_SIMP_TAC[REAL_OF_NUM_SUM];
  FIRST_X_ASSUM (C INTRO_TAC [`(\x. &(f x))`]);
  DISCH_THEN (SUBST1_TAC o GSYM);
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  BY(REWRITE_TAC[FUN_EQ_THM;o_THM])
  ]);;
  (* }}} *)

let tame13a_correspondence = prove_by_refinement(
 `!L:((A)list)list.    good_list L /\ 
   good_list_nodes L  /\
   all uniq L /\
   tame_9a (hypermap_of_list L) /\
   tame_13a (hypermap_of_list L) 
   ==>
  tame13a_list L`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `tame_13a_floor (hypermap_of_list L)` (C SUBGOAL_THEN MP_TAC);
    BY(ASM_SIMP_TAC[tame_13_a_floor_tame_13_a]);
  REWRITE_TAC[tame_13a_floor];
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `w' = w o set_of_list o list_pairs`;
  REWRITE_TAC[tame13a_list];
  TYPIFY `w'` EXISTS_TAC;
  COMMENT "adm1";
  CONJ_TAC;
    REWRITE_TAC[admissible1_list];
    RULE_ASSUM_TAC (REWRITE_RULE[adm_1_floor]);
    REPEAT WEAKER_STRIP_TAC;
    EXPAND_TAC "w'" THEN REWRITE_TAC[o_THM];
    INTRO_TAC List_hypermap.mem_face_lemma [`list_pairs f`;`L`];
    ASM_REWRITE_TAC[];
    TYPIFY `MEM (list_pairs f) (list_of_faces L)` (C SUBGOAL_THEN ASSUME_TAC);
      REWRITE_TAC[List_hypermap.list_of_faces];
      BY(MATCH_MP_TAC MEMf_MAP THEN ASM_REWRITE_TAC[]);
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`d`]);
    ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
    ASM_SIMP_TAC[List_hypermap.card_face_of_list];
    ASM_SIMP_TAC[List_hypermap.face_of_list];
    FIRST_X_ASSUM (SUBST1_TAC o GSYM);
    REWRITE_TAC[List_hypermap.size_list_pairs];
    REWRITE_TAC[Seq.size];
    BY(ARITH_TAC);
  COMMENT "total_weight";
  nCONJ_TAC 2;
    TYPIFY `sumn (map w' L) = nsum (face_set (hypermap_of_list L)) w` ENOUGH_TO_SHOW_TAC;
      BY(REPLICATE_TAC 2 (FIRST_X_ASSUM MP_TAC) THEN REWRITE_TAC[Seq.map_MAP] THEN ARITH_TAC);
    GMATCH_SIMP_TAC List_hypermap.face_set_eq_list;
    ASM_REWRITE_TAC[];
    GMATCH_SIMP_TAC (GSYM sumn_nsum);
    ASM_SIMP_TAC[List_hypermap.uniq_faces_of_list];
    REWRITE_TAC[List_hypermap.faces_of_list;List_hypermap.list_of_faces];
    BY(ASM_REWRITE_TAC[Seq.map_MAP;GSYM MAP_o]);
  ASM_REWRITE_TAC[];
  COMMENT "adm2";
  CONJ_TAC;
    REWRITE_TAC[admissible2_list] THEN RULE_ASSUM_TAC(REWRITE_RULE[adm_2_floor]);
    REPEAT WEAKER_STRIP_TAC;
    TYPIFY `?f. MEM v f /\ MEM f L` (C SUBGOAL_THEN MP_TAC);
      FIRST_X_ASSUM_ST `IN` MP_TAC THEN REWRITE_TAC[List_hypermap.elements_of_list;IN_SET_OF_LIST;List_hypermap.list_of_elements];
      REWRITE_TAC[Seq.mem_undup;Seq2.mem_flatten];
      BY(MESON_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    INTRO_TAC dart_of [`L`;`f`;`v`];
    ASM_REWRITE_TAC[];
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`dart_of L f v`]);
    ANTS_TAC;
      ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
      BY(ASM_SIMP_TAC[card_set_of_n_meeting_node_pqr]);
    ASM_SIMP_TAC[card_set_of_n_meeting_node_pqr];
    TYPIFY `sumn (MAP w' (facesAt_list L v)) = nsum (set_of_face_meeting_node (hypermap_of_list L) (dart_of L f v)) w` ENOUGH_TO_SHOW_TAC;
      BY(ARITH_TAC);
    REWRITE_TAC[GSYM Seq.map_MAP];
    GMATCH_SIMP_TAC sumn_nsum;
    ASM_SIMP_TAC[uniq_facesAt_list];
    EXPAND_TAC "w'";
    GMATCH_SIMP_TAC BIJ_NSUM;
    TYPIFY `(set_of_face_meeting_node (hypermap_of_list L) (dart_of L f v))` EXISTS_TAC;
    REWRITE_TAC[FINITE_SET_OF_LIST];
    INTRO_TAC set_of_n_meeting_node [`predT:num->bool`;`L`;`dart_of L f v`];
    TYPIFY `(\f:(A)list. predT (LENGTH f)) = predT` (C SUBGOAL_THEN SUBST1_TAC);
      BY(REWRITE_TAC[FUN_EQ_THM;Ssrbool.predT]);
    REWRITE_TAC[Seq.filter_predT];
    ASM_REWRITE_TAC[];
    BY(REWRITE_TAC[set_of_face_meeting_node;Ssrbool.predT]);
  COMMENT "adm_3";
  REWRITE_TAC[admissible3_list] THEN RULE_ASSUM_TAC(REWRITE_RULE[adm_3_floor]);
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `?f. MEM v f /\ MEM f L` (C SUBGOAL_THEN MP_TAC);
    FIRST_X_ASSUM_ST `IN` MP_TAC THEN REWRITE_TAC[List_hypermap.elements_of_list;IN_SET_OF_LIST;List_hypermap.list_of_elements];
    REWRITE_TAC[Seq.mem_undup;Seq2.mem_flatten];
    BY(MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dart_of [`L`;`f`;`v`];
  ASM_REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`dart_of L f v`]);
  ANTS_TAC;
    ASM_SIMP_TAC[dart_hypermap_of_list;IN_SET_OF_LIST];
    BY(ASM_SIMP_TAC[type_of_node_vertextype]);
  ASM_SIMP_TAC[card_set_of_n_meeting_node_pqr];
  TYPIFY `sumn (MAP w' (FILTER (\f. LENGTH f = 3) (facesAt_list L v))) = nsum (set_of_triangles_meeting_node (hypermap_of_list L) (dart_of L f v)) w` ENOUGH_TO_SHOW_TAC;
    BY(ARITH_TAC);
  REWRITE_TAC[GSYM Seq.map_MAP];
  GMATCH_SIMP_TAC sumn_nsum;
  ASM_SIMP_TAC[GSYM filter_FILTER;Seq.filter_uniq;uniq_facesAt_list];
  EXPAND_TAC "w'";
  GMATCH_SIMP_TAC BIJ_NSUM;
  TYPIFY `(set_of_triangles_meeting_node (hypermap_of_list L) (dart_of L f v))` EXISTS_TAC;
  REWRITE_TAC[FINITE_SET_OF_LIST];
  INTRO_TAC set_of_n_meeting_node [`\n. n = 3`;`L`;`dart_of L f v`];
  ASM_REWRITE_TAC[];
  BY(REWRITE_TAC[set_of_triangles_meeting_node])
  ]);;
  (* }}} *)

let tame_correspondence1 = prove_by_refinement(
  `!g. good_graph g /\
     tame_9a (hypermap_of_list (fgraph g)) /\
     tame_10 (hypermap_of_list (fgraph g)) /\
     tame_11a (hypermap_of_list (fgraph g)) /\
     tame_11b (hypermap_of_list (fgraph g)) /\
     tame_12o (hypermap_of_list (fgraph g)) /\
     tame_13a (hypermap_of_list (fgraph g)) ==>
      tame g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Import_tame_classification.tame];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_ASSUM_ST `good_graph` MP_TAC;
  REWRITE_TAC[good_graph] THEN REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[tame9a_correspondence;tame10_correspondence];
  TYPIFY `tame11a_list (fgraph g) /\ tame11b_list (fgraph g) /\ tame12o_list (fgraph g) /\ tame13a_list (fgraph g)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_SIMP_TAC[tame13a_correspondence;tame11_correspondence;tame12o_correspondence]);
  ASM_SIMP_TAC[tame11a_good_graph];
  ASM_SIMP_TAC[tame11b_list_tame11b];
  ASM_SIMP_TAC[tame12o_list_tame12o];
  BY(ASM_SIMP_TAC[tame13a_list_tame13a])
  ]);;
  (* }}} *)

let tame_correspondence_iso = prove_by_refinement(
  `!g H:(A)hypermap. good_graph g /\ tame_hypermap H /\ 
    iso H (hypermap_of_list (fgraph g)) ==>
    tame g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[tame_hypermap];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC tame_correspondence1;
  FIRST_X_ASSUM (MP_TAC o MATCH_MP Hypermap_iso.iso_imp_hyp_iso) THEN REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  BY(ASM_MESON_TAC[Oxaxucs.tame9a_iso;Oxaxucs.tame10_iso;Oxaxucs.tame11a_iso;Oxaxucs.tame11b_iso;Oxaxucs.tame12o_iso;Oxaxucs.tame13a_iso;])
  ]);;
  (* }}} *)

let WMLNYMD = tame_correspondence_iso;;

 end;;
