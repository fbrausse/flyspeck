(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Hojodcm= struct

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;


open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;
open Pbflhet;;
open Kbwpbhq;;


let f_eq_next_el_x_v0=prove( `!L N r (x:A#A). 
         good_list L /\
         good_list_nodes L /\ marked_list L N r x
==>  f_list L x = next_el (rotate_to r x) x`,
REPEAT RESA_TAC
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep;]
THEN DICH_ASM_TAC(10-3)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC next_el_rotate_to_eq[`x`;`r`]);;





let ytrans_mem_rtrans_v0=prove( `!L N r (x:A#A). 
         good_list L /\
         good_list_nodes L /\
marked_list L N r x
/\ ~(final_list L r)
==> MEM (ytrans L N r x 0) r`,
REPEAT RESA_TAC
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep;]
THEN REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC f_eq_next_el_x_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC l_y_rep_power[`L`;`r`;`x`][GSYM Tame_list.POWER_TO_ITER]
THEN MATCH_MP_TAC MEM_POWER_NEXT_EL
THEN DICH_ASM_TAC(13-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]);;




let mem_ztrans_rtrans_v0=prove( `!L N r (x:A#A). 
         good_list L /\
         good_list_nodes L /\
marked_list L N r x
/\ ~(final_list L r)
==> MEM (ztrans L N r x 0) r`,

REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN MP_TAC f_eq_next_el_x_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN GABBREV_TAC`y=(l'y L r x)`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`N`;`r`;`x`;][LET_THM;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]);;




let z_not_eq_ytrans_v0=prove(`!L N r (x:A#A). 
         good_list L /\
         good_list_nodes L /\
marked_list L N r x
/\ ~(final_list L r)
==> ~(ztrans L N r x 0 = ytrans L N r x 0)`,
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.l_y;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`y=(l'y L r x)`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`N`;`r`;`x`;][LET_THM]
THEN THAYTHEL_ASM_TAC 0[`SUC (l'm L r x)`;][LET_THM;ARITH_RULE`1<=SUC a/\ SUC a<= SUC a`;POWER;o_DEF;I_DEF]);;




let in_rtrans_suc_not_rtrans_new_v0=prove(`!L N d r (x:A#A). good_list L /\ good_list_nodes L/\
marked_list L N r x /\
   find_face L x=f /\
   next_el f x=w /\
~final_list L r/\
   MEM d (rtrans L N r x (SUC 0)) /\
 ~(MEM d r)
   ==> MEM d (betwn f (ytrans L N r x 0) (ztrans L N r x 0))`,
REPEAT GEN_TAC
THEN STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_ASM_TAC (6-2)[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(18-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MRESAL_TAC ytran_me_f[`L`;`N`;`r`;`x`;`f`;`0`][Tame_defs2.ytrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(34-17)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN DICH_TAC(34-6)
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(33-30)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`]);;



let mem_ytrans_list_of_darts_v0=prove( `!L N r (x:A#A). 
         good_list L /\
         good_list_nodes L /\
marked_list L N r x
/\ ~(final_list L r)
==> MEM (ytrans L N r x 0) (list_of_darts L)`,

REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`y=(l'y L r x)`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`N`;`r`;`x`;][LET_THM;Tame_defs2.l_z]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.l_z;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_ASM_TAC (15-5)[Tame_defs2.normal_list]
THEN DICH_TAC (1)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`y`][Tame_defs2.loop_list]);;


let ztran_in_face_ytrans_v0=prove(`!L N r (x:A#A).
         good_list L /\
         good_list_nodes L 
 /\ marked_list L N r x
/\ ~(final_list L r)
==> MEM (ztrans L N r x 0)  (find_face L (ytrans L N r x 0))`,
REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`y=(l'y L r x)`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`N`;`r`;`x`;][LET_THM;Tame_defs2.l_z]
THEN MATCH_MP_TAC mem_f_list_power
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(15)[List_hypermap.good_list]
);;



let  ztran_me_f_v0=prove(`!L N r (x:A#A).
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\
    f = find_face L x /\ ~final_list L r ==>
    MEM (ztrans L N r x 0) f`,

REPEAT RESA_TAC
THEN MRESA_TAC ytran_me_f[`L`;`N`;`r`;`x`;`f`;`0`]
THEN DICH_ASM_TAC(6-1)[List_hypermap.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`ytrans L N r x 0`;`x`;`L`]
THEN MP_TAC ztran_in_face_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;]);;



let indexf_ytrans_eq_l_m_v0=prove(  
`!L N r(x:A#A) f w. ~(final_list L r)/\ 
         good_list L /\
         good_list_nodes L /\
	marked_list L N r x /\
    f = find_face L x /\
    w = next_el f x ==>
    indexf w (ytrans L N r x 0) f = (l'm L r x)`,

REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN DICH_ASM_TAC 2[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z=prev_el r (ztrans L N r x 0)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN DICH_ASM_TAC(15-1)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESA_TAC mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC ytran_me_f[`L`;`N`;`r`;`x`;`f`;`0`]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(l'm L r x)`][POWER;o_DEF]
THEN SYM_DICH_TAC 0
THEN EXPAND_TAC"y"
THEN REWRITE_TAC[Tame_defs2.l_y;POWER;o_DEF]
THEN MRESAL_TAC(ARITH_RULE`!b a :num. a<=b\/ b<a`)[`l'm L r x`;`sizel (find_face L x)`][Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(l'm L r x)`][COM_POWER;o_DEF]
THEN MRESAL_TAC min_not_eq_imp_eq[`l'm L r x`;`f_list L`;`next_el r`;`x`][Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN ASM_TAC
THEN STRIP_TAC
THEN REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN REPEAT RESA_TAC
THEN DICH_ASM_TAC(26-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC next_el_rotate_to_eq[`x`;`r`]
THEN GABBREV_TAC`k=min_num
 {m | ~((next_el r POWER SUC (SUC m)) x =
        f_list L ((next_el r POWER SUC m) x))}`
THEN DICH_TAC(39-31)
THEN SYM_DICH_TAC 1
THEN MP_TAC ztran_me_f_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`indexf x (ztrans L N r x 0) (find_face L x)`][COM_POWER;o_DEF]
THEN MRESAL_TAC Tame_list.indexf_n[`x`;`(ztrans L N r x 0)`;`f`][GSYM List_hypermap.dart_in_face]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ 0<a`)[`indexf x (ztrans L N r x 0) (find_face L x)`]
THENL[

ASM_REWRITE_TAC[POWER;I_DEF;o_DEF;]
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`N`;`r`;`x`;][LET_THM]
THEN THAYTHEL_TAC 0[`sizel (find_face L x)`][ARITH_RULE`1<=a<=> 0<a`;Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN ASM_REWRITE_TAC[POWER;I_DEF;o_DEF;Tame_defs2.ztrans;GSYM sizel0_not_nil]
THEN MRESAL_TAC Dangeyj.mem_imp_not_nil[`find_face L x`;`(ytrans L N r x 0)`][sizel0_not_nil]
THEN MRESA_TAC (ARITH_RULE`!a b. a<=b==>a<= SUC b`)[`sizel (find_face L x)`;`k`]
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`PRE (sizel (find_face L x))`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`sizel (find_face L x)`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MRESA_TAC (ARITH_RULE`!a b. SUC a<=b==> a<= b`)[`PRE(sizel (find_face L x))`;`k`]
THEN DICH_TAC 3
THEN MRESA_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`sizel (find_face L x)`]
THEN MRESAL_TAC Pwssrat.next_el_sizel[`x`;`(find_face L x)`][GSYM List_hypermap.dart_in_face]
THEN DICH_TAC (45-37)
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN SET_TAC[];

MRESAL_TAC Tame_list.indexf_lt_sizel[`(find_face L x)`;`x`;`(ztrans L N r x 0)`;][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf x (ztrans L N r x 0) (find_face L x)`][ARITH_RULE`1<=a<=> 0<a`]
THEN MRESA_TAC(ARITH_RULE`!a b c. SUC a<b/\ b<=c==>a<=c/\ SUC a<=SUC c`)[`PRE(indexf x (ztrans L N r x 0) (find_face L x))`;`sizel (find_face L x)`;`k`]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`N`;`r`;`x`;][LET_THM]
THEN THAYTHEL_TAC 0[`SUC(PRE(indexf x (ztrans L N r x 0) (find_face L x)))`][ARITH_RULE`1<=a<=> 0<a`;Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN ASM_REWRITE_TAC[POWER;I_DEF;o_DEF;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
]);;






let PPLHULJ3_v0= prove( `!L N r(x:A#A).  
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ ~final_list L r/\
    f = find_face L x /\
    w = next_el f x ==>
    indexf w (ytrans L N r x 0) f < indexf w (ztrans L N r x 0) f`,
REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN DICH_ASM_TAC 3[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z=prev_el r (ztrans L N r x 0)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MP_TAC indexf_ytrans_eq_l_m_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN MP_TAC ztran_me_f_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(20-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(24)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESAL_TAC Seq2.mem_next_el[`x`;`(find_face L x)`][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.indexf_n[`next_el (find_face L x) x`;`(ztrans L N r x 0)`;`f`][GSYM List_hypermap.dart_in_face]
THEN GABBREV_TAC`k=indexf (next_el (find_face L x) x) (ztrans L N r x 0) (find_face L x)`
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(k)`][POWER;o_DEF;Tame_defs2.ztrans]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!b a :num. a<=b\/ b<a`)[`l'm L r x`;`k`]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`N`;`r`;`x`;][LET_THM]
THEN THAYTHEL_TAC 0[`SUC k`][ARITH_RULE`1<= SUC a/\ (SUC a<= SUC b<=> a<=b)`;POWER;o_DEF;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
);;




let PPLHULJ_V0_concl = `!L N r (x:A#A) f w.
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ ~final_list L r /\
    f = find_face L x /\
    w = next_el f x ==>
    MEM (ytrans L N r x 0) f /\ MEM (ztrans L N r x 0) f /\
    indexf w (ytrans L N r x 0) f < indexf w (ztrans L N r x 0) f`;;




let PPLHULJ_v0=prove( PPLHULJ_V0_concl,
ASM_SIMP_TAC[PPLHULJ3_v0;ytran_me_f;ztran_me_f_v0]);;





let indexf_in_rtrans_suc_not_rtrans_new1_v0=prove(`!L N d r (x:A#A). 
 good_list L /\ good_list_nodes L/\
marked_list L N r x /\
   find_face L x=f /\
   next_el f x=w /\
~final_list L r/\
   MEM d (rtrans L N r x (SUC 0)) /\
 ~(MEM d r)
   ==> MEM d f/\
indexf w d f< indexf w (ztrans L N r x 0) f
/\ indexf w (ytrans L N r x 0) f< indexf w d f`,

REPEAT GEN_TAC
THEN STRIP_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN DICH_ASM_TAC (7-2)[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MRESAL_TAC in_rtrans_suc_not_rtrans_new_v0[`w`;`f`;`L`;`N`;`d`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC PPLHULJ_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_ASM_TAC(23)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`y`;`d`;`z`;`f`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC (ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y f`;`indexf w z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`] 
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num . a+b=c /\ d+e=b==> e<=c`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.indexf_add_right[`w`;`d`;`z`;`f`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e f:num . a+b=c /\ d+e=b/\ f+e=c/\ 0<d /\ d<b ==> f<c/\ a<f`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`;`indexf w d  f`]
);;







(****************************************)

let HOJODCM1_concl = `!L N N' r r' s x.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  N' = ntrans L N r x 1 /\
  r' = rtrans L N r x 1 /\
  MEM s N' ==> (MEM s N \/ s = r' \/ s = LAST N')`;;


let HOJODCM1=prove_by_refinement( HOJODCM1_concl,
[
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`];

RESA_TAC;

REWRITE_TAC[MEM_APPEND]
THEN RESA_TAC;

MRESAL_TAC Tame_list.MEM_replace[`s`;`r`;`[SND
        (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)
        (prev_el r (l'z L N r x)))]`;`N`][Seq.mem_seq1];

MATCH_MP_TAC(SET_RULE`A==> B\/C\/A`)
THEN ASM_REWRITE_TAC[LAST_APPEND;Ohcgkfu.sing_not_nil;LAST_CLAUSES]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC]);;


let NOT_MEM_REPLACE=prove(`!L. uniq L /\ ~(MEM r s) ==> ~(MEM r (replace r s L))`,

LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_defs.replace;MEM;Seq.uniq]
THEN RESA_TAC
THEN DICH_TAC 3
THEN RESA_TAC
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`h=r`][MEM_APPEND;MEM]
THEN DICH_TAC 4
THEN RESA_TAC);;

let r_not_eq_snd_split_norm=prove_by_refinement( `!L N r x:A#A.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r)
==> ~(r =
   SND
   (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)
   (prev_el r (l'z L N r x))))`,
[
REPEAT GEN_TAC
THEN STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN STRIP_TAC
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(15-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(27-15)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`d=((next_el f) POWER (indexf w (ytrans L N r x 0) f +1) ) w`
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`f`;`indexf w (ytrans L N r x 0) f + 1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`w`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<c==> a+1<c/\ a<=b/\ a+1<= b`)[`indexf w y f`;`indexf w z f`;` sizel f`]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`indexf w (ytrans L N r x 0) f + 1`;`w`;`d`;`f`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`d`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN DICH_TAC(42-34)
THEN ASM_REWRITE_TAC[ARITH_RULE`0<1`];


MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`indexf y z f`];

MRESA_TAC Tame_list.indexf0[`y`;`z`;`f`];


MRESA_TAC Tame_list.indexf1[`y`;`z`;`f`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[ARITH_RULE`a+1=SUC b<=> a=b`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`f`]
THEN MRESAL_TAC(SET_RULE`!a. ~a\/ a`)[`(betwn f y z)=[]`][List_hypermap.mem_not_nil];

MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`x'`;`z`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;

MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN REWRITE_TAC[APPEND_NIL]
THEN STRIP_TAC
THEN ONCE_REWRITE_TAC[SET_RULE`a=b<=>b=a`]
THEN STRIP_TAC;

MRESA_TAC Ncvibwu.next_el_last_hd[`y`;`z`;`(betwn r z y)`]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC Kbwpbhq.KBWPBHQ1[`L`;`N`;`r`;`x`;`y`]
THEN GSUBGOAL_THEN`(?i. ytrans L N r x i = y /\ i < transform_count L N r x)`MP_TAC;


GEXISTS_TAC`0`
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC(ARITH_RULE`!a. a=0 \/ 0<a`)[`transform_count L N r x`];

MRESAL_TAC Kbwpbhq.final_list_transform_count[`0`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;];

ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`y`]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF];

STRIP_TAC
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESAL_TAC Kbwpbhq.CASES1[`0`;`w`;`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;ARITH_RULE`a<a+1`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[ARITH_RULE`a+b<a+c<=>b<c:num`]
THEN MATCH_MP_TAC Ssrbool.contraNN
THEN RESA_TAC
THEN POP_ASSUM( fun th-> ONCE_REWRITE_TAC[th;])
THEN ASM_REWRITE_TAC[MEM_APPEND]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]]);;



let has_flatten_filter=prove(`!t. ~has (\x. MEM x r) (flatten t)
==> ~has (\x. MEM x r) (flatten (filter f t))`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_list.filter_rec;Tame_list.concat_flatten;Seq.cat_uniq;Seq2.APPEND_cat;Seq.has_cat;DE_MORGAN_THM]
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`f h`]
THEN ASM_REWRITE_TAC[Tame_list.filter_rec;Tame_list.concat_flatten;Seq.cat_uniq;Seq2.APPEND_cat;Seq.has_cat;DE_MORGAN_THM]);;


let uniq_flatten_filter=prove(`!L. uniq (flatten L) ==> uniq (flatten (filter f L))`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_list.filter_rec;Tame_list.concat_flatten;Seq.cat_uniq;Seq2.APPEND_cat]
THEN RESA_TAC
THEN DICH_TAC 3
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`f h`]
THEN ASM_REWRITE_TAC[Tame_list.filter_rec;Tame_list.concat_flatten;Seq.cat_uniq;Seq2.APPEND_cat;has_flatten_filter]
THEN MATCH_MP_TAC has_flatten_filter
THEN ASM_REWRITE_TAC[]);;


let NOT_MEM_FILTER=prove(`!l. ~(MEM x l) ==> (filter (\t. t = x) l)=[]`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_list.filter_rec;Tame_list.concat_flatten;Seq.cat_uniq;Seq2.APPEND_cat;Seq.size_nil;Seq.uniq;Seq.filter_cat;Seq.size_cat;Seq.all;MEM;DE_MORGAN_THM]
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC);;




let filter_uniq=prove(`!l. uniq l /\ (MEM x l) ==> (filter (\t. t = x) l)=[x]`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_list.filter_rec;Tame_list.concat_flatten;Seq.cat_uniq;Seq2.APPEND_cat;Seq.size_nil;Seq.uniq;Seq.filter_cat;Seq.size_cat;Seq.all;MEM;DE_MORGAN_THM]
THEN RESA_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC NOT_MEM_FILTER[`x`;`t`]
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`x`;`t`]);;


let count_node_face=prove(`!L. uniq L /\ all uniq L
==> sizel((filter (\t. t = FST (d:A#A)) (flatten L)))= sizel (filter (MEM (FST d)) L)`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_list.filter_rec;Tame_list.concat_flatten;Seq.cat_uniq;Seq2.APPEND_cat;Seq.size_nil;Seq.uniq;Seq.filter_cat;Seq.size_cat;Seq.all]
THEN RESA_TAC
THEN DICH_TAC 4
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~ A`)[`MEM (FST d) h`]
THENL[

MRESAL_TAC filter_uniq[`FST d`;`h`][Seq2.size1;Seq.size_cons]
THEN ARITH_TAC;
MRESAL_TAC NOT_MEM_FILTER[`FST d`;`h`][Seq.size_nil]
THEN ARITH_TAC]);;




let r_not_eq_fst_split_norm=prove_by_refinement( 
`!L N r x:A#A.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r)
==> ~(r =
   FST
   (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)
   (prev_el r (l'z L N r x))))`,
[
REPEAT GEN_TAC
THEN STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN STRIP_TAC
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(15-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(22-8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(27-15)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`d=((next_el f) POWER (indexf w (ytrans L N r x 0) f +1) ) w`
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`f`;`indexf w (ytrans L N r x 0) f + 1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`w`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<c==> a+1<c/\ a<=b/\ a+1<= b`)[`indexf w y f`;`indexf w z f`;` sizel f`]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`indexf w (ytrans L N r x 0) f + 1`;`w`;`d`;`f`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`d`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN DICH_TAC(42-34)
THEN ASM_REWRITE_TAC[ARITH_RULE`0<1`];




MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`indexf y z f`];


MRESA_TAC Tame_list.indexf0[`y`;`z`;`f`];




MRESA_TAC Tame_list.indexf1[`y`;`z`;`f`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[ARITH_RULE`a+1=SUC b<=> a=b`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`f`]
THEN MRESAL_TAC(SET_RULE`!a. ~a\/ a`)[`(betwn f y z)=[]`][List_hypermap.mem_not_nil];



MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`x'`;`z`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;



MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN REWRITE_TAC[APPEND;REVERSE;Seq.map;Seq.flatten0]
THEN STRIP_TAC
THEN ONCE_REWRITE_TAC[SET_RULE`a=b<=>b=a`]
THEN STRIP_TAC;




MRESAL_TAC Ncvibwu.next_el_last_hd[`z1`;`next_el r y `;`(betwn r (next_el r y ) z1)`][APPEND]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC Kbwpbhq.KBWPBHQ1[`L`;`N`;`r`;`x`;`y`]
THEN GSUBGOAL_THEN`(?i. ytrans L N r x i = y /\ i < transform_count L N r x)`MP_TAC;




GEXISTS_TAC`0`
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC(ARITH_RULE`!a. a=0 \/ 0<a`)[`transform_count L N r x`];



MRESAL_TAC Kbwpbhq.final_list_transform_count[`0`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;];



ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`y`]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF];



STRIP_TAC
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESAL_TAC Kbwpbhq.CASES1[`0`;`w`;`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;ARITH_RULE`a<a+1`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[ARITH_RULE`a+b<a+c<=>b<c:num`]
THEN STRIP_TAC
;



GSUBGOAL_THEN`~( MEM(FST d) (MAP FST r))` ASSUME_TAC
;



REWRITE_TAC[MEM_MAP]
THEN STRIP_TAC
THEN DICH_ASM_TAC(47-5)[Hypermap.is_restricted]
THEN MRESA_TAC Tame_list.simple_hypermap_uniq[`L`]
THEN MRESA_TAC Tame_list.marked_list_split_condition_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESAL_TAC Pwssrat.indexf_ytrans_suc_lp[`f`;`r`;`L`;`N`;`r`;`x`;`0`;`N`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;ARITH_RULE`a<a+1`]
THEN GSUBGOAL_THEN`MEM x' (flatten N)`ASSUME_TAC
;




REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[];



MRESAL_TAC Tame_list.lemma_node_outside_darts_of_family_list[`L`;`N`;`r`;`x`;`x'`;`indexf y d f`][ARITH_RULE`1< SUC 1 /\ (1<=a <=>1< SUC a)`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`indexf y d f`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`d`;`f`]
;



STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th]);




REWRITE_TAC[MEM_MAP;MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_rev;Tame_list.REVERSE_rev;Seq2.mem_flatten;MEM_MAP;Seq.map_MAP]
THEN GABBREV_TAC`j=PRE (sizel (filter (MEM (FST d)) L))`
THEN GEXISTS_TAC`((n_list L) POWER j) d`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;



MATCH_MP_TAC(SET_RULE`A==> A\/B\/C\/D`)
THEN GEXISTS_TAC`MAP (\i. (n_list L POWER i) d)
          (upt 1 (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;



GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
;



REWRITE_TAC[MEM_MAP;Tame_list.upt_rec;]
THEN GEXISTS_TAC`j`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN DICH_ASM_TAC(46-5)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
;


MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(59-53)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face]
THEN MRESA_TAC(ARITH_RULE`!a. 2<=a==> 0<a`)[`sizel (filter (MEM (FST d)) L)`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`sizel (filter (MEM (FST d)) L)`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MRESA_TAC (ARITH_RULE`!a. 2<= SUC a==> 1<= a`)[`j`]
THEN SYM_DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_list.upt_rec;MEM_APPEND;Seq.mem_seq1;];



MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESAL_TAC Lebhirj.FST_N_LIST_POWER[`L`;`j`;`d`][List_hypermap.dart_in_face]
;

]);;


let r_not_eq_split_norm=prove_by_refinement( 
`!L N N' r r' s x:A#A.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  ntrans L N r x 1 = N' /\
  rtrans L N r x 1 = r'/\
  marked_list L N r x /\ MEM s N' /\ MEM s N/\
~(final_list L r)
==> ~(s=r)`,
[

REPEAT RESA_TAC
THEN DICH_TAC 3
THEN EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC;


MRESA_TAC NOT_MEM_REPLACE[`r`;`[SND
        (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)
        (prev_el r (l'z L N r x)))]`;`N`];


DICH_ASM_TAC (9-5)[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(24-18)[Tame_defs2.normal_list]
THEN MRESA_TAC List_hypermap.uniq_flatten[`N`];

REWRITE_TAC[Seq.mem_seq1]
THEN MATCH_MP_TAC r_not_eq_snd_split_norm
THEN ASM_REWRITE_TAC[];

DICH_TAC 0
THEN REWRITE_TAC[]
THEN MATCH_MP_TAC r_not_eq_fst_split_norm
THEN ASM_REWRITE_TAC[]]);;




let lemma_via_node_map=prove(`!H x y. y IN node H x
         ==> (?j. j < CARD (node H x) /\ y = ((node_map H) POWER j) x)`,
REPEAT GEN_TAC
THEN MRESAL_TAC Hypermap_and_fan.FINITE_ORBIT_MAP[`dart H`;`node_map H`;`x`;`CARD (node H x)`][Hypermap.node_map_and_darts;GSYM node]
THEN POP_ASSUM(fun th-> GEN_REWRITE_TAC(LAND_CONV o ONCE_DEPTH_CONV)[th])
THEN REWRITE_TAC[IN_ELIM_THM]);;


let mem_upt1=prove(`!a. 0<j /\ j< a ==> MEM j (upt 1 a) `,
INDUCT_TAC
THENL[
ARITH_TAC;
RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. 0<a/\ a< SUC b==> 1<=b`)[`j`;`a`]
THEN MRESAL_TAC(ARITH_RULE`!a b.  a< SUC b==> a<b\/ a=b`)[`j`;`a`][Tame_list.upt_rec;MEM_APPEND;Seq.mem_seq1]
THEN DICH_TAC 4
THEN RESA_TAC]);;



let HOJODCM2_concl = `!L N N' r r' s x:A#A.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  ntrans L N r x 1 = N' /\
  rtrans L N r x 1 = r'/\
  MEM v (MAP FST (filter (\d. ~(MEM d r)) r')) /\
  MEM s N' ==> (MEM v (MAP FST s) <=> s = r' \/ s = LAST N')`;;


let HOJODCM2=prove_by_refinement( 
 HOJODCM2_concl,
[

REPEAT RESA_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Seq.mem_filter;MEM_MAP]
THEN RESA_TAC
THEN EQ_TAC
THEN RESA_TAC;





MRESA_TAC HOJODCM1[`L`;`N`;`N'`;`r`;`r'`;`s`;`x`]
;




MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`]
;



DICH_TAC(13-8)
THEN EXPAND_TAC"r'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
;



MRESA_TAC r_not_eq_split_norm[`L`;`N`;`N'`;`r`;`r'`;`s`;`x`]
;




MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x'=x''`];




DICH_TAC(15-10)
THEN RESA_TAC
THEN DICH_TAC(15-8)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`1`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(54-47)[Tame_defs2.normal_list]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`s`;`r'`;`N'`;`x'`];




DICH_TAC(15-8)
THEN EXPAND_TAC"r'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(17-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (22-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(36-16)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC;


DICH_TAC(46-7)
THEN RESA_TAC;


MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`x'`]
;


DICH_TAC(46-7)
THEN RESA_TAC;


GABBREV_TAC`d=x'`
THEN GABBREV_TAC`d1=x''`
THEN REMOVE_ASSUM_TAC
THEN REMOVE_ASSUM_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`d`;`d1`][List_hypermap.dart_in_face]
THEN DICH_TAC(48-32)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`s`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`d1`][Tame_defs2.loop_list;List_hypermap.dart_in_face]
THEN DICH_TAC 2
THEN RESA_TAC
THEN MATCH_MP_TAC(SET_RULE`B==>A\/B`)
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`s`;`LAST N'`;`N'`;`d1`]
THEN MATCH_DICH_TAC 0
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`1`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(54-47)[Tame_defs2.normal_list]
THEN RESA_TAC;




MATCH_MP_TAC Tame_list.MEM_LAST
THEN EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;MEM_APPEND;Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM]
;



EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;MEM_APPEND;Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM;LAST_APPEND;LAST_CLAUSES]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN REWRITE_TAC[MEM_MAP;MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_rev;Tame_list.REVERSE_rev;Seq2.mem_flatten;MEM_MAP;Seq.map_MAP]
;


MATCH_MP_TAC(SET_RULE`A==> A\/B\/C\/D`)
THEN MRESA_TAC lemma_via_node_map[`(hypermap_of_list L)`;`d`;`d1`]
THEN GEXISTS_TAC`MAP (\i. (n_list L POWER i) d)
          (upt 1 (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;




GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
;


POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC(SYM th))
;



REWRITE_TAC[MEM_MAP;Tame_list.upt_rec;]
THEN GEXISTS_TAC`j`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN DICH_ASM_TAC(66-22)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
;




MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(79-74)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face]
THEN MRESA_TAC(ARITH_RULE`!a. 2<=a==> 0<a`)[`sizel (filter (MEM (FST d)) L)`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`sizel (filter (MEM (FST d)) L)`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN GABBREV_TAC`t=PRE(sizel (filter (MEM (FST d1)) L))`
THEN MRESA_TAC (ARITH_RULE`!a. 2<= SUC a==> 1<= a`)[`t`]
THEN ASM_REWRITE_TAC[Tame_list.upt_rec;MEM_APPEND;Seq.mem_seq1;]
THEN DICH_TAC(85-65)
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ 0<a`)[`j`];



DICH_TAC(86-65)
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
;



MATCH_MP_TAC mem_upt1
THEN ASM_REWRITE_TAC[];


DICH_TAC(76-66)
THEN ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list;]
THEN MRESAL_TAC Lebhirj.n_list_ext_n_list_power[`L`;`d`;`j`][List_hypermap.dart_in_face]
THEN RESA_TAC;



GEXISTS_TAC`x'`
THEN ASM_REWRITE_TAC[]
;






MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`]
;



DICH_TAC(11-8)
THEN EXPAND_TAC"r'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
;






DICH_TAC(11-8)
THEN EXPAND_TAC"r'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(13-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (18-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(36-16)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC;





DICH_TAC(42-7)
THEN RESA_TAC;


MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`x'`]
;


DICH_TAC(42-7)
THEN RESA_TAC;





GABBREV_TAC`d=x'`
THEN REMOVE_ASSUM_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
;





EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;MEM_APPEND;Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM;LAST_APPEND;LAST_CLAUSES]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN REWRITE_TAC[MEM_MAP;MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_rev;Tame_list.REVERSE_rev;Seq2.mem_flatten;MEM_MAP;Seq.map_MAP]
THEN GABBREV_TAC`j=PRE (sizel (filter (MEM (FST d)) L))`
THEN GEXISTS_TAC`((n_list L) POWER j) d`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
;


MATCH_MP_TAC(SET_RULE`A==> A\/B\/C\/D`)
THEN GEXISTS_TAC`MAP (\i. (n_list L POWER i) d)
          (upt 1 (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;




GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
;




REWRITE_TAC[MEM_MAP;Tame_list.upt_rec;]
THEN GEXISTS_TAC`j`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN DICH_ASM_TAC(45-18)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
;




MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(79-74)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face]
THEN MRESA_TAC(ARITH_RULE`!a. 2<=a==> 0<a`)[`sizel (filter (MEM (FST d)) L)`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`sizel (filter (MEM (FST d)) L)`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MRESA_TAC (ARITH_RULE`!a. 2<= SUC a==> 1<= a`)[`j`]
THEN ASM_REWRITE_TAC[Tame_list.upt_rec;MEM_APPEND;Seq.mem_seq1;]
THEN SYM_DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_list.upt_rec;MEM_APPEND;Seq.mem_seq1;]
;



MRESAL_TAC Lebhirj.FST_N_LIST_POWER[`L`;`j`;`d`][List_hypermap.dart_in_face]
]);;



let CHANGE_TAC th= GABBREV_TAC th THEN REMOVE_ASSUM_TAC;;



let HOJODCM3_concl = `!L N r r' x:A#A v.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  rtrans L N r x 1 =r'/\
~(final_list L r) /\
  MEM v (MAP FST (flatten N)) 
==>
  (MEM v (MAP FST r') <=> 
     (v = FST (l'z L N r x) \/ v = FST (l'y L r x) \/
	 MEM v (MAP FST (betwn r (l'z L N r x) (l'y L r x)))))`;;


let HOJODCM3=prove_by_refinement( HOJODCM3_concl,
[
REPEAT RESA_TAC
THEN EQ_TAC
THEN RESA_TAC;



DICH_TAC 0
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[MEM_MAP]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`d1=x'`
THEN CHANGE_TAC`d=x''`;




DICH_TAC(1)
THEN EXPAND_TAC"r'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(11-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (16-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-11)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC;


MATCH_MP_TAC(SET_RULE`A==> B\/C\/A`)
THEN GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[];





THAYTHE_ASM_TAC (40-28)[`d1`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`d1`;`d`][List_hypermap.dart_in_face]
THEN DICH_TAC(44-6)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> MP_TAC th THEN REWRITE_TAC[Seq2.mem_flatten]
THEN ASSUME_TAC th)
THEN RESA_TAC
THEN DICH_TAC(46-26)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`l`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`d1`][Tame_defs2.loop_list;List_hypermap.dart_in_face]
THEN DICH_TAC(47-42)
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a A B. a IN A /\ A SUBSET B==> a IN B`)[`d`;`node (hypermap_of_list L) d1`;`set_of_list (flatten N)`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;]
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> MP_TAC th THEN REWRITE_TAC[Seq2.mem_flatten]
THEN ASSUME_TAC th)
THEN RESA_TAC
THEN CHANGE_TAC `s=l'`;





MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`y`;`d`;`z`;`f`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC (ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y f`;`indexf w z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`] 
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num . a+b=c /\ d+e=b==> e<=c`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`]
THEN MRESA_TAC Tame_list.indexf_add_right[`w`;`d`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e f:num . a+b=c /\ d+e=b/\ f+e=c/\ 0<d /\ d<b ==> f<c/\ a<f`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`;`indexf w d  f`]
THEN  MRESAL_TAC Kbwpbhq.CASES1[`0`;`w`;`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;ARITH_RULE`a<a+1`]
THEN MRESA_TAC(SET_RULE`!a s t. ~MEM a s/\ MEM a t==> ~(s=t)`)[`d`;`r`;`s`]
THEN MRESA_TAC Obdatyb.OBDATYB[`L`;`N`;`r`;`x`;`d`];


GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC Pbflhet.ztrans_in_suc[`f`;`w`;`L`;`N`;`r`;`x`;`0`][Tame_defs2.ytrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;ARITH_RULE`SUC 0=1`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;ARITH_RULE`SUC 0=1`;MEM_MAP]
THEN RESA_TAC
THEN GEXISTS_TAC`(l'z L N r x)`
THEN RESA_TAC
;




EXPAND_TAC"r'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;MEM_MAP]
THEN GEXISTS_TAC`y`
THEN ASM_REWRITE_TAC[];


DICH_TAC 0
THEN EXPAND_TAC"r'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;MEM_MAP]
THEN RESA_TAC
THEN GEXISTS_TAC`x'`
THEN ASM_REWRITE_TAC[]
THEN DICH_ASM_TAC(11-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (16-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-9)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN DICH_TAC(37-9)
THEN RESA_TAC
]);;



let FST_EQ_NEXT_YTRANS=prove_by_refinement( `!L N r x:A#A.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r) /\
l'y L r x =y
==> FST (next_el r y) = FST y`,
[

REPEAT RESA_TAC
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN DICH_ASM_TAC(7-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (12-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-11)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC Kbwpbhq.KBWPBHQ1[`L`;`N`;`r`;`x`;`y`]
THEN GSUBGOAL_THEN`(?i. ytrans L N r x i = y /\ i < transform_count L N r x)`MP_TAC;


GEXISTS_TAC`0`
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC(ARITH_RULE`!a. a=0 \/ 0<a`)[`transform_count L N r x`];

MRESAL_TAC Kbwpbhq.final_list_transform_count[`0`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;];

ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`y`];

DICH_TAC(37-23)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`y`][Tame_defs2.one_step_list]
THEN MRESAL_TAC Tame_list.inverse_node_map_list_power[`L`;`SUC 0`;`y`][POWER;I_DEF;o_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Hypermap.lemma_power_inverse_in_node2[`hypermap_of_list L`;`y`;`SUC 0`;][POWER;I_DEF;o_DEF]
THEN MRESA_TAC lemma_via_node_map[`(hypermap_of_list L)`;`y`;`inverse (node_map (hypermap_of_list L)) y`]
THEN ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list]
THEN MRESAL_TAC List_hypermap.fst_n_list_ext_power[`FST y`;`SND y`;`L`;`j`][List_hypermap.darts_of_list;IN_SET_OF_LIST]]);;



let FST_EQ_PREV_ZTRANS=prove_by_refinement( `!L N r x:A#A.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
~(final_list L r) /\
l'z L N r x =z/\
prev_el r z=z1
==> FST (z1) = FST z`,
[

REPEAT RESA_TAC
THEN GABBREV_TAC`y=l'y L r x`
THEN DICH_ASM_TAC(7-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (12-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC Kbwpbhq.KBWPBHQ2[`L`;`N`;`r`;`x`;`z`]
THEN GSUBGOAL_THEN`(?i. ztrans L N r x i = z /\ i < transform_count L N r x)`MP_TAC;


GEXISTS_TAC`0`
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC(ARITH_RULE`!a. a=0 \/ 0<a`)[`transform_count L N r x`];


MRESAL_TAC Kbwpbhq.final_list_transform_count[`0`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;];


ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`z`];

MRESA_TAC Seq2.mem_prev_el[`z`;`r`];


DICH_TAC(38-24)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`z1`][Tame_defs2.one_step_list]
THEN MRESAL_TAC Tame_list.inverse_node_map_list_power[`L`;`SUC 0`;`z1`][POWER;I_DEF;o_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Hypermap.lemma_power_inverse_in_node2[`hypermap_of_list L`;`z1`;`SUC 0`;][POWER;I_DEF;o_DEF]
THEN MRESA_TAC lemma_via_node_map[`(hypermap_of_list L)`;`z1`;`inverse (node_map (hypermap_of_list L)) z1`]
THEN ASM_SIMP_TAC[List_hypermap.components_hypermap_of_list]
THEN MRESAL_TAC List_hypermap.fst_n_list_ext_power[`FST z1`;`SND z1`;`L`;`j`][List_hypermap.darts_of_list;IN_SET_OF_LIST]]);;


let HOJODCM4_concl = `!L N N' r x:A#A v.
transform_assumption_v2 L/\
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  ntrans L N r x 1 = N'/\
~(final_list L r) /\
  MEM v (MAP FST (flatten N)) ==>
  (MEM v (MAP FST (LAST N')) <=> 
     (v = FST (l'z L N r x) \/ v = FST (l'y L r x) \/
	 MEM v (MAP FST (betwn r (l'y L r x) (l'z L N r x)))))`;;



let HOJODCM4=prove_by_refinement( HOJODCM4_concl,
[

REPEAT RESA_TAC
THEN EQ_TAC
THEN RESA_TAC;




DICH_TAC 0
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[MEM_MAP]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`d1=x'`
THEN CHANGE_TAC`d=x''`;




DICH_TAC(1)
THEN EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;LAST_APPEND;Ohcgkfu.sing_not_nil;LAST_CLAUSES]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(11-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (16-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-11)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC;




DICH_TAC 0
THEN REWRITE_TAC[APPEND;REVERSE;Seq.map;Seq.flatten0;Seq.mem_rev;Tame_list.lower_case;Seq2.mem_flatten;]
THEN REWRITE_TAC[MEM_MAP;GSYM Tame_list.lower_case]
THEN RESA_TAC
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[MEM_MAP]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`x'`]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`x'`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESAL_TAC Lebhirj.FST_N_LIST_POWER[`L`;`x''`;`x'`][List_hypermap.dart_in_face]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC (44-8)
THEN STRIP_TAC
THEN CHANGE_TAC`d2=x'`
;





THAYTHE_ASM_TAC (44-27)[`d1`]
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`d1`;`d2`][List_hypermap.dart_in_face]
THEN DICH_TAC(46-6)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> MP_TAC th THEN REWRITE_TAC[Seq2.mem_flatten]
THEN ASSUME_TAC th)
THEN RESA_TAC
THEN DICH_TAC(48-25)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`l'`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`d1`][Tame_defs2.loop_list;List_hypermap.dart_in_face]
THEN DICH_TAC(47-42)
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a A B. a IN A /\ A SUBSET B==> a IN B`)[`d2`;`node (hypermap_of_list L) d1`;`set_of_list (flatten N)`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;]
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> MP_TAC th THEN REWRITE_TAC[Seq2.mem_flatten]
THEN ASSUME_TAC th)
THEN CHANGE_TAC `d=d2`
THEN RESA_TAC
THEN CHANGE_TAC `s=l''`;






MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`y`;`d`;`z`;`f`]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC (ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y f`;`indexf w z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`] 
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num . a+b=c /\ d+e=b==> e<=c`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`]
THEN MRESA_TAC Tame_list.indexf_add_right[`w`;`d`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e f:num . a+b=c /\ d+e=b/\ f+e=c/\ 0<d /\ d<b ==> f<c/\ a<f`)[`indexf w y f`;`indexf y z f`;`indexf w z f`;`indexf y d f`;`indexf d z f`;`indexf w d  f`]
THEN  MRESAL_TAC Kbwpbhq.CASES1[`0`;`w`;`f`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;ARITH_RULE`a<a+1`]
THEN MRESA_TAC(SET_RULE`!a s t. ~MEM a s/\ MEM a t==> ~(s=t)`)[`d`;`r`;`s`]
THEN MRESA_TAC Obdatyb.OBDATYB[`L`;`N`;`r`;`x`;`d`];





MRESA_TAC FST_EQ_NEXT_YTRANS[`y`;`L`;`N`;`r`;`x`;];



MRESA_TAC FST_EQ_NEXT_YTRANS[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`next_el r y =z1`];



DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;


MRESA_TAC Tame_list.betwn_mem[`r`;`next_el r y`;`z1`;`d`]
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`next_el r y`;`d`;`z1`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`next_el r y`;`d`;`z1`;`r`]
THEN MATCH_MP_TAC(SET_RULE`A==> B\/C\/A`)
THEN GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(57-37)
THEN DICH_TAC(57-37)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[];



MRESA_TAC Tame_list.next_el_indexf[`y`;`(next_el r y)`;`r`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`(next_el r y)`;`z1`]
THEN MRESA_TAC (ARITH_RULE`!a b c:num. a<b/\ b<c==> SUC a<c`)[`indexf (next_el r y) d r`;`indexf (next_el r y) z1 r`;`sizel r`]
THEN MRESA_TAC Tame_list.indexf_n[`(next_el r y)`;`d`;`r`;]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf (next_el r y) d r)`;`y`;`d`;`r`][POWER;o_DEF;I_DEF;ARITH_RULE`0<SUC a`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`z1`;`r`;]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`y`;`z1`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b/\ 1<b==> a=b-1\/ SUC a<b`)[`indexf y z1 r`;`sizel r`]
;



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y=z1`]
;


DICH_TAC(66-47)
THEN RESA_TAC
;


MRESAS_TAC Tame_list.indexf_antisym[`y`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`]
THEN MRESA_TAC Tame_list.indexf1[`z1`;`y`;`r`];


MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf y z1 r)`;`y`;`z`;`r`][COM_POWER;o_DEF;I_DEF;ARITH_RULE`SUC b<SUC a<=> b<a`]
THEN MRESA_TAC Tame_list.indexf_n[`(next_el r y)`;`z1`;`r`;]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b/\ 1<b==> a=b-1\/ SUC a<b`)[`indexf (next_el r y) z1 r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`(next_el r y)`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`]
THEN MRESA_TAC Tame_list.indexf1[`z1`;`(next_el r y)`;`r`]
THEN DICH_TAC(70-47)
THEN RESA_TAC;


MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf (next_el r y) z1 r)`;`y`;`z1`;`r`][POWER;o_DEF;I_DEF;ARITH_RULE`SUC b<SUC a<=> b<a`]
THEN DICH_TAC (69-53)
THEN ARITH_TAC;




MRESA_TAC FST_EQ_PREV_ZTRANS[`z1`;`z`;`L`;`N`;`r`;`x`;]
;





EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;LAST_APPEND;Ohcgkfu.sing_not_nil;LAST_CLAUSES;MEM_MAP]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(10-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (15-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-11)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN GEXISTS_TAC`z1`
THEN ASM_REWRITE_TAC[];





EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;LAST_APPEND;Ohcgkfu.sing_not_nil;LAST_CLAUSES;MEM_MAP]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(10-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (15-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-11)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS[`y`;`L`;`N`;`r`;`x`;]
THEN GEXISTS_TAC`next_el r y`
THEN ASM_REWRITE_TAC[];





EXPAND_TAC"N'"
THEN REWRITE_TAC[ARITH_RULE`1=SUC 0`;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;LAST_APPEND;Ohcgkfu.sing_not_nil;LAST_CLAUSES;MEM_MAP]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN DICH_ASM_TAC(10-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (15-3)[Tame_defs2.marked_list;transform_list_power_rep]
THEN DICH_ASM_TAC(29-23)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(31-11)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`][MEM_APPEND;Seq.mem_seq1]
THEN DICH_TAC (38-7)
THEN ASM_REWRITE_TAC[MEM_MAP]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN CHANGE_TAC`d=x'`
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d=z1`];



GEXISTS_TAC`z1`
THEN ASM_REWRITE_TAC[];



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d=next_el r y`];



GEXISTS_TAC`next_el r y`
THEN ASM_REWRITE_TAC[];


GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN MRESA_TAC Tame_list.indexf_add_betwn[`y`;`d`;`z`;`r`]
;






MRESA_TAC FST_EQ_NEXT_YTRANS[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`next_el r y =z1`];



DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;



MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`next_el r y`;`d`;`z1`]
THEN MRESA_TAC (ARITH_RULE`!A. A=0\/ 0< A`)[`indexf (next_el r y) d r`];



MRESA_TAC Tame_list.indexf0[`(next_el r y)`;`d`; `r`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`d`]
;




MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`sizel r`]
;


MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`y`]
THEN MRESA_TAC Seq.size_eq0[`r`]
;



MRESA_TAC Seq2.size1_eq[`r`]
THEN DICH_TAC(59-36)
THEN DICH_TAC(59-36)
THEN ASM_REWRITE_TAC[Seq.mem_seq1;]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[];



MRESA_TAC Tame_list.next_el_indexf[`y`;`(next_el r y)`;`r`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`(next_el r y)`;`z1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.indexf_n[`(next_el r y)`;`d`;`r`;]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`(next_el r y)`;`d`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b/\ 1<b==> a=b-1\/ SUC a<b`)[`indexf (next_el r y) d r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`(next_el r y)`;`d`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`y`;`d`;`(next_el r y)`;`r`][ARITH_RULE`a<=a/\ (a+1=1<=> a=0)`]
THEN MRESA_TAC Tame_list.indexf0[`y`;`d`; `r`]
THEN DICH_TAC(67-38)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.not_betwn1[`y`;`z`;`r`];



MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf (next_el r y) d r)`;`y`;`d`;`r`][POWER;o_DEF;I_DEF;ARITH_RULE`0<SUC a`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`z1`;`r`;]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`y`;`z1`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b/\ 1<b==> a=b-1\/ SUC a<b`)[`indexf y z1 r`;`sizel r`]
;



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y=z1`]
;


DICH_TAC(66-47)
THEN RESA_TAC
;


MRESAS_TAC Tame_list.indexf_antisym[`y`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`]
THEN MRESA_TAC Tame_list.indexf1[`z1`;`y`;`r`];




MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf y z1 r)`;`y`;`z`;`r`][COM_POWER;o_DEF;I_DEF;ARITH_RULE`SUC b<SUC a<=> b<a`]
THEN MRESA_TAC Tame_list.indexf_n[`(next_el r y)`;`z1`;`r`;]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b/\ 1<b==> a=b-1\/ SUC a<b`)[`indexf (next_el r y) z1 r`;`sizel r`]
;



MRESAS_TAC Tame_list.indexf_antisym[`(next_el r y)`;`z1`;`r`][ARITH_RULE`1<a==>(a-1+b=a<=> b=1)`]
THEN MRESA_TAC Tame_list.indexf1[`z1`;`(next_el r y)`;`r`]
THEN DICH_TAC(70-47)
THEN RESA_TAC;


MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf (next_el r y) z1 r)`;`y`;`z1`;`r`][POWER;o_DEF;I_DEF;ARITH_RULE`SUC b<SUC a<=> b<a`]
THEN DICH_TAC (72-57)
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC a< SUC (SUC b) <=> a<b\/ a= b`]
THEN RESA_TAC
THEN DICH_TAC(72-61)
THEN ASM_REWRITE_TAC[]
]);;



 end;;



