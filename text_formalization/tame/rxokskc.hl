open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Rxokskc= struct

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;
open Auqtzyz;;
open List_hypermap;;



let UNIQ_LIST_OF_DARTS= prove_by_refinement(`!L.  uniq L /\ (ALL uniq L) /\ (!x y. MEM x L /\ MEM y L /\ ~(x=y) ==> ~has (\x. MEM x (list_pairs y)) (list_pairs x))==>
 uniq (list_of_darts L)`,
[
LIST_INDUCT_TAC;


REWRITE_TAC[Seq.uniq;list_of_darts;Seq2.foldr]
;


DICH_TAC 0
THEN REWRITE_TAC[Seq.uniq;list_of_darts;Seq2.foldr;Seq2.ALL]
THEN REPEAT STRIP_TAC
THEN DICH_TAC 5
THEN ASM_REWRITE_TAC[]
THEN GSUBGOAL_THEN`(!x y.
       MEM x t /\ MEM y t /\ ~(x=y)==> ~has (\x. MEM x (list_pairs y)) (list_pairs x))`
ASSUME_TAC
;


REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[]
THEN MATCH_DICH_TAC(7-4)
THEN ASM_REWRITE_TAC[Seq.in_cons];


ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN ASM_REWRITE_TAC[Seq.cat_uniq]
THEN MRESA_TAC List_hypermap.uniq_list_pairs[`h`]
THEN ASM_TAC
THEN REWRITE_TAC[GSYM list_of_darts;Seq.has]
THEN GSPEC_TAC(`t`,`t`);


LIST_INDUCT_TAC;



REWRITE_TAC[Seq.uniq;list_of_darts;Seq2.foldr;Seq.has]
;



REWRITE_TAC[Seq.uniq;list_of_darts;Seq2.foldr;Seq.has;Seq2.ALL]
THEN REWRITE_TAC[GSYM list_of_darts;Seq.cat_uniq]
THEN REPEAT STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN DICH_TAC 12
THEN RESA_TAC
THEN REWRITE_TAC[Seq.has_cat;DE_MORGAN_THM]
THEN STRIP_TAC;


MATCH_DICH_TAC (9-3)
THEN ASM_REWRITE_TAC[Seq.in_cons]
THEN DICH_TAC 11
THEN ASM_REWRITE_TAC[Seq.in_cons;DE_MORGAN_THM]
THEN RESA_TAC;


DICH_TAC 0
THEN GSUBGOAL_THEN`(!x y.
           MEM x (h :: t) /\ MEM y (h :: t)/\ ~(x=y)
           ==> ~has (\x. MEM x (list_pairs y)) (list_pairs x))`ASSUME_TAC;


ASM_REWRITE_TAC[Seq.in_cons]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[]
THEN MATCH_DICH_TAC (14-6)
THEN ASM_REWRITE_TAC[Seq.in_cons]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[]
;


ASM_REWRITE_TAC[]
THEN DICH_TAC 12
THEN ASM_REWRITE_TAC[Seq.in_cons;DE_MORGAN_THM]
THEN RESA_TAC
THEN STRIP_TAC
THEN MATCH_DICH_TAC 0
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[]
THEN MATCH_DICH_TAC (16-5)
THEN ASM_REWRITE_TAC[Seq.in_cons;DE_MORGAN_THM]
]);;

let MEM_CONS=prove(`MEM h (CONS h t)`,
REWRITE_TAC[MEM]);;


let LIST_OF_SET_SING=prove(`list_of_set {n}=[n]`,
MRESAL_TAC LIST_OF_SET_PROPERTIES[`{n}`][FINITE_SING;CARD_SING]
THEN MRESAL_TAC LENGTH_EQ_CONS[`list_of_set {n}`;`0`][ARITH_RULE`SUC 0=1`]
THEN MRESAS_TAC MEM_LIST_OF_SET[`{n}`][FINITE_SING]
THEN THAYTHEL_TAC 0[`h`][MEM_CONS;IN_SING]
THEN DICH_TAC 1
THEN REWRITE_TAC[LENGTH_EQ_NIL]
THEN RESA_TAC);;



let EXISTS_LIST_FACE_NODE= prove_by_refinement(`!n x H:(A)hypermap. is_restricted H/\ x IN dart H /\ n<= CARD(face H x) ==> ?L. (!i. i< n ==> EL i L= node H (((face_map H ) POWER i) x)) /\ LENGTH L=n/\ uniq L`,
[
INDUCT_TAC;


REPEAT RESA_TAC
THEN GEXISTS_TAC`[]:(A->bool)list`
THEN REWRITE_TAC[LENGTH;Seq.uniq]
THEN ARITH_TAC
;




REPEAT RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<=b`)[`n`;`CARD(face H x)`]
THEN THAYTHE_TAC 4[`x`;`H`]
THEN GABBREV_TAC`L1=APPEND L [node H ((face_map H POWER (n)) x)]`
THEN GEXISTS_TAC`L1`
THEN REPEAT RESA_TAC
;


MRESA_TAC(ARITH_RULE`!a b. a< SUC b==> a<b \/ a=b`)[`i`;`n`]
;


THAYTHE_TAC (8-3)[`i`]
THEN EXPAND_TAC"L1"
THEN REWRITE_TAC[EL_APPEND]
THEN ASM_REWRITE_TAC[];


EXPAND_TAC"L1"
THEN REWRITE_TAC[EL_APPEND]
THEN ASM_REWRITE_TAC[ARITH_RULE`~(n<n:num)/\ n-n=0`;EL;HD];


EXPAND_TAC"L1"
THEN REWRITE_TAC[LENGTH_APPEND]
THEN ASM_REWRITE_TAC[]
THEN REWRITE_TAC[LENGTH]
THEN ARITH_TAC;




EXPAND_TAC"L1"
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.cat_uniq]
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;


ASM_REWRITE_TAC[Seq.has;MEM_EXISTS_EL]
THEN STRIP_TAC
THEN POP_ASSUM MP_TAC
THEN THAYTHE_TAC (7-3)[`i`]
THEN MATCH_MP_TAC Hypermap.lemma_different_nodes
THEN STRIP_TAC
THEN GSUBGOAL_THEN`(face_map H POWER n) x IN face H ((face_map H POWER i) x)`ASSUME_TAC;


MRESAL_TAC Hypermap.lemma_face_identity[`H`;`x`;`(face_map H POWER i) x`;]
[Hypermap.lemma_in_face]
THEN SYM_DICH_TAC 0
THEN REWRITE_TAC[Hypermap.lemma_in_face];


MRESA_TAC(SET_RULE`!a A B. a IN A/\ a IN B==> a IN A INTER B`)[`(face_map H POWER n) x`;`node H ((face_map H POWER i) x)`;`face H ((face_map H POWER i) x)`]
THEN DICH_TAC 11
THEN REWRITE_TAC[is_restricted;simple_hypermap]
THEN MRESA_TAC Hypermap.lemma_dart_invariant_power_face[`H`;`x`;`i`]
THEN STRIP_TAC
THEN THAYTHE_TAC (19-15)[`((face_map H POWER i) x)`]
THEN DICH_TAC (20-10)
THEN ASM_REWRITE_TAC[IN_SING]
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<b`)[`n`;`CARD(face H x)`]
THEN MRESA_TAC Hypermap.lemma_congruence_on_face[`H`;`x`;`n`;`i`]
THEN DICH_TAC 0
THEN DICH_TAC (21-6)
THEN ARITH_TAC
;


ASM_REWRITE_TAC[GSYM LIST_OF_SET_SING]
THEN MATCH_MP_TAC Seq2.uniq_list_of_set
THEN REWRITE_TAC[FINITE_SING]]);;


let EXISTS_LIST_FACE_NODE2= prove(`!x H:(A)hypermap. is_restricted H /\ x IN dart H   ==> ?L. (!i. i< CARD(face H x) ==> EL i L= node H (((face_map H ) POWER i) x)) /\ LENGTH L=CARD(face H x)/\ uniq L`,
REPEAT STRIP_TAC
THEN MRESAL_TAC EXISTS_LIST_FACE_NODE[`CARD(face H x)`;`x`;`H`][ARITH_RULE`a<=a :num`]);;



let EXISTS_LIST_FACE_NODE_FUNC= prove_by_refinement(
`!H:(A)hypermap. is_restricted H 
==>
?f. !x. x IN dart H   ==> (!i. i< CARD(face H x) ==> EL i (f x)= node H (((face_map H ) POWER i) x)) /\ LENGTH (f x)=CARD(face H x)/\ uniq (f x) /\ ~(f x=[])/\
(!e. MEM e (list_pairs (f x)) ==> ?i. i< CARD(face H x) /\ e=(node H (((face_map H ) POWER i) x),node H (((face_map H ) POWER (SUC i)) x)))
`,
[

REWRITE_TAC[GSYM SKOLEM_THM;RIGHT_EXISTS_IMP_THM]
THEN REPEAT STRIP_TAC
THEN MRESAL_TAC EXISTS_LIST_FACE_NODE[`CARD(face H x)`;`x`;`H`][ARITH_RULE`a<=a :num`]
THEN GEXISTS_TAC`L`
THEN ASM_REWRITE_TAC[]
THEN GSUBGOAL_THEN`~(L=[])`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[LENGTH]
THEN DICH_TAC 4
THEN REWRITE_TAC[is_restricted;simple_hypermap]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x`]
THEN DICH_TAC 0
THEN ARITH_TAC;

ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN REWRITE_TAC[MEM_EXISTS_EL;list_pairs]
THEN MRESA_TAC Seq.size_rot[`1`;`L`]
THEN MRESAL_TAC Seq.size1_zip[`L`;`(rot 1 L)`][ARITH_RULE`a<=a:num`;GSYM Seq.size]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Seq2.EL_zip[`L`;`rot 1 L`;`i`]
THEN GEXISTS_TAC`i`
THEN DICH_TAC(10-3)
THEN ASM_REWRITE_TAC[GSYM Seq.size]
THEN STRIP_TAC
THEN DICH_TAC(10-7)
THEN RESA_TAC
THEN THAYTHE_ASM_TAC(10-2)[`i`]
THEN REWRITE_TAC[PAIR_EQ]
THEN MRESA_TAC CONS_HD_TL[`L`]
THEN POP_ASSUM (fun th-> ONCE_REWRITE_TAC[th])
THEN MRESA_TAC Seq.rot1_cons[`HD L`;`TL L`]
THEN REWRITE_TAC[GSYM Seq.cats1;GSYM Seq2.APPEND_cat; EL_APPEND]
THEN MRESAL_TAC LENGTH_TL[`L`][GSYM Seq.size]
THEN MRESA_TAC(ARITH_RULE` !a b. a<b==> a< b-1\/ a=b-1`)[`i`;`sizel L`];

ASM_REWRITE_TAC[EL_TL;ARITH_RULE`i+1= SUC i`]
THEN DICH_TAC 14
THEN REWRITE_TAC[is_restricted;simple_hypermap]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x`]
THEN MRESA_TAC(ARITH_RULE`!a b. a< b-1/\ 3<= b==> SUC a< b`)[`i`;`sizel L`];


ASM_REWRITE_TAC[ARITH_RULE`~(a<a:num)/\ a-a=0`;EL;HD]
THEN DICH_TAC 14
THEN REWRITE_TAC[is_restricted;simple_hypermap]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x`]
THEN MRESAL_TAC(ARITH_RULE`!b. 3<= b==> SUC (b-1)=b/\ 0<b`)[`sizel L`][Hypermap.lemma_face_cycle]
THEN THAYTHEL_TAC (24-10)[`0`][EL;POWER;I_DEF]]);;


let LIST_COR_FACE_SET= prove_by_refinement(
`!n H:(A)hypermap. n<= CARD (face_set H)  ==> 
 ?S. (!x. x IN S==> x IN dart H)/\
(!x y. x IN S/\ y IN S /\ face H x = face H y==> x=y)/\ CARD S= n`,
[
INDUCT_TAC
;


REPEAT RESA_TAC
THEN GEXISTS_TAC`{}:A->bool`
THEN REWRITE_TAC[CARD_CLAUSES]
THEN SET_TAC[];


REPEAT STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<= b==> a<=b`)[`n`;`CARD (face_set H)`]
THEN THAYTHE_TAC 2[`H`]
THEN  GSUBGOAL_THEN`{face H y | y IN S} SUBSET face_set H`ASSUME_TAC;


REWRITE_TAC[face_set;set_of_orbits;GSYM face;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
THEN GEXISTS_TAC`y`
THEN THAYTHE_TAC (6-2)[`y`]
;


MRESA_TAC(SET_RULE`!A B. A SUBSET B ==> A=B \/ (?a. a IN B/\ ~(a IN A))`)[`{face H y | y IN S}`;`face_set H`]
;


GSUBGOAL_THEN` IMAGE (\y. face H y) S={face H y | y IN S}`ASSUME_TAC
;


REWRITE_TAC[IMAGE]
THEN ONCE_REWRITE_TAC[EXTENSION;]
THEN REWRITE_TAC[IN_ELIM_THM];


MRESA_TAC(SET_RULE`!S A. (!x. x IN S ==> x IN A)==> S SUBSET A`)[`S`;`dart H`]
THEN MRESAL_TAC FINITE_SUBSET[`S`;`dart H`][Hypermap.hypermap_lemma]
THEN MRESA_TAC CARD_IMAGE_EQ_INJ[`(\y. face H y)`;`S`]
THEN DICH_TAC 10
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;
 

DICH_TAC 1
THEN REWRITE_TAC[face_set;set_of_orbits;GSYM face;SUBSET;IN_ELIM_THM]
THEN STRIP_TAC
THEN EXISTS_TAC`(S:A->bool) UNION {x}`
THEN REPEAT RESA_TAC;


DICH_TAC 0
THEN REWRITE_TAC[UNION;IN_ELIM_THM;IN_SING]
THEN STRIP_TAC;


ASM_TAC
THEN SET_TAC[]
;


ASM_REWRITE_TAC[];



DICH_TAC 1
THEN DICH_TAC 1
THEN REWRITE_TAC[UNION;IN_ELIM_THM;IN_SING]
THEN REPEAT STRIP_TAC;


MATCH_DICH_TAC (11-3)
THEN ASM_REWRITE_TAC[];


DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC(11-6)
THEN ASM_REWRITE_TAC[IN_ELIM_THM;NOT_EXISTS_THM]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
;



DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC(11-6)
THEN ASM_REWRITE_TAC[IN_ELIM_THM;NOT_EXISTS_THM]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`y`]
;


ASM_REWRITE_TAC[]
;


GSUBGOAL_THEN`~(x IN S)`ASSUME_TAC
;


STRIP_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[IN_ELIM_THM]
THEN GEXISTS_TAC`x`
THEN ASM_REWRITE_TAC[IN_ELIM_THM]
;



MRESA_TAC(SET_RULE`!x S. ~(x IN S)==> S INTER {x}={}`)[`x`;`S`]
THEN MRESA_TAC(SET_RULE`!S A. (!x. x IN S ==> x IN A)==> S SUBSET A`)[`S`;`dart H`]
THEN MRESAL_TAC FINITE_SUBSET[`S`;`dart H`][Hypermap.hypermap_lemma]
THEN MRESAL_TAC CARD_UNION[`S`;`{x}`][FINITE_SING;CARD_SING]
THEN ARITH_TAC;]);;


let LIST_COR_FACE_SET1= prove_by_refinement(  
`! H:(A)hypermap. 
 ?S. (!x. x IN S==> x IN dart H)/\
(!x. x IN dart H ==> ?y. y IN S/\ x IN face H y)/\
(!x y. x IN S/\ y IN S /\ face H x = face H y==> x=y)/\ CARD S= CARD (face_set H)/\
{face H y | y IN S} = face_set H/\
FINITE S
`,
[
REPEAT RESA_TAC
THEN MRESAL_TAC LIST_COR_FACE_SET[`CARD (face_set H)`;`H`][ARITH_RULE`a<=a:num`]
THEN GEXISTS_TAC`S`
THEN ASM_REWRITE_TAC[];



GSUBGOAL_THEN` IMAGE (\y. face H y) S={face H y | y IN S}`ASSUME_TAC
;



REWRITE_TAC[IMAGE]
THEN ONCE_REWRITE_TAC[EXTENSION;]
THEN REWRITE_TAC[IN_ELIM_THM];


MRESA_TAC(SET_RULE`!S A. (!x. x IN S ==> x IN A)==> S SUBSET A`)[`S`;`dart H`]
THEN MRESAL_TAC FINITE_SUBSET[`S`;`dart H`][Hypermap.hypermap_lemma]
THEN MRESA_TAC CARD_IMAGE_EQ_INJ[`(\y. face H y)`;`S`]
;



GSUBGOAL_THEN`{face H y | y IN S} SUBSET face_set H`ASSUME_TAC;




REWRITE_TAC[face_set;set_of_orbits;GSYM face;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
THEN GEXISTS_TAC`y`
THEN THAYTHE_TAC (8)[`y`]
;


 MRESA_TAC Hypermap_and_fan.DART_EQ_UNIONS[`H`]
THEN REWRITE_TAC[UNIONS]
THEN MRESAL_TAC CARD_SUBSET_EQ[`{face H y | y IN S}`;`face_set H`][Hypermap.FINITE_HYPERMAP_ORBITS;]
THEN SYM_DICH_TAC 0
THEN REWRITE_TAC[IN_ELIM_THM]
THEN SET_TAC[]]);;





let ONE_TO_ONE_DART= prove_by_refinement(
`!H:(A)hypermap x y. is_restricted H /\ x IN dart H/\  node H x= node H y /\ node H (face_map H x)= node H (face_map H y)
==> x=y `,
[REWRITE_TAC[is_restricted;is_no_double_joins]
THEN REPEAT RESA_TAC 
THEN ONCE_REWRITE_TAC[GSYM Hypermap.face_map_injective]
THEN ONCE_REWRITE_TAC[GSYM Hypermap.node_map_injective]
THEN MATCH_DICH_TAC(11-5)
THEN STRIP_TAC;

MRESA_TAC Hypermap.lemma_dart_invariant[`H`;`x`]
THEN MRESA_TAC Hypermap.lemma_dart_invariant[`H`;`face_map H x`];

STRIP_TAC;

REWRITE_TAC[Auqtzyz.node_node_map_eq]
THEN MATCH_MP_TAC Hypermap.lemma_in_node1
THEN ASM_REWRITE_TAC[Hypermap.node_refl;];
MRESAL_TAC Hypermap.hypermap_lemma[`H`][o_DEF;I_DEF;FUN_EQ_THM;Hypermap.node_refl;]]);;



let MEM_LIST_DARTS=prove(`!L. MEM d (list_of_darts L)<=> ?x. MEM x L /\ MEM d (list_pairs x)`,
LIST_INDUCT_TAC
THENL[

REWRITE_TAC[Seq.uniq;list_of_darts;Seq2.foldr;MEM];

REWRITE_TAC[Seq.uniq;list_of_darts;Seq2.foldr;Seq2.ALL]
THEN ASM_REWRITE_TAC[GSYM list_of_darts;Seq.mem_cat;Seq.in_cons]
THEN SET_TAC[]]);;


let SYM_LIST_DART=prove(`z1=node_map H(face_map H z)/\ is_restricted H
==> node H z1,node H (face_map H z1)= node H (face_map H z),node H z`,
REWRITE_TAC[is_restricted]
THEN RESA_TAC
THEN REWRITE_TAC[PAIR_EQ;Auqtzyz.node_node_map_eq]
THEN MRESA_TAC Auqtzyz.node_node_map_eq[`H`;`face_map H (node_map H (face_map H z))`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Hypermap.square_edge_convolution[`H`]);;


let RXOKSKC_concl = 
  `!H:(A)hypermap. is_restricted H ==> 
    (?L:((A->bool)list)list. good_list L /\ good_list_nodes L /\ all uniq L /\
       iso H (hypermap_of_list L))`;;


let RXOKSKC = prove_by_refinement(  RXOKSKC_concl,
[


REPEAT RESA_TAC
THEN MRESA_TAC EXISTS_LIST_FACE_NODE_FUNC[`H`]
THEN MRESA_TAC LIST_COR_FACE_SET1[`H`]
THEN GABBREV_TAC`s= IMAGE f (S)`
THEN GABBREV_TAC`L=list_of_set(s)`
THEN GEXISTS_TAC`L`
THEN GSUBGOAL_THEN`FINITE s`ASSUME_TAC
;


EXPAND_TAC"s"
THEN MATCH_MP_TAC FINITE_IMAGE
THEN ASM_REWRITE_TAC[Hypermap.hypermap_lemma];


GSUBGOAL_THEN`all uniq L`ASSUME_TAC
;


REWRITE_TAC[GSYM Seq2.ALL_all;GSYM ALL_MEM]
THEN RESA_TAC
THEN EXPAND_TAC"L"
THEN MRESA_TAC MEM_LIST_OF_SET[`s`]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM]
THEN RESA_TAC
THEN THAYTHE_TAC (13-2)[`x'`]
THEN THAYTHE_TAC (13-1)[`x'`];


ASM_REWRITE_TAC[]
THEN GSUBGOAL_THEN`good_list L`ASSUME_TAC;







GSUBGOAL_THEN`all (\l. ~(l = [])) L`ASSUME_TAC
;



REWRITE_TAC[GSYM Seq2.ALL_all;GSYM ALL_MEM]
THEN EXPAND_TAC"L"
THEN ASM_SIMP_TAC[MEM_LIST_OF_SET]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[]
THEN THAYTHE_TAC (13-2)[`x'`]
THEN THAYTHE_TAC (13-1)[`x'`];



REWRITE_TAC[List_hypermap.good_list]
THEN GSUBGOAL_THEN`uniq L`ASSUME_TAC;


EXPAND_TAC "L"
THEN MATCH_MP_TAC Seq2.uniq_list_of_set
THEN ASM_REWRITE_TAC[]
;


REPEAT RESA_TAC
;




MATCH_MP_TAC (GEN_ALL UNIQ_LIST_OF_DARTS)
THEN ASM_REWRITE_TAC[Seq2.ALL_all];



EXPAND_TAC"L"
THEN ASM_SIMP_TAC[MEM_LIST_OF_SET]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM]
THEN REPEAT STRIP_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[GSYM Seq.hasP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC(20-2)[`x'`]
THEN THAYTHE_ASM_TAC(0)[`x''`]
THEN THAYTHE_ASM_TAC(22-1)[`x'`]
THEN THAYTHE_ASM_TAC(0)[`x''`]
THEN THAYTHE_ASM_TAC(1)[`x'''`]
THEN THAYTHE_TAC(34-26)[`x'''`]
THEN DICH_TAC 0
THEN REWRITE_TAC[PAIR_EQ;COM_POWER;o_DEF]
THEN STRIP_TAC
THEN MRESA_TAC Hypermap.lemma_dart_invariant_power_face[`H`;`x''`;`i`]
THEN MRESA_TAC ONE_TO_ONE_DART[`H`;`(face_map H POWER i) x''`;`(face_map H POWER i') x'`]
THEN MRESA_TAC Hypermap.lemma_in_face[`H`;`x''`;`i`]
THEN MRESA_TAC Hypermap.lemma_face_identity[`H`;`x''`;`(face_map H POWER i') x'`]
THEN MRESA_TAC Hypermap.lemma_in_face[`H`;`x'`;`i'`]
THEN MRESA_TAC Hypermap.lemma_face_identity[`H`;`x'`;`(face_map H POWER i') x'`]
THEN DICH_TAC 2
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN THAYTHE_TAC (41-2)[`x'`;`x''`]
THEN DICH_TAC (41-15)
THEN ASM_REWRITE_TAC[]
;




DICH_TAC 0
THEN ASM_REWRITE_TAC[MEM_LIST_DARTS]
THEN MRESA_TAC MEM_LIST_OF_SET[`s`]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM]
THEN RESA_TAC
THEN DICH_TAC 0
THEN RESA_TAC
THEN THAYTHE_ASM_TAC(17-2)[`x'`]
THEN THAYTHE_ASM_TAC(18-1)[`x'`]
THEN THAYTHEL_TAC 1[`d`][COM_POWER;o_DEF]
THEN GABBREV_TAC`z=(face_map H POWER i) x'`
THEN GABBREV_TAC`z1=node_map H(face_map H z)`
THEN MRESA_TAC SYM_LIST_DART[`z1`;`H`;`z`]
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th])
THEN MRESAL_TAC Hypermap.lemma_dart_invariant_power_face[`H`;`x'`;`SUC i`][COM_POWER;o_DEF]
THEN MRESAL_TAC Hypermap.lemma_dart_invariant_power_node[`H`;`face_map H z`;`SUC 0`][COM_POWER;o_DEF;I_DEF;POWER]
THEN MRESA_TAC Hypermap_and_fan.DART_EQ_UNIONS[`H`]
THEN REMOVE_ASSUM_TAC
THEN REMOVE_ASSUM_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC(28-4)
THEN REWRITE_TAC[UNIONS;IN_ELIM_THM]
THEN STRIP_TAC
THEN GEXISTS_TAC`f y`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;



GEXISTS_TAC`y`
THEN ASM_REWRITE_TAC[]
;


THAYTHE_ASM_TAC(30-16)[`y`]
THEN REWRITE_TAC[list_pairs;MEM_EXISTS_EL]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[face]
THEN MRESAL_TAC Hypermap_and_fan.FINITE_ORBIT_MAP[`dart H`;`face_map H`;`y`;`CARD(face H y)`][Hypermap.face_map_and_darts;GSYM face]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[IN_ELIM_THM]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC(32-20)[`y`]
THEN THAYTHE_ASM_TAC(37-32)[`k`]
THEN DICH_TAC 1
THEN STRIP_TAC
THEN MRESA_TAC Seq.size_rot[`1`;`f y`]
THEN MRESAL_TAC Seq.size1_zip[`f y`;`rot 1(f y)`][ARITH_RULE`a<=a:num`;Seq.size]
THEN GEXISTS_TAC`k`
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(40-30)
THEN RESA_TAC
THEN DICH_TAC(40-31)
THEN ASM_REWRITE_TAC[GSYM Seq.size]
THEN RESA_TAC
THEN MRESA_TAC Seq2.EL_zip[`f y`;`rot 1(f y)`;`k`]
THEN REWRITE_TAC[PAIR_EQ]
THEN MRESA_TAC CONS_HD_TL[`f y`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[Seq.rot1_cons;GSYM Seq.cats1;GSYM Seq2.APPEND_cat;EL_APPEND]
THEN MRESA_TAC LENGTH_TL[`f y`]
THEN DICH_TAC 42
THEN REWRITE_TAC[is_restricted]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`y`]
THEN ASM_REWRITE_TAC[GSYM Seq.size]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b /\ 3<=b ==> (a< b-1/\ SUC a<b)\/ (a= b-1 /\ SUC (b-1)=b/\ 0<b)`)[`k`;`CARD(face H y)`];


ASM_REWRITE_TAC[EL_TL]
THEN THAYTHEL_TAC(52-34)[`SUC k`][COM_POWER;o_DEF;ARITH_RULE`a+1=SUC a`;]
;



REWRITE_TAC[ARITH_RULE`~(a<a:num)/\ a-a=0`;EL;HD;GSYM COM_POWER]
THEN ONCE_REWRITE_TAC[Hypermap.iterate_map_valuation]
THEN ASM_REWRITE_TAC[Hypermap.lemma_face_cycle]
THEN THAYTHEL_TAC(53-34)[`0`][EL;POWER;I_DEF];



ASM_SIMP_TAC[List_hypermap.good_list_nodes_condition; List_hypermap.size_list_of_nodes]
THEN GSUBGOAL_THEN`set_of_list(list_of_elements L) = node_set H`ASSUME_TAC
;



REWRITE_TAC[EXTENSION;IN_SET_OF_LIST;list_of_elements;Seq.mem_undup;Seq2.mem_flatten]
THEN MRESA_TAC MEM_LIST_OF_SET[`s`]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM;MEM_EXISTS_EL;node_set;set_of_orbits;GSYM node]
THEN GEN_TAC
THEN EQ_TAC;


RESA_TAC
THEN THAYTHE_ASM_TAC(17-2)[`x'`]
THEN THAYTHE_ASM_TAC(18-1)[`x'`]
THEN DICH_TAC (23-14)
THEN RESA_TAC
THEN THAYTHE_TAC(23-17)[`i`]
THEN GEXISTS_TAC`(face_map H POWER i) x'`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC Hypermap.lemma_dart_invariant_power_face
THEN ASM_REWRITE_TAC[];



STRIP_TAC
THEN MRESA_TAC Hypermap_and_fan.DART_EQ_UNIONS[`H`]
THEN REMOVE_ASSUM_TAC
THEN REMOVE_ASSUM_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC(15-6)
THEN REWRITE_TAC[UNIONS;IN_ELIM_THM]
THEN STRIP_TAC
THEN GEXISTS_TAC`f y`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;

 

GEXISTS_TAC`y`
THEN ASM_REWRITE_TAC[face]
;


DICH_TAC 0
THEN ASM_REWRITE_TAC[face]
THEN MRESAL_TAC Hypermap_and_fan.FINITE_ORBIT_MAP[`dart H`;`face_map H`;`y`;`CARD(face H y)`][Hypermap.face_map_and_darts;GSYM face]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[IN_ELIM_THM]
THEN STRIP_TAC
THEN GEXISTS_TAC`k`
THEN ASM_REWRITE_TAC[]
THEN THAYTHE_TAC(18-2)[`y`]
THEN THAYTHE_TAC(18-1)[`y`]
THEN THAYTHE_TAC(22-18)[`k`];



MRESA_TAC List_hypermap.uniq_list_of_elements[`L`]
THEN MRESA_TAC Seq2.card_set_of_list_uniq[`list_of_elements L`]
THEN MRESA_TAC List_hypermap.size_list_of_nodes[`L`]
THEN GSUBGOAL_THEN`iso H (hypermap_of_list L)`ASSUME_TAC;



REWRITE_TAC[iso]
THEN GEXISTS_TAC`(\x. node H x, node H (face_map H x))`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC List_hypermap.components_hypermap_of_list[`L`]
;



REWRITE_TAC[BIJ;INJ;SURJ]
THEN GSUBGOAL_THEN`(!x. x IN dart H ==> node H x,node H (face_map H x) IN darts_of_list L)`ASSUME_TAC
;




REPEAT STRIP_TAC
THEN REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST;MEM_LIST_DARTS]
THEN DICH_TAC 0
THEN MRESA_TAC Hypermap_and_fan.DART_EQ_UNIONS[`H`]
THEN REMOVE_ASSUM_TAC
THEN REMOVE_ASSUM_TAC
THEN SYM_DICH_TAC(21-6)
THEN REWRITE_TAC[UNIONS;IN_ELIM_THM]
THEN STRIP_TAC
THEN MRESA_TAC MEM_LIST_OF_SET[`s`]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM;MEM_EXISTS_EL;node_set;set_of_orbits;GSYM node]
THEN GEXISTS_TAC`f y`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;

 

GEXISTS_TAC`y`
THEN ASM_REWRITE_TAC[face]
;



DICH_TAC 1
THEN ASM_REWRITE_TAC[face]
THEN MRESAL_TAC Hypermap_and_fan.FINITE_ORBIT_MAP[`dart H`;`face_map H`;`y`;`CARD(face H y)`][Hypermap.face_map_and_darts;GSYM face]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[IN_ELIM_THM]
THEN STRIP_TAC
THEN GEXISTS_TAC`k`
THEN ASM_REWRITE_TAC[List_hypermap.size_list_pairs;GSYM Seq.size]
THEN ASM_REWRITE_TAC[List_hypermap.size_list_pairs;Seq.size]
THEN THAYTHE_ASM_TAC(25-2)[`y`]
THEN THAYTHE_ASM_TAC(26-1)[`y`]
THEN THAYTHE_ASM_TAC(31-26)[`k`]
THEN DICH_TAC(32-26)
THEN ASM_REWRITE_TAC[List_hypermap.size_list_pairs;GSYM Seq.size]
THEN STRIP_TAC
THEN MRESA_TAC Seq.size_rot[`1`;`f y`]
THEN MRESAL_TAC Seq.size1_zip[`f y`;`rot 1(f y)`][ARITH_RULE`a<=a:num`;Seq.size]
THEN MRESA_TAC Seq2.EL_zip[`f y`;`rot 1(f y)`;`k`]
THEN ASM_REWRITE_TAC[PAIR_EQ;list_pairs]
THEN MRESA_TAC CONS_HD_TL[`f y`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[Seq.rot1_cons;GSYM Seq.cats1;GSYM Seq2.APPEND_cat;EL_APPEND]
THEN MRESA_TAC LENGTH_TL[`f y`]
THEN DICH_TAC 36
THEN REWRITE_TAC[is_restricted]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`y`]
THEN ASM_REWRITE_TAC[GSYM Seq.size]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b /\ 3<=b ==> (a< b-1/\ SUC a<b)\/ (a= b-1 /\ SUC (b-1)=b/\ 0<b)`)[`k`;`CARD(face H y)`];


ASM_REWRITE_TAC[EL_TL]
THEN THAYTHEL_TAC(46-30)[`SUC k`][COM_POWER;o_DEF;ARITH_RULE`a+1=SUC a`;]
;



REWRITE_TAC[ARITH_RULE`~(a<a:num)/\ a-a=0`;EL;HD;GSYM COM_POWER]
THEN ONCE_REWRITE_TAC[Hypermap.iterate_map_valuation]
THEN ASM_REWRITE_TAC[Hypermap.lemma_face_cycle]
THEN THAYTHEL_TAC(47-30)[`0`][EL;POWER;I_DEF];



ASM_REWRITE_TAC[]
THEN STRIP_TAC;


STRIP_TAC;


ASM_REWRITE_TAC[PAIR_EQ;list_pairs]
THEN REPEAT RESA_TAC
THEN MATCH_MP_TAC ONE_TO_ONE_DART
THEN GEXISTS_TAC`H`
THEN ASM_REWRITE_TAC[];



REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST;MEM_LIST_DARTS]
THEN MRESA_TAC MEM_LIST_OF_SET[`s`]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM;node_set;set_of_orbits;GSYM node;]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN RESA_TAC
THEN THAYTHE_TAC (25-2)[`x''`]
THEN THAYTHE_TAC (25-1)[`x''`]
THEN THAYTHE_TAC (0)[`x`]
THEN GEXISTS_TAC`(face_map H POWER i) x''`
THEN REWRITE_TAC[COM_POWER;o_DEF]
THEN MATCH_MP_TAC Hypermap.lemma_dart_invariant_power_face
THEN ASM_REWRITE_TAC[];



 GSUBGOAL_THEN`
!x. x IN dart H
     ==> e_list_ext L (node H x,node H (face_map H x)) =
 node H (edge_map H x),node H (face_map H (edge_map H x))`ASSUME_TAC;


REPEAT RESA_TAC
THEN THAYTHEL_ASM_TAC 1[`x`][List_hypermap.darts_of_list;IN_SET_OF_LIST]
;


MRESA_TAC Lp_gen_theory.e_list_ext_eq_e_list[`L`;`(node H x,node H (face_map H x))`]
THEN REWRITE_TAC[e_list;]
THEN MRESA_TAC SYM_LIST_DART[`node_map H (face_map H x)`;`H`;`x`]
THEN SYM_DICH_TAC 0
THEN DICH_TAC 24
THEN REWRITE_TAC[Hypermap.edge_map_convolution;is_restricted;o_DEF]
THEN RESA_TAC;




GSUBGOAL_THEN`!x. x IN dart H
     ==> f_list_ext L (node H x,node H (face_map H x)) =
 node H (face_map H x),node H (face_map H (face_map H x))`ASSUME_TAC
;


REPEAT RESA_TAC
THEN THAYTHEL_ASM_TAC 2[`x`][]
;


ASM_REWRITE_TAC[List_hypermap.f_list_ext;List_hypermap.f_list;Hypermap.res;]
THEN REWRITE_TAC[List_hypermap.darts_of_list;IN_SET_OF_LIST;MEM_LIST_DARTS]
THEN DICH_TAC (24-22)
THEN MRESA_TAC Hypermap_and_fan.DART_EQ_UNIONS[`H`]
THEN REMOVE_ASSUM_TAC
THEN REMOVE_ASSUM_TAC
THEN SYM_DICH_TAC(24-6)
THEN REWRITE_TAC[UNIONS;IN_ELIM_THM]
THEN STRIP_TAC
THEN MRESA_TAC MEM_LIST_OF_SET[`s`]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM;MEM_EXISTS_EL;node_set;set_of_orbits;GSYM node]
THEN GSUBGOAL_THEN`MEM (list_pairs (f y)) (list_of_faces L)` ASSUME_TAC;



REWRITE_TAC[list_of_faces;MEM_MAP]
THEN GEXISTS_TAC`f y`
THEN ASM_REWRITE_TAC[]
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[IMAGE;IN_ELIM_THM;MEM_EXISTS_EL;node_set;set_of_orbits;GSYM node]
THEN GEXISTS_TAC`y`
THEN ASM_REWRITE_TAC[]
;


GSUBGOAL_THEN`MEM (node H x,node H (face_map H x)) (list_pairs (f y))`ASSUME_TAC
;


DICH_TAC 2
THEN ASM_REWRITE_TAC[face]
THEN MRESAL_TAC Hypermap_and_fan.FINITE_ORBIT_MAP[`dart H`;`face_map H`;`y`;`CARD(face H y)`][Hypermap.face_map_and_darts;GSYM face]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[IN_ELIM_THM;MEM_EXISTS_EL]
THEN STRIP_TAC
THEN GEXISTS_TAC`k`
THEN ASM_REWRITE_TAC[List_hypermap.size_list_pairs;GSYM Seq.size]
THEN ASM_REWRITE_TAC[List_hypermap.size_list_pairs;Seq.size;]
THEN THAYTHE_ASM_TAC(29-2)[`y`]
THEN THAYTHE_ASM_TAC(30-1)[`y`]
THEN THAYTHE_ASM_TAC(31-26)[`k`]
THEN DICH_TAC(32-26)
THEN ASM_REWRITE_TAC[List_hypermap.size_list_pairs;GSYM Seq.size]
THEN STRIP_TAC
THEN MRESA_TAC Seq.size_rot[`1`;`f y`]
THEN MRESAL_TAC Seq.size1_zip[`f y`;`rot 1(f y)`][ARITH_RULE`a<=a:num`;Seq.size]
THEN MRESA_TAC Seq2.EL_zip[`f y`;`rot 1(f y)`;`k`]
THEN ASM_REWRITE_TAC[PAIR_EQ;list_pairs]
THEN MRESA_TAC CONS_HD_TL[`f y`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[Seq.rot1_cons;GSYM Seq.cats1;GSYM Seq2.APPEND_cat;EL_APPEND]
THEN MRESA_TAC LENGTH_TL[`f y`]
THEN DICH_TAC 40
THEN REWRITE_TAC[is_restricted]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`y`]
THEN ASM_REWRITE_TAC[GSYM Seq.size]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b /\ 3<=b ==> (a< b-1/\ SUC a<b)\/ (a= b-1 /\ SUC (b-1)=b/\ 0<b)`)[`k`;`CARD(face H y)`];


ASM_REWRITE_TAC[EL_TL]
THEN THAYTHEL_TAC(50-34)[`SUC k`][COM_POWER;o_DEF;ARITH_RULE`a+1=SUC a`;]
;



REWRITE_TAC[ARITH_RULE`~(a<a:num)/\ a-a=0`;EL;HD;GSYM COM_POWER]
THEN ONCE_REWRITE_TAC[Hypermap.iterate_map_valuation]
THEN ASM_REWRITE_TAC[Hypermap.lemma_face_cycle]
THEN THAYTHEL_TAC(51-34)[`0`][EL;POWER;I_DEF];


DICH_TAC(29-21)
THEN REWRITE_TAC[darts_of_list;IN_SET_OF_LIST]
THEN STRIP_TAC
THEN DICH_ASM_TAC(29-11)[good_list]
THEN MRESA_TAC List_hypermap.find_face_eq[`L`;`(node H x,node H (face_map H x))`;`(list_pairs (f y))`]
THEN THAYTHE_ASM_TAC (33-2)[`y`]
THEN THAYTHE_ASM_TAC (34-1)[`y`]
THEN MRESA_TAC List_hypermap.next_el_list_pairs[`node H x`;`node H (face_map H x)`;`f y`]
THEN ASM_REWRITE_TAC[PAIR_EQ;list_pairs]
THEN MRESAL_TAC Hypermap.lemma_in_face[`H`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN DICH_TAC (41-23)
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESA_TAC Hypermap.lemma_face_identity[`H`;`y`;`x`]
THEN DICH_TAC 2
THEN SYM_DICH_TAC 0
THEN GABBREV_TAC`z=face_map H x`
THEN ASM_REWRITE_TAC[face]
THEN MRESAL_TAC Hypermap_and_fan.FINITE_ORBIT_MAP[`dart H`;`face_map H`;`y`;`CARD(face H y)`][Hypermap.face_map_and_darts;GSYM face]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[IN_ELIM_THM]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC(43-33)[`k`]
THEN ASM_REWRITE_TAC[Seq2.next_el]
THEN DICH_TAC(44-33)
THEN ASM_REWRITE_TAC[List_hypermap.size_list_pairs;GSYM Seq.size]
THEN STRIP_TAC
THEN MRESA_TAC Seq2.EL_nth[`node H ((face_map H POWER k) y)`;`f y`;`k`]
THEN MRESA_TAC Seq.index_uniq[`node H ((face_map H POWER k) y)`;`k`;`f y`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN RESA_TAC
THEN DICH_TAC 45
THEN REWRITE_TAC[is_restricted]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`y`]
THEN ASM_REWRITE_TAC[GSYM Seq.size]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b /\ 3<=b ==> (~(a= b-1)/\ a+1<b)\/ (a= b-1 /\ SUC (b-1)=b/\ 0<b)`)[`k`;`CARD(face H y)`];



MRESA_TAC Seq2.EL_nth[`node H ((face_map H POWER k) y)`;`f y`;`k+1`]
THEN SYM_DICH_TAC 0
THEN THAYTHE_TAC(55-42)[`k+1`]
THEN REWRITE_TAC[ARITH_RULE`k+1= SUC k`;COM_POWER;o_DEF];


REWRITE_TAC[GSYM Seq.nth0]
THEN MRESA_TAC Seq2.EL_nth[`node H ((face_map H POWER k) y)`;`f y`;`0`]
THEN SYM_DICH_TAC 0
THEN ONCE_REWRITE_TAC[Hypermap.iterate_map_valuation]
THEN ASM_REWRITE_TAC[Hypermap.lemma_face_cycle]
THEN THAYTHEL_TAC(56-42)[`0`][EL;POWER;I_DEF]
;



REPEAT RESA_TAC
;


THAYTHE_TAC 2[`x`]
;


MRESA_TAC Hypermap.lemma_dart_invariant[`H`;`x`]
THEN DICH_ASM_TAC (27-12)[good_list]
THEN MRESAL_TAC List_hypermap.n_eq_e_fi[`L`][o_DEF]
THEN MRESA_TAC Hypermap.lemma_dart_inveriant_under_inverse_maps[`H`;`x`]
THEN THAYTHEL_ASM_TAC(34-23)[`inverse (face_map H) x`][Lvducxu.HYP_MAPS_INVS]
THEN SYM_DICH_TAC 1
THEN MRESAL_TAC List_hypermap.f_list_ext_inverse_works[`L`][FUN_EQ_THM;I_DEF;o_DEF]
THEN THAYTHEL_TAC (36-22)[`inverse (face_map H) x`][Lvducxu.HYP_MAPS_INVS]
THEN DICH_TAC 36
THEN REWRITE_TAC[Hypermap.edge_map_convolution;is_restricted;o_DEF;]
THEN RESA_TAC
THEN REWRITE_TAC[Lvducxu.HYP_MAPS_INVS]
;


THAYTHE_TAC 1[`x`]
;


ASM_REWRITE_TAC[]
THEN MRESA_TAC Hypermap_iso.iso_imp_hyp_iso[`H`;`(hypermap_of_list L)`]
THEN MRESAL_TAC Hypermap_iso.iso_number_of_nodes[`f'`;`(hypermap_of_list L)`;`H`][number_of_nodes]]);;



 end;;





load_end __FILE__;;