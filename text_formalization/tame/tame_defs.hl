(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Definitions                                                                *)
(* Chapter: Tame Hypermap                                                     *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2010-02-27                                                           *)
(* ========================================================================== *)

(*
Definitions file for Tame Hypermap 
*)

flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "fan/fan_defs.hl";;
flyspeck_needs "packing/pack_defs.hl";;

module Tame_defs  = struct



  let new_definition' t = 
    if Hales_tactic.has_stv t 
    then (Print_types.print_term_types t; failwith "new_definition has stv") 
    else new_definition t;;





(*
let edge_nondegenerate = new_definition `edge_nondegenerate (H:(A)hypermap)  
   <=> !(x:A).(x IN dart H) ==> ~ (edge_map H x = x)`;;
*)

let is_edge_nondegenerate = new_definition `is_edge_nondegenerate (H:(A)hypermap) <=> 
  (!x:A. x IN dart H ==> ~(edge_map H x = x))`;;

let is_node_nondegenerate = new_definition `is_node_nondegenerate (H:(A)hypermap) <=> 
   (!x:A. x IN dart H ==> ~(node_map H x = x))`;;



(* no_loops does not restrict x,y to be darts.  But edge H is the
   identitiy outside darts, so this is OK. *)

let no_loops = new_definition' `no_loops (H:(A) hypermap) <=> ! (x:A) (y:A). x IN edge H y /\ x IN node H y ==> x = y`;;  

(* this definition is more complicated than it needs to be.  It is
   better to use hypermap.hl is_no_double_joints *)

(*
  let hypermap_no_double_joins = new_definition 
  `hypermap_no_double_joins (H:(A) hypermap) <=> 
  ! (x:A) (y:A) (z:A) (t:A) (u:A) (v:A). x IN node H z /\ y IN (edge H x INTER node H t) /\ ~ (x = y) 
  /\ ~(z IN node H t) /\ u IN node H z /\ v IN (edge H u INTER node H t) 
  /\ ~(u = v) ==>  x IN edge H u`;; 
*)

let is_no_double_joints = new_definition' `is_no_double_joints (H:(A)hypermap) 
   <=> (!x y. x IN dart H /\ y IN node H x /\ edge_map H y IN node H (edge_map H x) ==> x = y)`;;

let exceptional_face = new_definition' `exceptional_face (H:(A)hypermap) (x:A) <=> CARD (face H x) >= 5`;;

let set_of_triangles_meeting_node = new_definition' 
   `set_of_triangles_meeting_node (H:(A)hypermap) (x:A) = 
         {face H (y:A) |y | y IN dart H /\ CARD (face H y) = 3 /\  y IN node H x }`;;

let set_of_quadrilaterals_meeting_node = new_definition' 
    `set_of_quadrilaterals_meeting_node (H:(A)hypermap) (x:A) = 
     {face (H:(A)hypermap) (y:A)|y | y IN dart H /\ CARD (face H y) = 4 /\ y IN node H x}`;;

let set_of_exceptional_meeting_node = new_definition' 
  `set_of_exceptional_meeting_node (H:(A)hypermap) (x:A) =
  {face H (y:A) | y | (y IN (dart H)) /\ (CARD (face H y) >= 5) /\ (y IN node H x)}`;;

let set_of_face_meeting_node = new_definition' 
  `set_of_face_meeting_node (H:(A)hypermap) (x:A) = 
   {face H (y:A)|y| y IN dart H /\ y IN node H x}`;;

let type_of_node = new_definition' 
  `type_of_node (H:(A)hypermap) (x:A) = 
   (CARD (set_of_triangles_meeting_node H x), 
    CARD (set_of_quadrilaterals_meeting_node H x), 
    CARD (set_of_exceptional_meeting_node H x ))`;;

let node_type_exceptional_face = new_definition' 
  `node_type_exceptional_face (H:(A)hypermap) (x:A) <=> 
   exceptional_face H x /\ (CARD (node H x) = 6) ==> type_of_node H x = (5,0,1)`;;

let node_exceptional_face = new_definition' 
  `node_exceptional_face (H:(A)hypermap) (x:A) <=> 
    exceptional_face H x ==> CARD (node H x) <= 6`;;


let tgt = new_definition' `tgt = #1.541`;;

(* b table constants corrected 2010-06-17 *)

    let b_tame = new_definition' 
  `b_tame p q= 
           if p,q =0,3 then #0.618
    else if p,q=0,4 then #0.97
    else if p,q=1,2 then #0.656
    else if p,q=1,3 then #0.618
    else if p,q=2,1 then #0.797
    else if p,q=2,2 then #0.412
    else if p,q=2,3 then #1.2851
    else if p,q=3,1 then #0.311
    else if p,q=3,2 then #0.817
    else if p,q=4,0 then #0.347
    else if p,q=4,1 then #0.366
    else if p,q=5,0 then #0.04
    else if p,q=5,1 then #1.136
    else if p,q=6,0 then #0.686
    else if p,q=7,0 then #1.450
    else tgt`;;


let d_tame = new_definition' `d_tame n = 
     if n = 3 then &0 else 
     if n = 4 then #0.206 else
     if n = 5 then #0.4819 else 
     if n = 6 then #0.712 else tgt`;;  

(* tchales, changed n=6 case from 0.7578, 1/15/2012 to match May 2011
   redo in main_estimate_ineq.hl and graph generator.  *)

let a_tame = new_definition' `a_tame = #0.63`;;

let total_weight = new_definition' 
  `total_weight (H:(A)hypermap) (w:(A->bool)->real) = sum (face_set H) w`;;

let adm_1 = new_definition' 
  `adm_1 (H:(A)hypermap) (w:(A->bool)->real) <=> (!x:A. x IN dart H ==> w (face H x)  >= d_tame (CARD (face H x)))`;;

let adm_2 = new_definition' 
  `adm_2 (H:(A)hypermap) (w:(A->bool)->real) <=> 
  (!x:A. x IN dart H /\ (CARD (set_of_exceptional_meeting_node H x) = 0) ==>
     ((sum (set_of_face_meeting_node H x) w) >=
	(b_tame (CARD (set_of_triangles_meeting_node H x)) (CARD (set_of_quadrilaterals_meeting_node H x)))))`;;

let adm_3 = new_definition' 
  `adm_3 (H:(A)hypermap) (w:(A->bool)->real) <=>
  (!x:A. x IN dart H /\ type_of_node H x = 5, 0, 1 ==> 
     (sum (set_of_triangles_meeting_node H x) w)  >= a_tame)`;;

let admissible_weight = new_definition' 
  `admissible_weight (H:(A)hypermap) (w:(A->bool)->real) <=> 
  adm_1 H w /\ adm_2 H w /\ adm_3 H w`;;


(* def of tame *)

let tame_1 = new_definition' 
  `tame_1 (H:(A)hypermap) <=> 
  plain_hypermap (H:(A)hypermap) /\ planar_hypermap (H:(A)hypermap)`;;

let tame_2 = new_definition' 
  `tame_2 (H:(A)hypermap) <=> 
  connected_hypermap H /\ simple_hypermap H`;;

let tame_3 = new_definition' 
  `tame_3 (H:(A)hypermap)  <=>  is_edge_nondegenerate H `;;

let tame_4 = new_definition' 
  `tame_4 (H:(A)hypermap)  <=> no_loops H`;;

let tame_5a = new_definition' 
  `tame_5a (H:(A)hypermap)  <=> is_no_double_joints H`;;

let tame_8 = new_definition' 
  `tame_8 (H:(A)hypermap)  <=> number_of_faces H >= 3`;;

let tame_9a = new_definition' 
  `tame_9a (H:(A)hypermap)  <=> 
  (!(x:A). x IN dart H ==> CARD (face H x) >= 3 /\ CARD (face H x) <= 6)`;;

let tame_10 = new_definition' 
  `tame_10 (H:(A)hypermap) <=> 
   number_of_nodes H  IN { 13, 14, 15 } `;;

let tame_11a = new_definition' 
  `tame_11a (H:(A)hypermap) <=>
   (!(x:A). x IN dart H ==>  CARD (node H x) >= 3)`;;

let tame_11b = new_definition' 
  `tame_11b (H:(A)hypermap) <=>
   (!(x:A). x IN dart H ==> CARD (node H x) <= 7)`;;

let tame_12o = new_definition' 
 `tame_12o (H:(A)hypermap)  <=> 
  (! (x:A). node_type_exceptional_face H x /\ node_exceptional_face H x)`;;

let tame_13a = new_definition' 
  `tame_13a (H:(A)hypermap) <=>
   (?(w:(A->bool)->real). admissible_weight H w /\ total_weight H w < tgt)`;;

let tame_hypermap = new_definition' 
  `tame_hypermap (H:(A)hypermap) <=> 
   tame_1 H /\ tame_2 H /\ tame_3 H /\ tame_4 H /\ 
  tame_5a H /\ tame_8 H /\ tame_9a H  /\ 
  tame_10 H /\ tame_11a H /\ tame_11b H /\ tame_12o H /\ tame_13a H`;;

let opposite_hypermap = new_definition' 
   `opposite_hypermap (H:(A)hypermap) = 
   hypermap ((dart H),face_map H o node_map H , inverse(node_map H),inverse(face_map H))`;;


let ESTD = new_definition' 
  `ESTD (V:real^3->bool) = {{v,w}| v IN V /\ w IN V /\ ~(v = w) /\ dist(v,w) <= (&2)*h0}`;;

let ECTC = new_definition' 
  `ECTC (V:real^3 -> bool) = {{v,w}| v IN V /\ w IN V /\ ~(v = w) /\ dist(v,w) = &2 }`;;

(*  
let isolated_node = new_definition
  `isolated_node v V E = (set_of_edge v V E = {})`;;
*)

let azim_dart = new_definition' 
  `azim_dart (V,E) (v,w) = if (v=w) then &2 * pi else azim_fan (vec 0) V E v w`;;

let dart1_of_fan = new_definition
  `dart1_of_fan ((V:A->bool),(E:(A->bool)->bool)) =  { (v,w) | {v,w} IN E }`;;

let dart_of_fan = new_definition
  `dart_of_fan (V,E) =
   { (v,v) | v IN V /\ set_of_edge (v:real^3) V E = {} } UNION { (v,w) | {v,w} IN E }`;;

 (* in fan/introduction.hl a dart is a 4-tuple.  Here it is a pair.  Here is the correspondence *)

let extended_dart = new_definition
  `extended_dart (V,E) (v,w) = i_fan (vec 0) V E (vec 0, v, w, w)`;;

let contracted_dart = new_definition
  `contracted_dart (x:A,v:B,w:C,w1:D) = (v,w)`;;

(* e_fan, n_fan, f_fan of fan/introduction.hl, restricted to pairs *)

let e_fan_pair = new_definition' `e_fan_pair ((V:V),(E:E)) (v,w) = ((w:B),(v:A))`;;

let n_fan_pair = new_definition' 
  `n_fan_pair (V,E) (v,w) = v,sigma_fan (vec 0) V E v w`;;

let f_fan_pair = new_definition' 
  `f_fan_pair (V,E) (v,w) = w,(inverse_sigma_fan (vec 0) V E w v)`;;

let hypermap_of_fan  = new_definition
  `hypermap_of_fan (V,E) = 
    (let p = ( \ t. res (t (V,E) ) (dart1_of_fan (V,E)) ) in 
          hypermap( dart_of_fan (V,E) , p e_fan_pair, p n_fan_pair, p f_fan_pair))`;;

let face_set_of_fan = new_definition
  `face_set_of_fan (V,E) = face_set (hypermap_of_fan (V,E))`;;


(* compare fan80 and fan81, which define fully_surrounded *)

let surrounded_node = new_definition
  `surrounded_node (V,E) v = 
  !x. (x IN dart_of_fan (V,E)) /\ (FST x = v) ==> azim_dart (V,E) x < pi`;;

let scriptL = new_definition' 
  `scriptL V = sum V ( \ (v:real^3) . lmfun (norm v  /  &2)) `;;

  let contravening = new_definition
     `contravening V <=> packing V /\ V SUBSET ball_annulus /\  scriptL V > &12 /\ 
      (!W. packing W /\ W SUBSET ball_annulus ==> scriptL W <= scriptL V) /\
      (CARD V = 13 \/ CARD V = 14 \/ CARD V = 15) /\
      (!v. v IN V ==> surrounded_node (V, ESTD V) v) /\
      (!v. v IN V ==> (surrounded_node (V, ECTC V) v \/ (norm v = &2) ))`;;

let topological_component_yfan = new_definition' 
  `topological_component_yfan ((x:real^3),(V:real^3->bool),E) =
      {  connected_component (yfan (x,V,E)) y  | y | y IN yfan (x,V,E) }`;;

(* there is a function dart_leads_into in fan/introduction.hl.  This is a bit simpler. *)

let dart_leads_into1 = new_definition' 
    `dart_leads_into1 (x,V,E) (v,u) = @s.  s IN topological_component_yfan (x,V,E) /\
	(?eps. (eps < &1) /\ 
	   rw_dart_fan x V E (x,v,u,sigma_fan x V E v u) eps  SUBSET s)`;;

let dartset_leads_into = new_definition
  `dartset_leads_into (x,V,E) ds = 
    @s. (!y. (y IN ds) ==> (s=dart_leads_into1 (x,V,E) y))`;;

(* node(x) not needed, use FST x *)

let h_dart = new_definition' `h_dart (x:real^3#B) = norm (FST x)  / &2`;;

let tauVEF = new_definition' `tauVEF (V,E,f) = 
  sum f ( \ x. azim_dart (V,E) x * (&1 + (sol0/pi) * (&1 - lmfun (h_dart x))))   + (pi + sol0)*(&2 - &(CARD(f)))`;;


let restricted_hypermap = new_definition' `restricted_hypermap (H:(A)hypermap) <=> 
   is_no_double_joints H /\  ~(dart H = {}) /\ planar_hypermap H /\ connected_hypermap H /\ 
   plain_hypermap H /\ simple_hypermap H /\ is_edge_nondegenerate H /\ is_node_nondegenerate H /\ 
   (!f.  f IN face_set H ==> CARD(f) >= 3)`;;

(* deprecated 2013-2-22 : Use rho_node1 which has been developed further,
   per -> . 
   perimeterbound -> .  They haven't been developed.
 *)

let rho_node = new_definition' 
  `rho_node (V:A1,E:A2,f:A3#A4->bool) v = @w. (v,w) IN f`;;

let per = new_definition
`per(V,E,f) v k = sum (0..k-1) 
   ( \ i. arcV (vec 0) ((rho_node (V,E,f) POWER i) v) ((rho_node (V,E,f) POWER (i+1)) v))`;;

let perimeterbound = new_definition' `perimeterbound (V,E) = 
  (!f. f IN face_set_of_fan (V,E) ==> 
       sum f (\ (v,w).  arcV (vec 0) (v:real^3) w ) <= &2 * pi)`;;

(* ========================================================================== *)
(* Isabelle Tame Graph Classification *)
(* Basic definitions are here.  Complex definitions are in Import-tame-class. *)
(* ========================================================================== *)

(* Isabelle Tame Graph Definitions *)

let the = new_definition' `the s = @(x:A). (s = SOME x)`;;

let minimal_el = new_recursive_definition list_RECURSION
  `(minimal_el (f:A->num)  [] = CHOICE (UNIV:A->bool)) /\ 
    (minimal_el (f:A->num) ( (x:A) :: xs) = if (xs= []) then (x:A) else
        (let m = minimal_el f xs in (if(f x <= f m) then x else m)))`;;

let min_num = new_definition' `min_num X = (@m. (m:num) IN X /\ (!n. n IN X ==> m <= n))`;;

let min_list = new_definition' `min_list (xs:num list) = min_num (set_of_list xs)`;;

let replace = new_recursive_definition list_RECURSION 
   `(replace x ys [] = []) /\
     replace x ys ( (z:A) :: zs) = 
            if (z = x) then APPEND ys zs else z:: (replace x ys zs)`;;

let rotate1 = new_recursive_definition list_RECURSION
   `rotate1 ([]:A list) = [] /\
     rotate1 ((x:A) :: xs) = APPEND xs [x]`;;

let rotate = new_definition' `rotate (n:num) (xs:A list) = (ITER n rotate1) xs`;;

let split_at_rec = new_recursive_definition list_RECURSION 
 `split_at_rec (c:A) bs [] = (bs,[]) /\
   split_at_rec c bs ((a:A) :: xs) = 
  if (a = c) then (bs,xs) else split_at_rec c (APPEND bs [a]) xs`;;

let split_at = new_definition' `split_at (c:A) xs = split_at_rec c [] xs`;;

let betwn = new_definition' `betwn (vs:A list) (ram1:A) (ram2:A) = 
    (let (pre1,post1) = split_at ram1 vs in
       if (ram2 IN set_of_list post1) then
	 (let (pre2,post2) = split_at ram2 post1 in pre2)
       else (let (pre2,post2) = split_at ram2 pre1 in APPEND post1 pre2))`;;

let cong = new_definition' `(__cong) (f1:A list) f2 <=> ?n. f2 = rotate n f1`;;

let inj_on = new_definition' 
  `inj_on (f:A->B) s = ( !x y. (s x /\ s y /\ (f x = f y)) ==> (x = y))`;;

let rotate_to = new_definition' `rotate_to (vs:A list) v = 
    v :: (APPEND (SND (split_at v vs))  (FST (split_at v vs)))`;;

let rotate_min = new_definition' `rotate_min (vs:num list) = 
  rotate_to vs (min_list vs)`;;  

let nextElem = new_recursive_definition list_RECURSION 
  `nextElem [] (b:A) x = b /\
    nextElem (a :: aas) b x = 
     if (x=a) then (if (aas = []) then b else HD aas) else nextElem aas b x`;;

let nextVertex = new_definition' `nextVertex (vs:num list,f:bool) =
   nextElem vs (HD vs)`;;

let nextVertices = new_definition' 
 `nextVertices (f:(num list # bool)) (n:num) v = 
    ITER n (nextVertex f) v`;;

let faces = new_definition' 
 `faces  = FST:((num)list#bool)list#num#(((num)list#bool)list)list#(num)list -> 
    ((num)list#bool)list`;;

let vertices_set = new_definition' `vertices_set (fs:num list#bool) = 
  set_of_list (FST fs)`;;

let FACE = new_definition'  `Face (a:num list) (b:bool) = (a,b)`;;

let FACES = new_definition' `Faces g = set_of_list (faces g)`;;

let ( GRAPH ) = new_definition' 
  `Graph (fs:((num list # bool)list)) (n:num) (f:((num list # bool) list) list) (h:num list) = 
  (fs,n,f,h)`;;

let setFinal = new_definition' `setFinal (vs:num list ,f:bool) = (vs,T)`;;

let countVertices_def = new_definition'
  `countVertices (g:((num)list#bool)list#num#(((num)list#bool)list)list#(num)list)
  = FST (SND ( g))`;;

let iota = define `iota m (SUC n) = m :: iota (SUC m) n /\ iota m 0 = []`;;

let upt = new_definition' `upt i j = iota i (j-i)`;;

let vertices_graph = new_definition' 
 `vertices_graph g = upt 0 (countVertices g)`;;

let vertices_set2 = new_definition' 
 `vertices_set2 (g:((num)list#bool)list#num#(((num)list#bool)list)list#(num)list) 
  = set_of_list (vertices_graph g)`;;

let faceListAt = new_definition'
  `faceListAt (g:((num)list#bool)list#num#(((num)list#bool)list)list#(num)list) = FST (SND (SND ( g)))`;;

let facesAt = new_definition'
  `facesAt g v = EL v (faceListAt g )`;;

let heights = new_definition' 
  `heights (g:((num)list#bool)list#num#(((num)list#bool)list)list#(num)list) = SND(SND(SND(g)))`;;

let graphl = new_definition'  `graphl n = 
     (let vs = upt 0  n in
      let fs =  [(vs,T);(REVERSE vs,F)] in
	(Graph fs  n (REPLICATE n fs) (REPLICATE n 0)))`;;

let finals = new_definition' `finals g =
   FILTER SND (faces g)`;;

let nonFinals = new_definition' `nonFinals g = 
   FILTER (\f. ~( SND f)) (faces g)`;;

let countNonFinals = new_definition' `countNonFinals g =
   LENGTH (nonFinals g)`;;

let finalGraph = new_definition' `finalGraph g = (nonFinals g = [])`;;

let makeFaceFinalFaceList = new_definition'
  `makeFaceFinalFaceList f fs = replace f [setFinal f] fs`;;

let makeFaceFinal = new_definition'
  `makeFaceFinal f g = 
      Graph 
	(makeFaceFinalFaceList f (faces g))
	(countVertices g)
	(MAP (\fs. makeFaceFinalFaceList f fs) (faceListAt g))
	(heights g)
      `;;

let fgraph = new_definition' `fgraph g = MAP FST (faces g)`;;

let neighbors = new_definition'
  `neighbors g v = MAP (\f. nextVertex f v )  (facesAt g v)`;;

let directedLength = new_definition' `directedLength (f:num list # bool) a b =
  if (a=b) then 0 else LENGTH(betwn(FST f) a b) + 1`;;

let maxGon = new_definition' `maxGon (p:num) = p + 3`;;

let SEED = new_definition'
  `Seed p = graphl (maxGon p)`;;

let RTranCl = new_definition' `RTranCl (g:A -> A list) = 
  UNCURRY    (RTC (\x y.  MEM y (g x)))`;;



end;;

