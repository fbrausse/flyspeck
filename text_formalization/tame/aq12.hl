open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


(* module  Aq12= struct *)

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;


open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;
open Pbflhet;;
open Kbwpbhq;;
open Hojodcm;;
open Aq1;;
open Aq23;;
open Aq4;;
open Aq8;;

let eq_last_next= prove_by_refinement(`!s r. uniq r /\ uniq s /\ (!x. MEM x s<=> MEM x r) /\ (!x. MEM x s==> next_el s x= next_el r x)/\ LAST s= LAST r
==> s=r`,
[
LIST_INDUCT_TAC
THEN SIMP_TAC[MEM;GSYM Tame_list.MEM_EQ_NIL;Seq.cons_uniq]
THEN REPEAT RESA_TAC
THEN GSUBGOAL_THEN`~(r=[])`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC 3
THEN RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Seq.in_nil]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`h`];

MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC 2
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[LAST]
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`t=[]`];

MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC 5
THEN DICH_TAC 4
THEN DICH_TAC 6
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Seq.cons_uniq;MEM]
THEN REPEAT RESA_TAC
THEN THAYTHE_ASM_TAC 0[`HD r`]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`TL r=[]`][HD;TL;List_hypermap.mem_not_nil];

THAYTHE_TAC 1[`x`]
THEN DICH_TAC(11-6)
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC;

MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`TL r=[]`][HD;TL;];

MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC (10-4)
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Seq.cons_uniq;MEM]
THEN REPEAT RESA_TAC;

MRESA_TAC List_hypermap.mem_not_nil[`t`]
THEN THAYTHE_ASM_TAC 1[`x`]
THEN THAYTHE_TAC 0[`h`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[];

DICH_TAC 2
THEN RESA_TAC
THEN MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC (10-1)
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Seq.cons_uniq;MEM;Seq.cons_uniq;HD;TL]
THEN STRIP_TAC
THEN GABBREV_TAC`r1= TL r`
THEN MRESA_TAC Tame_list.MEM_LAST[`t`]

THEN DICH_TAC(12-3)
THEN THAYTHE_ASM_TAC(11-3)[`LAST t`]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN MRESAL_TAC Tame_list.next_el_cat_last2[`[h]`;`t`][GSYM Seq2.APPEND_cat;APPEND;Seq.cons_uniq;Ohcgkfu.sing_not_nil;HD]
THEN MRESA_TAC CONS_HD_TL[`r`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN MRESAL_TAC Tame_list.next_el_cat_last2[`[HD r]`;`r1`][GSYM Seq2.APPEND_cat;APPEND;Seq.cons_uniq;Ohcgkfu.sing_not_nil;HD]
THEN STRIP_TAC
THEN GSUBGOAL_THEN`(!x. MEM x t <=> MEM x r1)`ASSUME_TAC;

MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC (16-12)
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Seq.cons_uniq;MEM;Seq.cons_uniq;HD;TL]
THEN STRIP_TAC
THEN REPEAT RESA_TAC
THEN EQ_TAC;

STRIP_TAC
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c/\ ~(MEM b c)==> ~(a=b)`)[`x`;`h`;`t`]
THEN THAYTHE_TAC 2[`x`];

STRIP_TAC
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c/\ ~(MEM b c)==> ~(a=b)`)[`x`;`h`;`r1`]
THEN THAYTHE_TAC 2[`x`];


ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`a=b==> (c:: a)= (c::b)`)
THEN MATCH_DICH_TAC (16-0)
THEN ASM_REWRITE_TAC[]
THEN REPEAT RESA_TAC
THEN DICH_TAC(16-11)
THEN THAYTHE_ASM_TAC (15-10)[`h`]
THEN MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC (2)
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Seq.cons_uniq;MEM;Seq.cons_uniq;HD;TL]
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`[HD r]`;`t`][GSYM Seq2.APPEND_cat;APPEND;Seq.cons_uniq;Ohcgkfu.sing_not_nil;HD;LAST]
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`[HD r]`;`r1`][GSYM Seq2.APPEND_cat;APPEND;Seq.cons_uniq;Ohcgkfu.sing_not_nil;HD;LAST]
THEN STRIP_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x= LAST t`];

MRESA_TAC Aq4.next_el_last_hd[`t`]
THEN MRESA_TAC Aq4.next_el_last_hd[`r1`];

THAYTHE_TAC(19-15)[`x`]
THEN MRESA_TAC CONS_HD_TL[`r`]
THEN DICH_TAC (1)
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Seq.cons_uniq;MEM;Seq.cons_uniq;HD;TL]
THEN MRESAL_TAC Tame_list.next_el_cat2[`x`;`[HD r]`;`t`][GSYM Seq2.APPEND_cat;APPEND;Seq.cons_uniq;Ohcgkfu.sing_not_nil;HD;LAST]
THEN MRESAL_TAC Tame_list.next_el_cat2[`x`;`[HD r]`;`r1`][GSYM Seq2.APPEND_cat;APPEND;Seq.cons_uniq;Ohcgkfu.sing_not_nil;HD;LAST]
]) ;;

let LAST_parts=prove(`normal_list L N /\
           good_list L /\
           MEM s N /\ parts L s= sp ==> (LAST (LAST sp)) = (LAST s)`,
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.normal_list_uniq_nonnil[`L`;`N`;`s`]
THEN MRESA_TAC Tame_list.parts_nonnil[`L`;`s`]
THEN MRESA_TAC Tame_list.MEM_LAST[`sp`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`s`;`LAST sp`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`sp`]
);;



let indexf_map=prove(`uniq s/\ (!u v. MEM u s /\ MEM v s /\ f u = f v ==> u = v)/\ MEM y s/\ MEM z s
==> indexf (f y) (f z) (MAP f s) =indexf y z s`,
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.uniq_map[`s`;`f`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`y`;`s`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`z`;`s`]
THEN MRESA_TAC Tame_list.indexf_cond[`y`;`z`;`s`]
THEN MRESA_TAC Tame_list.indexf_cond[`f y`;`f z`;`MAP f s`]
THEN MRESA_TAC Tame_list.indexl_map[`s`;`y`;`f`]
THEN MRESA_TAC Tame_list.indexl_map[`s`;`z`;`f`]
THEN MRESAL_TAC Seq.size_map[`f`;`s`][GSYM Tame_list.lower_case]);;


let mem_map_betwn=prove(`uniq s/\ (!u v. MEM u s /\ MEM v s /\ f u = f v ==> u = v)/\ MEM y s/\ MEM z s
/\ ~(y=z)
==> (!x. MEM x (MAP f (betwn s y z)) <=> MEM x (betwn (MAP f s) (f y) (f z)))`,

REPEAT RESA_TAC
THEN REWRITE_TAC[MEM_MAP]
THEN MRESA_TAC Tame_list.uniq_map[`s`;`f`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`y`;`s`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`z`;`s`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN THAYTHE_ASM_TAC (8-1)[`y`;`z`]
THEN EQ_TAC
THEN RESA_TAC
THENL[

CHANGE_TAC`d=x'`
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`MAP f s`;`f y`;`f d`;`f z`]
THEN MRESA_TAC indexf_map[`f`;`y`;`z`;`s`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`d`]
THEN MRESA_TAC indexf_map[`f`;`y`;`d`;`s`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`d`;` z`];

MRESAL_TAC Tame_list.betwn_mem[`MAP f s`;`f y`;`f z`;`x`][MEM_MAP]
THEN CHANGE_TAC`d=x'`
THEN GEXISTS_TAC`d`
THEN DICH_TAC 2
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`MAP f s`;`f y`;`f d`;`f z`]
THEN MRESA_TAC indexf_map[`f`;`y`;`z`;`s`]
THEN MRESA_TAC indexf_map[`f`;`y`;`d`;`s`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`d`;` z`]]);;





let last_map_betwn=prove(`uniq s/\ (!u v. MEM u s /\ MEM v s /\ f u = f v ==> u = v)/\ MEM y s/\ MEM z s
/\ ~(y=z)
==> LAST (MAP f (betwn s y z)) = LAST (betwn (MAP f s) (f y) (f z))`,

REPEAT RESA_TAC
THEN REWRITE_TAC[MEM_MAP]
THEN MRESA_TAC Tame_list.uniq_map[`s`;`f`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`y`;`s`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`z`;`s`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN THAYTHE_ASM_TAC (8-1)[`y`;`z`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`betwn s y z=[]`]
THENL[
MRESA_TAC Aq4.betwn_eq_nil[`y`;`z`;`s`]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`s`;`y`;`f`]
THEN MRESAL_TAC Tame_list.betwn_nil[`MAP f s`;`f y`;`f z`][MAP];

MRESA_TAC Tame_list.LAST_MAP[`betwn s y z`;`f`]
THEN MRESA_TAC Aq23.next_last_betwn[`s`;`y`;`z`]
THEN MRESAL_TAC Tame_list.betwn_nil[`MAP f s`;`f y`;`f z`][MAP]
THEN MRESAL_TAC Tame_list.betwn_nil[`s`;`y`;`z`][MAP]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`s`;`y`;`f`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`s`]
THEN THAYTHE_ASM_TAC (16-9)[`z`;`next_el s y`]
THEN MRESA_TAC Aq23.next_last_betwn[`MAP f s`;`f y`;`f z`]
THEN MRESA_TAC Tame_list.MEM_LAST[`betwn s y z`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`LAST(betwn s y z)`]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`s`;`(LAST (betwn s y z))`;`f`]
THEN MRESA_TAC Seq2.next_el_inj[`MAP f s`;`LAST (betwn (MAP f s) (f y) (f z))`;`f (LAST (betwn s y z))`]]);;



let hd_map_betwn=prove(`uniq s/\ (!u v. MEM u s /\ MEM v s /\ f u = f v ==> u = v)/\ MEM y s/\ MEM z s
/\ ~(y=z:A)
==> HD (MAP f (betwn s y z)) = HD (betwn (MAP f s) (f y) (f z))`,
REPEAT RESA_TAC
THEN REWRITE_TAC[MEM_MAP]
THEN MRESA_TAC Tame_list.uniq_map[`s`;`f`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`y`;`s`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`z`;`s`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN THAYTHE_ASM_TAC (8-1)[`y`;`z`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`betwn s y z=[]`]
THENL[
MRESA_TAC Aq4.betwn_eq_nil[`y`;`z`;`s`]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`s`;`y`;`f`]
THEN MRESAL_TAC Tame_list.betwn_nil[`MAP f s`;`f y`;`f z`][MAP;HD];

MRESA_TAC Tame_list.HD_MAP[`betwn s y z`;`f`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`s`;`y`;`z`]
THEN MRESAL_TAC Tame_list.betwn_nil[`MAP f s`;`f y`;`f z`][MAP]
THEN MRESAL_TAC Tame_list.betwn_nil[`s`;`y`;`z`][MAP]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`s`;`y`;`f`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`s`]
THEN THAYTHE_ASM_TAC (16-9)[`z`;`next_el s y`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`MAP f s`;`f y`;`f z`]]);;




let next_el_map_betwn= prove_by_refinement(
`uniq s/\ (!u v. MEM u s /\ MEM v s /\ f u = f v ==> u = v)/\ MEM y s/\ MEM z s
/\ ~(y=z:A)
==> (!x. MEM x (MAP f (betwn s y z))
      ==> next_el (MAP f (betwn s y z)) x =
          next_el (betwn (MAP f s) (f y) (f z)) x)`,
[

REPEAT RESA_TAC
THEN REWRITE_TAC[MEM_MAP]
THEN MRESA_TAC Tame_list.uniq_map[`s`;`f`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`y`;`s`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`z`;`s`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN THAYTHE_ASM_TAC (9-1)[`y`;`z`]
THEN DICH_TAC(10-4)
THEN REWRITE_TAC[MEM_MAP]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN GSUBGOAL_THEN`(!u v.
           MEM u (betwn s y z) /\ MEM v (betwn s y z) /\ f u = f v ==> u = v)`
ASSUME_TAC;

REPEAT RESA_TAC
THEN MATCH_DICH_TAC (14-9)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`u`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`v`];

MRESA_TAC Tame_list.next_el_MEM_map[`betwn s y z`;`d`;`f`]
THEN MRESA_TAC last_map_betwn[`s`;`y`;`f`;`z`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`betwn s y z=[]`];

DICH_TAC (15-10)
THEN ASM_REWRITE_TAC[MEM];

MRESA_TAC Aq23.next_last_betwn[`s`;`y`;`z`]
THEN MRESA_TAC mem_map_betwn[`s`;`y`;`f`;`z`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`d`;`betwn s y z`]
THEN THAYTHE_TAC 1[`f d`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`(betwn (MAP f s) (f y) (f z))`;`f d`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`d= LAST(betwn s y z)`];

MRESA_TAC Aq4.next_el_last_hd[`betwn s y z`]
THEN MRESA_TAC Tame_list.LAST_MAP[`betwn s y z`;`f`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`f y`;`f z`;`MAP f s`]
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn (MAP f s) (f y) (f z)`]
THEN MRESA_TAC hd_map_betwn[`s`;`y`;`f`;`z`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Tame_list.HD_MAP[`betwn s y z`;`f`];

MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`s`;`y`;`z`;`d`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`y`;`z`;`d`;`s`]
THEN MRESA_TAC Tame_list.MEM_LAST[`betwn s y z`]
THEN THAYTHE_ASM_TAC(23-12)[`d`;`LAST (betwn s y z)`;]
THEN MRESA_TAC Tame_list.LAST_MAP[`betwn s y z`;`f`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`MAP f s`;`f y`;`f z`;`f d`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`f y`;`f z`;`f d`;`MAP f s`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.next_el_MEM_map[`s`;`d`;`f`]
]);;




let map_betwn= prove_by_refinement(
`uniq s/\ (!u v. MEM u s /\ MEM v s /\ f u = f v ==> u = v)/\ MEM y s/\ MEM z s
/\ ~(y=z)
==> MAP f (betwn s y z)= (betwn (MAP f s) (f y) (f z))`,
[
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.uniq_map[`s`;`f`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`y`;`s`]
THEN MRESA_TAC Tame_list.MEMf_MAP[`f`;`z`;`s`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN THAYTHE_ASM_TAC (8-1)[`y`;`z`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`f y`;`f z`;`MAP f s`]
THEN MATCH_MP_TAC eq_last_next
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC last_map_betwn[`s`;`y`;`f`;`z`]
THEN REPEAT RESA_TAC;

MRESA_TAC Tame_list.uniq_map[`betwn s y z`;`f`]
THEN MATCH_DICH_TAC 0
THEN REPEAT RESA_TAC
THEN MATCH_DICH_TAC (14-9)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`u`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`v`];

MRESA_TAC mem_map_betwn[`s`;`y`;`f`;`z`];

MRESA_TAC next_el_map_betwn[`s`;`y`;`f`;`z`]
THEN MATCH_DICH_TAC 0
THEN ASM_REWRITE_TAC[]]);;



let FST_HD_MAP_betwn=prove(`!y:A#A. normal_list L N /\
           good_list L /\
           MEM s N /\ parts L s= sp 
/\ uniq (MAP (FST o HD) sp)
/\ MEM py sp/\ MEM pz sp
/\ MEM y py /\ MEM z pz
/\ ~(FST y= FST z)
==> 
MAP (FST o HD) (betwn sp py pz) = betwn (MAP (FST o HD) sp) (FST y) (FST z)`,

REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`s`;`py`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`s`;`pz`]
THEN MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN MRESA_TAC Aq8.uniq_imp_inj[`(FST o HD):(A#A)list->A`;`sp`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`s`;`py`;`y`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`s`;`pz`;`z`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`py=pz`]
THENL[
DICH_TAC(22-9)
THEN RESA_TAC;

MRESAL_TAC map_betwn[`sp`;`py`;`(FST o HD):(A#A)list->A`;`pz`][o_DEF]]);;


let next_eq_power_betwn_2list= prove_by_refinement(`  uniq s/\ uniq r
/\ MEM z s /\ LAST s=z
/\(!x. MEM x s /\ ~(x=z) ==> next_el s x = next_el r x)
==> (!n. n<sizel s  ==> ((next_el s) POWER n) (HD s) =  ((next_el r) POWER n) (HD s))`,
[
RESA_TAC
THEN INDUCT_TAC;

REWRITE_TAC[POWER];


REWRITE_TAC[COM_POWER;o_DEF]
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a< b==> a<b`)[`n`;`sizel s`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`z`]
THEN MRESA_TAC Tame_list.indexl_LAST[`s`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`z`;`s`]
THEN GABBREV_TAC`d=(next_el r POWER n) (HD s)`
THEN MRESA_TAC Tame_list.MEM_HD[`s`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d=z`];

MRESA_TAC Tame_list.next_eln_indexf[`n`;`HD s`;`d`;`s`]
THEN DICH_TAC (21-12)
THEN DICH_TAC 0
THEN ARITH_TAC;


MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`HD s`;`s`;`n`]
THEN THAYTHE_TAC (10)[`d`]
]);;


let indexf_eq_power_betwn_2list= prove(`(!x. MEM x s==> MEM x r) /\ uniq s/\ uniq r
/\ MEM z s /\ LAST s=z
/\(!x. MEM x s /\ ~(x=z) ==> next_el s x = next_el r x)
==> (!x. MEM x s ==> indexf (HD s) x r= indexf  (HD s) x s)`,
REPEAT RESA_TAC
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`z`]
THEN MRESA_TAC Tame_list.MEM_HD[`s`]
THEN THAYTHE_ASM_TAC (8)[`x`]
THEN THAYTHE_ASM_TAC (0)[`HD s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`HD s`;`x`]
THEN MRESA_TAC next_eq_power_betwn_2list[`z`;`r`;`s`]
THEN THAYTHE_TAC 0[`indexf (HD s) x s`]
THEN MRESA_TAC Tame_list.indexf_n[`HD s`;`x`;`s`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`z`;`s`]
THEN MRESA_TAC Seq.uniq_leq_size[`s`;`r`]
THEN DICH_TAC 0
THEN DICH_TAC (14-11)
THEN ARITH_TAC);;







let uniq_flatten_betwn=prove(`!y:(A)list. uniq (flatten r) /\ MEM y r /\ MEM z r/\ ~(y=z)/\ all (\l. ~(l = [])) r ==> uniq (flatten (betwn r y z))`,
REPEAT RESA_TAC
THEN MRESAL_TAC Aq1.all_uniq_flatten[`I:(A)list -> (A)list`;`(betwn r y z)`][Seq.map_id;I_DEF]
THEN MATCH_DICH_TAC 0
THEN MRESA_TAC List_hypermap.uniq_flatten[`r`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`r`]
THEN RESA_TAC
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THENL[

MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`x`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`x`];

DICH_TAC 0
THEN REWRITE_TAC[GSYM Seq.hasP]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`a`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`b`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`a`;`b`;`r`;`x`]]);;



let next_power_flatten_eq= prove_by_refinement(`!n. uniq(flatten r)  /\  all (\l. ~(l = [])) r/\ MEM v r/\ n<= sizel v -1
==> ((next_el (flatten r)) POWER n) (HD v)=((next_el v) POWER n) (HD v)`,
[
INDUCT_TAC;

REWRITE_TAC[POWER];

REWRITE_TAC[COM_POWER;o_DEF]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<=b`)[`n`;`sizel v -1`]
THEN DICH_TAC 5
THEN RESA_TAC
THEN DICH_TAC(5-1)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`HD v`;`v`;`n`]
THEN GSUBGOAL_THEN`~((next_el v POWER n) (HD v) = LAST v)`ASSUME_TAC;

STRIP_TAC
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC Pwssrat.sizel0_not_nil[`v`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b-1/\ 0<b==> a<b/\ ~(a=b-1)`)[`n`;`sizel v `]
THEN MRESA_TAC Tame_list.next_eln_indexf[`n`;`HD v`;`LAST v`;`v`]
THEN MRESA_TAC Tame_list.indexl_LAST[`v`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST v`;`v`];


MRESA_TAC Tame_list.next_el_flatten_unlast[`r`;`v`;`(next_el v POWER n) (HD v)`]]);;



let sizel_le_indexf_not_mem= prove_by_refinement(` uniq(flatten r)  /\ ~(MEM z v)/\ MEM v r/\ all (\l. ~(l = [])) r/\ MEM z (flatten r)
==> sizel v <= indexf (HD v) z (flatten r)`,
[

REPEAT RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. a<=b \/ b<=a-1`)[`sizel v`;`indexf (HD v) z (flatten r)`];

MRESA_TAC next_power_flatten_eq[`r`;`v`;`indexf (HD v) z (flatten r)`];

GSUBGOAL_THEN`MEM (HD v) (flatten r)`ASSUME_TAC;


REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(6-3)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_HD[`v`];


MRESA_TAC Tame_list.indexf_n[`HD v`;`z`;`flatten r`]
THEN DICH_TAC(8-3)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`HD v`;`v`;`indexf (HD v) z (flatten r)`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]])
;;



let sizel_mem_le_flatten=prove(`!r. MEM v r==> sizel v <= sizel (flatten r)`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM]
THEN RESA_TAC
THEN ASM_REWRITE_TAC[Seq.flatten_cons;Seq.size_cat]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC);;



let indexf_HD_LAST_sizel_flatten= prove_by_refinement(`uniq(flatten r)  /\  all (\l. ~(l = [])) r/\ MEM v r
==> indexf (HD v) (LAST v) (flatten r)= sizel v-1`,
[
REPEAT RESA_TAC
THEN MRESAL_TAC next_power_flatten_eq[`r`;`v`;`sizel v -1`][ARITH_RULE`a<=a:num`]
THEN DICH_TAC (2)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]
THEN MRESA_TAC Tame_list.indexl_LAST[`v`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST v`;`v`]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC Tame_list.indexf_n[`HD v`;`LAST v`;`v`]
THEN DICH_TAC (10-2)
THEN RESA_TAC;

GSUBGOAL_THEN`MEM (HD v) (flatten r)`ASSUME_TAC;


REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM (LAST v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

MRESA_TAC Tame_list.next_eln_indexf[`sizel v -1`;`HD v`;`LAST v`;`flatten r`]
THEN MATCH_DICH_TAC 0
THEN MRESA_TAC sizel_mem_le_flatten[`v`;`r`]
THEN DICH_TAC 0
THEN MRESA_TAC Pwssrat.sizel0_not_nil[`v`]
THEN DICH_TAC 0
THEN ARITH_TAC]);;


let indexf_split_flatten= prove_by_refinement(` uniq(flatten r)  /\ ~(MEM z v)/\ MEM v r/\ all (\l. ~(l = [])) r/\ MEM z (flatten r)
==> indexf (HD v) z (flatten r)= indexf (HD v) (LAST v) v+ indexf (HD (next_el r v)) z (flatten r)+1`,
[
REPEAT RESA_TAC
THEN MRESA_TAC sizel_le_indexf_not_mem[`v`;`z`;`r`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`v`]
THEN MRESA_TAC List_hypermap.uniq_flatten[`r`]
THEN DICH_TAC (7-3)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]
THEN MRESA_TAC Tame_list.indexl_LAST[`v`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST v`;`v`]
THEN MRESA_TAC Pwssrat.sizel0_not_nil[`v`]
THEN MRESAL_TAC indexf_HD_LAST_sizel_flatten[`r`;`v`][GSYM Seq.allP]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`];

GSUBGOAL_THEN`MEM (HD v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM (LAST v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

MRESA_TAC(ARITH_RULE`!a b. a<=b==> a-1<=b`)[`sizel v`;`indexf (HD v) z (flatten r)`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`HD v`;`LAST v`;`z`;`flatten r`][]
THEN SYM_DICH_TAC 0
THEN REWRITE_TAC[ARITH_RULE`a-1+b=a-1+c+1<=> b=c+1`]
THEN MRESAL_TAC Tame_list.next_el_flatten_last[`r`;`v`][GSYM Seq.allP]
THEN MRESA_TAC Seq2.mem_next_el[`LAST v`;`flatten r`]
THEN MRESA_TAC(ARITH_RULE`!a:num. a=0\/1<= a`)[`indexf (LAST v) z (flatten r)`];

MRESA_TAC Tame_list.indexf0[`LAST v`;`z`;`flatten r`]
THEN DICH_TAC(22-15)
THEN RESA_TAC;

MRESA_TAC Tame_list.indexf_lt_sizel[`flatten r`;`LAST v`;`z`;]
THEN MRESA_TAC(ARITH_RULE`!a b:num. 1<= a/\ a<b==> 1<b`)[`indexf (LAST v) z (flatten r)`;`sizel (flatten r)`]
THEN MRESA_TAC Tame_list.next_el_indexf[`LAST v`;`HD (next_el r v)`;`flatten r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`LAST v`;`(HD (next_el r v))`;`z`;`flatten r`][]
THEN SYM_DICH_TAC 0
THEN ARITH_TAC]);;



let indexf_split_LAST_flatten= prove_by_refinement(` uniq(flatten r) /\ MEM y v /\ ~(MEM z v)/\ MEM v r/\ all (\l. ~(l = [])) r
/\ MEM z (flatten r)
==> indexf y z (flatten r)= indexf y (LAST v) v+ indexf (HD (next_el r v)) z (flatten r)+1`,
[
REPEAT RESA_TAC
THEN DICH_TAC (1)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST v`;`v`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]
THEN MRESA_TAC Tame_list.indexl_LAST[`v`]
THEN MRESAL_TAC Tame_list.indexf_flatten[`r`;`v`;`HD v`;`y`][GSYM Seq.allP;Pplhulj.indexl_hd;ARITH_RULE`0<=a`]
THEN MRESAL_TAC indexf_split_flatten[`v`;`z`;`r`][GSYM Seq.allP]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`v`;`HD v`;`y`]
THEN MRESA_TAC Pwssrat.sizel0_not_nil[`v`]
THEN MRESA_TAC(ARITH_RULE`!a b c d. a<b/\ c= b-1+d+1==> a<=b-1/\ a<=c`)[`indexf (HD v) y (flatten r)`;`sizel v`;`indexf (HD v) z (flatten r)`;`indexf (HD (next_el r v)) z (flatten r)`]
THEN MRESAL_TAC indexf_HD_LAST_sizel_flatten[`r`;`v`][GSYM Seq.allP];

GSUBGOAL_THEN`MEM (HD v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM (LAST v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM y (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

MRESAL_TAC Tame_list.indexf_add_left[`HD v`;`y`;`LAST v`;`flatten r`][]
THEN MRESAL_TAC Tame_list.indexf_add_left[`HD v`;`y`;`z`;`flatten r`][]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`y`;`v`]
THEN DICH_TAC(22-16)
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.indexf_flatten[`r`;`v`;`y`;`LAST v`][GSYM Seq.allP]
THEN ARITH_TAC]);;



let sizel_le_indexf_not_mem_last= prove_by_refinement(` uniq(flatten r)  /\ ~(MEM z v)/\ MEM v r/\ all (\l. ~(l = [])) r/\ MEM z (flatten r)
==> sizel v <= indexf z  (LAST v) (flatten r)`,
[
REPEAT RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. a<=b \/ b<=a-1`)[`sizel v`;`indexf z (LAST v) (flatten r)`];

GSUBGOAL_THEN`MEM (LAST v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(5-3)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`];

GSUBGOAL_THEN`MEM (HD v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(6-3)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_HD[`v`];

MRESA_TAC indexf_HD_LAST_sizel_flatten[`r`;`v`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`HD v`;`z`;`LAST v`;`flatten r`][]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a+b=c==> a<= c`)[`indexf (HD v) z (flatten r)`;`indexf z (LAST v) (flatten r)`;`sizel v -1`];

MRESA_TAC next_power_flatten_eq[`r`;`v`;`indexf  (HD v) z  (flatten r)`]
THEN MRESA_TAC Tame_list.indexf_n[`HD v`;`z`;`flatten r`]
THEN DICH_TAC(12-3)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`HD v`;`v`;`indexf (HD v) z (flatten r)`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]]);;



let indexf_split_flatten_right= prove_by_refinement(` uniq(flatten r)  /\ ~(MEM z v)/\ MEM v r/\ all (\l. ~(l = [])) r/\ MEM z (flatten r)
==> indexf z (LAST v) (flatten r)= indexf  z (LAST (prev_el r v)) (flatten r)+ indexf (HD v) (LAST v) v+1`,
[
REPEAT RESA_TAC
THEN MRESA_TAC sizel_le_indexf_not_mem_last[`z`;`v`;`r`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`v`]
THEN MRESA_TAC List_hypermap.uniq_flatten[`r`]
THEN DICH_TAC (7-3)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]
THEN MRESA_TAC Tame_list.indexl_LAST[`v`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST v`;`v`]
THEN MRESA_TAC Pwssrat.sizel0_not_nil[`v`]
THEN MRESAL_TAC indexf_HD_LAST_sizel_flatten[`r`;`v`][GSYM Seq.allP]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`];

GSUBGOAL_THEN`MEM (HD v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM (LAST v) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

MRESA_TAC(ARITH_RULE`!a b c. a=b-1/\ b<=c==> b-1<=c`)[`indexf (HD v) (LAST v) (flatten r)`;`sizel v`;`indexf z (LAST v) (flatten r)`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`z`;`HD v`;`LAST v`;`flatten r`][]
THEN SYM_DICH_TAC 0
THEN REWRITE_TAC[ARITH_RULE`a+b-1=c+b-1+1<=> a=c+1`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ 1<=a`)[`indexf z (HD v) (flatten r)`];

MRESA_TAC Tame_list.indexf0[`z`;`HD v`;`flatten r`]
THEN DICH_TAC(20-14)
THEN SYM_DICH_TAC 0
THEN RESA_TAC;

MRESA_TAC Seq2.mem_prev_el[`v`;`r`]
THEN MRESA_TAC Seq2.next_prev_id[`v`;`r`]
THEN MRESAL_TAC Tame_list.next_el_flatten_last[`r`;`prev_el r v`][GSYM Seq.allP]
THEN THAYTHE_ASM_TAC(22-8)[`prev_el r v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`prev_el r v`];

GSUBGOAL_THEN`MEM (LAST (prev_el r v)) (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`( (prev_el r v))`
THEN ASM_REWRITE_TAC[];

MRESA_TAC Tame_list.indexf_lt_sizel[`flatten r`;`z`;`HD v`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. 1<= a/\ a<b==> 1<b`)[`indexf z (HD v) (flatten r)`;`sizel (flatten r)`]
THEN MRESA_TAC Tame_list.next_el_indexf[`(LAST (prev_el r v))`;`HD (v)`;`flatten r`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`z`;`(LAST (prev_el r v))`;`HD v`;`flatten r`][]
]);;


let mem_mem_flatten=prove(`MEM y v /\ MEM v r==> MEM y ((flatten r))`,
REPEAT RESA_TAC
THEN REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[]);;



let indexf_split_HD_flatten= prove(` uniq(flatten r) /\ ~(MEM y v) /\ MEM z v/\ MEM v r/\ all (\l. ~(l = [])) r
/\ MEM y (flatten r)
==> indexf y z (flatten r)= indexf y (LAST(prev_el r v)) (flatten r)+ indexf (HD v) z v+1`,
REPEAT RESA_TAC
THEN DICH_TAC (1)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN MRESA_TAC Tame_list.MEM_HD[`v`]
THEN MRESA_TAC Tame_list.MEM_LAST[`v`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST v`;`v`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`v`]
THEN MRESA_TAC mem_mem_flatten[`v`;`z`;`r`]
THEN MRESA_TAC Tame_list.indexl_LAST[`v`]
THEN MRESAL_TAC indexf_split_flatten_right[`y`;`r`;`v`][GSYM Seq.allP]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`v`;`z`;`LAST v`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`z`;`v`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`v`;`HD v`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b-1`)[`indexf (HD v) z v`;`sizel v`]
THEN MRESAL_TAC Tame_list.indexf_flatten[`r`;`v`;`z`;`LAST v`][GSYM Seq.allP;Pplhulj.indexl_hd;ARITH_RULE`0<=a`]
THEN DICH_TAC(18-14)
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c d:num. a<b/\ c=d+b-1+1 ==> a<=b-1/\ a<=c`)[`indexf z (LAST v) (flatten r)`;`sizel v`;`indexf y (LAST v) (flatten r)`;`indexf y (LAST (prev_el r v)) (flatten r)`]
THEN MRESA_TAC mem_mem_flatten[`v`;`LAST v`;`r`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`y`;`z`;`LAST v`;`flatten r`][]
THEN MRESA_TAC mem_mem_flatten[`v`;`HD v`;`r`]
THEN MRESAL_TAC indexf_HD_LAST_sizel_flatten[`r`;`v`][GSYM Seq.allP]
THEN MRESAL_TAC Tame_list.indexf_add_right[`HD v`;`z`;`LAST v`;`flatten r`][]
THEN DICH_TAC 3
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Tame_list.indexf_flatten[`r`;`v`;`HD v`;`z`][GSYM Seq.allP;Pplhulj.indexl_hd;ARITH_RULE`0<=a`]
THEN ARITH_TAC);;



let betwn_cat_point_mem= prove_by_refinement(`uniq r /\ MEM l (betwn r v v1) /\ ~(v=v1)/\ MEM v r/\ MEM v1 r
==> (!x. MEM x (betwn r v v1) <=>
      MEM x (cat (cat (betwn r v l) [l]) (betwn r l v1)))`,
[
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`v`;`l`;`v1`]
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`r`;`v`;`x`;`v1`][Seq.mem_cat]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`v`;`x`;`l`]
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`r`;`l`;`x`;`v1`][Seq.mem_seq1]
THEN EQ_TAC
THEN RESA_TAC;

MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ c<b==> c<a\/ (a=c/\ a<=c)\/ (a<c /\ c<b/\ a<=c/\ a<=b)`)[`indexf v l r`;`indexf v v1 r`;`indexf v x r`];

MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`x`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`v`;`l`;`x`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN MRESA_TAC Tame_list.indexf0[`l`;`x`;`r`];

MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`x`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`v`;`l`;`x`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN MRESA_TAC(ARITH_RULE`!a b c. a<c/\ a+b=c==> 0<b`)[`indexf v l r `;` indexf l x r `;` indexf v x r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`v`;`l`;`v1`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN DICH_TAC 0
THEN DICH_TAC 1
THEN DICH_TAC (21-16)
THEN ARITH_TAC;

ASM_TAC
THEN ARITH_TAC;

MRESA_TAC Tame_list.betwn_mem[`r`;`l`;`v1`;`x`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf l x r `;` indexf l v1 r `;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`l`;`x`;`v1`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ a+c=b==> 0<c `)[`indexf l x r `;` indexf l v1 r `;`indexf x v1 r`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf v l r `;` indexf v v1 r `;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`v`;`l`;`v1`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 2
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c d:num. a+b+c=d/\ 0<c/\ 0<a==> c<=d /\ a+b<d/\ 0<a+b`)[`indexf v l r `;` indexf l x r `;`indexf x v1 r`;`indexf v v1 r`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`v`;`x`;`v1`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num. a+b+c=d/\ e+c=d ==>  a+b=e`)[`indexf v l r `;` indexf l x r `;`indexf x v1 r`;`indexf v v1 r`;`indexf v x r`]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]]);;


let betwn_cat_point_sizel=prove(`uniq r /\ MEM l (betwn r v v1) /\ ~(v=v1)/\ MEM v r/\ MEM v1 r
==> sizel (betwn r v v1)= sizel (betwn r v l) +sizel (betwn r l v1)+1`,
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.size_betwn[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Tame_list.size_betwn[`v`;`l`;`r`]
THEN MRESA_TAC Tame_list.size_betwn[`l`;`v1`;`r`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`v`;`l`;`v1`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf v l r `;` indexf v v1 r `;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`v`;`l`;`v1`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN MRESA_TAC(ARITH_RULE`!a b. 0<a/\ a<b==> 0<b`)[`indexf v l r`;`indexf v v1 r`]
THEN MRESAL_TAC Tame_list.indexf0[`l`;`v1`;`r`][ARITH_RULE`!a. ~(a=0)<=> 0<a`]
THEN MRESA_TAC Hypermap.LT_SUC_PRE[`indexf v v1 r`]
THEN MRESA_TAC Hypermap.LT_SUC_PRE[`indexf v l r`]
THEN MRESA_TAC Hypermap.LT_SUC_PRE[`indexf l v1 r`]
THEN ASM_REWRITE_TAC[ARITH_RULE`a=b+c+1<=> SUC a= SUC b+ SUC c`]
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 2);;


let uniq_betwn_cat_point=prove(`uniq r /\ MEM l (betwn r v v1) /\ ~(v=v1)/\ MEM v r/\ MEM v1 r
==> uniq (cat (cat (betwn r v l) [l]) (betwn r l v1))`,

REPEAT RESA_TAC
THEN MRESA_TAC betwn_cat_point_mem[`v`;`r`;`l`;`v1`]
THEN MRESA_TAC betwn_cat_point_sizel[`v`;`r`;`l`;`v1`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`v`;`v1`;`r`]
THEN MRESA_TAC Seq.uniq_size_uniq[`betwn r v v1`;`(cat (cat (betwn r v l) [l]) (betwn r l v1))`]
THEN REWRITE_TAC[Seq.size_cat;Seq2.size1]
THEN ARITH_TAC);;



let betwn_cat_point_last=prove(`uniq r /\ MEM l (betwn r v v1) /\ ~(v=v1)/\ MEM v r/\ MEM v1 r
==> LAST (betwn r v v1) = LAST (cat (cat (betwn r v l) [l]) (betwn r l v1))`,
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r l v1=[]`]
THENL[
MRESA_TAC Tame_list.betwn_nil[`r`;`l`;`v1`]
THEN REWRITE_TAC[LAST;Seq.cats0]
THEN MRESAL_TAC Tame_list.LAST_cat[`betwn r v l`;`[l]`][Ohcgkfu.sing_not_nil;LAST]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`v`;`v1`]
THEN MRESA_TAC Seq2.prev_next_id[`l`;`r`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r v (next_el r l))`;`r`]
THEN POP_ASSUM(fun th-> GEN_REWRITE_TAC(RAND_CONV o ONCE_DEPTH_CONV)[th])
THEN REWRITE_TAC[];

MRESAL_TAC Tame_list.LAST_cat[`cat (betwn r v l) [l]`;`betwn r l v1`][Ohcgkfu.sing_not_nil;LAST]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`v`;`v1`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`l`;`v1`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r l v1)`;`r`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r v v1)`;`r`]
]);;




let betwn_cap_point= prove_by_refinement( `uniq r /\ MEM l (betwn r v v1) /\ ~(v=v1)/\ MEM v r/\ MEM v1 r
==> (betwn r v v1)= cat(cat(betwn r v l) [l]) (betwn r l v1)`,
[
REPEAT RESA_TAC
THEN MATCH_MP_TAC eq_last_next
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`v`;`v1`;`r`]
THEN MRESA_TAC betwn_cat_point_mem[`v`;`r`;`l`;`v1`]
THEN MRESA_TAC uniq_betwn_cat_point[`v`;`r`;`l`;`v1`]
THEN MRESAL_TAC betwn_cat_point_last[`v`;`r`;`l`;`v1`][Seq.mem_cat;Seq.mem_seq1]
THEN REPEAT RESA_TAC;

THAYTHEL_TAC 3[`x`][Seq.mem_cat;Seq.mem_seq1]
THEN MRESAL_TAC Tame_list.LAST_cat[`betwn r v l`;`[l]`][Ohcgkfu.sing_not_nil;LAST]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`l`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`x`;`l`;`betwn r v l`]
THEN DICH_TAC(12-6)
THEN REWRITE_TAC[Seq.cat_uniq]
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.next_el_cat1[`x`;`cat (betwn r v l) [l]`;`betwn r l v1`][Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v l`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x=LAST (betwn r v l)`];

MRESAL_TAC Tame_list.next_el_cat_last1[`betwn r v l`;`[l]`][Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD]
THEN GSUBGOAL_THEN`~(LAST (betwn r v v1)= LAST (betwn r v l))` ASSUME_TAC;

MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`v`;`v1`]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`v`;`l`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN RESA_TAC
THEN DICH_TAC (29-22)
THEN RESA_TAC;

MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`v`;`v1`;`x`]
THEN DICH_TAC 1
THEN RESA_TAC
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`v`;`v1`;`x`;`r`]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`v`;`l`];

MRESA_TAC Tame_list.next_el_cat1[`x`;`betwn r v l`;`[l]`]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`v`;`l`;`x`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`v`;`l`;`x`;`r`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`v`;`v1`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x=LAST (betwn r v v1)`];

MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`v`;`v1`]
THEN DICH_TAC(31-26)
THEN RESA_TAC
THEN MRESA_TAC betwn_cat_point_mem[`v`;`r`;`l`;`v1`]
THEN THAYTHEL_TAC 0[`v1`][Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD];

MRESA_TAC Ncvibwu.next_el_betwn_same[`v`;`v1`;`x`;`r`];

MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r l v1 = []`];

MRESAL_TAC Tame_list.betwn_nil[`r`;`l`;`v1`][Seq.cats0]
THEN DICH_TAC(16-7)
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD]
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r v l = []`];

REWRITE_TAC[Seq.cat0s;Tame_list.next_el1]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN DICH_TAC(22-7)
THEN ASM_REWRITE_TAC[Seq.cat0s;Seq.cats0;LAST]
THEN RESA_TAC
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn r v v1`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`v`;`v1`]
THEN MRESAL_TAC Tame_list.betwn_nil[`r`;`v`;`l`][Seq.cats0];

MRESAL_TAC Tame_list.next_el_cat_last2[`betwn r v l`;`[l]`][Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD]
THEN DICH_TAC(22-7)
THEN ASM_REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD;Seq.cats0;LAST]
THEN MRESAL_TAC Tame_list.LAST_cat[`betwn r v l`;`[l]`][Ohcgkfu.sing_not_nil;LAST]
THEN STRIP_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn r v v1`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`v`;`v1`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`v`;`l`];


MRESAL_TAC Tame_list.LAST_cat[`betwn r v l`;`[l]`][Ohcgkfu.sing_not_nil;LAST]
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`cat (betwn r v l) [l]`;`(betwn r l v1)`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`l`;`v1`]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn r l v1`]
THEN THAYTHEL_TAC (19-6)[`next_el r l`][Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD;Seq.cats0;LAST]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`v`;`v1`;`l`;`r`];

MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x= LAST(betwn r l v1)`];

MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r l v1`;`x`]
THEN MRESAL_TAC Tame_list.next_el_cat_last2[`cat (betwn r v l) [l]`;`betwn r l v1`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r v l = []`];

REWRITE_TAC[Seq.cat0s;Tame_list.next_el1;HD]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESAL_TAC Tame_list.betwn_nil[`r`;`v`;`l`][Seq.cats0]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESAL_TAC Tame_list.LAST_cat[`[l]`;`betwn r l v1`;][Ohcgkfu.sing_not_nil;LAST]
THEN MRESAL_TAC Aq4.next_el_last_hd[`betwn r v v1`][Seq.cat0s]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`v`;`v1`];

MRESA_TAC Tame_list.hd_cat[`betwn r v l`;`[l]`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESAL_TAC Tame_list.LAST_cat[`cat (betwn r v l) [l]`;`betwn r l v1`;][Ohcgkfu.sing_not_nil;LAST]
THEN MRESAL_TAC Aq4.next_el_last_hd[`betwn r v v1`][Seq.cat0s]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`v`;`v1`]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`v`;`l`];

MRESA_TAC Tame_list.next_el_cat2[`x`;`cat (betwn r v l) [l]`;`betwn r l v1`]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c /\ ~(MEM b c)==> ~(a=b)`)[`l`;`v1`;`betwn r v v1`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`l`;`v1`;`x`]
THEN THAYTHEL_ASM_TAC (17-6)[`next_el r x`][Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD;Seq.cats0;LAST]
THEN THAYTHEL_TAC (0)[`x`][Seq.mem_cat;Seq.mem_seq1;LAST;Seq.cat_uniq;Ohcgkfu.sing_not_nil;HD;Seq.cats0;LAST]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`v`;`v1`;`x`;`r`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`l`;`v1`;`x`;`r`]]);;



let indexf_sizel_betwn_flatten = prove_by_refinement(`!a v v1. uniq(flatten r) /\  ~(v=v1)/\ MEM v r/\ MEM v1 r/\ all (\l. ~(l = [])) r/\ (betwn r v v1)= a /\ ~(a=[])
==> indexf (HD (next_el r v)) (LAST (prev_el r v1)) (flatten r)=sizel (flatten (a))-1`,
[

LIST_INDUCT_TAC
THEN REPEAT GEN_TAC
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`t=[]`];

RESA_TAC
THEN REWRITE_TAC[Aq1.flatten_sing]
THEN MRESA_TAC List_hypermap.uniq_flatten[`r`]
THEN MRESAL_TAC Dangeyj.HD_BETWN2[`r`;`v`;`v1`][HD]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Aq23.next_last_betwn[`r`;`v`;`v1`][LAST]
THEN MRESA_TAC Seq2.prev_next_id[`h`;`r`]
THEN MRESAL_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`h`][Seq.mem_seq1]
THEN MRESA_TAC indexf_HD_LAST_sizel_flatten[`r`;`h`];


RESA_TAC
THEN MRESAL_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`h`][Seq.mem_seq1;MEM]
THEN MRESA_TAC List_hypermap.uniq_flatten[`r`]
THEN MRESAL_TAC Tame_list.not_betwn1[`v`;`v1`;`r`][MEM;DE_MORGAN_THM]
THEN MRESAL_TAC Tame_list.not_betwn2[`v`;`v1`;`r`][MEM;DE_MORGAN_THM]
THEN MRESAL_TAC Dangeyj.HD_BETWN2[`r`;`v`;`v1`][HD]
THEN MRESA_TAC Tame_list.betwn_nil[`r`;`v`;`h`]
THEN MRESAL_TAC betwn_cap_point[`v`;`r`;`h`;`v1`][MEM;Seq.cat0s;Seq.cat1s]
THEN MRESA_TAC Seq2.TL[`next_el r v`;`t`]
THEN MRESA_TAC Seq2.TL[`next_el r v`;`betwn r (next_el r v) v1`]
THEN THAYTHE_TAC 19[`h`;`v1`]
THEN MRESA_TAC Seq2.mem_prev_el[`v1`;`r`]
THEN DICH_TAC (20-5)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC 0[`v`]
THEN THAYTHE_ASM_TAC 0[`prev_el r v1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`prev_el r v1`]
THEN MRESA_TAC mem_mem_flatten[`prev_el r v1`;`LAST (prev_el r v1)`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`v`;`r`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`MEM (LAST (prev_el r v1)) (next_el r v)`];


MRESA_TAC List_hypermap.uniq_sublist_unique[`next_el r v`;`prev_el r v1`;`r`;`LAST(prev_el r v1)`]
THEN MRESA_TAC Tame_list.MEM_LAST[`t`]
THEN DICH_TAC(28)
THEN RESA_TAC
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`h`;`v1`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r (prev_el r v1) v1)`;`r`]
THEN MRESAL_TAC Ohcgkfu.uniq_betwn[`v`;`v1`;`r`][Seq.cons_uniq]
THEN DICH_TAC(32-27)
THEN SYM_DICH_TAC (31-29)
THEN RESA_TAC;

MRESAL_TAC indexf_split_flatten[`h`;`LAST (prev_el r v1)`;`r`][GSYM Seq.allP;Seq.flatten_cons;Seq.size_cat]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`h`]
THEN THAYTHE_ASM_TAC(28-22)[`next_el r v`]
THEN MRESA_TAC Tame_list.indexl_LAST[`h`]
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST h`;`h`]
THEN MRESA_TAC Seq.size0nil[`h`]
THEN DICH_TAC(32)
THEN RESA_TAC
THEN MRESA_TAC Seq2.mem_next_el[`h`;`r`]
THEN MRESAL_TAC Dangeyj.HD_BETWN2[`r`;`h`;`v1`][HD]
THEN THAYTHE_ASM_TAC(34-28)[`next_el r h`]
THEN MRESA_TAC Tame_list.MEM_HD[`t`]
THEN MRESA_TAC sizel_mem_le_flatten[`HD t`;`betwn r (next_el r v) v1`]
THEN MRESA_TAC Seq.size0nil[`next_el r h`]
THEN MRESA_TAC(ARITH_RULE`!a b. ~(a=0)/\ a<=b==> 1<=b`)[`sizel (next_el r (next_el r v))`;`sizel (flatten (betwn r (next_el r v) v1))`]
THEN DICH_TAC 0
THEN DICH_TAC(38-30)
THEN ARITH_TAC]);;


let mem_flatten_betwn_sym= prove_by_refinement(` uniq(flatten r) /\ MEM d (flatten (betwn r v v1)) /\ MEM y v /\ MEM z v1/\ ~(v=v1)/\ MEM v r/\ MEM v1 r/\ all (\l. ~(l = [])) r
==> MEM d (betwn (flatten r) y z)`,
[
REPEAT RESA_TAC
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`y=z`];

MRESA_TAC List_hypermap.uniq_sublist_unique[`v`;`v1`;`r`;`y`];

GSUBGOAL_THEN`MEM y (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM z (flatten r)`ASSUME_TAC;


REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`v1`
THEN ASM_REWRITE_TAC[];

DICH_TAC (10-1)
THEN REWRITE_TAC[Seq2.mem_flatten]
THEN RESA_TAC
THEN MRESA_TAC List_hypermap.uniq_flatten[`r`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`v`;`l`;`v1`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`flatten r`;`y`;`d`;`z`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC Tame_list.not_betwn1[`v`;`v1`;`r`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c/\ ~(MEM b c)==> ~(a=b)`)[`l`;`v`;`betwn r v v1`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`v`;`l`;`r`;`d`];

GSUBGOAL_THEN`MEM d (flatten r)`ASSUME_TAC;

REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[];

MRESA_TAC indexf_split_LAST_flatten[`y`;`v`;`d`;`r`]
THEN REWRITE_TAC[ARITH_RULE`0<a+b+1`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`v`;`v1`;`r`;`z`]
THEN MRESA_TAC indexf_split_LAST_flatten[`y`;`v`;`z`;`r`]
THEN REWRITE_TAC[ARITH_RULE`a+b+1< a+c+1<=> b<c`]
THEN MRESA_TAC Seq2.mem_next_el[`v`;`r`]
THEN DICH_TAC (24-6)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_ASM_TAC 0[`next_el r v`]
THEN MRESA_TAC Tame_list.MEM_HD[`next_el r v`]
THEN MRESA_TAC mem_mem_flatten[`next_el r v`;`HD (next_el r v)`;`r`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`MEM (HD (next_el r v)) v1`];

MRESA_TAC List_hypermap.uniq_sublist_unique[`next_el r v`;`v1`;`r`;`(HD (next_el r v))`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`v`;`v1`]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn r v v1`]
THEN MRESA_TAC Tame_list.not_betwn2[`v`;`v1`;`r`];

MRESAL_TAC indexf_split_HD_flatten[`HD (next_el r v)`;`r`;`z`;`v1`][GSYM Seq.allP]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`MEM (HD (next_el r v)) l`];

MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`MEM (LAST (prev_el r v1)) l`];


MRESA_TAC Seq2.mem_prev_el[`v1`;`r`]
THEN THAYTHE_ASM_TAC (32-25)[`prev_el r v1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`prev_el r v1`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`prev_el r v1`;`l`;`r`;`LAST(prev_el r v1)`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`next_el r v`;`l`;`r`;`HD(next_el r v)`]
THEN MRESAL_TAC indexf_HD_LAST_sizel_flatten[`r`;`l`][GSYM Seq.allP]
THEN MRESA_TAC Tame_list.MEM_HD[`prev_el r v1`]
THEN MRESAL_TAC Tame_list.indexf_flatten[`r`;`l`;`HD l`;`d`][GSYM Seq.allP;Pplhulj.indexl_hd;ARITH_RULE`0<=a`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Seq.size0nil[`prev_el r v1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`l`;`HD l`;`d`;]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;


MRESA_TAC Seq2.mem_prev_el[`v1`;`r`]
THEN THAYTHE_ASM_TAC (32-25)[`prev_el r v1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`prev_el r v1`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`next_el r v`;`l`;`r`;`HD(next_el r v)`]
THEN MRESA_TAC mem_mem_flatten[`prev_el r v1`;`LAST(prev_el r v1)`;`r`]
THEN MRESAL_TAC indexf_split_flatten[`l`;`(LAST (prev_el r v1))`;`r`][GSYM Seq.allP]
THEN THAYTHE_ASM_TAC (37-33)[`l`]
THEN MRESA_TAC Tame_list.MEM_HD[`l`]
THEN MRESAL_TAC Tame_list.indexf_flatten[`r`;`l`;`HD l`;`d`][GSYM Seq.allP;Pplhulj.indexl_hd;ARITH_RULE`0<=a`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Ohcgkfu.indexf_indexl_hd[`LAST l`;`l`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`r`;`l`]
THEN MRESA_TAC Tame_list.indexl_LAST[`l`]
THEN MRESA_TAC Seq.size0nil[`l`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`l`;`HD l`;`d`;]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;

MRESAL_TAC indexf_split_HD_flatten[`HD(next_el r v)`;`r`;`d`;`l`][GSYM Seq.allP]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r v v1`;`l`]
THEN MRESAL_TAC indexf_sizel_betwn_flatten[`r`;`betwn r v v1`;`v`;`v1`][GSYM Seq.allP]
THEN MRESAL_TAC betwn_cap_point[`v`;`r`;`l`;`v1`][Seq.flatten_cat;Seq.size_cat;Aq1.flatten_sing]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`betwn r v l=[]`];

MRESA_TAC Tame_list.betwn_nil[`r`;`v`;`l`]
THEN DICH_TAC (36-30)
THEN RESA_TAC;

MRESAL_TAC indexf_sizel_betwn_flatten[`r`;`betwn r v l`;`v`;`l`][GSYM Seq.allP]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn r v l`]
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`v`;`l`;`HD (betwn r v l)`]
THEN THAYTHE_ASM_TAC (38-25)[`HD (betwn r v l)`]
THEN MRESA_TAC Seq.size0nil[`HD (betwn r v l)`]
THEN MRESA_TAC sizel_mem_le_flatten[`HD (betwn r v l)`;`(betwn r v l)`]
THEN MRESA_TAC(ARITH_RULE`!a b. ~(a=0)/\ a<=b==> 1<=b`)[`sizel (HD (betwn r v l))`;`sizel (flatten (betwn r v l))`]
THEN DICH_TAC 0
THEN THAYTHE_ASM_TAC (41-39)[`l`]
THEN MRESA_TAC Tame_list.MEM_HD[`l`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`l`;`HD l`;`d`;]
THEN DICH_TAC 0
THEN ARITH_TAC]);;



let mem_flatten_betwn_sym_case= prove_by_refinement(` uniq(flatten r)  /\ MEM y v /\ MEM z v1/\ ~(v=v1)/\ MEM v r/\ MEM v1 r/\ all (\l. ~(l = [])) r
/\ MEM d (betwn (flatten r) y z)
==>  MEM d v \/ MEM d (flatten (betwn r v v1)) \/ MEM d v1`,
[
REPEAT RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`MEM d v`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`MEM d v1`]
THEN MRESA_TAC mem_mem_flatten[`v`;`y`;`r`]
THEN MRESA_TAC mem_mem_flatten[`v1`;`z`;`r`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`v`;`v1`;`r`;`z`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c/\ ~(MEM b c)==> ~(a=b)`)[`y`;`z`;`v`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`flatten r`;`y`;`d`;`z`]
THEN MRESAL_TAC Tame_list.betwn_mem[`flatten r`;`y`;`z`;`d`][Seq2.mem_flatten]
THEN GEXISTS_TAC`l`
THEN MRESA_TAC List_hypermap.uniq_flatten[`r`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`v`;`l`;`v1`]
THEN MRESA_TAC(ARITH_RULE`!A. A=0\/ 0<A`)[`indexf v l r`];

MRESA_TAC Tame_list.indexf0[`v`;`l`;`r`]
THEN DICH_TAC(21-8)
THEN RESA_TAC;

MRESA_TAC(ARITH_RULE`!a b:num. a<b\/ (a=b/\ a<=b)\/ b<a`)[`indexf v l r`;`indexf v v1 r`];

MRESAL_TAC Tame_list.indexf_add_left[`v`;`l`;`v1`;`r`][ARITH_RULE`a+b=a<=> b=0`]
THEN MRESA_TAC Tame_list.indexf0[`l`;`v1`;`r`]
THEN DICH_TAC(24-17)
THEN RESA_TAC;

MRESA_TAC(SET_RULE`!a b c. MEM a b /\ ~(MEM a c)==> ~(b=c)`)[`d`;`l`;`v`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a b /\ ~(MEM a c)==> ~(b=c)`)[`d`;`l`;`v1`]
THEN MRESAL_TAC Tame_list.indexf0[`v`;`v1`;`r`][ARITH_RULE`~(a=0)<=> 0<a`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`v`;`v1`;`l`]
THEN MRESA_TAC mem_mem_flatten[`v1`;`z`;`betwn r v l`]
THEN MRESA_TAC mem_flatten_betwn_sym[`v`;`l`;`z`;`r`;`y`;`d`]
THEN MRESA_TAC mem_mem_flatten[`l`;`d`;`r`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`v`;`l`;`r`;`y`]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a c/\ ~(MEM b c)==> ~(a=b)`)[`d`;`y`;`l`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`flatten r`;`y`;`z`;`d`]
THEN DICH_TAC(32-15)
THEN DICH_TAC 0
THEN ARITH_TAC]);;



(******************AQ12*********************)

let contour_list_cat=prove(` !s.  ~(s=[]) /\ ~(r=[])
==> (contour_list L (cat s r) <=> contour_list L s /\ contour_list L r
/\ one_step_list L (LAST s) (HD r))`,

LIST_INDUCT_TAC
THEN REWRITE_TAC[Tame_list.contour_list_cons;NOT_CONS_NIL;Seq.cat]
THEN REPEAT RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`t=[]`]
THENL[
MRESA_TAC CONS_HD_TL[`r`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Tame_list.contour_list_cons;NOT_CONS_NIL;Seq.cat;LAST;HD]
THEN SET_TAC[];

MRESA_TAC CONS_HD_TL[`t`]
THEN POP_ASSUM(fun th-> GEN_REWRITE_TAC(LAND_CONV o ONCE_DEPTH_CONV)[th])
THEN ASM_REWRITE_TAC[Tame_list.contour_list_cons;NOT_CONS_NIL;Seq.cat;HD;LAST]
THEN MRESA_TAC CONS_HD_TL[`t`]
THEN POP_ASSUM(fun th-> GEN_REWRITE_TAC(LAND_CONV o ONCE_DEPTH_CONV)[GSYM th])
THEN ASM_REWRITE_TAC[Tame_list.contour_list_cons;NOT_CONS_NIL;GSYM Seq.cat;HD;LAST]
THEN MRESA_TAC CONS_HD_TL[`t`]
THEN POP_ASSUM(fun th-> GEN_REWRITE_TAC(LAND_CONV o ONCE_DEPTH_CONV)[GSYM th])
THEN DICH_TAC(2)
THEN RESA_TAC
THEN EQ_TAC
THEN DISCH_TAC
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC 0
THEN MRESA_TAC CONS_HD_TL[`t`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN ASM_REWRITE_TAC[Tame_list.contour_list_cons;NOT_CONS_NIL;Seq.cat;HD;LAST]
THEN RESA_TAC]);;



let next_el_EL=prove(`uniq r/\ SUC i<sizel r ==> next_el r (EL i r) = EL (SUC i) r`,
REWRITE_TAC[Seq2.next_el]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b:num. SUC a<b ==> a<b/\ ~(a= b-1)`)[`i`;`sizel r`]
THEN MRESA_TAC Tame_list.index_el[`r`;`i`]
THEN MRESAL_TAC Seq2.EL_nth[`EL i r`;`r`;`SUC i`][ARITH_RULE`i+1= SUC i`]);;




let contour_betwn_loop=prove(`!x y. uniq s /\loop_list L s /\ MEM x s /\ MEM y s/\ ~(x=y) 
==> contour_list L (betwn s x y)`,
REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP;Tame_defs2.contour_list]
THEN REPEAT RESA_TAC
THENL[

MRESA_TAC Tame_list.betwn_mem[`s`;`x`;`y`;`x'`]
THEN THAYTHE_TAC(6-1)[`x'`];

MRESA_TAC Ohcgkfu.uniq_betwn[`x`;`y`;`s`]
THEN MRESA_TAC next_el_EL[`i`;`(betwn s x y)`]
THEN GABBREV_TAC`d=(EL i (betwn s x y))`
THEN GABBREV_TAC`n=sizel (betwn s x y)`
THEN MRESA_TAC(ARITH_RULE`!a b:num. SUC a<b ==> a<b/\ ~(a= b-1)/\ b-1<b`)[`i`;`n`]
THEN MRESA_TAC Tame_list.mem_el_index[`i`;`(betwn s x y)`]
THEN MRESA_TAC Tame_list.mem_el_index[`SUC i`;`(betwn s x y)`]
THEN DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn s x y`;`d`]
THEN MRESAL_TAC LAST_EL[`betwn s x y`][GSYM Seq.size]
THEN MRESA_TAC Seq2.card_set_of_list_uniq[`betwn s x y`]
THEN MRESAL_TAC Packing3.CARD_SET_OF_LIST_EQ_LENGTH_IMP_ALL_DISTINCT
[`betwn s x y`][GSYM Seq.size]
THEN THAYTHE_TAC 0[`i`;`n-1`]
THEN SYM_DICH_TAC (17-7)
THEN STRIP_TAC
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`s`;`x`;`y`;`d`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`x`;`y`;`d`;`s`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`x`;`y`;`d`]
THEN THAYTHE_TAC(20-1)[`d`]]);;



let exists_conected_loop= prove_by_refinement(`!s. uniq s /\loop_list L s /\ MEM x s /\ MEM y s
==> ?r. contour_list L r/\ HD r=x/\ LAST r=y /\ set_of_list r SUBSET set_of_list s /\ ~(r=[])`,
[
REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x=y`];

THAYTHE_TAC 3[`x`]
THEN GEXISTS_TAC`[x]`
THEN ASM_REWRITE_TAC[HD;LAST;Tame_list.contour_list_cons;IN_SET_OF_LIST;SUBSET;Seq.mem_seq1;Ohcgkfu.sing_not_nil]
THEN REPEAT RESA_TAC;

GEXISTS_TAC`cat [x] (cat (betwn s x y) [y])`
THEN ASM_REWRITE_TAC[HD;LAST;Tame_list.contour_list_cons;GSYM Seq2.APPEND_cat;HD_APPEND;Ohcgkfu.sing_not_nil;LAST;LAST_APPEND;APPEND_EQ_NIL]
THEN MRESAL_TAC contour_list_cat[`L`;`cat (betwn s x y) [y]`;`[x]`][GSYM Seq2.APPEND_cat;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;Tame_list.contour_list_cons;LAST;HD_APPEND]
THEN THAYTHE_ASM_TAC 4[`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn s x y = []`];

ASM_REWRITE_TAC[APPEND;Tame_list.contour_list_cons;HD]
THEN THAYTHE_ASM_TAC 1[`y`]
THEN MRESA_TAC Aq4.betwn_eq_nil[`x`;`y`;`s`]
THEN DICH_TAC (11-6)
THEN RESA_TAC
THEN ASM_REWRITE_TAC[HD;LAST;Tame_list.contour_list_cons;IN_SET_OF_LIST;SUBSET;Seq.mem_seq2]
THEN REPEAT RESA_TAC;

MRESA_TAC Dangeyj.HD_BETWN2[`s`;`x`;`y`]
THEN MRESAL_TAC contour_list_cat[`L`;`[y]`;`(betwn s x y)`][GSYM Seq2.APPEND_cat;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;Tame_list.contour_list_cons;LAST;HD_APPEND;HD]
THEN THAYTHE_ASM_TAC (10-7)[`y`]
THEN MRESA_TAC Aq23.next_last_betwn[`s`;`x`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`(betwn s x y)`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`x`;`y`;`LAST (betwn s x y)`]
THEN THAYTHE_ASM_TAC (3)[`LAST (betwn s x y)`]
THEN STRIP_TAC;

MATCH_MP_TAC contour_betwn_loop
THEN ASM_REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP;Tame_defs2.contour_list];

ASM_REWRITE_TAC[HD;LAST;Tame_list.contour_list_cons;IN_SET_OF_LIST;SUBSET;Seq.mem_seq1;MEM_APPEND]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`x`;`y`;`x'`]
]);;



let y_mem_split_snd=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
(SND (split_normal_list L r f y z1)) =r2
==> MEM y r2`,
REPEAT RESA_TAC
THEN EXPAND_TAC"r2"
THEN REWRITE_TAC[LET_THM;Tame_defs2.split_normal_list;MEM_APPEND;Seq.mem_seq1]);;

let next_y_mem_split_snd=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
FST (split_normal_list L r f y z1)=r1
==> MEM (next_el r y) r1`,
REPEAT RESA_TAC
THEN EXPAND_TAC"r1"
THEN REWRITE_TAC[LET_THM;Tame_defs2.split_normal_list;MEM_APPEND;Seq.mem_seq1]);;


let one_step_ytran=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r
==> one_step_list L  (l'y L r x) (next_el r (l'y L r x))`,
REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN DICH_TAC(35-22)
THEN REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`r`]
THEN THAYTHE_TAC 0[`y`]);;

let z_mem_split_snd=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
(SND (split_normal_list L r f y z1)) =r2
==> MEM z r2`,
REPEAT RESA_TAC
THEN EXPAND_TAC"r2"
THEN REWRITE_TAC[LET_THM;Tame_defs2.split_normal_list;MEM_APPEND;Seq.mem_seq1]
THEN DICH_ASM_TAC (6-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(15-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(20-8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][MEM_APPEND;Seq.mem_seq1;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM])
;;


let one_step_ztran=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r
==> one_step_list L  (prev_el r (l'z L N r x)) (l'z L N r x)`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN DICH_TAC(35-22)
THEN REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`r`]
THEN THAYTHE_TAC 0[`z1`]
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN DICH_TAC 1
THEN RESA_TAC);;



let prev_z_mem_split_snd=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
FST (split_normal_list L r f y z1)=r1
==> MEM z1 r1`,
REPEAT RESA_TAC
THEN EXPAND_TAC"r1"
THEN REWRITE_TAC[LET_THM;Tame_defs2.split_normal_list;MEM_APPEND;Seq.mem_seq1]);;




let exists_contour_snd_fst=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r/\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
final_list L r1 /\
final_list L r2 /\
(SND (split_normal_list L r f y z1)) =r2/\
FST (split_normal_list L r f y z1)=r1/\
find_face L x = f /\
MEM v r1 /\
MEM u r2
 ==>
?s. contour_list L s /\
     ~(s = []) /\
     HD s = u /\
     LAST s = v /\
     set_of_list s SUBSET
     set_of_list
     (flatten
     (filter (final_list L)
     (cat (replace r [SND (split_normal_list L r f y z1)] N)
     [FST (split_normal_list L r f y z1)])))`,

REPEAT RESA_TAC
THEN MRESA_TAC next_y_mem_split_snd[`z`;`f`;`z1`;`y`;`r1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC y_mem_split_snd[`z`;`f`;`z1`;`y`;`r2`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN GABBREV_TAC`w=next_el f x`
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN THAYTHE_ASM_TAC (26-16)[`(FST (split_normal_list L r (find_face L y) y z1))`]
THEN THAYTHE_ASM_TAC 0[`(SND (split_normal_list L r (find_face L y) y z1))`]
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC z_mem_split_snd[`f`;`y`;`z1`;`z`;`r2`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC exists_conected_loop[`L`;`u`;`y`;`(SND (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s1=r'`
THEN MRESA_TAC prev_z_mem_split_snd[`z`;`f`;`y`;`z1`;`r1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC exists_conected_loop[`L`;`next_el r y`;`v`;`(FST (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s2=r''`
THEN MRESA_TAC one_step_ztran[`L`;`N`;`r`;`x`]
THEN MRESA_TAC one_step_ytran[`L`;`N`;`r`;`x`]
THEN MRESA_TAC contour_list_cat[`L`;`s2`;`s1`]
THEN GEXISTS_TAC`cat s1 s2`
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
THENL[

DICH_TAC (46-34)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
THEN DICH_ASM_TAC (46-2)[Tame_defs2.marked_list;];

DICH_TAC (46-41)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[Seq.mem_seq1]]);;






let exists_contour_fst_snd=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r/\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
final_list L r1 /\
final_list L r2 /\
(SND (split_normal_list L r f y z1)) =r2/\
FST (split_normal_list L r f y z1)=r1/\
find_face L x = f /\
MEM v r2 /\
MEM u r1
 ==>
?s. contour_list L s /\
     ~(s = []) /\
     HD s = u /\
     LAST s = v /\
     set_of_list s SUBSET
     set_of_list
     (flatten
     (filter (final_list L)
     (cat (replace r [SND (split_normal_list L r f y z1)] N)
     [FST (split_normal_list L r f y z1)])))`,


REPEAT RESA_TAC
THEN MRESA_TAC next_y_mem_split_snd[`z`;`f`;`z1`;`y`;`r1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC y_mem_split_snd[`z`;`f`;`z1`;`y`;`r2`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN GABBREV_TAC`w=next_el f x`
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN THAYTHE_ASM_TAC (26-16)[`(FST (split_normal_list L r (find_face L y) y z1))`]
THEN THAYTHE_ASM_TAC 0[`(SND (split_normal_list L r (find_face L y) y z1))`]
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC z_mem_split_snd[`f`;`y`;`z1`;`z`;`r2`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC exists_conected_loop[`L`;`z`;`v`;`(SND (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s1=r'`
THEN MRESA_TAC prev_z_mem_split_snd[`z`;`f`;`y`;`z1`;`r1`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC exists_conected_loop[`L`;`u`;`z1`;`(FST (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s2=r''`
THEN MRESA_TAC one_step_ztran[`L`;`N`;`r`;`x`]
THEN MRESA_TAC one_step_ytran[`L`;`N`;`r`;`x`]
THEN MRESA_TAC contour_list_cat[`L`;`s1`;`s2`]
THEN GEXISTS_TAC`cat s2 s1`
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
THENL[


DICH_TAC (46-41)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[Seq.mem_seq1];

DICH_TAC (46-34)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
THEN DICH_ASM_TAC (46-2)[Tame_defs2.marked_list;]
]);;




let one_step_e_list_w=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x
/\ ~(final_list L r)
/\ find_face L x = f 
/\ next_el f x=w
==>
one_step_list L (e_list x) w `,

REPEAT RESA_TAC
THEN DICH_ASM_TAC (3)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(26-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN DICH_TAC(26-9)
THEN ASM_REWRITE_TAC[LET_THM]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.one_step_list;List_hypermap.e_list]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]);;


let one_step_e_list_x=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x
/\ ~(final_list L r)
/\ find_face L x = f 
/\ next_el f x=w
==>
one_step_list L x ((f_list L)(e_list x)) `,

REPEAT RESA_TAC
THEN DICH_ASM_TAC (3)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(16-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(21-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(26-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN DICH_TAC(26-9)
THEN ASM_REWRITE_TAC[LET_THM]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.one_step_list;]);;


let w_mem_split_snd=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
(SND (split_normal_list L r f y z1)) =r2
/\ find_face L x = f 
/\ next_el f x=w
/\ ~(final_list L r)
==> MEM w r2`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC(9-0)[Tame_defs2.good_list]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESAL_TAC Aq7.AQ7[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN MRESAL_TAC Aq10.AQ10[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`r2`]);;



let exists_contour_snd_not_fst= prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r/\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
final_list L r1 /\
final_list L r2 /\
(SND (split_normal_list L r f y z1)) =r2/\
MEM r1 N /\
find_face L x = f /\
MEM v r2 /\
MEM u r1
==>
?s. contour_list L s /\
     ~(s = []) /\
     HD s = u /\
     LAST s = v /\
     set_of_list s SUBSET
     set_of_list
     (flatten
     (filter (final_list L)
     (cat (replace r [SND (split_normal_list L r f y z1)] N)
     [FST (split_normal_list L r f y z1)])))`,
[

REPEAT RESA_TAC
THEN DICH_ASM_TAC(13-2)[Tame_defs2.marked_list;Tame_defs2.s_flag_list]
THEN GSUBGOAL_THEN`MEM u (final_dart_list L N)`ASSUME_TAC;

REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM (e_list x) (final_dart_list L N)`ASSUME_TAC;

REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN DICH_TAC(24-21)
THEN REWRITE_TAC[LET_THM]
THEN RESA_TAC
THEN GEXISTS_TAC`(find_list N (e_list x))`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Aq11.e_list_mem_flatten[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.mem_find_list1[`N`;`e_list x`]
THEN MRESA_TAC List_hypermap.mem_find_list[`e_list x`;`N`];

THAYTHE_TAC (25-22)[`u`;`e_list x`]
THEN GABBREV_TAC`w=next_el f x`
THEN MRESA_TAC w_mem_split_snd[`z`;`y`;`z1`;`f`;`w`;`r2`;`L`;`N`;`r`;`x`]
THEN DICH_ASM_TAC(30-0)[Tame_defs2.good_list]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`r2`]
THEN MRESA_TAC exists_conected_loop[`L`;`w`;`v`;`(SND (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s1=r'`
THEN MRESA_TAC one_step_e_list_w[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC contour_list_cat[`L`;`s1`;`s`]
THEN GEXISTS_TAC`cat s s1`
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC;



DICH_TAC (49-29)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND;Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN RESA_TAC
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[];


DICH_TAC (49-45)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1]]);;



let exists_contour_not_fst_snd= prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r/\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
final_list L r1 /\
final_list L r2 /\
(SND (split_normal_list L r f y z1)) =r2/\
MEM r1 N /\
find_face L x = f /\
MEM u r2 /\
MEM v r1
==>
?s. contour_list L s /\
     ~(s = []) /\
     HD s = u /\
     LAST s = v /\
     set_of_list s SUBSET
     set_of_list
     (flatten
     (filter (final_list L)
     (cat (replace r [SND (split_normal_list L r f y z1)] N)
     [FST (split_normal_list L r f y z1)])))`,
[


REPEAT RESA_TAC
THEN DICH_ASM_TAC(13-2)[Tame_defs2.marked_list;Tame_defs2.s_flag_list]
THEN GSUBGOAL_THEN`MEM v (final_dart_list L N)`ASSUME_TAC;

REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[];

GSUBGOAL_THEN`MEM ((f_list L)(e_list x)) (final_dart_list L N)`ASSUME_TAC;

REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN DICH_TAC(24-21)
THEN REWRITE_TAC[LET_THM]
THEN RESA_TAC
THEN GEXISTS_TAC`(find_list N (e_list x))`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Aq11.e_list_mem_flatten[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.mem_find_list1[`N`;`e_list x`]
THEN MRESA_TAC List_hypermap.mem_find_list[`e_list x`;`N`]
THEN MRESAL_TAC Tame_defs2.final_list[`L`;`(find_list N (e_list x))`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`e_list x`]
THEN MATCH_MP_TAC Seq2.mem_next_el
THEN ASM_REWRITE_TAC[];

THAYTHE_TAC (25-22)[`(f_list L)(e_list x)`;`v`]
THEN GABBREV_TAC`w=next_el f x`
THEN MRESA_TAC w_mem_split_snd[`z`;`y`;`z1`;`f`;`w`;`r2`;`L`;`N`;`r`;`x`]
THEN DICH_ASM_TAC(30-0)[Tame_defs2.good_list]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESAL_TAC Aq7.AQ7[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1= SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`r2`]
THEN MRESA_TAC exists_conected_loop[`L`;`u`;`x`;`(SND (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s1=r'`
THEN MRESA_TAC one_step_e_list_x[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC contour_list_cat[`L`;`s`;`s1`]
THEN GEXISTS_TAC`cat s1 s`
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC;


DICH_TAC (49-45)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1];


DICH_TAC (50-29)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND;Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN RESA_TAC
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[]]);;


let last_parts_y_not_s_list=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'y L r x = y /\
~final_list L r/\
MEM p (parts L r)/\
MEM y p /\
LAST p= lp
==>
   ~MEM lp (s_list L r x)`,

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC(7-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.s_list;MEM_MAP]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`n=x'`
THEN DICH_ASM_TAC(17-8)[Hypermap.is_restricted]
THEN DICH_ASM_TAC (26-22)[simple_hypermap]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\x:A#A. (node (hypermap_of_list L) x INTER face (hypermap_of_list L) x =
              {x}))`]
THEN MRESA_TAC Tame_list.marked_lemma_yz_in_face[`L`;`N`;`r`;`x`]
THEN DICH_ASM_TAC(30-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN DICH_ASM_TAC(36-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN THAYTHEL_TAC (41-28)[`y`][List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`y`]
THEN DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`p`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`lp`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`r`]
THEN THAYTHE_TAC 0[`lp`]
THEN MRESAL_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`lp`][List_hypermap.dart_in_face]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`y`;`lp`][List_hypermap.dart_in_face]
THEN MRESAL_TAC List_hypermap.face_of_list[`L`;`y`][List_hypermap.dart_in_face]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Pwssrat.mem_f_list_power[`L`;`x`;`n`]
THEN MRESA_TAC IN_SET_OF_LIST[`lp`;`find_face L x`]
THEN DICH_TAC(52-41)
THEN RESA_TAC
THEN MRESAL_TAC(SET_RULE`!a b c. a IN b /\ a IN c==> a IN b INTER c`)[`lp`;`node (hypermap_of_list L) y `;` set_of_list (find_face L x)`][IN_SING]
THEN DICH_TAC 0
THEN MRESA_TAC Aq8.last_parts_y_not_cat[`p`;`l'z L N r x`;`y`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]);;

let last_parts_e_list_y_not_s_list=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'y L r x = y /\
~final_list L r/\
MEM p (parts L r)/\
MEM y p /\
LAST p= lp
==>
   ~MEM (e_list lp) (s_list L r x)`,


REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC(7-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.s_list;MEM_MAP]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`n=x'`
THEN DICH_ASM_TAC(17-8)[Hypermap.is_restricted]
THEN DICH_ASM_TAC (26-22)[simple_hypermap]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\x:A#A. (node (hypermap_of_list L) x INTER face (hypermap_of_list L) x =
              {x}))`]
THEN MRESA_TAC Tame_list.marked_lemma_yz_in_face[`L`;`N`;`r`;`x`]
THEN DICH_ASM_TAC(30-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN DICH_ASM_TAC(36-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN THAYTHEL_TAC (41-28)[`y`][List_hypermap.dart_in_face]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`y`]
THEN DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`p`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`lp`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`r`]
THEN THAYTHE_TAC 0[`lp`]
THEN MRESAL_TAC Tame_list.parts_darts[`L`;`N`;`r`;`p`;`lp`][List_hypermap.dart_in_face]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.MEM_hypermap_of_list_node[`L`;`y`;`lp`][List_hypermap.dart_in_face]
THEN MRESAL_TAC List_hypermap.face_of_list[`L`;`y`][List_hypermap.dart_in_face]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Pwssrat.mem_f_list_power[`L`;`x`;`n`]
THEN MRESAL_TAC Tame_list.inverse_node_map_list[`L`;`lp`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Hypermap.lemma_inverse_in_node[`hypermap_of_list L`;`lp`;`lp`][Hypermap.node_refl]
THEN MRESAL_TAC Pwssrat.mem_f_list_power[`L`;`x`;`SUC n`][COM_POWER;o_DEF]
THEN MRESA_TAC IN_SET_OF_LIST[`f_list L ((f_list L POWER n) x)`;`find_face L x`]
THEN MRESA_TAC Hypermap.lemma_node_identity[`hypermap_of_list L`;`y`;`lp`]
THEN DICH_TAC(56-41)
THEN RESA_TAC
THEN MRESAL_TAC(SET_RULE`!a b c. a IN b /\ a IN c==> a IN b INTER c`)[`f_list L ((f_list L POWER n) x) `;`node (hypermap_of_list L) y `;` set_of_list (find_face L x)`][IN_SING]
THEN DICH_TAC 0
THEN DICH_TAC(56-17)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC(SYM th))
THEN STRIP_TAC
THEN DICH_TAC(57-50)
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC (57-6)
THEN DICH_TAC 1
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC(SYM th))
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.parts_next_last[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`p`]
THEN THAYTHE_TAC 0[`lp`]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.normal_list_parts_next_last_not[`p`;`L`;`N`;`r`]
THEN MRESA_TAC Tame_list.is_restricted_all_uniq[`L`]
THEN MRESA_TAC Tame_list.inverse_node_map_quotient[`L`;`N`;`r`;`p`;`r`;`p`]
THEN MRESA_TAC Hypermap.node_map_and_darts[`hypermap_of_list (quotient_list L N)`]
THEN MRESA_TAC Hypermap.fixed_point_lemma[`dart (hypermap_of_list (quotient_list L N))`;`node_map (hypermap_of_list (quotient_list L N))`]
THEN THAYTHE_TAC 0[`lp`]
THEN MRESA_TAC Tame_list.good_list_nodes_quotient[`L`;`N`]
THEN MRESA_TAC Tame_list.marked_list_is_node_nondegenerate[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.quotient_list_iso_quotient[`L`;`N`]
THEN MRESAL_TAC Tame_list.iso_is_node_nondegenerate[`set_of_list o find_atom L N`;`quotient (hypermap_of_list L) (loop_family_of_list N)`;`hypermap_of_list (quotient_list L N)`][Hypermap.is_node_nondegenerate]
THEN DICH_TAC 1
THEN THAYTHE_TAC 0[`lp`]
THEN MRESA_TAC Tame_list.mem_list_of_darts_quotient[`L`;`N`;`lp`]
THEN GSUBGOAL_THEN`?p r. MEM p (parts L r) /\ MEM r N /\ lp = LAST p` MP_TAC
THENL[
GEXISTS_TAC`p`
THEN GEXISTS_TAC`r`
THEN ASM_REWRITE_TAC[];
SYM_DICH_TAC 0
THEN MRESA_TAC Tame_list.good_list_quotient[`L`;`N`]
THEN MRESA_TAC Tame_list.dart_hypermap_of_list[`quotient_list L N`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST]
THEN RESA_TAC]);;


let exist_final_list_e_list=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'y L r x = y /\
~final_list L r/\
MEM p (parts L r)/\
MEM y p /\
LAST p= lp
==>
    final_list L (find_list N (e_list lp))`,


REPEAT RESA_TAC
THEN DICH_ASM_TAC(7-2)[Tame_defs2.marked_list;Tame_defs2.s_flag_list]
THEN MRESA_TAC last_parts_y_not_s_list[`y`;`p`;`lp`;`L`;`N`;`r`;`x`]
THEN THAYTHEL_TAC 1[`r`;`p`;`lp`][Seq.mem_cat;Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN MRESA_TAC last_parts_e_list_y_not_s_list[`y`;`p`;`lp`;`L`;`N`;`r`;`x`]
THEN DICH_ASM_TAC(20-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`l`;`e_list lp`]
);;


let one_step_e_list_last_y=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'y L r x = y /\
~final_list L r/\
MEM p (parts L r)/\
MEM y p /\
LAST p= lp
==>
one_step_list L  lp ((f_list L)(e_list lp))`,
REPEAT RESA_TAC
THEN DICH_ASM_TAC(7-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.s_list;MEM_MAP]
THEN REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.one_step_list;]
);;




let exists_contour_not_snd_fst= prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r/\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
final_list L r1 /\
final_list L r2 /\
MEM r2 N/\
FST (split_normal_list L r f y z1)=r1/\
find_face L x = f /\
MEM v r2 /\
MEM u r1
 ==>
?s. contour_list L s /\
     ~(s = []) /\
     HD s = u /\
     LAST s = v /\
     set_of_list s SUBSET
     set_of_list
     (flatten
     (filter (final_list L)
     (cat (replace r [SND (split_normal_list L r f y z1)] N)
     [FST (split_normal_list L r f y z1)])))`,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC(13-2)[Tame_defs2.marked_list;Tame_defs2.s_flag_list]
THEN GSUBGOAL_THEN`MEM v (final_dart_list L N)`ASSUME_TAC;


REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[];

DICH_ASM_TAC(23-15)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN GABBREV_TAC`w=next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC Aq8.parts_mem_exists[`y`;`L`;`r`]
THEN GABBREV_TAC`lp=LAST p`
THEN MRESA_TAC exist_final_list_e_list[`y`;`p`;`lp`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`p`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN GSUBGOAL_THEN`MEM ((f_list L)(e_list lp)) (final_dart_list L N)`ASSUME_TAC;

REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`find_list N (e_list lp)`
THEN ASM_REWRITE_TAC[]
THEN DICH_ASM_TAC(40-14)[Hypermap.is_restricted]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.is_restricted_all_uniq[`L`]
THEN MRESA_TAC Meeixjo.e_list_last[`L`;`N`;`r`;`p`]
THEN MRESA_TAC List_hypermap.mem_find_list[`e_list lp`;`N`]
THEN MRESA_TAC Tame_list.mem_find_list1[`N`;`e_list lp`]
THEN MRESAL_TAC Tame_defs2.final_list[`L`;`(find_list N (e_list lp))`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`e_list lp`]
THEN MATCH_MP_TAC Seq2.mem_next_el
THEN ASM_REWRITE_TAC[];



THAYTHE_TAC(41-21)[`(f_list L)(e_list lp)`;`v`]
THEN DICH_ASM_TAC(45-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`r1`]
THEN MRESA_TAC Aq8.last_parts_y_not_cat[`p`;`l'z L N r x`;`y`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`r`]
THEN THAYTHE_TAC 0[`lp`]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MRESA_TAC Tame_list.betwn_cases[`r`;`y`;`lp`;`z`]
THEN DICH_TAC(58-53)
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN STRIP_TAC
THEN GSUBGOAL_THEN`MEM lp r1`ASSUME_TAC;



EXPAND_TAC"r1"
THEN REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN MRESA_TAC Aq56.case_hd_betwn_last[`lp`;`r`;`y`;`z`]
THEN DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r y z`;`lp`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`y`;`z`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r y z)`;`r`]
THEN RESA_TAC;


MRESA_TAC exists_conected_loop[`L`;`u`;`lp`;`(FST (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s2=r'`
THEN MRESA_TAC one_step_e_list_last_y[`y`;`p`;`lp`;` L`;` N `;`r`;` x`]
THEN MRESA_TAC contour_list_cat[`L`;`s`;`s2`]
THEN GEXISTS_TAC`cat s2 s`
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM;GSYM List_hypermap.mem_not_nil]
THEN REPEAT RESA_TAC;


DICH_TAC (67-63)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN ASM_REWRITE_TAC[Seq.mem_seq1];



DICH_TAC (67-45)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN RESA_TAC
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[]]);;


let one_step_last_y_e_list=prove(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'y L r x = y /\
~final_list L r/\
MEM p (parts L r)/\
MEM y p /\
LAST p= lp
==>
one_step_list L  (e_list lp) (next_el r lp)`,

ASM_REWRITE_TAC[Tame_defs2.one_step_list;]
THEN REPEAT RESA_TAC
THEN DICH_ASM_TAC(7-2)[Tame_defs2.marked_list;]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN DICH_ASM_TAC(16-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN DICH_ASM_TAC(22-8)[Hypermap.is_restricted]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last_not[`p`;`L`;`N`;`r`]
THEN DICH_TAC (32-20)
THEN REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`p`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`r`]
THEN THAYTHE_TAC 0[`lp`]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`r`]
THEN THAYTHEL_TAC 0[`lp`][Tame_defs2.one_step_list;List_hypermap.e_list]);;



let exists_contour_fst_not_snd= prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r/\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
final_list L r1 /\
final_list L r2 /\
MEM r1 N/\
FST (split_normal_list L r f y z1)=r2/\
find_face L x = f /\
MEM v r2 /\
MEM u r1
 ==>
?s. contour_list L s /\
     ~(s = []) /\
     HD s = u /\
     LAST s = v /\
     set_of_list s SUBSET
     set_of_list
     (flatten
     (filter (final_list L)
     (cat (replace r [SND (split_normal_list L r f y z1)] N)
     [FST (split_normal_list L r f y z1)])))`,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC(13-2)[Tame_defs2.marked_list;Tame_defs2.s_flag_list]
THEN GSUBGOAL_THEN`MEM u (final_dart_list L N)`ASSUME_TAC;


REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[];

DICH_ASM_TAC(23-15)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN GABBREV_TAC`w=next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC Aq8.parts_mem_exists[`y`;`L`;`r`]
THEN GABBREV_TAC`lp=LAST p`
THEN MRESA_TAC exist_final_list_e_list[`y`;`p`;`lp`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`p`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN GSUBGOAL_THEN`MEM ((e_list lp)) (final_dart_list L N)`ASSUME_TAC;


REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`find_list N (e_list lp)`
THEN ASM_REWRITE_TAC[]
THEN DICH_ASM_TAC(40-14)[Hypermap.is_restricted]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.is_restricted_all_uniq[`L`]
THEN MRESA_TAC Meeixjo.e_list_last[`L`;`N`;`r`;`p`]
THEN MRESA_TAC List_hypermap.mem_find_list[`e_list lp`;`N`]
THEN MRESA_TAC Tame_list.mem_find_list1[`N`;`e_list lp`];


THAYTHE_TAC(41-21)[`u`;`(e_list lp)`;]
THEN DICH_ASM_TAC(45-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`r2`]
THEN MRESA_TAC Aq8.last_parts_y_not_cat[`p`;`l'z L N r x`;`y`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`r`]
THEN THAYTHE_TAC 0[`lp`]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MRESA_TAC Tame_list.betwn_cases[`r`;`y`;`lp`;`z`]
THEN DICH_TAC(58-53)
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN STRIP_TAC
THEN GSUBGOAL_THEN`MEM lp r2`ASSUME_TAC;



EXPAND_TAC"r2"
THEN REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN MRESA_TAC Aq56.case_hd_betwn_last[`lp`;`r`;`y`;`z`]
THEN DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r y z`;`lp`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`y`;`z`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r y z)`;`r`]
THEN RESA_TAC;

GSUBGOAL_THEN`MEM (next_el r lp) r2`ASSUME_TAC;



EXPAND_TAC"r2"
THEN REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`lp= LAST (betwn r y z)`];


MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`lp`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`y`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r y z`;`lp`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r y z)`;`r`]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`];


MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`y`;`z`;`lp`]
THEN MRESA_TAC Aq56.case_hd_betwn_last[`next_el r lp`;`r`;`y`;`z`]
THEN DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r y z`;`lp`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`y`;`z`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r y z)`;`r`]
THEN RESA_TAC;


MRESA_TAC exists_conected_loop[`L`;`(next_el r lp)`;`v`;`(FST (split_normal_list L r (find_face L y) y z1))`]
THEN CHANGE_TAC`s2=r'`
THEN MRESA_TAC one_step_last_y_e_list[`y`;`p`;`lp`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC contour_list_cat[`L`;`s2`;`s`]
THEN GEXISTS_TAC`cat s s2`
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM;GSYM List_hypermap.mem_not_nil]
THEN REPEAT RESA_TAC;


DICH_TAC (68-45)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN RESA_TAC
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[];


DICH_TAC (67-63)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN ASM_REWRITE_TAC[Seq.mem_seq1]]);;





let exists_contour_combinatoric= prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
~final_list L r/\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
final_list L r1 /\
final_list L r2 /\
MEM r1
      (cat (replace r [SND (split_normal_list L r f y z1)] N)
      [FST (split_normal_list L r f y z1)])/\
MEM r2
      (cat (replace r [SND (split_normal_list L r f y z1)] N)
      [FST (split_normal_list L r f y z1)])/\
find_face L x = f /\
MEM v r2 /\
MEM u r1
 ==>
?s. contour_list L s /\
     ~(s = []) /\
     HD s = u /\
     LAST s = v /\
     set_of_list s SUBSET
     set_of_list
     (flatten
     (filter (final_list L)
     (cat (replace r [SND (split_normal_list L r f y z1)] N)
     [FST (split_normal_list L r f y z1)])))`,
[

REWRITE_TAC[Seq.mem_cat;]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.MEM_replace[`r1`;`r`;`[SND (split_normal_list L r f y z1)]`;`N`][Seq.mem_seq1]
THEN MRESAL_TAC Tame_list.MEM_replace[`r2`;`r`;`[SND (split_normal_list L r f y z1)]`;`N`][Seq.mem_seq1]
;



DICH_ASM_TAC(15-2)[Tame_defs2.marked_list;Tame_defs2.s_flag_list]
THEN GSUBGOAL_THEN`MEM u (final_dart_list L N)`ASSUME_TAC
;



REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[];



GSUBGOAL_THEN`MEM v (final_dart_list L N)`ASSUME_TAC
;



REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[];


THAYTHE_TAC (26-23)[`u`;`v`]
THEN GEXISTS_TAC`s`
THEN ASM_REWRITE_TAC[]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM;GSYM List_hypermap.mem_not_nil]
THEN REPEAT RESA_TAC
;



DICH_TAC (1)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN RESA_TAC
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC 3
THEN ASM_REWRITE_TAC[];


MRESA_TAC exists_contour_snd_not_fst[`z`;`r2`;`r1`;`u`;`v`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`]
;


MRESA_TAC exists_contour_not_fst_snd[`z`;`r1`;`r2`;`u`;`v`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`]
;



MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN GABBREV_TAC`w=next_el f x`
THEN DICH_ASM_TAC(18-0)[Tame_defs2.good_list]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN THAYTHE_TAC (29-19)[`SND (split_normal_list L r f y z1)`]
THEN DICH_TAC (27-12)
THEN RESA_TAC
THEN DICH_TAC (27-12)
THEN RESA_TAC
THEN MRESA_TAC exists_conected_loop[`L`;`u`;`v`;`SND (split_normal_list L r f y z1)`]
THEN CHANGE_TAC`s=r'`
THEN GEXISTS_TAC`s`
THEN ASM_REWRITE_TAC[]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
;



DICH_TAC (2)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
;


DICH_TAC (15-10)
THEN REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC exists_contour_fst_not_snd[`z`;`r2`;`r1`;`u`;`v`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`];



DICH_TAC (16-10)
THEN REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC exists_contour_snd_fst[`z`;`r2`;` r1`;`u`;`v`;`f`;`y`;`z1`;` L`;` N`;` r`;` x`];




DICH_TAC (15-9)
THEN REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC exists_contour_not_snd_fst[`z`;`r2`;`r1`;`u`;`v`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`];



DICH_TAC (16-9)
THEN REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC exists_contour_fst_snd[`z`;`r2`;` r1`;`u`;`v`;`f`;`y`;`z1`;` L`;` N`;` r`;` x`];






MRESAL_TAC Aq4.AQ4[`L`;`N`;`r`;`x`][GSYM Seq.allP]
THEN GABBREV_TAC`w=next_el f x`
THEN DICH_ASM_TAC(17-0)[Tame_defs2.good_list]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
THEN THAYTHE_TAC (29-19)[`FST (split_normal_list L r f y z1)`]
THEN DICH_TAC (26-9)
THEN REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC
THEN DICH_TAC (26-9)
THEN REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC
THEN DICH_TAC (26-10)
THEN RESA_TAC
THEN DICH_TAC (26-10)
THEN RESA_TAC
THEN MRESA_TAC exists_conected_loop[`L`;`u`;`v`;`FST (split_normal_list L r f y z1)`]
THEN CHANGE_TAC`s=r'`
THEN GEXISTS_TAC`s`
THEN ASM_REWRITE_TAC[]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;HD_APPEND;LAST_APPEND;APPEND_EQ_NIL;SET_OF_LIST_APPEND;UNION;SUBSET;IN_ELIM_THM]
THEN REPEAT RESA_TAC
;




DICH_TAC (2)
THEN REWRITE_TAC[SUBSET]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`x'`]
THEN DICH_TAC 0
THEN CHANGE_TAC`d=x'`
THEN ASM_REWRITE_TAC[IN_SET_OF_LIST;Seq2.mem_flatten;Seq.mem_filter;MEM_APPEND]
THEN RESA_TAC
THEN GEXISTS_TAC`r2`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC(SET_RULE`A==> B\/A`)
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
]);;


let next_el_power_trans_eq_f_v0=prove( `!L N r (x:A#A).  good_list L /\ good_list_nodes L/\
marked_list L N r x /\
~final_list L r/\
  next_el (find_face L x) x =w/\
 n<=indexf w (ytrans L N r x 0)  (r)
 ==>
((next_el r)POWER n) w = ((next_el (find_face L x))POWER n) w`,
REPEAT RESA_TAC
THEN GABBREV_TAC`d=(next_el r POWER n) w`
THEN GABBREV_TAC`y=(ytrans L N r x 0)`
THEN GABBREV_TAC`z=(ztrans L N r x 0)`
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][]
THEN DICH_ASM_TAC (9-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(17-11)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN GABBREV_TAC`f=(find_face L x)`
THEN MP_TAC next_mark_mem_r_trans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][]
THEN MRESA_TAC Pplhulj.mem_next_mark_inface[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`w`;`y`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`r`;`n`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<=b/\ b<c==> a<c`)[`n`;`indexf w y r`;` sizel r`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`n`;`w`;`d`;`r`]
THEN MRESAL_TAC Aq7.indexf_const_le_indexf_ytrans_v0[`w`;`f`;`L`;`N`;`d`;`r`;`x`;][ARITH_RULE`a<=a:num`]
THEN DICH_ASM_TAC(34)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESAL_TAC Aq7.indexf_const_le_indexf_ytrans_v0[`w`;`f`;`L`;`N`;`y`;`r`;`x`;][ARITH_RULE`a<=a:num`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC Aq7.indexf_ytrans_eq_l_m1_v0[`L`;`N`;`r`;`x`;`w`]
THEN MRESA_TAC Ncvibwu.l_y_rep_power_le[`L`;`r`;`x`]
THEN DICH_TAC (43-5)
THEN RESA_TAC
THEN DICH_TAC (43-5)
THEN RESA_TAC
THEN THAYTHEL_TAC 2[`n`][POWER;o_DEF]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(indexf w d r)`][POWER;o_DEF;I_DEF]
);;


let s_list_subset_r=prove(`
  !L N r (x:A#A).
~final_list L r /\
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
MEM d (s_list L r x)
==> MEM d r`,

ASM_REWRITE_TAC[Tame_defs2.s_list;MEM_MAP;Seq.mem_iota]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`n=x'`
THEN DICH_ASM_TAC(5-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(13-0)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`n`]
THEN GABBREV_TAC`t=PRE n`
THEN MRESAL_TAC Hypermap.LT_SUC_PRE[`n`][ARITH_RULE`0<a<=> 1<=a`]
THEN DICH_TAC(21-5)
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC a< 1+ b<=> a<b`]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`t`;`l'm L r x`]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC Aq7.indexf_ytrans_eq_l_m1_v0[`L`;`N`;`r`;`x`;`w`]
THEN MRESA_TAC next_el_power_trans_eq_f_v0[`t`;`w`;`L`;`N`;`r`;`x`]
THEN SYM_DICH_TAC 0
THEN MP_TAC next_mark_mem_r_trans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][]
THEN DICH_ASM_TAC(27-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`r`;`t`]
);;




let condition_s_list=prove(`
  !L N r (x:A#A).
~final_list L r /\
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
find_face L x = f /\
prev_el r z = z1 /\
next_el f x = w/\
MEM d r /\
indexf w d r < indexf w y r
==> MEM d (s_list L r x)`,

REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;Tame_list.lower_case]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(12-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN DICH_ASM_TAC (17-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(26-20)[Tame_defs2.normal_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`z`;`r`][Tame_defs2.ytrans]
THEN MRESAL_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0;Tame_list.lower_case;Seq.cat_uniq]
THEN MRESAL_TAC Tame_list.last_cat[`cat (betwn r z y) [y]`;`[z]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN ASM_REWRITE_TAC[Tame_defs2.s_list;MEM_MAP;Seq.mem_iota]
THEN GEXISTS_TAC`SUC(indexf w d r)`
THEN ASM_REWRITE_TAC[ARITH_RULE`1<= SUC a/\ (SUC a< 1 +b<=> a<b)`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESAL_TAC Aq7.indexf_ytrans_eq_l_m1_v0[`L`;`N`;`r`;`x`;`w`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC(indexf w d r)`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w d r`;`indexf w y r`]
THEN MP_TAC next_mark_mem_r_trans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][]
THEN MRESA_TAC Tame_list.indexf_n[`w`;`d`;`r`]
THEN MRESAL_TAC next_el_power_trans_eq_f_v0[`indexf w d r`;`w`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
);;



let next_mark_case_mem_v0= prove(
`(!L N r (x:A#A) f w.
         good_list L /\
         good_list_nodes L /\
                marked_list L N r x /\
                ~final_list L r /\
                find_face L x =f/\
                next_el f x=w
                ==>  w= (ytrans L N r x 0) \/
                 MEM w (betwn r (ztrans L N r x 0) (ytrans L N r x 0)))`,

REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC (5-2)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MRESA_TAC(SET_RULE`!x y. x=y\/ ~(x=y)`)[`w`;`y`]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC next_mark_mem_r_trans_v0[`L`;`N`;`r`;`x`;`f`;`w`]
THEN MRESA_TAC Tame_list.indexf0[`w`;`y`;`r`]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESAL_TAC Aq7.indexf_y_le_z_in_r_0[`f`;`w`;`L`;`N`;`r`;`x`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN DICH_ASM_TAC(23-7)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`z`;`w`;`y`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y r`;`indexf w z r`;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`r`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ a+c=b ==> c<=b`)[`indexf w y r`;`indexf w z r`;`indexf y z r`]
THEN MRESA_TAC Tame_list.indexf_antisym[`y`;`z`;`r`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`w=z`]
THENL[
DICH_TAC (35-23)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`z`;`r`]
THEN ARITH_TAC;

MRESA_TAC Tame_list.indexf_antisym[`w`;`z`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num. a+c=b/\ e+d= b /\ a<=e  ==> (d=c /\ d<=c)\/ d<c`)[`indexf y z r`;`sizel r`;`indexf z y r`;`indexf z w r`;`indexf w z r`]
THEN MRESAL_TAC Tame_list.indexf0[`z`;`w`;`r`][ARITH_RULE`~(a=0)<=> 0<a`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`z`;`w`;`y`;`r`][ARITH_RULE`a<=a+1/\ (a+b=a<=> b=0)`] 
]);;



let s_list_in_betwn= prove_by_refinement(`
  !L N r (x:A#A).
~final_list L r /\
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
MEM d (s_list L r x)
==> MEM d (betwn r z y)`,
[

ASM_REWRITE_TAC[Tame_defs2.s_list;MEM_MAP;Seq.mem_iota]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`n=x'`
THEN DICH_ASM_TAC(9-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(17-1)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`n`]
THEN GABBREV_TAC`t=PRE n`
THEN MRESAL_TAC Hypermap.LT_SUC_PRE[`n`][ARITH_RULE`0<a<=> 1<=a`]
THEN DICH_TAC(24-8)
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC a< 1+ b<=> a<b`]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`t`;`l'm L r x`]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC Aq7.indexf_ytrans_eq_l_m1_v0[`L`;`N`;`r`;`x`;`w`]
THEN MRESA_TAC next_el_power_trans_eq_f_v0[`t`;`w`;`L`;`N`;`r`;`x`]
THEN SYM_DICH_TAC 0
THEN MP_TAC next_mark_mem_r_trans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][]
THEN DICH_ASM_TAC(30-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`r`;`t`]
THEN GABBREV_TAC`d1=(next_el r POWER t) w`
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`z`;`d1`;`y`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`w`;`y`]
THEN DICH_TAC(44-29)
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<=b/\ b<c==> a<c`)[`t`;`indexf w y r`;` sizel r`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`t`;`w`;`d1`;`r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`d1`;`y`;`r`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESAL_TAC next_mark_case_mem_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;];


DICH_TAC (48-44)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_refl[`y`;`r`]
THEN DICH_TAC (49-24)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;


MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`z`;`w`;`y`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf z w r`;`indexf z y r`;]
THEN MRESAL_TAC Tame_list.indexf_add_left[`z`;`w`;`y`;`r`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num. a + b= c /\ d+e=b/\ d<b==> e<=c /\ 0< e`)[`indexf z w r`;`indexf w y r`;`indexf z y r`;`t`;`indexf d1 y r`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`z`;`d1`;`y`;`r`][ARITH_RULE`a<=a+1/\ (a+b=a+c<=> b=c)`] 
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a + b= c /\ 0<b==> a<c`)[`indexf z d1 r`;`indexf d1 y r`;`indexf z y r`]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`d1=z`];

DICH_TAC(57-46)
THEN RESA_TAC
THEN DICH_TAC(57-46)
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a + b= c ==> b<=c`)[`t`;`indexf z y r`;`indexf w y r`]
THEN DICH_TAC (58-50)
THEN SYM_DICH_TAC 1
THEN REWRITE_TAC[ARITH_RULE`a+b+c=c<=> a=0/\ b=0 `]
THEN RESA_TAC
THEN DICH_TAC (58-47)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;

MRESAL_TAC Tame_list.indexf0[`z`;`d1`;`r`][ARITH_RULE`~(a=0)<=> 0<a`]
]);;


let s_list_in_rtrans=prove(`
  !L N r (x:A#A).
~final_list L r /\
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
find_face L x = f /\
MEM d (s_list L r x)
==> MEM d (SND (split_normal_list L r f y z1))`,

REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.split_normal_list;LET_THM]
THEN DICH_ASM_TAC (8-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(16-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;MEM_APPEND]
THEN MRESA_TAC s_list_in_betwn[`z1`;`d`;`z`;`y`;`L`;`N`;`r`;`x`]
);;



let s_list_not_in_fst=prove(`
  !L N r (x:A#A).
~final_list L r /\
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
prev_el r z = z1 /\
find_face L x = f /\
MEM d (s_list L r x)
==> ~MEM d (FST (split_normal_list L r f y z1))`,
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (8-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(16-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;MEM_APPEND]
THEN STRIP_TAC
THEN MRESA_TAC s_list_in_rtrans[`z`;`d`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC AQ_normal_list[`L`;`N`;`r`;`x`][Tame_defs2.normal_list]
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN GABBREV_TAC`w=next_el f x`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(35-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`SND (split_normal_list L r (find_face L y) y z1)`;`FST (split_normal_list L r (find_face L y) y z1)`;`(ntrans L N r x 1)`;`d`]
THEN DICH_TAC 0
THEN MRESA_TAC Aq9.fst_is_not_eq_snd_split[`L`;`N`;`r`;`x`]);;







let cat_fst_split_normal_parts=prove_by_refinement(`
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x 
/\ ~final_list L r==>
parts L (FST (split_normal_list L r (find_face L x) (l'y L r x) (prev_el r (l'z L N r x))))
=
cat 
(rev
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (rev(upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))
 (betwn (find_face L x) ((l'y L r x)) (l'z L N r x))
)) (parts L (APPEND [next_el r (l'y L r x)] (APPEND (betwn r (next_el r (l'y L r x)) (prev_el r (l'z L N r x))) [(prev_el r (l'z L N r x))])))`,

[
REPEAT RESA_TAC
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core];

ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`betwn (find_face L y) y z = []`][Seq.mem_seq1;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;DE_MORGAN_THM;LAST_CLAUSES];

ASM_REWRITE_TAC[APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN MRESAL_TAC fst_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0]
THEN DICH_TAC (38-8)
THEN ASM_REWRITE_TAC[LET_THM;GSYM Seq.allP;Tame_list.quotient_list_core]
THEN RESA_TAC
THEN THAYTHES_TAC 1[`core L r`][Tame_list.MEMf_MAP;]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];


DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;



REWRITE_TAC[Tame_list.rev0;Seq.cat0s];



MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL]
THEN MRESAL_TAC fst_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;APPEND_NIL]
THEN GABBREV_TAC`g=(REVERSE
  (flatten
  (map
   (\x. map (\i. (n_list L POWER i) x)
        (upt (SUC 0) (sizel (filter (\t. t = FST x) (flatten L)))))
  (betwn f y z))))`
THEN GSUBGOAL_THEN`~(g=[])` ASSUME_TAC;



DICH_TAC(39-36)
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN EXPAND_TAC"g"
THEN REWRITE_TAC[ Tame_list.lower_case;Seq.mem_rev;Seq2.mem_flatten]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`map (\i. (n_list L POWER i) d)
          (upt (SUC 0) (sizel (filter (\t. t = FST d) (flatten L))))`
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC;


GEXISTS_TAC`d`
THEN ASM_REWRITE_TAC[];


REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[ Tame_list.lower_case;]
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(42-4)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;



ASM_TAC
THEN REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN REPEAT RESA_TAC
THEN DICH_TAC 1
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC
THEN REWRITE_TAC[th]
THEN REPEAT STRIP_TAC
THEN MP_TAC th
THEN REWRITE_TAC[ARITH_RULE`SUC 0=1`]
THEN STRIP_TAC)
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`g`;`(APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1]))`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;ARITH_RULE`SUC 0=1`];


GSUBGOAL_THEN`~((flatten
   (map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y z))) =[])`ASSUME_TAC;

ONCE_REWRITE_TAC[GSYM Aq4.nil_rev]
THEN ASM_REWRITE_TAC[ GSYM Tame_list.REVERSE_rev];




GSUBGOAL_THEN`~(HD
        (map
         (\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
        (betwn f y z)) =
        [])` ASSUME_TAC;



MRESAL_TAC Tame_list.HD_MAP[`(betwn f y z)`;`(\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`][ Tame_list.lower_case]
THEN GABBREV_TAC`d=(HD (betwn f y z))`
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN GEXISTS_TAC`n_list L d`
THEN GEXISTS_TAC`SUC 0`
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn f y z`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(48-4)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN DICH_TAC 0
THEN ARITH_TAC;




GSUBGOAL_THEN`~(next_el r y = f_list L (e_list (LAST g)))`ASSUME_TAC;


EXPAND_TAC"g"
THEN REWRITE_TAC[ Tame_list.lower_case;Tame_list.LAST_rev]
THEN ASM_SIMP_TAC[Tame_list.LAST_rev]
THEN MRESA_TAC Tame_list.HD_flatten[`(map
    (\x. map (\i. (n_list L POWER i) x)
         (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
   (betwn f y z))`]
THEN MRESAL_TAC Tame_list.HD_MAP[`(betwn f y z)`;`(\x. map (\i. (n_list L POWER i) x)
              (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))`][ Tame_list.lower_case]
THEN GABBREV_TAC`d=(HD (betwn f y z))`
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN REWRITE_TAC[GSYM Tame_list.lower_case;MEM_MAP]
THEN REWRITE_TAC[Tame_list.lower_case]
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.MEM_HD[`betwn f y z`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN DICH_ASM_TAC(50-4)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN GABBREV_TAC`a=sizel (filter (MEM (FST d)) L)`
THEN MRESA_TAC Aq4.nil_upt[`a`]
THEN MRESAL_TAC Tame_list.HD_MAP[`(upt 1 (sizel (filter (\t. t = FST (HD (betwn f y z))) (flatten L))))`;`(\i. (n_list L POWER i) (HD (betwn f y z)))`][ Tame_list.lower_case]
THEN MRESA_TAC Aq4.HD_UPT[`a`]
THEN ASM_REWRITE_TAC[ARITH_RULE`1=SUC 0`;POWER;o_DEF;I_DEF]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`f`;`y`;`z`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Tame_list.f_list_ext_f_list[`L`;`y`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`y`;`L`;`SUC 0`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.n_list_ext_n_list[`(f_list_ext L y)`;`L`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.list_ext_power_in_darts[`(f_list_ext L y)`;`L`;`SUC 0`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Lp_gen_theory.e_list_ext_eq_e_list[`L`;`(n_list_ext L (f_list_ext L y))`][List_hypermap.dart_in_face;List_hypermap.darts_of_list;IN_SET_OF_LIST;POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC List_hypermap.e_n_f_id[`L`][o_DEF;I_DEF;FUN_EQ_THM]
THEN MRESA_TAC Aq1.next_r_not_eq_f_v0[`f`;`y`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`y`;`SUC 0`][POWER;o_DEF;I_DEF;List_hypermap.dart_in_face];



MRESAL_TAC Tame_list.parts_cat[`L`;`(APPEND g
      (APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1])))`;
`g`;`    (APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1]))`;`LAST g`][GSYM Seq2.APPEND_cat;LAST_APPEND;APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;LAST;MAP_APPEND;HD_APPEND;HD]
THEN DICH_TAC (45-40)
THEN ASM_REWRITE_TAC[Tame_list.REVERSE_rev]
THEN RESA_TAC
THEN DICH_TAC (45-37)
THEN ASM_REWRITE_TAC[Tame_list.lower_case
;Seq.cat_uniq]
THEN RESA_TAC
THEN MRESA_TAC parts_rev_f_betwn_pure[`g`;`L`;`N`;`r`;`x`]
]);;



let e_n_list=prove(`e_list(n_list L d) =(prev_el (find_face L d) d)`,
REWRITE_TAC[List_hypermap.n_list;List_hypermap.e_list]);;

let next_s_list_eq_rtrans=prove_by_refinement(`
  !L N r (x:A#A).
~final_list L r /\
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
find_face L x = f /\
prev_el r z = z1 /\
next_el f x = w/\
MEM d r /\
indexf w d r < indexf w y r
==> next_el (rtrans L N r x 1) d = next_el r d`,
[
REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;Tame_list.lower_case]
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(12-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN DICH_ASM_TAC (17-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(26-20)[Tame_defs2.normal_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`z`;`r`][Tame_defs2.ytrans]
THEN MRESAL_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;APPEND_NIL;Seq2.map;Seq.flatten0;REVERSE;GSYM Merge_ineq.chop0;Tame_list.lower_case;Seq.cat_uniq]
THEN MRESAL_TAC Tame_list.last_cat[`cat (betwn r z y) [y]`;`[z]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESA_TAC condition_s_list[`z`;`z1`;`f`;`w`;`y`;`d`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC s_list_in_betwn[`z1`;`d`;`z`;`y`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r z y`;`d`]
THEN MRESAL_TAC Tame_list.last_cat[`[y]`;`(betwn r z y)`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESA_TAC(SET_RULE`!A. A \/ ~A`)[`d=y`];

DICH_TAC(47-11)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;

MRESAL_TAC Tame_list.next_el_cat1[`d`;`cat [z] (cat (betwn r z y) [y])`;`betwn f y z`][Seq.cat_uniq;Seq.mem_seq1;Seq.mem_cat;LAST]
THEN MRESAL_TAC Tame_list.next_el_cat2[`d`;`[z]`;`(cat (betwn r z y) [y])`][Seq.cat_uniq;Seq.mem_seq1;Seq.mem_cat;LAST]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`d= LAST(betwn r z y)`];

MRESAL_TAC Tame_list.next_el_cat_last1[`betwn r z y`;`[y]`][Seq.cat_uniq;Seq.mem_seq1;Seq.mem_cat;LAST;Ohcgkfu.sing_not_nil;HD]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`z`;`y`];

MRESAL_TAC Tame_list.next_el_cat1[`d`;`(betwn r z y)`;`[y]`][Seq.cat_uniq;Seq.mem_seq1;Seq.mem_cat;LAST]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`z`;`y`;`d`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`z`;`y`;`d`;`r`]]);;



let power_next_s_list_eq_rtrans=prove_by_refinement(`
  !L N r (x:A#A).
~final_list L r /\
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
l'z L N r x = z /\
l'y L r x = y /\
find_face L x = f /\
prev_el r z = z1 /\
next_el f x = w 
==>( !n. n<= l'm L r x
==> ((next_el (rtrans L N r x 1)) POWER n) w = ((next_el r) POWER n) w)`,
[
REPEAT GEN_TAC
THEN RESA_TAC
THEN INDUCT_TAC;

REWRITE_TAC[POWER;o_DEF;I_DEF];


REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<=b/\ a<b`)[`n`;`l'm L r x`]
THEN DICH_TAC 3
THEN RESA_TAC
THEN GABBREV_TAC`d=(next_el r POWER n) w`
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC next_mark_mem_r_trans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`f`;`w`][]
THEN DICH_ASM_TAC(17-3)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(25-1)[Tame_defs2.good_list]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(29-19)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`r`;`n`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESAL_TAC Aq7.indexf_ytrans_eq_l_m1_v0[`L`;`N`;`r`;`x`;`w`][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`w`;`y`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<=b/\ b<c==> a<c`)[`n`;`indexf w y r`;` sizel r`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`n`;`w`;`d`;`r`]
THEN MRESAL_TAC next_s_list_eq_rtrans[`z`;`z1`;`f`;`w`;`y`;`d`;`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]]);;



let condition_last_parts=prove(`(!p d.
                MEM p (parts L r) /\ MEM d p /\ ~(d = LAST r)/\ ~(r = [])/\ uniq r
                ==> (~(next_el r d = f_list L (e_list d)) <=> d = LAST p))`,

REPEAT RESA_TAC
THEN EQ_TAC
THENL[

RESA_TAC
THEN MRESAL_TAC Tame_list.parts_next_unlast[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`p`]
THEN THAYTHE_TAC 0[`d`]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`p`;`d`]
THEN DICH_TAC 1
THEN DICH_TAC 0
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d= LAST p`]
THEN RESA_TAC
THEN SYM_DICH_TAC 0
THEN RESA_TAC;

RESA_TAC
THEN MRESAL_TAC Tame_list.parts_next_last[`L`;`r`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`p`]
THEN THAYTHE_TAC 0[`d`]]);;

let AQ12_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
    final_list L (rtrans L N r x 1) ==>
     flag_list L (ntrans L N r x 1)`;;

let AQ12= prove_by_refinement(AQ12_concl,
[

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_ASM_TAC (0)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-4)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN DICH_TAC(26-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN DICH_TAC (26-10)
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L r`][Seq2.APPEND_cat;Seq.flatten_cat;Seq.cat_uniq]
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN MP_TAC mem_ytrans_list_of_darts_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.flag_list]
THEN STRIP_TAC;




REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`l1=l'`
THEN DICH_TAC(43-10)
THEN ASM_REWRITE_TAC[Tame_defs2.s_flag_list]
THEN RESA_TAC
THEN MRESA_TAC exists_contour_combinatoric[`z`;`l1`;` l`;`u`;`v`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`];



REWRITE_TAC[Seq.mem_cat;]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`lp=y'`
THEN CHANGE_TAC`r1=r'`
THEN MRESAL_TAC Tame_list.MEM_replace[`r1`;`r`;`[SND (split_normal_list L r f y z1)]`;`N`][Seq.mem_seq1]
THEN DICH_TAC(42-10)
THEN ASM_REWRITE_TAC[Tame_defs2.s_flag_list]
THEN RESA_TAC
;




MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r1`;`p`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN THAYTHE_TAC 1[`lp`]
THEN MRESA_TAC List_hypermap.uniq_flatten[`N`]
THEN MRESA_TAC Aq9.r_not_eq_snd_split_norm_v0[`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Hojodcm.NOT_MEM_REPLACE[`r`;`[SND (split_normal_list L r f y z1)]`;`N`][Seq.mem_seq1]
THEN MRESA_TAC(SET_RULE`!a b c. MEM a b/\ ~(MEM c b)==> ~(a=c)`)[`r1`;`(replace r [SND (split_normal_list L r f y z1)] N)`;`r`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`r`;`r1`;`N`;`lp`]
THEN MRESA_TAC s_list_subset_r[`lp`;`L`;`N`;`r`;`x`]
THEN THAYTHEL_TAC (55-43)[`r1`;`p`;`lp`][Seq.mem_cat]
THEN MRESA_TAC s_list_in_rtrans[`z`;`e_list (LAST p)`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
;



GEXISTS_TAC`SND (split_normal_list L r f y z1)`
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1];


DICH_TAC 1
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN RESA_TAC
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN STRIP_TAC
THEN DICH_TAC(59-56)
THEN ASM_REWRITE_TAC[];



DICH_TAC(43-40)
THEN ASM_REWRITE_TAC[];



DICH_TAC(43-39)
THEN REWRITE_TAC[Seq.mem_seq1]
THEN RESA_TAC
;


(*****case in SND***)

MRESA_TAC Aq8.AQ_normal_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`]
THEN MRESA_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`(ntrans L N r x 1) `;`r1`;`p`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p`]
THEN THAYTHE_TAC 1[`lp`]
THEN MRESA_TAC List_hypermap.uniq_flatten[`N`]
THEN DICH_TAC 1
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.split_normal_list;LET_THM]
THEN ASM_REWRITE_TAC[LET_THM]
THEN STRIP_TAC
THEN DICH_TAC (52-38)
THEN ASM_REWRITE_TAC[]
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.split_normal_list;LET_THM]
THEN ASM_REWRITE_TAC[LET_THM]
THEN MRESA_TAC cat_fst_split_normal_parts[`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.split_normal_list;LET_THM]
THEN ASM_REWRITE_TAC[LET_THM]
THEN RESA_TAC
THEN REWRITE_TAC[Seq.mem_cat]
THEN RESA_TAC;



DICH_TAC 0
THEN REWRITE_TAC[Seq.mem_rev;Seq.mapP]
THEN RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN REWRITE_TAC[Tame_list.lower_case]
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`d`;`x`;`L`]
THEN MRESA_TAC List_hypermap.good_list_uniq[`L`]
THEN DICH_ASM_TAC(57-3)[Hypermap.is_restricted]
THEN MRESAL_TAC Tame_list.simple_hypermap_uniq[`L`][List_hypermap.dart_in_face]
THEN MRESAL_TAC Tame_list.dart_of_card_node[`L`;`d`;`FST d`][List_hypermap.dart_in_face;Tame_defs2.facesAt_list;Tame_list.lower_case]
THEN MRESA_TAC Hojodcm.count_node_face[`d`;`L`]
THEN DICH_ASM_TAC(28-24)[Hypermap.lemma_node_nondegenerate]
THEN MRESA_TAC Lp_gen_theory.dart_list_all[`L`]
THEN THAYTHE_TAC 0[`(\d:A#A. (2 <= CARD (node (hypermap_of_list L) d)))`]
THEN THAYTHES_TAC 0[`d`][List_hypermap.dart_in_face;ARITH_RULE`SUC 0=1`]
THEN ONCE_REWRITE_TAC[MEM_EQ_UPT;]
THEN GABBREV_TAC`a=sizel (filter (MEM (FST d)) L)`
THEN MRESA_TAC Aq4.nil_upt[`a`]
THEN MRESAL_TAC Tame_list.LAST_MAP
[`(rev (upt 1 (sizel (filter (\t. t = FST d) (flatten L)))))`;`(\i. (n_list L POWER i) d)`][Aq4.nil_rev;Tame_list.lower_case]
THEN MRESA_TAC Tame_list.LAST_rev[`upt 1 a`]
THEN MRESA_TAC Aq4.HD_UPT[`a`]
THEN ASM_REWRITE_TAC[ARITH_RULE`1=SUC 0`;POWER;o_DEF;I_DEF;e_n_list]
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN GEXISTS_TAC`SND (split_normal_list L r f y z1)`
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN RESA_TAC;




MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1];



GSUBGOAL_THEN`MEM d (SND (split_normal_list L r f y z1))` ASSUME_TAC
;



ASM_REWRITE_TAC[Tame_defs2.split_normal_list;LET_THM;MEM_APPEND]
;


MRESA_TAC Seq2.mem_prev_el[`d`;`(SND (split_normal_list L r f y z1))`]
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Seq2.next_prev_id[`d`;`SND (split_normal_list L r f y z1)`]
THEN MRESAL_TAC Tame_defs2.final_list[`L`;`SND (split_normal_list L r f y z1)`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`(prev_el (SND (split_normal_list L r f y z1)) d)`]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th])
THEN MRESA_TAC Seq2.prev_next_id[`prev_el (SND (split_normal_list L r f y z1)) d`;`f`]
THEN GABBREV_TAC`pd=prev_el (SND (split_normal_list L r f y z1)) d`
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN GSUBGOAL_THEN`MEM pd (flatten (ntrans L N r x 1))`ASSUME_TAC
;


REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`(SND (split_normal_list L r f y z1))`
THEN ASM_REWRITE_TAC[];



MRESAL_TAC Tame_list.normal_list_darts_of_list_mem[`L`;`ntrans L N r x 1`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`pd`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`prev_el (SND (split_normal_list L r f y z1)) d`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESAL_TAC Tame_defs2.final_list[`L`;`SND (split_normal_list L r f y z1)`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`pd`]
THEN DICH_TAC(87-55)
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`next_el (find_face L pd) pd`;`x`;`L`]
THEN MRESAL_TAC Pwssrat.find_face_f_list_power[`SUC 0`;`L`;`pd`][POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[];



DICH_TAC(53-45)
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.split_normal_list;LET_THM;MEM_APPEND]
THEN REWRITE_TAC[LET_THM;MEM_APPEND;Tame_list.lower_case;Seq.cat_uniq]
THEN RESA_TAC
THEN MRESAL_TAC Aq8.MEM_PARTS_IMP[`L`;`p`;`APPEND [next_el r y] (APPEND (betwn r (next_el r y) z1) [z1])`;][Tame_list.lower_case;Seq.cat_uniq;Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN THAYTHE_TAC 0[`LAST p`]
THEN GSUBGOAL_THEN`MEM(LAST p) r`ASSUME_TAC;



DICH_TAC 0
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
THEN RESA_TAC;


MATCH_MP_TAC Seq2.mem_next_el
THEN ASM_REWRITE_TAC[];



MRESA_TAC Tame_list.betwn_mem[`r`;`next_el r y`;`z1`;`LAST p`]
;



MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
;


MRESA_TAC Aq8.parts_mem_exists[`LAST p`;`L`;`r`]
THEN CHANGE_TAC`p1=p'`
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`lp= LAST p1`];



MRESA_TAC s_list_not_in_fst[`z`;`lp`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`]
THEN DICH_TAC 0
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[Tame_defs2.split_normal_list;LET_THM;MEM_APPEND]
THEN ASM_REWRITE_TAC[LET_THM]
THEN DICH_TAC (64-50)
THEN RESA_TAC
THEN RESA_TAC
THEN THAYTHEL_TAC(65-41)[`r`;`p1`;`lp`][Seq.mem_cat] 
THEN MRESA_TAC s_list_in_rtrans[`z`;`e_list (LAST p)`;`f`;`y`;`z1`;`L`;`N`;`r`;`x`]
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
;

(************)

GEXISTS_TAC`SND (split_normal_list L r f y z1)`
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1];


DICH_TAC 1
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
THEN RESA_TAC
THEN GEXISTS_TAC`l`
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM3_replace
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN STRIP_TAC
THEN DICH_TAC(59-56)
THEN ASM_REWRITE_TAC[]
;



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`MEM p (parts L r)`]
;


MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`p`;`p1`;`parts L r`;`lp`]
THEN DICH_TAC(68-64)
THEN RESA_TAC
;


GABBREV_TAC`s=cat [next_el r y] (cat (betwn r (next_el r y) z1) [z1])`
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. ~A\/ A`)[`lp= LAST s`];



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST p = LAST r`]
;


MRESA_TAC LAST_parts[`N`;`L`;`parts L r`;`r`]
THEN MRESA_TAC Tame_list.parts_nonnil[`L`;`r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`parts L r`]
THEN GABBREV_TAC`p2=LAST (parts L r)`
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p2`]
THEN MRESA_TAC Tame_list.MEM_LAST[`p2`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN DICH_TAC(78-63)
THEN RESA_TAC
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`p1`;`p2`;`parts L r`;`lp`]
THEN DICH_TAC(79-63)
THEN RESA_TAC
;




MRESA_TAC condition_last_parts[`r`;`L`;`p1`;`LAST p`]
THEN DICH_TAC(70-52)
THEN ASM_REWRITE_TAC[Tame_list.lower_case]
THEN RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`lp`]
THEN MRESA_TAC condition_last_parts[`s`;`L`;`p`;`LAST p`]
THEN DICH_TAC 0
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.cat_uniq]
THEN RESA_TAC
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];



DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;




MRESAL_TAC Aq8.next_cat_betwn_same[`next_el r y`;`z1`;`s`;`r`;`lp`][Tame_list.lower_case]
THEN DICH_TAC (84-67)
THEN MRESAL_TAC Tame_list.last_cat[`(cat (betwn r y1 z1) [z1])`;`[y1]`;][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [z1]`;`(betwn r y1 z1)`;][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST];



GABBREV_TAC`y1=next_el r y`
THEN MRESAL_TAC Tame_list.last_cat[`(cat (betwn r y1 z1) [z1])`;`[y1]`;][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [z1]`;`(betwn r y1 z1)`;][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN DICH_TAC(71-68)
THEN RESA_TAC
THEN DICH_TAC(71-23)
THEN MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN DICH_TAC(72-20)
THEN REWRITE_TAC[Tame_defs2.loop_list;GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHE_TAC 0[`r`]
THEN THAYTHEL_TAC 0[`z1`][Tame_defs2.one_step_list]
THEN MRESA_TAC prev_r_not_eq_f_v0[`z1`;`z`;`L`;`N`;`r`;`x`]
THEN STRIP_TAC
THEN REWRITE_TAC[Tame_defs2.final_dart_list;Seq2.mem_flatten;Seq.mem_filter]
;



GEXISTS_TAC`SND (split_normal_list L r f y z1)`
THEN ASM_REWRITE_TAC[Seq.mem_cat]
THEN STRIP_TAC;


MATCH_MP_TAC(SET_RULE`A==> A\/B`)
THEN MATCH_MP_TAC Tame_list.MEM2_replace
THEN ASM_REWRITE_TAC[Seq.mem_seq1];





GSUBGOAL_THEN`MEM z (SND (split_normal_list L r f y z1))` ASSUME_TAC
;



ASM_REWRITE_TAC[Tame_defs2.split_normal_list;LET_THM;MEM_APPEND;Seq.mem_seq1]
;


MRESA_TAC Seq2.mem_prev_el[`z`;`(SND (split_normal_list L r f y z1))`]
THEN MRESA_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`]
THEN MRESA_TAC Seq2.next_prev_id[`z`;`SND (split_normal_list L r f y z1)`]
THEN MRESAL_TAC Tame_defs2.final_list[`L`;`SND (split_normal_list L r f y z1)`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`(prev_el (SND (split_normal_list L r f y z1)) z)`]
THEN GABBREV_TAC`pd=prev_el (SND (split_normal_list L r f y z1)) z`
THEN MRESA_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`]
THEN GSUBGOAL_THEN`MEM pd (flatten (ntrans L N r x 1))`ASSUME_TAC
;




REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`(SND (split_normal_list L r f y z1))`
THEN ASM_REWRITE_TAC[];



MRESAL_TAC Tame_list.normal_list_darts_of_list_mem[`L`;`ntrans L N r x 1`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`pd`]
THEN MRESA_TAC Tame_list.good_list_e_list[`L`;`z1`]
THEN MRESAL_TAC Aq23.F_LIST_INJ[`L`;`prev_el (SND (split_normal_list L r f y z1)) z`;`e_list z1`][List_hypermap.darts_of_list;IN_SET_OF_LIST]
THEN SYM_DICH_TAC 0
THEN RESA_TAC;
]);;


 (* end;; *)





load_end __FILE__;;