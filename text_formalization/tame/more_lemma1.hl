(* ========================================================================== *)
(* FlxSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  More_lemma1 = struct

open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;


open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;
open Pbflhet;;
open Kbwpbhq;;
open Hojodcm;;
open Aq1;;
open Aq23;;
open Aq4;;
open Aq8;;

let betwn_LAST_HD_parts=prove_by_refinement(
`uniq (MAP (FST o HD) sp) /\ normal_list L N /\
         good_list L /\
         MEM r N /\
         parts L r = sp /\
         MEM py sp /\
         MEM pz sp /\
         MEM y py /\
         MEM z pz /\
         ~(FST y = FST z)
         ==>(!x. MEM x (betwn r (LAST py) (HD pz)) <=> MEM x (flatten (betwn sp py pz)))`,
[



REPEAT RESA_TAC
THEN DICH_ASM_TAC(8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.MEM_LAST[`py`]
THEN THAYTHE_ASM_TAC 1[`LAST py`]
THEN THAYTHE_ASM_TAC 0[`y`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`pz`]
THEN MRESA_TAC Tame_list.MEM_HD[`pz`]
THEN THAYTHE_ASM_TAC 1[`HD pz`]
THEN THAYTHE_ASM_TAC 0[`z`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`z`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`y`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`LAST py`][o_DEF]
THEN GSUBGOAL_THEN`~(LAST py = HD pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC (30-8)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN GSUBGOAL_THEN`~(py=pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC (33-29)
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC(32-28)
THEN ASM_REWRITE_TAC[];


MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`(betwn r (LAST py) (HD pz) = [])`];

MRESA_TAC Tame_list.betwn_nil[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.f_list_quotient_alt[`L`;`N`;`r`;`r`;`py`;`pz`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.betwn_nil[`sp`;`py`;`pz`][Tame_list.parts_nil;Seq.flatten0];

EQ_TAC
THEN RESA_TAC;


MRESA_TAC Tame_list.betwn_mem[`r`;`LAST py`;`HD pz`;`x`]
THEN MRESA_TAC Aq8.parts_mem_exists[`x`;`L`;`r`]
THEN GSUBGOAL_THEN`~(FST (HD py) = FST (HD pz))`ASSUME_TAC;


SYM_DICH_TAC(39-29)
THEN SYM_DICH_TAC(38-29)
THEN ASM_REWRITE_TAC[];

MRESA_TAC Aq12.FST_HD_MAP_betwn[`N`;`L`;`r`;`py`;`pz`;`sp`;`HD pz`;`LAST py`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq12.mem_flatten_betwn_sym_case[`LAST py`;`HD pz`;`parts L r`;`py`;`x`;`pz`];


MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`x`][o_DEF]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`py`;`p`;`sp`;`x`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`py`;`pz`;`sp`;`HD pz`];


MRESA_TAC Aq12.indexf_split_LAST_flatten[`x`;`p`;`HD pz`;`sp`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`LAST py`;`x`;`HD pz`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf (LAST p) x r `;` indexf (LAST p) (HD pz) r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`LAST py`;`x`;`HD pz`;`r`][]
THEN DICH_TAC(52-19)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_refl[`LAST py`;`py`]
THEN MRESAL_TAC Aq12.indexf_split_LAST_flatten[`LAST py`;`p`;`HD pz`;`sp`][ARITH_RULE`0+a=a`]
THEN DICH_TAC(54-51)
THEN ASM_REWRITE_TAC[ARITH_RULE`d+a+b+1=b+1<=> a=0/\ d=0:num`]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf0[`LAST py`;`x`;`r`]
THEN DICH_TAC(56-48)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;


MRESA_TAC List_hypermap.uniq_sublist_unique[`pz`;`p`;`sp`;`x`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`py`;`pz`;`sp`;`LAST py`]
THEN MRESA_TAC Aq12.indexf_split_HD_flatten[`LAST py`;`sp`;`x`;`pz`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`LAST py`;`x`;`HD pz`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf (LAST py) x r `;` indexf (LAST py) (HD pz) r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`LAST py`;`x`;`HD pz`;`r`][]
THEN MRESA_TAC Aq12.indexf_split_HD_flatten[`LAST py`;`sp`;`HD pz`;`pz`]
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`HD pz`;`pz`]
THEN ASM_REWRITE_TAC[ARITH_RULE`(a+b+1)+c=a+0+1<=> b=0/\ c=0`]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf0[`HD pz`;`x`;`pz`]
THEN MRESA_TAC Tame_list.not_betwn2[`LAST py`;`x`;`r`]
THEN DICH_TAC(56-36)
THEN RESA_TAC;


MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq12.mem_flatten_betwn_sym[`py`;`pz`;`x`;`sp`;`LAST py`;`HD pz`]
]);;


let LAST_betwn_LAST_HD_parts=prove_by_refinement(
`uniq (MAP (FST o HD) sp) /\ normal_list L N /\
         good_list L /\
         MEM r N /\
         parts L r = sp /\
         MEM py sp /\
         MEM pz sp /\
         MEM y py /\
         MEM z pz /\
         ~(FST y = FST z)
==> LAST (betwn r (LAST py) (HD pz)) = LAST (flatten (betwn sp py pz))`,

[
REPEAT RESA_TAC
THEN DICH_ASM_TAC(8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.MEM_LAST[`py`]
THEN THAYTHE_ASM_TAC 1[`LAST py`]
THEN THAYTHE_ASM_TAC 0[`y`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`pz`]
THEN MRESA_TAC Tame_list.MEM_HD[`pz`]
THEN THAYTHE_ASM_TAC 1[`HD pz`]
THEN THAYTHE_ASM_TAC 0[`z`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`z`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`y`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`LAST py`][o_DEF]
THEN GSUBGOAL_THEN`~(LAST py = HD pz)`ASSUME_TAC;


STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC (30-8)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN GSUBGOAL_THEN`~(py=pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC (33-29)
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC(32-28)
THEN ASM_REWRITE_TAC[];


MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`(betwn r (LAST py) (HD pz) = [])`];


MRESA_TAC Tame_list.betwn_nil[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.f_list_quotient_alt[`L`;`N`;`r`;`r`;`py`;`pz`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.betwn_nil[`sp`;`py`;`pz`][Tame_list.parts_nil;Seq.flatten0];


MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN GSUBGOAL_THEN`~(betwn sp py pz = [])`ASSUME_TAC;

MRESA_TAC Tame_list.betwn_nil[`sp`;`py`;`pz`]
THEN MRESA_TAC Tame_list.betwn_nil[`r`;`LAST py`;`HD pz`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN MRESA_TAC Tame_list.next_el_flatten_last[`sp`;`py`];


MRESA_TAC Tame_list.MEM_LAST[`betwn sp py pz`]
THEN MRESA_TAC Tame_list.betwn_mem[`sp`;`py`;`pz`;`LAST(betwn sp py pz)`]
THEN DICH_TAC (40-37)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`(LAST (betwn sp py pz))`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`betwn sp py pz`;]
THEN MRESA_TAC Aq23.next_last_betwn[`sp`;`py`;`pz`]
THEN MRESA_TAC Tame_list.next_el_flatten_last[`sp`;`LAST (betwn sp py pz)`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (LAST (betwn sp py pz))`;`r`;]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Seq2.prev_next_id[`LAST (betwn r (LAST py) (HD pz))`;`r`;]
]);;



let next_betwn_LAST_HD_parts=prove_by_refinement(
`uniq (MAP (FST o HD) sp) /\ normal_list L N /\
         good_list L /\
         MEM r N /\
         parts L r = sp /\
         MEM py sp /\
         MEM pz sp /\
         MEM y py /\
         MEM z pz /\
         ~(FST y = FST z)
         ==>(!x. MEM x (betwn r (LAST py) (HD pz))
      ==> next_el (betwn r (LAST py) (HD pz)) x =
          next_el (flatten (betwn sp py pz)) x)`,
[

RESA_TAC
THEN DICH_ASM_TAC(8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.MEM_LAST[`py`]
THEN THAYTHE_ASM_TAC 1[`LAST py`]
THEN THAYTHE_ASM_TAC 0[`y`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`pz`]
THEN MRESA_TAC Tame_list.MEM_HD[`pz`]
THEN THAYTHE_ASM_TAC 1[`HD pz`]
THEN THAYTHE_ASM_TAC 0[`z`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`z`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`y`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`LAST py`][o_DEF]
THEN GSUBGOAL_THEN`~(LAST py = HD pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC (30-8)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN GSUBGOAL_THEN`~(py=pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC (33-29)
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC(32-28)
THEN ASM_REWRITE_TAC[];


MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`(betwn r (LAST py) (HD pz) = [])`];

MRESA_TAC Tame_list.betwn_nil[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.f_list_quotient_alt[`L`;`N`;`r`;`r`;`py`;`pz`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.betwn_nil[`sp`;`py`;`pz`][Tame_list.parts_nil;Seq.flatten0];

REPEAT RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST (betwn r (LAST py) (HD pz))=x`];

MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`LAST py`;`HD pz`;`r`]
THEN MRESA_TAC Aq4.next_el_last_hd[`(betwn r (LAST py) (HD pz))`]
THEN MRESA_TAC LAST_betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`sp`;`py`;`pz`]
THEN MRESA_TAC Aq12.uniq_flatten_betwn[`sp`;`pz`;`py`]
THEN MRESA_TAC betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`sp`;`py`;`pz`]
THEN THAYTHE_TAC 0[`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`flatten (betwn sp py pz)`;`x`]
THEN MRESA_TAC Aq4.next_el_last_hd[`flatten (betwn sp py pz)`]
THEN GSUBGOAL_THEN`~(betwn sp py pz = [])`ASSUME_TAC;

MRESA_TAC Tame_list.betwn_nil[`sp`;`py`;`pz`]
THEN MRESA_TAC Tame_list.betwn_nil[`r`;`LAST py`;`HD pz`]
THEN STRIP_TAC
THEN DICH_TAC 1
THEN MRESA_TAC Tame_list.next_el_flatten_last[`sp`;`py`];


MRESA_TAC Tame_list.MEM_HD[`betwn sp py pz`]
THEN MRESA_TAC Tame_list.betwn_mem[`sp`;`py`;`pz`;`HD(betwn sp py pz)`]
THEN DICH_TAC (50-39)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`(HD (betwn sp py pz))`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Tame_list.HD_flatten[`betwn sp py pz`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`sp`;`py`;`pz`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Tame_list.next_el_flatten_last[`sp`;`py`];


MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`LAST py`;`HD pz`;`x`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`LAST py`;`HD pz`;`x`;`r`]
THEN MRESA_TAC Aq12.uniq_flatten_betwn[`sp`;`pz`;`py`]
THEN MRESA_TAC betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`sp`;`py`;`pz`]
THEN THAYTHE_TAC 0[`x`]
THEN DICH_TAC 0
THEN REWRITE_TAC[Seq2.mem_flatten]
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`LAST l=x`];


GSUBGOAL_THEN`all (\r. ~(r = [])) (betwn sp py pz)`ASSUME_TAC;

REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN DICH_TAC(46-39)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`sp`;`py`;`pz`;`x'`];


MRESA_TAC Tame_list.next_el_flatten_last[`betwn sp py pz`;`l`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`l=LAST(betwn sp py pz)`];

MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn sp py pz`;`l`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`py`;`pz`;`sp`]
THEN MRESA_TAC Aq4.next_el_last_hd[`(betwn sp py pz)`]
THEN DICH_TAC (51-37)
THEN MRESA_TAC LAST_betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`sp`;`py`;`pz`]
THEN MRESA_TAC Tame_list.last_flatten[`betwn sp py pz`]
THEN SYM_DICH_TAC (52-47)
THEN ASM_REWRITE_TAC[];

MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`sp`;`py`;`pz`;`l`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`py`;`pz`;`l`;`sp`]
THEN MRESA_TAC Tame_list.next_el_flatten_last[`sp`;`l`]
THEN MRESA_TAC Tame_list.betwn_mem[`sp`;`py`;`pz`;`l`];

MRESA_TAC Tame_list.next_el_flatten_unlast[`betwn sp py pz`;`l`;`x`]
THEN MRESA_TAC Tame_list.betwn_mem[`sp`;`py`;`pz`;`l`]
THEN MRESA_TAC Tame_list.next_el_flatten_unlast[`sp`;`l`;`x`]
]);;



let betwn_LAST_HD_parts_flatten=prove_by_refinement(`uniq (MAP (FST o HD) sp)  /\normal_list L N /\
         good_list L /\
         MEM r N /\
         parts L r = sp /\
         MEM py sp /\
         MEM pz sp /\
         MEM y py /\
         MEM z pz /\
         ~(FST y = FST z)
         ==> flatten (betwn sp py pz) = betwn r (LAST py) (HD pz)`,
[

REPEAT RESA_TAC
THEN DICH_ASM_TAC(8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.MEM_LAST[`py`]
THEN THAYTHE_ASM_TAC 1[`LAST py`]
THEN THAYTHE_ASM_TAC 0[`y`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`pz`]
THEN MRESA_TAC Tame_list.MEM_HD[`pz`]
THEN THAYTHE_ASM_TAC 1[`HD pz`]
THEN THAYTHE_ASM_TAC 0[`z`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`z`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`y`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`LAST py`][o_DEF]
THEN GSUBGOAL_THEN`~(LAST py = HD pz)`ASSUME_TAC;


STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC (30-8)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN GSUBGOAL_THEN`~(py=pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC (33-29)
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC(32-28)
THEN ASM_REWRITE_TAC[];


MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`(betwn r (LAST py) (HD pz) = [])`];


MRESA_TAC Tame_list.betwn_nil[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.f_list_quotient_alt[`L`;`N`;`r`;`r`;`py`;`pz`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.betwn_nil[`sp`;`py`;`pz`][Tame_list.parts_nil;Seq.flatten0];

ONCE_REWRITE_TAC[SET_RULE`a=b<=> b=a`]
THEN MATCH_MP_TAC Aq12.eq_last_next
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`LAST py`;`HD pz`;`r`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq12.uniq_flatten_betwn[`sp`;`pz`;`py`];

MRESA_TAC betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`parts L r`;`py`;`pz`]
THEN MRESA_TAC LAST_betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`sp`;`py`;`pz`]
THEN MRESA_TAC next_betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`sp`;`py`;`pz`]]);;



let parts_betwn=prove_by_refinement(`is_edge_nondegenerate (hypermap_of_list L)/\ uniq (MAP (FST o HD) sp) /\ normal_list L N /\
         good_list L /\
         MEM r N /\
         parts L r = sp /\
         MEM py sp /\
         MEM pz sp /\
         MEM y py /\
         MEM z pz /\
         ~(FST y = FST z)
         ==> parts L (betwn r (LAST py) (HD pz)) =
             (betwn (parts L r) py pz)`,
[
REPEAT RESA_TAC
THEN DICH_ASM_TAC(8)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.MEM_LAST[`py`]
THEN THAYTHE_ASM_TAC 1[`LAST py`]
THEN THAYTHE_ASM_TAC 0[`y`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`pz`]
THEN MRESA_TAC Tame_list.MEM_HD[`pz`]
THEN THAYTHE_ASM_TAC 1[`HD pz`]
THEN THAYTHE_ASM_TAC 0[`z`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`z`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`y`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`LAST py`][o_DEF]
THEN GSUBGOAL_THEN`~(LAST py = HD pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC (30-8)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;

MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN GSUBGOAL_THEN`~(py=pz)`ASSUME_TAC;

STRIP_TAC
THEN DICH_TAC (33-29)
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC(32-28)
THEN ASM_REWRITE_TAC[];


MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`(betwn r (LAST py) (HD pz) = [])`];


MRESA_TAC Tame_list.betwn_nil[`r`;`LAST py`;`HD pz`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Tame_list.f_list_quotient_alt[`L`;`N`;`r`;`r`;`py`;`pz`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.betwn_nil[`sp`;`py`;`pz`][Tame_list.parts_nil];

MATCH_MP_TAC Tame_list.parts_characterize
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`LAST py`;`HD pz`;`r`]
THEN STRIP_TAC;


MRESA_TAC betwn_LAST_HD_parts_flatten[`N`;`L`;`y`;`z`;`parts L r`;`r`;`py`;`pz`];

STRIP_TAC;

REWRITE_TAC[GSYM Seq.allP]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN DICH_TAC 0
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.betwn_mem[`sp`;`py`;`pz`;`x`];


REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`sp`;`py`;`pz`;`p`]
THEN MRESA_TAC Aq12.condition_last_parts[`r`;`L`;`p`;`d`]
THEN GSUBGOAL_THEN`MEM d (betwn r (LAST py) (HD pz))`ASSUME_TAC;


MRESA_TAC betwn_LAST_HD_parts[`N`;`L`;`y`;`z`;`r`;`sp`;`py`;`pz`]
THEN REWRITE_TAC[Seq2.mem_flatten]
THEN GEXISTS_TAC`p`
THEN ASM_REWRITE_TAC[];

MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`LAST py`;`HD pz`;`d`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`LAST py`;`HD pz`;`d`;`r`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d=LAST r`];


MRESA_TAC Aq4.next_el_last_hd[`r`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`sp`;`p`]
THEN MRESA_TAC Tame_list.MEM_LAST[`sp`]
THEN DICH_TAC 2
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`LAST sp`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`sp`]
THEN MRESA_TAC Tame_list.MEM_LAST[`LAST sp`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`LAST sp`;`p`;`sp`;`d`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last_not[`p`;`L`;`N`;`r`]
THEN DICH_TAC 0
THEN DICH_TAC(55-47)
THEN RESA_TAC;



MATCH_DICH_TAC (46-42)
THEN RESA_TAC]);;



let normal_condition_last_parts=prove(`!r L p d.
          MEM p (parts L r) /\
          MEM d p /\
good_list L /\
         normal_list L N /\
         MEM r N /\
is_edge_nondegenerate (hypermap_of_list L)
          ==> (~(next_el r d = f_list L (e_list d)) <=> d = LAST p)`,

REPEAT RESA_TAC
THEN DICH_ASM_TAC(5-3)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`p`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d=LAST r`]
THENL[
MRESA_TAC Aq4.next_el_last_hd[`r`]
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`parts L r`;`p`]
THEN MRESA_TAC Tame_list.MEM_LAST[`parts L r`]
THEN DICH_TAC 2
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`LAST (parts L r)`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`LAST (parts L r)`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`LAST (parts L r)`;`p`;`(parts L r)`;`d`]
THEN MRESA_TAC Tame_list.normal_list_parts_next_last_not[`p`;`L`;`N`;`r`]
THEN DICH_TAC 0
THEN DICH_TAC(55-47)
THEN RESA_TAC;

MRESA_TAC Aq12.condition_last_parts[`r`;`L`;`p`;`d`]
]);;



let next_cat_power1=prove_by_refinement(`!n. uniq (cat g s) /\ MEM y s /\ n<= indexf y (LAST s) s ==> (next_el (cat g s) POWER n) y = (next_el s POWER n) y`,
[
REWRITE_TAC[Seq.cat_uniq]
THEN INDUCT_TAC;

REWRITE_TAC[POWER];

REWRITE_TAC[COM_POWER;o_DEF]
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<=b/\ a<b`)[`n`;`indexf y (LAST s) s`]
THEN DICH_TAC 7
THEN RESA_TAC
THEN GABBREV_TAC`d=(next_el s POWER n) y`
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`y`;`LAST s`;]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<c==> a<c`)[`n`;`indexf y (LAST s) s`;`sizel s`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`y`;`s`;`n`]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`n`;`y`;`d`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> ~(a=b)`)[`n`;`indexf y (LAST s) s`]
THEN MRESA_TAC(SET_RULE`!a b c s. ~(indexf a b s=indexf a c s)==> ~(b=c)`)[`y`;`d`;`LAST s`;`s`]
THEN MRESAL_TAC Tame_list.next_el_cat2[`d`;`g`;`s`][Seq.cat_uniq]]);;



let next_cat_power2=prove(
`!n. uniq (cat s g) /\ MEM y s /\ n<= indexf y (LAST s) s ==> (next_el (cat s g) POWER n) y = (next_el s POWER n) y`,
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.next_el_cat_sym[`s`;`g`]
THEN MRESA_TAC next_cat_power1[`g`;`s`;`y`;`n`]
THEN MATCH_DICH_TAC 0
THEN ONCE_REWRITE_TAC[Seq.uniq_catC]
THEN ASM_REWRITE_TAC[]);;




let indexf_cat=prove(`uniq (cat g s) /\ MEM y s /\ MEM z s /\ indexf y z s<= indexf y (LAST s) s/\ ~(y=z) ==> indexf y z (cat g s) =indexf y z  s`,
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC next_cat_power1[`g`;`s`;`y`;`indexf y z s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`z`;`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`y`;`z`;]
THEN MRESAS_TAC Tame_list.next_eln_indexf[`indexf y z s`;`y`;`z`;`cat g s`][Seq.cat_uniq;Seq.mem_cat;Seq.size_cat;ARITH_RULE`a<b:num==> a<c+b`]);;



let indexf_cat0=prove(`uniq (cat s g) /\ MEM y s /\ MEM z s /\ indexf y z s<= indexf y (LAST s) s/\ ~(y=z) ==> indexf y z (cat s g) =indexf y z  s`,
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC next_cat_power2[`g`;`s`;`y`;`indexf y z s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`z`;`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`y`;`z`;]
THEN MRESAS_TAC Tame_list.next_eln_indexf[`indexf y z s`;`y`;`z`;`cat s g`][Seq.cat_uniq;Seq.mem_cat;Seq.size_cat;ARITH_RULE`a<b:num==> a<b+c`]
);;



let indexf_cat1=prove(`uniq (cat g s) /\ MEM y s /\ MEM z (cat g s) /\ indexf y z (cat g s)<= indexf y (LAST s) s/\ ~(y=z) ==> indexf y z (cat g s) =indexf y z  s`,
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC next_cat_power1[`g`;`s`;`y`;`indexf y z (cat g s)`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.indexf_n[`y`;`z`;`cat g s`][Seq.cat_uniq;Seq.mem_cat;Seq.size_cat;ARITH_RULE`a<b:num==> a<c+b`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`y`;`LAST s`;]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<=b/\ b<c==> a<c`)[`indexf y z (cat g s)`;`indexf y (LAST s) s`;`sizel s`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`y`;`s`;`indexf y z (cat g s)`]
THEN MRESAS_TAC Tame_list.next_eln_indexf[`indexf y z (cat g s)`;`y`;`z`;`s`][Seq.cat_uniq;Seq.mem_cat;Seq.size_cat;ARITH_RULE`a<b:num==> a<c+b`]);;



let indexf_cat10=prove(`uniq (cat s g) /\ MEM y s /\ MEM z (cat s g) /\ indexf y z (cat s g)<= indexf y (LAST s) s/\ ~(y=z) ==> indexf y z (cat s g) =indexf y z  s`,
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC next_cat_power2[`g`;`s`;`y`;`indexf y z (cat s g)`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.indexf_n[`y`;`z`;`cat  s g`][Seq.cat_uniq;Seq.mem_cat;Seq.size_cat;ARITH_RULE`a<b:num==> a<b+c`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`y`]
THEN MRESA_TAC Tame_list.MEM_LAST[`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`y`;`LAST s`;]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<=b/\ b<c==> a<c`)[`indexf y z (cat s g)`;`indexf y (LAST s) s`;`sizel s`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`y`;`s`;`indexf y z (cat s g)`]
THEN MRESAS_TAC Tame_list.next_eln_indexf[`indexf y z (cat  s g)`;`y`;`z`;`s`][Seq.cat_uniq;Seq.mem_cat;Seq.size_cat;ARITH_RULE`a<b:num==> a<c+b`]
);;


let MEM_betwn_cat=prove_by_refinement(`uniq (cat g s) /\ MEM y s /\ MEM z s /\ indexf y z s<= indexf y (LAST s) s /\ ~(y=z) ==>
(!x. MEM x (betwn (cat g s) y z) <=> MEM x (betwn s y z))`,
[
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`cat g s`;`y`;`x`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`x`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC indexf_cat[`g`;`y`;`z`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC indexf_cat1[`g`;`y`;`x`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN EQ_TAC;

STRIP_TAC
THEN DICH_TAC(12-7)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`cat g s`;`y`;`z`;`x`]
THEN DICH_TAC (13-9)
THEN ASM_REWRITE_TAC[GSYM Seq.mem_cat ]
THEN MRESA_TAC(ARITH_RULE`!a. 0<a==> ~(a=0)`)[`indexf y x (cat g s)`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`x=y`];


DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`x`;`cat g s`];

MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c==> a<=c`)[`indexf y x (cat g s)`;`indexf y z (cat g s)`;`indexf y (LAST s) s`]
THEN STRIP_TAC
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[];


MRESAL_TAC indexf_cat[`g`;`y`;`x`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN STRIP_TAC
THEN DICH_TAC(13-8)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`x`]
THEN DICH_TAC (14-10)
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`x=y`];


DICH_TAC (14-10)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`x`;`s`]
THEN ARITH_TAC;

MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c==> a<=c`)[`indexf y x s`;`indexf y z (cat g s)`;`indexf y (LAST s) s`]
THEN RESA_TAC]);;



let MEM_betwn_cat0=prove_by_refinement(
`uniq (cat s g) /\ MEM y s /\ MEM z s /\ indexf y z s<= indexf y (LAST s) s /\ ~(y=z) ==>
(!x. MEM x (betwn (cat s g) y z) <=> MEM x (betwn s y z))`,
[
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`cat s g`;`y`;`x`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`x`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC indexf_cat0[`g`;`y`;`z`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC indexf_cat10[`g`;`y`;`x`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN EQ_TAC;


STRIP_TAC
THEN DICH_TAC(12-7)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`cat s g`;`y`;`z`;`x`]
THEN DICH_TAC (13-9)
THEN ASM_REWRITE_TAC[GSYM Seq.mem_cat ]
THEN MRESA_TAC(ARITH_RULE`!a. 0<a==> ~(a=0)`)[`indexf y x (cat s g)`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`x=y`];


DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`x`;`cat s g`];


MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c==> a<=c`)[`indexf y x (cat s g)`;`indexf y z (cat  s g)`;`indexf y (LAST s) s`]
THEN STRIP_TAC
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[];


MRESAL_TAC indexf_cat0[`g`;`y`;`x`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN STRIP_TAC
THEN DICH_TAC(13-8)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`x`]
THEN DICH_TAC (14-10)
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`x=y`];


DICH_TAC (14-10)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`x`;`s`]
THEN ARITH_TAC;

MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c==> a<=c`)[`indexf y x s`;`indexf y z (cat s g)`;`indexf y (LAST s) s`]
THEN RESA_TAC
]);;



let mem_prev_power=prove(`!n d. uniq r /\ MEM d r 
==> MEM ((prev_el r POWER n) d) r`,
INDUCT_TAC
THENL[

REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN SET_TAC[];
REPEAT RESA_TAC
THEN REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN THAYTHE_TAC 2[`d`]
THEN MRESA_TAC Seq2.mem_prev_el[`(prev_el r POWER n) d`;`r`]]);;

let sym_power_prev_next=prove_by_refinement(`!n d z. uniq r /\ MEM d r /\ MEM z r
==> ((prev_el r POWER n) d=z <=> (next_el r POWER n) z=d)`,
[

INDUCT_TAC;

REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN SET_TAC[];

REPEAT RESA_TAC
THEN REWRITE_TAC[]
THEN EQ_TAC
THEN RESA_TAC;

DICH_TAC 0
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[COM_POWER;]
THEN REWRITE_TAC[o_DEF;I_DEF]
THEN STRIP_TAC
THEN MRESA_TAC Seq2.next_prev_id[`(prev_el r POWER n) d`;`r`]
THEN MRESA_TAC mem_prev_power[`r`;`n`;`d`]
THEN THAYTHE_TAC 6[`d`;`next_el r z`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 1
THEN REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN RESA_TAC;

DICH_TAC 0
THEN GEN_REWRITE_TAC(LAND_CONV o DEPTH_CONV)[COM_POWER;]
THEN REWRITE_TAC[o_DEF;I_DEF]
THEN STRIP_TAC
THEN MRESA_TAC Seq2.prev_next_id[`(next_el r POWER n) z`;`r`]
THEN MRESAL_TAC mem_prev_power[`r`;`SUC 0`;`d`][POWER;o_DEF;I_DEF]
THEN THAYTHE_TAC 6[`prev_el r d`;`z`]
]);;




let indexf_ztrans_lt=prove_by_refinement(`!L  N r (x:A#A).  
      good_list L /\
      good_list_nodes L /\
      marked_list L N r x /\
      ~final_list L r /\
      	find_face L x = f/\
next_el f x = w
==>(!i. 0<i/\ i < transform_count L N r x
    ==> indexf w (ztrans L N r x 0) r< indexf w (ztrans L N r x i) r)`,
[

REPEAT GEN_TAC
THEN RESA_TAC
THEN REWRITE_TAC[Tame_defs2.r_rtrans_eq;LET_THM]
THEN MRESA_TAC Reduction2.transform_assumption_v2_lemma[`L`]
THEN INDUCT_TAC;

ARITH_TAC;

REPEAT RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!i. i=0\/ 0<i`)[`i`];


MRESA_TAC Kbwpbhq.transform_count_not[`L`;`N`;`r`;`x`;`SUC i`]
THEN 
MRESA_TAC Ryiuuvk.RYIUUVK[`w`;`L`;`N`;`r`;`x`;`0`]
THEN MRESA_TAC Diowaas.DIOWAAS[`w`;`L`;`N`;`r`;`x`;`SUC 0`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;


MRESA_TAC(ARITH_RULE`!a b. SUC a<b==> a<b`)[`i`;`transform_count L N r x`]
THEN DICH_TAC(11-7)
THEN RESA_TAC
THEN MRESA_TAC Kbwpbhq.transform_count_not[`L`;`N`;`r`;`x`;`SUC i`]
THEN 
MRESA_TAC Ryiuuvk.RYIUUVK[`w`;`L`;`N`;`r`;`x`;`i`]
THEN MRESA_TAC Diowaas.DIOWAAS[`w`;`L`;`N`;`r`;`x`;`SUC i`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN DICH_TAC 1
THEN ARITH_TAC]);;



let LAST_betwn_cat=prove_by_refinement(
`uniq (cat g s) /\ MEM y s /\ MEM z s /\ indexf y z s <= indexf y (LAST s) s/\ ~(y=z) ==>LAST (betwn (cat g s) y z) = LAST (betwn s y z)`,
[
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn s y z=[] `];

MRESA_TAC Tame_list.betwn_nil[`s`;`y`;`z`]
THEN MRESA_TAC Tame_list.indexf0[`y`;`z`;`s`]
THEN MRESA_TAC(ARITH_RULE`!a b. ~(a=0)/\ a<=b==> SUC 0<=b`)[`indexf y z s`;`indexf y (LAST s) s`]
THEN MRESAL_TAC next_cat_power1[`g`;`s`;`y`;`SUC 0`][Seq.cat_uniq;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.betwn_nil[`cat g s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat];

MRESA_TAC Aq23.next_last_betwn[`s`;`y`;`z`]
THEN MRESAL_TAC MEM_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN DICH_TAC 2
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN THAYTHE_TAC 1[`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn (cat g s) y z`;`x`]
THEN MRESAL_TAC Aq23.next_last_betwn[`cat g s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN GABBREV_TAC`d=LAST (betwn s y z)`
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn s y z`;`x`]
THEN MRESA_TAC Tame_list.MEM_LAST[`betwn s y z`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c ==> a<c/\ a<=c`)[`indexf y d s`;`indexf y z s`;`indexf y (LAST s) s`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y=d`];

DICH_TAC (20-16)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`d`;`s`]
THEN ARITH_TAC;


MRESAL_TAC indexf_cat[`g`;`y`;`d`;`s`][Seq.cat_uniq;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC next_cat_power1[`g`;`s`;`y`;`indexf y d s`][Seq.cat_uniq;POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`d`;`s`]
THEN MRESAL_TAC Seq2.prev_next_id[`LAST (betwn (cat g s) y z)`;`cat g s`][Seq.cat_uniq]
THEN MRESAL_TAC Seq2.prev_next_id[`LAST (betwn s y z)`;`s`][Seq.cat_uniq]
THEN MRESAL_TAC Aq4.prev_el_cat0[`g`;`z`;`s`][Seq.cat_uniq]
THEN MATCH_DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`y`]
THEN MRESA_TAC Aq4.next_el_last_hd[`s`;]
THEN MRESA_TAC Tame_list.MEM_LAST[`s`]
THEN MRESA_TAC Tame_list.MEM_HD[`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`y`;`z`;]
THEN MRESA_TAC(ARITH_RULE`!a b c. 0<a /\ a<b /\ b<c==> 1<c/\ 1<=b`)[`indexf y d s`;`indexf y z s`;`sizel s`]
THEN MRESA_TAC Tame_list.next_el_indexf[`LAST s`;`HD s`;`s`]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC 1
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.next_el_indexf[`LAST s`;`HD s`;`s`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`y`;`LAST s`;`HD s`;`s`][]
THEN MRESA_TAC(ARITH_RULE`!a b. a+1=b ==> a<b`)[`indexf y (LAST s) s`;`indexf y z s`]
THEN DICH_TAC(36-5)
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC]);;



let LAST_betwn_cat0=prove_by_refinement(
`uniq (cat s g) /\ MEM y s /\ MEM z s /\ indexf y z s <= indexf y (LAST s) s/\ ~(y=z) ==>LAST (betwn (cat s g) y z) = LAST (betwn s y z)`,
[

REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn s y z=[] `];

MRESA_TAC Tame_list.betwn_nil[`s`;`y`;`z`]
THEN MRESA_TAC Tame_list.indexf0[`y`;`z`;`s`]
THEN MRESA_TAC(ARITH_RULE`!a b. ~(a=0)/\ a<=b==> SUC 0<=b`)[`indexf y z s`;`indexf y (LAST s) s`]
THEN MRESAL_TAC next_cat_power2[`g`;`s`;`y`;`SUC 0`][Seq.cat_uniq;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.betwn_nil[`cat s g`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat];

MRESA_TAC Aq23.next_last_betwn[`s`;`y`;`z`]
THEN MRESAL_TAC MEM_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN DICH_TAC 2
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN STRIP_TAC
THEN THAYTHE_TAC 1[`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn (cat s g) y z`;`x`]
THEN MRESAL_TAC Aq23.next_last_betwn[`cat s g`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN GABBREV_TAC`d=LAST (betwn s y z)`
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn s y z`;`x`]
THEN MRESA_TAC Tame_list.MEM_LAST[`betwn s y z`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c ==> a<c/\ a<=c`)[`indexf y d s`;`indexf y z s`;`indexf y (LAST s) s`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y=d`];


DICH_TAC (20-16)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`d`;`s`]
THEN ARITH_TAC;


MRESAL_TAC indexf_cat0[`g`;`y`;`d`;`s`][Seq.cat_uniq;POWER;o_DEF;I_DEF]
THEN MRESAL_TAC next_cat_power2[`g`;`s`;`y`;`indexf y d s`][Seq.cat_uniq;POWER;o_DEF;I_DEF]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`d`;`s`]
THEN MRESAL_TAC Seq2.prev_next_id[`LAST (betwn (cat s g) y z)`;`cat s g`][Seq.cat_uniq]
THEN MRESAL_TAC Seq2.prev_next_id[`LAST (betwn s y z)`;`s`][Seq.cat_uniq]
THEN MRESAL_TAC Aq4.prev_el_cat[`s`;`z`;`g`][Seq.cat_uniq]
THEN MATCH_DICH_TAC 0
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`s`;`y`]
THEN MRESA_TAC Aq4.next_el_last_hd[`s`;]
THEN MRESA_TAC Tame_list.MEM_LAST[`s`]
THEN MRESA_TAC Tame_list.MEM_HD[`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`y`;`z`;]
THEN MRESA_TAC(ARITH_RULE`!a b c. 0<a /\ a<b /\ b<c==> 1<c/\ 1<=b`)[`indexf y d s`;`indexf y z s`;`sizel s`]
THEN MRESA_TAC Tame_list.next_el_indexf[`LAST s`;`HD s`;`s`]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC 1
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.next_el_indexf[`LAST s`;`HD s`;`s`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`y`;`LAST s`;`HD s`;`s`][]
THEN MRESA_TAC(ARITH_RULE`!a b. a+1=b ==> a<b`)[`indexf y (LAST s) s`;`indexf y z s`]
THEN DICH_TAC(36-5)
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC
]);;


let next_betwn_cat= prove(`uniq (cat g s) /\ MEM y s /\ MEM z s /\ indexf y z s <= indexf y (LAST s) s/\ ~(y=z) ==> (!x. MEM x (betwn s y z)
      ==> next_el (betwn (cat g s) y z) x = next_el (betwn s y z) x)`,
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`x`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x= LAST(betwn s y z)`]
THENL[
MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn s y z`;`x`]
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn s y z`;]
THEN MRESAL_TAC LAST_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`cat g s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC MEM_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN THAYTHE_TAC 0[`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn (cat g s) y z`;`x`]
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn (cat g s) y z`;]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`s`;`y`;`z`]
THEN MRESAL_TAC Dangeyj.HD_BETWN2[`cat g s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.next_el_cat2[`y`;`g`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN MATCH_DICH_TAC 0
THEN STRIP_TAC
THEN DICH_TAC (21-5)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`y`;`s`]
THEN DICH_TAC (21-8)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;

MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`s`;`y`;`z`;`x`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`y`;`z`;`x`;`s`]
THEN MRESAL_TAC LAST_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC MEM_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN THAYTHE_TAC 0[`x`]
THEN MRESAL_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`cat g s`;`y`;`z`;`x`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Ncvibwu.next_el_betwn_same[`y`;`z`;`x`;`cat g s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`x`]
THEN MRESAL_TAC Tame_list.next_el_cat2[`x`;`g`;`s`][Seq.cat_uniq;Seq.mem_cat]
THEN MATCH_DICH_TAC 0
THEN STRIP_TAC
THEN DICH_TAC(18-9)
THEN DICH_TAC(17-5)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC]);;


let next_betwn_cat0= prove(
`uniq (cat s g) /\ MEM y s /\ MEM z s /\ indexf y z s <= indexf y (LAST s) s/\ ~(y=z) ==> (!x. MEM x (betwn s y z)
      ==> next_el (betwn (cat s g) y z) x = next_el (betwn s y z) x)`,

REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.indexf_betwn_eq[`s`;`y`;`x`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x= LAST(betwn s y z)`]
THENL[
MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn s y z`;`x`]
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn s y z`;]
THEN MRESAL_TAC LAST_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`cat s g`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC MEM_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN THAYTHE_TAC 0[`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn (cat s g) y z`;`x`]
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn (cat s g) y z`;]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`s`;`y`;`z`]
THEN MRESAL_TAC Dangeyj.HD_BETWN2[`cat s g`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.next_el_cat1[`y`;`s`;`g`][Seq.cat_uniq;Seq.mem_cat]
THEN MATCH_DICH_TAC 0
THEN STRIP_TAC
THEN DICH_TAC (21-5)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`y`;`s`]
THEN DICH_TAC (21-8)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;

MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`s`;`y`;`z`;`x`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`y`;`z`;`x`;`s`]
THEN MRESAL_TAC LAST_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC MEM_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN THAYTHE_TAC 0[`x`]
THEN MRESAL_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`cat  s g`;`y`;`z`;`x`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC Ncvibwu.next_el_betwn_same[`y`;`z`;`x`;`cat s g`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`y`;`z`;`x`]
THEN MRESAL_TAC Tame_list.next_el_cat1[`x`;`s`;`g`][Seq.cat_uniq;Seq.mem_cat]
THEN MATCH_DICH_TAC 0
THEN STRIP_TAC
THEN DICH_TAC(18-9)
THEN DICH_TAC(17-5)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC
]);;

let betwn_cat=prove(`uniq (cat g s) /\ MEM y s /\ MEM z s /\ indexf y z s <= indexf y (LAST s) s/\ ~(y=z) ==> betwn (cat g s) y z = betwn s y z`,
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MATCH_MP_TAC Aq12.eq_last_next
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN MRESAL_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`cat g s`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC MEM_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC LAST_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC next_betwn_cat[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
);;

let betwn_cat0=prove(`uniq (cat s g) /\ MEM y s /\ MEM z s /\ indexf y z s <= indexf y (LAST s) s/\ ~(y=z) ==> betwn (cat s g) y z = betwn s y z`,
REWRITE_TAC[Seq.cat_uniq]
THEN REPEAT RESA_TAC
THEN MATCH_MP_TAC Aq12.eq_last_next
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`s`]
THEN MRESAL_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`cat s g`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC MEM_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC LAST_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
THEN MRESAL_TAC next_betwn_cat0[`g`;`s`;`y`;`z`][Seq.cat_uniq;Seq.mem_cat]
);;





let r_rtrans_eq_concl = 
  `(!L  N r (x:A#A).  
      good_list L /\
      good_list_nodes L /\
      marked_list L N r x /\
      ~final_list L r 
    ==> r_rtrans_eq L N r x)`;;

let r_rtrans_eq_thm=prove_by_refinement( r_rtrans_eq_concl,
[
REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.r_rtrans_eq;LET_THM]
THEN REPEAT RESA_TAC
THEN CHANGE_TAC`d=x'`
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (l'z L N r x)`
THEN GABBREV_TAC`z=l'z L N r x`
THEN DICH_ASM_TAC(8-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC (13-2)[Tame_defs2.marked_list;]
THEN DICH_ASM_TAC(21-15)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Reduction2.transform_assumption_v2_lemma[`L`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`final_list L (rtrans L N r x (SUC 0))`]
;


GABBREV_TAC`n=indexf w d f`
THEN MRESA_TAC Aq13.next_mark_in_rtrans_suc[`L`;`N`;`r`;`x`;`f`;`w`]
THEN MRESAL_TAC Tame_list.final_list_power_fn[`n`;`L`;`(rtrans L N r x (SUC 0))`][GSYM Seq.allP;ARITH_RULE`SUC 0=1`]
THEN THAYTHE_TAC 0[`w`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC Pwssrat.men_f_list_darts[`x`;`L`]
THEN MRESA_TAC List_hypermap.dart_in_face[`x`;`L`]
THEN MRESAL_TAC Aq8.MEM_POWER_NEXT_EL[`x`;`f`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`w`;`x`;`L`]
THEN MRESA_TAC Tame_list.indexf_n[`w`;`d`;`f`]
THEN MRESA_TAC Pwssrat.f_list_power_next_el[`L`;`w`;`n`]
THEN MRESAL_TAC Aq8.MEM_POWER_NEXT_EL[`w`;`(rtrans L N r x 1)`;`n`][POWER;I_DEF;o_DEF;Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;POWER;ARITH_RULE`1=SUC 0`;I_DEF;o_DEF;Tame_defs2.split_normal_list]
THEN ASM_TAC
THEN REWRITE_TAC[Reduction2.trans0;MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y f `;` indexf w z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf y  d f `;` indexf y z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`y`;`d`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num. a+c=b/\ e+b=d==> c<=d`)[`indexf y  d f `;` indexf y z f`;`indexf d z f`;`indexf w z f`;`indexf w y f`]
THEN MRESA_TAC Tame_list.indexf_add_right[`w`;`d`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a+b=c==> ~(c<=a)\/ b=0`)[`indexf w d f `;` indexf d z f`;`indexf w z f`]
THEN MRESA_TAC Tame_list.indexf0[`d`;`z`;`f`];



MRESA_TAC Qcdvkea.QCDVKEA[`L`;`N`;`r`;`f`;`w`;`x`;`0`]
THEN EQ_TAC
;



RESA_TAC
THEN ASM_TAC
THEN REWRITE_TAC[Reduction2.trans0;MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.betwn_cases[`r`;`y`;`d`;`z`][Tame_defs2.transform_list;LET_THM;POWER;ARITH_RULE`1=SUC 0`;I_DEF;o_DEF;Tame_defs2.split_normal_list;MEM_APPEND;Seq.mem_seq1]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`d`]
THEN MRESA_TAC  KBWPBHQ2[`L`;`N`;`r`;`x`;`d`]
THEN GABBREV_TAC`k=min_num{n | ~(f_list L ((prev_el r POWER (SUC n)) d) = (prev_el r POWER n) d)}`
THEN GABBREV_TAC`d1=(prev_el r POWER k) d`
THEN GSUBGOAL_THEN`~({n | ~(f_list L ((prev_el r POWER SUC n) d) = (prev_el r POWER n) d)}={})`ASSUME_TAC
;



REWRITE_TAC[SET_RULE`!A. ~(A={})<=> ?a. a IN A`;IN_ELIM_THM]
THEN GEXISTS_TAC`indexf z d r`
THEN MRESA_TAC Tame_list.indexf_n[`z`;`d`;`r`]
THEN MRESA_TAC sym_power_prev_next[`r`;`indexf z d r`;`d`;`z`]
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN MRESA_TAC prev_r_not_eq_f_v0[`z1`;`z`;`L`;`N`;`r`;`x`];



MRESAL_TAC Tame_list.min_num_in[`{n | ~(f_list L ((prev_el r POWER SUC n) d) = (prev_el r POWER n) d)}`][IN_ELIM_THM]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN STRIP_TAC
THEN MRESA_TAC mem_prev_power[`r`;`k`;`d`]
THEN GSUBGOAL_THEN`!i. i<=k==> MEM ((prev_el r POWER i) d) f`ASSUME_TAC;



MRESA_TAC Pwssrat.minnum_not[`k`;`(\n. ~(f_list L ((prev_el r POWER SUC n) d) = (prev_el r POWER n) d))`;]
THEN INDUCT_TAC;


ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
;


STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<b/\ a<=b`)[`i`;`k`]
THEN DICH_TAC 3
THEN RESA_TAC
THEN THAYTHEL_TAC 4[`i`][COM_POWER;o_DEF;I_DEF]
THEN GABBREV_TAC`a=((prev_el r POWER i) d)`
THEN DICH_TAC (55-24)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN MRESAL_TAC mem_prev_power[`r`;`SUC i`;`d`][COM_POWER;o_DEF;I_DEF]
THEN THAYTHE_TAC 1[`prev_el r a`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`a`;`x`;`L`]
THEN MRESA_TAC List_hypermap.f_list_inverse[`prev_el r a`;`L`]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Seq2.mem_prev_el[`a`;`f`]
;



THAYTHEL_ASM_TAC 0[`k`][ARITH_RULE`a<=a:num`]
THEN MRESA_TAC Tame_list.find_list_uniq[`N`;`r`;`d1`]
THEN MRESA_TAC  KBWPBHQ2[`L`;`N`;`r`;`x`;`d1`]
THEN MRESA_TAC sym_power_prev_next[`r`;`k`;`d`;`d1`]
;



GSUBGOAL_THEN`~(w=d)`ASSUME_TAC
;


RESA_TAC
THEN DICH_TAC(56-5)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`d`;`f`]
THEN REWRITE_TAC[ARITH_RULE`a<=0<=> a=0`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf0[`d`;`z`;`f`]
THEN DICH_TAC(58-35)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`z`;`f`]
THEN ARITH_TAC;



MRESA_TAC(ARITH_RULE`!a b:num. (a<b /\ a<=b)\/ b<=a`)[`indexf w d r`;`indexf w d1 r`];


MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`d`;`d1`;`r`][]
THEN MRESA_TAC(ARITH_RULE`!a b c. a+b=c/\ a<c==> b<=c /\ 0<b/\ ~(b=0)`)[`indexf w d r`;`indexf d d1 r`;` indexf w d1 r`]
THEN GSUBGOAL_THEN`~(d=d1)`ASSUME_TAC;



STRIP_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`d`;`r`];



GSUBGOAL_THEN`~(w=d1)`ASSUME_TAC
;


STRIP_TAC
THEN DICH_TAC(66-57)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`d1`;`r`]
THEN ARITH_TAC;


MRESA_TAC Tame_list.indexf_antisym[`d`;`d1`;`r`]
THEN MRESA_TAC Tame_list.indexf_antisym[`w`;`d1`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num. a+b=e /\ c+d=e /\ a<=c ==>  d<=b`)[`indexf d d1 r `;` indexf d1 d r`;`indexf w d1 r `;` indexf d1 w r `;` sizel r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`d1`;`w`;`d`;`r`][]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a+b=c==> b<=c`)[`indexf d1 w r`;`indexf w d r`;`indexf d1 d r `]
THEN GSUBGOAL_THEN`(indexf z d r) IN {n | ~(f_list L ((prev_el r POWER SUC n) d) = (prev_el r POWER n) d)}`ASSUME_TAC
;





MRESAL_TAC Tame_list.indexf_n[`z`;`d`;`r`][IN_ELIM_THM]
THEN MRESA_TAC sym_power_prev_next[`r`;`indexf z d r`;`d`;`z`]
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN MRESA_TAC prev_r_not_eq_f_v0[`z1`;`z`;`L`;`N`;`r`;`x`];




MRESA_TAC Tame_list.min_num_le[`{n | ~(f_list L ((prev_el r POWER SUC n) d) = (prev_el r POWER n) d)}`;`indexf z d r`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`z`;`d`;]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<=b/\ b<c==> a<c`)[`k`;`indexf z d r`;`sizel r`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`k`;`d1`;`d`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<=b==> a=b\/ a<b`)[`indexf w d r`;`indexf d1 d r`]
;



DICH_TAC(77-70)
THEN ASM_REWRITE_TAC[ARITH_RULE`a+b=b<=> a=0`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf0[`d1`;`w`;`r`];



MRESAL_TAC Qcdvkea.min_num_le[`(\m. ~(ITER (SUC (SUC m)) (next_el r) x =
                  f_list L (ITER (SUC m) (next_el r) x)))`;`indexf w d r`;`l'm L r x`][GSYM Tame_defs2.l_m]
THEN DICH_TAC 0
THEN REWRITE_TAC[GSYM Tame_list.POWER_TO_ITER];



GSUBGOAL_THEN`!i. i < indexf w d r
       ==> (next_el r POWER SUC (SUC i)) x =
           f_list L ((next_el r POWER SUC i) x)`ASSUME_TAC
;


REPEAT RESA_TAC
THEN GEN_REWRITE_TAC(RAND_CONV o DEPTH_CONV)[POWER;o_DEF;I_DEF]
THEN GEN_REWRITE_TAC(LAND_CONV o ONCE_DEPTH_CONV)[POWER]
THEN ASM_REWRITE_TAC[o_DEF;I_DEF]
THEN GABBREV_TAC`di=(next_el r POWER (SUC i')) w`
THEN DICH_TAC 0
THEN REWRITE_TAC[COM_POWER;I_DEF;o_DEF]
THEN STRIP_TAC
THEN MRESA_TAC Seq2.prev_next_id[`(next_el r POWER i') w`;`r`]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`r`;`SUC i'`][COM_POWER;I_DEF;o_DEF]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`w`;`d`;]
THEN MRESA_TAC(ARITH_RULE`!a b c. a<b /\ b<c==> SUC a<c/\ SUC a<=b`)[`i'`;`indexf w d r`;`sizel r`]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`SUC i'`;`w`;`di`;`r`][COM_POWER;I_DEF;o_DEF]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`di`;`d`;`r`][]
THEN MRESA_TAC(ARITH_RULE`!a b c d:num. a+b=c/\ c<d ==> b<d`)[`SUC i'`;`indexf di d r`;`indexf w d r`;`k`]
THEN MRESA_TAC Pwssrat.minnum_not[`k`;`(\n. ~(f_list L ((prev_el r POWER SUC n) d) = (prev_el r POWER n) d))`;`indexf di d r`]
THEN MRESA_TAC Tame_list.indexf_n[`di`;`d`;`r`]
THEN MRESA_TAC sym_power_prev_next[`r`;`indexf di d r`;`d`;`di`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN RESA_TAC;


ASM_REWRITE_TAC[]
THEN GSUBGOAL_THEN`~({m | ~((next_el r POWER SUC (SUC m)) x =
           f_list L ((next_el r POWER SUC m) x))} =
    {})`ASSUME_TAC;



REWRITE_TAC[GSYM Tame_list.POWER_TO_ITER]
THEN ASM_REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN REWRITE_TAC[SET_RULE`~(A={})<=> ?a. a IN A`;IN_ELIM_THM]
THEN MRESAL_TAC Tame_defs2.final_list[`L`;`r`][GSYM Seq.allP;NOT_FORALL_THM;NOT_IMP]
THEN CHANGE_TAC `m=x'`
THEN MRESAL_TAC Tame_list.indexf_n[`w`;`m`;`r`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN GABBREV_TAC`a=indexf w m r`
THEN GEXISTS_TAC`a`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC COM_POWER[`a`;`(\d. next_el r d)`][o_DEF;POWER;I_DEF;GSYM Seq.eq_ext]
THEN THAYTHEL_TAC 0[`w`][I_DEF]
THEN DICH_TAC 0
THEN REWRITE_TAC[BETA_THM;ETA_AX]
THEN RESA_TAC
;



ASM_REWRITE_TAC[]
THEN MRESAL_TAC Aq7.indexf_ytrans_eq_l_m1_v0[`L`;`N`;`r`;`x`;`w`][Reduction2.trans0]
THEN STRIP_TAC
THEN MRESAL_TAC Pbflhet.indexf_const_le_indexf_ytrans[`w`;`f`;`L`;`N`;`d`;`r`;`x`;`0`][Reduction2.trans0]
THEN MRESAL_TAC Pbflhet.indexf_const_le_indexf_ytrans[`w`;`f`;`L`;`N`;`y`;`r`;`x`;`0`][Reduction2.trans0;ARITH_RULE`a<=a:num`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(82-5)
THEN DICH_TAC(81-35)
THEN ARITH_TAC;



MRESA_TAC indexf_ztrans_lt[`f`;`w`;`L`;`N`;`r`;`x`]
THEN MRESAL_TAC Diowaas.DIOWAAS[`w`;`L`;`N`;`r`;`x`;`0`][Reduction2.trans0]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y r `;` indexf w z r`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`r`][]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf y d r `;` indexf y z r`]
THEN MRESAL_TAC Tame_list.indexf_add_left[`y`;`d`;`z`;`r`][]
THEN MRESA_TAC(ARITH_RULE`!a b c d e. a+b=c/\ a<c/\ d+c=e==> b<=e/\ 0<b`)[`indexf y d r `;` indexf d z r `;` indexf y z r`;`indexf w y r`;`indexf w z r`]
THEN MRESAL_TAC Tame_list.indexf_add_right[`w`;`d`;`z`;`r`][]
THEN MRESA_TAC(ARITH_RULE`!a b c. a+b=c/\ 0<b==> a<c`)[`indexf w d r `;` indexf d z r `;` indexf w z r`]
THEN MRESA_TAC(ARITH_RULE`!i. i=0\/ 0<i`)[`i`];



DICH_TAC(72-53)
THEN ASM_REWRITE_TAC[Reduction2.trans0]
THEN RESA_TAC
THEN DICH_TAC(72-56)
THEN DICH_TAC(2)
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;



THAYTHEL_TAC (72-58)[`i`][Reduction2.trans0]
THEN DICH_TAC 0
THEN DICH_TAC 1
THEN DICH_TAC (70-57)
THEN ARITH_TAC;




ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;ARITH_RULE`1=SUC 0`;POWER;o_DEF;I_DEF;Tame_defs2.split_normal_list;MEM_APPEND;Seq.mem_seq1]
THEN DICH_TAC(40-27)
THEN DICH_TAC(39-27)
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Reduction2.trans0]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`d`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Pwssrat.men_f_list_darts[`x`;`L`]
THEN MRESA_TAC List_hypermap.dart_in_face[`x`;`L`]
THEN MRESAL_TAC Aq8.MEM_POWER_NEXT_EL[`x`;`f`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y f `;` indexf w z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf y  d f `;` indexf y z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`y`;`d`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e:num. a+c=b/\ e+b=d==> c<=d`)[`indexf y  d f `;` indexf y z f`;`indexf d z f`;`indexf w z f`;`indexf w y f`]
THEN MRESA_TAC Tame_list.indexf_add_right[`w`;`d`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a+b=c==> ~(c<=a)\/ b=0`)[`indexf w d f `;` indexf d z f`;`indexf w z f`]
THEN MRESA_TAC Tame_list.indexf0[`d`;`z`;`f`]]);;


let MEM_HD_LAST_betwn=prove(`~(r=[]) /\ uniq r/\ ~(HD r= LAST r) ==>
(!x. MEM x r <=> MEM x (cat [HD r] (cat (betwn r (HD r) (LAST r)) [LAST r])))`,

REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.MEM_HD[`r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`r`]
THEN EQ_TAC
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
THEN RESA_TAC
THENL[

MRESA_TAC Tame_list.betwn_cases[`r`;`HD r`;`x`;`LAST r`]
THEN MRESA_TAC Aq4.next_el_last_hd[`r`]
THEN MRESA_TAC Tame_list.betwn_nil[`r`;`LAST r`;`HD r`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[MEM];

MRESA_TAC Tame_list.betwn_mem[`r`;`HD r`;`LAST r`;`x`]
]);;



let LAST_HD_LAST_betwn=prove(`~(r=[]) /\ uniq r/\ ~(HD r= LAST r) ==>
LAST r = LAST (cat [HD r] (cat (betwn r (HD r) (LAST r)) [LAST r]))`,
REPEAT RESA_TAC
THEN MRESAL_TAC Tame_list.last_cat[`(cat (betwn r (HD r) (LAST r)) [LAST r])`;`[HD r]`;][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[`[LAST r]`;`(betwn r (HD r) (LAST r))`;][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]);;




let next_HD_LAST_betwn=prove_by_refinement(`~(r=[]) /\ uniq r/\ ~(HD r= LAST r) ==>
(!x. MEM x r
      ==> next_el r x =
          next_el (cat [HD r] (cat (betwn r (HD r) (LAST r)) [LAST r])) x)`,
[
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.MEM_HD[`r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`r`]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`HD r`;`LAST r`][Tame_list.lower_case]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x= HD r`];

MRESAL_TAC Tame_list.next_el_cat_last1[`[HD r]`;`(cat (betwn r (HD r) (LAST r)) [LAST r])`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r (HD r) (LAST r)=[]`];


REWRITE_TAC[Seq.cat0s;HD]
THEN MRESA_TAC Tame_list.betwn_nil[`r`;`HD r`;`LAST r`];


MRESA_TAC Tame_list.hd_cat[`(betwn r (HD r) (LAST r))`;`[LAST r]`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`HD r`;`LAST r`];


MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x=LAST r`];

MRESA_TAC Aq4.next_el_last_hd[`r`]
THEN MRESA_TAC LAST_HD_LAST_betwn[`r`]
THEN MRESAL_TAC Aq4.next_el_last_hd[`cat [HD r] (cat (betwn r (HD r) (LAST r)) [LAST r])`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.hd_cat[`[HD r]`;`cat (betwn r (HD r) (LAST r)) [LAST r]`][Ohcgkfu.sing_not_nil;HD];


MRESAL_TAC Tame_list.last_cat[`[LAST r]`;`(betwn r (HD r) (LAST r))`;][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN MRESA_TAC MEM_HD_LAST_betwn[`r`]
THEN THAYTHEL_TAC 0[`x`][Seq.mem_cat;Seq.mem_seq1]
THEN MRESAL_TAC Tame_list.next_el_cat2[`x`;`[HD r]`;`(cat (betwn r (HD r) (LAST r)) [LAST r])`][Seq.mem_cat;Seq.mem_seq1];

MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x=LAST (betwn r (HD r) (LAST r))`];


DICH_TAC(12-6)
THEN REWRITE_TAC[Seq.cat_uniq]
THEN RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn r (HD r) (LAST r)`;`x`]
THEN MRESAL_TAC Tame_list.next_el_cat_last1[`(betwn r (HD r) (LAST r))`;`[LAST r]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST;Seq.cat_uniq;HD]
THEN MRESA_TAC Aq23.next_last_betwn[`r`;`HD r`;`LAST r`];


DICH_TAC(12-6)
THEN REWRITE_TAC[Seq.cat_uniq]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.next_el_cat1[`x`;`(betwn r (HD r) (LAST r)) `;`[LAST r]`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`HD r`;`LAST r`;`x`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`HD r`;`LAST r`;`x`;`r`]]);;



let eq_HD_LAST_betwn=prove(`~(r=[]) /\ uniq r/\ ~(HD r= LAST r) ==> r= cat  [HD r](cat (betwn r (HD r) (LAST r)) [LAST r])`,
REPEAT RESA_TAC
THEN MATCH_MP_TAC Aq12.eq_last_next
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.MEM_HD[`r`]
THEN MRESA_TAC Tame_list.MEM_LAST[`r`]
THEN MRESAL_TAC Ohcgkfu.uniq_append_betwn[`r`;`HD r`;`LAST r`][Tame_list.lower_case]
THEN MRESA_TAC LAST_HD_LAST_betwn[`r`]
THEN MRESA_TAC MEM_HD_LAST_betwn[`r`]
THEN MRESA_TAC next_HD_LAST_betwn[`r`]
THEN SYM_DICH_TAC 2);;


let next_cat_betwn_same_power=prove_by_refinement(
`!n. uniq r /\
       MEM y r /\
       MEM z r /\
       ~(y = z) /\
       APPEND [y] (APPEND (betwn r y z) [z]) = s /\
	MEM lx s/\ 
        n<= indexf lx z s
==> (next_el s POWER n) lx=(next_el r POWER n) lx`,
[
INDUCT_TAC;

REWRITE_TAC[POWER;I_DEF;o_DEF];

REPEAT RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<=b==> a<=b/\ a<b`)[`n`;`indexf lx z s`]
THEN DICH_TAC 9
THEN RESA_TAC
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;I_DEF]
THEN GABBREV_TAC`d=(next_el r POWER n) lx`
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`lx`;`s`;`n`]
THEN GSUBGOAL_THEN`~(s=[])/\ MEM z s`ASSUME_TAC;

EXPAND_TAC"s"
THEN REWRITE_TAC[APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;MEM_APPEND;Seq.mem_seq1];


MRESA_TAC Tame_list.MEM_LAST[`s`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`lx`;`z`;]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<=b/\ b<c==> a<c`)[`n`;`indexf lx z s`;`sizel s`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`n`;`lx`;`d`;`s`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`d=z`];

DICH_TAC(18-8)
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN ARITH_TAC;

MRESA_TAC Aq8.next_cat_betwn_same[`y`;`z`;`s`;`r`;`d`]
]);;



let indexf_cat_betwn_same=prove_by_refinement(`uniq r /\
       MEM y r /\
       MEM z r /\
       ~(y = z) /\
       APPEND [y] (APPEND (betwn r y z) [z]) = s /\
	MEM lx s/\ 
        MEM lz s/\
        indexf lx lz s<= indexf lx z s
==> indexf lx lz s= indexf lx lz r`,
[
REPEAT RESA_TAC
THEN MRESA_TAC next_cat_betwn_same_power[`y`;`z`;`s`;`r`;`lx`;`indexf lx lz s`]
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Tame_list.indexf_n[`lx`;`lz`;`s`]
THEN GSUBGOAL_THEN`MEM lx r`ASSUME_TAC;

DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lx`];

GSUBGOAL_THEN`MEM lz r`ASSUME_TAC;


DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lz`];

MRESAL_TAC Seq.size_cat[`[y]`;`APPEND (betwn r y z) [z]`][GSYM Tame_list.lower_case]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_list.lower_case]
THEN MRESAL_TAC Seq.size_cat[`(betwn r y z)`;` [z]`][ Tame_list.lower_case;Seq2.size1]
THEN MRESA_TAC Tame_list.size_betwn[`y`;`z`;`r`]
THEN MRESAL_TAC Tame_list.indexf0[`y`;`z`;`r`][ARITH_RULE`~(a=0)<=> 1<=a`;ARITH_RULE`a+1= SUC a`]
THEN MRESA_TAC Hypermap.LE_SUC_PRE[`indexf y z r`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r`;`y`;`z`;]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`lx`;`lz`;]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a< 1+b/\ b<c==> a<c`)[`indexf lx lz s`;`indexf y z r`;`sizel r`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`indexf lx lz s`;`lx`;`lz`;`r`]]);;






let indexf_cat_betwn_same1=prove_by_refinement(
`uniq r /\
       MEM y r /\
       MEM z r /\
       ~(y = z) /\
       APPEND [y] (APPEND (betwn r y z) [z]) = s /\
	MEM lx s/\ 
        MEM lz s/\
        indexf lx lz r<= indexf lx z s
==> indexf lx lz s= indexf lx lz r`,
[
REPEAT RESA_TAC
THEN MRESA_TAC next_cat_betwn_same_power[`y`;`z`;`s`;`r`;`lx`;`indexf lx lz r`]
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Tame_list.indexf_n[`lx`;`lz`;`r`]
THEN GSUBGOAL_THEN`MEM lx r`ASSUME_TAC;

DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lx`];

GSUBGOAL_THEN`MEM lz r`ASSUME_TAC;

DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lz`];

DICH_TAC 2
THEN RESA_TAC
THEN GSUBGOAL_THEN`~(s=[])/\ MEM z s`ASSUME_TAC;

EXPAND_TAC"s"
THEN REWRITE_TAC[APPEND_EQ_NIL;Ohcgkfu.sing_not_nil;MEM_APPEND;Seq.mem_seq1];


MRESA_TAC Tame_list.indexf_lt_sizel[`s`;`lx`;`z`;]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<= b/\ b<c==> a<c`)[`indexf lx lz r`;`indexf lx z s`;`sizel s`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`indexf lx lz r`;`lx`;`lz`;`s`]
]);;

let mem_cat_betwn_same=prove_by_refinement(`uniq r /\
       MEM y r /\
       MEM z r /\
       ~(y = z) /\
       APPEND [y] (APPEND (betwn r y z) [z]) = s /\
	MEM lx s/\ 
        MEM lz s/\
~(lx=lz)/\
        indexf lx lz s<= indexf lx z s
==> (!x. MEM x (betwn s lx lz) <=> MEM x (betwn r lx lz))`,
[
REPEAT RESA_TAC
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`lx`;`lz`;`s`]
THEN GSUBGOAL_THEN`MEM lx r`ASSUME_TAC;



DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lx`];



GSUBGOAL_THEN`MEM lz r`ASSUME_TAC;



DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lz`];



MRESA_TAC Tame_list.indexf_betwn_eq[`r`;`lx`;`x`;`lz`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`s`;`lx`;`x`;`lz`]
THEN MRESA_TAC indexf_cat_betwn_same[`y`;`z`;`s`;`lx`;`lz`;`r`]
THEN EQ_TAC;



RESA_TAC
THEN DICH_TAC(17-14)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`lx`;`lz`;`x`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b /\ b<=c==> a<=c`)[`indexf lx x s`;`indexf lx lz s`;`indexf lx z s`]
THEN MRESA_TAC indexf_cat_betwn_same[`y`;`z`;`s`;`lx`;`x`;`r`]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[];



RESA_TAC
THEN DICH_TAC(17-13)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`lx`;`lz`;`x`]
THEN MRESA_TAC Tame_list.indexf_n[`lx`;`x`;`r`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a< b/\ b<=c==> a<=c`)[`indexf lx x r`;`indexf lx lz s`;`indexf lx z s`]
THEN MRESA_TAC next_cat_betwn_same_power[`y`;`z`;`s`;`r`;`lx`;`indexf lx x r`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`lx`;`s`;`indexf lx x r`]
THEN MRESA_TAC indexf_cat_betwn_same1[`y`;`z`;`s`;`lx`;`x`;`r`]
;


]);;


let LAST_cat_betwn_same=prove_by_refinement(
`uniq r /\
       MEM y r /\
       MEM z r /\
       ~(y = z) /\
       APPEND [y] (APPEND (betwn r y z) [z]) = s /\
	MEM lx s/\ 
        MEM lz s/\
~(lx=lz)/\
        indexf lx lz s<= indexf lx z s
==> LAST (betwn s lx lz) = LAST (betwn r lx lz)`,

[
REPEAT RESA_TAC
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`lx`;`lz`;`s`]
THEN GSUBGOAL_THEN`MEM lx r`ASSUME_TAC;



DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lx`];



GSUBGOAL_THEN`MEM lz r`ASSUME_TAC;



DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lz`];



GABBREV_TAC`d=LAST (betwn r lx lz)`
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`lx =z`];



DICH_TAC(14-8)
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.indexf_refl[`lx`;`s`][ARITH_RULE`a<=0<=> a=0`]
THEN MRESA_TAC Tame_list.indexf0[`lx`;`lz`;`s`];



MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn r lx lz=[]`];



MRESA_TAC Tame_list.betwn_nil[`r`;`lx`;`lz`]
THEN MRESA_TAC Aq8.next_cat_betwn_same[`y`;`z`;`s`;`r`;`lx`]
THEN MRESA_TAC Tame_list.betwn_nil[`s`;`lx`;`lz`]
THEN DICH_TAC(18-13)
THEN RESA_TAC;



MRESA_TAC Aq23.next_last_betwn[`r`;`lx`;`lz`]
THEN GSUBGOAL_THEN`~(betwn s lx lz = [])`ASSUME_TAC;



DICH_TAC 1
THEN REWRITE_TAC[List_hypermap.mem_not_nil]
THEN REPEAT RESA_TAC
THEN MRESA_TAC mem_cat_betwn_same[`y`;`z`;`s`;`r`;`lx`;`lz`]
THEN THAYTHE_TAC 0[`x`]
THEN GEXISTS_TAC`x`
THEN ASM_REWRITE_TAC[];




MRESA_TAC Aq23.next_last_betwn[`s`;`lx`;`lz`]
THEN MRESA_TAC Tame_list.MEM_LAST[`betwn s lx lz`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`s`;`lx`;`LAST (betwn s lx lz)`;`lz`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c==> ~(a=c)`)[`indexf lx (LAST (betwn s lx lz)) s`;`indexf lx lz s`;`indexf lx z s`]
THEN MRESA_TAC(SET_RULE`!a b c s. b=c==> indexf a b s= indexf a c s`)[`lx`;`LAST (betwn s lx lz)`;`z`;`s`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`lx`;`lz`;`LAST(betwn s lx lz)`]
THEN MRESA_TAC Aq8.next_cat_betwn_same[`y`;`z`;`s`;`r`;`LAST (betwn s lx lz)`]
THEN DICH_TAC 0
THEN DICH_TAC (24-16)
THEN STRIP_TAC
THEN POP_ASSUM(fun th->GEN_REWRITE_TAC(LAND_CONV o LAND_CONV o DEPTH_CONV)[SYM th])
THEN STRIP_TAC
THEN MRESA_TAC Seq2.prev_next_id[`d`;`r`]
THEN MRESA_TAC Seq2.prev_next_id[`(LAST (betwn s lx lz))`;`r`]
;


]);;



let cat_betwn_same=prove_by_refinement(`uniq r /\
       MEM y r /\
       MEM z r /\
       ~(y = z) /\
       APPEND [y] (APPEND (betwn r y z) [z]) = s /\
	MEM lx s/\ 
        MEM lz s/\
~(lx=lz)/\
        indexf lx lz s<= indexf lx z s
==> betwn s lx lz= betwn r lx lz`,

[

REPEAT RESA_TAC
THEN MATCH_MP_TAC Aq12.eq_last_next
THEN MRESA_TAC Ohcgkfu.uniq_append_betwn[`r`;`y`;`z`]
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`lx`;`lz`;`s`]
THEN GSUBGOAL_THEN`MEM lx r`ASSUME_TAC;


DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lx`];


GSUBGOAL_THEN`MEM lz r`ASSUME_TAC;


DICH_TAC(11-6)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y`;`z`;`lz`];


MRESA_TAC Ohcgkfu.uniq_betwn[`lx`;`lz`;`r`]
THEN MRESA_TAC mem_cat_betwn_same[`y`;`z`;`s`;`r`;`lx`;`lz`]
THEN MRESA_TAC LAST_cat_betwn_same[`y`;`z`;`s`;`r`;`lx`;`lz`]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 2[`x`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`s`;`lx`;`x`;`lz`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<=c==> ~(a=c)`)[`indexf lx x s`;`indexf lx lz s`;`indexf lx z s`]
THEN MRESA_TAC(SET_RULE`!a b c s. b=c==> indexf a b s= indexf a c s`)[`lx`;`x`;`z`;`s`]
THEN MRESA_TAC Tame_list.betwn_mem[`s`;`lx`;`lz`;`x`]
THEN MRESA_TAC Aq8.next_cat_betwn_same[`y`;`z`;`s`;`r`;`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`(betwn s lx lz)`;`x`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`(betwn r lx lz)`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`x= LAST (betwn s lx lz)`];


MRESA_TAC Aq4.next_el_last_hd[`betwn s lx lz`]
THEN MRESA_TAC Aq4.next_el_last_hd[`betwn r lx lz`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`r`;`lx`;`lz`]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`s`;`lx`;`lz`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`lx=z`];

DICH_TAC(30-8)
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.indexf_refl[`lx`;`s`][ARITH_RULE`a<=0<=> a=0`]
THEN MRESA_TAC Tame_list.indexf0[`lx`;`lz`;`s`];

MRESA_TAC Aq8.next_cat_betwn_same[`y`;`z`;`s`;`r`;`lx`];


MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`r`;`lx`;`lz`;`x`]
THEN MRESA_TAC Aq4.EQ_MEM_NEXT_EL_LAST[`s`;`lx`;`lz`;`x`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`lx`;`lz`;`x`;`r`]
THEN MRESA_TAC Ncvibwu.next_el_betwn_same[`lx`;`lz`;`x`;`s`]]);;



let map1=prove(`map f [a]= [f a]`,
REWRITE_TAC[GSYM Tame_list.lower_case;MAP])
;;



let core_split_normal_list_concl =
  `(!L N r (x:A#A).  good_list L /\
  good_list_nodes L /\
  marked_list L N r x /\
  ~final_list L r
     ==> core_split_normal_list L N r x)`;;


 let core_split_normal_list=prove_by_refinement(core_split_normal_list_concl,
[
REPEAT RESA_TAC
THEN REWRITE_TAC[LET_THM;Tame_defs2.core_split_normal_list]
THEN DICH_ASM_TAC (1)[Tame_defs2.marked_list;]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`y=l'y L r x`
THEN GABBREV_TAC`z1=prev_el r (ztrans L N r x 0)`
THEN GABBREV_TAC`z=ztrans L N r x 0`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;ARITH_RULE`1=SUC 0`;Tame_defs2.transform_list;LET_THM]
THEN DICH_ASM_TAC(14-0)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN DICH_ASM_TAC(19-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`N`;`r`]
THEN MRESAL_TAC Seq2.next_prev_id[`(ztrans L N r x 0)`;`r`][Tame_defs2.ytrans]
THEN MP_TAC mem_ztrans_rtrans_v0
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;]
THEN MP_TAC ytrans_mem_rtrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN DICH_TAC(28-14)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;]
THEN RESA_TAC
THEN MP_TAC z_not_eq_ytrans_v0
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;][Tame_defs2.ytrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ztrans;GSYM Seq.allP;Seq.mem_cat;List_hypermap.mem_not_nil;Seq.mem_seq1;Seq2.mem_flatten]
THEN GABBREV_TAC`w=next_el (find_face L x) x`
THEN GABBREV_TAC`f=(find_face L x)`
THEN MRESAL_TAC PPLHULJ_v0[`L`;`N`;`r`;`x`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[Tame_defs2.core]
THEN MRESAL_TAC Aq12.cat_fst_split_normal_parts[`L`;`N`;`r`;`x`]
[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1]THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`;]
THEN SIMP_TAC[Seq.map_cat;Tame_list.lower_case]
THEN GABBREV_TAC`g=rev
          (flatten
          (map
           (\x. map (\i. (n_list L POWER i) x)
                (upt 1 (sizel (filter (\t. t = FST x) (flatten L)))))
          (betwn f y z)))`
THEN MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`]
[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;Seq.mem_filter;MEM_APPEND;Seq.mem_seq1;Tame_defs2.f_last;LAST_APPEND;APPEND_NIL;Tame_list.quotient_list_core;MEM_MAP;Seq.mem_cat;Seq.mem_seq1;Tame_list.lower_case;Seq.cat_uniq]
THEN GSUBGOAL_THEN`(map (FST o HD)
 (rev
 (map
  (\x. map (\i. (n_list L POWER i) x)
       (rev (upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))
 (betwn f y z)))) =(rev (map FST (betwn f y z)))`ASSUME_TAC
;




MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`betwn f y z=[]`]
;


REWRITE_TAC[Seq2.map;Tame_list.rev0]
;


MRESA_TAC Aq8.parts_rev_f_betwn_pure[`g`;`L`;`N`;`r`;`x`]
THEN MRESA_TAC Aq8.eq_fst_betwn_rev_parts[`g`;`L`;`N`;`r`;`x`]
;



MRESA_TAC Seq2.mem_prev_el[`z`;`r`]
THEN MRESA_TAC Seq2.mem_next_el[`y`;`r`]
THEN GABBREV_TAC`y1=next_el r y`
THEN MRESA_TAC FST_EQ_NEXT_YTRANS_v0[`y`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC FST_EQ_PREV_ZTRANS_v0[`z1`;`z`;`L`;`N`;`r`;`x`;]
THEN MRESA_TAC Tame_list.QRDYXYJ_list[`L`;`N`;`r`;`x`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`y1 =z1`];




DICH_TAC(48-41)
THEN DICH_TAC(47-41)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;





RESA_TAC
;


MATCH_MP_TAC(SET_RULE`b=c==> cat a b= cat a c`)
THEN MRESA_TAC Aq8.parts_mem_exists[`z1`;`L`;`r`]
THEN MRESA_TAC Aq8.parts_mem_exists[`y1`;`L`;`r`]
THEN CHANGE_TAC`py=p'`
THEN CHANGE_TAC`pz=p`
THEN GSUBGOAL_THEN`(FST o HD) py= FST y` ASSUME_TAC;


MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`y1`][o_DEF]
;




GSUBGOAL_THEN`(FST o HD) pz= FST z` ASSUME_TAC;


MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`z1`][o_DEF]
;


GSUBGOAL_THEN`~(py = pz)`ASSUME_TAC
;



STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
;



MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`N`;`r`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L r`][Tame_list.MEMf_MAP;]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`parts L r`]
THEN MRESAL_TAC Aq12.map_betwn[`parts L r`;`py`;`(FST o HD):(A#A)list->A`;`pz`][]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_list.lower_case]
THEN RESA_TAC
THEN SYM_DICH_TAC 0;


DICH_ASM_TAC(67-4)[Hypermap.is_restricted]
THEN MRESA_TAC parts_betwn[`N`;`parts L r`;`y1`;`z1`;`L`;`r`;`py`;`pz`]
THEN GABBREV_TAC`s=cat [y1] (cat (betwn r y1 z1) [z1])`
THEN GSUBGOAL_THEN`MEM y1 s`ASSUME_TAC;



EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
;



GSUBGOAL_THEN`MEM z1 s`ASSUME_TAC;



EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
;



MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case]
THEN DICH_TAC 0
THEN REWRITE_TAC[Seq.cat_uniq]
THEN STRIP_TAC
THEN MRESA_TAC Aq8.parts_mem_exists[`z1`;`L`;`s`]
THEN MRESA_TAC Aq8.parts_mem_exists[`y1`;`L`;`s`]
THEN CHANGE_TAC`pz1=p`
THEN CHANGE_TAC`py1=p'`
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`py1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`py1`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`py1`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`LAST py1`]
THEN MRESAL_TAC Aq8.fst_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case]
THEN DICH_TAC(89-36)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case]
THEN RESA_TAC
THEN MRESAL_TAC AQ_normal_list[`L`;`N`;`r`;`x`][]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`ntrans L N r x 1`;`cat g s`;`py1`;`y1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`ntrans L N r x 1`;`cat g s`;`py1`;`LAST py1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN GSUBGOAL_THEN`MEM (LAST py1) r`ASSUME_TAC
;



DICH_TAC (92-87)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`LAST py1`]
;




GSUBGOAL_THEN`MEM (LAST py1) py`ASSUME_TAC
;


MRESA_TAC Aq8.parts_mem_exists[`LAST py1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`LAST py1`]
THEN THAYTHEL_TAC (96-66)[`py`;`p`][o_DEF];





GSUBGOAL_THEN`LAST py1=LAST py`ASSUME_TAC;




MRESA_TAC normal_condition_last_parts[`N`;`r`;`L`;`py`;`LAST py1`]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC normal_condition_last_parts[`(ntrans L N r x 1)`;`cat g s`;`L`;`py1`;`LAST py1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC uniq_fst_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN GSUBGOAL_THEN`~(LAST py1 = LAST s)`ASSUME_TAC
;



MRESAL_TAC Tame_list.last_cat[` (cat (betwn r y1 z1) [z1])`;`[y1]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [z1]`;`betwn r y1 z1`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN STRIP_TAC
THEN DICH_TAC(99-92)
THEN RESA_TAC
THEN DICH_TAC(99-54)
THEN RESA_TAC;




MRESA_TAC Tame_list.next_el_cat2[`LAST py1`;`g`;`s`]
THEN MRESAL_TAC Tame_list.last_cat[` (cat (betwn r y1 z1) [z1])`;`[y1]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [z1]`;`betwn r y1 z1`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN DICH_TAC 3
THEN RESA_TAC
THEN MRESAL_TAC Aq8.next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST py1`][Tame_list.lower_case]
THEN DICH_TAC (101-95)
THEN RESA_TAC
;




MRESAL_TAC Tame_list.parts_fst[`L`;`ntrans L N r x 1`;`cat g s`;`pz1`;`z1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`pz1`]
THEN MRESA_TAC Tame_list.MEM_HD[`pz1`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`pz1`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`HD pz1`]
THEN GSUBGOAL_THEN`MEM (HD pz1) r`ASSUME_TAC
;



DICH_TAC (0)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`y1`;`z1`;`HD pz1`]
;




GSUBGOAL_THEN`MEM (HD pz1) pz`ASSUME_TAC
;


MRESA_TAC Aq8.parts_mem_exists[`HD pz1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p`;`HD pz1`]
THEN THAYTHEL_TAC (103-66)[`pz`;`p`][o_DEF];







GSUBGOAL_THEN`HD pz1=HD pz`ASSUME_TAC;



GABBREV_TAC`pn= prev_el (parts L r) pz`
THEN MRESA_TAC Seq2.mem_prev_el[`pz`;`parts L r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN DICH_TAC 0
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`pn`]
THEN MRESA_TAC Tame_list.MEM_LAST[`pn`]
THEN MRESA_TAC Seq2.next_prev_id[`pz`;`parts L r`]
THEN MRESA_TAC Tame_list.next_el_parts_last[`L`;`r`;`prev_el (parts L r) pz`;`LAST(prev_el (parts L r) pz)`]
THEN GABBREV_TAC`pn1= prev_el (parts L s) pz1`
THEN MRESA_TAC Seq2.mem_prev_el[`pz1`;`parts L s`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`pn1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`pn1`]
THEN MRESA_TAC Tame_list.next_el_parts_last[`L`;`s`;`prev_el (parts L s) pz1`;`LAST(prev_el (parts L s) pz1)`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN MRESA_TAC Seq2.next_prev_id[`pz1`;`parts L s`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN GSUBGOAL_THEN`~(FST(LAST pn1)= FST z)`ASSUME_TAC;




STRIP_TAC
THEN MRESAL_TAC Reduction2.transform_assumption_v2_lemma[`L`][Tame_defs2.transform_assumption]
THEN THAYTHE_TAC 0[`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.MEMf_MAP[`core L`;`cat g s`;`(ntrans L N r x 1)`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`(ntrans L N r x 1)`;`(rtrans L N r x 1)`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L ((cat g s))`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`parts L (cat g s)`]
THEN THAYTHEL_TAC 0[`pn1`;`pz1`][Seq.mem_cat;o_DEF]
THEN DICH_TAC 0
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`cat g s`;`pn1`;`LAST pn1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN STRIP_TAC
THEN DICH_TAC(120-113)
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.next_el_refl[`pz1`;`parts L s`]
THEN DICH_TAC(121-83)
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
THEN STRIP_TAC
THEN DICH_TAC(121-90)
THEN POP_ASSUM(fun th-> REWRITE_TAC[th])
THEN SYM_DICH_TAC(119-94)
THEN ASM_REWRITE_TAC[];



DICH_TAC 0
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a b. ~(FST a= FST b)==> ~(a=b)`)[`LAST pn1`;`z1`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`pn1`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`LAST pn1`]
THEN MRESAL_TAC Aq8.next_cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST pn1`][Tame_list.lower_case]
THEN DICH_TAC(118-107)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC (SYM th))
THEN DICH_TAC(118-101)
THEN ASM_REWRITE_TAC[];


 
GABBREV_TAC`pd= prev_el pz (next_el r (LAST pn1))`
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`pz`]
THEN MRESA_TAC Aq4.prev_el_last_hd[`pz`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`HD pz= HD pz1`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`pd= LAST pz`];



MRESA_TAC Seq2.next_prev_id[`HD pz1`;`pz`;]
THEN MRESA_TAC Seq2.next_prev_id[`HD pz`;`pz`;];


STRIP_TAC
THEN MRESA_TAC Seq2.mem_prev_el[`HD pz1`;`pz`]
THEN MRESA_TAC Seq2.next_prev_id[`HD pz1`;`pz`;]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`pz`;`pd`]
THEN MRESA_TAC Seq2.next_el_inj[`r`;`pd`;`LAST pn1`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`pd`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(129-117)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`HD pz1`]
THEN SYM_DICH_TAC(0)
THEN DICH_TAC (128-113)
THEN ASM_REWRITE_TAC[]
;





MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.HD_flatten[`parts L s`]
THEN DICH_TAC 0
THEN REMOVE_ASSUM_TAC
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`parts L s`;`py1`]
THEN MRESA_TAC Tame_list.MEM_HD[`parts L s`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`HD(parts L s)`]
THEN DICH_TAC(128-125)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.MEM_HD[`HD(parts L s)`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Tame_list.hd_cat[`[y1]`;`(cat (betwn r y1 z1) [z1])`][Ohcgkfu.sing_not_nil;HD]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`py1`;`HD(parts L s)`;`parts L s`;`y1`]
THEN DICH_TAC 0
THEN REMOVE_ASSUM_TAC
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.MEM_LAST[`parts L s`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`LAST(parts L s)`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L s`]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.last_cat[` (cat (betwn r y1 z1) [z1])`;`[y1]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [z1]`;`betwn r y1 z1`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.MEM_LAST[`LAST(parts L s)`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`pz1`;`LAST(parts L s)`;`parts L s`;`z1`]
;








MRESAL_TAC Reduction2.transform_assumption_v2_lemma[`L`][Tame_defs2.transform_assumption]
THEN THAYTHE_TAC 0[`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.MEMf_MAP[`core L`;`cat g s`;`(ntrans L N r x 1)`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`(ntrans L N r x 1)`;`(rtrans L N r x 1)`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L ((cat g s))`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
;



DICH_TAC(118-115)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN DICH_TAC(118-108)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN DICH_TAC(118-54)
THEN RESA_TAC
THEN MRESAL_TAC parts_betwn[`(ntrans L N r x 1)`;`parts L (cat g s)`;`y1`;`z1`;`L`;`cat g s`;`py1`;`pz1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
;



MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN DICH_TAC 0
THEN DICH_TAC(119-109)
THEN STRIP_TAC
THEN REMOVE_ASSUM_TAC
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN GSUBGOAL_THEN`~(py1 = pz1)`ASSUME_TAC
;


STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC
THEN REWRITE_TAC[th] THEN REPEAT RESA_TAC)
;



MRESA_TAC eq_HD_LAST_betwn[`parts L s`]
THEN MRESAL_TAC Tame_list.uniq_parts[`L`;`cat g s`][Seq.cat_uniq;Tame_list.cat_eq_nil]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN MRESAL_TAC betwn_cat[`(rev
       (map
        (\x. map (\i. (n_list L POWER i) x)
             (rev (upt 1 (sizel (filter (\t. t = FST x) (flatten L))))))
       (betwn f y z)))`;`(parts L s)`;`py1`;`pz1`][Seq.cat_uniq;ARITH_RULE`a<=a:num`]
THEN DICH_TAC(124-118)
THEN ASM_REWRITE_TAC[]
THEN GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;



EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC;


GSUBGOAL_THEN`indexf (LAST py) (HD pz) s <= indexf (LAST py) z1 s`
ASSUME_TAC
;


MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN DICH_TAC(126-86)
THEN RESA_TAC
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`py1`;`pz1`;`parts L s`;`LAST py1`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L s`]
THEN MRESA_TAC Aq12.indexf_split_flatten_right[`LAST py`;`parts L s`;`pz1`]
THEN MRESA_TAC Aq12.indexf_split_HD_flatten[`LAST py`;`parts L s`;`HD pz1`;`pz1`]
THEN MRESA_TAC Tame_list.indexf_refl[`HD pz1`;`pz1`]
THEN ARITH_TAC;




GSUBGOAL_THEN`~(LAST py = HD pz)`ASSUME_TAC
;


STRIP_TAC
THEN DICH_TAC(126-117)
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(125-91)
THEN RESA_TAC
;





MRESAL_TAC betwn_cat[`g`;`s`;`LAST py1`;`HD pz1`][Seq.cat_uniq;ARITH_RULE`a<=a:num`]
THEN MRESAL_TAC cat_betwn_same[`y1`;`z1`;`s`;`r`;`LAST py1`;`HD pz1`][Tame_list.lower_case]
THEN STRIP_TAC
THEN DICH_TAC(129-120)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[Seq.map_cat;map1];



(********2*******)

MRESAL_TAC Aq13.cat_snd_split_normal_parts[`L`;`N`;`r`;`x`][Tame_list.lower_case;Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;Seq.map_cat;GSYM Seq.map_comp;]
THEN REWRITE_TAC[o_DEF;HD;ETA_AX]
THEN MATCH_MP_TAC(SET_RULE`a=b==> cat a c= cat b c`)
THEN MRESA_TAC Aq8.parts_mem_exists[`z`;`L`;`r`]
THEN MRESA_TAC Aq8.parts_mem_exists[`y`;`L`;`r`]
THEN CHANGE_TAC`py=p'`
THEN CHANGE_TAC`pz=p`
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`y`][o_DEF]
;




MRESA_TAC Dangeyj.mem_imp_not_nil[`pz`;`z`]
THEN MRESA_TAC Tame_list.MEM_LAST[`pz`]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`z`][o_DEF]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`N`;`r`;`pz`;`LAST pz`][o_DEF]
THEN GSUBGOAL_THEN`~(py = pz)`ASSUME_TAC
;



STRIP_TAC
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(66-55)
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC;



MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC Tame_list.uniq_parts[`L`;`r`]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`N`;`r`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHES_TAC 0[`core L r`][Tame_list.MEMf_MAP;]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`parts L r`]
THEN MRESAL_TAC Aq12.map_betwn[`parts L r`;`py`;`(FST o HD):(A#A)list->A`;`pz`][]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_list.lower_case]
THEN RESA_TAC
THEN SYM_DICH_TAC 0;


DICH_ASM_TAC(71-4)[Hypermap.is_restricted]
THEN MRESA_TAC parts_betwn[`N`;`parts L r`;`z`;`y`;`L`;`r`;`pz`;`py`]
THEN GABBREV_TAC`s=cat [z] (cat (betwn r z y) [y])`
THEN GSUBGOAL_THEN`MEM y s`ASSUME_TAC;



EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
;



GSUBGOAL_THEN`MEM z s`ASSUME_TAC;



EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
;



MRESAL_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case]
THEN DICH_TAC 0
THEN REWRITE_TAC[Seq.cat_uniq]
THEN STRIP_TAC
THEN MRESA_TAC Aq8.parts_mem_exists[`z`;`L`;`s`]
THEN MRESA_TAC Aq8.parts_mem_exists[`y`;`L`;`s`]
THEN CHANGE_TAC`pz1=p`
THEN CHANGE_TAC`py1=p'`
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN DICH_TAC 0
THEN EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
THEN THAYTHE_TAC 0[`py1`]
THEN MRESA_TAC Tame_list.MEM_HD[`py1`]
THEN GSUBGOAL_THEN`~(s=[])`ASSUME_TAC
;


EXPAND_TAC "s"
THEN REWRITE_TAC[Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;GSYM Seq.allP]
THEN RESA_TAC
;


MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`py1`;`s`]
THEN THAYTHE_TAC 0[`HD py1`]
THEN MRESAL_TAC Tame_list.parts_all_nonnil[`L`;`s`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`pz1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`pz1`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`pz1`;`s`]
THEN THAYTHE_TAC 0[`LAST pz1`]
THEN MRESAL_TAC Aq8.snd_mem_rtran1[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case]
THEN MRESAL_TAC AQ_normal_list[`L`;`N`;`r`;`x`][]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`ntrans L N r x 1`;`cat s (betwn f y z)`;`py1`;`y`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`ntrans L N r x 1`;`cat s (betwn f y z)`;`pz1`;`LAST pz1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`ntrans L N r x 1`;`cat s (betwn f y z)`;`pz1`;`z`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN GSUBGOAL_THEN`MEM (LAST pz1) r`ASSUME_TAC
;



DICH_TAC (103-98)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`LAST pz1`]
;




GSUBGOAL_THEN`MEM (LAST pz1) pz`ASSUME_TAC
;


MRESA_TAC Aq8.parts_mem_exists[`LAST pz1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p''`;`LAST pz1`]
THEN THAYTHEL_TAC (107-71)[`pz`;`p''`][o_DEF];





GSUBGOAL_THEN`LAST pz1=LAST pz`ASSUME_TAC;




MRESA_TAC normal_condition_last_parts[`N`;`r`;`L`;`pz`;`LAST pz1`]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC normal_condition_last_parts[`(ntrans L N r x 1)`;`cat s (betwn f y z)`;`L`;`pz1`;`LAST pz1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC uniq_snd_split_norm[`L`;`N`;`r`;`x`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN GSUBGOAL_THEN`~(LAST pz1 = LAST s)`ASSUME_TAC
;



MRESAL_TAC Tame_list.last_cat[` (cat (betwn r z y) [y])`;`[z]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [y]`;`betwn r z y`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN STRIP_TAC
THEN DICH_TAC(110-102)
THEN RESA_TAC
THEN DICH_TAC(110-55)
THEN RESA_TAC;




MRESA_TAC Tame_list.next_el_cat1[`LAST pz1`;`s`;`betwn f y z`]
THEN MRESAL_TAC Tame_list.last_cat[` (cat (betwn r z y) [y])`;`[z]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [y]`;`betwn r z y`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN DICH_TAC 3
THEN RESA_TAC
THEN MRESAL_TAC Aq8.next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST pz1`][Tame_list.lower_case]
THEN DICH_TAC (112-106)
THEN RESA_TAC
;


(*****HD eq**)

GSUBGOAL_THEN`MEM (HD py1) r`ASSUME_TAC
;



DICH_TAC (106-95)
THEN EXPAND_TAC"s"
THEN REWRITE_TAC[Seq.mem_cat;Seq.mem_seq1]
THEN RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`r`;`z`;`y`;`HD py1`]
;




GSUBGOAL_THEN`MEM (HD py1) py`ASSUME_TAC
;


MRESA_TAC Aq8.parts_mem_exists[`HD py1`;`L`;`r`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`p''`;`HD py1`]
THEN THAYTHEL_TAC (110-71)[`py`;`p''`][o_DEF];





(**********************************)
(**********************************)

GSUBGOAL_THEN`HD py1=HD py`ASSUME_TAC;






GABBREV_TAC`pn= prev_el (parts L r) py`
THEN MRESA_TAC Seq2.mem_prev_el[`py`;`parts L r`]
THEN MRESA_TAC Tame_list.parts_all_nonnil[`L`;`r`]
THEN DICH_TAC 0
THEN REWRITE_TAC[GSYM Seq.allP]
THEN REPEAT RESA_TAC
THEN THAYTHE_TAC 0[`pn`]
THEN MRESA_TAC Tame_list.MEM_LAST[`pn`]
THEN MRESA_TAC Seq2.next_prev_id[`py`;`parts L r`]
THEN MRESA_TAC Tame_list.next_el_parts_last[`L`;`r`;`prev_el (parts L r) py`;`LAST(prev_el (parts L r) py)`]
THEN GABBREV_TAC`pn1= prev_el (parts L s) py1`
THEN MRESA_TAC Seq2.mem_prev_el[`py1`;`parts L s`]
THEN MRESAL_TAC Tame_list.parts_all_nonnil[`L`;`s`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`pn1`]
THEN MRESA_TAC Tame_list.MEM_LAST[`pn1`]
THEN MRESAL_TAC Tame_list.next_el_parts_last[`L`;`s`;`prev_el (parts L s) py1`;`LAST(prev_el (parts L s) py1)`][GSYM Seq.allP]
THEN MRESAL_TAC Tame_list.uniq_parts[`L`;`s`][GSYM Seq.allP]
THEN MRESA_TAC Seq2.next_prev_id[`py1`;`parts L s`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN GSUBGOAL_THEN`~(FST(LAST pn1)= FST y)`ASSUME_TAC;




STRIP_TAC
THEN MRESAL_TAC Reduction2.transform_assumption_v2_lemma[`L`][Tame_defs2.transform_assumption]
THEN THAYTHE_TAC 0[`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.MEMf_MAP[`core L`;`cat s (betwn f y z)`;`(ntrans L N r x 1)`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`(ntrans L N r x 1)`;`(rtrans L N r x 1)`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHEL_TAC 0[`core L ((cat s (betwn f y z)))`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
THEN MRESA_TAC uniq_imp_inj[`(FST o HD):(A#A)list->A`;`parts L (cat s (betwn f y z))`]
THEN THAYTHEL_TAC 0[`pn1`;`py1`][Seq.mem_cat;o_DEF]
THEN DICH_TAC 0
THEN MRESAL_TAC Tame_list.parts_fst[`L`;`(ntrans L N r x 1)`;`cat s (betwn f y z)`;`pn1`;`LAST pn1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN STRIP_TAC
THEN DICH_TAC(120-113)
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.next_el_refl[`py1`;`parts L s`]
THEN DICH_TAC(128-88)
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC
THEN REWRITE_TAC[th] THEN REPEAT RESA_TAC)
THEN DICH_TAC(126-55)
THEN DICH_TAC(125-64)
THEN DICH_TAC(124-61)
THEN DICH_TAC(123-96)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[th])
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[th])
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[th])
THEN DICH_TAC(122-97)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN REWRITE_TAC[];






DICH_TAC 0
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a b. ~(FST a= FST b)==> ~(a=b)`)[`LAST pn1`;`y`]
THEN MRESA_TAC Aq8.MEM_PARTS_IMP[`L`;`pn1`;`s`]
THEN THAYTHE_TAC 0[`LAST pn1`]
THEN MRESAL_TAC Aq8.next_cat_betwn_same[`z`;`y`;`s`;`r`;`LAST pn1`][Tame_list.lower_case]
THEN DICH_TAC(125-114)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC (SYM th))
;



 
GABBREV_TAC`pd= prev_el py (next_el r (LAST pn1))`
THEN MRESA_TAC Tame_list.parts_uniq_nonnil[`L`;`N`;`r`;`py`]
THEN MRESA_TAC Aq4.prev_el_last_hd[`py`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`HD py= HD py1`]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`pd= LAST py`];



MRESA_TAC Seq2.next_prev_id[`HD py1`;`py`;]
THEN MRESA_TAC Seq2.next_prev_id[`HD py`;`py`;];


MRESA_TAC Seq2.mem_prev_el[`HD py1`;`py`]
THEN MRESA_TAC Seq2.next_prev_id[`HD py1`;`py`;]
THEN MRESA_TAC Tame_list.next_el_parts_unlast[`L`;`r`;`py`;`pd`]
THEN MRESA_TAC Seq2.next_el_inj[`r`;`pd`;`LAST pn1`]
THEN MRESA_TAC Tame_list.parts_fst[`L`;`N`;`r`;`py`;`pd`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC(129-117)
THEN ASM_REWRITE_TAC[]
;




POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESA_TAC Tame_list.HD_flatten[`parts L s`]
THEN DICH_TAC 0
THEN REMOVE_ASSUM_TAC
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`parts L s`;`pz1`]
THEN MRESA_TAC Tame_list.MEM_HD[`parts L s`]
THEN MRESAL_TAC Tame_list.parts_all_nonnil[`L`;`s`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`HD(parts L s)`]
THEN MRESA_TAC Tame_list.MEM_HD[`HD(parts L s)`]
THEN DICH_TAC 0
THEN MRESAL_TAC Tame_list.hd_cat[`[z]`;`(cat (betwn r z y) [y])`][Ohcgkfu.sing_not_nil;HD]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`pz1`;`HD(parts L s)`;`parts L s`;`z`]
THEN MRESA_TAC Tame_list.MEM_LAST[`parts L s`]
THEN MRESAL_TAC Tame_list.parts_all_nonnil[`L`;`s`][GSYM Seq.allP]
THEN THAYTHE_TAC 0[`LAST(parts L s)`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L s`]
THEN DICH_TAC 0
THEN MRESA_TAC Tame_list.parts_flatten[`L`;`s`]
THEN MRESAL_TAC Tame_list.last_cat[` (cat (betwn r z y) [y])`;`[z]`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil]
THEN MRESAL_TAC Tame_list.last_cat[` [y]`;`betwn r z y`][Tame_list.cat_eq_nil;Ohcgkfu.sing_not_nil;LAST]
THEN DICH_TAC 2
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.MEM_LAST[`LAST(parts L s)`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`py1`;`LAST(parts L s)`;`parts L s`;`y`]
;






(******************)

MRESAL_TAC Reduction2.transform_assumption_v2_lemma[`L`][Tame_defs2.transform_assumption]
THEN THAYTHE_TAC 0[`N`;`r`;`x`]
THEN MRESAL_TAC Tame_list.MEMf_MAP[`core L`;`cat s (betwn f y z)`;`(ntrans L N r x 1)`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN MRESAL_TAC Tame_list.quotient_all_uniq[`L`;`(ntrans L N r x 1)`;`(rtrans L N r x 1)`;`x`][Tame_list.quotient_list_core;GSYM Seq.allP]
THEN THAYTHEL_TAC 0[`core L ((cat s (betwn f y z)))`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.core]
THEN STRIP_TAC
;





DICH_TAC(118-115)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN DICH_TAC(125-116)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ASSUME_TAC(SYM th))
THEN MRESAL_TAC parts_betwn[`(ntrans L N r x 1)`;`parts L (cat s (betwn f y z) )`;`z`;`y`;`L`;`cat s (betwn f y z)`;`pz1`;`py1`][Tame_defs2.ztrans;Tame_defs2.rtrans;POWER;o_DEF;I_DEF;Tame_defs2.ntrans;Tame_defs2.split_normal_list;LET_THM;Tame_list.lower_case;Seq.mem_cat]
;



MRESA_TAC Tame_list.uniq_parts[`L`;`s`]
THEN GSUBGOAL_THEN`~(py1 = pz1)`ASSUME_TAC
;



STRIP_TAC
THEN POP_ASSUM(fun th-> ASM_TAC
THEN REWRITE_TAC[th] THEN REPEAT RESA_TAC)
THEN DICH_TAC(125-55)
THEN ASM_REWRITE_TAC[];






MRESA_TAC eq_HD_LAST_betwn[`parts L s`]
THEN MRESAL_TAC Tame_list.uniq_parts[`L`;`cat s (betwn f y z)`][Seq.cat_uniq;Tame_list.cat_eq_nil]
THEN MRESAL_TAC betwn_cat0[`(map (\x. [x]) (betwn f y z))`;`(parts L s)`;`pz1`;`py1`][Seq.cat_uniq;ARITH_RULE`a<=a:num`]
THEN DICH_TAC(124-118)
THEN ASM_REWRITE_TAC[]
THEN GSUBGOAL_THEN`indexf (LAST pz) (HD py) s <= indexf (LAST pz) y s`
ASSUME_TAC
;


MRESA_TAC Tame_list.parts_all_nonnil[`L`;`s`]
THEN MRESA_TAC List_hypermap.uniq_sublist_unique[`pz1`;`py1`;`parts L s`;`LAST pz1`]
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L s`]
THEN DICH_TAC(134-98)
THEN RESA_TAC
THEN DICH_TAC(134-117)
THEN RESA_TAC
THEN MRESA_TAC Aq12.indexf_split_flatten_right[`LAST pz`;`parts L s`;`py1`]
THEN MRESA_TAC Aq12.indexf_split_HD_flatten[`LAST pz`;`parts L s`;`HD py1`;`py1`]
THEN MRESA_TAC Tame_list.indexf_refl[`HD py1`;`py1`]
THEN ARITH_TAC;




GSUBGOAL_THEN`~(LAST pz = HD py)`ASSUME_TAC
;


STRIP_TAC
THEN DICH_TAC(133-66)
THEN ASM_REWRITE_TAC[]
THEN DICH_TAC(132-55)
THEN RESA_TAC
;



DICH_TAC 0
THEN DICH_TAC 0
THEN RESA_TAC
THEN RESA_TAC
THEN MRESA_TAC Aq23.LAST_FLATTEN_2[`parts L s`]
THEN MRESAL_TAC betwn_cat0[`betwn f y z`;`s`;`LAST pz1`;`HD py1`][Seq.cat_uniq;ARITH_RULE`a<=a:num`]
THEN MRESAL_TAC cat_betwn_same[`z`;`y`;`s`;`r`;`LAST pz1`;`HD py1`][Tame_list.lower_case]
THEN MRESAL_TAC Aq12.FST_HD_MAP_betwn[`N`;`L`;`r`;`pz`;`py`;`parts L r`;`y`;`z`][o_DEF;Tame_list.lower_case]
THEN SYM_DICH_TAC 0
THEN STRIP_TAC
THEN DICH_TAC(137-128)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[th])
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[Seq.map_cat;map1]
THEN DICH_TAC(135-81)
THEN RESA_TAC;
]);;




 end;;



