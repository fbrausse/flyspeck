(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Pwssrat= struct

  open Truong_tactic;;
open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;
open Auqtzyz;;
open List_hypermap;;
open Rxokskc;;
open Dangeyj;;

let AQIUNPP3_concl = 
  `!L N r (x:A#A) i.
    marked_list L N r x ==> 
    marked_list L (ntrans L N r x i) (rtrans L N r x i) x`;;


let HQYMRTX1_list = `!L N r (x:A#A). marked_list L N r x /\ ~final_list L r
  ==> MEM (l'z L N r x) r /\
    (!i. 1 <= i /\ i <= SUC (l'm L r x) ==>
       ~(l'z L N r x = (f_list L POWER i) x))`;;


let PWSSRAT_concl = `!L N r (x:A#A) d i. marked_list L N r x /\ 
  MEM d (rtrans L N r x i) /\ ~(final_list L (rtrans L N r x i))==>
   (MEM d (rtrans L N r x (SUC i)) <=>
      indexf (ztrans L N r x i) d (rtrans L N r x i) <=
      indexf (ztrans L N r x i) (ytrans L N r x i) (rtrans L N r x i))`;;

(*****************************************************)
(*****************************************************)
(*****************************************************)
(*****************************************************)
(*****************************************************)
(*****************************************************)



let min_not_eq_imp_eq= prove_by_refinement(` 
 min_num {m| ~((f POWER (SUC(SUC m)) ) x= g ((f POWER (SUC m)) x))}=n
==> !i. i<=n==> (f POWER (SUC i)) x= (g POWER i) (f x)`,
[
RESA_TAC
THEN INDUCT_TAC;

REWRITE_TAC[POWER;I_DEF;o_DEF];

STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!i n. SUC i<=n==> i<=n/\ i<n`)[`i`;`n`]
THEN DICH_TAC 3
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. ~A\/ A`)[`(f POWER SUC (SUC i)) x = g ((f POWER SUC i) x)`];

GSUBGOAL_THEN`i IN {m | ~((f POWER SUC (SUC m)) x = g ((f POWER SUC m) x))}`
ASSUME_TAC;

ASM_REWRITE_TAC[IN_ELIM_THM];

MRESA_TAC Nuxcoea.MIN_LEAST[`{m | ~((f POWER SUC (SUC m)) x = g ((f POWER SUC m) x))}`;`i`];

DICH_TAC 0
THEN DICH_TAC 4
THEN ARITH_TAC;

REWRITE_TAC[COM_POWER;o_DEF]]);;


let min_not_eq_imp_eq_at=prove(` min_num {m| ~((f POWER (SUC(SUC m)) ) x= g ((f POWER (SUC m)) x))}=n
==>  (f POWER (SUC n)) x= (g POWER n) (f x)`,
STRIP_TAC
THEN MRESA_TAC min_not_eq_imp_eq[`n`;`g`;`f`;`x`]
THEN MATCH_DICH_TAC 0
THEN ARITH_TAC);;


let l_y_rep_power=prove(`f_list L x = next_el (rotate_to r x) x/\ r' = rotate_to r x 
==> l'y L r x = ITER ((SUC (l'm L r x))) (next_el r') x`,
REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.l_y]
THEN MRESAL_TAC min_not_eq_imp_eq_at[`f_list L`;`l'm L r x`;`next_el (rotate_to r x)`;`x`][Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN GABBREV_TAC`n=min_num
  {m | ~(ITER (SUC (SUC m)) (next_el (rotate_to r x)) x =
         f_list L (ITER (SUC m) (next_el (rotate_to r x)) x))}`
THEN ASM_REWRITE_TAC[GSYM Tame_list.POWER_TO_ITER;POWER;o_DEF]);;


let sizel0_not_nil=prove(`!s.  ~(s = []) <=> 0< sizel s`,
REWRITE_TAC[List_hypermap.mem_not_nil;  Tame_list.sizel0;ARITH_RULE`0<a<=> ~(a=0)`]);;


let rotate_to_hd=prove(`rotate_to (h :: t) h= h :: t`,
REWRITE_TAC[Tame_list.next_el1;Tame_defs.rotate_to;Tame_defs.split_at;Tame_defs.split_at_rec;APPEND_NIL]);;



let FST_SPLIT_AT_EMPTY=prove(
`!r:(A)list. MEM x r/\ FST (split_at x r)=[]
==> HD r=x`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;Tame_defs.split_at;Tame_defs.split_at_rec;APPEND_NIL;HD]
THEN RESA_TAC
THEN DICH_TAC 0
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`h=x`]
THEN MRESAL_TAC Dangeyj.APPEND_FST_SPLIT[`x`;`t`;`APPEND [] [h]`;`[]:(A)list`][APPEND_NIL;APPEND;NOT_CONS_NIL]);;


let FST_SND_EMPTY_SING=prove(`!r:(A)list. MEM x r/\ FST (split_at x r)=[] /\  SND (split_at x r)=[]
==> r=[x]`,
REPEAT RESA_TAC
THEN MRESA_TAC FST_SPLIT_AT_EMPTY[`x`;`r`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESAL_TAC Tame_list.snd_split_at_hd[`r`;`x`;`x`;`[]:(A)list`][GSYM Tame_defs.split_at]
THEN SYM_DICH_TAC 2
THEN ASM_SIMP_TAC[CONS_HD_TL]);;


let next_el_rotate_to_eq=  prove_by_refinement(
`!r. MEM x r/\ uniq r==> next_el r x= next_el (rotate_to r x) x`,
[
REPEAT RESA_TAC
THEN ASM_SIMP_TAC[Seq2.next_el;Tame_list.next_el1;Tame_defs.rotate_to]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`SND (split_at x r)=[]`];

MRESAL_TAC Dangeyj.SND_EMPTY_INDEXL[`x`;`r`][APPEND;Seq.index_head];

MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`FST (split_at x r)=[]`];


MRESAL_TAC FST_SND_EMPTY_SING[`x`;`r`][Seq2.size1;ARITH_RULE`1-1=0`];

REWRITE_TAC[Seq.size_cons;ARITH_RULE`SUC a-1=a`]
THEN MRESAL_TAC sizel0_not_nil[`FST (split_at x r)`][ARITH_RULE`0<a<=> ~(a=0)/\ 0+1= SUC 0`;Seq.nth;Seq.nth0]
THEN MRESA_TAC sizel0_not_nil[`FST (split_at x r)`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`r`;`x`]
THEN MRESA_TAC sizel0_not_nil[`r`]
THEN ASM_SIMP_TAC[Seq2.head_HD]
THEN MRESA_TAC Dangeyj.HD_FST_SPLIT[`x`;`r`];

MRESA_TAC Dangeyj.INDEXL_EQ_SND_EMPTY[`x`;`r`]
THEN REWRITE_TAC[Seq.size_cons;ARITH_RULE`SUC a-1=a`;Seq.index_head]
THEN MRESA_TAC APPEND_EQ_NIL[`SND (split_at x r)`;`FST (split_at x r)`]
THEN MRESAL_TAC sizel0_not_nil[`APPEND (SND (split_at x r)) (FST (split_at x r))`][ARITH_RULE`0<a<=> ~(a=0)/\0+1= SUC 0`;Seq.nth;Seq.nth0]
THEN MRESAL_TAC sizel0_not_nil[`APPEND (SND (split_at x r)) (FST (split_at x r))`][Seq.nth;Seq.nth0]
THEN ASM_SIMP_TAC[Seq2.head_HD;HD_APPEND]
THEN MRESA_TAC Dangeyj.HD_SND_NTH_SPLIT_AT[`x`;`r`]]);;



let f_eq_next_el_x=prove( (mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i. marked_list L N r x
==>  f_list L x = next_el (rotate_to ((rtrans L N r x i)) x) x`)),

REPEAT RESA_TAC
THEN THAYTHEL_TAC 1[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep;]
THEN DICH_ASM_TAC(10-3)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`ntrans L N r x i`;`rtrans L N r x i`]
THEN MRESA_TAC next_el_rotate_to_eq[`x`;`rtrans L N r x i`]);;




let dropl_index_snd_split=prove(`!s:(A)list. MEM x s /\ uniq s==> dropl 1(dropl (indexl x s) s)=SND(split_at x s)`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;Seq.uniq;Tame_defs.split_at;Tame_defs.split_at_rec;APPEND_NIL;]
THEN RESA_TAC
THEN REWRITE_TAC[Seq.index_head;Seq.drop0;ARITH_RULE`1=SUC 0`;Seq.drop_cons]
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`x`;`t`]
THEN MRESAL_TAC snd_split_at_rec_const[`x`;`t`;`[]:(A)list`;`[h]`][APPEND]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[Seq2.index_cons;Seq.drop_cons]
THEN DICH_TAC 4
THEN RESA_TAC
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`;Tame_defs.split_at]);;


let take_index_fst_split=prove(`!s:(A)list. MEM x s /\ uniq s==> (take (indexl x s) s)=FST(split_at x s)`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;Seq.uniq;Tame_defs.split_at;Tame_defs.split_at_rec;APPEND_NIL;]
THEN RESA_TAC
THEN REWRITE_TAC[Seq.index_head;Seq.take0;ARITH_RULE`1=SUC 0`;Seq.drop_cons]
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`x`;`t`]
THEN MRESAL_TAC Dangeyj.APPEND_FST_SPLIT[`x`;`t`;`APPEND [] [h]`;`[]:(A)list`][APPEND_NIL;APPEND;NOT_CONS_NIL]
THEN ASM_REWRITE_TAC[Seq2.index_cons;Seq.take_cons]
THEN DICH_TAC 5
THEN RESA_TAC
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC 0=1`;Tame_defs.split_at]);;



let append_dropl1=prove(`!s. MEM v s==>APPEND [v] (dropl 1 (dropl (indexl v s) s))= dropl (indexl v s) s`,
LIST_INDUCT_TAC
THEN REWRITE_TAC[MEM;Seq.uniq;Tame_defs.split_at;Tame_defs.split_at_rec;APPEND_NIL;]
THEN RESA_TAC
THEN REWRITE_TAC[Seq.index_head;Seq.drop0;ARITH_RULE`1=SUC 0`;Seq.drop_cons;APPEND]
THEN ASM_REWRITE_TAC[Seq2.index_cons;Seq.drop_cons]
THEN DICH_TAC 1
THEN REWRITE_TAC[Seq.index_head;Seq.drop0;ARITH_RULE`1=SUC 0`;Seq.drop_cons;APPEND]
THEN ASM_REWRITE_TAC[Seq2.index_cons;Seq.drop_cons]
THEN MRESA_TAC(SET_RULE`!A. A\/ ~A`)[`v=h`]
THEN ASM_REWRITE_TAC[Seq2.index_cons;Seq.drop0;Seq.drop_cons]);;


let rotate_rot_indexl=prove(`!v s. MEM v s/\ uniq s ==> rotate_to s v= rot (indexl v s) s`,
REWRITE_TAC[Tame_list.next_el1;Tame_defs.rotate_to;Tame_defs.split_at_rec;APPEND_NIL;]
THEN ASM_SIMP_TAC[Seq.rot;GSYM take_index_fst_split;GSYM dropl_index_snd_split;]
THEN REPEAT RESA_TAC
THEN MRESAL_TAC append_dropl1[`v`;`s`][APPEND;GSYM APPEND_ASSOC;GSYM Seq2.APPEND_cat]
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th]
THEN REWRITE_TAC[APPEND;GSYM APPEND_ASSOC;GSYM Seq2.APPEND_cat]
THEN REWRITE_TAC[th]));;



let next_el_rotate=prove(`!r. MEM y r /\ MEM x r/\ uniq r==> next_el r y= next_el (rotate_to r x) y`,
ASM_SIMP_TAC[rotate_rot_indexl;Seq2.next_el_rot_eq]);;


let MEM_POWER_NEXT_EL_ROTATE=prove(`!k. MEM x r /\ uniq r ==> MEM (((next_el (rotate_to r x)) POWER k) x) r`,
INDUCT_TAC
THEN
REWRITE_TAC[POWER;COM_POWER;o_DEF;I_DEF]
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC
THEN ASM_SIMP_TAC[GSYM next_el_rotate;Seq2.mem_next_el]);;


let MEM_POWER_NEXT_EL=prove(`!k. MEM x r /\ uniq r ==> MEM (((next_el r) POWER k) x) r`,
INDUCT_TAC
THEN
REWRITE_TAC[POWER;COM_POWER;o_DEF;I_DEF]
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC
THEN ASM_SIMP_TAC[GSYM next_el_rotate;Seq2.mem_next_el]);;



let next_el_power_rotate=prove(`!k. MEM x r /\ uniq r ==> ((next_el r) POWER k) x = ((next_el (rotate_to r x)) POWER k) x`,
INDUCT_TAC
THEN
REWRITE_TAC[POWER;COM_POWER;o_DEF]
THEN RESA_TAC
THEN DICH_TAC 2
THEN RESA_TAC
THEN ASM_SIMP_TAC[next_el_rotate;MEM_POWER_NEXT_EL_ROTATE]);;


let ytrans_mem_rtrans=prove( (mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i. marked_list L N r x
/\ ~(final_list L (rtrans L N r x i))
==> MEM (ytrans L N r x i) (rtrans L N r x i)`)),
REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ytrans;]
THEN THAYTHEL_ASM_TAC 2[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN MP_TAC f_eq_next_el_x
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN MRESAL_TAC l_y_rep_power[`L`;`r1`;`rotate_to r1 x`;`x`][GSYM Tame_list.POWER_TO_ITER]
THEN MATCH_MP_TAC MEM_POWER_NEXT_EL_ROTATE
THEN DICH_ASM_TAC(14-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]);;


let mem_ztrans_rtrans=prove( (mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i. marked_list L N r x
/\ ~(final_list L (rtrans L N r x i))
==> MEM (ztrans L N r x i) (rtrans L N r x i)`)))),

REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;]
THEN THAYTHEL_ASM_TAC 2[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN MP_TAC f_eq_next_el_x
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=(l'y L r1 x)`
THEN ASM_REWRITE_TAC[]
THEN THAYTHEL_ASM_TAC 15[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM]);;

let z_not_eq_ytrans=prove((mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i. marked_list L N r x
/\ ~(final_list L (rtrans L N r x i))
==> ~(ztrans L N r x i = ytrans L N r x i)`)))),
REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;Tame_defs2.l_y]
THEN THAYTHEL_ASM_TAC 2[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=(l'y L r1 x)`
THEN ASM_REWRITE_TAC[]
THEN THAYTHEL_ASM_TAC 14[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM]
THEN THAYTHEL_ASM_TAC 1[`SUC (l'm L r1 x)`;][LET_THM;ARITH_RULE`1<=SUC a/\ SUC a<= SUC a`]);;


let find_face_f_list_power=prove(`!k L d.
         uniq (list_of_darts L) /\ MEM d (list_of_darts L)
         ==> find_face L (((f_list L) POWER k) d) = find_face L d`,
INDUCT_TAC
THENL[
REWRITE_TAC[COM_POWER;I_DEF;GSYM List_hypermap.dart_in_face;POWER];
REWRITE_TAC[POWER;I_DEF;GSYM List_hypermap.dart_in_face;o_DEF]
THEN REPEAT RESA_TAC
THEN MRESA_TAC List_hypermap.mem_f_list[`d`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_mem_darts[`(f_list L d)`;`d`;`L`]
THEN THAYTHES_TAC 4[`L`;`f_list L d`][List_hypermap.mem_f_list;List_hypermap.mem_find_face_imp_mem_darts;List_hypermap.find_face_f_list]]);;



let men_f_list_darts=prove(`MEM d (list_of_darts L) ==>  MEM (f_list L d) (list_of_darts L)`,
REPEAT STRIP_TAC
THEN MATCH_MP_TAC List_hypermap.mem_find_face_imp_mem_darts
THEN GEXISTS_TAC`d`
THEN ASM_SIMP_TAC[List_hypermap.mem_f_list;List_hypermap.mem_find_face_imp_mem_darts]);;



let men_f_list_darts_power=prove(`!k. MEM d (list_of_darts L) ==>  MEM ((f_list L POWER k) d) (list_of_darts L)`,

INDUCT_TAC
THENL[REWRITE_TAC[POWER;I_DEF];
REWRITE_TAC[COM_POWER;o_DEF]
THEN STRIP_TAC
THEN DICH_TAC 0
THEN RESA_TAC
THEN ASM_SIMP_TAC[men_f_list_darts]]);;

let mem_f_list_power=prove(`!k. uniq (list_of_darts L) /\ MEM d (list_of_darts L) ==> MEM (((f_list L) POWER k) d) (find_face L d)`,
REPEAT RESA_TAC
THEN ASM_SIMP_TAC[GSYM find_face_f_list_power;GSYM List_hypermap.dart_in_face;]
THEN ASM_SIMP_TAC[men_f_list_darts_power]);;



let mem_ytrans_list_of_darts=prove( (mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i. marked_list L N r x
/\ ~(final_list L (rtrans L N r x i))
==> MEM (ytrans L N r x i) (list_of_darts L)`)))),
REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN THAYTHEL_ASM_TAC 2[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=(l'y L r1 x)`
THEN ASM_REWRITE_TAC[]
THEN THAYTHEL_ASM_TAC 14[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM;Tame_defs2.l_z]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC (17-5)[Tame_defs2.normal_list]
THEN DICH_TAC (1)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`r1`][Tame_defs2.loop_list]
THEN DICH_TAC (0)
THEN REWRITE_TAC[GSYM Seq.allP]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`y`][Tame_defs2.loop_list]);;



let ztran_in_face_ytrans=prove((mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i. good_list L /\ marked_list L N r x
/\ ~(final_list L (rtrans L N r x i))
==> MEM (ztrans L N r x i)  (find_face L (ytrans L N r x i))`)))),
REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN THAYTHEL_ASM_TAC 3[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=(l'y L r1 x)`
THEN ASM_REWRITE_TAC[]
THEN THAYTHEL_ASM_TAC 15[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM;Tame_defs2.l_z]
THEN MATCH_MP_TAC mem_f_list_power
THEN MP_TAC mem_ytrans_list_of_darts
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(18)[List_hypermap.good_list]
);;


let minnum_not= prove_by_refinement(` min_num {m| P m}=n
/\ i<n==> ~ P i`,
[
RESA_TAC
THEN MRESA_TAC(SET_RULE`!A. ~A\/ A`)[`P i`];

GSUBGOAL_THEN`i IN {m | P m}`ASSUME_TAC;

ASM_REWRITE_TAC[IN_ELIM_THM];

MRESA_TAC Nuxcoea.MIN_LEAST[`{m | P m}`;`i`];
ASM_TAC 
THEN ARITH_TAC]);;


let f_list_power_ytrans_not_mem=prove( (mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i. marked_list L N r x /\ (rtrans L N r x i)=r1
/\ ~(final_list L r1)
==> (!j.  j< l'p L ((ntrans L N r x i)) r1 x
==> ~(MEM ((f_list L POWER (SUC j)) (ytrans L N r x i)) r1))`)))),

REPEAT RESA_TAC
THEN DICH_TAC 0
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN THAYTHEL_ASM_TAC 4[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`y=(l'y L r1 x)`
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC minnum_not[`l'p L (ntrans L N r x i) r1 x`;`(\p. MEM ((f_list L POWER SUC p) (l'y L r1 x)) (flatten (ntrans L N r x i)))`;`j`][GSYM Tame_defs2.l_p]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[ Tame_defs2.l_p]
THEN MATCH_MP_TAC Ssrbool.contraNN
THEN ASM_REWRITE_TAC[Seq2.mem_flatten]
THEN RESA_TAC
THEN GEXISTS_TAC`r1`
THEN ASM_REWRITE_TAC[]);;



let f_list_power_next_el=prove(`!m. uniq (list_of_darts L) /\ MEM y (list_of_darts L)
==> (f_list L POWER m) y = ((next_el (find_face L y)) POWER m) y`,
INDUCT_TAC
THENL[
REWRITE_TAC[POWER];
STRIP_TAC
THEN DICH_TAC 2
THEN RESA_TAC
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF]
THEN MRESA_TAC find_face_f_list_power[`m`;`L`;`y`]
THEN ASM_REWRITE_TAC[List_hypermap.f_list]]);;


let next_el_sizel=prove(`!L. uniq L/\ MEM y L==> (next_el L POWER sizel L) y = y`,
ASM_SIMP_TAC[Seq2.next_el_power;Oxl_2012.MOD_ADD_CANCEL]
THEN REPEAT RESA_TAC
THEN MRESA_TAC Seq.index_mem[`y`;`L`]
THEN ASM_SIMP_TAC[MOD_LT;Seq.nth_index]);;



let  indexf_ytrans_suc_lp=  prove_by_refinement(
(mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,`!L N r (x:A#A) i N1.  good_list L /\ marked_list L N r x /\ (rtrans L N r x i)=r1/\ (ntrans L N r x i)=N1/\ find_face L (ytrans L N r x i) = L1
/\ ~(final_list L r1)
==> indexf (ytrans L N r x i) (ztrans L N r x i) L1 =SUC(l'p L N1 r1 x)`)))),
[

REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN THAYTHEL_ASM_TAC 6[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN GABBREV_TAC`y=(l'y L r1 x)`
THEN ASM_REWRITE_TAC[]
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN DICH_TAC (16-4)
THEN REWRITE_TAC[Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN RESA_TAC
THEN MP_TAC mem_ytrans_list_of_darts
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN DICH_ASM_TAC(18)[List_hypermap.good_list]
THEN MP_TAC ztran_in_face_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.uniq_find_face[`y`;`L`]
THEN ASM_REWRITE_TAC[Tame_defs2.l_z;]
THEN GABBREV_TAC`p=l'p L N1 r1 x`
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`SUC p`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. b=a \/a<b \/ b< a`)[`sizel L1`;`SUC p`];

MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;Tame_defs2.ztrans;Tame_defs2.l_z;]
THEN DICH_TAC 2
THEN RESA_TAC
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC next_el_sizel[`y`;`L1`];

MP_TAC f_list_power_ytrans_not_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`L1`;`y`]
THEN MRESA_TAC sizel0_not_nil[`L1`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`sizel L1`][ARITH_RULE`1<=a<=> 0<a`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a< SUC b==> a<b`)[`PRE (sizel L1)`;`p`]
THEN THAYTHE_TAC (32-28)[`PRE (sizel L1)`]
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`(sizel L1)`]
THEN MRESA_TAC next_el_sizel[`y`;`L1`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]]);;



let AQIUNPP3_concl = 
  `!L N r (x:A#A) i.
    marked_list L N r x ==> 
    marked_list L (ntrans L N r x i) (rtrans L N r x i) x`;;


let HQYMRTX1_list = `!L N r (x:A#A). marked_list L N r x /\ ~final_list L r
  ==> MEM (l'z L N r x) r /\
    (!i. 1 <= i /\ i <= SUC (l'm L r x) ==>
       ~(l'z L N r x = (f_list L POWER i) x))`;;


let PWSSRAT_concl = `!L N r (x:A#A) d i. good_list L /\ marked_list L N r x /\ 
  MEM d (rtrans L N r x i) /\ ~(final_list L (rtrans L N r x i))==>
   (MEM d (rtrans L N r x (SUC i)) <=>
      indexf (ztrans L N r x i) d (rtrans L N r x i) <=
      indexf (ztrans L N r x i) (ytrans L N r x i) (rtrans L N r x i))`;;




let PWSSRAT=  prove_by_refinement( (mk_imp(HQYMRTX1_list,(mk_imp(AQIUNPP3_concl,PWSSRAT_concl)))),
[
REPEAT RESA_TAC
THEN EQ_TAC;

ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN THAYTHEL_ASM_TAC 4[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z=prev_el r1 (ztrans L N r x i)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN RESA_TAC;


DICH_ASM_TAC(15-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN ASM_SIMP_TAC[Tame_list.indexf_refl]
THEN ARITH_TAC;

DICH_ASM_TAC(15-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN DICH_TAC(24-17)
THEN RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;]
THEN GABBREV_TAC`z1=(ztrans L N r x i)`
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z1`;`d`;`y`]
THEN DICH_TAC 0
THEN ARITH_TAC;


ASM_REWRITE_TAC[Tame_defs2.ytrans;]
THEN ARITH_TAC;


DICH_ASM_TAC(15-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN DICH_TAC(24-17)
THEN RESA_TAC
THEN GABBREV_TAC`z1=(ztrans L N r x i)`
THEN GABBREV_TAC`L1=(find_face L y)`
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC ztran_in_face_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC mem_ytrans_list_of_darts
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(31)[List_hypermap.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`y`;`L`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`L1`;`y`;`d`;`z1`]
THEN MRESA_TAC Tame_list.betwn_mem[`L1`;`y`;`z1`;`d`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`d`;`L1`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`z1`;`L1`]
THEN MP_TAC indexf_ytrans_suc_lp
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`ntrans L N r x i`][Tame_defs2.ytrans;]
THEN DICH_TAC(42-38)
THEN RESA_TAC
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf y d L1`][ARITH_RULE`1<=a<=> 0<a`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a< SUC b==> a<b`)[`PRE (indexf y d L1)`;`(l'p L (ntrans L N r x i) r1 x)`]
THEN MRESA_TAC f_list_power_next_el[`L`;`y`;`indexf y d L1`]
THEN MP_TAC f_list_power_ytrans_not_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN THAYTHE_TAC 0[`PRE(indexf y d L1)`];


ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN THAYTHEL_ASM_TAC 4[`L`;`N`;`r`;`x`;`i`][LET_THM]
THEN DICH_ASM_TAC 1[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z=prev_el r1 (ztrans L N r x i)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN RESA_TAC;


DICH_ASM_TAC(15-5)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN DICH_TAC(24-17)
THEN RESA_TAC
THEN GABBREV_TAC`z1=(ztrans L N r x i)`
THEN GABBREV_TAC`L1=(find_face L y)`
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC ztran_in_face_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC mem_ytrans_list_of_darts
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC List_hypermap.dart_in_face[`y`;`L`]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN DICH_ASM_TAC(31)[List_hypermap.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`y`;`L`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z1`;`d`;`y`]
THEN DICH_TAC(38-25)
THEN ASM_REWRITE_TAC[Tame_defs2.ytrans;]
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. a<=b==> a=0\/ (0<a /\ a<b)\/ a=b`)[`indexf z1 d r1`;`indexf z1 y r1`];


MRESA_TAC Tame_list.indexf0[`z1`;`d`;`r1`];


MRESA_TAC Tame_list.indexf_n[`z1`;`d`;`r1`]
THEN MRESA_TAC Tame_list.indexf_n[`z1`;`y`;`r1`]]);;


 end;;



