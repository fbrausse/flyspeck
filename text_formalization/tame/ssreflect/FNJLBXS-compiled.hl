needs "tame/ssreflect/sort-compiled.hl";;

(* Lemma packing *)
let packing = section_proof ["V"]
`packing V <=> (!u v. u IN V /\ v IN V /\ ~(u = v) ==> &2 <= dist (u,v))`
[
   (((((use_arg_then "Sphere.packing")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((fun arg_tac -> (use_arg_then "IN") (fun fst_arg -> (use_arg_then "V") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))))) THEN (done_tac));
];;
let inE = CONJUNCT2 IN_ELIM_THM;;

(* Section MoreList *)
begin_section "MoreList";;

(* Lemma uniq_small_size *)
let uniq_small_size = section_proof ["l"]
`sizel l < 2 ==> uniq l`
[
   (((THENL) (((use_arg_then "l") (disch_tac [])) THEN (clear_assumption "l") THEN case) [ALL_TAC; ((move ["h"]) THEN (move ["t"]))]) THEN ((((use_arg_then "uniq")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))));
   (((THENL) (((use_arg_then "t") (disch_tac [])) THEN (clear_assumption "t") THEN case) [ALL_TAC; ((move ["h2"]) THEN (move ["t"]))]) THEN ((repeat_tactic 0 10 (((use_arg_then "uniq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "MEM")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then "size_cons")(thm_tac (new_rewrite [] [])))))) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma uniq_lift *)
let uniq_lift = section_proof ["l"]
`uniq (map lift l) <=> uniq l`
[
   (((((use_arg_then "map_inj_uniq")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "LIFT_EQ")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma list_sum_continuous *)
let list_sum_continuous = section_proof ["f";"s";"s'";"net"]
`lift o f continuous_on (UNIV:real^N->bool) /\
        (!k. LENGTH (s' k) = LENGTH s) /\
        (!i. i < LENGTH s ==> ((\k. EL i (s' k)) --> EL i s) net) ==>
        ((\k. list_sum (s' k) f) ---> list_sum s f) net`
[
   ((BETA_TAC THEN (case THEN (move ["f_cont"]))) THEN (((THENL) (((use_arg_then "s'") (disch_tac [])) THEN (clear_assumption "s'") THEN ((use_arg_then "s") (disch_tac [])) THEN (clear_assumption "s") THEN elim) [ALL_TAC; ((move ["h"]) THEN (move ["t"]) THEN (move ["IH"]))]) THEN (move ["s'"])) THEN (repeat_tactic 1 9 (((use_arg_then "LENGTH")(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then "LENGTH_EQ_NIL")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["_"])) THEN (((use_arg_then "REALLIM_CONST")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   (BETA_TAC THEN (case THEN (move ["len_eq"])) THEN (move ["s'_to"]));
   ((fun arg_tac -> arg_tac (Arg_term (`!k. s' k = EL 0 (s' k) :: TL (s' k)`))) (term_tac (have_gen_tac [](move ["s'_eq"]))));
   ((BETA_TAC THEN (move ["k"])) THEN ((((use_arg_then "EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CONS_HD_TL")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LENGTH_EQ_NIL")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_SUC")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_ROT (-1)) (((((use_arg_then "s'_eq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "list_sum_cons")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REALLIM_ADD")(thm_tac (new_rewrite [] []))))) THEN (split_tac)));
   ((THENL_FIRST) ((((use_arg_then "IH") (disch_tac [])) THEN (clear_assumption "IH") THEN (DISCH_THEN apply_tac)) THEN (split_tac)) ((BETA_TAC THEN (move ["k"])) THEN (((fun arg_tac -> (use_arg_then "len_eq") (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "s'_eq")(thm_tac (new_rewrite [1] [])))) THEN (((use_arg_then "LENGTH")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eqSS")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((BETA_TAC THEN (move ["i"]) THEN (move ["i_lt"])) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL EL_TL)))(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then "s'_to") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`SUC i`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "ltSS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "ADD1")(thm_tac (new_rewrite [1] [])))) THEN (((use_arg_then "EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "TL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((use_arg_then "LIM_REAL_CONTINUOUS_FUNCTION")(thm_tac (new_rewrite [] []))));
   ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(thm_tac (new_rewrite [] [])))) THEN (split_tac));
   (((use_arg_then "CONTINUOUS_ON_INTERIOR") (thm_tac apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`UNIV`))) (term_tac exists_tac)) THEN ((((use_arg_then "INTERIOR_UNIV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_UNIV")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "s'_to") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "gtS0")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then "EL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "HD")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma list_sum_continuous_alt *)
let list_sum_continuous_alt = section_proof ["f";"s";"v";"net"]
`lift o f continuous_on (UNIV:real^N->bool) /\
        (!i. i < LENGTH s ==> ((\k. v k i) --> EL i s) net) ==>
        ((\k. list_sum (mkseq (v k) (LENGTH s)) f) ---> list_sum s f) net`
[
   (BETA_TAC THEN (case THEN ((move ["f_cont"]) THEN (move ["v_to"]))));
   (((((use_arg_then "list_sum_continuous")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "f_cont")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"]));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`!k. EL i (mkseq (v k) (sizel s)) = v k i`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) (((((use_arg_then "v_to")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac)));
   ((BETA_TAC THEN (move ["k"])) THEN ((((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section MoreList *)
let uniq_small_size = finalize_theorem uniq_small_size;;
let uniq_lift = finalize_theorem uniq_lift;;
let list_sum_continuous = finalize_theorem list_sum_continuous;;
let list_sum_continuous_alt = finalize_theorem list_sum_continuous_alt;;
end_section "MoreList";;

(* Section MoreMinK *)
begin_section "MoreMinK";;

(* Lemma min_k_continuous *)
let min_k_continuous = section_proof ["k";"n";"f";"net"]
`(!i. i < n ==> f i real_continuous net) ==>
        (\x. min_k k (mkseq (\i. f i x) n)) real_continuous net`
[
   ((THENL_ROT (-1)) (((fun arg_tac -> arg_tac (Arg_term (`k < n:num`))) (disch_eq_tac "k_lt" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)));
   ((((use_arg_then "min_k")(thm_tac (new_rewrite [] [])))) THEN ((fun arg_tac -> arg_tac (Arg_term (`\x. _ x`))) (term_tac (set_tac "r"))));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`r = \x. EL k (nseq n ((@)UNIV))`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) ((((use_arg_then "REAL_CONTINUOUS_CONST")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((((((use_arg_then "r_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "eq_ext")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["m"]) THEN (simp_tac)) THEN ((use_arg_then "ge_length_imp_EL_eq") (thm_tac apply_tac)));
   (((((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_merge_sort")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_nseq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leqNgt")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((repeat_tactic 1 9 (((use_arg_then "real_continuous")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REALLIM)))(thm_tac (new_rewrite [] []))))));
   (((fun arg_tac -> arg_tac (Arg_term (`trivial_limit net`))) (disch_tac [])) THEN case THEN (simp_tac) THEN (move ["f_cont"]) THEN (move ["e"]) THEN (move ["e_gt0"]));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`?y. (?x. netord net x y) /\
        (!x. netord net x y ==> (!i:num. i < n ==> abs (f i x - f i (netlimit net)) < e))`))) (term_tac (have_gen_tac []ALL_TAC))));
   ((((use_arg_then "MONO_EXISTS") (thm_tac apply_tac)) THEN (move ["y"]) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["all_f"])) THEN ((((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (move ["x"]) THEN (move ["net_x"])));
   (repeat_tactic 1 9 (((use_arg_then "min_k")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`merge_sort (<=) _`))) (term_tac (set_tac "s"))) THEN ((fun arg_tac -> arg_tac (Arg_term (`merge_sort (<=) _`))) (term_tac (set_tac "s'"))));
   ((repeat_tactic 1 9 (((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "s'_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_merge_sort")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((use_arg_then "s_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "s'_def")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then "sort_continuous") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`mkseq (\i. f i x) n`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`mkseq (\i. f i (netlimit net)) n`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "s'_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "real_merge_sort")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "k_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"]));
   (((repeat_tactic 1 9 (((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then "all_f")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`?y x. netord net x y`))) (term_tac (have_gen_tac [](move ["ord_xy"]))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "f_cont") (fun fst_arg -> (use_arg_then "k_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["y"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["x"])) THEN (move ["h"]) THEN (move ["_"])) THEN (((use_arg_then "y") (term_tac exists_tac)) THEN ((use_arg_then "x") (term_tac exists_tac))) THEN (done_tac));
   (((THENL) (((use_arg_then "f_cont") (disch_tac [])) THEN (clear_assumption "f_cont") THEN ((use_arg_then "n") (disch_tac [])) THEN (clear_assumption "n") THEN elim) [ALL_TAC; ((move ["m"]) THEN (move ["IH"]))]) THEN ((repeat_tactic 0 10 (((use_arg_then "ltn0")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)));
   ((((use_arg_then "ord_xy") (disch_tac [])) THEN (clear_assumption "ord_xy") THEN BETA_TAC THEN (case THEN (move ["y"])) THEN (case THEN (move ["x"])) THEN (move ["ord_xy"])) THEN (((use_arg_then "y") (term_tac exists_tac)) THEN ((use_arg_then "x") (term_tac exists_tac))) THEN (done_tac));
   ((BETA_TAC THEN (move ["f_cont"])) THEN (((use_arg_then "IH") (disch_tac [])) THEN (clear_assumption "IH") THEN BETA_TAC) THEN ((THENL) (ANTS_TAC) [((move ["i"]) THEN (move ["i_lt_m"]) THEN (move ["e'"]) THEN (move ["e'_gt0"])); ALL_TAC]));
   (((((use_arg_then "f_cont")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "e'_gt0")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "i_lt_m") (disch_tac [])) THEN (clear_assumption "i_lt_m") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "f_cont") (fun fst_arg -> (use_arg_then "m") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> (use_arg_then "ltnSn") (fun fst_arg -> (use_arg_then "m") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((((use_arg_then "IMP_IMP")(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "NET_DILEMMA") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (case THEN (move ["y"])) THEN (case THEN (move ["x_ord"])) THEN (move ["h"]));
   (((use_arg_then "y") (term_tac exists_tac)) THEN (((((use_arg_then "x_ord")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (ARITH_RULE `i < SUC m <=> i = m \/ i < m`)))(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (move ["ord_xy"]) THEN (move ["i"])));
   ((THENL_FIRST) ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (move ["i_lt_m"])]) ((((use_arg_then "h")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then "h") (fun fst_arg -> (use_arg_then "ord_xy") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma min_k_limit *)
let min_k_limit = section_proof ["k";"s";"s'";"net"]
`(!n. LENGTH (s' n) = LENGTH s) /\
        (!i. i < LENGTH s ==> ((\n. EL i (s' n)) ---> EL i s) net) ==>
        ((\n. min_k k (s' n)) ---> min_k k s) net`
[
   (BETA_TAC THEN (case THEN ((move ["len_eq"]) THEN (move ["s'_to"]))));
   ((THENL_ROT (-1)) (((fun arg_tac -> arg_tac (Arg_term (`k < LENGTH s`))) (disch_eq_tac "k_lt" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`(\n. min_k k (s' n)) = (\n. min_k k s)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) ((((use_arg_then "REALLIM_CONST")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((((repeat_tactic 1 9 (((use_arg_then "min_k")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "eq_ext")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["m"]) THEN (simp_tac)) THEN ((use_arg_then "ge_length_imp_EL_eq") (thm_tac apply_tac)));
   (((((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "size_merge_sort")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leqNgt")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "s'_to") (disch_tac [])) THEN (clear_assumption "s'_to") THEN BETA_TAC) THEN (repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REALLIM)))(thm_tac (new_rewrite [] []))))));
   (((fun arg_tac -> arg_tac (Arg_term (`trivial_limit net`))) (disch_tac [])) THEN case THEN (simp_tac) THEN (move ["el_cont"]) THEN (move ["e"]) THEN (move ["e_gt0"]));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`?y. (?x. netord net x y) /\
        (!x. netord net x y ==> (!i. i < LENGTH s ==> abs (EL i (s' x) - EL i s) < e))`))) (term_tac (have_gen_tac []ALL_TAC))));
   ((((use_arg_then "MONO_EXISTS") (thm_tac apply_tac)) THEN (move ["y"]) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["all_el"])) THEN ((((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (move ["x"]) THEN (move ["net_x"])));
   (repeat_tactic 1 9 (((use_arg_then "min_k")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`merge_sort (<=) _`))) (term_tac (set_tac "l"))) THEN ((fun arg_tac -> arg_tac (Arg_term (`merge_sort (<=) _`))) (term_tac (set_tac "l'"))));
   ((repeat_tactic 1 9 (((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "l_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "l'_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_merge_sort")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((use_arg_then "l_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "l'_def")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then "sort_continuous") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`s' x`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "l_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "l'_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "real_merge_sort")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "k_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"]));
   (((repeat_tactic 1 9 (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "all_el")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`?y x. netord net x y`))) (term_tac (have_gen_tac [](move ["ord_xy"]))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "el_cont") (fun fst_arg -> (use_arg_then "k_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["y"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["x"])) THEN (move ["h"]) THEN (move ["_"])) THEN (((use_arg_then "y") (term_tac exists_tac)) THEN ((use_arg_then "x") (term_tac exists_tac))) THEN (done_tac));
   (((THENL) (((use_arg_then "el_cont") (disch_tac [])) THEN (clear_assumption "el_cont") THEN ((use_arg_then "len_eq") (disch_tac [])) THEN (clear_assumption "len_eq") THEN ((use_arg_then "s'") (disch_tac [])) THEN (clear_assumption "s'") THEN ((use_arg_then "s") (disch_tac [])) THEN (clear_assumption "s") THEN elim) [ALL_TAC; ((move ["h"]) THEN (move ["t"]) THEN (move ["IH"]))]) THEN (((repeat_tactic 1 9 (((use_arg_then "LENGTH")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "ltn0")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (move ["s'"]) THEN (move ["len_eq"]) THEN (move ["el_cont"])));
   ((((fun arg_tac -> (use_arg_then "IH") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`\n. TL (s' n)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (repeat_tactic 1 9 ((ANTS_TAC))));
   ((THENL_LAST) ((BETA_TAC THEN (move ["n"])) THEN ((((use_arg_then "LENGTH_TL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))))) ((arith_tac) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then "len_eq") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "LENGTH")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   (BETA_TAC THEN (move ["i"]) THEN (move ["i_lt"]) THEN (move ["e'"]) THEN (move ["e'_gt0"]));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "el_cont") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`SUC i`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e'_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "ltSS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then "EL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "TL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "el_cont") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "gtS0")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   ((((use_arg_then "IMP_IMP")(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg]))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "NET_DILEMMA") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (case THEN (move ["y"])) THEN (case THEN (move ["x_ord"])) THEN (move ["h"]));
   ((THENL_FIRST) (((use_arg_then "y") (term_tac exists_tac)) THEN (((((use_arg_then "x_ord")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (move ["ord_xy"]) THEN ((THENL) case [(move ["_"]); (move ["i"])]))) ((((use_arg_then "h")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (((((use_arg_then "ltSS")(thm_tac (new_rewrite [] [])))) THEN (move ["i_lt"])) THEN ((repeat_tactic 1 9 (((use_arg_then "EL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "TL")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "h") (fun fst_arg -> (use_arg_then "ord_xy") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
let min_dist_k = new_definition
        `min_dist_k k (l:(real^N)list) = min_k 0 (map (\v. dist (v, EL k l)) (delete_at k l))`;;

(* Lemma min_dist_k_limit *)
let min_dist_k_limit = section_proof ["k";"s";"s'";"net"]
`(!n. LENGTH (s' n) = LENGTH s) /\
        (!i. i < LENGTH s ==> ((\n. EL i (s' n)) --> EL i s) net) ==>
        ((\n. min_dist_k k (s' n)) ---> min_dist_k k s) net`
[
   (BETA_TAC THEN (case THEN (move ["len_eq"])) THEN (move ["s'_to"]));
   (repeat_tactic 1 9 (((use_arg_then "min_dist_k")(thm_tac (new_rewrite [] [])))));
   (((use_arg_then "min_k_limit") (thm_tac apply_tac)) THEN ((THENL) (split_tac) [(move ["n"]); (move ["i"])]) THEN ((((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "size_map")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))));
   ((in_tac ["len_eq"] true (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (BETA_TAC THEN (move ["i_lt"])));
   ((fun arg_tac -> arg_tac (Arg_term (`(\n. EL i (map (\v. dist (v, EL k (s' n))) (delete_at k (s' n)))) =
        (\n. norm (EL i (delete_at k (s' n)) - EL k (s' n)))`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((((((use_arg_then "eq_ext")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "dist")(thm_tac (new_rewrite [] []))))) THEN (move ["n"]) THEN (simp_tac)) THEN ((((use_arg_then "EL_map")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "EL_map")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "dist")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((use_arg_then "LIM_REAL_CONTINUOUS_FUNCTION") (thm_tac apply_tac)) THEN ((((use_arg_then "REAL_CONTINUOUS_NORM_AT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LIM_SUB")(thm_tac (new_rewrite [] []))))));
   ((THENL_ROT (-1)) (((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN ((fun arg_tac -> arg_tac (Arg_term (`k < sizel s`))) (disch_eq_tac "k_lt" [])) THEN case THEN (simp_tac) THEN (move ["i_lt"]) THEN (process_fst_eq_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`!n. delete_at k (s' n) = s' n`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((BETA_TAC THEN (move ["n"])) THEN ((((use_arg_then "delete_at_eq_imp")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) ((((fun arg_tac -> (use_arg_then "delete_at_eq_imp") (fun fst_arg -> (use_arg_then "k_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "s'_to")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))))) ((((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`!n. EL k (s' n) = EL k s`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) ((((use_arg_then "LIM_CONST")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((BETA_TAC THEN (move ["n"])) THEN ((use_arg_then "ge_length_imp_EL_eq") (thm_tac apply_tac)) THEN ((((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leqNgt")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!n. EL i (delete_at k (s' n)) = EL (if i < k then i else SUC i) (s' n)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((BETA_TAC THEN (move ["n"])) THEN ((((use_arg_then "EL_delete_at")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "k_lt")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "EL_delete_at")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "k_lt")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((repeat_tactic 1 9 (((use_arg_then "s'_to")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "k_lt")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma min_dist_min *)
let min_dist_min = section_proof ["l";"k"]
`!i. i < sizel l /\ ~(i = k) ==> min_dist_k k l <= dist (EL i l, EL k l)`
[
   ((BETA_TAC THEN (move ["i"]) THEN (case THEN ((move ["i_lt"]) THEN (move ["neq"])))) THEN ((((use_arg_then "min_dist_k")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "min_k")(thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> arg_tac (Arg_term (`map _1 _2`))) (term_tac (set_tac "s")));
   ((fun arg_tac -> (use_arg_then "real_merge_sort") (fun fst_arg -> (use_arg_then "s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["sort"])));
   (((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))));
   (((((use_arg_then "size_merge_sort")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_map")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN ((use_arg_then "neq") (disch_tac [])) THEN (clear_assumption "neq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!a b. a <= b <=> a <= b \/ b = a`)))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_term (`_1 = _2`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)));
   ((((fun arg_tac -> (use_arg_then "nth0_sorted_imp") (fun fst_arg -> (use_arg_then "sort") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "mapP")(thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> arg_tac (Arg_term (`EL i l`))) (term_tac exists_tac)) THEN (simp_tac)) THEN (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))));
   ((fun arg_tac -> arg_tac (Arg_term (`if i < k then i else i - 1`))) (term_tac (set_tac "j")));
   ((fun arg_tac -> arg_tac (Arg_term (`j < sizel (delete_at k l)`))) (term_tac (have_gen_tac [](move ["j_lt"]))));
   (((((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "j_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then "neq") (disch_tac [])) THEN (clear_assumption "neq") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((use_arg_then "j") (term_tac exists_tac)) THEN ((((use_arg_then "EL_delete_at")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "j_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))));
   (congr_tac (`EL _ l`));
   ((((use_arg_then "j_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "neq") (disch_tac [])) THEN (clear_assumption "neq") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma min_dist_exists *)
let min_dist_exists = section_proof ["l";"k"]
`2 <= sizel l ==>
        ?m. m < sizel l /\ ~(m = k) /\ min_dist_k k l = dist (EL m l, EL k l)`
[
   ((BETA_TAC THEN (move ["size_ge"])) THEN (((use_arg_then "min_dist_k")(thm_tac (new_rewrite [] [])))));
   ((fun arg_tac -> arg_tac (Arg_term (`map _1 _2`))) (term_tac (set_tac "s")));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "mem_min_k") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC));
   (((((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_map")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_ge") (disch_tac [])) THEN (clear_assumption "size_ge") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "size_map")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["i"])) THEN (case THEN (move ["i_lt"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   ((fun arg_tac -> arg_tac (Arg_term (`if i < k then i else SUC i`))) (term_tac (set_tac "m")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`m < sizel l`))) (term_tac (have_gen_tac [](move ["m_lt"])))) ((((use_arg_then "m_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((THENL_FIRST) (((use_arg_then "m") (term_tac exists_tac)) THEN ((((use_arg_then "m_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (split_tac)) ((((use_arg_then "m_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac)));
   ((((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "EL_map")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)));
   (((((use_arg_then "EL_delete_at")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "m_def")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "size_delete_at")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma min_distP *)
let min_distP = section_proof ["l";"k";"x"]
`2 <= sizel l ==> (min_dist_k k l = x <=>
        ?m. m < sizel l /\ ~(m = k) /\ dist (EL m l, EL k l) = x /\
                (!i. i < sizel l /\ ~(i = k) ==> x <= dist (EL i l, EL k l)) )`
[
   (BETA_TAC THEN (move ["size_ge"]));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "min_dist_exists") (fun fst_arg -> (use_arg_then "size_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["r"])) THEN (case THEN (move ["r_lt"])) THEN (case THEN (move ["rnk"])) THEN (move ["r_dist_eq"]));
   ((THENL) (split_tac) [(((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] []))))); ((case THEN (move ["m"])) THEN (case THEN (move ["m_lt"])) THEN (case THEN (move ["mnk"])) THEN (case THEN (move ["dist_eq"])) THEN (move ["dist_le"]))]);
   (((use_arg_then "r") (term_tac exists_tac)) THEN (((((use_arg_then "r_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "rnk")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "r_dist_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (move ["i"]) THEN (case THEN (move ["i_lt"])) THEN (move ["neq"])));
   ((((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((((use_arg_then "REAL_LE_ANTISYM")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (split_tac));
   (((((use_arg_then "dist_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "r_dist_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_le")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma min_dist_imp_packing *)
let min_dist_imp_packing = section_proof ["l"]
`(!i. i < sizel l ==> &2 <= min_dist_k i l) ==> packing (set_of_list l)`
[
   (((((use_arg_then "packing")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] [])))))) THEN (move ["h"]) THEN (move ["u"]) THEN (move ["v"]));
   (((repeat_tactic 1 9 (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN ALL_TAC) THEN (case THEN (move ["i"])) THEN (case THEN (move ["i_lt"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN (case THEN ALL_TAC) THEN (case THEN (move ["j"])) THEN (case THEN (move ["j_lt"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN (move ["neq"]));
   ((((use_arg_then "REAL_LE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`min_dist_k j l`))) (term_tac exists_tac)));
   ((((use_arg_then "h")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "neq") (disch_tac [])) THEN (clear_assumption "neq") THEN ((use_arg_then "contra") (disch_tac [])) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma packing_eq_min_dist *)
let packing_eq_min_dist = section_proof ["l"]
`uniq l /\ 2 <= sizel l ==>
        (packing (set_of_list l) <=> !i. i < sizel l ==> &2 <= min_dist_k i l)`
[
   ((THENL_LAST) ((BETA_TAC THEN (case THEN ((move ["uniq_l"]) THEN (move ["size_ge"])))) THEN (split_tac)) (((use_arg_then "min_dist_imp_packing") (disch_tac [])) THEN (clear_assumption "min_dist_imp_packing") THEN (exact_tac)));
   (((((use_arg_then "packing")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] [])))))) THEN (move ["pack"]) THEN (move ["k"]) THEN (move ["k_lt"]));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "min_dist_exists") (fun fst_arg -> (use_arg_then "size_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["m"])) THEN (case THEN (move ["m_lt"])) THEN (case THEN (move ["n_mk"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "pack")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)) THEN (((use_arg_then "nth_uniq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma min_dist_imp_uniq *)
let min_dist_imp_uniq = section_proof ["l"]
`(!i. i < sizel l ==> &0 < min_dist_k i l) ==> uniq l`
[
   ((THENL_FIRST) (((fun arg_tac -> (use_arg_then "EXCLUDED_MIDDLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`sizel l < 2`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) (((DISCH_THEN (fun snd_th -> (use_arg_then "uniq_small_size") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (move ["size_ge"]) THEN (move ["n0"]));
   ((((fun arg_tac -> (use_arg_then "uniq_nthP") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (move ["i"]) THEN (move ["j"]) THEN (case THEN (move ["i_lt_j"])) THEN (move ["j_lt"]));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`i < sizel l`))) (term_tac (have_gen_tac [](move ["i_lt"])))) ((((use_arg_then "j_lt") (disch_tac [])) THEN (clear_assumption "j_lt") THEN ((use_arg_then "i_lt_j") (disch_tac [])) THEN (clear_assumption "i_lt_j") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then "n0") (fun fst_arg -> (use_arg_then "j_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac)) THEN (((repeat_tactic 1 9 (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac))) THEN (move ["el_eq"])));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "min_dist_exists") (fun fst_arg -> (use_arg_then "size_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "j") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["m"])) THEN (case THEN (move ["m_lt"])) THEN (case THEN (move ["n_mj"])) THEN (move ["dist_eq"]));
   ((((use_arg_then "dist_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LT")(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "min_dist_min") (fun fst_arg -> (use_arg_then "i_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "j") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC)) ((((use_arg_then "i_lt_j") (disch_tac [])) THEN (clear_assumption "i_lt_j") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "dist_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "el_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma uniq_min_distP *)
let uniq_min_distP = section_proof ["l"]
`uniq l <=> sizel l < 2 \/ (!i. i < sizel l ==> &0 < min_dist_k i l)`
[
   ((THENL_LAST) (split_tac) (((THENL) case [(DISCH_THEN (fun snd_th -> (use_arg_then "uniq_small_size") (thm_tac (match_mp_then snd_th MP_TAC)))); (DISCH_THEN (fun snd_th -> (use_arg_then "min_dist_imp_uniq") (thm_tac (match_mp_then snd_th MP_TAC))))]) THEN (done_tac)));
   ((BETA_TAC THEN (move ["uniq_l"])) THEN (((THENL) (((fun arg_tac -> (use_arg_then "EXCLUDED_MIDDLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`sizel l < 2`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); ALL_TAC]) THEN ((TRY done_tac))));
   (((((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (move ["size_ge"])) THEN ((DISJ2_TAC) THEN (move ["k"]) THEN (move ["k_lt"])));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "min_dist_exists") (fun fst_arg -> (use_arg_then "size_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["m"])) THEN (case THEN (move ["m_lt"])) THEN (case THEN (move ["n_mk"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   (in_tac ["uniq_l"] false (((fun arg_tac -> (use_arg_then "uniq_nthP") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "k_lt") (disch_tac [])) THEN (clear_assumption "k_lt") THEN ((use_arg_then "m_lt") (disch_tac [])) THEN (clear_assumption "m_lt") THEN ((use_arg_then "n_mk") (disch_tac [])) THEN (clear_assumption "n_mk") THEN BETA_TAC) THEN (((THENL) ((fun arg_tac -> arg_tac (Arg_term (`m < k:num`))) (term_tac (wlog_tac ALL_TAC[`m`; `k`]))) [(move ["h"]); (move ["m_lt_k"])]) THEN (move ["n_mk"]) THEN (move ["m_lt"]) THEN (move ["k_lt"])));
   (((THENL) (((fun arg_tac -> (use_arg_then "EXCLUDED_MIDDLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`m < k:num`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) [((DISCH_THEN (fun snd_th -> (use_arg_then "h") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))); ALL_TAC]) THEN ((TRY done_tac)));
   ((((((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LE_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n_mk")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "orbF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "h") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((repeat_tactic 1 9 (((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_LT_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_POS_LE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "uniq_l") (fun fst_arg -> (use_arg_then "m_lt_k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "k_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((use_arg_then "contra") (disch_tac [])) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac));
   (((((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_EQ_0")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma uniq_open *)
let uniq_open = section_proof ["l"]
`uniq l ==> ?e. &0 < e /\
        (!s. sizel s = sizel l /\ (!i. i < sizel l ==> dist (EL i s, EL i l) < e) ==> uniq s)`
[
   ((BETA_TAC THEN (move ["uniq_l"])) THEN (((use_arg_then "uniq_l") (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "uniq_min_distP")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`sizel l < 2`))) (disch_eq_tac "size_ge" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`&1`))) (term_tac exists_tac)) THEN (((((use_arg_then "REAL_LT_01")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["s"]) THEN (case THEN (move ["size_eq"])) THEN (move ["_"])));
   (((((use_arg_then "uniq_small_size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((in_tac ["size_ge"] false (((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] []))))) THEN (BETA_TAC THEN (move ["h"])));
   ((fun arg_tac -> arg_tac (Arg_term (`mkseq (\i. min_dist_k i l) (sizel l)`))) (term_tac (set_tac "r")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`sizel r = sizel l`))) (term_tac (have_gen_tac [](move ["size_r"])))) (((((use_arg_then "r_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   (((fun arg_tac -> arg_tac (Arg_term (`min_k 0 r / &2`))) (term_tac exists_tac)) THEN ((THENL) (split_tac) [ALL_TAC; ((move ["s"]) THEN (case THEN ((move ["size_eq"]) THEN (move ["dist_lt"]))))]));
   ((THENL_FIRST) ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "mem_min_k") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "r") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC)) (((((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_r")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_ge") (disch_tac [])) THEN (clear_assumption "size_ge") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((BETA_TAC THEN (move ["mem_r"])) THEN ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "nth_index") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "mem_r") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LT_DIV")(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then "r_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (repeat_tactic 0 10 (((use_arg_then "h")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_r")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "index_mem")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (arith_tac) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "uniq_nthP") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (move ["i"]) THEN (move ["j"]) THEN (case THEN ((move ["i_lt_j"]) THEN (move ["j_lt"]))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`i < sizel s`))) (term_tac (have_gen_tac [](move ["i_lt"])))) ((((use_arg_then "i_lt_j") (disch_tac [])) THEN (clear_assumption "i_lt_j") THEN ((use_arg_then "j_lt") (disch_tac [])) THEN (clear_assumption "j_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((repeat_tactic 1 9 (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)) THEN (((use_arg_then "DIST_LE_0")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_NOT_LE")(thm_tac (new_rewrite [] [])))));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`min_k 0 r <= dist (EL i l, EL j l)`))) (term_tac (have_gen_tac []ALL_TAC))));
   (in_tac ["dist_lt"] false (((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [] []))))));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL i l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL i s`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL j l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL i s`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL j s`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL j l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((((fun arg_tac -> (use_arg_then "dist_lt") (fun fst_arg -> (use_arg_then "j_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (use_arg_then "dist_lt") (fun fst_arg -> (use_arg_then "i_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "REAL_LE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`min_dist_k j l`))) (term_tac exists_tac)));
   ((THENL_FIRST) ((((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "i_lt")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))))) ((((use_arg_then "i_lt_j") (disch_tac [])) THEN (clear_assumption "i_lt_j") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((use_arg_then "r_def") (disch_tac [])) THEN (clear_assumption "r_def") THEN (DISCH_THEN (fun snd_th -> (fun arg_tac -> (use_arg_then "f_equal") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`\x. nth (&0) x j`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC);
   (((((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)) THEN (((use_arg_then "BETA_THM")(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_r")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)) THEN (((use_arg_then "min_k0_le_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_r")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma uniq_real_open *)
let uniq_real_open = section_proof ["l"]
`uniq l ==> ?e. &0 < e /\
        (!s. sizel s = sizel l /\ (!i. i < sizel l ==> abs (EL i s - EL i l) < e) ==> uniq s)`
[
   ((repeat_tactic 1 9 (((use_arg_then "uniq_lift")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "uniq_open") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (case THEN (move ["e"])) THEN (case THEN (move ["e_gt0"])) THEN (move ["h"]));
   (((use_arg_then "e") (term_tac exists_tac)) THEN (((((use_arg_then "e_gt0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_LIFT")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["s"]) THEN (case THEN (move ["size_eq"])) THEN (move ["dist_lt"])));
   ((((use_arg_then "h") (disch_tac [])) THEN (clear_assumption "h") THEN (DISCH_THEN apply_tac)) THEN (((repeat_tactic 1 9 (((use_arg_then "size_map")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"])));
   (((repeat_tactic 1 9 (((use_arg_then "EL_map")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "dist_lt")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section MoreMinK *)
let min_k_continuous = finalize_theorem min_k_continuous;;
let min_k_limit = finalize_theorem min_k_limit;;
let min_dist_k_limit = finalize_theorem min_dist_k_limit;;
let min_dist_min = finalize_theorem min_dist_min;;
let min_dist_exists = finalize_theorem min_dist_exists;;
let min_distP = finalize_theorem min_distP;;
let min_dist_imp_packing = finalize_theorem min_dist_imp_packing;;
let packing_eq_min_dist = finalize_theorem packing_eq_min_dist;;
let min_dist_imp_uniq = finalize_theorem min_dist_imp_uniq;;
let uniq_min_distP = finalize_theorem uniq_min_distP;;
let uniq_open = finalize_theorem uniq_open;;
let uniq_real_open = finalize_theorem uniq_real_open;;
end_section "MoreMinK";;

(* Section FiniteBijections *)
begin_section "FiniteBijections";;
(add_section_var (mk_var ("s", (`:A->bool`))));;
(add_section_var (mk_var ("t", (`:B->bool`))));;

(* Lemma permutes_imp_bij *)
let permutes_imp_bij = section_proof ["p"]
`p permutes s ==> BIJ p s s`
[
   ((BETA_TAC THEN (move ["perm"])) THEN ((((use_arg_then "BIJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "INJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SURJ")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "PERMUTES_IN_IMAGE") (fun fst_arg -> (use_arg_then "perm") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   ((THENL_FIRST) ((THENL) (split_tac) [((move ["x"]) THEN (move ["y"]) THEN (case THEN (move ["xs"])) THEN (case THEN (move ["ys"])) THEN (move ["p_eq"])); ((move ["x"]) THEN (move ["xs"]))]) ((((fun arg_tac -> (use_arg_then "PERMUTES_INJECTIVE") (fun fst_arg -> (use_arg_then "perm") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "PERMUTES_SURJECTIVE") (fun fst_arg -> (use_arg_then "perm") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["y"])) THEN (move ["p_eq"])) THEN ((use_arg_then "y") (term_tac exists_tac)) THEN ((split_tac) THEN ((TRY done_tac))));
   (((((fun arg_tac -> (use_arg_then "PERMUTES_IN_IMAGE") (fun fst_arg -> (use_arg_then "perm") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "p_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma surj_image *)
let surj_image = section_proof ["f"]
`SURJ f s t ==> IMAGE f s = t`
[
   (((((use_arg_then "SURJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ((move ["f_in"]) THEN (move ["surj"]))) THEN (move ["y"]));
   (((THENL) ((THENL) (split_tac) [((case THEN (move ["x"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["xs"])); ((DISCH_THEN (fun snd_th -> (use_arg_then "surj") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (case THEN (move ["x"])) THEN (case THEN ((move ["xs"]) THEN (move ["eq"]))))]) [(((use_arg_then "f_in") (disch_tac [])) THEN (clear_assumption "f_in") THEN (exact_tac)); ((use_arg_then "x") (term_tac exists_tac))]) THEN (done_tac));
];;

(* Lemma surj_imp_finite *)
let surj_imp_finite = section_proof ["f"]
`FINITE s /\ SURJ f s t ==> FINITE t`
[
   ((BETA_TAC THEN (case THEN (move ["fin_s"])) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "surj_image") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((use_arg_then "FINITE_IMAGE") (thm_tac apply_tac)) THEN (done_tac));
];;

(* Lemma inj_imp_finite *)
let inj_imp_finite = section_proof ["f"]
`FINITE t /\ INJ f s t ==> FINITE s`
[
   ((((use_arg_then "INJ")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["fin_t"])) THEN (case THEN (move ["f_in"])) THEN (move ["inj"]));
   ((((fun arg_tac -> (use_arg_then "FINITE_IMAGE_INJ_EQ") (fun fst_arg -> (use_arg_then "inj") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "FINITE_SUBSET") (fun fst_arg -> (use_arg_then "fin_t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))));
   ((BETA_TAC THEN (move ["y"]) THEN (case THEN (move ["x"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["xs"])) THEN (((use_arg_then "f_in") (disch_tac [])) THEN (clear_assumption "f_in") THEN (exact_tac)) THEN (done_tac));
];;

(* Lemma bij_finite_eq *)
let bij_finite_eq = section_proof ["f"]
`BIJ f s t ==> (FINITE s <=> FINITE t)`
[
   (((((use_arg_then "BIJ")(thm_tac (new_rewrite [] [])))) THEN (move ["bij"])) THEN ((THENL) (split_tac) [(move ["fin_s"]); (move ["fin_t"])]));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "surj_imp_finite") (fun fst_arg -> (use_arg_then "fin_s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "f") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "inj_imp_finite") (fun fst_arg -> (use_arg_then "fin_t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "f") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma surj_imp_card_le *)
let surj_imp_card_le = section_proof ["f"]
`FINITE s /\ SURJ f s t ==> CARD t <= CARD s`
[
   ((BETA_TAC THEN (case THEN (move ["fin_s"])) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "surj_image") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((use_arg_then "CARD_IMAGE_LE") (thm_tac apply_tac)) THEN (done_tac));
];;

(* Lemma inj_imp_card_le *)
let inj_imp_card_le = section_proof ["f"]
`FINITE t /\ INJ f s t ==> CARD s <= CARD t`
[
   ((BETA_TAC THEN (case THEN (move ["fin_t"])) THEN (move ["inj"])) THEN (((use_arg_then "inj") (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "INJ")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["f_in"])) THEN (move ["inj2"])));
   ((((fun arg_tac -> (use_arg_then "CARD_IMAGE_INJ") (fun fst_arg -> (use_arg_then "inj2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((fun arg_tac -> (use_arg_then "inj_imp_finite") (fun fst_arg -> (use_arg_then "inj") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((((use_arg_then "CARD_SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "fin_t")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN (move ["y"]) THEN (case THEN (move ["x"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["xs"])) THEN (((use_arg_then "f_in") (disch_tac [])) THEN (clear_assumption "f_in") THEN (exact_tac)) THEN (done_tac));
];;

(* Lemma bij_card_eq *)
let bij_card_eq = section_proof ["f"]
`BIJ f s t /\ FINITE s ==> CARD t = CARD s`
[
   (((((use_arg_then "BIJ")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN ALL_TAC) THEN (case THEN ((move ["inj"]) THEN (move ["surj"]))) THEN (move ["fin_s"])) THEN (((use_arg_then "anti_leq") (disch_tac [])) THEN (clear_assumption "anti_leq") THEN (DISCH_THEN apply_tac)));
   (((((fun arg_tac -> (use_arg_then "surj_imp_card_le") (fun fst_arg -> (use_arg_then "surj") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((fun arg_tac -> (use_arg_then "inj_imp_card_le") (fun fst_arg -> (use_arg_then "inj") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((fun arg_tac -> (use_arg_then "surj_imp_finite") (fun fst_arg -> (use_arg_then "surj") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(add_section_hyp "fin_s" (`FINITE s`));;
(add_section_hyp "fin_t" (`FINITE t`));;
(add_section_hyp "card_eq" (`CARD s = CARD t`));;

(* Lemma finite_inj_eq_surj *)
let finite_inj_eq_surj = section_proof ["f"]
`INJ f s t <=> SURJ f s t`
[
   (((((use_arg_then "INJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SURJ")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "andb_id2l") (disch_tac [])) THEN (clear_assumption "andb_id2l") THEN (DISCH_THEN apply_tac) THEN (move ["f_in"])));
   ((((use_arg_then "SURJECTIVE_IFF_INJECTIVE_GEN")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "fin_s")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "fin_t")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "card_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN (move ["y"]) THEN (case THEN (move ["x"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["xs"])) THEN (((use_arg_then "f_in") (disch_tac [])) THEN (clear_assumption "f_in") THEN (exact_tac)) THEN (done_tac));
];;

(* Lemma finite_inj_eq_bij *)
let finite_inj_eq_bij = section_proof ["f"]
`INJ f s t <=> BIJ f s t`
[
   (((((use_arg_then "BIJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "finite_inj_eq_surj")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbb")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma finite_surj_eq_bij *)
let finite_surj_eq_bij = section_proof ["f"]
`SURJ f s t <=> BIJ f s t`
[
   (((((use_arg_then "BIJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "finite_inj_eq_surj")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbb")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section FiniteBijections *)
let permutes_imp_bij = finalize_theorem permutes_imp_bij;;
let surj_image = finalize_theorem surj_image;;
let surj_imp_finite = finalize_theorem surj_imp_finite;;
let inj_imp_finite = finalize_theorem inj_imp_finite;;
let bij_finite_eq = finalize_theorem bij_finite_eq;;
let surj_imp_card_le = finalize_theorem surj_imp_card_le;;
let inj_imp_card_le = finalize_theorem inj_imp_card_le;;
let bij_card_eq = finalize_theorem bij_card_eq;;
let finite_inj_eq_surj = finalize_theorem finite_inj_eq_surj;;
let finite_inj_eq_bij = finalize_theorem finite_inj_eq_bij;;
let finite_surj_eq_bij = finalize_theorem finite_surj_eq_bij;;
end_section "FiniteBijections";;

(* Section MoreSortedReal *)
begin_section "MoreSortedReal";;

(* Lemma real_sorted_lt2 *)
let real_sorted_lt2 = section_proof ["l";"l'";"s";"s'";"r"]
`sorted (<=) s l /\ sorted (<=) s' l' /\ sizel l' = sizel l /\
        r < sizel l /\ EL r l < EL r l' /\
        (!i. i < sizel l /\ EL i l <= EL r l ==> EL i l <= EL i l') /\
        (!i. i < sizel l /\ EL r l < EL i l ==> EL r l < EL i l') ==>
        ?k. k < sizel l /\ (!i. i < k ==> EL i s = EL i s') /\ EL k s < EL k s'`
[
   (BETA_TAC THEN (case THEN (move ["sort_s"])) THEN (case THEN (move ["sort_s'"])) THEN (case THEN (move ["size_eq"])) THEN (case THEN (move ["r_lt"])) THEN (case THEN (move ["el_r_lt"])) THEN (case THEN (move ["el_le"])) THEN (move ["el_gt"]));
   ((((use_arg_then "sort_s'") (disch_tac [])) THEN ((use_arg_then "sort_s") (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then "sorted")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ((move ["ord_s"]) THEN (move ["perm_s"]))) THEN (case THEN ((move ["ord_s'"]) THEN (move ["perm_s'"])))));
   (((fun arg_tac -> arg_tac (Arg_term (`sizel l`))) (term_tac (set_tac "n"))) THEN ((fun arg_tac -> arg_tac (Arg_term (`EL r l`))) (term_tac (set_tac "u"))));
   ((fun arg_tac -> arg_tac (Arg_term (`mkseq (\i. if EL i l <= u then EL i l else u) n`))) (term_tac (set_tac "m")));
   ((fun arg_tac -> arg_tac (Arg_term (`merge_sort (<=) m`))) (term_tac (set_tac "t")));
   ((((fun arg_tac -> (use_arg_then "real_merge_sort") (fun fst_arg -> (use_arg_then "m") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "t_def")(thm_tac (new_rewrite [] [])))) THEN (move ["sort_t"])));
   ((fun arg_tac -> arg_tac (Arg_term (`sizel t = n /\ sizel m = n /\ sizel s' = n /\ sizel l' = n /\ sizel s = n`))) (term_tac (have_gen_tac [](move ["sizes"]))));
   (((((fun arg_tac -> (use_arg_then "sorted_size") (fun fst_arg -> (use_arg_then "sort_t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "sorted_size") (fun fst_arg -> (use_arg_then "sort_s'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "sorted_size") (fun fst_arg -> (use_arg_then "sort_s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "m_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "real_sorted_lt") (fun fst_arg -> (use_arg_then "sort_t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "sort_s'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN (ANTS_TAC));
   ((THENL_ROT (-1)) (((repeat_tactic 1 9 (((use_arg_then "sizes")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (split_tac)));
   (((use_arg_then "r") (term_tac exists_tac)) THEN ((((use_arg_then "r_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "m_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "EL_mkseq")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))));
   (((((use_arg_then "u_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((BETA_TAC THEN (move ["i"]) THEN (move ["i_lt"])) THEN ((((use_arg_then "m_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "EL_mkseq")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`EL i l <= u`))) (disch_eq_tac "neq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) ((((use_arg_then "el_le") (disch_tac [])) THEN (clear_assumption "el_le") THEN (exact_tac)) THEN (done_tac)));
   (((((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "el_gt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LE")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((((use_arg_then "sizes")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["k"])) THEN (case THEN (move ["k_lt"])) THEN (case THEN (move ["el_eq"])) THEN (move ["el_k_lt"]));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then "perm_eq_filter") (fun fst_arg -> (use_arg_then "perm_s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`\x. x <= u`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["perm_l0"])));
   ((fun arg_tac -> arg_tac (Arg_term (`\x. x <= u`))) (term_tac (set_tac "a")));
   ((fun arg_tac -> arg_tac (Arg_term (`filter a l`))) (term_tac (set_tac "l0")));
   ((fun arg_tac -> arg_tac (Arg_term (`sizel l0`))) (term_tac (set_tac "n0")));
   ((fun arg_tac -> arg_tac (Arg_term (`n0 <= n:num`))) (term_tac (have_gen_tac [](move ["n0_le"]))));
   (((((use_arg_then "n0_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "l0_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "count_filter")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "n_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "count_size")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`filter a s = take n0 s`))) (term_tac (have_gen_tac [](move ["take_eq"]))));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "ordered_cat_filter") (fun fst_arg -> (use_arg_then "ord_s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "u") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN (fun snd_th -> (fun arg_tac -> (use_arg_then "f_equal") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`take n0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "a_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "take_size_cat")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "count_filter")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then "iffLR") (fun fst_arg -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "perm_eqP") (fun fst_arg -> (use_arg_then "s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "l") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "perm_s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "count_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "l0_def")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`perm_eq l (l0 ++ filter (predC a) l)`))) (term_tac (have_gen_tac []ALL_TAC)));
   (((((use_arg_then "perm_eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "l0_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "perm_filterC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "perm_eq_refl")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((DISCH_THEN (fun snd_th -> (fun arg_tac -> (use_arg_then "perm_eq_bij") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN ((((use_arg_then "n_def")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["p"])) THEN (case THEN (move ["p_perm"])) THEN (move ["nth_eq"])));
   ((fun arg_tac -> arg_tac (Arg_term (` i < n ==> p i < n:num`))) (term_tac (have_gen_tac ["i"](move ["p_lt"]))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "PERMUTES_IN_IMAGE") (fun fst_arg -> (use_arg_then "p_perm") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "i") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "leq0n")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`take n0 s = take n0 t`))) (term_tac (have_gen_tac [](move ["st_eq"]))));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`perm_eq m (l0 ++ nseq (n - n0) u)`))) (term_tac (have_gen_tac [](move ["perm_m"])))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "ordered_cat_filter") (fun fst_arg -> (use_arg_then "ord_s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "u") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "sort_t") (disch_tac [])) THEN (clear_assumption "sort_t") THEN BETA_TAC) THEN ((((use_arg_then "sorted")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN ((move ["ord_t"]) THEN (move ["perm_t"])))));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`t = filter a s ++ nseq (n - n0) u`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))));
   (((repeat_tactic 1 9 (((use_arg_then "take_size_cat")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "take_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_takel")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`_1 ++ _2`))) (term_tac (set_tac "t2"))) THEN ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "ordered_eq") (fun fst_arg -> (use_arg_then "ord_t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "t2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))));
   (((THENL) (split_tac) [((move ["x"]) THEN (move ["y"])); ALL_TAC]) THEN ((repeat_tactic 0 10 (((use_arg_then "REAL_LE_ANTISYM")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "t2_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (split_tac));
   (((use_arg_then "perm_eq_trans") (thm_tac apply_tac)) THEN ((use_arg_then "m") (term_tac exists_tac)) THEN ((((use_arg_then "perm_t")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (use_arg_then "perm_eq_trans") (fun fst_arg -> (use_arg_then "perm_m") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "perm_eq_cat")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "perm_eq_refl")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "perm_eq_sym")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "ordered_cat")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ordered_filter")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "ordered_real_nseq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "allP")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (simp_tac));
   (((((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "mem_nseq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "perm_eq_permutesP") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_cat")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_nseq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sizes")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "subnKC") (fun fst_arg -> (use_arg_then "n0_le") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   (((use_arg_then "p") (term_tac exists_tac)) THEN (((((use_arg_then "p_perm")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"])) THEN (((fun arg_tac -> (use_arg_then "nth_eq") (fun fst_arg -> (use_arg_then "i_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC));
   (((fun arg_tac -> arg_tac (Arg_term (`i < n0:num`))) (disch_eq_tac "i_n0" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   (((repeat_tactic 1 9 (((use_arg_then "nth_cat")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "n0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_n0")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then "COND_CLAUSES")(thm_tac (new_rewrite [] [])))))) THEN (move ["eq"]));
   ((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "m_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "p_lt")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)) THEN (((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "n_def")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "p_lt")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "i_n0") (disch_tac [])) THEN (clear_assumption "i_n0") THEN BETA_TAC) THEN ((((use_arg_then "n0_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN (fun snd_th -> (fun arg_tac -> (use_arg_then "mem_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC))))));
   (((((use_arg_then "l0_def")(gsym_then (thm_tac (new_rewrite [2] []))))) THEN (((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (done_tac));
   ((repeat_tactic 1 9 (((use_arg_then "nth_cat")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "n0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_n0")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then "COND_CLAUSES")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "nth_nseq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ltn_sub2r")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((use_arg_then "n0_le") (disch_tac [])) THEN (clear_assumption "n0_le") THEN ((use_arg_then "i_n0") (disch_tac [])) THEN (clear_assumption "i_n0") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "m_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "p_lt")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "n_def")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "p_lt")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (move ["eq"]));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "mem_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`i - n0:num`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`filter (predC a) l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "count_filter")(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "count_predC") (fun fst_arg -> (use_arg_then "a") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "l") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "count_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "l0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n_def")(thm_tac (new_rewrite [] []))))));
   (((((fun arg_tac -> arg_tac (Arg_theorem (ARITH_RULE `!x. n0 <= n:num ==> (n0 + x = n <=> x = n - n0)`)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) ((((use_arg_then "ltn_sub2r")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) ((((use_arg_then "n0_le") (disch_tac [])) THEN (clear_assumption "n0_le") THEN ((use_arg_then "i_n0") (disch_tac [])) THEN (clear_assumption "i_n0") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "predC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (done_tac));
   (((use_arg_then "k") (term_tac exists_tac)) THEN ((((use_arg_then "k_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`k < n0:num`))) (term_tac (have_gen_tac [](move ["k_lt_n0"])))));
   (((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "EL_take") (fun fst_arg -> (use_arg_then "n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "st_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EL_take")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "el_k_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["i_lt"]));
   (((((fun arg_tac -> (fun arg_tac -> (use_arg_then "EL_take") (fun fst_arg -> (use_arg_then "n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((fun arg_tac -> (fun arg_tac -> (use_arg_then "EL_take") (fun fst_arg -> (use_arg_then "n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "s'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "st_eq")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "EL_take")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] [])))))) THEN (TRY (((((use_arg_then "k_lt") (disch_tac [])) THEN (clear_assumption "k_lt") THEN ((use_arg_then "k_lt_n0") (disch_tac [])) THEN (clear_assumption "k_lt_n0") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac)))));
   ((((use_arg_then "el_eq")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (move ["n0_le_k"])));
   ((fun arg_tac -> arg_tac (Arg_term (`count (predC a) s' <= n - n0`))) (term_tac (have_gen_tac []ALL_TAC)));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "cat_take_drop") (fun fst_arg -> (use_arg_then "n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "s'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "count_cat")(thm_tac (new_rewrite [] [])))));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`count (predC a) (take n0 s') = 0`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))));
   ((((use_arg_then "add0n")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leq_trans") (disch_tac [])) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`sizel (dropl n0 s')`))) (term_tac exists_tac)));
   (((((use_arg_then "count_size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_drop")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sizes")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leqnn")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "count0")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "predC")(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "ETA_AX")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "all_EL_P")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_takel")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (move ["i"]) THEN (move ["i_lt"]));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`i < n:num /\ i < k`))) (term_tac (have_gen_tac [](move ["i_lt2"])))) ((((use_arg_then "n0_le_k") (disch_tac [])) THEN (clear_assumption "n0_le_k") THEN ((use_arg_then "n0_le") (disch_tac [])) THEN (clear_assumption "n0_le") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((use_arg_then "EL_take")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "el_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((fun arg_tac -> (use_arg_then "EL_take") (fun fst_arg -> (use_arg_then "n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "st_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "EL_take")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`EL i s <- filter a s`))) (term_tac (have_gen_tac []ALL_TAC)))) (((((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   (((((use_arg_then "take_eq")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "EL_take") (fun fst_arg -> (use_arg_then "n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_takel")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`count (predC a) l' >= (n - n0) + 1`))) (term_tac (have_gen_tac []ALL_TAC))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "iffLR") (fun fst_arg -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "perm_eqP") (fun fst_arg -> (use_arg_then "s'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "l'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "perm_s'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "REAL_OF_NUM_GE")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "count_eq_list_sum_iota") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> (use_arg_then "permutes_imp_perm_eq_iota") (fun fst_arg -> (use_arg_then "p_perm") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((THENL_FIRST) ((((fun arg_tac -> arg_tac (Arg_theorem (ARITH_RULE `0 < n ==> n - 1 + 1 = n`)))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] [])))))) ((((use_arg_then "k_lt") (disch_tac [])) THEN (clear_assumption "k_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((DISCH_THEN (fun snd_th -> (use_arg_then "list_sum_perm_eq") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (use_arg_then "list_sum_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "subnKC") (fun fst_arg -> (use_arg_then "n0_le") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "iota_add")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "list_sum_cat")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "add0n")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`list_sum _1 _2`))) (term_tac (set_tac "s1"))) THEN ((fun arg_tac -> arg_tac (Arg_term (`list_sum _1 _2`))) (term_tac (set_tac "s2"))));
   ((fun arg_tac -> arg_tac (Arg_term (`sizel (filter (predC a) l) = n - n0`))) (term_tac (have_gen_tac [](move ["C_size"]))));
   ((((use_arg_then "count_filter")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then "count_predC") (fun fst_arg -> (use_arg_then "a") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "l") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC));
   (((((use_arg_then "count_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "l0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n_def")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "n0_le") (disch_tac [])) THEN (clear_assumption "n0_le") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`s2 = &(n - n0)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((((use_arg_then "C_size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "count_predT")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "count_eq_list_sum_iota") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "C_size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "predT")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "s2_def")(gsym_then (thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then "list_sum_nth_eq") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac apply_tac));
   (((repeat_tactic 1 9 (((use_arg_then "size_iota")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"]));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`n0 + i < n:num`))) (term_tac (have_gen_tac [](move ["n0i"])))) ((((use_arg_then "n0_le") (disch_tac [])) THEN (clear_assumption "n0_le") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((use_arg_then "nth_iota")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   ((((fun arg_tac -> (use_arg_then "nth_eq") (fun fst_arg -> (use_arg_then "n0i") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "nth_cat")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n0_def")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (ARITH_RULE `~(n0 + i < n0:num)`)))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "addKn")(thm_tac (new_rewrite [] []))))) THEN (move ["eq"])));
   (((fun arg_tac -> (use_arg_then "el_gt") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`p (n0 + i:num)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   (((((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "sizes")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "p_lt")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "predC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "REAL_NOT_LE")(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "mem_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`filter (predC a) l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "i") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "C_size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   ((((((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "n_def")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "p_lt")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "predC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "REAL_NOT_LE")(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`s1 >= &1`))) (term_tac (have_gen_tac []ALL_TAC))));
   (((((use_arg_then "REAL_OF_NUM_ADD")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "REAL_OF_NUM_SUB") (fun fst_arg -> (use_arg_then "n0_le") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (arith_tac) THEN (done_tac));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`?i:num. p i = r /\ i < n0`))) (term_tac (have_gen_tac []ALL_TAC))));
   (BETA_TAC THEN (case THEN (move ["i"])) THEN (case THEN ((move ["pi_eq"]) THEN (move ["i_lt"]))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "count_uniq_mem") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`iota 0 n0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "i") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "iota_uniq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "mem_iota")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leq0n")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "add0n")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   ((BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((((fun arg_tac -> (use_arg_then "count_eq_list_sum_iota") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_iota")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "real_ge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "s1_def")(gsym_then (thm_tac (new_rewrite [] [])))))));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "list_sum_nth_le2") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac apply_tac)) THEN (((((use_arg_then "size_iota")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["j"]) THEN (move ["j_lt"])));
   ((repeat_tactic 1 9 (((use_arg_then "nth_iota")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "add0n")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "pred1")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((THENL_LAST) (((fun arg_tac -> arg_tac (Arg_term (`j = i`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) ((arith_tac) THEN (done_tac)));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`i < n:num`))) (term_tac (have_gen_tac [](move ["i_lt_n"])))) ((((use_arg_then "n0_le") (disch_tac [])) THEN (clear_assumption "n0_le") THEN ((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "nth_mkseq")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "pi_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "predC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_NOT_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "el_r_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "PERMUTES_SURJECTIVE") (fun fst_arg -> (use_arg_then "p_perm") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "r") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["i"])) THEN (move ["pi_eq"]));
   (((use_arg_then "i") (term_tac exists_tac)) THEN ((((use_arg_then "pi_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (move ["n0_le_i"])));
   ((fun arg_tac -> arg_tac (Arg_term (`i < n:num`))) (term_tac (have_gen_tac [](move ["i_lt"]))));
   (((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac) THEN (move ["not_lt"]));
   ((((use_arg_then "p_perm") (disch_tac [])) THEN (clear_assumption "p_perm") THEN BETA_TAC) THEN ((((use_arg_then "permutes")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN ((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then "i") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)))));
   ((THENL_FIRST) (((((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leq0n")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "NOT_LE")(thm_tac (new_rewrite [] []))))) THEN (ANTS_TAC)) ((((use_arg_then "r_lt") (disch_tac [])) THEN (clear_assumption "r_lt") THEN ((use_arg_then "not_lt") (disch_tac [])) THEN (clear_assumption "not_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "pi_eq")(thm_tac (new_rewrite [] [])))) THEN (move ["eq"])) THEN (((use_arg_then "not_lt") (disch_tac [])) THEN (clear_assumption "not_lt") THEN BETA_TAC) THEN ((((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "r_lt")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "nth_eq") (fun fst_arg -> (use_arg_then "i_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "pi_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "n_def")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "u_def")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "nth_cat")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n0_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_LE")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "n0_le_i")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "mem_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`filter (predC a) l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`i - n0:num`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC));
   ((((use_arg_then "C_size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_lt") (disch_tac [])) THEN (clear_assumption "i_lt") THEN ((use_arg_then "n0_le_i") (disch_tac [])) THEN (clear_assumption "n0_le_i") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] []))))));
   (((((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "predC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section MoreSortedReal *)
let real_sorted_lt2 = finalize_theorem real_sorted_lt2;;
end_section "MoreSortedReal";;

(* Section SomeResults *)
begin_section "SomeResults";;

(* Lemma packing_empty *)
let packing_empty = section_proof []
`packing {}`
[
   (((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL Sphere.packing_lt)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma in_ball_annulus *)
let in_ball_annulus = section_proof ["v"]
`v IN ball_annulus <=> &2 <= norm v /\ norm v <= &2 * h0`
[
   ((((use_arg_then "Pack_defs.ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_CBALL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_BALL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist")(thm_tac (new_rewrite [] [])))));
   (((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL VECTOR_SUB_RZERO)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CONJ_SYM")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma closed_ball_annulus *)
let closed_ball_annulus = section_proof []
`closed ball_annulus`
[
   (((((use_arg_then "Pack_defs.ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CLOSED_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "OPEN_BALL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CLOSED_CBALL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma finite_packing_ball_annulus *)
let finite_packing_ball_annulus = section_proof ["V"]
`packing V /\ V SUBSET ball_annulus ==> FINITE V`
[
   (BETA_TAC THEN (case THEN ((move ["pack"]) THEN (move ["subV"]))));
   ((fun arg_tac -> arg_tac (Arg_term (`?r. V SUBSET ball(vec 0, r)`))) (term_tac (have_gen_tac [](case THEN (move ["r"])))));
   (((fun arg_tac -> arg_tac (Arg_term (`&5`))) (term_tac exists_tac)) THEN (((use_arg_then "subV") (disch_tac [])) THEN (clear_assumption "subV") THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Pack_defs.ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_CBALL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_BALL")(thm_tac (new_rewrite [] [])))))));
   ((BETA_TAC THEN (move ["h"]) THEN (move ["x"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "h") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (((use_arg_then "Pack_defs.h0")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "SUBSET_INTER_ABSORPTION")(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] []))))));
   (((use_arg_then "Packing3.KIUMVTC") (disch_tac [])) THEN (clear_assumption "Packing3.KIUMVTC") THEN (exact_tac));
];;

(* Lemma ECTC_sub_ESTD *)
let ECTC_sub_ESTD = section_proof ["V"]
`ECTC V SUBSET ESTD V`
[
   (((((use_arg_then "ECTC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ESTD")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (move ["x"]) THEN (case THEN (move ["v"])) THEN (case THEN (move ["w"])) THEN (case THEN (move ["h"])) THEN (move ["x_eq"]));
   ((((use_arg_then "v") (term_tac exists_tac)) THEN ((use_arg_then "w") (term_tac exists_tac))) THEN ((((use_arg_then "x_eq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "h")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma in_set_of_edge_ECTC *)
let in_set_of_edge_ECTC = section_proof ["V";"v"]
`v IN V ==> (!u. u IN set_of_edge v V (ECTC V) <=> u IN V /\ dist (u, v) = &2)`
[
   (((((use_arg_then "set_of_edge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ECTC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["vV"]) THEN (move ["u"]));
   ((THENL_ROT (-1)) (((THENL) (split_tac) [((case THEN ALL_TAC) THEN (case THEN (move ["x"])) THEN (case THEN (move ["y"])) THEN (case THEN (move ["h"])) THEN (move ["eq"]) THEN (move ["uV"])); (case THEN ((move ["uV"]) THEN (move ["d_eq"])))]) THEN ((((use_arg_then "uV")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac ->(use_arg_then "andTb")(fun tmp_arg1 -> (use_arg_then "andbT")(fun tmp_arg2 -> arg_tac (Arg_theorem (CONJ (get_arg_thm tmp_arg1) (get_arg_thm tmp_arg2))))))(thm_tac (new_rewrite [] [])))))));
   ((THENL_LAST) ((((use_arg_then "v") (term_tac exists_tac)) THEN ((use_arg_then "u") (term_tac exists_tac))) THEN (repeat_tactic 1 9 (((split_tac) THEN ((TRY done_tac)))))) ((((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((((use_arg_then "d_eq") (disch_tac [])) THEN (clear_assumption "d_eq") THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "DIST_REFL")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   (in_tac ["eq"] false (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL Collect_geom.PAIR_EQ_EXPAND)))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "eq") (disch_tac [])) THEN (clear_assumption "eq") THEN BETA_TAC THEN (case THEN ALL_TAC) THEN (case THEN ((((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac))) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma vector_eq_neg *)
let vector_eq_neg = section_proof ["v"]
`(v:real^N = --v) <=> (v = vec 0)`
[
   (VECTOR_ARITH_TAC);
];;

(* Lemma bij_scriptL *)
let bij_scriptL = section_proof ["f";"V";"W"]
`BIJ f V W /\ (!v. v IN V ==> norm v = norm (f v)) ==>
        scriptL W = scriptL V`
[
   (((((use_arg_then "BIJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "INJ")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (case THEN ((case THEN ((move ["_"]) THEN (move ["inj_f"]))) THEN (move ["surj_f"])))) THEN (move ["norm_eq"]));
   ((repeat_tactic 1 9 (((use_arg_then "Tame_defs.scriptL")(thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "surj_image") (fun fst_arg -> (use_arg_then "surj_f") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_IMAGE")(thm_tac (new_rewrite [] [])))));
   ((BETA_TAC THEN (move ["x"]) THEN (move ["y"]) THEN (case THEN (move ["x_in"])) THEN (case THEN (move ["y_in"])) THEN (move ["f_eq"])) THEN (((use_arg_then "inj_f") (disch_tac [])) THEN (clear_assumption "inj_f") THEN (DISCH_THEN apply_tac)) THEN (done_tac));
   ((((use_arg_then "SUM_EQ") (thm_tac apply_tac)) THEN (move ["v"]) THEN (move ["v_in"]) THEN (simp_tac)) THEN ((((use_arg_then "o_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "norm_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma lmfun_ge0 *)
let lmfun_ge0 = section_proof ["h"]
`&0 <= lmfun h`
[
   (((((use_arg_then "Sphere.lmfun")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma lmfun_in_ball_annulus *)
let lmfun_in_ball_annulus = section_proof ["v"]
`v IN ball_annulus ==> lmfun (norm v / &2) <= &1`
[
   (((((use_arg_then "in_ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.lmfun")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma scriptL_le_card *)
let scriptL_le_card = section_proof ["V"]
`packing V /\ V SUBSET ball_annulus ==> scriptL V <= &(CARD V)`
[
   ((BETA_TAC THEN (case THEN ((move ["packV"]) THEN (move ["subV"])))) THEN (((fun arg_tac -> (use_arg_then "REAL_MUL_RID") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&(CARD V)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))));
   (((((use_arg_then "Tame_defs.scriptL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUM_BOUND")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "finite_packing_ball_annulus")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["v"]) THEN (move ["vV"]) THEN (simp_tac));
   ((((use_arg_then "lmfun_in_ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "subV") (disch_tac [])) THEN (clear_assumption "subV") THEN BETA_TAC) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (DISCH_THEN apply_tac) THEN (done_tac));
];;

(* Lemma card_counterexample_ge13 *)
let card_counterexample_ge13 = section_proof ["V"]
`packing V /\ V SUBSET ball_annulus /\ scriptL V > &12
        ==> 13 <= CARD V`
[
   (BETA_TAC THEN (case THEN (move ["packV"])) THEN (case THEN (move ["subV"])));
   ((((use_arg_then "contraLR") (disch_tac [])) THEN (clear_assumption "contraLR") THEN (DISCH_THEN apply_tac)) THEN (((((use_arg_then "NOT_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "real_gt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LT")(thm_tac (new_rewrite [] []))))) THEN (move ["card_lt"])));
   ((((use_arg_then "REAL_LE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`&(CARD V)`))) (term_tac exists_tac)));
   (((((use_arg_then "scriptL_le_card")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_OF_NUM_LE")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "card_lt") (disch_tac [])) THEN (clear_assumption "card_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma piecewise_real_continuous *)
let piecewise_real_continuous = section_proof ["a";"b";"t";"f1";"f2";"f"]
`f1 real_continuous_on (real_interval [a,t]) /\ f2 real_continuous_on (real_interval [t,b]) /\
        f1 t = f2 t /\ f = (\x. if x <= t then f1 x else f2 x) ==>
        f real_continuous_on (real_interval [a,b])`
[
   (((repeat_tactic 1 9 (((use_arg_then "real_continuous_on")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_REAL_INTERVAL")(thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["f1_cont"])) THEN (case THEN (move ["f2_cont"])) THEN (case THEN (move ["f12_eq"])) THEN (move ["f_eq"]) THEN (move ["x"]) THEN (move ["e"]) THEN (case THEN ((move ["x_in"]) THEN (move ["e_gt0"]))));
   ((THENL) (((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `x < t \/ t < x \/ x = t`))) (disch_tac [])) THEN case) [(move ["h"]); ALL_TAC]);
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "f1_cont") (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> (use_arg_then "REAL_LT_IMP_LE") (fun fst_arg -> (use_arg_then "h") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "x_in")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))) THEN ALL_TAC THEN (case THEN (move ["d"])) THEN (case THEN (move ["d_gt0"])) THEN (move ["ineq"])));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`min d (t - x)`))) (term_tac exists_tac)) THEN (split_tac)) ((((use_arg_then "h") (disch_tac [])) THEN (clear_assumption "h") THEN ((use_arg_then "d_gt0") (disch_tac [])) THEN (clear_assumption "d_gt0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (BETA_TAC THEN (move ["y"]) THEN (case THEN ((move ["y_ineq"]) THEN (move ["xy_lt"]))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`y < t`))) (term_tac (have_gen_tac [](move ["y_lt"])))) ((((use_arg_then "h") (disch_tac [])) THEN (clear_assumption "h") THEN ((use_arg_then "xy_lt") (disch_tac [])) THEN (clear_assumption "xy_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "f_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then "ineq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "xy_lt") (disch_tac [])) THEN (clear_assumption "xy_lt") THEN ((use_arg_then "y_lt") (disch_tac [])) THEN (clear_assumption "y_lt") THEN ((use_arg_then "y_ineq") (disch_tac [])) THEN (clear_assumption "y_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (case THEN (move ["h"]));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "f2_cont") (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> (use_arg_then "REAL_LT_IMP_LE") (fun fst_arg -> (use_arg_then "h") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "x_in")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))) THEN ALL_TAC THEN (case THEN (move ["d"])) THEN (case THEN (move ["d_gt0"])) THEN (move ["ineq"])));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`min d (x - t)`))) (term_tac exists_tac)) THEN (split_tac)) ((((use_arg_then "h") (disch_tac [])) THEN (clear_assumption "h") THEN ((use_arg_then "d_gt0") (disch_tac [])) THEN (clear_assumption "d_gt0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (BETA_TAC THEN (move ["y"]) THEN (case THEN ((move ["y_ineq"]) THEN (move ["xy_lt"]))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`t < y`))) (term_tac (have_gen_tac [](move ["y_lt"])))) ((((use_arg_then "h") (disch_tac [])) THEN (clear_assumption "h") THEN ((use_arg_then "xy_lt") (disch_tac [])) THEN (clear_assumption "xy_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "f_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_NOT_LT")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then "y_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "h")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "ineq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "xy_lt") (disch_tac [])) THEN (clear_assumption "xy_lt") THEN ((use_arg_then "y_lt") (disch_tac [])) THEN (clear_assumption "y_lt") THEN ((use_arg_then "y_ineq") (disch_tac [])) THEN (clear_assumption "y_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "f2_cont") (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then "f1_cont") (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "h")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "x_in")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)));
   (BETA_TAC THEN (case THEN (move ["d1"])) THEN (case THEN (move ["d1_gt0"])) THEN (move ["ineq1"]) THEN (case THEN (move ["d2"])) THEN (case THEN (move ["d2_gt0"])) THEN (move ["ineq2"]));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`min d1 d2`))) (term_tac exists_tac)) THEN (split_tac)) ((((use_arg_then "d2_gt0") (disch_tac [])) THEN (clear_assumption "d2_gt0") THEN ((use_arg_then "d1_gt0") (disch_tac [])) THEN (clear_assumption "d1_gt0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (BETA_TAC THEN (move ["y"]) THEN (case THEN ((move ["y_ineq"]) THEN (move ["xy_lt"]))));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "REAL_LET_TOTAL") (fun fst_arg -> (use_arg_then "y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case THEN (move ["xy_ineq"]));
   (((((use_arg_then "f_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "h")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "xy_ineq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "ineq1")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "xy_ineq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "y_ineq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "xy_lt") (disch_tac [])) THEN (clear_assumption "xy_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "f_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "h")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LT")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "xy_ineq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "h")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "f12_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "h")(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "ineq2")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "xy_lt") (disch_tac [])) THEN (clear_assumption "xy_lt") THEN ((use_arg_then "y_ineq") (disch_tac [])) THEN (clear_assumption "y_ineq") THEN ((use_arg_then "xy_ineq") (disch_tac [])) THEN (clear_assumption "xy_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma piecewise_real_continuous_univ *)
let piecewise_real_continuous_univ = section_proof ["t";"f1";"f2";"f"]
`f1 real_continuous_on UNIV /\ f2 real_continuous_on UNIV /\ f1 t = f2 t /\
        f = (\x. if x <= t then f1 x else f2 x) ==>
        f real_continuous_on UNIV`
[
   (BETA_TAC THEN (case THEN (move ["f1_cont"])) THEN (case THEN (move ["f2_con"])) THEN (case THEN (move ["f12_eq"])) THEN (move ["f_eq"]));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`!a b. f real_continuous_on real_interval (a,b)`))) (term_tac (have_gen_tac [](move ["cont_int"])))));
   (((((use_arg_then "REAL_CONTINUOUS_ON_EQ_REAL_CONTINUOUS_AT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_OPEN_UNIV")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (move ["x"]) THEN (move ["_"]));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "cont_int") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`x - &1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`x + &1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   (((((use_arg_then "REAL_CONTINUOUS_ON_EQ_REAL_CONTINUOUS_AT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_OPEN_REAL_INTERVAL")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (DISCH_THEN apply_tac));
   ((((use_arg_then "IN_REAL_INTERVAL")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((BETA_TAC THEN (move ["a"]) THEN (move ["b"])) THEN (((use_arg_then "REAL_CONTINUOUS_ON_SUBSET") (disch_tac [])) THEN (clear_assumption "REAL_CONTINUOUS_ON_SUBSET") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`real_interval [a,b]`))) (term_tac exists_tac)));
   ((((use_arg_then "REAL_INTERVAL_OPEN_SUBSET_CLOSED")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then "piecewise_real_continuous") (fun fst_arg -> (use_arg_then "f_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "f12_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   ((split_tac) THEN ((((fun arg_tac -> (use_arg_then "REAL_CONTINUOUS_ON_SUBSET") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`(:real)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET_UNIV")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma lmfun_continuous *)
let lmfun_continuous = section_proof []
`lmfun real_continuous_on UNIV`
[
   ((fun arg_tac -> arg_tac (Arg_term (`lmfun = (\x. if x <= h0 then (h0 - x) / (h0 - &1) else &0)`))) (term_tac (have_gen_tac [](move ["eq"]))));
   (((((use_arg_then "eq_ext")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Sphere.lmfun")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_ROT (1)) ((((fun arg_tac -> (use_arg_then "piecewise_real_continuous_univ") (fun fst_arg -> (use_arg_then "eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (split_tac)));
   ((((use_arg_then "REAL_CONTINUOUS_ON_CONST")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_CONTINUOUS_ON_RMUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_CONTINUOUS_ON_SUB")(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "REAL_CONTINUOUS_ON_ID")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_CONTINUOUS_ON_CONST")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma lmfun_norm2_continuous *)
let lmfun_norm2_continuous = section_proof []
`lift o (\v:real^N. lmfun (norm v / &2)) continuous_on UNIV`
[
   ((((use_arg_then "CONTINUOUS_AT_IMP_CONTINUOUS_ON")(thm_tac (new_rewrite [] [])))) THEN (move ["x"]) THEN (move ["_"]));
   (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] [])))));
   ((fun arg_tac -> arg_tac (Arg_term (`(\v. lmfun (norm v / &2)) = lmfun o (\v:real^N. norm v / &2)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then "eq_ext")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "REAL_CONTINUOUS_AT_COMPOSE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "REAL_CONTINUOUS_RMUL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_CONTINUOUS_NORM_AT")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))));
   (((use_arg_then "REAL_CONTINUOUS_ATREAL_WITHINREAL")(thm_tac (new_rewrite [] []))));
   ((((use_arg_then "lmfun_continuous") (disch_tac [])) THEN (clear_assumption "lmfun_continuous") THEN BETA_TAC) THEN ((((use_arg_then "REAL_CONTINUOUS_ON_EQ_REAL_CONTINUOUS_AT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_OPEN_UNIV")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))));
   ((DISCH_THEN apply_tac) THEN (((use_arg_then "IN_UNIV")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma simple_card_inequality *)
let simple_card_inequality = section_proof ["r";"s";"t"]
`measurable s /\
        pairwise DISJOINT t /\ &0 < r /\
        (!x. x IN t ==> measurable x /\ r <= measure x /\ x SUBSET s) ==>
        FINITE t /\ &(CARD t) <= floor (measure s / r)`
[
   (BETA_TAC THEN (case THEN (move ["vol_s"])) THEN (case THEN (move ["disjoint"])) THEN (case THEN (move ["r_gt0"])) THEN (move ["in_t"]));
   ((fun arg_tac -> arg_tac (Arg_term (`!b. b SUBSET t /\ FINITE b ==> r * &(CARD b) <= measure (UNIONS b)`))) (term_tac (have_gen_tac [](move ["ineq"]))));
   ((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (move ["b"]) THEN (case THEN ((move ["b_sub"]) THEN (move ["fin_b"]))));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "HAS_MEASURE_DISJOINT_UNIONS") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`\x. measure x`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "fin_b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((repeat_tactic 1 9 (((use_arg_then "HAS_MEASURE_MEASURABLE_MEASURE")(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) ((THENL) (split_tac) [((move ["y"]) THEN (move ["yb"])); ((move ["x"]) THEN (move ["y"]) THEN (move ["in_b"]))]) (((((use_arg_then "in_t")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "b_sub")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((use_arg_then "disjoint") (disch_tac [])) THEN (clear_assumption "disjoint") THEN BETA_TAC) THEN (((use_arg_then "pairwise")(thm_tac (new_rewrite [] [])))) THEN (DISCH_THEN apply_tac) THEN ((((use_arg_then "in_b")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "b_sub")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((((use_arg_then "CARD_EQ_SUM")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "SUM_LMUL")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "fin_b")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "b_sub") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["xt"]) THEN (simp_tac));
   (((((use_arg_then "REAL_MUL_RID")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "in_t")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!b. b SUBSET t /\ FINITE b ==> measure (UNIONS b) <= measure s`))) (term_tac (have_gen_tac [](move ["ineq2"]))));
   ((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (move ["b"]) THEN (case THEN ((move ["b_sub"]) THEN (move ["fin_b"]))));
   ((((use_arg_then "MEASURE_SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "vol_s")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEASURABLE_UNIONS")(thm_tac (new_rewrite [] [])))));
   ((((((use_arg_then "fin_b")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "b_sub") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["xt"])) THEN (((use_arg_then "in_t")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((((((use_arg_then "UNIONS_SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "b_sub") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["xt"])) THEN (((use_arg_then "in_t")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`FINITE t`))) (term_tac (have_gen_tac [](move ["fin_t"]))));
   (((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac) THEN (move ["inf_t"]));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "REAL_ARCH") (fun fst_arg -> (use_arg_then "r_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`measure s`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["n"])) THEN (move ["ineq3"]));
   ((THENL_FIRST) ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "CHOOSE_SUBSET_STRONG") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "inf_t")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "HAS_SIZE")(thm_tac (new_rewrite [] []))))) THEN (ANTS_TAC)) ((ALL_TAC) THEN (done_tac)));
   (BETA_TAC THEN (case THEN (move ["b"])) THEN (case THEN (move ["b_sub"])) THEN (case THEN ((move ["fin_b"]) THEN (move ["card_b"]))));
   (((use_arg_then "ineq3") (disch_tac [])) THEN (clear_assumption "ineq3") THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then "ineq2") (fun fst_arg -> (use_arg_then "b_sub") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "fin_b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then "ineq") (fun fst_arg -> (use_arg_then "b_sub") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "fin_b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((((use_arg_then "card_b")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "fin_t")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "ineq2") (fun fst_arg -> (fun arg_tac -> (use_arg_then "SUBSET_REFL") (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "fin_t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then "ineq") (fun fst_arg -> (fun arg_tac -> (use_arg_then "SUBSET_REFL") (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "fin_t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((DISCH_THEN (fun snd_th -> (use_arg_then "REAL_LE_TRANS") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC THEN (move ["h"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "h") (thm_tac (match_mp_then snd_th MP_TAC)))));
   ((((((use_arg_then "REAL_MUL_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_RDIV_EQ")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "FLOOR_MONO") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (((use_arg_then "FLOOR_NUM")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma card_packing_ball_annulus *)
let card_packing_ball_annulus = section_proof ["V"]
`packing V /\ V SUBSET ball_annulus ==> CARD V <= 43`
[
   (BETA_TAC THEN (case THEN ((move ["pack"]) THEN (move ["subV"]))));
   ((fun arg_tac -> arg_tac (Arg_term (`IMAGE (\v. ball (v, &1)) V`))) (term_tac (set_tac "t")));
   (((fun arg_tac -> (use_arg_then "CARD_IMAGE_INJ") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`\v. ball (v,&1)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "finite_packing_ball_annulus")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (move ["y"]) THEN (case THEN (move ["xV"])) THEN (case THEN (move ["yV"])) THEN (simp_tac) THEN (move ["ball_eq"]));
   ((in_tac ["pack"] false (((use_arg_then "Sphere.packing_lt")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "pack") (disch_tac [])) THEN (clear_assumption "pack") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "yV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "xV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))))));
   ((((fun arg_tac -> (use_arg_then "ball_eq") (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "CENTRE_IN_BALL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_01")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "IN_BALL")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   (((use_arg_then "REAL_OF_NUM_LE")(gsym_then (thm_tac (new_rewrite [] [])))));
   ((fun arg_tac -> arg_tac (Arg_term (`&43 = floor (measure (ball (vec 0:real^3, #3.52)) / measure (ball (vec 0:real^3, &1)))`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((repeat_tactic 1 9 (((use_arg_then "VOLUME_BALL")(thm_tac (new_rewrite [] []))))) THEN (TRY ((arith_tac))));
   ((repeat_tactic 1 9 (((use_arg_then "REAL_MUL_ASSOC")(thm_tac (new_rewrite [] []))))) THEN ((fun arg_tac -> arg_tac (Arg_term (`_ * pi`))) (term_tac (set_tac "a"))));
   ((((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_INV_MUL")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!x y. (a * x) * inv a * y = (a * inv a) * x * y`)))(thm_tac (new_rewrite [] []))));
   ((THENL_FIRST) (((use_arg_then "REAL_MUL_RINV")(thm_tac (new_rewrite [] [])))) ((((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "PI_POS") (disch_tac [])) THEN (clear_assumption "PI_POS") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "FLOOR_UNIQUE")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "INTEGER_CLOSED")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "simple_card_inequality")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEASURABLE_BALL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (split_tac));
   (((((use_arg_then "pairwise")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "DISJOINT")(thm_tac (new_rewrite [] []))))) THEN (move ["x"]) THEN (move ["y"]) THEN (case THEN ALL_TAC) THEN (case THEN (move ["u"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["uV"]) THEN (case THEN ALL_TAC) THEN (case THEN (move ["v"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["vV"]));
   ((((use_arg_then "contraR") (disch_tac [])) THEN (clear_assumption "contraR") THEN (DISCH_THEN apply_tac)) THEN (((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_INTER")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_BALL")(thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["x"])) THEN (case THEN ((move ["du"]) THEN (move ["dv"])))));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`u = v`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) ((ALL_TAC) THEN (done_tac)));
   ((in_tac ["pack"] false (((use_arg_then "Sphere.packing_lt")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "pack") (disch_tac [])) THEN (clear_assumption "pack") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "uV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "vV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))))));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (use_arg_then "u") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((fun arg_tac -> (use_arg_then "DIST_SYM") (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dv") (disch_tac [])) THEN (clear_assumption "dv") THEN ((use_arg_then "du") (disch_tac [])) THEN (clear_assumption "du") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((THENL_FIRST) (split_tac) ((((use_arg_then "VOLUME_BALL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "PI_POS") (disch_tac [])) THEN (clear_assumption "PI_POS") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["x"]) THEN (case THEN (move ["v"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["vV"]));
   (((((use_arg_then "MEASURABLE_BALL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "VOLUME_BALL")(thm_tac (new_rewrite [] [])))))) THEN (TRY ((arith_tac))));
   (((((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_BALL")(thm_tac (new_rewrite [] [])))))) THEN (move ["x"]));
   (in_tac ["subV"] false ((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Pack_defs.ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_CBALL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (use_arg_then "subV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma SIN_NEG_PI_2PI *)
let SIN_NEG_PI_2PI = section_proof ["x"]
`pi <= x /\ x <= &2 * pi ==> sin x <= &0`
[
   (BETA_TAC THEN (move ["x_ineq"]));
   ((((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `x = (x - pi) + pi`)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SIN_PERIODIC_PI")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NEG_LE0")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "SIN_POS_PI_LE") (disch_tac [])) THEN (clear_assumption "SIN_POS_PI_LE") THEN (DISCH_THEN apply_tac)) THEN (((use_arg_then "x_ineq") (disch_tac [])) THEN (clear_assumption "x_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma not_surrounded_imp_on_one_side_of_plane *)
let not_surrounded_imp_on_one_side_of_plane = section_proof ["V";"E";"v"]
`FAN (vec 0,V,E) ==> v IN V ==> ~(set_of_edge v V E = {}) ==> ~(surrounded_node (V,E) v) ==>
        ?n. ~(n = vec 0) /\ v dot n = &0 /\ (!w. w IN set_of_edge v V E ==> w dot n <= &0)`
[
   ((((use_arg_then "surrounded_node")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_FORALL_THM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LT")(thm_tac (new_rewrite [] [])))));
   ((BETA_TAC THEN (move ["fan"]) THEN (move ["vV"]) THEN (move ["not_isolated"]) THEN (case THEN ALL_TAC) THEN (case THEN ((move ["v1"]) THEN (move ["w"]))) THEN (simp_tac) THEN (case THEN ((case THEN (move ["in_vw"])) THEN (move ["v1_eq"]) THEN (move ["ge_pi"])))) THEN (in_tac ["ge_pi"; "in_vw"] false (((use_arg_then "v1_eq")(thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> arg_tac (Arg_term (`v,w IN dart1_of_fan (V,E)`))) (term_tac (have_gen_tac [](move ["in1_vw"]))));
   ((((use_arg_then "in_vw") (disch_tac [])) THEN (clear_assumption "in_vw") THEN BETA_TAC) THEN ((((use_arg_then "dart1_of_fan")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dart_of_fan")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_UNION")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_ELIM_PAIR_THM")(thm_tac (new_rewrite [] []))))) THEN (case THEN ((TRY done_tac))));
   ((((((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ALL_TAC THEN (case THEN (move ["v'"])) THEN (case THEN (move ["h1"]))) THEN ((((use_arg_then "PAIR_EQ")(thm_tac (new_rewrite [] [])))) THEN (move ["eq"])));
   ((((use_arg_then "h1") (disch_tac [])) THEN (clear_assumption "h1") THEN BETA_TAC) THEN ((((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "not_isolated")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`v cross w`))) (term_tac exists_tac));
   (((((use_arg_then "DOT_CROSS_SELF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CROSS_EQ_0")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (split_tac));
   ((((fun arg_tac -> (use_arg_then "Hypermap_and_fan.DART1_NOT_COLLINEAR") (fun fst_arg -> (use_arg_then "fan") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN (done_tac));
   (BETA_TAC THEN (move ["w2"]) THEN (move ["in_w2"]));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`sin (azim (vec 0) v w w2) <= &0`))) (term_tac (have_gen_tac [](move ["sin_le0"])))));
   ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "Trigonometry.JBDNJJB") (fun fst_arg -> (use_arg_then "v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "w") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "w2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC));
   ((((use_arg_then "Trigonometry2.re_eqvl")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["t"])) THEN (case THEN (move ["t_gt0"])));
   ((DISCH_THEN (fun snd_th -> (fun arg_tac -> (use_arg_then "f_equal") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`real_mul (inv t)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC);
   ((THENL_FIRST) ((((use_arg_then "REAL_MUL_ASSOC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_LINV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_MUL_LID")(thm_tac (new_rewrite [] [])))))) ((((use_arg_then "t_gt0") (disch_tac [])) THEN (clear_assumption "t_gt0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((use_arg_then "DOT_SYM")(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "REAL_LE_NEG")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_NEG_0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NEG_RMUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_MUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NEG_GE0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sin_le0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "REAL_LE_INV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "t_gt0") (disch_tac [])) THEN (clear_assumption "t_gt0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((THENL) (((fun arg_tac -> (use_arg_then "EXCLUDED_MIDDLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`w = w2`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) [(((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] []))))); (move ["n_ww2"])]);
   (((((use_arg_then "AZIM_REFL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SIN_0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_LAST) ((((use_arg_then "SIN_NEG_PI_2PI") (disch_tac [])) THEN (clear_assumption "SIN_NEG_PI_2PI") THEN (DISCH_THEN apply_tac)) THEN (split_tac)) (((((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "azim")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then "REAL_LE_TRANS") (fun fst_arg -> (use_arg_then "ge_pi") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN (((use_arg_then "real_ge")(gsym_then (thm_tac (new_rewrite [] []))))));
   (((fun arg_tac -> (use_arg_then "Fatugpd.azim_ge_azim_dart") (fun fst_arg -> (use_arg_then "fan") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "Hypermap_and_fan.PAIR_IN_DART1_OF_FAN_IMP_NOT_EQ") (fun fst_arg -> (use_arg_then "fan") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "in1_vw") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n_ww2")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "vV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "in_w2")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "Hypermap_and_fan.PAIR_IN_DART1_OF_FAN") (fun fst_arg -> (use_arg_then "fan") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "in1_vw") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma perturbation_lemma *)
let perturbation_lemma = section_proof ["d";"S";"v";"n"]
`&0 < d /\ ~(n = vec 0) /\ v dot n = &0 /\ (!w. w IN S ==> w dot n <= &0 /\ &0 < w dot v) ==>
        ?v2. norm v2 = norm v /\ (!w. w IN S ==> dist (v, w) < dist (v2, w)) /\ dist (v, v2) < d`
[
   (BETA_TAC THEN (case THEN (move ["d_gt0"])) THEN (case THEN (move ["n_n0"])) THEN (case THEN (move ["vn0"])) THEN (move ["w_dot"]));
   ((THENL) (((fun arg_tac -> (use_arg_then "EXCLUDED_MIDDLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`S = {}`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (move ["nS"])]);
   (((use_arg_then "v") (term_tac exists_tac)) THEN ((((use_arg_then "DIST_REFL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "d_gt0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`~(v = vec 0)`))) (term_tac (have_gen_tac [](move ["v_n0"]))));
   ((((use_arg_then "nS") (disch_tac [])) THEN (clear_assumption "nS") THEN BETA_TAC) THEN ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["x"])) THEN (move ["xS"])));
   (((fun arg_tac -> (use_arg_then "w_dot") (fun fst_arg -> (use_arg_then "xS") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["_"])));
   ((((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then "DOT_RZERO")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`max (&0) (&1 - (d * d) / (&4 * (v dot v)))`))) (term_tac (set_tac "a")));
   ((fun arg_tac -> arg_tac (Arg_term (`sqrt ((v dot v) * (&1 - a * a) / (n dot n))`))) (term_tac (set_tac "b")));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 <= a /\ a < &1`))) (term_tac (have_gen_tac [](move ["a_ineq"]))));
   ((((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MAX_MAX")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MAX_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_01")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!x. &1 - x < &1 <=> &0 < x`)))(thm_tac (new_rewrite [] []))));
   (((((use_arg_then "REAL_LT_DIV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_LT_MUL")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "d_gt0")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "DOT_POS_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "v_n0")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`a % v + b % n`))) (term_tac exists_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 <= (v dot v) * (&1 - a * a) / (n dot n)`))) (term_tac (have_gen_tac [](move ["h1"]))));
   ((((use_arg_then "REAL_LE_MUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_DIV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DOT_POS_LE")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `&0 <= &1 - a * a <=> a * a <= &1`)))(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "REAL_POW_2")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "ABS_SQUARE_LE_1")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "a_ineq") (disch_tac [])) THEN (clear_assumption "a_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`b * b * (n dot n) = (&1 - a * a) * (v dot v)`))) (term_tac (have_gen_tac [](move ["bn_eq"]))));
   ((((use_arg_then "REAL_MUL_ASSOC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_POW_2")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "b_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SQRT_POW_2")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   (((((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_MUL_ASSOC")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then "REAL_MUL_LINV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "DOT_EQ_0")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_MUL_RID")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_SYM")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "NORM_EQ")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_RADD")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_LADD")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_RMUL")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_LMUL")(thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "DOT_SYM") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "vn0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "bn_eq")(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) (split_tac) ((arith_tac) THEN (done_tac)));
   ((THENL_ROT (-1)) (split_tac));
   ((((use_arg_then "dist")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL NORM_LT_SQUARE)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "d_gt0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_theorem (VECTOR_ARITH `!v n a b. v - (a % v + b % n) = (&1 - a) % v - b % n`)))(thm_tac (new_rewrite [] []))));
   ((repeat_tactic 1 9 (((use_arg_then "DOT_RSUB")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_LSUB")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_RMUL")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_LMUL")(thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "DOT_SYM") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "vn0")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_MUL_RZERO")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "bn_eq")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "REAL_SUB_RZERO")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_SUB_LZERO")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_LNEG")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MUL_ASSOC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_SUB_RDISTRIB")(gsym_then (thm_tac (new_rewrite [] []))))));
   (((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `(&1 - a) * (&1 - a) - --(&1 - a * a) = &2 * (&1 - a)`)))(thm_tac (new_rewrite [] []))));
   ((THENL_FIRST) ((((use_arg_then "REAL_LT_RDIV_EQ")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "DOT_POS_LT")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_MUL_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_RDIV_EQ")(gsym_then (thm_tac (new_rewrite [] [])))))) ((arith_tac) THEN (done_tac)));
   (((fun arg_tac -> arg_tac (Arg_theorem (REAL_ARITH `!x. &0 < x /\ &1 - x / &4 <= a ==> &1 - a < x / &2`)))(thm_tac (new_rewrite [] []))));
   ((((use_arg_then "REAL_LT_DIV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_POW_2")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_LT_SQUARE")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "DOT_POS_LT")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "v_n0")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_POS_NZ")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((repeat_tactic 1 9 (((use_arg_then "real_div")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MUL_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_INV_MUL")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "real_div")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MUL_SYM")(thm_tac (new_rewrite [] [(`_ * &4`)])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MAX_MAX")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (BETA_TAC THEN (move ["w"]) THEN (move ["wS"]));
   ((repeat_tactic 1 9 (((use_arg_then "dist")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NORM_LT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_RSUB")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_LSUB")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_RADD")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_LADD")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_RMUL")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DOT_LMUL")(thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "DOT_SYM") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "vn0")(thm_tac (new_rewrite [] [])))));
   ((repeat_tactic 1 9 (((use_arg_then "REAL_MUL_RZERO")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_ADD_RID")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ADD_LID")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "bn_eq")(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`a * a * (v dot v) + (&1 - a * a) * (v dot v) = v dot v`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))) ((arith_tac) THEN (done_tac)));
   ((repeat_tactic 1 9 (((use_arg_then "real_sub")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_NEG_ADD")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_ADD_ASSOC")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LT_RADD")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_ADD_ASSOC")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then "REAL_LT_LADD")(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then "DOT_SYM") (fun fst_arg -> (use_arg_then "v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "DOT_SYM") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`!x y. --x + --x < --(a * x) + --(b * y) + --(a * x) + --(b * y) <=> (a - &1) * x < b * --y`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))) ((arith_tac) THEN (done_tac)));
   ((((use_arg_then "REAL_LTE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LTE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`&0`))) (term_tac exists_tac)));
   ((((use_arg_then "REAL_LE_MUL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_NEG_GE0")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((fun arg_tac -> (use_arg_then "w_dot") (fun fst_arg -> (use_arg_then "wS") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then "b_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SQRT_POS_LE")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "REAL_NEG_GT0")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_NEG_LMUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_MUL")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "w_dot") (fun fst_arg -> (use_arg_then "wS") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "a_ineq") (disch_tac [])) THEN (clear_assumption "a_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma COMPACT_SUP_SET *)
let COMPACT_SUP_SET = section_proof ["f";"s"]
`compact s /\ lift o f continuous_on s
        ==> compact {x | x IN s /\ (!y. y IN s ==> f y <= f x)}`
[
   ((fun arg_tac -> arg_tac (Arg_term (`GSPEC _`))) (term_tac (set_tac "c")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`c SUBSET s`))) (term_tac (have_gen_tac [](move ["cs"])))) (((((use_arg_then "c_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac)));
   (((repeat_tactic 1 9 (((use_arg_then "COMPACT_EQ_BOUNDED_CLOSED")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ALL_TAC) THEN (case THEN ((move ["boundedS"]) THEN (move ["closedS"]))) THEN (move ["f_cont"])) THEN (split_tac));
   ((((fun arg_tac -> (use_arg_then "BOUNDED_SUBSET") (fun fst_arg -> (use_arg_then "boundedS") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN (done_tac));
   (in_tac ["closedS"] true (repeat_tactic 1 9 (((use_arg_then "CLOSED_SEQUENTIAL_LIMITS")(thm_tac (new_rewrite [] []))))));
   ((BETA_TAC THEN (move ["x"]) THEN (move ["y"]) THEN (case THEN ((move ["x_in_c"]) THEN (move ["x_to_y"])))) THEN ((((use_arg_then "c_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`!n. x n IN s`))) (term_tac (have_gen_tac [](move ["x_in_s"])))) ((BETA_TAC THEN (move ["n"])) THEN (((use_arg_then "cs") (disch_tac [])) THEN (clear_assumption "cs") THEN BETA_TAC) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (DISCH_THEN apply_tac) THEN (done_tac)));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`y IN s`))) (term_tac (have_gen_tac [](move ["ys"])))) ((((fun arg_tac -> (use_arg_then "closedS") (fun fst_arg -> (use_arg_then "x_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN (done_tac)));
   (((((use_arg_then "ys")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["a"]) THEN (move ["as"]));
   ((((use_arg_then "f_cont") (disch_tac [])) THEN (clear_assumption "f_cont") THEN BETA_TAC) THEN ((((use_arg_then "CONTINUOUS_ON_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))) THEN ((fun arg_tac -> (fun arg_tac -> (fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then "x_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "ys") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "x_in_s") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC))));
   (((((use_arg_then "o_THM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "o_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL TENDSTO_REAL)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["lim"]));
   (((fun arg_tac -> (use_arg_then "REALLIM_LBOUND") (fun fst_arg -> (use_arg_then "lim") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac));
   (((((use_arg_then "TRIVIAL_LIMIT_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL ALWAYS_EVENTUALLY)))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (move ["n"]));
   ((((fun arg_tac -> (use_arg_then "x_in_c") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "c_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["_"]))) THEN (DISCH_THEN apply_tac) THEN (done_tac));
];;

(* Finalization of the section SomeResults *)
let packing_empty = finalize_theorem packing_empty;;
let in_ball_annulus = finalize_theorem in_ball_annulus;;
let closed_ball_annulus = finalize_theorem closed_ball_annulus;;
let finite_packing_ball_annulus = finalize_theorem finite_packing_ball_annulus;;
let ECTC_sub_ESTD = finalize_theorem ECTC_sub_ESTD;;
let in_set_of_edge_ECTC = finalize_theorem in_set_of_edge_ECTC;;
let vector_eq_neg = finalize_theorem vector_eq_neg;;
let bij_scriptL = finalize_theorem bij_scriptL;;
let lmfun_ge0 = finalize_theorem lmfun_ge0;;
let lmfun_in_ball_annulus = finalize_theorem lmfun_in_ball_annulus;;
let scriptL_le_card = finalize_theorem scriptL_le_card;;
let card_counterexample_ge13 = finalize_theorem card_counterexample_ge13;;
let piecewise_real_continuous = finalize_theorem piecewise_real_continuous;;
let piecewise_real_continuous_univ = finalize_theorem piecewise_real_continuous_univ;;
let lmfun_continuous = finalize_theorem lmfun_continuous;;
let lmfun_norm2_continuous = finalize_theorem lmfun_norm2_continuous;;
let simple_card_inequality = finalize_theorem simple_card_inequality;;
let card_packing_ball_annulus = finalize_theorem card_packing_ball_annulus;;
let SIN_NEG_PI_2PI = finalize_theorem SIN_NEG_PI_2PI;;
let not_surrounded_imp_on_one_side_of_plane = finalize_theorem not_surrounded_imp_on_one_side_of_plane;;
let perturbation_lemma = finalize_theorem perturbation_lemma;;
let COMPACT_SUP_SET = finalize_theorem COMPACT_SUP_SET;;
end_section "SomeResults";;

(* Section VectorOfList *)
begin_section "VectorOfList";;
let vector_of_list = new_definition `vector_of_list d list =
        lambda i. if (i - 1) DIV d < LENGTH list then (EL ((i - 1) DIV d) list)$((i - 1) MOD d + 1) else &0`;;
let list_of_vector = new_definition `list_of_vector d n v = TABLE (\k. lambda i. v$(k * d + i)) n`;;
let LAMBDA_BETA = GEN_ALL LAMBDA_BETA;;

(* Lemma vector_of_list_nil *)
let vector_of_list_nil = section_proof ["d"]
`vector_of_list d [] = vec 0`
[
   ((((((use_arg_then "vector_of_list")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LAMBDA_UNIQUE")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "vec")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["i_ineq"])) THEN ((((use_arg_then "LAMBDA_BETA")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))));
   ((((use_arg_then "LENGTH")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma length_list_of_vector *)
let length_list_of_vector = section_proof ["d";"n";"v"]
`LENGTH (list_of_vector d n v) = n`
[
   (((((use_arg_then "list_of_vector")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Packing3.LENGTH_TABLE")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma sum_lemma *)
let sum_lemma = section_proof ["n";"k";"f"]
`sum (1..k * n) f = sum (1..n) (\j. sum (1..k) (\i. f ((j - 1) * k + i)))`
[
   ((THENL_FIRST) (((THENL) (((use_arg_then "n") (disch_tac [])) THEN (clear_assumption "n") THEN elim) [ALL_TAC; ((move ["n"]) THEN (move ["IH"]))]) THEN ((repeat_tactic 0 10 (((use_arg_then "muln0")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL SUM_CLAUSES_NUMSEG)))(thm_tac (new_rewrite [] []))))))) ((arith_tac) THEN (done_tac)));
   ((THENL_FIRST) ((((fun arg_tac -> arg_tac (Arg_theorem (ARITH_RULE `1 <= SUC n`)))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "mulnSr")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IH")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_ADD_SPLIT")(thm_tac (new_rewrite [] []))))) ((arith_tac) THEN (done_tac)));
   ((((use_arg_then "REAL_EQ_ADD_LCANCEL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((fun arg_tac -> (use_arg_then "addnC") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`k * n:num`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_OFFSET")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "SUM_EQ") (thm_tac apply_tac)) THEN (move ["i"])) THEN ((((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "succnK")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "addnC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "mulnC")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(add_section_var (mk_var ("d", (`:num`))));;
(add_section_var (mk_var ("list", (`:(real^N)list`))));;
(add_section_hyp "d_eq" (`dimindex (:N) = d`));;
(add_section_hyp "dim_ge" (`d * LENGTH list <= dimindex (:M)`));;

(* Lemma vector_of_list_comp0 *)
let vector_of_list_comp0 = section_proof ["i"]
`d * LENGTH list + 1 <= i /\ i <= dimindex (:M) ==>
        (vector_of_list d list:real^M)$i = &0`
[
   (BETA_TAC THEN (move ["i_ineqs"]));
   ((THENL_FIRST) ((((use_arg_then "vector_of_list")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LAMBDA_BETA")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) ((((use_arg_then "i_ineqs") (disch_tac [])) THEN (clear_assumption "i_ineqs") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`~((i - 1) DIV d < LENGTH list)`))) (term_tac (have_gen_tac []((((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)))))));
   ((fun arg_tac -> arg_tac (Arg_term (`~(d = 0)`))) (term_tac (have_gen_tac [](move ["dn0"]))));
   ((((fun arg_tac -> (use_arg_then "DIMINDEX_GE_1") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`(:N)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "d_eq")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "DIV_MULT") (fun fst_arg -> (use_arg_then "dn0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "DIV_MONO")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dn0")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "i_ineqs") (disch_tac [])) THEN (clear_assumption "i_ineqs") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma vector_of_list_comp *)
let vector_of_list_comp = section_proof ["k";"i"]
`(1 <= i /\ i <= d) /\ k < LENGTH list ==>
        (vector_of_list d list:real^M)$(k * d + i) = (EL k list)$i`
[
   (BETA_TAC THEN (case THEN (move ["i_ineq"])) THEN (move ["k_lt"]));
   ((((use_arg_then "vector_of_list")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LAMBDA_BETA")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((THENL_FIRST) (split_tac) ((((use_arg_then "i_ineq") (disch_tac [])) THEN (clear_assumption "i_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((use_arg_then "LE_TRANS") (disch_tac [])) THEN (clear_assumption "LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`d * LENGTH list`))) (term_tac exists_tac)) THEN ((((use_arg_then "dim_ge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "LE_TRANS") (disch_tac [])) THEN (clear_assumption "LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`k * d + d:num`))) (term_tac exists_tac)));
   ((((use_arg_then "LE_ADD_LCANCEL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_ineq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (ARITH_RULE `k * d + d = d * SUC k`)))(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "LE_MULT_LCANCEL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "k_lt") (disch_tac [])) THEN (clear_assumption "k_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIVMOD_UNIQ") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`(k * d + i) - 1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "d") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`i - 1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["div_mod"])));
   (((repeat_tactic 1 9 (((use_arg_then "div_mod")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "k_lt")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (TRY (((((use_arg_then "i_ineq") (disch_tac [])) THEN (clear_assumption "i_ineq") THEN BETA_TAC) THEN (arith_tac)))));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`i - 1 + 1 = i`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) ((ALL_TAC) THEN (done_tac)));
   ((((use_arg_then "i_ineq") (disch_tac [])) THEN (clear_assumption "i_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma vector_of_list_left_inverse *)
let vector_of_list_left_inverse = section_proof []
`list_of_vector d (LENGTH list) ((vector_of_list d list):real^M) = list`
[
   (((((use_arg_then "Packing3.LIST_EL_EQ")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "list_of_vector")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Packing3.LENGTH_TABLE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["k"]) THEN (move ["k_lt"]));
   (((((use_arg_then "Packing3.EL_TABLE")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then "LAMBDA_UNIQUE")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "d_eq")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["i_ineq"]));
   ((((use_arg_then "vector_of_list_comp")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma dot_vector_of_list *)
let dot_vector_of_list = section_proof []
`(vector_of_list d list:real^M) dot (vector_of_list d list) =
        sum (1..LENGTH list) (\i. (EL (i - 1) list) dot (EL (i - 1) list))`
[
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`~(d = 0)`))) (term_tac (have_gen_tac [](move ["d_n0"])))) ((((fun arg_tac -> (use_arg_then "DIMINDEX_GE_1") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`(:N)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "d_eq")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`LENGTH list <= dimindex (:M)`))) (term_tac (have_gen_tac [](move ["len_le"]))));
   ((((use_arg_then "LE_TRANS") (disch_tac [])) THEN (clear_assumption "LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`d * LENGTH list`))) (term_tac exists_tac)) THEN ((((use_arg_then "dim_ge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))));
   (((((fun arg_tac -> arg_tac (Arg_theorem (ARITH_RULE `!a. a = 1 * a`)))(thm_tac (new_rewrite [1] [])))) THEN (((use_arg_then "LE_MULT_RCANCEL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "d_n0") (disch_tac [])) THEN (clear_assumption "d_n0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((repeat_tactic 1 9 (((use_arg_then "dot")(thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "subnKC") (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_ADD_SPLIT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "LE_ADDR")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((use_arg_then "REAL_ADD_RID")(gsym_then (thm_tac (new_rewrite [] [(`sum (1..LENGTH list) _`)])))));
   ((THENL_ROT (-1)) (congr_tac (`_1 + _2:real`)));
   (((use_arg_then "SUM_EQ_0_NUMSEG") (thm_tac apply_tac)) THEN (move ["i"]) THEN (move ["i_ineq"]) THEN (simp_tac));
   ((THENL_FIRST) ((((use_arg_then "vector_of_list")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LAMBDA_BETA")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) ((((use_arg_then "i_ineq") (disch_tac [])) THEN (clear_assumption "i_ineq") THEN ((use_arg_then "dim_ge") (disch_tac [])) THEN (clear_assumption "dim_ge") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`~((i - 1) DIV d < LENGTH list)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) (((simp_tac) THEN (((use_arg_then "REAL_MUL_LZERO")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   (((((use_arg_then "NOT_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LE_RDIV_EQ")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac))) THEN (((use_arg_then "i_ineq") (disch_tac [])) THEN (clear_assumption "i_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "sum_lemma")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ((use_arg_then "SUM_EQ") (thm_tac apply_tac)) THEN (((((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "d_eq")(thm_tac (new_rewrite [] []))))) THEN (move ["k"]) THEN (move ["k_ineq"]) THEN (simp_tac)));
   ((((use_arg_then "SUM_EQ") (thm_tac apply_tac)) THEN (move ["i"])) THEN ((((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (move ["i_ineq"]) THEN (simp_tac)));
   (((((use_arg_then "vector_of_list_comp")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then "i_ineq")(thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then "k_ineq") (disch_tac [])) THEN (clear_assumption "k_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma vector_of_list_norm_bound *)
let vector_of_list_norm_bound = section_proof ["r"]
`(!x:real^N. MEM x list ==> norm x <= r) ==>
        norm (vector_of_list d list:real^M) <= sqrt (&(LENGTH list)) * r`
[
   (BETA_TAC THEN (move ["norm_le"]));
   ((THENL) (((fun arg_tac -> (use_arg_then "EXCLUDED_MIDDLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`list = []`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (move ["list_not_nil"])]);
   (((((use_arg_then "LENGTH")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "vector_of_list_nil")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NORM_0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SQRT_0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_LZERO")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 <= r`))) (term_tac (have_gen_tac [](move ["r_pos"]))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`0 < LENGTH list`))) (term_tac (have_gen_tac [](move ["len_pos"])))) ((((use_arg_then "list_not_nil") (disch_tac [])) THEN (clear_assumption "list_not_nil") THEN BETA_TAC) THEN (((use_arg_then "LENGTH_EQ_NIL")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac)));
   ((fun arg_tac -> (use_arg_then "norm_le") (fun fst_arg -> (fun arg_tac -> (use_arg_then "MEM_EL") (fun fst_arg -> (use_arg_then "len_pos") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC));
   ((((fun arg_tac -> (use_arg_then "NORM_POS_LE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL 0 list`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "vector_norm")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dot_vector_of_list")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`LENGTH list`))) (term_tac (set_tac "n")));
   ((fun arg_tac -> arg_tac (Arg_term (`sqrt (&n) * r = sqrt (&n * r pow 2)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then "SQRT_MUL")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_LE_POW_2")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_POS")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "POW_2_SQRT")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "SQRT_MONO_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUM_POS_LE_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))));
   ((BETA_TAC THEN (move ["i"]) THEN (move ["_"])) THEN (((use_arg_then "DOT_POS_LE")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   (((((fun arg_tac -> (use_arg_then "CARD_NUMSEG_1") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [2] []))))) THEN (((use_arg_then "SUM_BOUND")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "FINITE_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["i_ineq"]) THEN (simp_tac));
   ((((use_arg_then "DOT_SQUARE_NORM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_SQUARE_ABS")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_ABS_NORM")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "iffRL") (fun fst_arg -> (fun arg_tac -> (use_arg_then "REAL_ABS_REFL") (fun fst_arg -> (use_arg_then "r") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   (((((use_arg_then "norm_le")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n_def")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "i_ineq") (disch_tac [])) THEN (clear_assumption "i_ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Finalization of the section VectorOfList *)
let vector_of_list_nil = finalize_theorem vector_of_list_nil;;
let length_list_of_vector = finalize_theorem length_list_of_vector;;
let sum_lemma = finalize_theorem sum_lemma;;
let vector_of_list_comp0 = finalize_theorem vector_of_list_comp0;;
let vector_of_list_comp = finalize_theorem vector_of_list_comp;;
let vector_of_list_left_inverse = finalize_theorem vector_of_list_left_inverse;;
let dot_vector_of_list = finalize_theorem dot_vector_of_list;;
let vector_of_list_norm_bound = finalize_theorem vector_of_list_norm_bound;;
end_section "VectorOfList";;

(* Lemma infnorm_lt *)
let infnorm_lt = section_proof ["e"]
`!(v:real^N). (!i. 1 <= i /\ i <= dimindex (:N) ==> abs (v$i) < e) ==>
        infnorm v < e`
[
   ((THENL_ROT (-1)) ((BETA_TAC THEN (move ["v"]) THEN (move ["ineqs"])) THEN ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL infnorm)))(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_SUP_LT_FINITE)))(thm_tac (new_rewrite [] [])))))));
   ((BETA_TAC THEN (move ["x"])) THEN (((((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ALL_TAC THEN (case THEN (move ["i"])) THEN (case THEN (DISCH_THEN (fun snd_th -> (use_arg_then "ineqs") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (simp_tac)) THEN (done_tac));
   (split_tac);
   ((fun arg_tac -> arg_tac (Arg_term (`GSPEC _`))) (term_tac (set_tac "s")));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`s = IMAGE (\i. abs (v$i)) (1..dimindex (:N))`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))));
   (((((use_arg_then "FINITE_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "FINITE_NUMSEG")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "s_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL CONJ_ACI)))(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`abs (v$1)`))) (term_tac exists_tac)) THEN ((((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`1`))) (term_tac exists_tac)));
   (((((use_arg_then "DIMINDEX_GE_1")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LE_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma lim_not_equal *)
let lim_not_equal = section_proof ["a";"b";"f";"g"]
`~(a = b) /\ (f --> a) sequentially /\ (g --> b) sequentially ==>
        ?N. !n. N <= n ==> ~(f n = g n)`
[
   (((repeat_tactic 1 9 (((use_arg_then "LIM_SEQUENTIALLY")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "DIST_NZ")(thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["n_ab"])) THEN (case THEN ((move ["f_to_a"]) THEN (move ["g_to_b"]))));
   ((fun arg_tac -> arg_tac (Arg_term (`dist (a, b) / &2`))) (term_tac (set_tac "e")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`&0 < e`))) (term_tac (have_gen_tac [](move ["e_gt0"])))) (((((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LT_DIV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n_ab")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac)));
   (((fun arg_tac -> (use_arg_then "g_to_b") (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (use_arg_then "f_to_a") (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN ((move ["n1"]) THEN (move ["ineq1"]))) THEN (case THEN ((move ["n2"]) THEN (move ["ineq2"]))));
   (((fun arg_tac -> arg_tac (Arg_term (`n1 + n2:num`))) (term_tac exists_tac)) THEN (move ["n"]) THEN (move ["le_n"]));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`n1 <= n /\ n2 <= n:num`))) (term_tac (have_gen_tac [](move ["n_ineqs"])))) ((((use_arg_then "le_n") (disch_tac [])) THEN (clear_assumption "le_n") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then "ineq2") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (use_arg_then "ineq1") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then "n_ineqs")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`f n`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`g n`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (use_arg_then "a") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`f n`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_SYM") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`f n`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "a") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "e_def") (disch_tac [])) THEN (clear_assumption "e_def") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Section VectorOfList_Sets *)
begin_section "VectorOfList_Sets";;
(add_section_var (mk_var ("k", (`:num`))));;
(add_section_hyp "dim_ge" (`3 * k <= dimindex (:M)`));;

(* Section Lim_inS *)
begin_section "Lim_inS";;
(add_section_var (mk_var ("S", (`:(real^3)list -> bool`))));;

(* Lemma lim_inS_EL *)
let lim_inS_EL = section_proof ["v";"y"]
`(!n. v n IN IMAGE (vector_of_list 3) S) /\ (v --> y:real^M) sequentially
        ==> !i. i < k ==> ((\n. EL i (list_of_vector 3 k (v n):(real^3)list))
                --> EL i (list_of_vector 3 k y:(real^3)list)) sequentially`
[
   (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "LIM_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["vS"])) THEN (move ["v_to_y"]) THEN (move ["i"]) THEN (move ["i_lt_k"]) THEN (move ["e"]) THEN (move ["e_gt0"]) THEN (simp_tac));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`&0 < e / sqrt (&3)`))) (term_tac (have_gen_tac [](move ["e3_gt0"])))) (((((use_arg_then "REAL_LT_DIV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "e_gt0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SQRT_POS_LT")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac)));
   (((fun arg_tac -> (use_arg_then "v_to_y") (fun fst_arg -> (use_arg_then "e3_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["N"])) THEN (move ["d_lt"]));
   ((((use_arg_then "N") (term_tac exists_tac)) THEN (move ["n"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "d_lt") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN ((repeat_tactic 1 9 (((use_arg_then "dist")(thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "NORM_BOUND_COMPONENT_LT") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["bounds"])));
   ((repeat_tactic 1 9 (((use_arg_then "list_of_vector")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "Packing3.EL_TABLE")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`_1 - _2:real^3`))) (term_tac (set_tac "z")));
   ((((fun arg_tac -> (use_arg_then "NORM_LE_INFNORM") (fun fst_arg -> (use_arg_then "z") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then "REAL_LET_TRANS") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (DISCH_THEN apply_tac));
   ((((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LTE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LTE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`sqrt (&3) * (e / sqrt (&3))`))) (term_tac exists_tac)));
   ((THENL_ROT (-1)) (split_tac));
   ((((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MUL_LINV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_MUL_RID")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((use_arg_then "SQRT_EQ_0")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((THENL_FIRST) ((((use_arg_then "REAL_LT_LMUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SQRT_POS_LT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))))) ((arith_tac) THEN (done_tac)));
   (((((use_arg_then "infnorm_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (move ["j"]) THEN (move ["j_ineqs"]));
   ((((use_arg_then "z_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "VECTOR_SUB_COMPONENT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "LAMBDA_BETA")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)));
   (((((use_arg_then "VECTOR_SUB_COMPONENT")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "bounds")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "dim_ge") (disch_tac [])) THEN (clear_assumption "dim_ge") THEN ((use_arg_then "i_lt_k") (disch_tac [])) THEN (clear_assumption "i_lt_k") THEN ((use_arg_then "j_ineqs") (disch_tac [])) THEN (clear_assumption "j_ineqs") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;
(add_section_hyp "inS_imp" (`!l. l IN S ==> LENGTH l <= k`));;

(* Lemma lim_inS_eq *)
let lim_inS_eq = section_proof ["v";"y"]
`(!n. v n IN IMAGE (vector_of_list 3) S) /\ (v --> y) sequentially
        ==> vector_of_list 3 (list_of_vector 3 k y:(real^3)list):real^M = y`
[
   (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LIM_SEQUENTIALLY")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ((move ["vS"]) THEN (move ["v_to_y"]))));
   (((((use_arg_then "vector_of_list")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LAMBDA_UNIQUE")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["i_ineqs"]));
   (((fun arg_tac -> arg_tac (Arg_term (`(i - 1) DIV 3 < k`))) (disch_eq_tac "h" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((THENL_FIRST) ((((use_arg_then "list_of_vector")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Packing3.EL_TABLE")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then "LAMBDA_BETA")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] [])))))) ((arith_tac) THEN (done_tac)));
   ((THENL_FIRST) ((((use_arg_then "ADD_ASSOC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIVISION")(gsym_then (thm_tac (new_rewrite [] [])))))) ((arith_tac) THEN (done_tac)));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`i - 1 + 1 = i`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) ((ALL_TAC) THEN (done_tac)));
   ((((use_arg_then "i_ineqs") (disch_tac [])) THEN (clear_assumption "i_ineqs") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`!e. &0 < e ==> abs(y$i) < e`))) (term_tac (have_gen_tac []ALL_TAC))));
   ((((use_arg_then "contraLR") (disch_tac [])) THEN (clear_assumption "contraLR") THEN (DISCH_THEN apply_tac)) THEN (((((use_arg_then "NOT_FORALL_THM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] []))))) THEN (move ["yn0"])));
   (((fun arg_tac -> arg_tac (Arg_term (`abs (y$i)`))) (term_tac exists_tac)) THEN (((use_arg_then "yn0") (disch_tac [])) THEN (clear_assumption "yn0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((BETA_TAC THEN (move ["e"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "v_to_y") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (case THEN (move ["N"])) THEN (move ["hh"])) THEN (((fun arg_tac -> (use_arg_then "hh") (fun fst_arg -> (fun arg_tac -> (use_arg_then "LE_REFL") (fun fst_arg -> (use_arg_then "N") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC));
   (((((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist")(thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "NORM_BOUND_COMPONENT_LT") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN ((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then "i_ineqs") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)));
   (((use_arg_then "VECTOR_SUB_COMPONENT")(thm_tac (new_rewrite [] []))));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`v N$i = &0`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) ((((use_arg_then "REAL_SUB_RZERO")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (((fun arg_tac -> (use_arg_then "vS") (fun fst_arg -> (use_arg_then "N") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["x"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "inS_imp") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["len_leq"]));
   (((((use_arg_then "vector_of_list_comp0")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_ineqs")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (split_tac));
   ((((use_arg_then "leq_trans") (disch_tac [])) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`3 * k`))) (term_tac exists_tac)) THEN ((((use_arg_then "dim_ge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leq_mul2l")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) ((((use_arg_then "leq_trans") (disch_tac [])) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`3 * k + 1`))) (term_tac exists_tac)) THEN (split_tac)) ((((use_arg_then "len_leq") (disch_tac [])) THEN (clear_assumption "len_leq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`(a DIV d) * d <= a`))) (term_tac (have_gen_tac ["a"; "d"](move ["div"]))));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`d = 0`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) (((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "muln0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leq0n")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "DIVISION") (fun fst_arg -> (use_arg_then "eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "a") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [2] [])))) THEN (arith_tac) THEN (done_tac));
   ((THENL_FIRST) ((((use_arg_then "h") (disch_tac [])) THEN (clear_assumption "h") THEN BETA_TAC) THEN ((((use_arg_then "leqNgt")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "leq_pmul2r") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`3`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))))) ((arith_tac) THEN (done_tac)));
   ((((use_arg_then "i_ineqs") (disch_tac [])) THEN (clear_assumption "i_ineqs") THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then "div") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`i - 1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`3`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;

(* Finalization of the section Lim_inS *)
let lim_inS_EL = finalize_theorem lim_inS_EL;;
let lim_inS_eq = finalize_theorem lim_inS_eq;;
end_section "Lim_inS";;

(* Section ContinuousOnCompact *)
begin_section "ContinuousOnCompact";;
(add_section_var (mk_var ("S", (`:(real^3)list -> bool`))));;
(add_section_hyp "inS" (`!l. l IN S ==> LENGTH l = k`));;
(add_section_hyp "compactS" (`compact (IMAGE (vector_of_list 3) S:real^M->bool)`));;
(add_section_hyp "n_S_empty" (`~(S = {})`));;

(* Lemma max_onS *)
let max_onS = section_proof ["f"]
`(lift o f o set_of_list o (list_of_vector 3 k:real^M->(real^3)list))
                continuous_on (IMAGE (vector_of_list 3) S) ==>
        ?W. W IN IMAGE set_of_list S /\ (!V. V IN IMAGE set_of_list S ==> f V <= f W)`
[
   (((DISCH_THEN (fun snd_th -> (use_arg_then "CONTINUOUS_ATTAINS_SUP") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN ((((use_arg_then "compactS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IMAGE_EQ_EMPTY")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "n_S_empty")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   ((repeat_tactic 1 9 (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["v"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["lS"]) THEN (move ["le"]));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`set_of_list l`))) (term_tac exists_tac)) THEN (split_tac)) (((use_arg_then "l") (term_tac exists_tac)) THEN (done_tac)));
   (BETA_TAC THEN (move ["V"]) THEN (case THEN (move ["y"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["yS"]));
   ((THENL_FIRST) ((((fun arg_tac -> (use_arg_then "le") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vector_of_list 3 y:real^M`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC)) (((use_arg_then "y") (term_tac exists_tac)) THEN (done_tac)));
   (((fun arg_tac -> (use_arg_then "inS") (fun fst_arg -> (use_arg_then "lS") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (use_arg_then "inS") (fun fst_arg -> (use_arg_then "yS") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (move ["y_eq"]) THEN (move ["l_eq"]));
   (((repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "y_eq")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "l_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "l_eq")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "y_eq")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Finalization of the section ContinuousOnCompact *)
let max_onS = finalize_theorem max_onS;;
end_section "ContinuousOnCompact";;
(add_section_var (mk_var ("S", (`:(real^3)list -> bool`))));;

(* Section NormSet *)
begin_section "NormSet";;
(add_section_var (mk_var ("g", (`:num -> real`))));;
(add_section_hyp "inS" (`!l. l IN S <=> LENGTH l = k /\ (!i. i < k ==> norm (EL i l) = g i)`));;

(* Lemma closedNormS *)
let closedNormS = section_proof []
`closed (IMAGE (vector_of_list 3) S:real^M->bool)`
[
   (((((use_arg_then "CLOSED_SEQUENTIAL_LIMITS")(thm_tac (new_rewrite [] [])))) THEN (move ["v"]) THEN (move ["y"]) THEN (case THEN ((move ["vn_eq"]) THEN (move ["v_to_y"])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`list_of_vector 3 k y`))) (term_tac exists_tac)) THEN (split_tac));
   ((((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_inS_eq") (fun fst_arg -> (use_arg_then "v_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "S") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "vn_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac) THEN (move ["l"])));
   (((((use_arg_then "inS")(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "leqnn") (disch_tac [])) THEN (clear_assumption "leqnn") THEN (exact_tac)) THEN (done_tac));
   (((((use_arg_then "inS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt_k"]));
   ((fun arg_tac -> arg_tac (Arg_term (`EL i _`))) (term_tac (set_tac "x")));
   ((((fun arg_tac -> (use_arg_then "CONTINUOUS_AT_LIFT_NORM") (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "CONTINUOUS_AT_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "x_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "vn_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "i_lt_k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)) THEN BETA_TAC));
   ((fun arg_tac -> arg_tac (Arg_term (`(lift o norm) o _`))) (term_tac (set_tac "r")));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`r = (\n. lift (g i))`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))))));
   (((((use_arg_then "LIM_CONST_EQ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "TRIVIAL_LIMIT_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "LIFT_EQ")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac));
   (((((use_arg_then "r_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "eq_ext")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] [])))))) THEN (move ["n"]) THEN (simp_tac));
   ((((fun arg_tac -> (use_arg_then "vn_eq") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (move ["len_eq"])) THEN (move ["norm_eq"])));
   (((((use_arg_then "len_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "norm_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Finalization of the section NormSet *)
let closedNormS = finalize_theorem closedNormS;;
end_section "NormSet";;
(add_section_hyp "inS" (`!l. l IN S <=> set_of_list l SUBSET ball_annulus /\
        packing (set_of_list l) /\ LENGTH l = k /\ uniq l`));;

(* Lemma closedS *)
let closedS = section_proof []
`closed (IMAGE (vector_of_list 3) S:real^M->bool)`
[
   (((((use_arg_then "CLOSED_SEQUENTIAL_LIMITS")(thm_tac (new_rewrite [] [])))) THEN (move ["v"]) THEN (move ["y"]) THEN (case THEN ((move ["vn_eq"]) THEN (move ["v_to_y"])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> arg_tac (Arg_term (`list_of_vector 3 k y`))) (term_tac exists_tac)) THEN (split_tac));
   ((((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_inS_eq") (fun fst_arg -> (use_arg_then "v_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "S") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "vn_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac) THEN (move ["l"])));
   (((((use_arg_then "inS")(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "leqnn") (disch_tac [])) THEN (clear_assumption "leqnn") THEN (exact_tac)) THEN (done_tac));
   (((((use_arg_then "inS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (split_tac));
   (((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] []))))) THEN (move ["a"]) THEN (case THEN (move ["i"])) THEN (case THEN ((move ["i_lt"]) THEN (move ["a_eq"]))));
   ((((use_arg_then "closed_ball_annulus") (disch_tac [])) THEN (clear_assumption "closed_ball_annulus") THEN BETA_TAC) THEN (((use_arg_then "CLOSED_SEQUENTIAL_LIMITS")(thm_tac (new_rewrite [] [])))) THEN (DISCH_THEN apply_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`\n. EL i (list_of_vector 3 k (v n))`))) (term_tac exists_tac));
   (((((use_arg_then "a_eq")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "S") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))) THEN (move ["n"]) THEN (simp_tac));
   ((((fun arg_tac -> (use_arg_then "vn_eq") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (move ["sub_l"])) THEN (case THEN (move ["_"])) THEN (move ["len_eq"])));
   ((((use_arg_then "len_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((((use_arg_then "sub_l")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_ROT (-1)) (split_tac));
   (((((fun arg_tac -> (use_arg_then "uniq_nthP") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["j"]) THEN (case THEN ((move ["i_lt_j"]) THEN (move ["j_lt"]))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`i < k:num`))) (term_tac (have_gen_tac [](move ["i_lt"])))) ((((use_arg_then "i_lt_j") (disch_tac [])) THEN (clear_assumption "i_lt_j") THEN ((use_arg_then "j_lt") (disch_tac [])) THEN (clear_assumption "j_lt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((repeat_tactic 1 9 (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((fun arg_tac -> arg_tac (Arg_term (`EL i _`))) (term_tac (set_tac "a"))) THEN ((fun arg_tac -> arg_tac (Arg_term (`EL j _`))) (term_tac (set_tac "b"))));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "vn_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "i_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "vn_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "j_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((fun arg_tac -> arg_tac (Arg_term (`\n. _ n`))) (term_tac (set_tac "f2")));
   ((fun arg_tac -> arg_tac (Arg_term (`\n. _ n`))) (term_tac (set_tac "f1")));
   ((((use_arg_then "a_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "b_def")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "LIM_SEQUENTIALLY")(thm_tac (new_rewrite [] []))))));
   (BETA_TAC THEN ((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then "REAL_LT_01") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)) THEN (case THEN (move ["n1"])) THEN (move ["d2b"]) THEN ((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then "REAL_LT_01") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)) THEN (case THEN (move ["n2"])) THEN (move ["d1a"]));
   (((fun arg_tac -> (use_arg_then "d2b") (fun fst_arg -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "leq_addr") (fun fst_arg -> (use_arg_then "n2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "n1") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (use_arg_then "d1a") (fun fst_arg -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "leq_addl") (fun fst_arg -> (use_arg_then "n1") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "n2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((((use_arg_then "f1_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "f2_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac));
   ((((fun arg_tac -> (use_arg_then "vn_eq") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`n1 + n2:num`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (move ["_"])) THEN (case THEN (move ["pack"])) THEN (case THEN (move ["len_eq"])) THEN (move ["uniq_l"])));
   (((((use_arg_then "len_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (move ["da"]) THEN (move ["db"]));
   ((in_tac ["uniq_l"] false (((fun arg_tac -> (use_arg_then "uniq_nthP") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (in_tac ["pack"] false (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL Sphere.packing_lt)))(thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "uniq_l") (fun fst_arg -> (use_arg_then "i") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "j") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "i_lt_j")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "j_lt")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then "EL_nth")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (move ["neq"])));
   ((((use_arg_then "neq") (disch_tac [])) THEN (clear_assumption "neq") THEN ((use_arg_then "contra") (disch_tac [])) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac) THEN (move ["eq"])) THEN (((use_arg_then "pack") (disch_tac [])) THEN (clear_assumption "pack") THEN (DISCH_THEN apply_tac)));
   ((repeat_tactic 1 9 (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "da") (disch_tac [])) THEN (clear_assumption "da") THEN ((use_arg_then "db") (disch_tac [])) THEN (clear_assumption "db") THEN ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL i l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "a") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL j l`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "DIST_SYM") (fun fst_arg -> (use_arg_then "b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL Sphere.packing)))(thm_tac (new_rewrite [] [])))) THEN (move ["a"]) THEN (move ["b"]));
   ((((use_arg_then "IN")(gsym_then (thm_tac (new_rewrite [] [(`set_of_list _ a`)]))))) THEN (((use_arg_then "IN")(gsym_then (thm_tac (new_rewrite [] [(`set_of_list _ b`)]))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] []))))));
   ((repeat_tactic 1 9 (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist")(thm_tac (new_rewrite [] [])))));
   (BETA_TAC THEN (case THEN ALL_TAC) THEN (case THEN (move ["i"])) THEN (case THEN ((move ["i_lt"]) THEN (move ["a_eq"]))) THEN (case THEN ALL_TAC) THEN (case THEN (move ["j"])) THEN (case THEN ((move ["j_lt"]) THEN (move ["b_eq"]))) THEN (move ["n_ab"]));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "vn_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "i_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "vn_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v_to_y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "j_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   ((fun arg_tac -> arg_tac (Arg_term (`\n. _ n`))) (term_tac (set_tac "f2")));
   ((fun arg_tac -> arg_tac (Arg_term (`\n. _ n`))) (term_tac (set_tac "f1")));
   (((((use_arg_then "a_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "b_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["f2b"]) THEN (move ["f1a"]));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "LIM_NORM_LBOUND") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`sequentially`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`\n. f1 n - f2 n:real^3`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac));
   ((((use_arg_then "TRIVIAL_LIMIT_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "LIM_SUB")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EVENTUALLY_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "lim_not_equal") (fun fst_arg -> (use_arg_then "n_ab") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "f1a") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "f2b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["N"])) THEN (move ["neq"]));
   ((((use_arg_then "N") (term_tac exists_tac)) THEN (move ["n"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "neq") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN ((((use_arg_then "dist")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "f1_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "f2_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)));
   ((((fun arg_tac -> (use_arg_then "vn_eq") (fun fst_arg -> (use_arg_then "n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.packing")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (move ["_"])) THEN (case THEN ((move ["pack"]) THEN (move ["len_eq"])))));
   (((((use_arg_then "len_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (move ["el_neq"]));
   (((((use_arg_then "pack")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN")(gsym_then (thm_tac (new_rewrite [] [(`set_of_list l _`)]))))) THEN (((use_arg_then "IN")(gsym_then (thm_tac (new_rewrite [] [(`set_of_list l _`)]))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Lemma compactS *)
let compactS = section_proof []
`compact (IMAGE (vector_of_list 3) S:real^M->bool)`
[
   ((((use_arg_then "COMPACT_EQ_BOUNDED_CLOSED")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "closedS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "bounded")(thm_tac (new_rewrite [] [])))));
   ((fun arg_tac -> arg_tac (Arg_term (`sqrt (&k) * (&2 * h0)`))) (term_tac exists_tac));
   (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] []))))) THEN (move ["v"]) THEN (case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (move ["sub_l"])) THEN (case THEN (move ["_"])) THEN (move ["len_eq"]));
   (in_tac ["dim_ge"] true (((use_arg_then "len_eq")(gsym_then (thm_tac (new_rewrite [] []))))));
   (((((fun arg_tac -> (use_arg_then "vector_of_list_norm_bound") (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["x"]));
   (((((use_arg_then "IN_SET_OF_LIST")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "sub_l") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (((use_arg_then "Pack_defs.ball_annulus")(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "IN_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_CBALL_0")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac));
];;

(* Lemma set_of_listS *)
let set_of_listS = section_proof ["V"]
`V IN (IMAGE set_of_list S) <=>
        packing V /\ V SUBSET ball_annulus /\ CARD V = k`
[
   (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] []))))) THEN ((THENL) (split_tac) [((case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN ((move ["len_eq"]) THEN (move ["uniq_l"])))); ((case THEN (move ["pack"])) THEN (case THEN (move ["sub"])) THEN (move ["card_eq"]))]));
   (((((use_arg_then "card_set_of_list_uniq")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`list_of_set V`))) (term_tac exists_tac));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then "finite_packing_ball_annulus") (fun fst_arg -> (use_arg_then "pack") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "sub") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["finV"])));
   (((((use_arg_then "SET_OF_LIST_OF_SET")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "sub")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "pack")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LENGTH_LIST_OF_SET")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "card_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "uniq_list_of_set")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma scriptL_eq *)
let scriptL_eq = section_proof ["v"]
`v:real^M IN IMAGE (vector_of_list 3) S ==>
        scriptL (set_of_list (list_of_vector 3 k v))
        = list_sum (list_of_vector 3 k v:(real^3)list) (\v. lmfun (norm v / &2))`
[
   (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["l"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (move ["_"])) THEN (case THEN (move ["_"])) THEN (case THEN ((move ["len_eq"]) THEN (move ["uniq_l"]))));
   ((((use_arg_then "scriptL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "len_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "len_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)));
   ((((use_arg_then "list_sum_set_of_list")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma scriptL_continuous *)
let scriptL_continuous = section_proof []
`(lift o scriptL o set_of_list o (list_of_vector 3 k:real^M->(real^3)list))
                continuous_on (IMAGE (vector_of_list 3) S)`
[
   ((((use_arg_then "CONTINUOUS_ON_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))) THEN (move ["v"]) THEN (move ["a"]) THEN (case THEN (move ["a_in"])) THEN (case THEN (move ["v_in"])) THEN (move ["v_to_a"]));
   ((fun arg_tac -> arg_tac (Arg_term (`_ o v`))) (term_tac (set_tac "f")));
   ((fun arg_tac -> arg_tac (Arg_term (`f = lift o (\n. list_sum (list_of_vector 3 k (v n)) (\v:real^3. lmfun (norm v / &2)))`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((((((use_arg_then "f_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "eq_ext")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] [])))))) THEN (move ["n"])) THEN (((use_arg_then "scriptL_eq")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "scriptL_eq")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL TENDSTO_REAL)))(gsym_then (thm_tac (new_rewrite [] []))))));
   (((((use_arg_then "list_sum_continuous")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "lmfun_norm2_continuous")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"]));
   ((((fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "S") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma min_dist_k_continuous *)
let min_dist_k_continuous = section_proof ["j"]
`(lift o min_dist_k j o (list_of_vector 3 k:real^M->(real^3)list))
                continuous_on (IMAGE (vector_of_list 3) S)`
[
   ((((use_arg_then "CONTINUOUS_ON_SEQUENTIALLY")(thm_tac (new_rewrite [] [])))) THEN (move ["v"]) THEN (move ["a"]) THEN (case THEN (move ["a_in"])) THEN (case THEN (move ["v_in"])) THEN (move ["v_to_a"]));
   ((repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "o_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL TENDSTO_REAL)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "o_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (use_arg_then "ETA_AX") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`min_dist_k j o _`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "min_dist_k_limit")(thm_tac (new_rewrite [] [])))));
   (((repeat_tactic 1 9 (((use_arg_then "length_list_of_vector")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"]));
   ((((fun arg_tac -> (use_arg_then "lim_inS_EL") (fun fst_arg -> (use_arg_then "S") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Finalization of the section VectorOfList_Sets *)
let lim_inS_EL = finalize_theorem lim_inS_EL;;
let lim_inS_eq = finalize_theorem lim_inS_eq;;
let max_onS = finalize_theorem max_onS;;
let closedNormS = finalize_theorem closedNormS;;
let closedS = finalize_theorem closedS;;
let compactS = finalize_theorem compactS;;
let set_of_listS = finalize_theorem set_of_listS;;
let scriptL_eq = finalize_theorem scriptL_eq;;
let scriptL_continuous = finalize_theorem scriptL_continuous;;
let min_dist_k_continuous = finalize_theorem min_dist_k_continuous;;
end_section "VectorOfList_Sets";;

(* Section FJLBXS *)
begin_section "FJLBXS";;

(* Lemma sup_in_unions *)
let sup_in_unions = section_proof ["f";"S"]
`FINITE S ==> ~(UNIONS S = {}) /\
        (!s. s IN S ==> s = {} \/ ?u. u IN s /\ (!y. y IN s ==> f y <= f u)) ==>
        ?v. v IN UNIONS S /\ (!y. y IN UNIONS S ==> f y <= f v)`
[
   ((((use_arg_then "S") (disch_tac [])) THEN (clear_assumption "S") THEN ((use_arg_then "FINITE_INDUCT_STRONG") (thm_tac apply_tac))) THEN (((repeat_tactic 0 10 (((use_arg_then "UNIONS_0")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (move ["t"]) THEN (move ["S"]) THEN (case THEN (move ["IH"])) THEN (case THEN (move ["tnS"])) THEN (move ["finS"])));
   (((repeat_tactic 1 9 (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL UNIONS_INSERT)))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_UNION")(thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["not_empty"])) THEN (move ["h"]));
   (((use_arg_then "IH") (disch_tac [])) THEN (clear_assumption "IH") THEN ((fun arg_tac -> arg_tac (Arg_term (`UNIONS S = {}`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`~(t = {})`))) (term_tac (have_gen_tac [](move ["t_not_empty"]))));
   ((((use_arg_then "not_empty") (disch_tac [])) THEN (clear_assumption "not_empty") THEN ((use_arg_then "contra") (disch_tac [])) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "UNION_EMPTY")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "h") (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "t_not_empty")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (done_tac));
   ((THENL_FIRST) (ANTS_TAC) ((BETA_TAC THEN (move ["s"]) THEN (move ["sS"])) THEN (((use_arg_then "h") (disch_tac [])) THEN (clear_assumption "h") THEN (DISCH_THEN apply_tac)) THEN (done_tac)));
   ((BETA_TAC THEN (case THEN (move ["u1"])) THEN (case THEN (move ["u1_in"])) THEN (move ["u1_ineq"])) THEN (((fun arg_tac -> (use_arg_then "h") (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (simp_tac)));
   (((fun arg_tac -> arg_tac (Arg_term (`t = {}`))) (disch_eq_tac "t_eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   (((use_arg_then "u1") (term_tac exists_tac)) THEN ((((use_arg_then "u1_in")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "t_eq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "h") (fun fst_arg -> (use_arg_then "t") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (simp_tac)) THEN (((((use_arg_then "t_eq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ALL_TAC THEN (case THEN (move ["u0"])) THEN (case THEN (move ["u0t"])) THEN (move ["u0_ineq"])));
   ((THENL) (((fun arg_tac -> arg_tac (Arg_term (`f u1 <= f u0`))) (disch_eq_tac "ineq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) [((use_arg_then "u0") (term_tac exists_tac)); ((use_arg_then "u1") (term_tac exists_tac))]);
   (((((use_arg_then "u0t")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["y"]));
   ((((THENL) case [(DISCH_THEN (fun snd_th -> (use_arg_then "u0_ineq") (thm_tac (match_mp_then snd_th MP_TAC)))); (DISCH_THEN (fun snd_th -> (use_arg_then "u1_ineq") (thm_tac (match_mp_then snd_th MP_TAC))))]) THEN ((TRY done_tac))) THEN (((use_arg_then "ineq") (disch_tac [])) THEN (clear_assumption "ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "u1_in")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["y"]));
   ((((THENL) case [(DISCH_THEN (fun snd_th -> (use_arg_then "u0_ineq") (thm_tac (match_mp_then snd_th MP_TAC)))); (DISCH_THEN (fun snd_th -> (use_arg_then "u1_ineq") (thm_tac (match_mp_then snd_th MP_TAC))))]) THEN ((TRY done_tac))) THEN (((use_arg_then "ineq") (disch_tac [])) THEN (clear_assumption "ineq") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
];;
let type150 = define_finite_type 150;;

(* Lemma type150_ineq *)
let type150_ineq = section_proof []
`!k. k <= 43 ==> 3 * k <= dimindex (:150)`
[
   ((((fun arg_tac -> (use_arg_then "DIMINDEX_UNIQUE") (fun fst_arg -> (use_arg_then "type150") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
];;

(* Lemma scriptL_attains_max_in_ball_annulus *)
let scriptL_attains_max_in_ball_annulus = section_proof []
`?W. packing W /\ W SUBSET ball_annulus /\
        (!V. packing V /\ V SUBSET ball_annulus ==> scriptL V <= scriptL W)`
[
   ((fun arg_tac -> arg_tac (Arg_term (`\k. {V | packing V /\ V SUBSET ball_annulus /\ CARD V = k}`))) (term_tac (set_tac "G")));
   ((fun arg_tac -> arg_tac (Arg_term (`packing V /\ V SUBSET ball_annulus <=> V IN UNIONS (IMAGE G (0..43))`))) (term_tac (have_gen_tac ["V"](move ["in_eq"]))));
   (((((use_arg_then "UNIONS_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "G_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN ((THENL) (split_tac) [(case THEN ((move ["packV"]) THEN (move ["subV"]))); ((case THEN (move ["k"])) THEN (simp_tac))]));
   (((fun arg_tac -> arg_tac (Arg_term (`CARD V`))) (term_tac exists_tac)) THEN ((((use_arg_then "subV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "packV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leq0n")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "card_packing_ball_annulus")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "CONJ_ASSOC")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "in_eq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "sup_in_unions")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "FINITE_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "FINITE_NUMSEG")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (split_tac));
   (((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "UNIONS_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "G_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (((fun arg_tac -> arg_tac (Arg_term (`{}`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`0`))) (term_tac exists_tac))));
   ((THENL_FIRST) (split_tac) ((arith_tac) THEN (done_tac)));
   (((((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "packing_empty")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EMPTY_SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CARD_CLAUSES")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_NUMSEG")(thm_tac (new_rewrite [] []))))) THEN (move ["s"]) THEN (case THEN (move ["k"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (move ["k_ineq"]));
   (((fun arg_tac -> arg_tac (Arg_term (`G k = {}`))) (disch_eq_tac "Gk_n_empty" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((((fun arg_tac -> (use_arg_then "type150_ineq") (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "k_ineq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["dim_ge"])));
   ((fun arg_tac -> arg_tac (Arg_term (`{l | set_of_list l SUBSET ball_annulus /\ packing (set_of_list l) /\
        LENGTH l = k /\ uniq l}`))) (term_tac (set_tac "S")));
   ((THENL_FIRST) ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "set_of_listS") (fun fst_arg -> (use_arg_then "S") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((THENL) (ANTS_TAC) [ALL_TAC; (move ["inS"])])) (((((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`G k = IMAGE set_of_list S`))) (term_tac (have_gen_tac [](move ["Gk_eq"]))));
   (((((use_arg_then "G_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inS")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "max_onS") (fun fst_arg -> (use_arg_then "S") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC)) (((((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac)));
   ((THENL_FIRST) (ANTS_TAC) (((((fun arg_tac -> (use_arg_then "compactS") (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac)));
   ((THENL_FIRST) (ANTS_TAC) (((((fun arg_tac -> (use_arg_then "IMAGE_EQ_EMPTY") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`set_of_list`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Gk_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac)));
   ((((use_arg_then "Gk_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (DISCH_THEN apply_tac) THEN ((((fun arg_tac -> (use_arg_then "scriptL_continuous") (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma FJLBXS *)
let FJLBXS = section_proof ["V"]
`packing V /\ V SUBSET ball_annulus ==>
    (?W phi. BIJ phi V W /\ packing W /\ W SUBSET ball_annulus /\ (!v. v IN V ==> norm(v) = norm(phi v)) /\
        (!w. w IN W ==>  (set_of_edge w W (ESTD W) = {}) \/ (surrounded_node (W,(ESTD W)) w)))`
[
   (BETA_TAC THEN (case THEN ((move ["packV"]) THEN (move ["subV"]))));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "card_packing_ball_annulus") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (DISCH_THEN (fun snd_th -> (use_arg_then "type150_ineq") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (move ["dim_ge"]));
   ((fun arg_tac -> arg_tac (Arg_term (`CARD V`))) (term_tac (set_tac "k")));
   ((fun arg_tac -> arg_tac (Arg_term (`{l | set_of_list l SUBSET ball_annulus /\ packing (set_of_list l) /\ LENGTH l = k /\ uniq l}`))) (term_tac (set_tac "S")));
   ((fun arg_tac -> arg_tac (Arg_term (`{l | LENGTH l = k /\ (!i. i < k ==> norm (EL i l:real^3) = norm (EL i (list_of_set V)))}`))) (term_tac (set_tac "N")));
   ((fun arg_tac -> arg_tac (Arg_term (`IMAGE (vector_of_list 3) S INTER IMAGE (vector_of_list 3) N:real^150->bool`))) (term_tac (set_tac "R")));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then "finite_packing_ball_annulus") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["finV"])));
   ((fun arg_tac -> arg_tac (Arg_term (`compact R`))) (term_tac (have_gen_tac [](move ["compactR"]))));
   ((((use_arg_then "R_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "INTER_COMM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CLOSED_INTER_COMPACT")(thm_tac (new_rewrite [] [])))));
   ((((fun arg_tac -> (use_arg_then "compactS") (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((((fun arg_tac -> (fun arg_tac -> (use_arg_then "closedNormS") (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`\i. norm (EL i (list_of_set V))`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "N_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`~(R = {})`))) (term_tac (have_gen_tac [](move ["R_n_empty"]))));
   ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((fun arg_tac -> arg_tac (Arg_term (`vector_of_list 3 (list_of_set V)`))) (term_tac exists_tac)));
   ((((use_arg_then "R_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_INTER")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "N_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "FUN_IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LENGTH_LIST_OF_SET")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   (((((use_arg_then "SET_OF_LIST_OF_SET")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "uniq_list_of_set")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`\j. min_dist_k j o (list_of_vector 3 k:real^150 -> (real^3)list)`))) (term_tac (set_tac "f")));
   ((fun arg_tac -> arg_tac (Arg_term (`\j x. min_k j (mkseq (\i. f i x) k)`))) (term_tac (set_tac "c")));
   ((fun arg_tac -> arg_tac (Arg_term (`(lift o c j) continuous_on R`))) (term_tac (have_gen_tac ["j"](move ["c_cont"]))));
   (((((use_arg_then "CONTINUOUS_ON_EQ_CONTINUOUS_WITHIN")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["x"]) THEN (move ["xR"]));
   (((((use_arg_then "c_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "min_k_continuous")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["i_lt_k"]));
   (((((use_arg_then "f_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL REAL_CONTINUOUS_CONTINUOUS1)))(thm_tac (new_rewrite [] []))))) THEN ((use_arg_then "CONTINUOUS_WITHIN_SUBSET") (thm_tac apply_tac)));
   (((fun arg_tac -> arg_tac (Arg_term (`IMAGE (vector_of_list 3) S`))) (term_tac exists_tac)) THEN ((((use_arg_then "R_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "INTER_SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "xR") (disch_tac [])) THEN (clear_assumption "xR") THEN BETA_TAC) THEN (((((use_arg_then "R_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_INTER")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN ((move ["xS"]) THEN (move ["_"])))));
   ((((use_arg_then "xS") (disch_tac [])) THEN (clear_assumption "xS") THEN ((use_arg_then "x") (disch_tac [])) THEN (clear_assumption "x") THEN BETA_TAC) THEN (((use_arg_then "CONTINUOUS_ON_EQ_CONTINUOUS_WITHIN")(gsym_then (thm_tac (new_rewrite [] []))))));
   (((((fun arg_tac -> (use_arg_then "min_dist_k_continuous") (fun fst_arg -> (use_arg_then "dim_ge") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`\f s. {x:real^150 | x IN s /\ (!y. y IN s ==> f y <= f x)}`))) (term_tac (set_tac "sup_set")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`sup_set f s SUBSET s`))) (term_tac (have_gen_tac ["f"; "s"](move ["sup_sub"])))) (((((use_arg_then "sup_set_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`compact s /\ s SUBSET R ==> compact (sup_set (c j) s)`))) (term_tac (have_gen_tac ["j"; "s"](move ["sup_comp"]))));
   ((BETA_TAC THEN (case THEN ((move ["comp_s"]) THEN (move ["s_sub"])))) THEN ((((use_arg_then "sup_set_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)));
   (((((use_arg_then "COMPACT_SUP_SET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "comp_s")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "CONTINUOUS_ON_SUBSET") (fun fst_arg -> (use_arg_then "R") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "s_sub")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "ETA_AX")(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`compact s /\ s SUBSET R /\ ~(s = {}) ==> ~(sup_set (c j) s = {})`))) (term_tac (have_gen_tac ["j"; "s"](move ["sup_n_empty"]))));
   (BETA_TAC THEN (case THEN (move ["comp_s"])) THEN (case THEN ((move ["s_sub"]) THEN (move ["s_n"]))));
   ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "sup_set_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "CONTINUOUS_ATTAINS_SUP")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "s_n")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "comp_s")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((repeat_tactic 1 9 (((use_arg_then "ETA_AX")(fun arg -> ONCE_REWRITE_TAC[get_arg_thm arg])))) THEN (((fun arg_tac -> (use_arg_then "CONTINUOUS_ON_SUBSET") (fun fst_arg -> (use_arg_then "R") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`?C. C 0 = sup_set (c 0) R /\ !i. C (SUC i) = sup_set (c i) (C i)`))) (term_tac (have_gen_tac [](case THEN ((move ["C"]) THEN (case THEN ((move ["C0"]) THEN (move ["CS"]))))))));
   ((general_rec_exists_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`compact (C i) /\ C i SUBSET R /\ ~(C i = {})`))) (term_tac (have_gen_tac ["i"](move ["C_props"]))));
   (((THENL) (((use_arg_then "i") (disch_tac [])) THEN (clear_assumption "i") THEN elim) [ALL_TAC; ALL_TAC; ALL_TAC; ((move ["i"]) THEN (move ["IH"]))]) THEN ((repeat_tactic 0 10 (((use_arg_then "C0")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "CS")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "sup_sub")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "sup_comp")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "SUBSET_REFL")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (repeat_tactic 0 10 (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))))));
   (((((use_arg_then "sup_n_empty")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "SUBSET_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "sup_n_empty")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))) THEN ((use_arg_then "SUBSET_TRANS") (thm_tac apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`C i`))) (term_tac exists_tac)) THEN ((((use_arg_then "IH")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sup_sub")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`i <= j:num ==> C j SUBSET C i`))) (term_tac (have_gen_tac ["i"; "j"](move ["C_sub"]))));
   (((THENL) (((use_arg_then "j") (disch_tac [])) THEN (clear_assumption "j") THEN ((use_arg_then "i") (disch_tac [])) THEN (clear_assumption "i") THEN case) [ALL_TAC; (move ["i"])]) THEN ((THENL) elim [ALL_TAC; ((move ["j"]) THEN (move ["jH"]))]) THEN ((repeat_tactic 0 10 (((use_arg_then "SUBSET_REFL")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (TRY ((arith_tac))));
   ((BETA_TAC THEN (move ["_"])) THEN ((use_arg_then "SUBSET_TRANS") (thm_tac apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`C j`))) (term_tac exists_tac)) THEN ((((use_arg_then "CS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "jH")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "leq0n")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_FIRST) (((((use_arg_then "leqSS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "leq_eqVlt")(thm_tac (new_rewrite [] []))))) THEN ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (move ["i_lt_j"])])) ((((use_arg_then "SUBSET_REFL")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (((use_arg_then "SUBSET_TRANS") (thm_tac apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`C j`))) (term_tac exists_tac)) THEN ((((use_arg_then "CS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sup_sub")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "jH")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "ltE")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "C_props") (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["_"])) THEN (case THEN (move ["Ck_sub"])) THEN (case THEN (move ["w"])) THEN (move ["w_in"])));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "Packing3.IN_TRANS") (fun fst_arg -> (use_arg_then "w_in") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "Ck_sub") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   (((((use_arg_then "R_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_INTER")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "N_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN ALL_TAC) THEN (case THEN (move ["wl"])) THEN (case THEN (move ["w_eq"])) THEN (move ["wl_props"]) THEN (case THEN (move ["wl'"])) THEN (case THEN (move ["w_eq'"])) THEN (move ["wl'_props"]));
   ((fun arg_tac -> arg_tac (Arg_term (`wl' = wl`))) (term_tac (have_gen_tac [](move ["eq"]))));
   ((((use_arg_then "w_eq") (disch_tac [])) THEN (clear_assumption "w_eq") THEN BETA_TAC) THEN ((((use_arg_then "w_eq'")(thm_tac (new_rewrite [] [])))) THEN (DISCH_THEN (fun snd_th -> (fun arg_tac -> (use_arg_then "f_equal") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`list_of_vector 3 k:real^150->(real^3)list`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac (match_mp_then snd_th MP_TAC))))));
   (((((use_arg_then "wl'_props")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "wl_props")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "wl_props")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "wl'_props")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((in_tac ["wl'_props"] false (((use_arg_then "eq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "w_eq'") (disch_tac [])) THEN (clear_assumption "w_eq'") THEN ((use_arg_then "eq") (disch_tac [])) THEN (clear_assumption "eq") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"])));
   ((((fun arg_tac -> arg_tac (Arg_term (`set_of_list wl`))) (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`\x. EL (indexl x (list_of_set V)) wl`))) (term_tac exists_tac))) THEN (split_tac));
   ((((fun arg_tac -> (use_arg_then "SET_OF_LIST_OF_SET") (fun fst_arg -> (use_arg_then "finV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [2] []))))) THEN (((use_arg_then "BIJ_from_lists")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "uniq_list_of_set")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)));
   (((((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "wl_props")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "LENGTH_LIST_OF_SET")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((repeat_tactic 1 9 (((use_arg_then "wl_props")(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] []))))) THEN ((THENL) (split_tac) [((move ["v"]) THEN (move ["vV"])); ((move ["y"]) THEN (move ["y_wl"]))]));
   ((simp_tac) THEN (((use_arg_then "wl'_props")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "EL_index")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "MEM_LIST_OF_SET")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((((use_arg_then "k_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "LENGTH_LIST_OF_SET")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "index_mem")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_LIST_OF_SET")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`i <= k:num ==> w IN C i`))) (term_tac (have_gen_tac ["i"](move ["w_in_all"]))));
   ((BETA_TAC THEN (move ["i_le"])) THEN ((((fun arg_tac -> (use_arg_then "Packing3.IN_TRANS") (fun fst_arg -> (use_arg_then "w_in") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "C_sub")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "negb_or")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN ((move ["not_iso"]) THEN (move ["not_surr"])))));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`?wl'. wl' IN N /\ wl' IN S /\ (?n. n < k:num /\
        (!i. i < n ==> c i (vector_of_list 3 wl') = c i w) /\ c n w < c n (vector_of_list 3 wl'))`))) (term_tac (have_gen_tac []ALL_TAC))));
   (((((use_arg_then "implybF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_EXISTS_THM")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "negb_and")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NOT_EXISTS_THM")(thm_tac (new_rewrite [] []))))) THEN (move ["wl'"]));
   ((((fun arg_tac -> arg_tac (Arg_term (`wl' IN N`))) (disch_eq_tac "w'N" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) THEN (((fun arg_tac -> arg_tac (Arg_term (`wl' IN S`))) (disch_eq_tac "w'S" [])) THEN case THEN (simp_tac) THEN (move ["n"]) THEN (process_fst_eq_tac)));
   ((((use_arg_then "implybF")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["n_lt"])) THEN (case THEN (move ["ci_eq"])) THEN (move ["cn_lt"]));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`i <= n:num ==> vector_of_list 3 wl' IN C i`))) (term_tac (have_gen_tac ["i"](move ["w'C"])))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`w IN C (SUC n)`))) (term_tac (have_gen_tac []ALL_TAC))) (((((fun arg_tac -> (use_arg_then "Packing3.IN_TRANS") (fun fst_arg -> (use_arg_then "w_in") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "C_sub")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ltE")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac)));
   ((((use_arg_then "CS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sup_set_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "negb_and")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_FORALL_THM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LE")(thm_tac (new_rewrite [] [])))));
   ((DISJ2_TAC) THEN ((fun arg_tac -> arg_tac (Arg_term (`vector_of_list 3 wl'`))) (term_tac exists_tac)) THEN ((((use_arg_then "w'C")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "leqnn")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_ROT (-1)) ((((THENL) (((use_arg_then "i") (disch_tac [])) THEN (clear_assumption "i") THEN elim) [ALL_TAC; ((move ["i"]) THEN (move ["IH"]))]) THEN (move ["i_le"])) THEN ((((fun arg_tac ->(use_arg_then "C0")(fun tmp_arg1 -> (use_arg_then "CS")(fun tmp_arg2 -> arg_tac (Arg_theorem (CONJ (get_arg_thm tmp_arg1) (get_arg_thm tmp_arg2))))))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sup_set_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))))));
   ((THENL_FIRST) ((((use_arg_then "IH")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))))) ((((use_arg_then "i_le") (disch_tac [])) THEN (clear_assumption "i_le") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((THENL_FIRST) ((BETA_TAC THEN (move ["y"]) THEN (move ["y_in"])) THEN (((fun arg_tac -> (use_arg_then "w_in_all") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`SUC i`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC)) ((((use_arg_then "n_lt") (disch_tac [])) THEN (clear_assumption "n_lt") THEN ((use_arg_then "i_le") (disch_tac [])) THEN (clear_assumption "i_le") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   (((((use_arg_then "CS")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sup_set_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["_"])) THEN ((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then "y_in") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC)));
   (((((use_arg_then "ci_eq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "ltE")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((((use_arg_then "R_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "IN_INTER")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "FUN_IN_IMAGE")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (repeat_tactic 1 9 (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))))) THEN (move ["y"]) THEN (move ["yR"]));
   ((((fun arg_tac -> (use_arg_then "w_in_all") (fun fst_arg -> (fun arg_tac -> (use_arg_then "leq0n") (fun fst_arg -> (use_arg_then "k") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "C0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "sup_set_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["_"])) THEN ((fun arg_tac ->  (conv_thm_tac DISCH_THEN)  (fun fst_arg -> (use_arg_then "yR") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (thm_tac MP_TAC))));
   ((THENL_LAST) (((fun arg_tac -> arg_tac (Arg_term (`n = 0`))) (disch_eq_tac "n_eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) (((((use_arg_then "ci_eq")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "lt0n")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((use_arg_then "cn_lt") (disch_tac [])) THEN (clear_assumption "cn_lt") THEN BETA_TAC) THEN (((use_arg_then "n_eq")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "y_wl") (disch_tac [])) THEN BETA_TAC) THEN (((((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["r"])) THEN (case THEN (move ["r_lt"])) THEN (move ["y_eq"])));
   ((fun arg_tac -> arg_tac (Arg_term (`min_dist_k r wl`))) (term_tac (set_tac "dy")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`sizel wl = k`))) (term_tac (have_gen_tac [](move ["size_eq"])))) (((((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "wl_props")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`?e. &0 < e /\ (!i. i < k /\ ~(i = r) ==> dist (EL i wl, y) = dy \/ dy + e <= dist (EL i wl, y))`))) (term_tac (have_gen_tac [](case THEN ((move ["e"]) THEN (case THEN ((move ["e_gt0"]) THEN (move ["e_cond"]))))))));
   ((fun arg_tac -> arg_tac (Arg_term (`map (\v. dist (v, y)) wl`))) (term_tac (set_tac "dl")));
   ((fun arg_tac -> arg_tac (Arg_term (`\x. x = &0 \/ x = dy`))) (term_tac (set_tac "a")));
   ((fun arg_tac -> arg_tac (Arg_term (`if all a dl then &1 else min_k 0 (filter (predC a) dl) - dy`))) (term_tac (set_tac "e")));
   ((use_arg_then "e") (term_tac exists_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!i. i < k ==> dist (EL i wl, y) <- dl`))) (term_tac (have_gen_tac [](move ["in_dl"]))));
   ((BETA_TAC THEN (move ["i"]) THEN (move ["i_ineqs"])) THEN ((((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dl_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_map")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_eq")(thm_tac (new_rewrite [] []))))));
   (((use_arg_then "i") (term_tac exists_tac)) THEN ((((use_arg_then "EL_map")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!i. i < k ==> (dist (EL i wl, y) = &0 <=> i = r)`))) (term_tac (have_gen_tac [](move ["dist_n0"]))));
   ((THENL_LAST) ((BETA_TAC THEN (move ["i"]) THEN (move ["i_lt"])) THEN ((THENL) (split_tac) [ALL_TAC; (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))])) (((((use_arg_then "y_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   (((((use_arg_then "DIST_EQ_0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "y_eq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((fun arg_tac -> (use_arg_then "EL_nth") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`vec 0`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "nth_uniq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((use_arg_then "e_def") (disch_tac [])) THEN (clear_assumption "e_def") THEN ((fun arg_tac -> arg_tac (Arg_term (`all a dl`))) (disch_eq_tac "all_dl" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((BETA_TAC THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((((use_arg_then "REAL_LT_01")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (move ["i_lt"])) THEN (DISJ1_TAC));
   ((in_tac ["all_dl"] false ((((use_arg_then "allP")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac))) THEN (((fun arg_tac -> (use_arg_then "all_dl") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`dist (EL i wl, y)`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC));
   (((((use_arg_then "in_dl")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then "dist_n0")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (in_tac ["all_dl"] false ((((use_arg_then "has_predC")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "has_count")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "count_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] []))))));
   (((fun arg_tac -> arg_tac (Arg_term (`filter _1 _2`))) (term_tac (set_tac "dl2"))) THEN (BETA_TAC THEN (move ["e_eq"])) THEN (split_tac));
   ((((fun arg_tac -> (use_arg_then "mem_min_k") (fun fst_arg -> (use_arg_then "all_dl") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "dl2_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dl2_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "predC")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "negb_or")(thm_tac (new_rewrite [] []))))));
   (((((use_arg_then "dl_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "mapP")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["neq"])) THEN (case THEN (move ["v"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["i"])) THEN (case THEN (move ["i_lt"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN (move ["eq"]));
   ((((use_arg_then "e_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_SUB_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [2] []))))) THEN (((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "neq")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "dy_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "y_eq")(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "i_lt")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_n0")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((TRY done_tac)) THEN (((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((BETA_TAC THEN (move ["i"]) THEN (case THEN ((move ["i_lt"]) THEN (move ["n_ir"])))) THEN (((fun arg_tac -> arg_tac (Arg_term (`_1 = _2`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`dist (EL i wl, y) <- dl2`))) (term_tac (have_gen_tac []ALL_TAC)));
   (((((use_arg_then "dl2_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "mem_filter")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "in_dl")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "predC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "a_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "negb_or")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_n0")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "e_eq")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_SUB_ADD2")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["j"])) THEN (case THEN (move ["j_lt"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "min_k0_le_EL")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`set_of_list wl`))) (term_tac (set_tac "W")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`y IN W`))) (term_tac (have_gen_tac [](move ["yW"])))) (((((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((fun arg_tac -> (use_arg_then "Ckqowsa.CKQOWSA") (fun fst_arg -> (use_arg_then "W") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then "wl_props")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN ((THENL) (ANTS_TAC) [ALL_TAC; (move ["fanW"])]));
   ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((use_arg_then "y") (term_tac exists_tac)) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`2 <= k`))) (term_tac (have_gen_tac [](move ["k_ge2"]))));
   ((((use_arg_then "not_iso") (disch_tac [])) THEN (clear_assumption "not_iso") THEN BETA_TAC) THEN ((((use_arg_then "set_of_edge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ESTD")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)));
   (BETA_TAC THEN (case THEN (move ["u"])) THEN (case THEN (move ["v"])) THEN (case THEN ALL_TAC) THEN (case THEN ALL_TAC) THEN (case THEN (move ["u'"])) THEN (case THEN (move ["v'"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["u'W"])) THEN (case THEN (move ["v'W"])) THEN (case THEN (move ["neq_uv'"])) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`2 <= CARD W`))) (term_tac (have_gen_tac []ALL_TAC)))) (((((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "card_set_of_list_uniq")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "Hypermap.CARD_TWO_ELEMENTS") (fun fst_arg -> (use_arg_then "v'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "u'") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "CARD_SUBSET")(thm_tac (new_rewrite [] [])))));
   ((((((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [2] []))))) THEN (((use_arg_then "FINITE_SET_OF_LIST")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["x"]) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((THENL_FIRST) (((fun arg_tac -> (use_arg_then "packing_eq_min_dist") (fun fst_arg -> (use_arg_then "wl") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN (ANTS_TAC)) ((((use_arg_then "wl_props")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (((((use_arg_then "W_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "wl_props")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "size_eq")(thm_tac (new_rewrite [] []))))) THEN (move ["min_dist_ge"]));
   ((fun arg_tac -> arg_tac (Arg_term (`dy <= &2 * h0`))) (term_tac (have_gen_tac [](move ["dy_le"]))));
   ((((use_arg_then "not_iso") (disch_tac [])) THEN (clear_assumption "not_iso") THEN BETA_TAC) THEN ((((use_arg_then "set_of_edge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ESTD")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "dy_def")(gsym_then (thm_tac (new_rewrite [] [])))))));
   (BETA_TAC THEN (case THEN (move ["u"])) THEN (case THEN (move ["v"])) THEN (case THEN ALL_TAC) THEN (case THEN ALL_TAC) THEN (case THEN (move ["u'"])) THEN (case THEN (move ["v'"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["u'W"])) THEN (case THEN (move ["v'W"])) THEN (case THEN (move ["neq_uv'"])) THEN (move ["dist_le"]));
   ((((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL Geomdetail.PAIR_EQ_EXPAND)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))));
   (BETA_TAC THEN (move ["eq_cases"]) THEN (case THEN (move ["i"])) THEN (case THEN (move ["i_lt"])) THEN (move ["v_eq"]) THEN (move ["_"]));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`i = r`))) (disch_eq_tac "ir" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) ((((use_arg_then "neq_uv'") (disch_tac [])) THEN (clear_assumption "neq_uv'") THEN ((use_arg_then "eq_cases") (disch_tac [])) THEN (clear_assumption "eq_cases") THEN case THEN (move ["eq"])) THEN ((repeat_tactic 1 9 (((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then "v_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "y_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ir")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((use_arg_then "REAL_LE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`dist (u',v')`))) (term_tac exists_tac)) THEN ((((use_arg_then "dist_le")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "eq_cases") (disch_tac [])) THEN (clear_assumption "eq_cases") THEN case THEN (move ["eq"])) THEN ((repeat_tactic 1 9 (((use_arg_then "eq")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((fun arg_tac -> (use_arg_then "DIST_SYM") (fun fst_arg -> (use_arg_then "y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "v_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "y_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`{w | w IN W /\ dist (w, y) = dy}`))) (term_tac (set_tac "X")));
   (in_tac ["r_lt"] false (((use_arg_then "size_eq")(thm_tac (new_rewrite [] [])))));
   ((fun arg_tac -> arg_tac (Arg_term (`w IN X ==> w IN set_of_edge y W (ESTD W)`))) (term_tac (have_gen_tac ["w"](move ["subX"]))));
   (((((use_arg_then "set_of_edge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ESTD")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "X_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN ALL_TAC THEN (case THEN (move ["v"])) THEN (case THEN ALL_TAC) THEN (case THEN (move ["vW"])) THEN (move ["dist_eq"]) THEN (move ["eq"]));
   (((use_arg_then "v") (term_tac exists_tac)) THEN (repeat_tactic 1 9 (((split_tac) THEN ((TRY done_tac))))));
   ((((use_arg_then "y") (term_tac exists_tac)) THEN ((use_arg_then "v") (term_tac exists_tac))) THEN ((((use_arg_then "vW")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "yW")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dy_le")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "DIST_EQ_0")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_eq")(thm_tac (new_rewrite [] []))))));
   ((((fun arg_tac -> (use_arg_then "min_dist_ge") (fun fst_arg -> (use_arg_then "r_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "dy_def")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`w IN X ==> dist (w, y) = dy /\ w IN W`))) (term_tac (have_gen_tac ["w"](move ["inX"])))) (((((use_arg_then "X_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac)));
   ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "not_surrounded_imp_on_one_side_of_plane") (fun fst_arg -> (use_arg_then "fanW") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "yW") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "not_surr") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "not_iso") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC));
   (BETA_TAC THEN (case THEN (move ["b"])) THEN (case THEN (move ["b_n0"])) THEN (case THEN (move ["y_dot_b"])) THEN (move ["b_cond"]));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "perturbation_lemma") (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "b_n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "y_dot_b") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "X") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN ((THENL) (ANTS_TAC) [((move ["w"]) THEN (move ["wX"])); ALL_TAC]));
   ((((use_arg_then "b_cond")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "subX")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "real_gt")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Ckqowsa_3_points.dot_pos_lemma")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "inX")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "dy_le")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))));
   ((in_tac ["wl_props"] false (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] []))))) THEN ((repeat_tactic 1 9 (((use_arg_then "wl_props")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "yW")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "inX")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((use_arg_then "b_n0") (disch_tac [])) THEN (clear_assumption "b_n0") THEN ((use_arg_then "y_dot_b") (disch_tac [])) THEN (clear_assumption "y_dot_b") THEN ((use_arg_then "b_cond") (disch_tac [])) THEN (clear_assumption "b_cond") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]));
   (BETA_TAC THEN (case THEN (move ["u"])) THEN (case THEN (move ["norm_u"])) THEN (case THEN (move ["dist_uX"])) THEN (move ["dist_yu"]));
   ((fun arg_tac -> arg_tac (Arg_term (`mkseq (\i. if i = r then u else EL i wl) k`))) (term_tac (set_tac "ul")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`sizel ul = k`))) (term_tac (have_gen_tac [](move ["size_ul"])))) (((((use_arg_then "ul_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`EL r ul = u /\ (!i. i < k /\ ~(i = r) ==> EL i ul = EL i wl)`))) (term_tac (have_gen_tac [](move ["el_ul"]))));
   ((((((use_arg_then "ul_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "EL_mkseq")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac))) THEN (move ["i"]) THEN (move ["i_ineqs"])) THEN (((use_arg_then "EL_mkseq")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   (((use_arg_then "sup_comp") (disch_tac [])) THEN (clear_assumption "sup_comp") THEN ((use_arg_then "sup_sub") (disch_tac [])) THEN (clear_assumption "sup_sub") THEN ((use_arg_then "sup_set_def") (disch_tac [])) THEN (clear_assumption "sup_set_def") THEN ((use_arg_then "R_n_empty") (disch_tac [])) THEN (clear_assumption "R_n_empty") THEN ((use_arg_then "compactR") (disch_tac [])) THEN (clear_assumption "compactR") THEN ((use_arg_then "R_def") (disch_tac [])) THEN (clear_assumption "R_def") THEN ((use_arg_then "subV") (disch_tac [])) THEN (clear_assumption "subV") THEN ((use_arg_then "packV") (disch_tac [])) THEN (clear_assumption "packV") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]));
   (((use_arg_then "ul") (term_tac exists_tac)) THEN (split_tac));
   (((((use_arg_then "N_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_ul")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["i_lt"]));
   (((use_arg_then "wl'_props") (disch_tac [])) THEN (clear_assumption "wl'_props") THEN BETA_TAC THEN (case THEN (move ["_"])) THEN (((conv_thm_tac DISCH_THEN)(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((fun arg_tac -> arg_tac (Arg_term (`i = r`))) (disch_eq_tac "ir" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) THEN ((repeat_tactic 0 10 (((use_arg_then "ir")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "el_ul")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "y_eq")(gsym_then (thm_tac (new_rewrite [] []))))))) THEN (done_tac));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`min_dist_k r wl < min_dist_k r ul /\
        (!i. i < k /\ ~(i = r) /\ min_dist_k i wl <= dy ==> min_dist_k i wl <= min_dist_k i ul) /\
        (!i. i < k /\ ~(i = r) /\ dy < min_dist_k i wl ==> dy < min_dist_k i ul)`))) (term_tac (have_gen_tac []ALL_TAC))));
   (BETA_TAC THEN (case THEN (move ["dist_r"])) THEN (case THEN (move ["dist_le"])) THEN (move ["dist_gt"]));
   ((THENL_ROT (-1)) (split_tac));
   ((((use_arg_then "eq_sym")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "c_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then "min_k")(thm_tac (new_rewrite [] []))))));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`k = sizel (mkseq (\i. f i w) k)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [1] []))))))) ((((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   ((((use_arg_then "real_sorted_lt2") (disch_tac [])) THEN (clear_assumption "real_sorted_lt2") THEN (DISCH_THEN apply_tac)) THEN (((fun arg_tac -> arg_tac (Arg_term (`mkseq (\i. f i (vector_of_list 3 ul)) k`))) (term_tac exists_tac)) THEN ((use_arg_then "r") (term_tac exists_tac))));
   ((repeat_tactic 1 9 (((use_arg_then "real_merge_sort")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "size_mkseq")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "r_lt")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "EL_mkseq")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)));
   (((((use_arg_then "f_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (repeat_tactic 1 9 (((use_arg_then "o_THM")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "w_eq")(thm_tac (new_rewrite [] []))))) THEN (split_tac));
   (((((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "size_ul")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((fun arg_tac ->(use_arg_then "size_ul")(fun tmp_arg1 -> (use_arg_then "size_eq")(fun tmp_arg2 -> arg_tac (Arg_theorem (CONJ (get_arg_thm tmp_arg1) (get_arg_thm tmp_arg2))))))(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((split_tac) THEN (move ["i"]) THEN (case THEN (move ["i_lt"]))) THEN ((repeat_tactic 1 9 (((use_arg_then "EL_mkseq")(thm_tac (new_rewrite [] []))))) THEN ((simp_tac THEN TRY done_tac)) THEN (((use_arg_then "size_eq")(gsym_then (thm_tac (new_rewrite [1; 2; 3] []))))) THEN (((use_arg_then "size_ul")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size")(thm_tac (new_rewrite [] []))))) THEN (((repeat_tactic 1 9 (((use_arg_then "vector_of_list_left_inverse")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "DIMINDEX_3")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (repeat_tactic 0 10 (((fun arg_tac ->(use_arg_then "size_ul")(fun tmp_arg1 -> (use_arg_then "size_eq")(fun tmp_arg2 -> arg_tac (Arg_theorem (CONJ (get_arg_thm tmp_arg1) (get_arg_thm tmp_arg2))))))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "dy_def")(thm_tac (new_rewrite [] []))))) THEN (move ["h"])));
   ((THENL_LAST) (((fun arg_tac -> arg_tac (Arg_term (`i = r`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) ((((use_arg_then "dist_le")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_LAST) (((fun arg_tac -> arg_tac (Arg_term (`i = r`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) ((((use_arg_then "dist_gt")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dy_def")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((((use_arg_then "S_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_ul")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "in_ball_annulus")(thm_tac (new_rewrite [] []))))) THEN ((THENL) (split_tac) [(move ["v"]); ALL_TAC]));
   (((((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EXISTS_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_ul")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["i"])) THEN (case THEN (move ["i_lt"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "wl_props") (disch_tac [])) THEN (clear_assumption "wl_props") THEN BETA_TAC) THEN (((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["in_ba"])) THEN (move ["_"])));
   ((THENL_LAST) (((fun arg_tac -> arg_tac (Arg_term (`i = r`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) (((repeat_tactic 1 9 (((use_arg_then "el_ul")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "in_ball_annulus")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "in_ba")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   (((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "el_ul")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "norm_u")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "in_ball_annulus")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "in_ba")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`!i. i < sizel ul ==> &2 <= min_dist_k i ul`))) (term_tac (have_gen_tac [](move ["ge2"])))));
   ((((((fun arg_tac -> (use_arg_then "min_dist_imp_packing") (fun fst_arg -> (use_arg_then "ge2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "min_dist_imp_uniq")(thm_tac (new_rewrite [] []))))) THEN (move ["i"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "ge2") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "size_ul")(thm_tac (new_rewrite [] [])))) THEN (move ["i"]) THEN (move ["i_lt"]));
   (((fun arg_tac -> arg_tac (Arg_term (`i = r`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN ((use_arg_then "REAL_LE_TRANS") (thm_tac apply_tac)) THEN ((use_arg_then "dy") (term_tac exists_tac)) THEN ((((use_arg_then "dy_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "min_dist_ge")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`dy < min_dist_k i wl`))) (disch_eq_tac "neq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   (((use_arg_then "REAL_LE_TRANS") (thm_tac apply_tac)) THEN ((use_arg_then "dy") (term_tac exists_tac)) THEN ((((use_arg_then "dy_def")(gsym_then (thm_tac (new_rewrite [1] []))))) THEN (((use_arg_then "min_dist_ge")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "dist_gt")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((use_arg_then "REAL_LE_TRANS") (thm_tac apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`min_dist_k i wl`))) (term_tac exists_tac)) THEN ((((use_arg_then "min_dist_ge")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "dist_le")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_NOT_LT")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((use_arg_then "C0") (disch_tac [])) THEN (clear_assumption "C0") THEN ((use_arg_then "sup_n_empty") (disch_tac [])) THEN (clear_assumption "sup_n_empty") THEN ((use_arg_then "c_cont") (disch_tac [])) THEN (clear_assumption "c_cont") THEN ((use_arg_then "c_def") (disch_tac [])) THEN (clear_assumption "c_def") THEN ((use_arg_then "f_def") (disch_tac [])) THEN (clear_assumption "f_def") THEN ((use_arg_then "finV") (disch_tac [])) THEN (clear_assumption "finV") THEN ((use_arg_then "N_def") (disch_tac [])) THEN (clear_assumption "N_def") THEN ((use_arg_then "S_def") (disch_tac [])) THEN (clear_assumption "S_def") THEN ((use_arg_then "k_def") (disch_tac [])) THEN (clear_assumption "k_def") THEN ((use_arg_then "dim_ge") (disch_tac [])) THEN (clear_assumption "dim_ge") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]));
   (((use_arg_then "not_surr") (disch_tac [])) THEN (clear_assumption "not_surr") THEN ((use_arg_then "not_iso") (disch_tac [])) THEN (clear_assumption "not_iso") THEN ((use_arg_then "w_in_all") (disch_tac [])) THEN (clear_assumption "w_in_all") THEN ((use_arg_then "wl'_props") (disch_tac [])) THEN (clear_assumption "wl'_props") THEN ((use_arg_then "wl_props") (disch_tac [])) THEN (clear_assumption "wl_props") THEN ((use_arg_then "w_eq") (disch_tac [])) THEN (clear_assumption "w_eq") THEN ((use_arg_then "w_in") (disch_tac [])) THEN (clear_assumption "w_in") THEN ((use_arg_then "Ck_sub") (disch_tac [])) THEN (clear_assumption "Ck_sub") THEN ((use_arg_then "C_sub") (disch_tac [])) THEN (clear_assumption "C_sub") THEN ((use_arg_then "C_props") (disch_tac [])) THEN (clear_assumption "C_props") THEN ((use_arg_then "CS") (disch_tac [])) THEN (clear_assumption "CS") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]) THEN (move ["_"]));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`2 <= sizel ul /\ 2 <= sizel wl`))) (term_tac (have_gen_tac [](case THEN ((move ["ul_ge2"]) THEN (move ["wl_ge2"])))))) ((ALL_TAC) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`m < k /\ ~(m = r) ==> dy < dist (EL m wl, u)`))) (term_tac (have_gen_tac ["m"](move ["dist_m_u"]))));
   (BETA_TAC THEN (case THEN ((move ["m_lt"]) THEN (move ["m_neq"]))));
   (((fun arg_tac -> arg_tac (Arg_term (`EL m wl IN X`))) (disch_eq_tac "el_inX" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LET_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LET_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`dist (y, EL m wl)`))) (term_tac exists_tac)));
   (((((use_arg_then "dist_uX")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inX")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`EL m wl`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "u") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "y") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((use_arg_then "dist_yu") (disch_tac [])) THEN (clear_assumption "dist_yu") THEN BETA_TAC) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))));
   ((THENL_LAST) (((fun arg_tac -> (fun arg_tac -> (use_arg_then "e_cond") (fun fst_arg -> (use_arg_then "m_lt") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "m_neq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) ((arith_tac) THEN (done_tac)));
   ((((use_arg_then "el_inX") (disch_tac [])) THEN (clear_assumption "el_inX") THEN ((use_arg_then "contraR") (disch_tac [])) THEN (clear_assumption "contraR") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN ((move ["dist_eq"]) THEN (move ["_"])))));
   (((((use_arg_then "X_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_SET_OF_LIST")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "MEM_EL")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "size")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "size_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (split_tac);
   ((((fun arg_tac -> (fun arg_tac -> (use_arg_then "min_dist_exists") (fun fst_arg -> (use_arg_then "ul_ge2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "r") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "size_ul")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN (move ["m_lt"])) THEN (case THEN (move ["m_neq"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))));
   (((repeat_tactic 1 9 (((use_arg_then "el_ul")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "dy_def")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_m_u")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((THENL_ROT (-1)) (((split_tac) THEN (move ["i"]) THEN (case THEN (move ["i_lt"])) THEN (case THEN (move ["i_neq"])) THEN (move ["ineq"])) THEN (((fun arg_tac -> (fun arg_tac -> (use_arg_then "min_dist_exists") (fun fst_arg -> (use_arg_then "ul_ge2") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "i") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "size_ul")(thm_tac (new_rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN (move ["m_lt"])) THEN (case THEN (move ["m_neq"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((THENL_FIRST) (((fun arg_tac -> arg_tac (Arg_term (`m = r`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) (((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "el_ul")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_m_u")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   (((repeat_tactic 1 9 (((use_arg_then "el_ul")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN ((use_arg_then "REAL_LTE_TRANS") (thm_tac apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`min_dist_k i wl`))) (term_tac exists_tac)));
   (((((use_arg_then "ineq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "size_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`m = r`))) (disch_eq_tac "mr" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   (((((use_arg_then "mr")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "el_ul")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] []))))) THEN ((use_arg_then "REAL_LE_TRANS") (thm_tac apply_tac)) THEN ((use_arg_then "dy") (term_tac exists_tac)));
   (((((use_arg_then "ineq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "dist_m_u")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((repeat_tactic 1 9 (((use_arg_then "el_ul")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "min_dist_min")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "size_eq")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
];;

(* Finalization of the section FJLBXS *)
let sup_in_unions = finalize_theorem sup_in_unions;;
let type150_ineq = finalize_theorem type150_ineq;;
let scriptL_attains_max_in_ball_annulus = finalize_theorem scriptL_attains_max_in_ball_annulus;;
let FJLBXS = finalize_theorem FJLBXS;;
end_section "FJLBXS";;

(* Section FCDJDOT *)
begin_section "FCDJDOT";;

(* Lemma not_surrounded_ECTC *)
let not_surrounded_ECTC = section_proof ["V";"v"]
`packing V /\ V SUBSET ball_annulus /\
        v IN V /\ ~(surrounded_node (V, ECTC V) v) ==>
        (?W f. BIJ f V W /\ packing W /\ W SUBSET ball_annulus /\
        (!u. u IN V ==> norm u = norm (f u)) /\
        set_of_edge (f v) W (ECTC W) = {})`
[
   (BETA_TAC THEN (case THEN (move ["packV"])) THEN (case THEN (move ["subV"])) THEN (case THEN (move ["vV"])) THEN (move ["n_surr"]));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then "finite_packing_ball_annulus") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["finV"])));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "Tame_general.UBHDEUU2") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN ((THENL) (ANTS_TAC) [ALL_TAC; (move ["fanV"])]));
   ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((use_arg_then "v") (term_tac exists_tac)) THEN (done_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`set_of_edge v V (ECTC V) = {}`))) (disch_eq_tac "n_iso" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((((use_arg_then "V") (term_tac exists_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`I`))) (term_tac exists_tac))) THEN ((((use_arg_then "Hypermap.I_BIJ")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "I_THM")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "not_surrounded_imp_on_one_side_of_plane") (fun fst_arg -> (use_arg_then "fanV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "n_iso") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "n_surr") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["n"])) THEN (case THEN (move ["n_n0"])) THEN (case THEN (move ["v_dot_n"])) THEN (move ["w_dot_n"]));
   ((fun arg_tac -> arg_tac (Arg_term (`set_of_edge v V (ECTC V)`))) (term_tac (set_tac "X")));
   ((fun arg_tac -> arg_tac (Arg_term (`(V DELETE v) DIFF X`))) (term_tac (set_tac "Y")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`FINITE Y`))) (term_tac (have_gen_tac [](move ["finY"])))) (((((use_arg_then "Y_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "FINITE_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "FINITE_DELETE")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`y IN Y <=> y IN V /\ &2 < dist (y, v)`))) (term_tac (have_gen_tac ["y"](move ["inY"]))));
   ((THENL_ROT (-1)) (((((use_arg_then "Y_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "X_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "in_set_of_edge_ECTC")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "negb_and")(thm_tac (new_rewrite [] []))))) THEN (split_tac)));
   ((THENL_LAST) ((BETA_TAC THEN (case THEN ((move ["yV"]) THEN (move ["dist_gt"])))) THEN ((((use_arg_then "yV")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (split_tac)) ((((use_arg_then "dist_gt") (disch_tac [])) THEN (clear_assumption "dist_gt") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((((use_arg_then "dist_gt") (disch_tac [])) THEN (clear_assumption "dist_gt") THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "DIST_REFL")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((BETA_TAC THEN (case THEN ALL_TAC) THEN (case THEN (move ["yV"])) THEN (move ["ynv"])) THEN (((((use_arg_then "yV")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "REAL_LT_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eq_sym")(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   ((in_tac ["packV"] false (((use_arg_then "packing")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "packV") (disch_tac [])) THEN (clear_assumption "packV") THEN (DISCH_THEN apply_tac)) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`x IN X <=> x IN V /\ dist (x, v) = &2`))) (term_tac (have_gen_tac ["x"](move ["inX"]))));
   (((((use_arg_then "X_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "in_set_of_edge_ECTC")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`y IN V /\ ~(y = v) /\ ~(y IN Y) ==> y IN X`))) (term_tac (have_gen_tac ["y"](move ["not_inY"]))));
   ((((((use_arg_then "Y_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_DIFF")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "negb_and")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "negbK")(thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`if Y = {} then &1 else min (&1) (inf (IMAGE (\x. dist (x,v) - &2) Y))`))) (term_tac (set_tac "e")));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 < e`))) (term_tac (have_gen_tac [](move ["e_gt0"]))));
   ((THENL_FIRST) ((((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> arg_tac (Arg_term (`Y = {}`))) (disch_eq_tac "Y0" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac))) (((use_arg_then "REAL_LT_01") (disch_tac [])) THEN (clear_assumption "REAL_LT_01") THEN (exact_tac)));
   ((((use_arg_then "REAL_LT_MIN")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_01")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "REAL_LT_INF_FINITE")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "FINITE_IMAGE")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "IMAGE_EQ_EMPTY")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["x"]) THEN (case THEN (move ["y"])) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "inY")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`e <= &1`))) (term_tac (have_gen_tac [](move ["e_le1"])))) ((((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac)));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "perturbation_lemma") (fun fst_arg -> (use_arg_then "X") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "e_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "n_n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v_dot_n") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC));
   ((BETA_TAC THEN (move ["w"]) THEN (move ["wX"])) THEN ((((use_arg_then "w_dot_n")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "wX") (disch_tac [])) THEN (clear_assumption "wX") THEN ((use_arg_then "subV") (disch_tac [])) THEN (clear_assumption "subV") THEN BETA_TAC) THEN (((((use_arg_then "X_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "in_set_of_edge_ECTC")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "real_gt")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (move ["subV"]) THEN (case THEN ((move ["wV"]) THEN (move ["dist_eq"])))));
   ((((use_arg_then "Ckqowsa_3_points.dot_pos_lemma") (disch_tac [])) THEN (clear_assumption "Ckqowsa_3_points.dot_pos_lemma") THEN (DISCH_THEN apply_tac)) THEN ((repeat_tactic 1 9 (((use_arg_then "subV")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_eq")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   (BETA_TAC THEN (case THEN (move ["u"])) THEN (case THEN (move ["norm_eq"])) THEN (case THEN (move ["dist_lt"])) THEN (move ["dist_vu"]));
   ((fun arg_tac -> arg_tac (Arg_term (`~(v = u)`))) (term_tac (have_gen_tac [](move ["n_vu"]))));
   ((((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "negbK")(thm_tac (new_rewrite [] [])))) THEN (move ["v_eq_u"])));
   ((((use_arg_then "n_iso") (disch_tac [])) THEN (clear_assumption "n_iso") THEN BETA_TAC) THEN ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["x"])) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "dist_lt") (thm_tac (match_mp_then snd_th MP_TAC))))));
   (((((use_arg_then "v_eq_u")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`~(u IN V)`))) (term_tac (have_gen_tac [](move ["nuV"]))));
   ((((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "negbK")(thm_tac (new_rewrite [] [])))) THEN (move ["uV"])) THEN (in_tac ["packV"] false (((use_arg_then "packing")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "e_le1") (disch_tac [])) THEN (clear_assumption "e_le1") THEN ((use_arg_then "dist_vu") (disch_tac [])) THEN (clear_assumption "dist_vu") THEN ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "packV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "uV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "n_vu") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`u INSERT (V DELETE v)`))) (term_tac (set_tac "W")));
   ((fun arg_tac -> arg_tac (Arg_term (`\x. if x = v then u else x`))) (term_tac (set_tac "f")));
   ((((use_arg_then "W") (term_tac exists_tac)) THEN ((use_arg_then "f") (term_tac exists_tac))) THEN (split_tac));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`~(CARD V = 0)`))) (term_tac (have_gen_tac [](move ["card_n0"])))) (((((use_arg_then "CARD_EQ_0")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ((use_arg_then "v") (term_tac exists_tac)) THEN (done_tac)));
   ((((use_arg_then "finite_surj_eq_bij")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "FINITE_INSERT")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "CARD_CLAUSES")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "FINITE_DELETE")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "finV")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "nuV")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "CARD_DELETE")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "vV")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (((use_arg_then "card_n0") (disch_tac [])) THEN (clear_assumption "card_n0") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "SURJ")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "f_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN ((THENL) (split_tac) [((move ["x"]) THEN (move ["xV"])); ALL_TAC]));
   ((((fun arg_tac -> arg_tac (Arg_term (`x = v`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) THEN ((((use_arg_then "xV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andTb")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((THENL) (BETA_TAC THEN (move ["x"]) THEN ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (case THEN ((move ["xV"]) THEN (move ["xnv"])))])) [((use_arg_then "v") (term_tac exists_tac)); ((use_arg_then "x") (term_tac exists_tac))]) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`x IN V ==> norm x = norm (f x)`))) (term_tac (have_gen_tac ["x"](move ["norm_eqV"]))));
   ((BETA_TAC THEN (move ["xV"])) THEN ((((use_arg_then "f_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac)) THEN (((fun arg_tac -> arg_tac (Arg_term (`x = v`))) (disch_eq_tac "eq" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)) THEN ((((use_arg_then "eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "norm_eq")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`!x. x IN V /\ ~(x = v) ==> &2 < dist (x, u)`))) (term_tac (have_gen_tac [](move ["dist_gt2"]))));
   ((BETA_TAC THEN (move ["x"]) THEN (case THEN ((move ["xV"]) THEN (move ["xnv"])))) THEN (in_tac ["packV"] false (((use_arg_then "packing")(thm_tac (new_rewrite [] []))))));
   ((THENL_ROT (-1)) (((fun arg_tac -> arg_tac (Arg_term (`x IN Y`))) (disch_eq_tac "xY" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac)));
   (((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] []))));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "not_inY") (fun fst_arg -> (use_arg_then "xY") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "xV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "xnv") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "dist_lt") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN ((DISCH_THEN (fun snd_th -> (use_arg_then "REAL_LET_TRANS") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (DISCH_THEN apply_tac)) THEN (((use_arg_then "packV") (disch_tac [])) THEN (clear_assumption "packV") THEN (DISCH_THEN apply_tac)) THEN (done_tac));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`~(Y = {})`))) (term_tac (have_gen_tac [](move ["Yn0"])))) ((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((use_arg_then "x") (term_tac exists_tac)) THEN (done_tac)));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "packV") (fun fst_arg -> (use_arg_then "xV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "xnv") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((use_arg_then "dist_vu") (disch_tac [])) THEN (clear_assumption "dist_vu") THEN ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "u") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((fun arg_tac -> (use_arg_then "DIST_SYM") (fun fst_arg -> (use_arg_then "v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`e <= dist (x, v) - &2`))) (term_tac (have_gen_tac []ALL_TAC)))) ((arith_tac) THEN (done_tac)));
   (((((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Yn0")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "REAL_MIN_LE")(thm_tac (new_rewrite [] []))))) THEN (DISJ2_TAC));
   ((((use_arg_then "REAL_INF_LE_FINITE")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "FINITE_IMAGE")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "IMAGE_EQ_EMPTY")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   (((fun arg_tac -> arg_tac (Arg_term (`dist (x, v) - &2`))) (term_tac exists_tac)) THEN ((((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ((use_arg_then "x") (term_tac exists_tac)) THEN (done_tac));
   ((((use_arg_then "packing")(thm_tac (new_rewrite [] [])))) THEN ((THENL) (split_tac) [((move ["x"]) THEN (move ["y"])); ALL_TAC]));
   (((((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))))) THEN (in_tac ["packV"] false (((use_arg_then "packing")(thm_tac (new_rewrite [] []))))));
   ((THENL_LAST) (BETA_TAC THEN (case THEN ALL_TAC) THEN ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (case THEN ((move ["xV"]) THEN (move ["xnv"])))]) THEN (case THEN ALL_TAC) THEN ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (case THEN ((move ["yV"]) THEN (move ["ynv"])))]) THEN ((TRY done_tac)) THEN (move ["neq"])) ((((use_arg_then "packV") (disch_tac [])) THEN (clear_assumption "packV") THEN (DISCH_THEN apply_tac)) THEN (done_tac)));
   (((((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_gt2")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "dist_gt2")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((in_tac ["subV"] true ((repeat_tactic 1 9 (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "in_ball_annulus")(thm_tac (new_rewrite [] []))))))) THEN ((THENL) (split_tac) [(move ["x"]); ALL_TAC]));
   ((((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))));
   (((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (case THEN ((move ["xV"]) THEN (move ["xnv"])))]) THEN ((repeat_tactic 0 10 (((use_arg_then "norm_eq")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "subV")(thm_tac (new_rewrite [] [])))))) THEN (done_tac));
   (((THENL) (split_tac) [((move ["x"]) THEN (DISCH_THEN (fun snd_th -> (use_arg_then "norm_eqV") (thm_tac (match_mp_then snd_th MP_TAC))))); ALL_TAC]) THEN ((TRY done_tac)));
   (((((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] [])))) THEN (move ["x"])) THEN ((((use_arg_then "in_set_of_edge_ECTC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "f_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)) THEN (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "dist_gt2") (disch_tac [])) THEN (clear_assumption "dist_gt2") THEN ((use_arg_then "contraTF") (disch_tac [])) THEN (clear_assumption "contraTF") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "NOT_FORALL_THM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] []))))));
   ((THENL_FIRST) (BETA_TAC THEN (case THEN ALL_TAC) THEN ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [1] [])))); (case THEN ((move ["xV"]) THEN (move ["xnv"]) THEN (move ["dist_eq2"])))])) ((((use_arg_then "DIST_REFL")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac)));
   (((use_arg_then "x") (term_tac exists_tac)) THEN (repeat_tactic 1 9 (((split_tac) THEN ((TRY done_tac))))) THEN ((((use_arg_then "dist_eq2")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_REFL")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Lemma isolated_node_norm_ECTC *)
let isolated_node_norm_ECTC = section_proof ["V";"v"]
`packing V /\ V SUBSET ball_annulus /\
        (!W. packing W /\ W SUBSET ball_annulus ==> scriptL W <= scriptL V) /\
        v IN V /\ set_of_edge v V (ECTC V) = {}
        ==> norm v = &2`
[
   (BETA_TAC THEN (case THEN (move ["packV"])) THEN (case THEN (move ["subV"])) THEN (case THEN (move ["maxV"])) THEN (case THEN (move ["vV"])) THEN (move ["edges0"]));
   ((THENL) (((fun arg_tac -> (fun arg_tac -> (use_arg_then "REAL_LET_TOTAL") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`norm v`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&2`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN case) [ALL_TAC; (move ["norm_gt2"])]);
   ((in_tac ["subV"] false (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "subV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((use_arg_then "in_ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then "finite_packing_ball_annulus") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["finV"])));
   ((fun arg_tac -> arg_tac (Arg_term (`{dist (u, v) - &2 | u | u IN V /\ ~(u = v)}`))) (term_tac (set_tac "D")));
   ((fun arg_tac -> arg_tac (Arg_term (`FINITE D`))) (term_tac (have_gen_tac [](move ["finD"]))));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`D = IMAGE (\x. dist (x,v) - &2) (V DELETE v)`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))))) (((((use_arg_then "FINITE_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "FINITE_DELETE")(thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   (((((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_IMAGE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "D_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] []))))) THEN (move ["x"]));
   (((THENL) (split_tac) [((case THEN (move ["u"])) THEN (case THEN (move ["h"])) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))); ((case THEN (move ["u"])) THEN (case THEN (move ["x_eq"])) THEN (move ["h"]))]) THEN ((use_arg_then "u") (term_tac exists_tac)) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`~(D = {})`))) (term_tac (have_gen_tac [](move ["D_n0"]))));
   (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`~(V DELETE v = {})`))) (term_tac (have_gen_tac []ALL_TAC))));
   (((repeat_tactic 1 9 (((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] []))))) THEN ALL_TAC THEN (case THEN (move ["u"])) THEN (case THEN ((move ["uV"]) THEN (move ["unv"]))));
   (((fun arg_tac -> arg_tac (Arg_term (`dist (u, v) - &2`))) (term_tac exists_tac)) THEN ((((use_arg_then "D_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN ((use_arg_then "u") (term_tac exists_tac)) THEN (done_tac));
   ((((use_arg_then "maxV") (disch_tac [])) THEN (clear_assumption "maxV") THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac)) THEN (((((use_arg_then "NOT_FORALL_THM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "negb_and")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "negbK")(thm_tac (new_rewrite [] []))))) THEN (move ["inV"])));
   ((fun arg_tac -> arg_tac (Arg_term (`(&2 / norm v) % v`))) (term_tac (set_tac "w")));
   ((fun arg_tac -> arg_tac (Arg_term (`norm w = &2`))) (term_tac (have_gen_tac [](move ["norm_w"]))));
   ((((use_arg_then "w_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NORM_MUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_MUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_INV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_NORM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "REAL_MUL_LINV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "norm_gt2") (disch_tac [])) THEN (clear_assumption "norm_gt2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`~(w = --w:real^3)`))) (term_tac (have_gen_tac [](move ["neg_w"]))));
   ((((use_arg_then "norm_w") (disch_tac [])) THEN (clear_assumption "norm_w") THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac)) THEN ((((use_arg_then "vector_eq_neg")(thm_tac (new_rewrite [] [])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NORM_0")(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   (((fun arg_tac -> arg_tac (Arg_term (`{w:real^3, --w}`))) (term_tac exists_tac)) THEN ((((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LE")(thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> arg_tac (Arg_term (`V = {v}`))) (term_tac (have_gen_tac [](((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))));
   ((((((use_arg_then "EXTENSION")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_SING")(thm_tac (new_rewrite [] []))))) THEN (move ["x"])) THEN ((THENL) (split_tac) [(move ["xV"]); ((((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))) THEN ((TRY done_tac)))]));
   ((((fun arg_tac -> (use_arg_then "inV") (fun fst_arg -> (use_arg_then "x") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "xV")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (done_tac));
   ((THENL_ROT (-1)) (split_tac));
   ((repeat_tactic 1 9 (((use_arg_then "Tame_defs.scriptL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_SING")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUM_CLAUSES")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "FINITE_SING")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_SING")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_SING")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "neg_w")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((use_arg_then "NORM_NEG")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "norm_w")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "Sphere.lmfun") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&2 / &2`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] [])))));
   ((in_tac ["subV"] false (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> (use_arg_then "lmfun_in_ball_annulus") (fun fst_arg -> (fun arg_tac -> (use_arg_then "subV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   (((((use_arg_then "packing")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "NOT_IN_EMPTY")(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "in_ball_annulus")(thm_tac (new_rewrite [] []))))) THEN (split_tac));
   ((BETA_TAC THEN (move ["x"]) THEN (move ["y"]) THEN (case THEN ALL_TAC) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (case THEN ALL_TAC) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN ((repeat_tactic 0 10 (((fun arg_tac -> (use_arg_then "DIST_SYM") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`--w:real^3`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "dist")(thm_tac (new_rewrite [] []))))) THEN ((((fun arg_tac -> arg_tac (Arg_theorem (VECTOR_ARITH `w - --w = &2 % w:real^3`)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NORM_MUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "norm_w")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   ((BETA_TAC THEN (move ["x"]) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))))) THEN ((repeat_tactic 0 10 (((use_arg_then "NORM_NEG")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "norm_w")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`min (inf D) (norm v - &2) / norm v`))) (term_tac (set_tac "e")));
   ((THENL_FIRST) ((fun arg_tac -> arg_tac (Arg_term (`&0 < norm v`))) (term_tac (have_gen_tac [](move ["norm_gt0"])))) ((((use_arg_then "norm_gt2") (disch_tac [])) THEN (clear_assumption "norm_gt2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 < inf D`))) (term_tac (have_gen_tac [](move ["inf_gt0"]))));
   (((((fun arg_tac -> (fun arg_tac -> (use_arg_then "REAL_LT_INF_FINITE") (fun fst_arg -> (use_arg_then "finD") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "D_n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "D_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (move ["x"]) THEN (case THEN (move ["u"])) THEN (case THEN (case THEN ((move ["uV"]) THEN (move ["nuv"])))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "edges0") (disch_tac [])) THEN (clear_assumption "edges0") THEN ((use_arg_then "contraLR") (disch_tac [])) THEN (clear_assumption "contraLR") THEN (DISCH_THEN apply_tac)) THEN (((((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_SUB_LT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LT")(thm_tac (new_rewrite [] []))))) THEN (move ["dist_le"])));
   (((use_arg_then "u") (term_tac exists_tac)) THEN ((((use_arg_then "set_of_edge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ECTC")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "uV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "v") (term_tac exists_tac)) THEN ((use_arg_then "u") (term_tac exists_tac))) THEN (repeat_tactic 1 9 (((split_tac) THEN ((TRY done_tac))))));
   ((in_tac ["packV"] false (((use_arg_then "packing")(thm_tac (new_rewrite [] []))))) THEN ((((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LE_ANTISYM")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "dist_le")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "packV")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`&0 < e`))) (term_tac (have_gen_tac [](move ["e_gt0"]))));
   ((((((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LT_DIV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_LT_MIN")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inf_gt0")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "norm_gt2") (disch_tac [])) THEN (clear_assumption "norm_gt2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`e < &1`))) (term_tac (have_gen_tac [](move ["e_lt1"]))));
   (((((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Arc_properties.REAL_LT_ONE_LDIV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MIN_LT")(thm_tac (new_rewrite [] []))))) THEN (split_tac) THEN (((use_arg_then "norm_gt2") (disch_tac [])) THEN (clear_assumption "norm_gt2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`(&1 - e) % v`))) (term_tac (set_tac "w")));
   ((fun arg_tac -> arg_tac (Arg_term (`norm w < norm v`))) (term_tac (have_gen_tac [](move ["norm_w_lt"]))));
   ((((use_arg_then "w_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NORM_MUL")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "REAL_MUL_LID") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`norm v`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [2] []))))));
   (((((use_arg_then "REAL_LT_RMUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "norm_gt0")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "e_gt0") (disch_tac [])) THEN (clear_assumption "e_gt0") THEN ((use_arg_then "e_lt1") (disch_tac [])) THEN (clear_assumption "e_lt1") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`&2 <= norm w`))) (term_tac (have_gen_tac [](move ["norm_w_ge2"]))));
   ((((use_arg_then "w_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NORM_MUL")(thm_tac (new_rewrite [] [])))) THEN (((fun arg_tac -> (use_arg_then "REAL_DIV_1") (fun fst_arg -> (fun arg_tac -> arg_tac (Arg_term (`&1`))) (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (GEN_ALL RAT_LEMMA3)))(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "norm_gt0")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 0 10 (((use_arg_then "REAL_LT_01")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((use_arg_then "REAL_INV_1")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "REAL_MUL_LID")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MUL_RID")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_MUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_INV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_NORM")(thm_tac (new_rewrite [] [])))));
   (((((use_arg_then "REAL_MUL_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MUL_LINV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((fun arg_tac -> (use_arg_then "REAL_POS_NZ") (fun fst_arg -> (use_arg_then "norm_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac))) THEN (arith_tac) THEN (done_tac));
   (in_tac ["subV"] false ((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "in_ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> arg_tac (Arg_term (`dist (v, w) = min (inf D) (norm v - &2)`))) (term_tac (have_gen_tac [](move ["d_vw"]))));
   ((((use_arg_then "dist")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "w_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((fun arg_tac -> arg_tac (Arg_theorem (VECTOR_ARITH `!v. v - (&1 - e) % v = e % v`)))(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NORM_MUL")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "e_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_MUL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_INV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_ABS_NORM")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "REAL_MUL_ASSOC")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_MUL_LINV")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((fun arg_tac -> (use_arg_then "REAL_POS_NZ") (fun fst_arg -> (use_arg_then "norm_gt0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)) THEN (((use_arg_then "REAL_MUL_RID")(thm_tac (new_rewrite [] [])))));
   ((((use_arg_then "norm_gt2") (disch_tac [])) THEN (clear_assumption "norm_gt2") THEN ((use_arg_then "inf_gt0") (disch_tac [])) THEN (clear_assumption "inf_gt0") THEN ((fun arg_tac -> (use_arg_then "subV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`~(w IN V DELETE v)`))) (term_tac (have_gen_tac [](move ["in_w"]))));
   (((((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "negb_and")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "negbK")(thm_tac (new_rewrite [] []))))) THEN (DISJ1_TAC));
   ((((use_arg_then "packV") (disch_tac [])) THEN (clear_assumption "packV") THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac) THEN (move ["wV"])) THEN ((((use_arg_then "packing")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 1 9 (((use_arg_then "NOT_FORALL_THM")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] []))))));
   ((((use_arg_then "v") (term_tac exists_tac)) THEN ((use_arg_then "w") (term_tac exists_tac))) THEN (repeat_tactic 1 9 (((split_tac) THEN ((TRY done_tac))))));
   ((((use_arg_then "norm_w_lt") (disch_tac [])) THEN (clear_assumption "norm_w_lt") THEN ((use_arg_then "contraL") (disch_tac [])) THEN (clear_assumption "contraL") THEN (DISCH_THEN apply_tac) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "REAL_LT_REFL")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((((use_arg_then "d_vw")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inf_gt0") (disch_tac [])) THEN (clear_assumption "inf_gt0") THEN ((use_arg_then "norm_gt2") (disch_tac [])) THEN (clear_assumption "norm_gt2") THEN ((fun arg_tac -> (use_arg_then "subV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (arith_tac) THEN (done_tac));
   ((fun arg_tac -> arg_tac (Arg_term (`w INSERT (V DELETE v)`))) (term_tac (set_tac "W")));
   ((((use_arg_then "maxV") (disch_tac [])) THEN (clear_assumption "maxV") THEN ((use_arg_then "contraLR") (disch_tac [])) THEN (clear_assumption "contraLR") THEN (DISCH_THEN apply_tac) THEN (move ["_"])) THEN ((((use_arg_then "NOT_FORALL_THM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_IMP")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_NOT_LE")(thm_tac (new_rewrite [] []))))));
   ((THENL_ROT (-1)) (((use_arg_then "W") (term_tac exists_tac)) THEN (split_tac)));
   ((repeat_tactic 1 9 (((use_arg_then "Tame_defs.scriptL")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "SUM_CLAUSES")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "FINITE_DELETE")(thm_tac (new_rewrite [] []))))) THEN ((TRY done_tac)));
   ((((use_arg_then "in_w")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "SUM_DELETE")(thm_tac (new_rewrite [] [])))) THEN ((simp_tac THEN TRY done_tac)));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`lmfun (norm v / &2) < lmfun (norm w / &2)`))) (term_tac (have_gen_tac []ALL_TAC)))) ((arith_tac) THEN (done_tac)));
   ((((use_arg_then "norm_w_lt") (disch_tac [])) THEN (clear_assumption "norm_w_lt") THEN ((fun arg_tac -> (use_arg_then "subV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then "Sphere.lmfun")(thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] []))))) THEN (arith_tac) THEN (done_tac));
   ((THENL_ROT (-1)) (((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "packing")(thm_tac (new_rewrite [] []))))) THEN ((THENL) (split_tac) [((move ["x"]) THEN (move ["y"])); (move ["x"])])));
   ((((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "in_ball_annulus")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "Sphere.h0")(thm_tac (new_rewrite [] [])))));
   ((THENL_FIRST) ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); ALL_TAC]) ((((fun arg_tac -> (use_arg_then "subV") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((use_arg_then "norm_w_lt") (disch_tac [])) THEN (clear_assumption "norm_w_lt") THEN ((use_arg_then "norm_w_ge2") (disch_tac [])) THEN (clear_assumption "norm_w_ge2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)));
   ((BETA_TAC THEN (case THEN (DISCH_THEN (fun snd_th -> (use_arg_then "subV") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (case THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((((use_arg_then "W_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_INSERT")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "IN_DELETE")(thm_tac (new_rewrite [] [])))))) THEN (in_tac ["packV"] false (((use_arg_then "packing")(thm_tac (new_rewrite [] []))))));
   ((fun arg_tac -> arg_tac (Arg_term (`z IN V /\ ~(z = v) ==> &2 <= dist (z, w)`))) (term_tac (have_gen_tac ["z"](move ["h"]))));
   ((THENL_ROT (-1)) ((BETA_TAC THEN (case THEN ((move ["zV"]) THEN (move ["znv"])))) THEN (((use_arg_then "REAL_LE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`dist (z, v) - dist (v, w)`))) (term_tac exists_tac)) THEN (split_tac)));
   ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "DIST_TRIANGLE") (fun fst_arg -> (use_arg_then "z") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "w") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (((fun arg_tac -> (use_arg_then "DIST_SYM") (fun fst_arg -> (use_arg_then "w") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac));
   ((((use_arg_then "REAL_LE_TRANS") (disch_tac [])) THEN (clear_assumption "REAL_LE_TRANS") THEN (DISCH_THEN apply_tac)) THEN ((fun arg_tac -> arg_tac (Arg_term (`dist (z, v) - inf D`))) (term_tac exists_tac)));
   ((THENL_LAST) ((((use_arg_then "d_vw")(thm_tac (new_rewrite [] [])))) THEN (split_tac)) ((arith_tac) THEN (done_tac)));
   ((THENL_FIRST) (((THENL_ROT 1)) ((fun arg_tac -> arg_tac (Arg_term (`inf D <= dist (z,v) - &2`))) (term_tac (have_gen_tac []ALL_TAC)))) ((arith_tac) THEN (done_tac)));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "REAL_INF_LE_FINITE") (fun fst_arg -> (use_arg_then "finD") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "D_n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))));
   (((fun arg_tac -> arg_tac (Arg_term (`dist (z,v) - &2`))) (term_tac exists_tac)) THEN ((((use_arg_then "REAL_LE_REFL")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "D_def")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   (((use_arg_then "z") (term_tac exists_tac)) THEN (done_tac));
   ((THENL_LAST) (BETA_TAC THEN (case THEN ALL_TAC) THEN ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (case THEN ((move ["xV"]) THEN (move ["xnv"])))]) THEN (case THEN ALL_TAC) THEN ((THENL) case [(((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] [])))); (case THEN ((move ["yV"]) THEN (move ["ynv"])))]) THEN ((TRY done_tac)) THEN (move ["neq"])) ((((use_arg_then "packV") (disch_tac [])) THEN (clear_assumption "packV") THEN (DISCH_THEN apply_tac)) THEN (done_tac)));
   (((((use_arg_then "DIST_SYM")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "h")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "h")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Lemma not_surrounded_node_norm_ECTC *)
let not_surrounded_node_norm_ECTC = section_proof ["V";"v"]
`packing V /\ V SUBSET ball_annulus /\
        (!W. packing W /\ W SUBSET ball_annulus ==> scriptL W <= scriptL V) /\
        v IN V /\ ~(surrounded_node (V, ECTC V) v)
        ==> norm v = &2`
[
   (BETA_TAC THEN (case THEN (move ["packV"])) THEN (case THEN (move ["subV"])) THEN (case THEN (move ["maxV"])) THEN (case THEN (move ["vV"])) THEN (move ["n_surr"]));
   ((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "not_surrounded_ECTC") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "n_surr") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (case THEN ((move ["W"]) THEN (case THEN (move ["f"])) THEN (case THEN (move ["bij_f"])) THEN (case THEN (move ["packW"])) THEN (case THEN (move ["subW"])) THEN (case THEN (move ["normW"])) THEN (move ["isoW"])))));
   ((fun arg_tac -> arg_tac (Arg_term (`packing U /\ U SUBSET ball_annulus ==> scriptL U <= scriptL W`))) (term_tac (have_gen_tac ["U"](move ["maxW"]))));
   (((DISCH_THEN (fun snd_th -> (use_arg_then "maxV") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN BETA_TAC) THEN (((fun arg_tac -> (use_arg_then "bij_scriptL") (fun fst_arg -> (use_arg_then "bij_f") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] [])))) THEN (done_tac));
   ((THENL_LAST) (((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "isolated_node_norm_ECTC") (fun fst_arg -> (use_arg_then "packW") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subW") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "maxW") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "isoW") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN ALL_TAC)) THEN (ANTS_TAC)) ((((use_arg_then "normW")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (done_tac)));
   ((((use_arg_then "bij_f") (disch_tac [])) THEN (clear_assumption "bij_f") THEN BETA_TAC) THEN (((((use_arg_then "BIJ")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "INJ")(thm_tac (new_rewrite [] []))))) THEN (((conv_thm_tac DISCH_THEN)(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;
(add_section_hyp "DLWCHEM" (`!V. packing V /\ V SUBSET ball_annulus ==> CARD V <= 15`));;
(add_section_hyp "XULJEPR" (`!V v. packing V /\ V SUBSET ball_annulus /\ scriptL V > &12 /\
        v IN V /\ norm v = &2 ==> ?u. u IN V /\ ~(u = v) /\ dist (v, u) < &2 * h0`));;

(* Lemma FCDJDOT *)
let FCDJDOT = section_proof []
`(?W. packing W /\ W SUBSET ball_annulus /\ scriptL W > &12) ==>
       (?V. contravening V)`
[
   (BETA_TAC THEN (case THEN (move ["W0"])) THEN (move ["W0_props"]));
   (((use_arg_then "scriptL_attains_max_in_ball_annulus") (disch_tac [])) THEN (clear_assumption "scriptL_attains_max_in_ball_annulus") THEN BETA_TAC THEN (case THEN (move ["W1"])) THEN (case THEN (move ["packW1"])) THEN (case THEN (move ["subW1"])) THEN (move ["W1max"]));
   ((fun arg_tac -> arg_tac (Arg_term (`scriptL W1 > &12`))) (term_tac (have_gen_tac [](move ["W1_gt12"]))));
   ((((fun arg_tac -> (use_arg_then "W1max") (fun fst_arg -> (use_arg_then "W0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((use_arg_then "W0_props")(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "real_gt")(thm_tac (new_rewrite [] []))))) THEN ((DISCH_THEN (fun snd_th -> (use_arg_then "REAL_LTE_TRANS") (thm_tac (match_mp_then snd_th MP_TAC)))) THEN (DISCH_THEN apply_tac)) THEN (((use_arg_then "real_gt")(gsym_then (thm_tac (new_rewrite [] []))))) THEN (done_tac));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "FJLBXS") (fun fst_arg -> (use_arg_then "packW1") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subW1") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC THEN (case THEN (move ["V"])) THEN (case THEN (move ["f"])) THEN (case THEN (move ["bij_f"])) THEN (case THEN (move ["packV"])) THEN (case THEN (move ["subV"])) THEN (case THEN (move ["norm_eq"])) THEN (move ["V_ESTD"]));
   ((fun arg_tac -> (fun arg_tac -> (use_arg_then "bij_scriptL") (fun fst_arg -> (use_arg_then "bij_f") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "norm_eq") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun arg -> thm_tac MP_TAC arg THEN (move ["LV_eq"])));
   (((use_arg_then "V") (term_tac exists_tac)) THEN ((((use_arg_then "contravening")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "packV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "subV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "LV_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "W1_gt12")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)));
   (((split_tac) THEN ((TRY done_tac))) THEN (split_tac));
   (((fun arg_tac -> (fun arg_tac -> (use_arg_then "DLWCHEM") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN ((fun arg_tac -> (fun arg_tac -> (use_arg_then "card_counterexample_ge13") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC);
   (((((use_arg_then "LV_eq")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "W1_gt12")(thm_tac (new_rewrite [] [])))) THEN (simp_tac)) THEN (arith_tac) THEN (done_tac));
   ((THENL_ROT (-1)) ((split_tac) THEN (move ["v"]) THEN (move ["vV"])));
   (((fun arg_tac -> arg_tac (Arg_term (`surrounded_node _1 v`))) (disch_eq_tac "h" [])) THEN case THEN (simp_tac) THEN (process_fst_eq_tac));
   ((((fun arg_tac -> (use_arg_then "not_surrounded_node_norm_ECTC") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN (done_tac));
   ((((fun arg_tac -> (use_arg_then "V_ESTD") (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (case THEN ((TRY done_tac)) THEN (move ["set0"])) THEN (((use_arg_then "contraT") (disch_tac [])) THEN (clear_assumption "contraT") THEN (DISCH_THEN apply_tac) THEN (move ["_"])));
   ((fun arg_tac -> arg_tac (Arg_term (`norm v = &2`))) (term_tac (have_gen_tac [](move ["norm_v"]))));
   ((((fun arg_tac -> (use_arg_then "isolated_node_norm_ECTC") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN (DISCH_THEN apply_tac)) THEN (repeat_tactic 1 9 (((split_tac) THEN ((TRY done_tac))))));
   ((((use_arg_then "set0") (disch_tac [])) THEN (clear_assumption "set0") THEN ((use_arg_then "contraLR") (disch_tac [])) THEN (clear_assumption "contraLR") THEN (DISCH_THEN apply_tac)) THEN ((repeat_tactic 1 9 (((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] [])))))) THEN ALL_TAC THEN (case THEN (move ["x"]))));
   (((repeat_tactic 1 9 (((use_arg_then "set_of_edge")(thm_tac (new_rewrite [] []))))) THEN (repeat_tactic 1 9 (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))))) THEN (((fun arg_tac -> (use_arg_then "ECTC_sub_ESTD") (fun fst_arg -> (use_arg_then "V") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN ((((use_arg_then "SUBSET")(thm_tac (new_rewrite [] [])))) THEN (move ["subCS"])));
   ((BETA_TAC THEN (case THEN (DISCH_THEN (fun snd_th -> (use_arg_then "subCS") (thm_tac (match_mp_then snd_th MP_TAC))))) THEN (move ["inS"]) THEN (move ["xV"])) THEN ((use_arg_then "x") (term_tac exists_tac)) THEN (done_tac));
   ((THENL_FIRST) ((((fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (fun arg_tac -> (use_arg_then "XULJEPR") (fun fst_arg -> (use_arg_then "packV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "subV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "vV") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (fun fst_arg -> (use_arg_then "norm_v") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg))) (disch_tac [])) THEN BETA_TAC) THEN (ANTS_TAC)) ((((use_arg_then "LV_eq")(thm_tac (new_rewrite [] [])))) THEN (done_tac)));
   (BETA_TAC THEN (case THEN (move ["u"])) THEN (case THEN (move ["uV"])) THEN (case THEN (move ["nuv"])) THEN (move ["dist_vu"]));
   ((((use_arg_then "set0") (disch_tac [])) THEN (clear_assumption "set0") THEN BETA_TAC THEN (simp_tac)) THEN (((use_arg_then "MEMBER_NOT_EMPTY")(gsym_then (thm_tac (new_rewrite [] []))))) THEN ((use_arg_then "u") (term_tac exists_tac)));
   ((((use_arg_then "set_of_edge")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "inE")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "uV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "andbT")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ESTD")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "IN_ELIM_THM")(thm_tac (new_rewrite [] [])))) THEN (simp_tac));
   ((((use_arg_then "v") (term_tac exists_tac)) THEN ((use_arg_then "u") (term_tac exists_tac))) THEN (((use_arg_then "REAL_LT_IMP_LE")(thm_tac (new_rewrite [] [])))) THEN (done_tac));
];;

(* Finalization of the section FCDJDOT *)
let not_surrounded_ECTC = finalize_theorem not_surrounded_ECTC;;
let isolated_node_norm_ECTC = finalize_theorem isolated_node_norm_ECTC;;
let not_surrounded_node_norm_ECTC = finalize_theorem not_surrounded_node_norm_ECTC;;
let FCDJDOT = finalize_theorem FCDJDOT;;
end_section "FCDJDOT";;
