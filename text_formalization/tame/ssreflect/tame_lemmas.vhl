"flyspeck_needs \"../formal_lp/hypermap/ssreflect/add_triangle-compiled.hl\"".

Module Tame_lemmas.

"let kcblrqc_ineq_tml = 
  let has_id = (fun t -> not(intersect [\"KCBLRQC\"] (Ineq.flypaper_ids t) = [])) in
  let idl = (filter has_id !Ineq.ineqs) in
  let tml = map (fun t -> t.ineq) idl in
    end_itlist (curry mk_conj) tml".

"let kcblrqc_ineq_def = new_definition
	(mk_eq (`kcblrqc_ineq_def:bool`, kcblrqc_ineq_tml))".

"open Tame_general".
"open Add_triangle".
"open Fan_defs".
"open Pack_defs".
"open Hypermap".
"open Hypermap_and_fan".
"open Hypermap_iso".
"open Ssrbool".
"open Ssrnat".


(* Misc *)
Section Misc.

Implicit Type v: `:real^3`.


Lemma delta_y_pos v w w': 
	`let y1 = norm v in
	 let y2 = norm w in
	 let y3 = norm w' in
	 let y4 = dist (w,w') in
	 let y5 = dist (v,w') in
	 let y6 = dist (v,w) in
		&0 <= delta_y y1 y2 y3 y4 y5 y6`.
Proof.
do !"CONV_TAC let_CONV".
rewrite Sphere.delta_y -DELTA_EQ_DELTA_X -!DIST_0 -!REAL_POW_2.
have := Collect_geom.DELTA_POS_4POINTS `vec 0:real^3` v w w'.
by rewrite !(DIST_SYM `vec 0`).
Qed.


Lemma quadratic_root_plus_works a b c: `~(a = &0) /\ &0 <= b pow 2 - &4 * a * c ==>
	let x = quadratic_root_plus (a,b,c) in
		a * x pow 2 + b * x + c = &0`.
Proof.
move => ineqs; "CONV_TAC let_CONV".
rewrite (Collect_geom2.FACTOR_OF_QUADRARTIC ineqs).
by rewrite Sphere.quadratic_root_plus; arith.
Qed.


Lemma quadratic_root_plus_eq a b c x: `&0 < a /\ &0 <= b pow 2 - &4 * a * c 
	/\ &0 <= b /\ (a * x pow 2 + b * x + c = &0) /\ &0 <= x
	==> quadratic_root_plus (a,b,c) = x`.
Proof.
move => [a_gt0] [disc_ge0] [b_ge0] [x_root] x_ge0.
have a_neq: `~(a = &0)` by move: a_gt0; arith.
have := Collect_geom2.FACTOR_OF_QUADRARTIC a_neq disc_ge0 x.
rewrite x_root eq_sym !REAL_ENTIRE -Sphere.quadratic_root_plus a_neq orFb.
rewrite !REAL_SUB_0 => [] [-> | ] // x_eq.
have: `x <= &0`.
  rewrite x_eq.
  suff -> u: `&0 <= u ==> (--b - u) / (&2 * a) <= &0` by rewrite SQRT_POS_LE.
  move => u_ge0; rewrite "REAL_ARITH `!x. x <= &0 <=> ~(&0 < x)`".
  rewrite real_div REAL_MUL_POS_LT negb_or.
  have h1: `&0 < inv (&2 * a)` by rewrite REAL_LT_INV REAL_LT_MUL a_gt0; arith.
  rewrite h1 andbT !(real_lt `&0`) !REAL_LE_LT h1 /=.
  by move: u_ge0 b_ge0; arith.
rewrite REAL_LE_LT; case; first by move: x_ge0; arith.
move => x_eq0.
have c_eq0: `c = &0` by move: x_root; rewrite x_eq0 REAL_POW_2 !REAL_MUL_RZERO !REAL_ADD_LID.
rewrite Sphere.quadratic_root_plus c_eq0 !REAL_MUL_RZERO REAL_SUB_RZERO.
by rewrite POW_2_SQRT // REAL_ADD_LINV real_div REAL_MUL_LZERO x_eq0.
Qed.


End Misc.


(* FullySurrounded *)
Section FullySurrounded.

Variable V: `:real^3->bool`.
Variable E: `:(real^3->bool)->bool`.

Hypothesis fanV: `FAN (vec 0,V,E)`.


Hypothesis f_surr: `fully_surrounded (V,E)`.

Let dart1_eq: `dart_of_fan (V,E) = dart1_of_fan (V,E)`.
Proof. by rewrite fully_surrounded_dart_of_fan_eq. Qed.

Let confV: `conforming_fan (vec 0,V,E)`.
Proof. by rewrite fully_surrounded_imp_conforming. Qed.

Let dartH: `dart (hypermap_of_fan (V,E)) = dart_of_fan (V,E)`.
Proof. by rewrite COMPONENTS_HYPERMAP_OF_FAN. Qed.


Lemma dart_leads_into_eq1 v w: `v,w IN dart_of_fan (V,E)
	==> dart_leads_into (vec 0) V E v w 
		= dartset_leads_into_fan (vec 0) V E 
			(IMAGE (ext_dart (V,E)) (face (hypermap_of_fan (V,E)) (v,w)))`.
Proof.
move => vw_in.
have iso := fan_hypermaps_iso_explicit2 fanV.
set h := `ext_dart _`.
set H := `hypermap_of_fan _`.
rewrite -(iso_components iso) ?dartH //.
set f1 := `face _1 _2`.
rewrite (Planarity.DARTSET_LEADS_INTO_FAN fanV f1 `h (v,w)`); last first.
  by rewrite -h_def ext_dart Fan.pr2 Fan.pr3.
rewrite fully_surrounded_imp_fan80 // -f1_def -lemma_in_face_set.
rewrite face_refl (hyp_iso_dart iso) ?dartH // => /= u uV.
by rewrite fully_surrounded_card_set_of_edge1.
Qed.


Lemma dart_leads_into_same f v w x y: `f IN face_set (hypermap_of_fan (V,E))
	/\ (v,w) IN f /\ (x,y) IN f
	==> dart_leads_into (vec 0) V E v w = dart_leads_into (vec 0) V E x y`.
Proof.
move => [/lemma_face_representation] [[a b]] [ab_in] -> [vw_in xy_in].
have all_in: `x,y IN dart_of_fan (V,E) /\ v,w IN dart_of_fan (V,E)`.
  by rewrite -dartH (IN_TRANS xy_in) ?(IN_TRANS vw_in) // lemma_face_subset.
rewrite !dart_leads_into_eq1 //.
by rewrite -(lemma_face_identity `a,b` `v,w`) // -(lemma_face_identity `a,b` `x,y`).
Qed.


Lemma fully_surrounded_sol v w: `v,w IN dart_of_fan (V,E)
   ==> sol (vec 0) (dart_leads_into (vec 0) V E v w)
	= &2 * pi + sum (face (hypermap_of_fan (V,E)) (v,w)) (\x. azim_dart (V,E) x - pi)`.
Proof.
move => vw_in.
have iso := fan_hypermaps_iso_explicit2 fanV.
move: confV; rewrite Conforming.conforming_fan "let_RULE Conforming.conforming_solid_angle_fan".
move => [_] [_] [_] [_] [f_sol] _.
rewrite dart_leads_into_eq1 // f_sol.
  by rewrite -(iso_components iso) -?lemma_in_face_set ?(hyp_iso_dart iso) // dartH.
congr `_1 + _2:real` => //.
have in_face x: `x IN face (hypermap_of_fan (V,E)) (v,w) ==> x IN dart_of_fan (V,E)`.
  by move/IN_TRANS => ->; rewrite -dartH lemma_face_subset dartH.
rewrite SUM_IMAGE.
  move => x y [/in_face] x_in [/in_face] y_in /(hyp_iso_inj iso).
  by rewrite dartH => ->.
apply SUM_EQ; move => [a b] /in_face d_in.
by rewrite o_THM /= ext_dart Fan.pr2 Fan.pr3 /= azim_dart_eq_azim_fan.
Qed.


Lemma fully_surrounded_not_coplanar v w: `v,w IN dart_of_fan (V,E)
	==> ~(coplanar {vec 0, v, w, sigma_fan (vec 0) V E v w})`.
Proof.
move => vw_in; move: (vw_in); rewrite dart1_eq => vw_in1.
have vw'_in := sigma_in_dart1 fanV vw_in1.
set w' := `sigma_fan _1 V _2 v w`.
have ->: `{vec 0, v, w, w'} = {vec 0, w', v, w}`.
  by rewrite ("(GEN_ALL o CONJUNCT2 o CONJUNCT2) Collect_geom.PER_SET3" w' w v).
rewrite (Planarity.properties_fully_surrounded fanV) //.
rewrite -w'_def -(fully_surrounded_azim_dart_eq_azim fanV f_surr) // w'_def.
rewrite !(inE_eq_in_dart1 V) vw_in1 dart1_switch vw'_in (AZIM_DART_POS fanV vw_in).
by move: f_surr; rewrite fully_surrounded => ->.
Qed.


Lemma fully_surrounded_delta_pos v w: `v,w IN dart_of_fan (V,E) ==>
		let w' = sigma_fan (vec 0) V E v w in
		let y1 = norm v in
		let y2 = norm w in
		let y3 = norm w' in
		let y4 = dist (w,w') in
		let y5 = dist (v,w') in
		let y6 = dist (v,w) in
			&0 < delta_y y1 y2 y3 y4 y5 y6`.
Proof.
rewrite Sphere.delta_y => vw_in; do !"CONV_TAC let_CONV".
rewrite -DELTA_EQ_DELTA_X -!Trigonometry1.DIST_L_ZERO -!REAL_POW_2.
rewrite "GEN_ALL Collect_geom2.POS_EQ_NOT_COPLANANR".
rewrite -Ckqowsa_3_points.coplanar_eq_coplanar_alt ?DIMINDEX_3; first by arith.
exact: fully_surrounded_not_coplanar.
Qed.


Lemma fully_surrounded_azim_eq_dih_y v w: `v,w IN dart_of_fan (V,E) ==>
	 let w' = sigma_fan (vec 0) V E v w in
	 let y1 = norm v in
	 let y2 = norm w in
	 let y3 = norm w' in
	 let y4 = dist (w,w') in
	 let y5 = dist (v,w') in
	 let y6 = dist (v,w) in
		azim_dart (V,E) (v,w) = dih_y y1 y2 y3 y4 y5 y6`.
Proof.
move => vw_in; do !"CONV_TAC let_CONV"; move: (vw_in); rewrite dart1_eq => vw_in1.
have vw'_in := sigma_in_dart1 vw_in1 fanV.
rewrite fully_surrounded_azim_dart_eq_azim // AZIM_DIVH ?(DART1_NOT_COLLINEAR fanV) //.
rewrite -fully_surrounded_azim_dart_eq_azim //.
move: f_surr; rewrite fully_surrounded => -> //=.
rewrite "let_RULE DIHV_EQ_DIH_Y" ?(DART1_NOT_COLLINEAR fanV) //.
by rewrite !Trigonometry1.DIST_L_ZERO.
Qed.


Lemma fully_surrounded_sol_eq_sol_y v w: `v,w IN dart_of_fan (V,E) /\
	CARD (face (hypermap_of_fan (V,E)) (v,w)) = 3 ==>
		 let w' = sigma_fan (vec 0) V E v w in
		 let y1 = norm v in
		 let y2 = norm w in
		 let y3 = norm w' in
		 let y4 = dist (w,w') in
		 let y5 = dist (v,w') in
		 let y6 = dist (v,w) in
	sol (vec 0) (dart_leads_into (vec 0) V E v w) = sol_y y1 y2 y3 y4 y5 y6`.
Proof.
move => [vw_in card3]; do !"CONV_TAC let_CONV"; move: (vw_in); rewrite dart1_eq => vw_in1.
rewrite fully_surrounded_sol //.
have [f_eq eqs] := "let_RULE TRIANGULAR_FACE" fanV vw_in1 card3.
set w' := `sigma_fan _ V E v w`.
set H := `hypermap_of_fan _`.
have all_in: `v,w IN dart_of_fan (V,E) /\ w,w' IN dart_of_fan (V,E) /\ w',v IN dart_of_fan (V,E)`.
  by rewrite -dartH; do !split; apply IN_TRANS; exists `face H (v,w)`;
	rewrite lemma_face_subset ?dartH // f_eq !IN_INSERT.
have neqs: `~(v = w) /\ ~(w' = v) /\ ~(w = w')`.
  by rewrite !(PAIR_IN_DART1_OF_FAN_IMP_NOT_EQ fanV) -?dart1_eq.
rewrite f_eq !(SUM_SING, SUM_CLAUSES) ?(FINITE_INSERT, FINITE_EMPTY) //.
rewrite !(IN_SING, IN_INSERT) !PAIR_EQ !neqs /= -neqs /=.
rewrite !"let_RULE fully_surrounded_azim_eq_dih_y" // w'_def !eqs.
by rewrite Sphere.sol_y !(DIST_SYM w') !(DIST_SYM w); arith.
Qed.


Lemma tauVEF_alt1 v w: `v,w IN dart_of_fan (V,E)
	==> let f = face (hypermap_of_fan (V,E)) (v,w) in
		tauVEF (V,E,f) = sol (vec 0) (dart_leads_into (vec 0) V E v w)
		  + (&2 - &(CARD f)) * sol0
		  - sol0 / pi * sum f (\x. azim_dart (V,E) x * (lmfun (h_dart x) - &1))`.
Proof.
move => vw_in; "CONV_TAC let_CONV".
rewrite Tame_defs.tauVEF fully_surrounded_sol //.
set H := `hypermap_of_fan _`.
have fin_f := FACE_FINITE H `v,w`.
rewrite "REAL_ARITH `!a b c. a * (&1 + b * (&1 - c)) = a - b * (a * (c - &1))`".
by rewrite !SUM_SUB // !SUM_LMUL (SUM_CONST `pi`) //; arith.
Qed.


Lemma tauVEF_alt2 v w: `v,w IN dart_of_fan (V,E)
	==> let f = face (hypermap_of_fan (V,E)) (v,w) in
	  tauVEF (V,E,f) = sol (vec 0) (dart_leads_into (vec 0) V E v w) * (&1 + sol0 / pi) 
			- sol0 / pi * sum f (\x. azim_dart (V,E) x * lmfun (h_dart x))`.
Proof.
move => vw_in; "CONV_TAC let_CONV".
rewrite "let_RULE tauVEF_alt1" // fully_surrounded_sol //.
set H := `hypermap_of_fan _`.
have fin_f := FACE_FINITE H `v,w`.
have -> a b: `a * (b - &1) = a * b - a` by arith.
rewrite !SUM_SUB // (SUM_CONST `pi`) //.
by move: PI_POS; "CONV_TAC REAL_FIELD".
Qed.


Lemma tauVEF_alt3 v w: `v,w IN dart_of_fan (V,E)
	==> let f = face (hypermap_of_fan (V,E)) (v,w) in
	tauVEF (V,E,f) = sum f (\x. (&1 + sol0 / pi * (&1 - lmfun (h_dart x))) 
	* azim_dart (V,E) x - pi - sol0) + &2 * (pi + sol0)`.
Proof.
move => vw_in; "CONV_TAC let_CONV".
have -> a x b c: `a * x - b - c = x * a - (b + c):real` by arith.
set H := `hypermap_of_fan _`.
have fin_f := FACE_FINITE H `v,w`.
rewrite SUM_SUB // (SUM_CONST `pi + sol0`) //.
by rewrite Tame_defs.tauVEF; arith.
Qed.


Lemma fully_surrounded_enclosed v w: `v,w IN dart_of_fan (V,E)
	==>	let w' = sigma_fan (vec 0) V E v w in
		let u = sigma_fan (vec 0) V E w' v in
		let y1 = norm v in
		let y2 = norm w in
		let y3 = norm w' in
		let y4 = dist(w,w') in
		let y5 = dist(v,w') in
		let y6 = dist(v,w) in
		let y7 = norm u in
		let y8 = dist(w',u) in
		let y9 = dist(w,u) in
	dist (v,u) = enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9`.
Proof.
move => vw_in; do 11!"CONV_TAC let_CONV".
set w' := `sigma_fan _ V E v w`.
set u := `sigma_fan _ V E w' v`.
rewrite Enclosed.enclosed.
have := "let_RULE Collect_geom2.CAYLEYR_5POINTS" `vec 0:real^3` w' w v u.
rewrite !(DIST_SYM `vec 0`) !DIST_0 !REAL_POW_2 -Mur.muR !(DIST_SYM v) !(DIST_SYM w').
set p := `muR _1 _2 _3 _4 _5 _6 _7 _8 _9`.
move => p0.
suff ->: `quadratic_root_plus (abc_of_quadratic p) = dist (u,v) pow 2`.
  by rewrite POW_2_SQRT // DIST_POS_LE.
suff: `?a b c. (p = \x. a * x pow 2 + b * x + c) 
	/\ &0 < a /\ &0 <= b pow 2 - &4 * a * c /\ &0 <= b`.
  move => [a] [b] [c] [p_eq] ineqs.
  rewrite p_eq Nonlinear_lemma.abc_quadratic; apply: quadratic_root_plus_eq.
  rewrite !ineqs !andTb REAL_LE_POW_2 andbT.
  by move: p0; rewrite p_eq /= -REAL_POW_2.
rewrite -p_def "GEN_ALL Mur.muRa" FUN_EQ_THM "GEN_ALL Collect_geom.LEMMA50".
set a := `ups_x _1 _2 _3`.
set b := `cayleytr _1 _2 _3 _4 _5 _6 _7 _8 _9 _10`.
set c := `cayleyR _1 _2 _3 _4 _5 _6 _7 _8 _9 _10`.
exists a b c => /=; split.
  rewrite -a_def.
  have := "(GEN_ALL o let_RULE) Trigonometry2.NOT_COLLINEAR_IMP_UPS_LT" `vec 0:real^3` w' w.
  rewrite !DIST_0 -!REAL_POW_2 (DIST_SYM w); apply.
  move/Planarity.notcoplanar_imp_notcollinear_fan: (fully_surrounded_not_coplanar vw_in).
  by rewrite w'_def "GEN_ALL Collect_geom.PER_SET3" => ->.
split.
  rewrite -b_def -a_def -c_def "GEN_ALL Collect_geom.DISCRIMINANT_OF_CAY".
  rewrite !DELTA_EQ_DELTA_X -!Sphere.delta_y !(DIST_SYM w) !(DIST_SYM v) !(DIST_SYM u).
  rewrite !REAL_LE_MUL; last by arith.
  by rewrite !"let_RULE delta_y_pos".

Abort.


Section BallAnnulus.

Hypothesis subV: `V SUBSET ball_annulus`.

Let v_norm v: `v IN V ==> norm v <= &2 * h0 /\ &2 <= norm v`.
Proof. by rewrite SUBSET in subV; move/subV; rewrite Ckqowsa_3_points.in_ball_annulus /=. Qed.


Lemma fully_surrounded_lnazim v w: `v,w IN dart_of_fan (V,E) ==>
	 let w' = sigma_fan (vec 0) V E v w in
	 let y1 = norm v in
	 let y2 = norm w in
	 let y3 = norm w' in
	 let y4 = dist (w,w') in
	 let y5 = dist (v,w') in
	 let y6 = dist (v,w) in
		azim_dart (V,E) (v,w) * lmfun (h_dart (v,w)) = lnazim y1 y2 y3 y4 y5 y6`.
Proof.
move => vw_in; do !"CONV_TAC let_CONV".
rewrite Sphere.lnazim -("let_RULE fully_surrounded_azim_eq_dih_y" vw_in).
by rewrite REAL_MUL_SYM ly_EQ_lmfun FST // v_norm (PAIR_IN_DART_OF_FAN fanV vw_in).
Qed.


Lemma fully_surrounded_tau_eq_taum v w: `v,w IN dart_of_fan (V,E)
	/\ CARD (face (hypermap_of_fan (V,E)) (v,w)) = 3
	==>	let w' = sigma_fan (vec 0) V E v w in
		let y1 = norm v in
		let y2 = norm w in
		let y3 = norm w' in
		let y4 = dist (w,w') in
		let y5 = dist (v,w') in
		let y6 = dist (v,w) in
		tauVEF (V,E,face (hypermap_of_fan (V,E)) (v,w)) = taum y1 y2 y3 y4 y5 y6`.
Proof.
move => [vw_in card3]; do !"CONV_TAC let_CONV"; move: (vw_in); rewrite dart1_eq => vw_in1.
have [f_eq eqs] := "let_RULE TRIANGULAR_FACE" fanV vw_in1 card3.
have [dartH _] := COMPONENTS_HYPERMAP_OF_FAN fanV.
set w' := `sigma_fan _ V E v w`.
set H := `hypermap_of_fan _`.
have all_in: `v,w IN dart_of_fan (V,E) /\ w,w' IN dart_of_fan (V,E) /\ w',v IN dart_of_fan (V,E)`.
  by rewrite -dartH; do !split; apply IN_TRANS; exists `face H (v,w)`;
	rewrite lemma_face_subset ?dartH // f_eq !IN_INSERT.
have neqs: `~(v = w) /\ ~(w' = v) /\ ~(w = w')`.
  by rewrite !(PAIR_IN_DART1_OF_FAN_IMP_NOT_EQ fanV) -?dart1_eq.
rewrite -H_def "let_RULE tauVEF_alt2" // H_def.
rewrite f_eq !(SUM_SING, SUM_CLAUSES) ?(FINITE_INSERT, FINITE_EMPTY) //.
rewrite !(IN_SING, IN_INSERT) !PAIR_EQ !neqs /= -neqs /=.
rewrite !"let_RULE fully_surrounded_lnazim" // !eqs.
rewrite "let_RULE fully_surrounded_sol_eq_sol_y" ?H_def // w'_def.
by rewrite Sphere.taum sol0_over_pi_EQ_const1 !(DIST_SYM w') !(DIST_SYM w).
Qed.


End BallAnnulus.

End FullySurrounded.


(* tauq *)
Section Tauq.

Lemma taum_sym y1 y2 y3 y4 y5 y6: `taum y1 y2 y3 y4 y5 y6 = taum y3 y2 y1 y6 y5 y4`.
Proof.
have sym := Nonlinear_lemma.dih_y_sym.
rewrite eq_sym Sphere.taum Sphere.sol_y !Sphere.lnazim.
rewrite (sym y3 y2) (sym y2 y1) (sym y1 y3).
have -> a b c d: `a + b + c - d = c + b + a - d:real` by arith.
rewrite -Sphere.sol_y.
have -> a b c: `a + b + c = c + b + a:real` by arith.
by rewrite -!Sphere.lnazim -Sphere.taum.
Qed.


Variable V: `:real^3->bool`.
Variable E: `:(real^3->bool)->bool`.

Hypothesis fanV: `FAN (vec 0,V,E)`.
Hypothesis f_surr: `fully_surrounded (V,E)`.
Hypothesis subV: `V SUBSET ball_annulus`.

Let dart1_eq: `dart_of_fan (V,E) = dart1_of_fan (V,E)`.
Proof. by rewrite fully_surrounded_dart_of_fan_eq. Qed.

Let dartH: `dart (hypermap_of_fan (V,E)) = dart_of_fan (V,E)`.
Proof. by rewrite COMPONENTS_HYPERMAP_OF_FAN. Qed.


Lemma fully_surrounded_tau_eq_tauq v w: `v,w IN dart_of_fan (V,E)
	/\ CARD (face (hypermap_of_fan (V,E)) (v,w)) = 4
	==>	let w' = sigma_fan (vec 0) V E v w in
		let u = sigma_fan (vec 0) V E w' v in
		let y1 = norm v in
		let y2 = norm w in
		let y3 = norm w' in
		let y4 = dist(w,w') in
		let y5 = dist(v,w') in
		let y6 = dist(v,w) in
		let y7 = norm u in
		let y8 = dist(w',u) in
		let y9 = dist(w,u) in
	tauVEF (V,E,face (hypermap_of_fan (V,E)) (v,w)) = tauq y1 y2 y3 y4 y5 y6 y7 y8 y9`.
Proof.
move => [vw_in card4]; do 11!"CONV_TAC let_CONV".
have := fan_split_fan_face fanV f_surr vw_in.
have := "let_RULE face_split_fan_face_explicit" fanV f_surr vw_in.
rewrite card4 "ARITH_RULE `4 - 1 = 3`"; "ANTS_TAC"; first by arith.
rewrite split_fan_face.
set w' := `sigma_fan _ V E v w`.
set w2 := `sigma_fan _ V E w' v`.
set E2 := `_ INSERT E`.
set H2 := `hypermap_of_fan (V,E2)`.
move => [_] [cards_eq] [in_face] neqs [fan2] [dart2_eq] f_surr2.
have all_in2: `v,w IN dart_of_fan (V,E2) /\ w',w IN dart_of_fan (V,E2)`.
  by rewrite dart2_eq !IN_UNION -dart1_eq !IN_INSERT vw_in.
rewrite ("let_RULE tau_split_fan_face_add" fanV f_surr vw_in); first by rewrite card4; arith.
rewrite w'_def E2_def.
rewrite !"let_RULE fully_surrounded_tau_eq_taum" //.
set H := `hypermap_of_fan (V,E)`.
have split_eq: `split_fan_face (V,E) (v,w) = (V,E2)`.
  by rewrite split_fan_face w'_def E2_def.
have ->: `sigma_fan (vec 0) V E2 v w = w'`.
  suff: `n_fan_pair (V,E2) (v,w) = n_fan_pair (V,E) (v,w)`.
    by rewrite !n_fan_pair w'_def PAIR_EQ => [] [_] ->.
  rewrite -split_eq (n_split_fan_face_eq1 vw_in fanV f_surr) // !FST w'_def !neqs /=.
  by rewrite split_eq dart2_eq -dart1_eq IN_UNION.
have ->: `sigma_fan (vec 0) V E2 w' w = w2`.
  suff: `n_fan_pair (V,E2) (w',w) = n_fan_pair (V,E) (w',v)`.
    by rewrite !n_fan_pair w2_def PAIR_EQ => [] [_] ->.
  have := "let_RULE n_split_fan_face" fanV f_surr vw_in.
  by rewrite H_def card4 "ARITH_RULE `3 < 4`" /= split_eq w'_def => ->.
by rewrite Sphere.tauq (taum_sym `norm w2`) !(DIST_SYM w').
Qed.


End Tauq.



Section Contravening.

Variable V: `:real^3->bool`.
Hypothesis contrV: `contravening V`.

Let fanV: `FAN (vec 0,V,ESTD V)`.
Proof. exact: (CONTRAVENING_FAN contrV). Qed.

Let f_surr: `fully_surrounded (V,ESTD V)`.
Proof. exact: (CONTRAVENING_IMP_FULLY_SURROUNDED fanV). Qed.

Let dart1_eq: `dart_of_fan (V,ESTD V) = dart1_of_fan (V,ESTD V)`.
Proof. exact: (fully_surrounded_dart_of_fan_eq fanV). Qed.


Lemma contravening_non_triangular_face_dist v w: `v,w IN dart_of_fan (V,ESTD V)
	/\ 3 < CARD (face (hypermap_of_fan (V,ESTD V)) (v,w))
	==>	let w' = sigma_fan (vec 0) V (ESTD V) v w in
		let y1 = norm v in
		let y2 = norm w in
		let y3 = norm w' in
		let y4 = dist (w,w') in
		let y5 = dist (v,w') in
		let y6 = dist (v,w) in
			(&2 <= y1 /\ y1 <= &2 * h0) /\
			(&2 <= y2 /\ y2 <= &2 * h0) /\
			(&2 <= y3 /\ y3 <= &2 * h0) /\
			(&2 * h0 <= y4 /\ y4 <= &4 * h0) /\
			(&2 <= y5 /\ y5 <= &2 * h0) /\
			(&2 <= y6 /\ y6 <= &2 * h0)`.
Proof.
move => [vw_in card_gt3]; do !"CONV_TAC let_CONV".
rewrite h0 !"ARITH_RULE `&2 * #1.26 = #2.52 /\ &2 = #2.0`".
have vw_in1: `v,w IN dart1_of_fan (V,ESTD V)` by rewrite -dart1_eq.
have w'_in := sigma_fan_inV fanV vw_in1.
have vw'_in := sigma_in_dart1 fanV vw_in1.
have w'_neq_w := sigma_fan_not_fixed fanV vw_in f_surr.
have not_diag := fully_surrounded_diag_not_in_dart fanV f_surr vw_in card_gt3.
have [v_in w_in] := PAIR_IN_DART_OF_FAN fanV vw_in.
set w' := `sigma_fan _1 V _2 v w`.
rewrite -!Trigonometry1.DIST_L_ZERO !(CONTRAVENING_DIST contrV) // !andTb.
rewrite andbC 4?(CONTRAVENING_DART_DIST contrV) // !andTb; split.
  move: not_diag; rewrite dart1_eq dart1_of_fan IN_ELIM_THM /= !NOT_EXISTS_THM.
  by move/(_ w w'); rewrite /= IN_ESTD w_in w'_in -w'_neq_w /=; arith.
apply: (DIST_TRIANGLE_LE w w' v).
have ->: `&4 * #1.26 = #2.52 + #2.52` by arith.
by rewrite REAL_LE_ADD2 DIST_SYM (DIST_SYM w') !(CONTRAVENING_DART_DIST contrV).
Qed.


Section Ineqs.

Hypothesis ineqs: `kcblrqc_ineq_def`.

Lemma non_triangular_face_azim_dart_bound d: `d IN dart_of_fan (V,ESTD V)
	/\ 3 < CARD (face (hypermap_of_fan (V,ESTD V)) d)
	==> #1.15 < azim_dart (V,ESTD V) d`.
Proof.
case: d => v w [vw_in card_gt3].
rewrite "let_RULE CONTRAVENING_AZIM_DART_EQ_DIH_Y" // -real_gt.
set w' := `sigma_fan _1 V _2 v w`.
have := "GEN_ALL Tame_inequalities.DIH_Y_INEQ" 
	`norm v` `norm w` `norm w'` `dist (w,w')` `dist (v,w')` `dist (v,w)`; "ANTS_TAC".
  by move: ineqs; rewrite kcblrqc_ineq_def => ->.
rewrite INEQ_ALT !"GEN_ALL ALL" /=; "ANTS_TAC".
  have eqs: `#2.0 = &2 /\ #2.52 = &2 * h0 /\ #5.04 = &4 * h0` by rewrite h0; arith.
  by rewrite !eqs -w'_def 12!("let_RULE contravening_non_triangular_face_dist" vw_in card_gt3).
by rewrite -REAL_NOT_LT -w'_def ("let_RULE fully_surrounded_delta_pos" fanV f_surr).
Qed.


End Ineqs.


End Contravening.
