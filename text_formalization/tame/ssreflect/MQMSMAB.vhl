"needs \"../formal_lp/hypermap/ineqs/lp_ineqs_proofs-compiled.hl\"".
"needs \"../formal_lp/hypermap/ineqs/lp_main_estimate-compiled.hl\"".
"needs \"tame/CDTETAT.hl\"".
"needs \"tame/ssreflect/KCBLRQC-compiled.hl\"".

Module Mqmsmab.

"open Ssrbool".
"open Ssrnat".
"open Hypermap".
"open Tame_lemmas".
"open Tame_defs".
"open Tame_general".
"open Hypermap_and_fan".
"open Hypermap_iso".
"open Kcblrqc".
"open Jgtdebu".
"open Cdtetat_tame".
"open Lp_ineqs_proofs".
"open Lp_main_estimate".

Section MQMSMAB.

Hypothesis ineqs: `kcblrqc_ineq_def`.
Hypothesis h_main: `lp_main_estimate`.

Theorem MQMSMAB V: `contravening V ==> tame_hypermap (hypermap_of_fan (V, ESTD V))`.
Proof.
rewrite tame_hypermap => contrV.
have h_fan := contravening_lp_fan contrV.
move: (h_fan); rewrite lp_fan => [] [fanV] [f_surr] [subV] packV.
have [dartH _] := COMPONENTS_HYPERMAP_OF_FAN fanV.
have card := Crttxat_tame.CRTTXAT JGTDEBU4 contrV (fully_surrounded_perimeter_bound fanV f_surr).
rewrite card; move: card; rewrite tame_9a => card_ineq.
rewrite JGTDEBU10 // JGTDEBU11 // SZIPOAS // BDJYFFB1 //.
rewrite tame_1 JGTDEBU1 // JGTDEBU2 //.
rewrite tame_2 JGTDEBU3 // JGTDEBU4 //.
rewrite tame_3 JGTDEBU5 //.
rewrite tame_4 JGTDEBU6 //.
rewrite tame_5a JGTDEBU7 //.
rewrite tame_8 JGTDEBU8 // 12!andTb.
rewrite tame_13a admissible_weight total_weight.
set H := `hypermap_of_fan _`.
exists `\f. tauVEF (V,ESTD V,f)`; split; last first.
  apply: REAL_LET_TRANS; exists `&4 * pi - &20 * sol0`; rewrite tgt.
  split; last by move: Flyspeck_constants.bounds; arith.
  rewrite -H_def (sum_tauVEF_upper_bound fanV f_surr).
  by rewrite REAL_LT_IMP_LE; move: contrV; rewrite contravening real_gt => ->.
rewrite adm_1 adm_2 adm_3 /=; split.
  move => d d_in.
  have d_in_k k: `CARD (face H d) = k ==> d IN darts_k k H`.
    by rewrite List_hypermap.darts_k inE d_in.
  have ineq a: `a >= 3 /\ a <= 6 ==> a = 3 \/ a = 4 \/ a = 5 \/ a = 6` by arith.
  move/ineq: (card_ineq d_in).
  do !case; move => card_eq; rewrite card_eq d_tame real_ge; rewr 20?ARITH_EQ.
  (* 3 *)
  rewrite -H_def (ineq_tau3_tauVEF_std h_fan) H_def REFL_CLAUSE d_in_k // !andbT.
  by move => a b c cond; move: h_main; rewrite lp_main_estimate => ->.
  (* 4 *)
  rewrite -H_def (ineq_tau4_tauVEF_std h_fan) H_def REFL_CLAUSE d_in_k // !andbT.
  by move => a b c cond; move: h_main; rewrite lp_main_estimate => ->.
  (* 5 *)
  rewrite -H_def (ineq_tau5_tauVEF_std h_fan) H_def REFL_CLAUSE d_in_k // !andbT.
  by move => a b c cond; move: h_main; rewrite lp_main_estimate => ->.
  (* 6 *)
  rewrite -H_def (ineq_tau6_tauVEF_std h_fan) H_def REFL_CLAUSE d_in_k // !andbT.
  by move => a b c cond; move: h_main; rewrite lp_main_estimate => ->.
split => d.
  set r := `CARD _`; set p := `CARD _`; set q := `CARD _`; move => [d_in] r0.
  have type_eq: `type_of_node H d = p,q,0` by rewrite type_of_node.
  have := "let_RULE KCBLRQC" contrV h_main ineqs d.
  by rewrite -dartH d_in H_def type_eq /= LET_DEF LET_END_DEF /= GT LT_REFL orFb.
move => [d_in] type_eq; rewrite a_tame real_ge REAL_LT_IMP_LE.
have := "let_RULE BDJYFFB2" contrV h_main ineqs d.
rewrite H_def type_eq /=; "ANTS_TAC"; first by rewrite -dartH.
set s := `GSPEC _`.
suff ->: `s = set_of_triangles_meeting_node H d` by [].
rewrite -s_def set_of_triangles_meeting_node set_of_face_meeting_node.
rewrite EXTENSION inE !IN_ELIM_THM /= => f.
split => [[] [y] [y_in] f_eq card_f | [y] [] [y_in] [card_f] y_in_n f_eq].
  by exists y; rewrite -f_eq.
by rewrite {2}f_eq card_f /=; exists y.
Qed.

End MQMSMAB.