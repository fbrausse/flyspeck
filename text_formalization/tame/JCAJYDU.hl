(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Jcajydu= struct


let DAKEFCC_concl = 
  `!H:(A)hypermap K:(((A->bool)#(A->bool))hypermap). is_restricted H /\ iso H K ==> is_restricted K`;;


let JCAJYDU_concl = `(!L:((A->bool)list)list. 
  good_list L /\ good_list_nodes L /\ all uniq L /\
  is_restricted (hypermap_of_list L) ==>
  (?g. PlaneGraphs g /\ 
     good_graph g /\
     iso (hypermap_of_list L) (hypermap_of_list (fgraph g))))
   ==> 
   (!H:(A)hypermap. is_restricted H ==>
  (?g. PlaneGraphs g /\ good_graph g /\
     iso H (hypermap_of_list (fgraph g))))`;;


let  JCAJYDU=prove((mk_imp(DAKEFCC_concl,JCAJYDU_concl)),
REPEAT RESA_TAC
THEN MRESA_TAC Rxokskc.RXOKSKC[`H`]
THEN THAYTHE_ASM_TAC 6[`H`;`(hypermap_of_list L)`]
THEN THAYTHE_ASM_TAC 7[`L`]
THEN GEXISTS_TAC`g`
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Hypermap.iso_trans[`H`;`(hypermap_of_list L)`;`(hypermap_of_list (fgraph g))`]);;


 end;;



