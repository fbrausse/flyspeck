open Native_strictbuild;;
load_begin();;

open Iter;;
open Products;;
open Permutations;;
open Misc;;
open Vectors;;
open Determinants;;
open Metric;;
open Topology;;
open Convex;;
open Polytope;;
open Integration;;
open Measure;;
open Complexes;;
open Transcendentals;;
open Realanalysis;;
open Geom;;
open Cross;;
open Flyspeck;;

(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Local Fan                                              *)
(* Author: Hoang Le Truong                                        *)
(* Date: 2012-04-01                                                           *)
(* ========================================================================= *)


(*
remaining conclusions from appendix to Local Fan chapter
*)


module  Ncvibwu= struct


open Truong_tactic;;
open Hypermap;;
open Import_tame_classification;;

open Auqtzyz;;
open List_hypermap;;

open Rxokskc;;
open Dangeyj;;

open Pwssrat;;
open Ohcgkfu;;
open Pplhulj;;



let NCVIBWU1_concl = `!L N r f w (x:A#A) i j. good_list L /\ marked_list L N r x /\ ~final_list L (rtrans L N r x i)/\
   find_face L x=f /\
   next_el f x=w /\
  j <= indexf w (ztrans L N r x i) f  ==>
  (MEM (((next_el f) POWER j) w)  (rtrans L N r x (SUC i)) )`;;





let indexl_size_append=prove(`!u:(A)list. MEM x r  /\ SUC(indexl x r) < sizel r /\ uniq(APPEND u r)
==> SUC(indexl x (APPEND u r)) < sizel (APPEND u r)`,
LIST_INDUCT_TAC
THEN ASM_SIMP_TAC[MEM; Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;Seq.size_cons;APPEND;Seq.uniq;MEM_APPEND;DE_MORGAN_THM]
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`x`;`r`]
THEN ASM_REWRITE_TAC[Seq2.next_el;Seq2.index_cons;DE_MORGAN_THM;Seq.size_cons]
THEN DICH_TAC 6
THEN RESA_TAC
THEN DICH_TAC 0
THEN ARITH_TAC);;



let next_el_append=prove(`!u:(A)list. MEM x r  /\ SUC(indexl x r) < sizel r /\ uniq(APPEND u r)
==> next_el (APPEND u r) x= next_el r x`,
LIST_INDUCT_TAC
THEN ASM_SIMP_TAC[MEM; Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;Seq.size_cons;APPEND;Seq.uniq;MEM_APPEND;DE_MORGAN_THM]
THEN RESA_TAC
THEN MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`x`;`r`]
THEN ASM_REWRITE_TAC[Seq2.next_el;Seq2.index_cons;DE_MORGAN_THM;Seq.size_cons]
THEN MRESA_TAC indexl_size_append[`x`;`r`;`t`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<b==> ~(SUC a= SUC b-1)/\ ~(a=b-1) `)[` (indexl x (APPEND t r))`;`sizel (APPEND t r)`]
THEN DICH_TAC 9
THEN ASM_SIMP_TAC[MEM; Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;Seq.size_cons;APPEND;Seq.uniq;MEM_APPEND;DE_MORGAN_THM]
THEN ASM_REWRITE_TAC[Seq2.next_el;Seq2.index_cons;DE_MORGAN_THM;Seq.size_cons;Seq.nth;ARITH_RULE`SUC a+1=SUC(a+1)`]
THEN STRIP_TAC
THEN SYM_DICH_TAC 0);;




let indexl_expand_le=prove(`!a. 0< sizel b/\ uniq ((APPEND (APPEND a [h]) b)) ==> SUC( indexl h (APPEND (APPEND a [h]) b)) < sizel (APPEND (APPEND a [h]) b)`,
LIST_INDUCT_TAC
THEN SIMP_TAC[APPEND;Seq2.next_el_hd_cons;Seq.uniq;ARITH_RULE`SUC 0< SUC b<=> 0<b`]
THEN ASM_SIMP_TAC[MEM; Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;Seq.size_cons;APPEND;Seq.uniq;MEM_APPEND;DE_MORGAN_THM]
THEN RESA_TAC
THEN ASM_REWRITE_TAC[Seq2.next_el;Seq2.index_cons;DE_MORGAN_THM;Seq.size_cons;ARITH_RULE`SUC a< SUC b<=> a<b`]
THEN DICH_TAC 5
THEN RESA_TAC);;


let tuong_minh_tai=prove(`!a. 0< sizel b/\ uniq ((APPEND (APPEND a [h]) b)) ==> next_el (APPEND (APPEND a [h]) b) h= HD b`,
LIST_INDUCT_TAC
THEN SIMP_TAC[APPEND;Seq2.next_el_hd_cons;Seq.uniq]
THEN ASM_SIMP_TAC[MEM; Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;Seq.size_cons;APPEND;Seq.uniq;MEM_APPEND;DE_MORGAN_THM]
THEN RESA_TAC
THEN ASM_REWRITE_TAC[Seq2.next_el;Seq2.index_cons;DE_MORGAN_THM;Seq.size_cons]
THEN MRESA_TAC indexl_expand_le[`h`;`b`;`t`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<b==> ~(SUC a= SUC b-1)/\ ~(a= b-1)`)[`(indexl h (APPEND (APPEND t [h]) b))`;`sizel (APPEND (APPEND t [h]) b)`]
THEN DICH_TAC 8
THEN ASM_SIMP_TAC[MEM; Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;Seq.size_cons;APPEND;Seq.uniq;MEM_APPEND;DE_MORGAN_THM]
THEN ASM_REWRITE_TAC[Seq2.next_el;Seq2.index_cons;DE_MORGAN_THM;Seq.size_cons;Seq.nth;ARITH_RULE`SUC a+1=SUC(a+1)`]);;




let INDEXL_NEXT_EL_SUC= prove_by_refinement(`!L. MEM d L /\ uniq L/\ SUC (indexl d L) < sizel L==>  indexl (next_el L d) L = SUC (indexl d L)`,
[
LIST_INDUCT_TAC
THEN REWRITE_TAC
[MEM;Tame_defs.split_at;Tame_defs.split_at_rec;APPEND_NIL;Seq.uniq]
THEN RESA_TAC;

DICH_TAC 0
THEN ASM_REWRITE_TAC[Seq.index_head]
THEN MRESAL_TAC(SET_RULE`!A. A\/ ~A`)[`t=[]`][Seq2.size1;ARITH_RULE`~(SUC 0<1)`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.MEM_HD[`t`]
THEN MRESAL_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`HD t`;`t`][Tame_list.MEM_HD]
THEN MRESAL_TAC Seq2.next_el_hd_cons[`h`;`t`][GSYM Pwssrat.sizel0_not_nil;Seq2.index_cons;Seq.index_head;Pplhulj.indexl_hd];

DICH_TAC 0
THEN MRESAL_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`d`;`t`][GSYM Pwssrat.sizel0_not_nil;Seq2.index_cons;Seq.index_head;Pplhulj.indexl_hd;Seq.size_cons;ARITH_RULE`SUC a< SUC b<=> a<b`]
THEN STRIP_TAC
THEN DICH_TAC 5
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a<b==> ~(SUC a= SUC b-1)/\ ~(a=b-1)`)[` (indexl d t) `;`sizel t`]
THEN ASM_REWRITE_TAC[Seq2.next_el;GSYM Pwssrat.sizel0_not_nil;Seq2.index_cons;Seq.index_head;Pplhulj.indexl_hd;Seq.size_cons;ARITH_RULE`SUC a+1= SUC(a+1)`;Seq.nth]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[Seq2.next_el;GSYM Pwssrat.sizel0_not_nil;Seq2.index_cons;Seq.index_head;Pplhulj.indexl_hd;Seq.size_cons;ARITH_RULE`SUC a+1= SUC(a+1)`;Seq.nth]
THEN RESA_TAC
THEN MRESAL_TAC Seq.mem_nth[`d`;`t`;`indexl d t + 1`][ARITH_RULE`a+1<b<=> SUC a<b`]
THEN MRESAL_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`nth d t (indexl d t + 1)`;`t`][] ]);;



let next_el_betwn_same=prove(`!f:(A)list. ~(y=z)/\ MEM y f/\ MEM z f  /\ MEM d (betwn f y z)/\  MEM (next_el f d) (betwn f y z) /\ uniq f
==> next_el (betwn f y z) d = next_el f d`,
REPEAT RESA_TAC
THEN MRESA_TAC Tame_list.betwn_mem[`f`;`y`;`z`;`d`]
THEN MRESA_TAC Tame_list.indexl_betwn[`y`;`d`;`z`;`f`]
THEN MRESA_TAC Tame_list.indexl_betwn[`y`;`(next_el f d)`;`z`;`f`]
THEN MRESA_TAC Tame_list.indexf_n[`y`;`d`;`f`]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`d`;`f`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`y`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b/\ b<c==> SUC a<c`)[`indexf y d f`;`indexf y z f`;`sizel f`]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`SUC (indexf y d f)`;`y`;`(next_el f d)`;`f`][COM_POWER;o_DEF]
THEN MRESA_TAC(ARITH_RULE`!a b c d:num. SUC a=b/\ SUC c=d /\ SUC b= d ==> SUC a=c`)[`indexl d (betwn f y z)`;`indexf y d f`;`indexl (next_el f d) (betwn f y z)`;`indexf y ((next_el f d)) f`]
THEN DICH_TAC 0
THEN DICH_TAC (15-7)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC(SYM th))
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.index_uniq[`betwn f y z`;`next_el (betwn f y z) d`;`next_el f d`]
THEN MATCH_DICH_TAC 0
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`d`;`(betwn f y z)`;`SUC 0`][POWER;I_DEF;o_DEF]
THEN DICH_TAC (17-15)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC(SYM th))
THEN GABBREV_TAC`L=betwn f y z`
THEN MATCH_MP_TAC INDEXL_NEXT_EL_SUC
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Seq.index_mem[`(next_el f d)`;`L`]);;


let next_el_last_hd=prove(`!a. uniq(APPEND [z] (APPEND a [y]))==>  next_el (APPEND [z] (APPEND a [y])) y = z`,
REPEAT RESA_TAC
THEN MRESAL_TAC Seq2.next_el_last[`y`;`APPEND [z] (APPEND a [y])`][ Seq2.APPEND_cat;Seq.size_cat;Seq2.size1;ARITH_RULE`0<1+a+1`;HD_APPEND;Ohcgkfu.sing_not_nil;HD]
THEN DICH_TAC 0
THEN MRESAL_TAC Tame_list.last_LAST[`APPEND [z] (APPEND a [y])`;`y`;][APPEND;NOT_CONS_NIL;LAST;APPEND_EQ_NIL;LAST_APPEND]
THEN ASM_REWRITE_TAC[GSYM Seq2.APPEND_cat;APPEND]);;


let size_indexl_last=prove(`!L. uniq L/\ MEM a L/\ sizel L= SUC (indexl a L)==> LAST L=a`,
LIST_INDUCT_TAC
THEN ASM_SIMP_TAC[MEM; Seq2.next_el_hd_cons;Tame_list.MEM_HD;Seq2.index_cons;HD;Seq.size_cons;APPEND;Seq.uniq;MEM_APPEND;DE_MORGAN_THM]
THEN RESA_TAC
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[ARITH_RULE`SUC a= SUC b<=> a=b`]
THENL[
STRIP_TAC
THEN MRESAL_TAC Seq.size_eq0[`t`][LAST_CLAUSES];

MRESA_TAC(SET_RULE`!a b t. ~MEM a t/\ MEM b t==> ~(a=b)`)[`h`;`a`;`t`]
THEN STRIP_TAC
THEN DICH_TAC 5
THEN RESA_TAC
THEN ASM_REWRITE_TAC[LAST]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`t`;`a`]]);;




let l_y_rep_power_le=prove(`f_list L x = next_el r x
==> (!j. j<= l'm L r x ==>
 ((f_list L) POWER (SUC j)) x=((next_el r) POWER ((SUC j))) x)`,

REPEAT RESA_TAC
THEN REWRITE_TAC[Tame_defs2.l_y]
THEN DICH_TAC 0
THEN MRESAL_TAC min_not_eq_imp_eq[`l'm L r x`;`f_list L`;`next_el r`;`x`][Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN STRIP_TAC
THEN THAYTHE_TAC 1[`j`]
THEN ASM_REWRITE_TAC[GSYM Tame_list.POWER_TO_ITER;POWER;o_DEF]);;



let indexf_ytrans_eq_l_m1=prove(  `!L N r(x:A#A) i w. ~(final_list L (rtrans L N r x i))/\ transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\
    next_el (rtrans L N r x i) x =w ==>
    indexf w (ytrans L N r x i) (rtrans L N r x i) = (l'm L (rtrans L N r x i) x)`,

REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z=prev_el r1 (ztrans L N r x i)`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN DICH_ASM_TAC(18-9)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`x`;`r1`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC f_eq_next_el_x
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MRESA_TAC l_y_rep_power_le[`L`;`r1`;`x`]
THEN THAYTHEL_TAC 0[`l'm L r1 x`][ARITH_RULE`a<=a:num`]
THEN EXPAND_TAC"y"
THEN REWRITE_TAC[Tame_defs2.l_y;]
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC  next_el_power_rotate[`r1`;`x`;`SUC (l'm L r1 x)`][POWER;o_DEF]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM]
THEN MRESAL_TAC min_not_eq_imp_eq[`l'm L r1 x`;`f_list L`;`next_el r1`;`x`][Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN ASM_TAC
THEN STRIP_TAC
THEN REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN REPEAT RESA_TAC
THEN GABBREV_TAC`k=min_num
 {m | ~((next_el r1 POWER SUC (SUC m)) x =
        f_list L ((next_el r1 POWER SUC m) x))}`
THEN DICH_TAC(33-30)
THEN EXPAND_TAC"r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans]
THEN RESA_TAC
THEN MRESAL_TAC Tame_list.indexf_n[`x`;`(ztrans L N r x i)`;`r1`][GSYM List_hypermap.dart_in_face;]
THEN MRESA_TAC(ARITH_RULE`!b a :num. a<=b\/ b<a`)[`k`;`sizel r1`]
THEN MRESA_TAC(ARITH_RULE`!a. a=0\/ 0<a`)[`indexf x (ztrans L N r x i) r1`]

THENL[

MRESA_TAC Tame_list.indexf0[`x`;`(ztrans L N r x i)`;`r1`]
THEN THAYTHEL_TAC (37-30)[`sizel r1`][ARITH_RULE`1<=a<=> 0<a`;Tame_defs2.l_m;LET_THM;Tame_list.POWER_TO_ITER]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN ASM_REWRITE_TAC[POWER;I_DEF;o_DEF;Tame_defs2.ztrans;GSYM sizel0_not_nil]
THEN MRESAL_TAC Dangeyj.mem_imp_not_nil[`r1`;`y`][sizel0_not_nil]
THEN MRESA_TAC (ARITH_RULE`!a b. a<=b==>a<= SUC b`)[`sizel r1`;`k`]
THEN THAYTHE_TAC (38-30)[`PRE(sizel r1)`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`sizel r1`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MRESA_TAC (ARITH_RULE`!a b. SUC a<=b==> a<= b`)[`PRE(sizel r1)`;`k`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC 2
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> ONCE_REWRITE_TAC[SYM th]
THEN REWRITE_TAC[POWER;o_DEF]
THEN ASSUME_TAC(SYM th))
THEN ASM_REWRITE_TAC[]
THEN SYM_DICH_TAC 1
THEN MRESA_TAC Pwssrat.next_el_power_rotate[`r1`;`x`;`sizel r1`]
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Pwssrat.next_el_sizel[`x`;`r1`][GSYM List_hypermap.dart_in_face]
THEN DICH_TAC(40-35)
THEN ASM_REWRITE_TAC[Tame_defs2.ztrans]
THEN SET_TAC[];

MRESAL_TAC Tame_list.indexf_lt_sizel[`r1`;`x`;`(ztrans L N r x i)`;][GSYM List_hypermap.dart_in_face]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf x (ztrans L N r x i) r1`][ARITH_RULE`1<=a<=> 0<a`]
THEN MRESA_TAC(ARITH_RULE`!a b c. SUC a<b/\ b<=c==>a<=c/\ SUC a<=SUC c/\ SUC a<=c`)[`PRE(indexf x (ztrans L N r x i) r1)`;`sizel r1`;`k`]
THEN REPEAT RESA_TAC
THEN THAYTHEL_TAC (42-31)[`SUC(PRE(indexf x (ztrans L N r x i) r1))`][ARITH_RULE`1<=a<=> 0<a`;Tame_defs2.l_m;LET_THM;]
THEN DICH_TAC 0
THEN EXPAND_TAC"r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans]
THEN RESA_TAC
THEN MRESA_TAC l_y_rep_power_le[`L`;`r1`;`x`]
THEN THAYTHEL_TAC 0[`PRE(indexf x (ztrans L N r x i) r1)`][ARITH_RULE`1<=a<=> 0<a`;Tame_defs2.l_m;LET_THM;GSYM Tame_list.POWER_TO_ITER]
THEN MRESAL_TAC  next_el_power_rotate[`r1`;`x`;`indexf x (ztrans L N r x i) r1`][POWER;o_DEF]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN DICH_TAC 0
THEN SET_TAC[]
]);;



let next_mark_mem_r_trans=prove(`!L N r (x:A#A) i f w.
                transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
                marked_list L N r x /\
                find_face L x =f/\
                next_el f x=w
                ==>  MEM w (rtrans L N r x i)`,
REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z1=prev_el r1 (ztrans L N r x i)`
THEN GABBREV_TAC`z=ztrans L N r x i`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MRESA_TAC Seq2.mem_next_el[`x`;`r1`]
THEN DICH_ASM_TAC(21-2)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]);;






let next_mark_case_mem= prove(
`(!L N r (x:A#A) i f w.
                transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
                marked_list L N r x /\
                ~final_list L (rtrans L N r x i) /\
                find_face L x =f/\
                next_el f x=w
                ==>  w= (ytrans L N r x i) \/
                 MEM w (betwn (rtrans L N r x i) (ztrans L N r x i) (ytrans L N r x i)))`,

REPEAT RESA_TAC
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z1=prev_el r1 (ztrans L N r x i)`
THEN GABBREV_TAC`z=ztrans L N r x i`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
THEN MRESA_TAC(SET_RULE`!x y. x=y\/ ~(x=y)`)[`w`;`y`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC next_mark_mem_r_trans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf0[`w`;`y`;`r1`]
THEN MP_TAC next_mark_mem_r_trans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`SUC i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC PWSSRAT
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`w`;`i`;][Tame_defs2.ytrans;]
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN DICH_ASM_TAC(27-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r1`;`x`;`w`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<=b==> a=b\/a<b`)[`indexf z w r1`;`indexf z y r1`]
THENL[
 MRESA_TAC Tame_list.indexf_n[`z`;`w`;`r1`]
THEN  MRESA_TAC Tame_list.indexf_n[`z`;`y`;`r1`];


MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.HQYMRTX1_list[`L`;`(ntrans L N r x i)`;`r1`;`x`;][LET_THM]
THEN THAYTHEL_TAC 0[`SUC 0`][ARITH_RULE`1<= SUC 0/\ SUC 0<= SUC a`;POWER;o_DEF;I_DEF]
THEN DICH_TAC 0
THEN EXPAND_TAC"r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(36-1)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.indexf0[`z`;`w`;`r1`][ARITH_RULE`~(a=0)<=> 0<a`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z`;`w`;`y`]

]);;



























let NCVIBWU2_concl = `!L N r f w (x:A#A) i j. transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ ~final_list L (rtrans L N r x i)/\
   find_face L x=f /\
   next_el f x=w /\
  j < indexf w (ztrans L N r x i) f  ==>
  (  (MEM (((next_el f) POWER j) w)  (rtrans L N r x (SUC i)) )/\   indexf w ((next_el f POWER j) w) (rtrans L N r x (SUC i))=j)`;;



let  NCVIBWU2= prove_by_refinement(
 NCVIBWU2_concl,

[
REPEAT GEN_TAC
THEN STRIP_TAC
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z1=prev_el r1 (ztrans L N r x i)`
THEN GABBREV_TAC`z=ztrans L N r x i`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
;






MP_TAC PPLHULJ
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN STRIP_TAC
THEN DICH_ASM_TAC(24-2)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Seq2.mem_next_el[`x`;`(find_face L x)`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_mem_darts[`w`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`w`;`x`;`L`]
THEN MRESA_TAC(ARITH_RULE`!a b j:num. a < b
/\ j < b==> j< a\/ j=a \/ (a<j/\ j< b)`)[`indexf w y f`;`indexf w z f`;`j`]
;








MATCH_MP_TAC(SET_RULE`!A B C D. A/\ E==> ((B \/ A \/ C )\/ D) /\E`)
THEN MRESA_TAC Pwssrat.f_list_power_next_el[`L`;`w`;`j`]
THEN SYM_DICH_TAC 0
THEN MP_TAC f_eq_next_el_x
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN MRESA_TAC l_y_rep_power_le[`L`;`r1`;`x`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 0
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MRESA_TAC(ARITH_RULE`!a:num b. a<b==> a<=b`)[`j`;` indexf w y f`]
THEN STRIP_TAC
THEN THAYTHEL_TAC 0[`j`][POWER;o_DEF]
THEN DICH_ASM_TAC(37-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESAL_TAC  next_el_power_rotate[`r1`;`x`;`SUC j`][POWER;o_DEF]
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN GABBREV_TAC`d=(next_el r1 POWER j) w`
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`x`;`r1`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`r1`;`j`][POWER;o_DEF;I_DEF]
THEN MP_TAC indexf_ytrans_eq_l_m1
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`r1`;`w`;`y`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b /\ b<c==>a<c`)[`j`;`indexf w y f`;`sizel r1`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`j`;`w`;`d`;`r1`]
THEN MP_TAC next_mark_case_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
;




DICH_TAC(56-33)
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Tame_list.indexf_refl[`w`;`f`]
THEN ARITH_TAC;





MRESA_TAC Tame_list.indexf_add_betwn[`z`;`w`;`y`;`r1`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`y=w`]
;




DICH_TAC(58-33)
THEN SYM_DICH_TAC 0
THEN MRESA_TAC Tame_list.indexf_refl[`y`;`f`]
THEN ARITH_TAC;





MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`w`;`d`;`y`;]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`d=w`]
;



DICH_TAC(60-55)
THEN MRESA_TAC Tame_list.indexf_refl[`w`;`r1`]
THEN MRESAL_TAC Tame_list.indexf_refl[`w`;`(APPEND (APPEND [z] (APPEND (betwn r1 z y) [y]))
     (betwn (find_face L y) y z))`][MEM_APPEND]
;




MRESAL_TAC Tame_list.indexf0[`w`;`d`;`r1`][ARITH_RULE`~(a=0)<=> 0<a`]
THEN DICH_TAC (61-33)
THEN RESA_TAC
THEN DICH_TAC (61-58)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_add_betwn[`w`;`d`;`y`;`r1`]
THEN MRESA_TAC(ARITH_RULE`!a b c d e. a+b=c /\ d+e=b/\ 0<d/\ d<b==> e<= c/\ 0<e/\ e<c`)[`indexf z w r1`;`l'm L r1 x`;`indexf z y r1`;`j`;`indexf d y r1`]
THEN MRESA_TAC Tame_list.indexf_add_right[`z`;`d`;`y`;`r1`]
THEN MRESA_TAC(ARITH_RULE`!a b c. a+b=c /\ 0< b/\ b<c==> a<c/\ 0<a`)[`indexf z d r1`;`indexf d y r1`;`indexf z y r1`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z`;`d`;`y`;]
THEN GABBREV_TAC`L1=(APPEND (APPEND [z] (APPEND (betwn r1 z y) [y]))
 (betwn (find_face L y) y z))`
THEN MP_TAC OHCGKFU
THEN RESA_TAC
THEN THAYTHEL_ASM_TAC 0[`L`;`N`;`r`;`x`;`w`;`i`][Tame_defs2.ytrans;]
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`d`;`i`][Tame_defs2.ytrans;]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[]
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN STRIP_TAC
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`z=d`]
;



DICH_TAC(73-68)
THEN MRESA_TAC Tame_list.indexf_refl[`d`;`r1`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN ARITH_TAC;





MRESAL_TAC Tame_list.AQIUNPP3[`L`;`SUC i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(82-75)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x (SUC i))`;`(rtrans L N r x (SUC i))`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`L1`;`z`;`w`;`d`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1]
THEN STRIP_TAC
THEN DICH_TAC (88-55)
THEN RESA_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c d e f. a+b=c /\ e+d=b /\ f+d=c/\ 0<e ==>  a<f`)
[`indexf z w r1`;`indexf w y r1`;`indexf z y r1`;`indexf d y r1`;`j`;`indexf z d r1`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`w=z`]
;



MRESA_TAC Tame_list.not_betwn1[`z`;`y`;`r1`;]
THEN DICH_TAC(92-54)
THEN RESA_TAC;





MRESA_TAC Tame_list.indexf0[`z`;`w`;`L1`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN STRIP_TAC
THEN DICH_TAC (92-88)
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_add_betwn[`z`;`w`;`d`;`L1`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c d e f. a+b=c /\ e+d=b /\ f+d=c/\ 0<e ==>  a+e=f`)
[`indexf z w r1`;`indexf w y r1`;`indexf z y r1`;`indexf d y r1`;`j`;`indexf z d r1`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;





MATCH_MP_TAC(SET_RULE`!A B C D E. A /\ E==> ((D \/ B \/ A)\/ C)/\ E`)
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`f`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MP_TAC indexf_ytrans_eq_l_m1
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC next_mark_case_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
;




MRESAL_TAC Tame_list.indexf_refl[`w`;`(APPEND (APPEND [next_el r1 z1] (APPEND (betwn r1 (next_el r1 z1) y) [y]))
 (betwn (find_face L y) y (next_el r1 z1)))`][MEM_APPEND;Seq.mem_seq1]
THEN SYM_DICH_TAC 2
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.indexf_refl[`y`;`f`][MEM_APPEND;Seq.mem_seq1]
;


DICH_ASM_TAC(38-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC next_mark_mem_r_trans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC OHCGKFU
THEN RESA_TAC
THEN THAYTHEL_ASM_TAC 0[`L`;`N`;`r`;`x`;`w`;`i`][Tame_defs2.ytrans;]
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`y`;`i`][Tame_defs2.ytrans;]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN GABBREV_TAC`L1=(APPEND (APPEND [z] (APPEND (betwn r1 z y) [y]))
 (betwn (find_face L y) y z))`
THEN REPEAT RESA_TAC
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`z`;`w`;`y`;`r1`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z`;`w`;`y`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`L1`;`z`;`w`;`y`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN STRIP_TAC
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`SUC i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(65-58)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x (SUC i))`;`(rtrans L N r x (SUC i))`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN DICH_TAC (70-55)
THEN RESA_TAC
THEN MRESA_TAC Tame_list.indexf_add_betwn[`z`;`w`;`y`;`L1`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN DICH_TAC(70-52)
THEN ARITH_TAC;





REPLICATE_TAC (33-24) (POP_ASSUM MP_TAC)
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==>a<=b`)[`j`;`indexf w z f`]
THEN REPLICATE_TAC (33-24) (STRIP_TAC)
THEN DICH_TAC ((34-24))
THEN STRIP_TAC;





MATCH_MP_TAC(SET_RULE`!A B C D E. A /\ E==> ((D \/ B \/ C)\/ A)/\ E`)
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`w`;`L`]
THEN DICH_ASM_TAC(35-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
THEN GABBREV_TAC`j1=j-indexf w y f`
THEN MRESAL_TAC(ARITH_RULE`!a b c e:num. a<b /\ b<c /\ b-a=e ==> 0< b-a /\ b-a< c-a/\ b<=c/\ b=e+a`)[`indexf w y f`;`j`;`indexf w z f`;`j1`][Hypermap.lemma_add_exponent_function]
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`f`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`w=y`]
;





MRESA_TAC Tame_list.indexf_refl[`y`;`f`]
THEN DICH_TAC(49-45)
THEN ASM_REWRITE_TAC[ARITH_RULE`a-0=a`]
THEN STRIP_TAC
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN GABBREV_TAC`d=(next_el f POWER j1) y`
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`y`;`f`;`j1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`y`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b /\ b<c==>a<c`)[`j1`;`indexf y z f`;`sizel f`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`j1`;`y`;`d`;`f`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`;]
THEN REWRITE_TAC[ARITH_RULE`a+0=a`]
THEN MATCH_MP_TAC Tame_list.next_eln_indexf
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN GABBREV_TAC`L1=(APPEND (APPEND [z] (APPEND (betwn r1 z y) [y]))
 (betwn (f) y z))`
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`SUC i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(65-58)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x (SUC i))`;`(rtrans L N r x (SUC i))`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN ASM_REWRITE_TAC[]
THEN GSUBGOAL_THEN`!t. t< indexf y z f
==> (next_el L1 POWER t) y= (next_el f POWER t) y`ASSUME_TAC;





INDUCT_TAC;



REWRITE_TAC[POWER;o_DEF;I_DEF]
;



STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b:num. SUC a< b==> a<b`)[`t`;`indexf y z f`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF]
THEN MRESA_TAC(ARITH_RULE`!t. t=0\/ 0<t`)[`t`];




REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC (GSYM APPEND_ASSOC)[`[z]`;`betwn r1 z y`;`[y]`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn f y z`;`d`]
THEN MRESAL_TAC tuong_minh_tai[`y`;`betwn f y z`;`APPEND [z] (betwn r1 z y)`][GSYM Pwssrat.sizel0_not_nil]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`f`;`y`;`z`];



GABBREV_TAC`d1=(next_el f POWER t) y`
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`y`;`f`;`t`]
THEN MRESA_TAC Tame_list.indexf_le_sizel[`f`;`y`;`z`]
THEN MRESA_TAC (ARITH_RULE`!a b c:num. a<b /\ b<=c ==> a<c`)[`t`;`indexf y z f`;`sizel f`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`t`;`y`;`d1`;`f`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d1`;`z`]
THEN MRESA_TAC Tame_list.indexl_betwn[`y`;`d1`;`z`;`f`]
THEN MRESA_TAC Tame_list.size_betwn[`y`;`z`;`f`]
THEN MRESA_TAC (ARITH_RULE`!a b. SUC a< b==> 0<b`)[`t`;`indexf y z f`]
THEN MRESA_TAC (GSYM Hypermap.LT_SUC_PRE)[`indexf y z f`]
THEN MRESAL_TAC next_el_append[`betwn f y z`;`d1`;`APPEND [z] (APPEND (betwn r1 z y) [y])`][ARITH_RULE`a< PRE b<=> SUC a< SUC(PRE b)`]
THEN MATCH_MP_TAC next_el_betwn_same
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`(next_el f d1)`;`z`]
THEN MRESA_TAC (ARITH_RULE`!a b c:num. a<b /\ b<=c ==> a<c`)[`SUC t`;`indexf y z f`;`sizel f`]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`d1`;`f`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`SUC t`;`y`;`(next_el f d1)`;`f`][COM_POWER;o_DEF;]
THEN ARITH_TAC
;



THAYTHE_TAC 0[`j1`]
THEN EXPAND_TAC"L1"
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.size_cat;Seq2.size1]
THEN DICH_TAC (72-48)
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.size_betwn[`y`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b==> 0<b`)[`j1`;`indexf y z f`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf y z f`][ARITH_RULE`1<=a<=> 0<a`;ARITH_RULE`(1+a+1)+b=1+a+ SUC b`]
THEN DICH_TAC (76-73)
THEN ARITH_TAC;




(**********************)


MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESAL_TAC Tame_list.indexf0[`w`;`y`;`f`][ARITH_RULE`~(a=0)<=> 0<a`]
THEN MRESA_TAC (SET_RULE`!A. A\/ ~A`)[`w=z`];




DICH_TAC(51-34)
THEN MRESA_TAC Tame_list.indexf_refl[`z`;`f`]
THEN ARITH_TAC;






MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`w`;`y`;`z`;]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`w`;`y`;`z`;`f`]
THEN DICH_TAC(53-45)
THEN SYM_DICH_TAC 0
THEN REWRITE_TAC[ARITH_RULE`(a+b)-a=b:num`]
THEN STRIP_TAC
THEN GABBREV_TAC`d=(next_el f POWER j1) y`
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`y`;`f`;`j1`]
THEN MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`y`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c:num. a<b /\ b<c==>a<c`)[`j1`;`indexf y z f`;`sizel f`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`j1`;`y`;`d`;`f`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`;]
;






MATCH_MP_TAC Tame_list.next_eln_indexf
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN GABBREV_TAC`L1=(APPEND (APPEND [z] (APPEND (betwn r1 z y) [y]))
 (betwn (f) y z))`
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`SUC i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(65-58)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x (SUC i))`;`(rtrans L N r x (SUC i))`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN ASM_REWRITE_TAC[]
THEN MP_TAC next_mark_case_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
;





GSUBGOAL_THEN`!t. t< indexf y z f
==> (next_el L1 POWER t) y= (next_el f POWER t) y`ASSUME_TAC;






INDUCT_TAC;




REWRITE_TAC[POWER;o_DEF;I_DEF]
;




STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b:num. SUC a< b==> a<b`)[`t`;`indexf y z f`]
THEN DICH_TAC 2
THEN RESA_TAC
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF]
THEN MRESA_TAC(ARITH_RULE`!t. t=0\/ 0<t`)[`t`];





REWRITE_TAC[POWER;o_DEF;I_DEF]
THEN MRESA_TAC (GSYM APPEND_ASSOC)[`[z]`;`betwn r1 z y`;`[y]`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`betwn f y z`;`d`]
THEN MRESAL_TAC tuong_minh_tai[`y`;`betwn f y z`;`APPEND [z] (betwn r1 z y)`][GSYM Pwssrat.sizel0_not_nil]
THEN MRESA_TAC Dangeyj.HD_BETWN2[`f`;`y`;`z`];




GABBREV_TAC`d1=(next_el f POWER t) y`
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`y`;`f`;`t`]
THEN MRESA_TAC Tame_list.indexf_le_sizel[`f`;`y`;`z`]
THEN MRESA_TAC (ARITH_RULE`!a b c:num. a<b /\ b<=c ==> a<c`)[`t`;`indexf y z f`;`sizel f`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`t`;`y`;`d1`;`f`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d1`;`z`]
THEN MRESA_TAC Tame_list.indexl_betwn[`y`;`d1`;`z`;`f`]
THEN MRESA_TAC Tame_list.size_betwn[`y`;`z`;`f`]
THEN MRESA_TAC (ARITH_RULE`!a b. SUC a< b==> 0<b`)[`t`;`indexf y z f`]
THEN MRESA_TAC (GSYM Hypermap.LT_SUC_PRE)[`indexf y z f`]
THEN MRESAL_TAC next_el_append[`betwn f y z`;`d1`;`APPEND [z] (APPEND (betwn r1 z y) [y])`][ARITH_RULE`a< PRE b<=> SUC a< SUC(PRE b)`]
THEN MATCH_MP_TAC next_el_betwn_same
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`(next_el f d1)`;`z`]
THEN MRESA_TAC (ARITH_RULE`!a b c:num. a<b /\ b<=c ==> a<c`)[`SUC t`;`indexf y z f`;`sizel f`]
THEN MRESAL_TAC Pwssrat.MEM_POWER_NEXT_EL[`d1`;`f`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MRESAL_TAC Tame_list.next_eln_indexf[`SUC t`;`y`;`(next_el f d1)`;`f`][COM_POWER;o_DEF;]
THEN ARITH_TAC
;




GSUBGOAL_THEN`(next_el L1 POWER (indexf w y f)) w = y`ASSUME_TAC
;







MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MP_TAC indexf_ytrans_eq_l_m1
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
;




MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC next_mark_mem_r_trans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC OHCGKFU
THEN RESA_TAC
THEN THAYTHEL_ASM_TAC 0[`L`;`N`;`r`;`x`;`w`;`i`][Tame_defs2.ytrans;]
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`y`;`i`][Tame_defs2.ytrans;]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`z`;`w`;`y`;`r1`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z`;`w`;`y`]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`L1`;`z`;`w`;`y`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_add_betwn[`z`;`w`;`y`;`L1`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b c d:num. a+b=c /\ a+d=c==> b=d`)[`indexf z w L1`;`l'm L r1 x`;`indexf z y L1`;`indexf w y L1`]
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`L1`]
THEN DICH_TAC 0
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND]
THEN ASM_REWRITE_TAC[Seq.mem_seq1;ARITH_RULE`~(a=0)<=> 0<a`]
;






THAYTHEL_ASM_TAC 1[`j1`][Hypermap.lemma_add_exponent_function]
THEN EXPAND_TAC"L1"
THEN REWRITE_TAC[Seq2.APPEND_cat;Seq.size_cat;Seq2.size1]
THEN MRESA_TAC Tame_list.size_betwn[`y`;`z`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b==> 0<b`)[`j1`;`indexf y z f`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf y z f`][ARITH_RULE`1<=a<=> 0<a`;ARITH_RULE`(1+a+1)+b=1+a+ SUC b`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MRESA_TAC Tame_list.size_betwn[`z`;`y`;`r1`]
THEN MP_TAC next_mark_mem_r_trans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MP_TAC indexf_ytrans_eq_l_m1
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn[`r1`;`z`;`w`;`y`]
THEN MRESA_TAC Tame_list.indexf_add_betwn[`z`;`w`;`y`;`r1`]
THEN MRESA_TAC(ARITH_RULE`!a b. a<b==> 0<b`)[`indexf z w r1`;`indexf z y r1`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf z y r1`][ARITH_RULE`1<=a<=> 0<a`;ARITH_RULE`1+a+b= SUC a+  b`]
THEN DICH_TAC 2
THEN DICH_TAC 2
THEN DICH_TAC(90-51)
THEN ARITH_TAC
;



]);;



let NCVIBWU3_concl = `!L N r f w (x:A#A) i j. transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ ~final_list L (rtrans L N r x i)/\
   find_face L x=f /\
   next_el f x=w /\
  j = indexf w (ztrans L N r x i) f  ==>
  (  (MEM (((next_el f) POWER j) w)  (rtrans L N r x (SUC i)) )/\   indexf w ((next_el f POWER j) w) (rtrans L N r x (SUC i))=j)`;;



let NCVIBWU3= prove_by_refinement(  
 NCVIBWU3_concl,
[

REPEAT GEN_TAC
THEN STRIP_TAC
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN GABBREV_TAC`r1=(rtrans L N r x i)`
THEN GABBREV_TAC`y=l'y L r1 x`
THEN GABBREV_TAC`z1=prev_el r1 (ztrans L N r x i)`
THEN GABBREV_TAC`z=ztrans L N r x i`
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1;]
;





MP_TAC PPLHULJ
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN STRIP_TAC
THEN DICH_ASM_TAC(24-2)[Tame_defs2.good_list]
THEN MRESA_TAC List_hypermap.uniq_find_face[`x`;`L`]
THEN MRESA_TAC marked_list_of_dart[`L`;`N`;`r`;`x`;]
THEN MRESAL_TAC Seq2.mem_next_el[`x`;`(find_face L x)`][GSYM List_hypermap.dart_in_face]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_mem_darts[`w`;`x`;`L`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`w`;`x`;`L`]
;



MATCH_MP_TAC(SET_RULE`!A B C D E. A/\ E==> ((A \/ B \/ D)\/ C) /\E`)
THEN MRESA_TAC Tame_list.indexf_n[`w`;`z`;`f`]
THEN DICH_ASM_TAC(33-10)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x i)`;`r1`]
THEN MRESA_TAC Seq2.next_prev_id[`(ztrans L N r x i)`;`r1`]
;




MRESA_TAC(ARITH_RULE`!a b. a<b==> 0<b`)[`indexf w y f`;`indexf w z f`]
THEN MRESAL_TAC Hypermap.LE_SUC_PRE[`indexf w z f`][ARITH_RULE`1<=a<=> 0<a`;ARITH_RULE`(1+a+1)+b=1+a+ SUC b`]
THEN MRESA_TAC(ARITH_RULE`!a b. SUC a=b==> a<b`)[`PRE(indexf w z f)`;`indexf w z f`]
THEN MP_TAC NCVIBWU2
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`f`;`w`;`x`;`i`;`PRE(indexf w z f)`][Tame_defs2.ztrans;Tame_defs2.ytrans;]
THEN GABBREV_TAC`j1=PRE (indexf w z f)`
THEN DICH_TAC 1
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN GABBREV_TAC`L1=(APPEND (APPEND [z] (APPEND (betwn r1 z y) [y]))
 (betwn (find_face L y) y z))`
THEN GABBREV_TAC`d=(next_el f POWER j1) w`
THEN MRESA_TAC Tame_list.next_eln_indexf[`SUC j1`;`w`;`z`;`L1`]
THEN MATCH_DICH_TAC 0
THEN DICH_TAC (48-42)
THEN STRIP_TAC
THEN POP_ASSUM(fun th-> REWRITE_TAC[SYM th] THEN ASSUME_TAC(SYM th))
THEN ASM_REWRITE_TAC[COM_POWER;o_DEF;]
THEN GSUBGOAL_THEN`MEM w L1`ASSUME_TAC
;





MP_TAC next_mark_case_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[];





ASM_REWRITE_TAC[]
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[]
THEN MRESAL_TAC Tame_list.AQIUNPP3[`L`;`SUC i`;`N`;`r`;`x`][LET_THM]
THEN DICH_ASM_TAC 0[Tame_defs2.marked_list;transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans]
THEN DICH_ASM_TAC(82-75)[Tame_defs2.normal_list]
THEN MRESA_TAC Tame_list.uniq_flatten_uniq[`(ntrans L N r x (SUC i))`;`(rtrans L N r x (SUC i))`]
THEN DICH_TAC 0
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[]
THEN RESA_TAC
THEN GSUBGOAL_THEN`MEM d L1`ASSUME_TAC
;




DICH_TAC(63-42) 
THEN ASM_REWRITE_TAC[Tame_defs2.rtrans;Tame_defs2.transform_list;COM_POWER;o_DEF;]
THEN ASM_REWRITE_TAC[transform_list_power_rep]
THEN ASM_REWRITE_TAC[Tame_defs2.transform_list;LET_THM;Tame_defs2.split_normal_list;GSYM Tame_defs2.ztrans;]
THEN EXPAND_TAC "r1"
THEN REWRITE_TAC[GSYM Tame_defs2.ztrans;]
THEN ASM_REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN REPEAT RESA_TAC
THEN EXPAND_TAC "L1"
THEN REWRITE_TAC[MEM_APPEND;Seq.mem_seq1]
THEN ASM_REWRITE_TAC[];




MRESA_TAC Tame_list.indexf_n[`w`;`d`;`L1`]
THEN MP_TAC z_not_eq_ytrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`d`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<b==> a<=b`)[`indexf w y f`;`indexf w z f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`z`;`f`]
;



MRESA_TAC(ARITH_RULE`!a. a=0\/ a=1\/ 1<a`)[`indexf y z f`];





MRESA_TAC Tame_list.indexf0[`y`;`z`;`f`]
;


MRESA_TAC Tame_list.indexf1[`y`;`z`;`f`]
THEN DICH_TAC 2
THEN ASM_REWRITE_TAC[ARITH_RULE`a+1=SUC b<=> a=b`]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexf_n[`w`;`y`;`f`]
THEN MRESAL_TAC(SET_RULE`!a. ~a\/ a`)[`(betwn f y z)=[]`][List_hypermap.mem_not_nil];





MRESA_TAC Tame_list.indexf_betwn_eq[`f`;`y`;`x'`;`z`]
THEN DICH_TAC 0
THEN DICH_TAC 0
THEN ARITH_TAC;



MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN DICH_TAC(74-63)
THEN EXPAND_TAC"L1"
THEN POP_ASSUM(fun th-> REWRITE_TAC[th])
THEN POP_ASSUM(fun th-> REWRITE_TAC[th;APPEND_NIL])
THEN STRIP_TAC
THEN STRIP_TAC;




MATCH_MP_TAC next_el_last_hd
THEN ASM_REWRITE_TAC[];




REWRITE_TAC[ Seq2.APPEND_cat;Seq.size_cat;Seq2.size1;ARITH_RULE`0<1+a+1`;HD_APPEND;Ohcgkfu.sing_not_nil;HD]
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.size_betwn[`z`;`y`;`r1`]
THEN MRESA_TAC Tame_list.indexf0[`z`;`y`;`r1`]
THEN MRESA_TAC (ARITH_RULE`!b:num. ~(b=0)==> 0<b`)[`indexf z y r1`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`indexf z y r1`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MP_TAC next_mark_case_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
;



DICH_TAC(80-71)
THEN ASM_REWRITE_TAC[]
THEN MRESA_TAC Tame_list.indexf_refl[`y`;`f`]
THEN STRIP_TAC
THEN SYM_DICH_TAC 0
THEN ASM_REWRITE_TAC[]
;



MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z`;`w`;`y`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MP_TAC indexf_ytrans_eq_l_m1
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC next_mark_mem_r_trans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MRESA_TAC (ARITH_RULE`!b:num. a<b ==> a<=b`)[`indexf z w r1`;`indexf z y r1`]
THEN MRESA_TAC Tame_list.indexf_add_left[`z`;`w`;`y`;`r1`]
THEN DICH_TAC 0
THEN DICH_TAC (87-81)
THEN ARITH_TAC;






MRESA_TAC Tame_list.indexf_lt_sizel[`f`;`w`;`z`]
THEN MRESA_TAC(ARITH_RULE`!a b c e. a+b= SUC c/\ 1<b/\ SUC c< e==> a<c/\ a<=c/\ c< e`)[`indexf w y f`;`indexf y z f`;`j1`;`sizel f`]
THEN MRESA_TAC Pwssrat.MEM_POWER_NEXT_EL[`w`;`f`;`j1`]
THEN MRESA_TAC Tame_list.next_eln_indexf[`j1`;`w`;`d`;`f`]
THEN MRESA_TAC Tame_list.indexf_add_left[`w`;`y`;`d`;`f`]
THEN MRESA_TAC(ARITH_RULE`!a b c d. a+b= SUC c/\a+d=c/\ a<c==> b=SUC d/\ 0<d/\ d<b`)[`indexf w y f`;`indexf y z f`;`j1`;`indexf y d f`]
THEN DICH_TAC(81-68)
THEN ASM_REWRITE_TAC[]
THEN STRIP_TAC
THEN MRESA_TAC Tame_list.indexl_betwn[`y`;`d`;`z`;`f`]
THEN MRESA_TAC Tame_list.size_betwn[`y`;`z`;`f`]
THEN MRESA_TAC (ARITH_RULE`!a b. 1< b==> 0<b`)[`0`;`indexf y z f`]
THEN MRESA_TAC (GSYM Hypermap.LT_SUC_PRE)[`indexf y z f`]
THEN DICH_TAC 0
THEN SYM_DICH_TAC 1
THEN REWRITE_TAC[ARITH_RULE`SUC A= SUC B<=> A=B`]
THEN SYM_DICH_TAC 1
THEN STRIP_TAC
THEN MRESA_TAC Ohcgkfu.uniq_betwn[`y`;`z`;`f`]
THEN MRESA_TAC size_indexl_last[`d`;`(betwn f y z)`]
THEN MRESA_TAC List_hypermap.mem_find_face_imp_faces_eq[`y`;`x`;`L`]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`(betwn f y z)`;`d`]
THEN MRESA_TAC LAST_APPEND[`(APPEND [z] (APPEND (betwn r1 z y) [y]))`;`(betwn (find_face L y) y z)`]
THEN MRESA_TAC Seq2.next_el_last[`y`;`L1`]
THEN DICH_TAC 0
THEN EXPAND_TAC"L1"
THEN REWRITE_TAC[ Seq2.APPEND_cat;Seq.size_cat;Seq2.size1;ARITH_RULE`0<(1+a+1)+b`;HD_APPEND;Ohcgkfu.sing_not_nil;HD]
THEN REWRITE_TAC[GSYM Seq2.APPEND_cat]
THEN ASM_REWRITE_TAC[APPEND;NOT_CONS_NIL]
THEN MRESA_TAC Dangeyj.mem_imp_not_nil[`L1`;`d`]
THEN MRESA_TAC Tame_list.last_LAST[`L1`;`y`];





EXPAND_TAC"L1"
THEN REWRITE_TAC[ Seq2.APPEND_cat;Seq.size_cat;Seq2.size1;ARITH_RULE`0<(1+a+1)+b`;HD_APPEND;Ohcgkfu.sing_not_nil;HD]
THEN RESA_TAC
THEN DICH_TAC(91-69)
THEN MRESA_TAC (GSYM Hypermap.LT_SUC_PRE)[`indexf y z f`]
THEN MRESA_TAC Tame_list.size_betwn[`y`;`z`;`f`]
THEN ASM_REWRITE_TAC[ARITH_RULE`(1+a+1)+b=SUC a+ SUC b`]
THEN MP_TAC mem_ztrans_rtrans
THEN RESA_TAC
THEN THAYTHE_TAC 0[`L`;`N`;`r`;`x`;`i`]
THEN MP_TAC ytrans_mem_rtrans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`][Tame_defs2.ytrans;]
THEN MRESA_TAC Tame_list.size_betwn[`z`;`y`;`r1`]
THEN MRESA_TAC Tame_list.indexf0[`z`;`y`;`r1`]
THEN MRESA_TAC (ARITH_RULE`!b:num. ~(b=0)==> 0<b`)[`indexf z y r1`]
THEN MRESAL_TAC (GSYM Hypermap.LT_SUC_PRE)[`indexf z y r1`][ARITH_RULE`SUC j< 1+ a+1<=> j< SUC a`]
THEN MP_TAC next_mark_case_mem
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
;



MRESA_TAC Tame_list.indexf_refl[`y`;`f`]
THEN DICH_TAC 3
THEN ARITH_TAC;




MRESA_TAC Tame_list.indexf_betwn_eq[`r1`;`z`;`w`;`y`]
THEN MRESAL_TAC Pwssrat.f_list_power_next_el[`L`;`x`;`SUC 0`][POWER;o_DEF;I_DEF]
THEN MP_TAC indexf_ytrans_eq_l_m1
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC indexf_ytrans_eq_l_m
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MP_TAC next_mark_mem_r_trans
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`x`;`i`;`f`;`w`][Tame_defs2.ytrans;]
THEN MRESA_TAC (ARITH_RULE`!b:num. a<b ==> a<=b`)[`indexf z w r1`;`indexf z y r1`]
THEN MRESA_TAC Tame_list.indexf_add_left[`z`;`w`;`y`;`r1`]
THEN DICH_TAC 0
THEN DICH_TAC (87-81)
THEN ARITH_TAC;


]);;


let NCVIBWU_concl = `!L N r f w (x:A#A) i j. transform_assumption_v2 L /\
         good_list L /\
         good_list_nodes L /\
 marked_list L N r x /\ ~final_list L (rtrans L N r x i)/\
   find_face L x=f /\
   next_el f x=w /\
  j <= indexf w (ztrans L N r x i) f  ==>
  (  (MEM (((next_el f) POWER j) w)  (rtrans L N r x (SUC i)) )/\   indexf w ((next_el f POWER j) w) (rtrans L N r x (SUC i))=j)`;;




let NCVIBWU=prove( NCVIBWU_concl,

REPEAT GEN_TAC
THEN STRIP_TAC
THEN MRESA_TAC(ARITH_RULE`!a b:num. a<=b==> a<b\/ a=b`)[`j`;`indexf w (ztrans L N r x i) f`]
THENL
[
MP_TAC NCVIBWU2
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`f`;`w`;`x`;`i`;`j`][];

MP_TAC NCVIBWU3
THEN RESA_TAC
THEN THAYTHEL_TAC 0[`L`;`N`;`r`;`f`;`w`;`x`;`i`;`j`][]]);;




 end;;





load_end __FILE__;;