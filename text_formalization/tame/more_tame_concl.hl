(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Conclusions 2                                                              *)
(* Chapter: Tame Hypermap                                                     *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2013-12-12                                                           *)
(* ========================================================================== *)

(* Final conclusions from Tame Hypermap chapter *)

needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
flyspeck_needs "../tame_archive/tame_archive.hl";;
flyspeck_needs "tame/import_tame_classification.hl";;

module More_tame_concl = struct


open Hypermap;;
open Import_tame_classification;;

parse_as_infix("POWER",(24,"right"));;
parse_as_infix("in_dart_of_loop",(11,"right"));;
(* parse_as_infix("iso",(24,"right"));; *)
unparse_as_infix "iso";;

make_overloadable "vertices" `:B -> (num list)`;;

overload_interface ("vertices",`FST:num list # bool -> num list`);;

(* ========================================================================== *)
(* What is needed to finish AQIUNPP in Hypermaps chapter *)
(* ========================================================================== *)

let QRDYXYJ = Hypermap.lemmaParameters;;

let AQIUNPP1 = Hypermap.lemma_normal_family_transform;;

let transform = new_definition `transform (H:(A)hypermap) x (NF,L) = 
  (family_transform H NF L x,loop1_transform H NF L x)`;;

let AQIUNPP2_concl = 
  `!H:(A)hypermap NF:(A)loop->bool L:(A)loop x:A. 
  is_marked (H ,NF, L, x) /\ ~(L IN final_loops H NF) 
   ==> (let (NF',L') =  (transform H x (NF,L)) in is_marked (H,NF',L',x))`;;

(* ========================================================================== *)
(* good_list in Isabelle development. *)
(* ========================================================================== *)

let tame_good_concl = `!g. PlaneGraphs g /\ tame g ==> good_list (fgraph g)`;;

let archive_good_concl = `!y. y IN archive ==> good_list y`;;

let good_iso = `!x y. good_list x /\ good_list y /\ iso_fgraph x y ==>
  (iso (hypermap_of_list (x)) (hypermap_of_list (y)) \/
     iso (opposite_hypermap (hypermap_of_list (x))) (hypermap_of_list (y)))`;;


(* ========================================================================== *)
(* Matching Isabelle-tame with hypermap-tame *)
(* ========================================================================== *)

(* this is work in progress *)
let tame_good_concl = `!g. PlaneGraphs g /\ tame g ==> good_list (fgraph g)`;;

(* this is work in progress *)

let tame9a_correspondence_weak = 
  `!g. tame_hypermap (hypermap_of_list (fgraph g)) /\ PlaneGraphs g 
   ==>
  tame9a g`;;

let tame9a_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame9a g`;;

let tame10_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame10 g`;;

let tame11a_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame11a g`;;

let tame12o_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame12o g`;;

let tame13a_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame13a g`;;

let tame_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame g`;;

(* ========================================================================== *)
(* Matching Isabelle-planar with hypermap-planar *)
(* ========================================================================== *)

(* This needs to be built up inductively step by step *)

let TAME_CORRESPONDENCE_MAIN_concl = `!H. tame_hypermap H ==>
  (?g. PlaneGraphs g /\ iso H (hypermap_of_list (fgraph g)))`;;

(* ========================================================================== *)
(* Final conclusions *)
(* ========================================================================== *)

(* easy corollary of tame_good, archive_good, good_iso, TAME_CORRESPONDENCE_MAIN *)

let TAME_CORRESPONDENCE_2_concl = 
 `!H. tame_hypermap H /\ import_tame_classification_FAKE ==>
  (?x. x IN archive /\ (iso H (hypermap_of_list x) \/  
  iso (opposite_hypermap H)  (hypermap_of_list x)))`;;

end;;
