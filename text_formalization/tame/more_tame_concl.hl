(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Conclusions 2                                                              *)
(* Chapter: Tame Hypermap                                                     *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2013-12-12                                                           *)
(* ========================================================================== *)

(* Final conclusions from Tame Hypermap chapter.
   SVN 3447 contains definitions in terms of hypermaps.
   Jan 31, 2014 switched definitions in terms of lists. *)

needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;

module More_tame_concl = struct


open Hales_tactic;;
open Hypermap;;


parse_as_infix("POWER",(24,"right"));;
unparse_as_infix "iso";;


(* ========================================================================== *)
(* Matching Isabelle-planar with hypermap-planar *)
(* ========================================================================== *)

(*
let import_tame_classification = 
  Import_tame_classification.import_tame_classification;;
*)

(* This is the main result.  
It needs to be built up inductively step by step.   *)

let LSKOKJE_concl = `!H. is_restricted H ==>
  (?g. PlaneGraphs g /\ good_graph_v3 g /\
     iso H (hypermap_of_list (fgraph g)))`;;



(* ========================================================================== *)
(* good_list in Isabelle development. *)
(* ========================================================================== *)

(*

We don't need to prove these directly.  Properties of g can be deduced
when we match it with the core_list of (L,N) coming from the restricted
hypermap:

let tame_good_concl = `!g. PlaneGraphs g /\ tame g ==> good_list (fgraph g)`;;

let JUJUWAT_concl = `!g. planegraph_relaxed g ==> good_list (fgraph g)`;;

let ETDLJXT2_concl = `!g. planegraph_relaxed g ==> good_list_nodes (fgraph g)`;;

let CGGZYRC_concl = `!g f d. planegraph g /\ MEM f (faces g) /\ 
  MEM d (list_pairs (FST f))  /\ ~final f ==> 
  (?f'. MEM f' (faces g) /\ 
  MEM (SND d,FST d) (list_pairs (FST f')) /\ final f')`;;

*)


let DPZGBYF_concl = 
  "formalized DPZGBYU",
  (`!g. planegraph g ==> planegraph_relaxed g`);;

let ETDLJXT1_concl = `!g. planegraph_relaxed g ==> 
  (vertices_set2 g = elements_of_list (fgraph g))`;;

let HWDMZDM_concl = `!g. planegraph_relaxed g ==>
  good_faces_v3 g`;;

let SNVACWG_concl = ("formalized good_list_nodes_quotient",
   `!L N. good_list L /\ 
  good_list_nodes L /\ is_restricted (hypermap_of_list L) /\
  normal_list L N ==>
  good_list (quotient_list L N)`);;

let PMBRINH_concl = ("formalized PMBRINH",`!L N. good_list_nodes L /\ normal_list L N ==>
  good_list_nodes (quotient_list L N)`);;

let LYNVPSU_concl = ("formalized good_list_quotient",`!L N r x. marked_list L N r x ==>
    all uniq (quotient_list L N)`);;

let LEBHIRJ_concl = `!L N N' r r' x. 
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  N' = ntrans L N r x 1 /\
  r' = rtrans L N r x 1 ==>
  set_of_list (MAP FST (flatten N')) = 
      set_of_list (MAP FST (flatten N)) UNION
	set_of_list (MAP FST (filter (\d. ~(MEM d r)) r'))`;;

let HOJODCM1_concl = `!L N N' r r' s x.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  N' = ntrans L N r x 1 /\
  r' = rtrans L N r x 1 /\
  MEM s N' ==> (MEM s N \/ s = r' \/ s = LAST N')`;;

let HOJODCM2_concl = `!L N N' r r' s x.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  N' = ntrans L N r x 1 /\
  r' = rtrans L N r x 1 /\
  MEM v (MAP FST (filter (\d. ~(MEM d r)) r')) /\
  MEM s N' ==> (MEM v (MAP FST s) <=> s = r' \/ s = LAST N')`;;

let HOJODCM3_concl = `!L N r r' x v.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  r' = rtrans L N r x 1 /\
  MEM v (MAP FST (flatten N)) ==>
  (MEM v (MAP FST r') <=> 
     (v = FST (l'z L N r x) \/ v = FST (l'y L r x) \/
	 MEM v (MAP FST (betwn r (l'z L N r x) (l'y L r x)))))`;;

let HOJODCM4_concl = `!L N N' r x v.
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  N' = ntrans L N r x 1 /\
  MEM v (MAP FST (flatten N)) ==>
  (MEM v (MAP FST (LAST N')) <=> 
     (v = FST (l'z L N r x) \/ v = FST (l'y L r x) \/
	 MEM v (MAP FST (betwn r (l'y L r x) (l'z L N r x)))))`;;

let OBDATYB = `!L N r x (d:A#A).
  good_list L /\ good_list_nodes L /\
  marked_list L N r x /\
  MEM d (find_face L x) /\ MEM d (flatten N) ==> MEM d r`;;

(* ========================================================================== *)
(* Isomorphism *)
(* ========================================================================== *)



let GNBEVVU_concl = ("formalized GNBEVVU",`!L N L' N'. 
    good_list L /\ iso_list (L,N) (L',N') ==> 
    iso (hypermap_of_list L) (hypermap_of_list L')`);;

let iso_list_refl = ("done",`!a. iso_list a a`);;

let iso_list_sym = ("done",`!a b. iso_list a b ==> iso_list b a`);;

let iso_list_trans = ("done",
 `!a b c. iso_list a b /\ iso_list b c ==> iso_list a b`);;

let PEUTLZH_concl = ("done",`!L N L' N'.
  good_list L /\ iso_list (L,N) (L',N') ==>
  good_list L'`);;

let OISRWOF_concl = ("done",`!L N L' N'.
  good_list_nodes L /\ iso_list (L,N) (L',N') ==>
  good_list_nodes L'`);;

let UEYETNI_concl = ("done",`!L N L' N'.
  all uniq L /\ iso_list (L,N) (L',N') ==>
  all uniq L'`);;

let XKDZKWV_concl = ("XKDZKWV",`!L N L' N'.
  good_list L /\ iso_list (L,N) (L',N') /\ normal_list L N ==>
  normal_list L' N'`);;

let DAKEFCC_concl = ("done 3/2014 DAKEFCC",
  `!H K. is_restricted H /\ iso H K ==> is_restricted K`);;

let MEEIXJO_concl = ("done 3/2014",`!L N L' N' r r' (x:A#A) (x':B#B).
  good_list L /\ 
  iso_list (L,([x]:: r :: N)) (L',([x']::r' :: N')) /\
  marked_list L N r x ==> marked_list L' N' r' x'`);;

(* ========================================================================== *)
(* Reduction of restricted hypermap to special hypermap_of_list form. *)
(* ========================================================================== *)

(* reductions to hypermap_of_list L, then num, then ordered  form *)

				
let RXOKSKC_concl = (* done RXOKSKC *)
  `!H. is_restricted H ==> 
    (?L. good_list L /\ good_list_nodes L /\ all uniq L /\
       iso H (hypermap_of_list L))`;;

let JXBJOAB_concl =  (* done JXBJOAB *)
  `!(L:((A)list)list). 
   ?(L':((num)list)list). iso_list (L,[]) (L',[])`;;


(* ordering the list of darts in L. rotate_to is deprecated. Rewrite.... *)


(* main reduction to lists *)

let JCAJYDU_concl = (* done HLT 3/2014 *)  `(!L. 
  good_list L /\ good_list_nodes L /\ all uniq L /\
  is_restricted (hypermap_of_list L) ==>
  (?g. PlaneGraphs g /\ 
     good_graph_v3 g /\
     iso (hypermap_of_list L) (hypermap_of_list (fgraph g))))
   ==> 
   (!H. is_restricted H ==>
  (?g. PlaneGraphs g /\ good_graph_v3 g /\
     iso H (hypermap_of_list (fgraph g))))`;;


(* ========================================================================== *)
(* Translate hypermap notions into list notions *)
(* AQIUNPP in Hypermaps chapter *)
(* ========================================================================== *)

let GZLJIGN1_concl = ("done",`!L N r x.
      hyp'm (hypermap_of_list L) N (loop_of_list r) x = 
	l'm L r x`);;

let GZLJIGN2_concl = ("done",`!L N r x.
  hyp'p (hypermap_of_list L) (loop_family_of_list N) (loop_of_list r) x = 
	l'p L N r x`);;

let GZLJIGN3_concl = ("done",`!L N r x.
  hyp'q (hypermap_of_list L) (loop_family_of_list N) (loop_of_list r) x = 
  l'q L N r x`);;

let GZLJIGN4_concl = ("done",`!L N r x.
  hyp'y (hypermap_of_list L) N (loop_of_list r) x = 
  l'y L r x`);;

let GZLJIGN5_concl = ("done",`!L N r x.
  hyp'z (hypermap_of_list L) (loop_family_of_list N) (loop_of_list r) x = 
  l'z L N r x`);;

let EVNAPDQ_concl = ("done",`!L N.
  good_list L /\ normal_list L N ==>
  is_normal (hypermap_of_list L) (loop_family_of_list N)`);;

let ABKCJWD_concl = ("done",`!L N.
  good_list L /\ normal_list L N ==>
  iso (quotient (hypermap_of_list L) (loop_family_of_list N))
  (hypermap_of_list (quotient_list L N))`);;

let ODWAFRG_concl = ("done",`!L N r x.
  good_list L /\ marked_list L N r x ==>
  is_marked 
  ((hypermap_of_list L),(loop_family_of_list N),(loop_of_list r),x)`);;



(* Translate known lemmas. *)

(*let HQYMRTX = Hypermap.lemmaHQYMRTX;; *)

(* assumptions added. March 10, 2014 *)

let HQYMRTX1_list = ("done",`!L N r x. good_list L /\
   good_list_nodes L /\ marked_list L N r x /\ ~final_list L r
  ==> MEM (l'z L N r x) r /\
    (!i. 1 <= i /\ i <= SUC (l'm L r x) ==>
       ~(l'z L N r x = (f_list L POWER i) x))`);;

let HQYMRTX2_list = ("done",`!L N r x. marked_list L N r x /\ ~final_list L r
  ==> ~(x = l'y L r x)`);;

let HQYMRTX3_list = ("done",`!L N r x. 
      good_list L /\ good_list_nodes L /\ 
     marked_list L N r x /\ ~final_list L r
  ==> ~(y = l'z L N r x)`);;


let QRDYXYJ = Hypermap.lemmaParameters;;

let QRDYXYJ_list = ("done",`!L N r x.
  marked_list L N r x /\ ~(final_list L r) ==>
  l'm L r x < l'q L N r x /\
  l'q L N r x < sizel (parts L r) /\
  SUC (l'm L r x) < l'p L N r x + l'q L N r x /\
  ~(FST (l'y L r x) = FST x) /\
  ~(FST (l'y L r x) = FST (l'z L N r x))`);;

let AQIUNPP1 = Hypermap.lemma_normal_family_transform;;

let AQIUNPP1_list = ("done modulo AQ assumption",`!L N r (x:A#A).
   good_list L /\
   good_list_nodes L /\
  marked_list L N r x  ==> 
       normal_list L (ntrans L N r x 1)`);;

let AQIUNPP2_concl = ("done modulo AQ assumption",
  `!L N r (x:A#A).
    good_list L /\
    good_list_nodes L /\
    marked_list L N r x ==> 
    marked_list L (ntrans L N r x 1) (rtrans L N r x 1) x`);;

let AQIUNPP3_concl = ("done modulo assumption",
  `!L N r (x:A#A) i.
    good_list L /\
    good_list_nodes L /\
    marked_list L N r x ==> 
    marked_list L (ntrans L N r x i) (rtrans L N r x i) x`);;

(* steps in transform_assumption_v2 *)

let AQ1_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
   uniq (flatten (ntrans L N r x 1))`;;

let AQ2_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
   all (\s. ~(s = [])) (ntrans L N r x 1)`;;

let AQ3_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
   all (f_last L) (ntrans L N r x 1)`;;

let AQ4_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
   all (loop_list L) (ntrans L N r x 1)`;;

let AQ5_concl = `
  !L N r (x:A#A) d.
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
    MEM d (flatten N) ==>
   node (hypermap_of_list L) d SUBSET set_of_list (flatten (ntrans L N r x 1))`;;

let AQ6_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    MEM (rtrans L N r x 1) (ntrans L N r x 1)`;;

let AQ7_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    MEM  x (rtrans L N r x 1)`;;

let AQ8_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    all uniq (quotient_list L  (ntrans L N r x 1))`;;

let AQ9_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    all 
    (\v. sizel (filter (MEM v) (quotient_list L  (ntrans L N r x 1)) ) > 1) 
    (flatten (quotient_list L  (ntrans L N r x 1)))`;;

let AQ10_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    next_el (rtrans L N r x 1) x = f_list L x`;;

let AQ11_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x ==>
    final_list L (find_list (ntrans L N r x 1) (e_list x))`;;

let AQ12_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
    final_list L (rtrans L N r x 1) ==>
     flag_list L (ntrans L N r x 1)`;;

let AQ13_concl = `
  !L N r (x:A#A).
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
    ~final_list L (rtrans L N r x 1) ==>
     s_flag_list L (ntrans L N r x 1) (rtrans L N r x 1) x`;;

let AQ_concl = `!L.
    good_list L /\ good_list_nodes L ==> 
    transform_assumption_v2 L`;;

(* ========================================================================== *)
(* Initialization. dih2k *)
(* ========================================================================== *)


let FOEGZEQ1_concl = 
  ("good-list-seed",
  `!p. good_list (fgraph (Seed p))`);;

let FOEGZEQ2_concl = 
  ("all-uniq-seed",
  `!p. good_list (fgraph (Seed p))`);;

let AUQTZYZ_concl = ("done HLT",`!H (x:A) L1. is_restricted H /\ (x IN dart H)  /\ 
  (L1 = loop_of_face H x) ==>
  (?L2. is_normal H {L1,L2}  /\ 
    (path_of_loop L2 x = complement H x) /\ 
     dih2k (quotient H {L1,L2}) (CARD (face H x)))`);;

let AUQTZYZ_list = ("done 3/2014",`!L f. is_restricted (hypermap_of_list L) /\
  good_list L /\ MEM f (list_of_faces L) ==>
   (?f'. normal_list L [f;f'] /\ quotient_list L [f;f'] = 
      [(MAP FST f); rev (MAP FST f)])`);;

let UYOUIXG_concl = `!L f .  is_restricted (hypermap_of_list L) /\
   good_list L /\ MEM f (list_of_faces L) /\ ~dih2k_list L ==>
     (?L' N' f2. iso_list (L,[f;f2]) (L',N') /\
	normal_list L' N' /\ 
	 match_quotient_list (Seed (sizel f -3)) L' N')`;;
     
(* ========================================================================== *)
(* Termination. *)
(* ========================================================================== *)

let ADACDYF_concl = `!L N r N' r' (x:A#A). marked_list L N r x /\
    ~final_list L r /\ 
  sizel (list_of_darts (quotient_list L N)) <
  sizel (list_of_darts (quotient_list L (ntrans L N r x 1)))`;;

let ZBHENEI_hypermap = Hypermap.lemma_finite_normal_loops;;

let XWCNBMA_hypermap = Hypermap.face_quotient_lemma;;

(* isomorphism of H with quotient: *)
let STKBEPH_hypermap = Hypermap.lemmaSTKBEPH;;

let ZBHENEI_concl = `!L N. normal_list L N ==>
  sizel (list_of_darts (quotient_list L N)) 
  <= sizel (list_of_darts L)`;;

(* This and monotonicity will give termination *)

let XZAJELF_concl = `!g L N. 
     match_quotient_list g L N ==>
     sizel (flatten (MAP FST (finals g))) <=
     sizel (list_of_darts L)`;;

let XWCNBMA_concl = ("done 3/28/2014",`!L N. normal_list L N /\
  is_restricted (hypermap_of_list L) /\ 
  all (final_list L) N ==> hypermap_of_list L = 
      hypermap_of_list (quotient_list L N)`);;

(* ========================================================================== *)
(* nonFinals and finals of g. *)
(* ========================================================================== *)

let more_concl = `subdivFaceFinal = subdivFace`;;

(* This shows that the set of finals of g never out-paces L//N.
   Only one more final face is created by subdivFaceFinal.  *)

let subdivFace0_finals = `!g f u n vs.
  ~(MEM f (finals g)) ==> 
  (finals g = finals (SND(subdivFace0_alt g f u n vs)))`;;


(* ========================================================================== *)
(* Enumeration Lists *)
(* ========================================================================== *)


let show_hideDups_concl = ("done",
  `!s. showDups (hideDups s) = s`);;

let hideDups_show_concl = ("done",
  `!s. image_hideDups s ==> hideDups (showDups s) = s`);;

let enum_indexToVertexList_concl = ("done",
  `!e f v. MEM v (FST f) /\ (uniq (FST f)) /\ 
    (all (\n. n < sizel (FST f)) e) ==>
    enum_of_VertexList (FST f) v (indexToVertexList f v e) = e`);;

let indexToVertexList_enum_concl = ("done",
  `!vs f v. uniq (FST f) /\ MEM v (FST f) /\ 
    image_hideDups vs /\
    all (\t.  MEM (the t) (FST f)) (filter isSome vs) ==>
    indexToVertexList f v (enum_of_VertexList (FST f) v vs) = vs`);;

let more_concl = 
  `!f vs. hypotheses ==> dest_triple f (mk_triple1 f vs) = vs`;;

let more_concl = 
  `!f vs. hypotheses ==> mk_triple1 f (dest_triple f vs) = vs`;;


let more_concl = `hypotheses ==>
  subdivFaceFinal2 g f (mk_triple1 (FST f) vs) = subdivFace g f vs`;;

(* this justifies the duplicate edge filter *)

let more_concl = 
  `!g f v enum. containsDuplicateEdge g f v enum ==>
    (let vs = indexToVertexList f v enum in
     let triple = mk_triple1 (FST f) vs in
       (?u v. MEM (u,v,0) triple /\ MEM (u,v) (list_of_darts (fgraph g))))`;;




(* ========================================================================== *)
(* The Index Calculus of Higher Transforms. *)
(* ========================================================================== *)

(* this section is done *)

let QYHXIVZ1_concl = `!s x. indexf x x s = 0`;;

let QYHXIVZ2_concl = `!s a b. indexf a b s = 1 <=> next_el s a = b`;;

let QYHXIVZ3_concl = `!s x y k. uniq s ==> indexf x y s = indexf x y (rot k s)`;;

let QYHXIVZ4_concl = `!s a b c. uniq s /\ MEM a s /\ MEM b s /\ MEM c s /\
   indexf b c s <= indexf a c s ==> indexf a b s + indexf b c s = indexf a c s`;;

let QYHXIVZ5_concl = `!s a b c. uniq s /\ MEM a s /\ MEM b s /\ MEM c s /\
   indexf a b s <= indexf a c s ==> indexf a b s + indexf b c s = indexf a c s`;;

let QYHXIVZ6_concl = `!s a b c. uniq s /\ MEM a s /\ MEM b s /\ MEM c s /\
   indexf a b s + indexf b c s < sizel s  
   ==> indexf a b s + indexf b c s = indexf a c s`;;

let QYHXIVZ7_concl = `!s a b c. uniq s /\ MEM a s /\ MEM b s /\ ~(a = b) ==>
   indexf a b s + indexf b a s = sizel s`;;

let QYHXIVZ8_concl = `!s x y. uniq s /\ MEM x s /\ MEM y s ==> 
  (next_el s POWER (indexf x y s)) x = y`;;

let QYHXIVZ9_concl = `!s a b c. uniq s /\ MEM a s /\ MEM b s /\
   MEM c s ==>
    (MEM b (betwn s a c) <=> 1 < indexf a b s /\ indexf a b s < indexf a c s)`;;

let QYHXIVZ10_concl = `!s a b c. uniq s /\ MEM a s /\ MEM b s /\
   MEM c s /\ ~(MEM b (betwn s c a)) ==>
 indexf a b s + indexf b c s = indexf a c s`;;  

let FWDDPHY_concl =  `!f w (x:A). 
  MEM x f /\
  w = next_el f x ==>
  indexf w x f + 1 = sizel f`;;

let DANGEYJ_concl = ("done",`!L N r (x:A#A) i j. marked_list L N r x /\ i <= j ==>
  set_of_list (flatten (ntrans L N r x i)) SUBSET 
  set_of_list (flatten (ntrans L N r x j))`);;

let PWSSRAT_concl = `!L N r (x:A#A) d i. good_list L /\ 
  good_list_nodes L /\ marked_list L N r x /\ 
  MEM d (rtrans L N r x i) /\ ~(final_list L (rtrans L N r x i)) ==>
   (MEM d (rtrans L N r x (SUC i)) <=>
      indexf (ztrans L N r x i) d (rtrans L N r x i) <=
      indexf (ztrans L N r x i) (ytrans L N r x i) (rtrans L N r x i))`;;

let OHCGKFU_concl = `!L N r (x:A#A) d i. marked_list L N r x /\ 
  MEM d (rtrans L N r x i) /\ (MEM d (rtrans L N r x (SUC i))) ==>
      indexf (ztrans L N r x i) d (rtrans L N r x i) =
      indexf (ztrans L N r x i) d (rtrans L N r x (SUC i))`;;

let PPLHULJ_concl = `!L N r (x:A#A) d i. marked_list L N r x /\
    f = find_face L x /\
    w = next_el f x ==>
    MEM (ytrans L N r x i) f /\ MEM (ztrans L N r x i) f /\
    indexf w (ytrans L N r x i) f < indexf w (ztrans L N r x i) f`;;

let NCVIBWU_concl = `!L N r f w (x:A#A) i j. marked_list L N r x /\
  f = find_face L x /\
  w = next_el f x /\
  j <= indexf w (ztrans L N r x i) f  ==>
  (MEM (((next_el f) POWER j) w)  (rtrans L N r x i) /\
     j = indexf w ((next_el f POWER j) w) (rtrans L N r x i))`;;

let QCDVKEA_concl = `!L N r f w (x:A#A) i j. marked_list L N r x /\
  f = find_face L x /\
  w = next_el f x ==>
  indexf w (ztrans L N r x i) f <= indexf w (ytrans L N r x (SUC i)) f`;;

let PBFLHET_concl = `!L N d r ri w (x:A#A) i. marked_list L N r x /\
  MEM d (rtrans L N r x i) /\
  ri = rtrans L N r x i /\
  w = next_el (find_face L x) x /\
  indexf (ztrans L N r x i) d ri <= 
  indexf (ztrans L N r x i) (ytrans L N r x 0) ri
   ==>
   MEM d r /\
   indexf (ztrans L N r x i) d ri =
  indexf (ztrans L N r x i) (ytrans L N r x 0) (rtrans L N r x 0)
   `;;

let PNXVWFS1_concl = `!L N r (x:A#A) i. marked_list L N r x 
   ==>
  MEM (ytrans L N r x i) r`;;

let PNXVWFS2_concl = `!L N r (x:A#A) i. marked_list L N r x 
  ==>
  MEM (ytrans L N r x i) r`;;

let DIOWAAS_concl = `!L N r (x:A#A) i. marked_list L N r x /\
  w = next_el (find_face L x) x ==>
  indexf w (ytrans L N r x i) r < indexf w (ztrans L N r x i) r`;;

let RYIUUVK_concl = `!L N r (x:A#A) i. marked_list L N r x /\
  w = next_el (find_face L x) x ==>
  indexf w (ztrans L N r x i) r < indexf w (ytrans L N r x (SUC i)) r`;;

let KBWPBHQ0_concl = `marked_list L N r x ==>
    ?i. final_list L (rtrans L N r x i)`;;

let KBWPBHQ1_concl = `!L N r (x:A#A) u. marked_list L N r x /\
  MEM u r /\ MEM u (find_face L x) ==>
  ((?j. u = ytrans L N r x j /\ j < transform_count L N r x) <=> 
     ~(next_el (find_list N u) u = f_list L u))`;;


(* this has been stated incorrectly and formalized in the incorrect form *)
let KBWPBHQ2_concl = `!L N r (x:A#A) u. marked_list L N r x /\
  MEM u r /\ MEM u (find_face L x) ==>
  ((?j. u = ztrans L N r x j /\ j < transform_count L N r x) <=> 
     ~(f_list L (prev_el (find_list N u) u) = u))`;;



(* ========================================================================== *)
(* Match g L N *)
(* ========================================================================== *)


let HKBGWJI_concl = 
  `!L N r x g.
    is_restricted (hypermap_of_list L) /\
    ~(nonFinals g = []) /\
    match_quotient_list g L N /\
    (r,x) = loop_choice g L N ==>
  marked_list L N r x`;;


(* ========================================================================== *)
(* Full Separation *)
(* ========================================================================== *)


(* Added May 23, 2014. Final separation of Bauer-Nipkow definitions from 
   list of list representations *)

let core_split_normal_list_concl = `!L N r x.
    good_list L /\ good_list_nodes L /\ marked_list L N r x /\
    is_restricted (hypermap_of_list L) /\
    ~final_list L r 
  ==>
    (let y =  l'y L r x in
     let z = l'z L N r x in
     let z' =  prev_el r z in
     let f = find_face L y in
     let vs = core L r in 
     let newVs = MAP FST (betwn f y z) in
     let (f1,f2) = split_normal_list L r f y z' in
       core L f1 = cat (rev newVs) (cat [FST y] (cat (betwn vs (FST y) (FST z')) [FST z'])) /\
       core L f2 = cat (cat [FST z'] (cat (betwn vs (FST z') (FST y)) [FST y])) newVs)
`;;

let r_rtrans_eq_concl =  (* def of r_trans_eq *)
  `(let w = next_el (find_face L x) x in
  (!x'. MEM x' (find_face L x) /\
               indexf w (l'z L N r x) (find_face L x) <=
               indexf w x' (find_face L x)
               ==> (MEM x' r <=> MEM x' (rtrans L N r x 1))  ))`;;


let r_rtrans_eq_concl = 
  `(!L  N r (x:A#A).  
      good_list L /\
      good_list_nodes L /\
      marked_list L N r x /\
      ~final_list L r 
    ==> r_rtrans_eq L N r x)`;;

let core_split_normal_list_concl = 
  `(!L N r (x:A#A).  good_list L /\
  good_list_nodes L /\
  marked_list L N r x /\
  ~final_list L r 
     ==> core_split_normal_list L N r x)`;;

(* ========================================================================== *)
(* Tame- Part 1 *)
(* ========================================================================== *)

(* done by Solovyev, Jan 10, 2014 *)
let XRFJNDO_concl = `!y. y IN archive ==> good_list y`;;

(* done by tch *)
let ELLLNYZ_concl = `!x y. good_list x /\ good_list y /\ iso_fgraph x y ==>
  (iso (hypermap_of_list (x)) (hypermap_of_list (y)) \/
     iso (opposite_hypermap (hypermap_of_list (x))) (hypermap_of_list (y)))`;;

(* done by tch, Jan 11, 2014 *)
let ASFUTBF_concl = `!H:(A)hypermap .
   (?V'. contravening V' /\
      iso (opposite_hypermap (hypermap_of_fan (V',ESTD V'))) H)
   ==> (?V. contravening V /\ iso (hypermap_of_fan (V,ESTD V)) H)`;;

(* ========================================================================== *)
(* Tame- Part 2 *)
(* ========================================================================== *)

(* WMLNYMD, done tch. *)

let tame9a_correspondence_weak = 
  `!g. tame_hypermap (hypermap_of_list (fgraph g)) /\ PlaneGraphs g 
   ==>
  tame9a g`;;

let tame9a_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame9a g`;;

let tame10_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame10 g`;;

let tame11a_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame11a g`;;

let tame11b_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame11b g`;;

let tame12o_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame12o g`;;

let tame13a_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame13a g`;;

let tame_correspondence = `!H g. tame_hypermap H /\ PlaneGraphs g /\
  iso H (hypermap_of_list (fgraph g)) ==>
  tame g`;;


(* ========================================================================== *)
(* Final conclusions *)
(* ========================================================================== *)

(* easy corollary of tame_good, archive_good, good_iso, TAME_CORRESPONDENCE_MAIN 

let TAME_CORRESPONDENCE_2_concl = 
 `!H. tame_hypermap H /\ import_tame_classification ==>
  (?x. x IN archive /\ (iso H (hypermap_of_list x) \/  
  iso (opposite_hypermap H)  (hypermap_of_list x)))`;;

*)

end;;
