<< numerical.m

SeedRandom[];
sqrt2 = Sqrt[2];
sqrt8 = Sqrt[8];

PadIfInteger[r_] := If[Chop[r - Round[r]] == 
      0, ToString[r] <> "0", ToString[r]];

(* HolForm of arithmetic operations *)
Clear[HolForm, infix, parenJoin];
HolForm[x_Symbol] := ToString[x];
negform[x_] := parenJoin["-- ", HolForm[-x]];
HolForm[x_Integer] := If[x >= 0, StringJoin["&", ToString[x]], negform[x]];
HolForm[x_Real] :=
    If[N[x] >= 0, StringJoin[" #", PadIfInteger[x]], negform[x]];
parenJoin[x___] := StringJoin["(", x, ")"];
HolForm[x_ / y_] := parenJoin[HolForm[x] , "/", HolForm[y]];
HolForm[x_^y_Integer] := If[y>= 0, 
      parenJoin[HolForm[x], " pow ", ToString[y]],
      parenJoin["&1 /", HolForm[x^(-y)]]];
infix[s_, {x_, y__}] := StringJoin[HolForm[x], s, HolForm[y]];
HolForm[x_ + y_] := parenJoin[infix[" + ", {x, y}]];
HolForm[x_ * y_] := parenJoin[infix[" * ", {x, y}]];
HolForm[Rational[x_, y_]] := parenJoin[HolForm[x], " / ", HolForm[y]];
HolForm[Sqrt[x_]] := parenJoin["sqrt ", parenJoin[HolForm[x]]];
HolForm[x_^(3/2)] := parenJoin[HolForm[Sqrt[x]], " pow 3"];

mDihedral[x__] := -(Dihedral @ x);
mDihedral2[x__] := -N[(Dihedral2 @ x)];
mDihedral3[x__] := -N[(Dihedral3 @ x)];

preamble := StringJoin["
    tempval := { \n id = \"", ToString[randomint] , "\";\n doc=\"date", \
ToString[Date[]], "\n" , "   
          ineq generated by Mathematica holineq", "\";\n tags=[Cfsqp;Lp;
      Lpsymmetry];\n",
      " ineq = \n", " all_forall `ineq \n"];

domain[lb_, ub_] := Module[{s, ss, semi, row, i},
      s = HolForm;
      ss = ToString;
      semi[i_] := If[i == 6, "", ";"];
      row[i_] := "(" <> s[lb[[i]]] <> ",y" <> 
      ss[i] <> "," <> s[ub[[i]]] <> ")" <> semi[i] <> "\n";
      "[" <> StringJoin[Table[row[i], {i, 1, 6}]] <> "]\n"];

holineqbody[fn_, out_] := StringJoin["(", fn, " y1 y2 y3 y4 y5 y6 > ", 
      HolForm[ out[[2]]], " +(",
      HolForm[out[[6]].({y1, y2, y3, y4, y5, y6} - out[[8]])], "))`;};;"];

nameTable[f_] :=
  Which[f == "Dihedral", "dih_y",
    f == "Dihedral2", "dih2_y",
    f == "Dihedral3", "dih3_y",
    f == "mDihedral", " -- dih_y",
    f == "mDihedral2", "-- dih2_y",
    f == "mDihedral3", "-- dih3_y",
    True, "unknown"
    ]

holineq[f_, lb_, ub_] := Module[{out},
      out = SearchLB[f, N[lb], N[ub], 0.001, {}];
      Print[out];
      preamble <> domain[lb, ub] <> 
      holineqbody[nameTable[ToString[f]], out]];

holineqp[f_, p_, lb_, ub_] := Module[{out},
      out = SearchLBp[f, N[p], N[lb], N[ub], 0.001, {}];
      Print[out];
      preamble <> domain[lb, ub] <> 
      holineqbody[nameTable[ToString[f]], out]];

runQuit[f_,lb_,ub_]:= Module[{outstring,o1,s},
s = "/tmp/mathtemp4.hl";
outstring = holineq[f,lb,ub];
o1 = OpenWrite[s];
WriteString[o1, outstring];
Close[o1];
Quit[];
];


runQuitp[f_,p_,lb_,ub_]:= Module[{outstring,o1,s},
s = "/tmp/mathtemp4.hl";
outstring = holineqp[f,p,lb,ub];
o1 = OpenWrite[s];
WriteString[o1, outstring];
Close[o1];
Quit[];
];


Print["auto_mkineq.m initialized"];;
