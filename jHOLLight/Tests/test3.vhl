"prioritize_real()".

Lemma eq_test x z : `x = 3 /\ z > 3 ==> x + z > 6`.
case test: `?m. m > 2`.
case eq: `x + z:num` => [|m].
case eq2: `z > 3`.
move eq1: `x + z:num` => n.
elim eq2: n eq1 => [h | m Ih].
case eq2: n eq2 => [h | m].
Abort.


Lemma in_test P x z : `x = 3 /\ z = 3 ==> P (3 > 2)`.
move => [Hx Hz].
rewrite "ARITH_RULE `3 = 2 + 1`" in Hx Hz.
do rewrite "ARITH_RULE `2 = 1 + 1`" in Hx *.
suff: `1 = 1` in Hx Hz.
Abort.


Lemma have_test P: `P ==> F`.
suff hP P x: `P = x`.
have h_mul := REAL_MUL_LINV.
have /(_ `&1`) h_mul2 // := REAL_MUL_LINV.
have [a [b c]] := ADD_AC.
have [h1 | h2]: `P \/ ~P` by exact: EXCLUDED_MIDDLE.
suff /(_ `32`) [n_lt_r | [n_gt_Sp n0]] r: `n < r \/ (n > p + 1 /\ n = 0)`.
Abort.

"let divides = GEN_ALL REAL_MUL_ASSOC".

Lemma congr_test n m : `n + m * m = &1 + &2 * &2`.
congr `_ + _1 * _`.
Abort.


Lemma test2 n m : `n < m \/ m <= n \/ T`.
wlog: n m / `m <= n` by [].
suff: `!x. x = x` by [].
by [].
Qed.


Lemma test1 P Q z: `(!x:real. P x ==> Q) /\ P z ==> Q`.
move => [] hP Pz.
exact: (hP z).
Qed.


Lemma test1 P : `?x. P x ==> (!y. P y)`.
Proof.
case: (EXCLUDED_MIDDLE `!z. P z`); [move => hP | rewrite NOT_FORALL_THM => [] [x hnP]]; last first.
  by exists x; rewrite hnP.
by exists `@x. P x` => _ y; rewrite hP.
Qed.

Section MoreTests.


Lemma test0 A B : `A \/ (B /\ A) ==> A`.
Proof.
case; by [exact| move => [] _ !->].
Qed.

Section EvenMoreTests.

Lemma test1 A B : `A /\ B ==> B /\ A`.
move => [hA hB].
split; first by [move: hA; move: hB]; move => /=.
exact.
Qed.

Lemma test2 A C: `(A \/ C) \/ (C \/ A \/ A) ==> C \/ A`.
case => [[hA | hC] | [hC | hA] //]; [right | left | right]; [exact: hA | exact: hC|].
move: hA => /=.
Qed.

Lemma test: `!P. P ==> P`.
move => P ETA_AX.
move: ETA_AX ETA_AX.
by [].
Qed.

End EvenMoreTests.

End MoreTests.
