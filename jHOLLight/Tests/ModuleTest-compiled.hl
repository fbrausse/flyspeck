
(* Lemma eqxx *)
let eqxx = section_proof ["x"]
`x = x`
[
   ((ALL_TAC) THEN (done_tac));
];;

(* Lemma test1 *)
let test1 = section_proof ["A"]
`(A ==> A) /\ I = I`
[
   (((THENL) (split_tac) [(move ["eqxx"]); ALL_TAC]) THEN ((use_arg_then2 ("eqxx", [eqxx])) (thm_tac apply_tac)));
];;

(* Module Module_test*)
module Module_test = struct

let def2 = FUN_EQ_THM;;
let def1 = new_definition `def1 x = x`;;

(* Lemma def1_thm *)
let def1_thm = section_proof []
`I = I`
[
   ((ALL_TAC) THEN (done_tac));
];;

(* Lemma def2_thm *)
let def2_thm = section_proof []
`I = I`
[
   ((((use_arg_then2 ("def1_thm", [def1_thm])) (disch_tac [])) THEN (clear_assumption "def1_thm") THEN (exact_tac)) THEN (done_tac));
];;

(* Close the module *)
end;;
