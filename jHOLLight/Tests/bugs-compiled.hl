let gf_plus = new_definition `gf_plus = \(f:num->real) g n. f n + g n`;;
let gf_times = new_definition `gf_times = \(f:num->real) g n. sum (0..n) (\k. f k * g (n - k))`;;
let gf_one = new_definition `gf_one = \n. if n = 0 then &1 else &0`;;
let gf_reciprocal = new_definition `gf_reciprocal = \(f:num->real) g. gf_times f g = gf_one`;;
let recip = define `recip f 0 = &1 / (f 0) /\ recip f (n + 1) = --(&1 / (f 0)) * sum (1..(n + 1)) (\k. (f k) * recip f ((n + 1) - k))`;;

(* Module Test_1a*)
module Test_1a = struct


(* Lemma lemma *)
let lemma = section_proof ["f"]
`~(f 0 = &0) ==> gf_reciprocal f (recip f)`
[
   (((((use_arg_then "gf_reciprocal")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "gf_times")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "gf_one")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "FUN_EQ_THM")(thm_tac (new_rewrite [] []))))) THEN (move ["f0_n0"]));
   (((THENL) case [ALL_TAC; (move ["n"])]) THEN (simp_tac));
   (((((use_arg_then "NUMSEG_SING")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "SUM_SING")(thm_tac (new_rewrite [] [])))) THEN (simp_tac) THEN (((use_arg_then "SUB")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "recip")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "real_div")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_LID")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "REAL_MUL_RINV")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
   ((((use_arg_then "SUM_CLAUSES_LEFT")(thm_tac (new_rewrite [] [])))) THEN (repeat_tactic 0 10 (((use_arg_then "LE_0")(thm_tac (new_rewrite [] []))))) THEN (simp_tac) THEN (((use_arg_then "SUB_0")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "ADD1")(thm_tac (new_rewrite [1; 2; 3] [])))) THEN (((use_arg_then "ADD")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "recip")(thm_tac (new_rewrite [] [])))));
   (((fun arg_tac -> (fun arg_tac -> arg_tac (Arg_theorem (REAL_FIELD `!x. ~(x = &0) ==> !a. x * -- (&1 / x) * a = --a`))) (fun fst_arg -> (use_arg_then "f0_n0") (fun snd_arg -> combine_args_then arg_tac fst_arg snd_arg)))(thm_tac (new_rewrite [] []))));
   (((((use_arg_then "REAL_ADD_LINV")(thm_tac (new_rewrite [] [])))) THEN (((use_arg_then "NOT_SUC")(thm_tac (new_rewrite [] []))))) THEN (done_tac));
];;

(* Close the module *)
end;;
