"let gf_plus = new_definition `gf_plus = \(f:num->real) g n. f n + g n`".
"let gf_times = new_definition `gf_times = \(f:num->real) g n. sum (0..n) (\k. f k * g (n - k))`".
"let gf_one = new_definition `gf_one = \n. if n = 0 then &1 else &0`".
"let gf_reciprocal = new_definition `gf_reciprocal = \(f:num->real) g. gf_times f g = gf_one`".
"let recip = define `recip f 0 = &1 / (f 0) /\ recip f (n + 1) = --(&1 / (f 0)) * sum (1..(n + 1)) (\k. (f k) * recip f ((n + 1) - k))`".


Module Test_1a.



Lemma lemma f: `~(f 0 = &0) ==> gf_reciprocal f (recip f)`.
Proof.
rewrite gf_reciprocal gf_times gf_one /= FUN_EQ_THM => f0_n0.
case => [|n] /=.
  by rewrite NUMSEG_SING SUM_SING /= SUB recip real_div REAL_MUL_LID REAL_MUL_RINV.
rewrite SUM_CLAUSES_LEFT ?LE_0 /= SUB_0 {1 2 3}ADD1 ADD recip.
(* rewrite real_div REAL_MUL_LID REAL_MUL_ASSOC REAL_MUL_RNEG REAL_MUL_RINV // -REAL_NEG_MINUS1. *)
rewrite ("REAL_FIELD `!x. ~(x = &0) ==> !a. x * -- (&1 / x) * a = --a`" f0_n0).
by rewrite REAL_ADD_LINV NOT_SUC.
Qed.


