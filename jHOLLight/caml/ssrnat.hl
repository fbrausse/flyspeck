needs "caml/ssrbool.hl";;
prioritize_num();;
(start_section_proof ["n"](`SUC n - 1 = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let succnK = end_section_proof();;
(start_section_proof ["n";"m"](`SUC n = SUC m ==> n = m`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let succn_inj = end_section_proof();;
(start_section_proof ["m";"n"](`(SUC m = SUC n) = (m = n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let eqSS = end_section_proof();;
(start_section_proof ["n"](`0 + n = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let add0n = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m + n = SUC (m + n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let addSn = end_section_proof();;
(start_section_proof ["n"](`1 + n = SUC n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let add1n = end_section_proof();;
(start_section_proof ["n"](`n + 0 = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let addn0 = end_section_proof();;
(start_section_proof ["m";"n"](`m + SUC n = SUC (m + n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let addnS = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m + n = m + SUC n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let addSnnS = end_section_proof();;
(start_section_proof ["m";"n";"p"](`m + (n + p) = n + (m + p)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let addnCA = end_section_proof();;
(start_section_proof ["m";"n"](`m + n = n + m`));;
refine (by (VALID ((((rewrite [1] [(`n`)] (GSYM addn0)) THEN (rewrite [] [] (addnCA)) THEN (rewrite [] [] (addn0))) THEN (done_tac)))));;
let addnC = end_section_proof();;
(start_section_proof ["n"](`n + 1 = SUC n`));;
refine (by (VALID ((((rewrite [] [] (addnC)) THEN (rewrite [] [] (add1n))) THEN (done_tac)))));;
let addn1 = end_section_proof();;
(start_section_proof ["n";"m";"p"](`n + (m + p) = (n + m) + p`));;
refine (by (VALID ((((rewrite [] [(`m + p`)] (addnC)) THEN (rewrite [] [] (addnCA)) THEN (rewrite [] [] (addnC))) THEN (done_tac)))));;
let addnA = end_section_proof();;
(start_section_proof ["m";"n";"p"](`(n + m) + p = (n + p) + m`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (GSYM addnA))) THEN (rewrite [] [(`p + m`)] (addnC))) THEN (done_tac)))));;
let addnAC = end_section_proof();;
(start_section_proof ["m";"n"](`(m + n = 0) <=> (m = 0) /\ (n = 0)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let addn_eq0 = end_section_proof();;
(start_section_proof ["p";"m";"n"](`(p + m = p + n) <=> (m = n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let eqn_addl = end_section_proof();;
(start_section_proof ["p";"m";"n"](`(m + p = n + p) = (m = n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let eqn_addr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m + n1 = m + n2 ==> n1 = n2`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["Heq"]))) THEN ((rewrite [] [] (GSYM (ISPEC (mk_var("m",mk_type("num",[]))) eqn_addl)))) THEN (done_tac)))));;
let addnI = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`n1 + m = n2 + m ==> n1 = n2`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`_1 + m`)] (GSYM addnC)))) THEN ((move ["Heq"]))))));;
refine (by (VALID (USE_THEN "Heq" (fun th_0 -> ((((MP_TAC (MATCH_MP addnI th_0))) THEN (BETA_TAC)) THEN (done_tac))))));;
let addIn = end_section_proof();;
(start_section_proof ["n"](`0 - n = 0`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let sub0n = end_section_proof();;
(start_section_proof ["n"](`n - 0 = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subn0 = end_section_proof();;
(start_section_proof [](`!n. n - n = 0`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subnn = end_section_proof();;
(start_section_proof [](`!n m. SUC m - SUC n = m - n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subSS = end_section_proof();;
(start_section_proof [](`!p m n. (p + m) - (p + n) = m - n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subn_add2l = end_section_proof();;
(start_section_proof [](`!p m n. (m + p) - (n + p) = m - n`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`_1 + p`)] (GSYM addnC))) THEN (rewrite [] [] (subn_add2l))) THEN (done_tac)))));;
let subn_add2r = end_section_proof();;
(start_section_proof [](`!n x. (n + x) - n = x`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["n"]) THEN (move ["m"]))))));;
refine (by (VALID ((((rewrite [2] [(`n`)] (GSYM addn0)) THEN (rewrite [] [] (subn_add2l)) THEN (rewrite [] [] (subn0))) THEN (done_tac)))));;
let addKn = end_section_proof();;
(start_section_proof [](`!n x. (x + n) - n = x`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["n"]) THEN (move ["m"]))) THEN ((rewrite [] [] (addnC)) THEN (rewrite [] [] (addKn))) THEN (done_tac)))));;
let addnK = end_section_proof();;
(start_section_proof [](`!n. SUC n - n = 1`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["n"]))))));;
refine (by (VALID (((((MP_TAC (ISPEC (`1`) (ISPEC (mk_var("n",mk_type("num",[]))) addnK)))) THEN (BETA_TAC)) THEN ((rewrite [] [] (add1n))) THEN (done_tac)))));;
let subSnn = end_section_proof();;
(start_section_proof [](`!m n p. (n - m) - p = n - (m + p)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subn_sub = end_section_proof();;
(start_section_proof [](`!m n p. (m - n) - p = (m - p) - n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))) THEN (repeat_tactic 1 9 ((rewrite [] [] (subn_sub))) THEN (rewrite [] [] (addnC))) THEN (done_tac)))));;
let subnAC = end_section_proof();;
(start_section_proof [](`!m n. (m - n) - 1 = m - SUC n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))) THEN ((rewrite [] [] (subn_sub)) THEN (rewrite [] [] (addn1))) THEN (done_tac)))));;
let predn_sub = end_section_proof();;
(start_section_proof [](`!m n. (SUC m - n) - 1 = m - n`));;
refine (by (VALID ((((rewrite [] [] (predn_sub)) THEN (rewrite [] [] (subSS))) THEN (done_tac)))));;
let predn_subS = end_section_proof();;
(start_section_proof [](`!m n. (m < SUC n) = (m <= n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltnS = end_section_proof();;
(start_section_proof [](`!n. 0 <= n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leq0n = end_section_proof();;
(start_section_proof [](`!n. 0 < SUC n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltn0Sn = end_section_proof();;
(start_section_proof [](`!n. n < 0 <=> F`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltn0 = end_section_proof();;
(start_section_proof [](`!n. n <= n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqnn = end_section_proof();;
(start_section_proof [](`!n. n < SUC n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltnSn = end_section_proof();;
(start_section_proof [](`!m n. m = n ==> m <= n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN ((rewrite [] [] (leqnn))) THEN (done_tac)))));;
let eq_leq = end_section_proof();;
(start_section_proof [](`!n. n <= SUC n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqnSn = end_section_proof();;
(start_section_proof [](`!n. n - 1 <= n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leq_pred = end_section_proof();;
(start_section_proof [](`!n. n <= SUC (n - 1)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqSpred = end_section_proof();;
(start_section_proof [](`!m n. m < n ==> SUC (n - 1) = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltn_predK = end_section_proof();;
(start_section_proof [](`!n. 0 < n ==> SUC (n - 1) = n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["n"]) THEN (move ["H"]))) THEN (((MP_TAC (ISPEC (`0`) ltn_predK))) THEN ((exact_tac)))))));;
let prednK = end_section_proof();;
(start_section_proof [](`!m n. (m <= n) <=> ~(n < m)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqNgt = end_section_proof();;
(start_section_proof [](`!m n. (m < n) = ~(n <= m)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))) THEN (((rewrite [] [] (leqNgt))) THEN (done_tac))))));;
let ltnNge = end_section_proof();;
(start_section_proof [](`!n. n < n <=> F`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["n"]))) THEN ((rewrite [] [] (ltnNge)) THEN (rewrite [] [] (leqnn))) THEN (done_tac)))));;
let ltnn = end_section_proof();;
(start_section_proof [](`!n. (n <= 0) = (n = 0)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqn0 = end_section_proof();;
(start_section_proof [](`!n. (0 < n) = ~(n = 0)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let lt0n = end_section_proof();;
(start_section_proof [](`!n. 0 < n ==> ~(n = 0)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let lt0n_neq0 = end_section_proof();;
(start_section_proof [](`!n. (n = 0) = ~(0 < n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let eqn0Ngt = end_section_proof();;
(start_section_proof [](`!n. (n = 0) = F ==> 0 < n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let neq0_lt0n = end_section_proof();;
(start_section_proof [](`!m n. (m = n) = (m <= n /\ n <= m)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let eqn_leq = end_section_proof();;
(start_section_proof [](`!m n. m <= n /\ n <= m ==> m = n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))) THEN ((rewrite [] [] (GSYM eqn_leq))) THEN (done_tac)))));;
let anti_leq = end_section_proof();;
(start_section_proof [](`!m n. ~(m = n) <=> (m < n) \/ (n < m)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID ((((rewrite [] [] (eqn_leq)) THEN (rewrite [] [] (negb_and)) THEN (rewrite [] [] (orbC)) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM ltnNge)))) THEN (done_tac)))));;
let neq_ltn = end_section_proof();;
(start_section_proof [](`!m n. (m <= n) <=> (m = n) \/ (m < n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leq_eqVlt = end_section_proof();;
(start_section_proof [](`!x y:A. x = y <=> y = x`));;
refine (by (VALID (((((MP_TAC EQ_SYM_EQ)) THEN (BETA_TAC)) THEN (done_tac)))));;
let eq_sym = end_section_proof();;
(start_section_proof [](`!m n. (m < n) <=> ~(m = n) /\ (m <= n)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID ((((rewrite [] [] (ltnNge)) THEN (rewrite [] [] (leq_eqVlt)) THEN (rewrite [] [] (negb_or)) THEN (rewrite [] [] (GSYM leqNgt)) THEN (rewrite [] [(`n = m`)] (eq_sym))) THEN (done_tac)))));;
let ltn_neqAle = end_section_proof();;
(start_section_proof [](`!n m p. m <= n ==> n <= p ==> m <= p`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leq_trans = end_section_proof();;
(start_section_proof [](`!n m. n < m <=> SUC n <= m`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltE = end_section_proof();;
(start_section_proof [](`!n m. SUC n <= SUC m <=> n <= m`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqSS = end_section_proof();;
(start_section_proof [](`!n m p. m <= n ==> n < p ==> m < p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["n"]) THEN (move ["m"]) THEN (move ["p"]) THEN (move ["Hmn"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (ltE)))) THEN (((MP_TAC leq_trans)) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN (((rewrite [] [] (leqSS))) THEN (done_tac)) THEN (done_tac)))));;
let leq_ltn_trans = end_section_proof();;
(start_section_proof ["n";"m";"p"](`m < n ==> n <= p ==> m < p`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltn_leq_trans = end_section_proof();;
(start_section_proof [](`!m n. m < n ==> m <= n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))) THEN ((rewrite [] [] (ltE))) THEN (((MP_TAC leq_trans)) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((rewrite [] [] (leqnSn))) THEN (done_tac)))));;
let ltnW = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> m <= SUC n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["le_mn"]))) THEN (((MP_TAC ltnW)) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((rewrite [] [] (ltE)) THEN (rewrite [] [] (leqSS))) THEN (done_tac)))));;
let leqW = end_section_proof();;
(start_section_proof [](`!n m p. m < n ==> n < p ==> m < p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["n"]) THEN (move ["m"]) THEN (move ["p"]) THEN (move ["lt_mn"]))))));;
refine (by (VALID ((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP ltnW th_0))) THEN BETA_TAC) THEN ((rewrite [] [] (ltE)))))));;
refine (by (VALID (((((MP_TAC leq_trans)) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((rewrite [] [] (GSYM ltE))) THEN (done_tac)))));;
let ltn_trans = end_section_proof();;
(start_section_proof [](`!m n. m >= n <=> n <= m`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let geqE = end_section_proof();;
(start_section_proof ["m";"n"](`m > n <=> n < m`));;
refine (by (VALID (((arith_tac)))));;
let gtE = end_section_proof();;
(start_section_proof ["m";"n"](`(m <= n) \/ (n <= m)`));;
refine (by (VALID (((((rewrite [] [] (GSYM implyNb)) THEN (rewrite [] [] (GSYM ltnNge))) THEN ((move ["lt_nm"]))) THEN (((MP_TAC ltnW)) THEN ((exact_tac))) THEN (done_tac)))));;
let leq_total = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n \/ n < m`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqP = end_section_proof();;
(start_section_proof ["m";"n"](`m < n \/ n <= m`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltnP = end_section_proof();;
(start_section_proof ["n"](`n = 0 \/ 0 < n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let posnP = end_section_proof();;
(start_section_proof ["m";"n"](`m < n \/ n < m \/ m = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltngtP = end_section_proof();;
(start_section_proof [](`!p m n. (p + m <= p + n) = (m <= n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leq_add2l = end_section_proof();;
(start_section_proof [](`!p m n. (p + m < p + n) = (m < n)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (ltE))) THEN (rewrite [] [] (GSYM addnS)) THEN (rewrite [] [] (leq_add2l))) THEN (done_tac)))));;
let ltn_add2l = end_section_proof();;
(start_section_proof [](`!p m n. (m + p <= n + p) = (m <= n)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`_1 + p`)] (GSYM addnC))) THEN (rewrite [] [] (leq_add2l))) THEN (done_tac)))));;
let leq_add2r = end_section_proof();;
(start_section_proof [](`!p m n. (m + p < n + p) = (m < n)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (ltE))) THEN (rewrite [] [] (GSYM addSn)) THEN (rewrite [] [] (leq_add2r))) THEN (done_tac)))));;
let ltn_add2r = end_section_proof();;
(start_section_proof [](`!m1 m2 n1 n2. m1 <= n1 ==> m2 <= n2 ==> m1 + m2 <= n1 + n2`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m1"]) THEN (move ["m2"]) THEN (move ["n1"]) THEN (move ["n2"]) THEN (move ["le_mn1"]) THEN (move ["le_mn2"]))))));;
refine (by (VALID ((((rewrite [] [] ((ISPEC (`m1 + n2`) leq_trans))) THEN (rewrite [] [] (leq_add2l)) THEN (rewrite [] [] (leq_add2r))) THEN (done_tac)))));;
let leq_add = end_section_proof();;
(start_section_proof [](`!m n. n <= n + m`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID ((((rewrite [1] [(`n`)] (GSYM addn0)) THEN (rewrite [] [] (leq_add2l)) THEN (rewrite [] [] (leq0n))) THEN (done_tac)))));;
let leq_addr = end_section_proof();;
(start_section_proof [](`!m n. n <= m + n`));;
refine (by (VALID ((((rewrite [] [] (addnC)) THEN (rewrite [] [] (leq_addr))) THEN (done_tac)))));;
let leq_addl = end_section_proof();;
(start_section_proof [](`!m n p. m < n ==> m < n + p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))))));;
refine (by (VALID ((repeat_tactic 1 9 ((rewrite [] [] (ltE)))))));;
refine (by (VALID ((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP (ISPEC (`n + p`) (ISPEC (`SUC m`) (ISPEC (mk_var("n",mk_type("num",[]))) leq_trans))) th_0))) THEN BETA_TAC) THEN ((rewrite [] [] (leq_addr))) THEN ((exact_tac))))));;
let ltn_addr = end_section_proof();;
(start_section_proof [](`!m n p. m < n ==> m < p + n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let ltn_addl = end_section_proof();;
(start_section_proof [](`!m n. (0 < m + n) <=> (0 < m) \/ (0 < n)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (lt0n))) THEN (rewrite [] [] (GSYM negb_and)) THEN (rewrite [] [] (addn_eq0))) THEN (done_tac)))));;
let addn_gt0 = end_section_proof();;
(start_section_proof [](`!m n. (0 < n - m) = (m < n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subn_gt0 = end_section_proof();;
(start_section_proof [](`!m n. (m - n = 0) = (m <= n)`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subn_eq0 = end_section_proof();;
(start_section_proof [](`!m n. m <= n <=> m - n = 0`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let leqE = end_section_proof();;
(start_section_proof [](`!m n p. (m - n <= p) = (m <= n + p)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))))));;
refine (by (VALID ((((rewrite [] [] (GSYM subn_eq0)) THEN (rewrite [] [] (subn_sub)) THEN (rewrite [] [] (GSYM leqE))) THEN (done_tac)))));;
let leq_sub_add = end_section_proof();;
(start_section_proof [](`!m n. n - m <= n`));;
refine (by (VALID ((((rewrite [] [] (leq_sub_add)) THEN (rewrite [] [] (leq_addl))) THEN (done_tac)))));;
let leq_subr = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> m + (n - m) = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let subnKC = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> (n - m) + m = n`));;
refine (by (VALID ((((rewrite [] [] (addnC))) THEN (((MP_TAC subnKC)) THEN ((exact_tac))) THEN (done_tac)))));;
let subnK = end_section_proof();;
(start_section_proof [](`!m n p. p <= n ==> m + (n - p) = (m + n) - p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]) THEN (move ["le_pn"]))))));;
refine (by (VALID (USE_THEN "le_pn" (fun th_0 -> (((rewrite [2] [] (GSYM (MATCH_MP subnK th_0))) THEN (rewrite [] [] (addnA)) THEN (rewrite [] [] (addnK))) THEN (done_tac))))));;
let addn_subA = end_section_proof();;
(start_section_proof [](`!m n p. p <= n ==> m - (n - p) = (m + p) - n`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]) THEN (move ["le_pn"]))))));;
refine (by (VALID (USE_THEN "le_pn" (fun th_0 -> (((rewrite [2] [] (GSYM (MATCH_MP subnK th_0))) THEN (rewrite [] [] (subn_add2r))) THEN (done_tac))))));;
let subn_subA = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> n - (n - m) = m`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP (ISPEC (mk_var("n",mk_type("num",[]))) subn_subA) th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))))) THEN ((rewrite [] [] (addKn))) THEN (done_tac)))));;
let subKn = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> SUC n - m = SUC (n - m)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID ((((rewrite [] [] (GSYM add1n))) THEN (((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP (ISPEC (`1`) addn_subA) th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1))))))))));;
refine (by (VALID ((((rewrite [] [] (add1n))) THEN (done_tac)))));;
let leq_subS = end_section_proof();;
(start_section_proof [](`!m n. m < n ==> n - m = SUC (n - SUC m)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["lt_mn"]))) THEN ((rewrite [] [] (GSYM leq_subS)) THEN repeat_tactic 0 10 ((rewrite [] [] (subSS))) THEN ((TRY done_tac)) THEN (rewrite [] [] (GSYM ltE))) THEN (done_tac)))));;
let ltn_subS = end_section_proof();;
(start_section_proof [](`!p m n. m <= n ==> m - p <= n - p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]) THEN (move ["le_mn"]))))));;
refine (by (VALID (USE_THEN "le_mn" (fun th_0 -> (((rewrite [] [] (leq_sub_add)) THEN (rewrite [] [] ((MATCH_MP leq_trans th_0))) THEN (rewrite [] [] (GSYM leq_sub_add)) THEN (rewrite [] [] (leqnn))) THEN (done_tac))))));;
let leq_sub2r = end_section_proof();;
(start_section_proof [](`!p m n. m <= n ==> p - n <= p - m`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((rewrite [] [] (GSYM (ISPEC (`p - m`) leq_add2r))) THEN (rewrite [] [] (leq_sub_add))))));;
refine (by (VALID (((((MP_TAC leq_trans)) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((rewrite [] [] (GSYM leq_sub_add)) THEN (rewrite [] [] (leqnn))) THEN (done_tac)))));;
let leq_sub2l = end_section_proof();;
(start_section_proof [](`!m1 m2 n1 n2. m1 <= m2 ==> n2 <= n1 ==> m1 - n1 <= m2 - n2`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m1"]) THEN (move ["m2"]) THEN (move ["n1"]) THEN (move ["n2"]))))));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP (ISPEC (mk_var("n1",mk_type("num",[]))) leq_sub2r) th_0))) THEN BETA_TAC) THEN ((move ["le_m12"]))) THEN ((DISCH_THEN (MP_TAC o (fun th_1 -> MATCH_MP (ISPEC (mk_var("m2",mk_type("num",[]))) leq_sub2l) th_1))) THEN BETA_TAC) THEN (((MP_TAC leq_trans)) THEN ((exact_tac)))))));;
let leq_sub2 = end_section_proof();;
(start_section_proof [](`!p m n. p < n ==> m < n ==> m - p < n - p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP ltn_subS th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))))) THEN (repeat_tactic 1 9 ((rewrite [] [] (ltE))) THEN (rewrite [] [] (leqSS)))))));;
refine (by (VALID ((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP (ISPEC (`SUC p`) leq_sub2r) th_0))) THEN BETA_TAC) THEN ((rewrite [] [] (subSS))) THEN (done_tac)))));;
let ltn_sub2r = end_section_proof();;
(start_section_proof [](`!p m n. m < p ==> m < n ==> p - n < p - m`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["p"]) THEN (move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP ltn_subS th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))))) THEN (repeat_tactic 1 9 ((rewrite [] [] (ltE))) THEN (rewrite [] [] (leqSS)))))));;
refine (by (VALID ((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP (ISPEC (mk_var("p",mk_type("num",[]))) leq_sub2l) th_0))) THEN BETA_TAC) THEN (done_tac)))));;
let ltn_sub2l = end_section_proof();;
(start_section_proof [](`!m n p. (m + n < p) = (n < p - m)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (ltnNge))) THEN (rewrite [] [] (leq_sub_add))) THEN (done_tac)))));;
let ltn_add_sub = end_section_proof();;
let maxn = new_definition `maxn m n = if m < n then n else m`;;
let minn = new_definition `minn m n = if m < n then m else n`;;
(start_section_proof [](`!n. maxn 0 n = n`));;
refine (by (VALID ((((rewrite [] [] (maxn))) THEN ((arith_tac)) THEN (done_tac)))));;
let max0n = end_section_proof();;
(start_section_proof [](`!n. maxn n 0 = n`));;
refine (by (VALID ((((rewrite [] [] (maxn))) THEN ((arith_tac)) THEN (done_tac)))));;
let maxn0 = end_section_proof();;
(start_section_proof [](`!m n. maxn m n = maxn n m`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (maxn)))) THEN ((arith_tac)) THEN (done_tac)))));;
let maxnC = end_section_proof();;
(start_section_proof [](`!m n. n <= m ==> maxn m n = m`));;
refine (by (VALID ((((rewrite [] [] (maxn))) THEN ((arith_tac)) THEN (done_tac)))));;
let maxnl = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> maxn m n = n`));;
refine (by (VALID ((((rewrite [] [] (maxn))) THEN ((arith_tac)) THEN (done_tac)))));;
let maxnr = end_section_proof();;
(start_section_proof [](`!m n. m + (n - m) = maxn m n`));;
refine (by (VALID ((((rewrite [] [] (maxn))) THEN ((arith_tac)) THEN (done_tac)))));;
let add_sub_maxn = end_section_proof();;
(start_section_proof [](`!m n p. maxn (maxn m n) p = maxn (maxn m p) n`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (GSYM add_sub_maxn))) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM addnA))) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM subn_sub))) THEN repeat_tactic 1 9 ((rewrite [] [] (add_sub_maxn))) THEN (rewrite [] [] (maxnC))) THEN (done_tac)))));;
let maxnAC = end_section_proof();;
(start_section_proof [](`!m n p. maxn m (maxn n p) = maxn (maxn m n) p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`maxn m _1`)] (maxnC))) THEN (rewrite [] [] (maxnAC))) THEN (done_tac)))));;
let maxnA = end_section_proof();;
(start_section_proof [](`!m n p. maxn m (maxn n p) = maxn n (maxn m p)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))) THEN (repeat_tactic 1 9 ((rewrite [] [] (maxnA))) THEN (rewrite [] [(`maxn m _1`)] (maxnC))) THEN (done_tac)))));;
let maxnCA = end_section_proof();;
(start_section_proof [](`!m n. (maxn m n = n) = (m <= n)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID ((((rewrite [] [] (maxnC)) THEN (rewrite [2] [(`n`)] (GSYM addn0)) THEN (rewrite [] [] (GSYM add_sub_maxn)) THEN (rewrite [] [] (eqn_addl)) THEN (rewrite [] [] (leqE))) THEN (done_tac)))));;
let eqn_maxr = end_section_proof();;
(start_section_proof [](`!m n. (maxn m n = m) = (n <= m)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID ((((rewrite [2] [(`m`)] (GSYM addn0)) THEN (rewrite [] [] (GSYM add_sub_maxn)) THEN (rewrite [] [] (eqn_addl)) THEN (rewrite [] [] (leqE))) THEN (done_tac)))));;
let eqn_maxl = end_section_proof();;
(start_section_proof [](`!n. maxn n n = n`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["n"]))))));;
refine (by (VALID ((((rewrite [] [] (maxnl)) THEN ((TRY done_tac)) THEN (rewrite [] [] (leqnn))) THEN (done_tac)))));;
let maxnn = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m <= maxn n1 n2) <=> (m <= n1) \/ (m <= n2)`));;
refine (by (VALID ((((rewrite [] [] (maxn))) THEN ((arith_tac)) THEN (done_tac)))));;
let leq_maxr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(maxn n1 n2 <= m) <=> (n1 <= m) /\ (n2 <= m)`));;
refine (by (VALID ((((rewrite [] [] (leqNgt)) THEN (rewrite [] [] (ltE)) THEN (rewrite [] [] (leq_maxr)) THEN (rewrite [] [] (negb_or)) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM ltE))) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM leqNgt)))) THEN (done_tac)))));;
let leq_maxl = end_section_proof();;
(start_section_proof [](`!m1 m2 n. (maxn m1 m2) + n = maxn (m1 + n) (m2 + n)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m1"]) THEN (move ["m2"]) THEN (move ["n"]))) THEN (repeat_tactic 1 9 ((rewrite [] [] (GSYM add_sub_maxn))) THEN (rewrite [] [] (subn_add2r)) THEN (rewrite [] [] (addnAC))) THEN (done_tac)))));;
let addn_maxl = end_section_proof();;
(start_section_proof [](`!m n1 n2. m + maxn n1 n2 = maxn (m + n1) (m + n2)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n1"]) THEN (move ["n2"]))) THEN (repeat_tactic 1 9 ((rewrite [] [(`m + _1`)] (addnC))) THEN (rewrite [] [] (addn_maxl))) THEN (done_tac)))));;
let addn_maxr = end_section_proof();;
(start_section_proof ["n"](`minn 0 n = 0`));;
refine (by (VALID ((((rewrite [] [] (minn))) THEN ((arith_tac)) THEN (done_tac)))));;
let min0n = end_section_proof();;
(start_section_proof ["n"](`minn n 0 = 0`));;
refine (by (VALID ((((rewrite [] [] (minn))) THEN ((arith_tac)) THEN (done_tac)))));;
let minn0 = end_section_proof();;
(start_section_proof ["m";"n"](`minn m n = minn n m`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (minn)))) THEN ((arith_tac)) THEN (done_tac)))));;
let minnC = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> minn m n = n`));;
refine (by (VALID ((((rewrite [] [] (minn))) THEN ((arith_tac)) THEN (done_tac)))));;
let minnr = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> minn m n = m`));;
refine (by (VALID ((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP minnr th_0))) THEN BETA_TAC) THEN ((rewrite [] [] (minnC))) THEN (done_tac)))));;
let minnl = end_section_proof();;
(start_section_proof ["m";"n"](`minn m n + maxn m n = m + n`));;
refine (by (VALID ((((rewrite [] [] (minn)) THEN (rewrite [] [] (maxn))) THEN ((arith_tac)) THEN (done_tac)))));;
let addn_min_max = end_section_proof();;
(start_section_proof ["m";"n"](`minn m n = (m + n) - maxn m n`));;
refine (by (VALID ((((rewrite [] [] (GSYM addn_min_max)) THEN (rewrite [] [] (addnK))) THEN (done_tac)))));;
let minn_to_maxn = end_section_proof();;
(start_section_proof ["m";"n"](`m - (m - n) = minn m n`));;
refine (by (VALID ((((rewrite [] [] (minnC)) THEN (rewrite [] [] (minn_to_maxn)) THEN (rewrite [] [] (GSYM add_sub_maxn)) THEN (rewrite [] [] (subn_add2l))) THEN (done_tac)))));;
let sub_sub_minn = end_section_proof();;
(start_section_proof [](`!m1 m2 m3. minn m1 (minn m2 m3) = minn m2 (minn m1 m3)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m1"]) THEN (move ["m2"]) THEN (move ["m3"]))) THEN (repeat_tactic 1 9 ((rewrite [] [(`minn _1 (minn _2 _3)`)] (minn_to_maxn))))))));;
refine (by (VALID (((rewrite [] [] (GSYM (ISPEC (`maxn m2 m3`) subn_add2r))) THEN (rewrite [] [(`(m2 + _1) - _2`)] (GSYM (ISPEC (`maxn m1 m3`) subn_add2r))) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM addnA)))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (addn_maxl))) THEN repeat_tactic 1 9 ((rewrite [] [] (addn_min_max))) THEN repeat_tactic 1 9 ((rewrite [] [] (addn_maxr))) THEN (rewrite [] [] (addnCA)) THEN (rewrite [] [] (maxnAC)) THEN (rewrite [] [(`m2 + m1`)] (addnC))) THEN (done_tac)))));;
let minnCA = end_section_proof();;
(start_section_proof [](`!m1 m2 m3. minn m1 (minn m2 m3) = minn (minn m1 m2) m3`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m1"]) THEN (move ["m2"]) THEN (move ["m3"]))))));;
refine (by (VALID ((((rewrite [] [(`minn m2 _1`)] (minnC)) THEN (rewrite [] [] (minnCA)) THEN (rewrite [] [] (minnC))) THEN (done_tac)))));;
let minnA = end_section_proof();;
(start_section_proof ["m1";"m2";"m3"](`minn (minn m1 m2) m3 = minn (minn m1 m3) m2`));;
refine (by (VALID ((((rewrite [] [] (minnC)) THEN (rewrite [] [] (minnCA)) THEN (rewrite [] [] (minnA))) THEN (done_tac)))));;
let minnAC = end_section_proof();;
(start_section_proof ["m";"n"](`(minn m n = n) = (n <= m)`));;
refine (by (VALID (((rewrite [] [] (GSYM (ISPEC (mk_var("m",mk_type("num",[]))) eqn_addr)))))));;
refine (by (VALID ((((rewrite [] [(`n + m`)] (GSYM addn_min_max)) THEN (rewrite [] [] (minnC)) THEN (rewrite [] [] (eqn_addl)) THEN (rewrite [] [(`m = _1`)] (eq_sym)) THEN (rewrite [] [] (maxnC)) THEN (rewrite [] [] (eqn_maxl))) THEN (done_tac)))));;
let eqn_minr = end_section_proof();;
(start_section_proof ["m";"n"](`(minn m n = m) = (m <= n)`));;
refine (by (VALID ((((rewrite [] [] (GSYM (ISPEC (mk_var("n",mk_type("num",[]))) eqn_addr))) THEN (rewrite [] [(`_1 = m + n`)] (eq_sym)) THEN (rewrite [] [] (GSYM addn_min_max)) THEN (rewrite [] [] (eqn_addl)) THEN (rewrite [] [] (eqn_maxr))) THEN (done_tac)))));;
let eqn_minl = end_section_proof();;
(start_section_proof ["n"](`minn n n = n`));;
refine (by (VALID ((((rewrite [] [] (minnr)) THEN ((TRY done_tac)) THEN (rewrite [] [] (leqnn))) THEN (done_tac)))));;
let minnn = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m <= minn n1 n2) <=> (m <= n1) /\ (m <= n2)`));;
refine (by (VALID ((((rewrite [] [] (minn))) THEN ((arith_tac)) THEN (done_tac)))));;
let leq_minr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(minn n1 n2 <= m) <=> (n1 <= m) \/ (n2 <= m)`));;
refine (by (VALID ((((rewrite [] [] (leqNgt)) THEN (rewrite [] [] (ltE)) THEN (rewrite [] [] (leq_minr)) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM ltE))) THEN (rewrite [] [] (negb_and)) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM leqNgt)))) THEN (done_tac)))));;
let leq_minl = end_section_proof();;
(start_section_proof [](`!m1 m2 n. (minn m1 m2) + n = minn (m1 + n) (m2 + n)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m1"]) THEN (move ["m2"]) THEN (move ["n"]))) THEN (repeat_tactic 1 9 ((rewrite [] [] (minn_to_maxn))) THEN (rewrite [] [] (GSYM addn_maxl)) THEN (rewrite [] [] (addnA)) THEN (rewrite [] [] (subn_add2r)) THEN (rewrite [] [] (addnAC)))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`_1 + n`)] (GSYM (ISPEC (mk_var("n",mk_type("num",[]))) addnC)))) THEN (rewrite [] [] (addn_subA)) THEN ((TRY done_tac)) THEN (rewrite [] [] (GSYM addn_min_max)) THEN (rewrite [] [] (leq_addl))) THEN (done_tac)))));;
let addn_minl = end_section_proof();;
(start_section_proof [](`!m n1 n2. m + minn n1 n2 = minn (m + n1) (m + n2)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n1"]) THEN (move ["n2"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`m + _1`)] ((ISPEC (mk_var("m",mk_type("num",[]))) addnC)))) THEN (rewrite [] [] (addn_minl))) THEN (done_tac)))));;
let addn_minr = end_section_proof();;
(start_section_proof ["m";"n"](`minn (maxn m n) m = m`));;
refine (by (VALID ((((rewrite [] [] (minnr)) THEN ((TRY done_tac)) THEN (rewrite [] [] (leq_maxr)) THEN (rewrite [] [] (leqnn))) THEN (done_tac)))));;
let maxnK = end_section_proof();;
(start_section_proof ["m";"n"](`minn n (maxn m n) = n`));;
refine (by (VALID ((((rewrite [] [] (minnC)) THEN (rewrite [] [] (maxnC)) THEN (rewrite [] [] (maxnK))) THEN (done_tac)))));;
let maxKn = end_section_proof();;
(start_section_proof ["m";"n"](`maxn (minn m n) m = m`));;
refine (by (VALID ((((rewrite [] [] (maxnr)) THEN ((TRY done_tac)) THEN (rewrite [] [] (leq_minl)) THEN (rewrite [] [] (leqnn))) THEN (done_tac)))));;
let minnK = end_section_proof();;
(start_section_proof ["m";"n"](`maxn n (minn m n) = n`));;
refine (by (VALID ((((rewrite [] [] (minnC)) THEN (rewrite [] [] (maxnC)) THEN (rewrite [] [] (minnK))) THEN (done_tac)))));;
let minKn = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`maxn (minn m1 m2) n = minn (maxn m1 n) (maxn m2 n)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (maxn))) THEN repeat_tactic 1 9 ((rewrite [] [] (minn)))) THEN ((arith_tac))))));;
let maxn_minl = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`maxn m (minn n1 n2) = minn (maxn m n1) (maxn m n2)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`maxn m _1`)] ((ISPEC (mk_var("m",mk_type("num",[]))) maxnC)))) THEN (rewrite [] [] (maxn_minl))) THEN (done_tac)))));;
let maxn_minr = end_section_proof();;
(start_section_proof [](`!m1 m2 n. minn (maxn m1 m2) n = maxn (minn m1 n) (minn m2 n)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m1"]) THEN (move ["m2"]) THEN (move ["n"]))) THEN ((rewrite [] [] (maxn_minr)) THEN repeat_tactic 1 9 ((rewrite [] [] (maxn_minl))) THEN (rewrite [] [] (GSYM minnA)) THEN (rewrite [] [] (maxnn)) THEN (rewrite [] [(`maxn _1 n`)] (maxnC)) THEN repeat_tactic 1 9 ((rewrite [] [] (maxnK)))) THEN (done_tac)))));;
let minn_maxl = end_section_proof();;
(start_section_proof [](`!m n1 n2. minn m (maxn n1 n2) = maxn (minn m n1) (minn m n2)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n1"]) THEN (move ["n2"]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`minn m _1`)] ((ISPEC (mk_var("m",mk_type("num",[]))) minnC)))) THEN (rewrite [] [] (minn_maxl))) THEN (done_tac)))));;
let minn_maxr = end_section_proof();;
(begin_section "Iteration");;
(add_section_var (mk_var ("m", (`:num`))); add_section_var (mk_var ("n", (`:num`))));;
(add_section_var (mk_var ("x", (`:A`))); add_section_var (mk_var ("y", (`:A`))));;
let iter = define `iter (SUC n) f (x:A) = f (iter n f x) /\ iter 0 f x = x`;;
let iteri = define `iteri (SUC n) f (x:A) = f n (iteri n f x) /\ iteri 0 f x = x`;;
(start_section_proof ["n";"f";"x"](`iter (SUC n) f (x : A) = iter n f (f x)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim)) THEN ((repeat_tactic 1 9 ((ONCE_REWRITE_TAC[iter]))) THEN ((move ["n"]) THEN (DISCH_THEN (fun th_0 -> (rewrite [] [] (GSYM th_0)))))) THEN (done_tac)))));;
let iterSr = end_section_proof();;
(start_section_proof ["n";"f";"x"](`iter (SUC n) f (x:A) = f (iter n f x)`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[iter])) THEN (done_tac)))));;
let iterS = end_section_proof();;
(start_section_proof ["n";"m";"f";"x"](`iter (n + m) f (x:A) = iter n f (iter m f x)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim)) THEN ((repeat_tactic 1 9 ((ONCE_REWRITE_TAC[iter])) THEN (ONCE_REWRITE_TAC[add0n]) THEN ((TRY done_tac)) THEN (ONCE_REWRITE_TAC[addSn])) THEN ((move ["n"]) THEN (DISCH_THEN (fun th_0 -> (rewrite [] [] (GSYM th_0)))))) THEN ((rewrite [] [] (iterS))) THEN (done_tac)))));;
let iter_add = end_section_proof();;
(start_section_proof ["n";"f";"x"](`iteri (SUC n) f x = f n (iteri n f (x:A))`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[iteri])) THEN (done_tac)))));;
let iteriS = end_section_proof();;
let iteriS = finalize_theorem iteriS;;
let iter_add = finalize_theorem iter_add;;
let iterS = finalize_theorem iterS;;
let iterSr = finalize_theorem iterSr;;
(end_section "Iteration");;
(start_section_proof ["n"](`0 * n = 0`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let mul0n = end_section_proof();;
(start_section_proof ["n"](`n * 0 = 0`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let muln0 = end_section_proof();;
(start_section_proof ["n"](`1 * n = n`));;
refine (by (VALID ((((arith_tac)) THEN (done_tac)))));;
let mul1n = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m * n = n + m * n`));;
refine (by (VALID (((arith_tac)))));;
let mulSn = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m * n = m * n + n`));;
refine (by (VALID (((arith_tac)))));;
let mulSnr = end_section_proof();;
(start_section_proof ["m";"n"](`m * SUC n = m + m * n`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (elim)) THEN ((repeat_tactic 0 10 ((rewrite [] [] (mul0n))) THEN repeat_tactic 0 10 ((rewrite [] [] (addn0))) THEN ((TRY done_tac))) THEN ((move ["m"])))))));;
refine (by (VALID ((((repeat_tactic 1 9 ((rewrite [] [] (mulSn))) THEN repeat_tactic 1 9 ((rewrite [] [] (addSn))) THEN (rewrite [] [] (addnCA))) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (done_tac)))));;
let mulnS = end_section_proof();;
(start_section_proof ["m";"n"](`m * SUC n = m * n + m`));;
refine (by (VALID ((((rewrite [] [] (addnC)) THEN (rewrite [] [] (mulnS))) THEN (done_tac)))));;
let mulnSr = end_section_proof();;
(start_section_proof ["n"](`n * 1 = n`));;
refine (by (VALID ((((rewrite [] [] ((ARITH_RULE `1 = SUC 0`))) THEN (rewrite [] [] (mulnSr)) THEN (rewrite [] [] (muln0)) THEN (rewrite [] [] (add0n))) THEN (done_tac)))));;
let muln1 = end_section_proof();;
(start_section_proof [](`!m n. m * n = n * m`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["m"]))])) THEN ((repeat_tactic 0 10 ((rewrite [] [] (muln0))) THEN repeat_tactic 0 10 ((rewrite [] [] (mulnS))) THEN repeat_tactic 0 10 ((rewrite [] [] (mul0n))) THEN ((TRY done_tac)) THEN (rewrite [] [] (mulSn))) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (done_tac)))));;
let mulnC = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`(m1 + m2) * n = m1 * n + m2 * n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("m1",mk_type("num",[]))),(mk_var("m1",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["m1"]) THEN (move ["IHm"]))])) (((rewrite [] [] (mul0n)) THEN repeat_tactic 1 9 ((rewrite [] [] (add0n)))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHm" (fun th_0 -> (((rewrite [] [] (mulSn)) THEN (rewrite [] [] (GSYM addnA)) THEN (rewrite [] [] (GSYM th_0)) THEN (rewrite [] [] (GSYM mulSn)) THEN (rewrite [] [] (addSn))) THEN (done_tac))))));;
let muln_addl = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * (n1 + n2) = m * n1 + m * n2`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`m * _1`)] (mulnC))) THEN (rewrite [] [] (muln_addl))) THEN (done_tac)))));;
let muln_addr = end_section_proof();;
(start_section_proof [](`!m n p. (m - n) * p = m * p - n * p`));;
refine (by (VALID ((((THENL_FIRST) ((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (case THENL [((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n'"]) THEN (move ["pH"])))]))) ((repeat_tactic 1 9 ((rewrite [] [] (muln0))) THEN (rewrite [] [] (subn0))) THEN (done_tac)))))));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[]))))) THEN (SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (elim)) (((rewrite [] [] (mul0n)) THEN repeat_tactic 1 9 ((rewrite [] [] (sub0n))) THEN (rewrite [] [] (mul0n))) THEN (done_tac)))))));;
refine (by (VALID (((BETA_TAC) THEN ((case THEN ((move ["m"]) THEN (move ["IHm"]))) THEN (case THENL [ALL_TAC; (case THEN ((move ["n2"]) THEN (move ["nH"])))]))))));;
refine (by (VALID ((((BETA_TAC) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN ((rewrite [] [] (mul0n)) THEN repeat_tactic 1 9 ((rewrite [] [] (subn0))) THEN (rewrite [] [] (mulSn))) THEN (done_tac)))));;
refine (by (VALID (USE_THEN "nH" (fun th_0 -> USE_THEN "IHm" (fun th_1 -> (((rewrite [] [] (th_0)) THEN (rewrite [] [] (subSS)) THEN repeat_tactic 1 9 ((rewrite [] [] (mulSn))) THEN (rewrite [] [] (th_1)) THEN (rewrite [] [] (subn_add2l))) THEN (done_tac)))))));;
refine (by (VALID ((((BETA_TAC) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN ((rewrite [] [] (mul0n)) THEN repeat_tactic 1 9 ((rewrite [] [] (subn0)))) THEN (done_tac)))));;
refine (by (VALID (USE_THEN "nH" (fun th_0 -> USE_THEN "IHm" (fun th_1 -> (((rewrite [] [] (th_0)) THEN (rewrite [] [] (subSS)) THEN repeat_tactic 1 9 ((rewrite [] [] (mulSn))) THEN (rewrite [] [] (th_1)) THEN (rewrite [] [] (subn_add2l))) THEN (done_tac)))))));;
let muln_subl = end_section_proof();;
(start_section_proof [](`!m n p. m * (n - p) = m * n - m * p`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))) THEN (repeat_tactic 1 9 ((rewrite [] [(`m * _1`)] (mulnC))) THEN (rewrite [] [] (muln_subl))) THEN (done_tac)))));;
let muln_subr = end_section_proof();;
(start_section_proof [](`!m n p. m * (n * p) = (m * n) * p`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["p"]))))));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["m"]))])) ((repeat_tactic 1 9 ((rewrite [] [] (mul0n)))) THEN (done_tac)))))));;
refine (by (VALID ((((repeat_tactic 1 9 ((rewrite [] [] (mulSn))) THEN (rewrite [] [] (muln_addl))) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (done_tac)))));;
let mulnA = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * (n1 * n2) = n1 * (m * n2)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (mulnA))) THEN (rewrite [] [(`m * _1`)] ((ISPEC (mk_var("m",mk_type("num",[]))) mulnC)))) THEN (done_tac)))));;
let mulnCA = end_section_proof();;
(start_section_proof ["m";"n";"p"](`(n * m) * p = (n * p) * m`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (GSYM mulnA))) THEN (rewrite [] [(`p * _1`)] (mulnC))) THEN (done_tac)))));;
let mulnAC = end_section_proof();;
(start_section_proof ["m";"n"](`(m * n = 0) <=> (m = 0) \/ (n = 0)`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[]))))) THEN (SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case)) (((BETA_TAC) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN ((rewrite [] [] (mul0n))) THEN (done_tac)))))));;
refine (by (VALID ((((BETA_TAC) THEN ((case THEN ((move ["q"]) THEN (DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (case THENL [((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))); (case THEN ((move ["x"]) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2))))))]))) THEN (repeat_tactic 0 10 ((rewrite [] [] (muln0))) THEN ((TRY done_tac))) THEN ((arith_tac)) THEN (done_tac)))));;
let muln_eq0 = end_section_proof();;
(start_section_proof ["m";"n"](`(m * n = 1) <=> (m = 1) /\ (n = 1)`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[]))))) THEN (SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["q"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) (((arith_tac)) THEN (done_tac)))))));;
refine (by (VALID (((((SPEC_TAC ((mk_var("q",mk_type("num",[]))),(mk_var("q",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); ((case THEN ((move ["m"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))))) THEN (case THENL [((DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2))))); (case THEN ((move ["q"]) THEN (DISCH_THEN (fun th_3 -> (rewrite [] [] (th_3))))))]))])) THEN (((arith_tac)) THEN (done_tac))))));;
let eqn_mul1 = end_section_proof();;
(start_section_proof ["m";"n"](`(0 < m * n) <=> (0 < m) /\ (0 < n)`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[]))))) THEN (SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["q"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) (((ONCE_REWRITE_TAC[mul0n]) THEN (ONCE_REWRITE_TAC[ltnn])) THEN (done_tac)))))));;
refine (by (VALID ((((THENL_FIRST) ((case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["m"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) (((ONCE_REWRITE_TAC[muln0]) THEN (ONCE_REWRITE_TAC[ltnn])) THEN (done_tac)))))));;
refine (by (VALID ((((rewrite [] [] (mulSn)) THEN (rewrite [] [] (addSn)) THEN repeat_tactic 1 9 ((rewrite [] [] (ltnS))) THEN repeat_tactic 1 9 ((rewrite [] [] (leq0n)))) THEN (done_tac)))));;
let muln_gt0 = end_section_proof();;
(start_section_proof ["m";"n"](`0 < n ==> m <= n * m`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP prednK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (mulSn)) THEN (rewrite [] [] (leq_addr))) THEN (done_tac)))));;
let leq_pmull = end_section_proof();;
(start_section_proof ["m";"n"](`0 < n ==> m <= m * n`));;
refine (by (VALID ((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP (ISPEC (mk_var("m",mk_type("num",[]))) leq_pmull) th_0))) THEN BETA_TAC) THEN ((rewrite [] [] (mulnC))) THEN (done_tac)))));;
let leq_pmulr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m * n1 <= m * n2) <=> (m = 0) \/ (n1 <= n2)`));;
refine (by (VALID ((((rewrite [] [] (leqE)) THEN (rewrite [] [] (GSYM muln_subr)) THEN (rewrite [] [] (muln_eq0)) THEN (rewrite [] [] (GSYM leqE))) THEN (done_tac)))));;
let leq_mul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(n1 * m <= n2 * m) <=> (m = 0) \/ (n1 <= n2)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`_1 * m`)] (GSYM (ISPEC (mk_var("m",mk_type("num",[]))) mulnC)))) THEN (rewrite [] [] (leq_mul2l))) THEN (done_tac)))));;
let leq_mul2r = end_section_proof();;
(start_section_proof ["m1";"m2";"n1";"n2"](`m1 <= n1 ==> m2 <= n2 ==> m1 * m2 <= n1 * n2`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["le_mn1"]) THEN (move ["le_mn2"]))))));;
refine (by (VALID ((((MP_TAC (ISPEC (`n1 * n2`) (ISPEC (`m1 * m2`) (ISPEC (`m1 * n2`) leq_trans))))) THEN (BETA_TAC)))));;
refine (by (VALID (USE_THEN "le_mn2" (fun th_0 -> (((THENL_FIRST) ((ANTS_TAC)) (((rewrite [] [] (leq_mul2l)) THEN (rewrite [] [] (th_0))) THEN (done_tac))))))));;
refine (by (VALID (((DISCH_THEN MATCH_MP_TAC)))));;
refine (by (VALID (USE_THEN "le_mn1" (fun th_0 -> (((rewrite [] [] (leq_mul2r)) THEN (rewrite [] [] (th_0))) THEN (done_tac))))));;
let leq_mul = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m * n1 = m * n2) <=> (m = 0) \/ (n1 = n2)`));;
refine (by (VALID ((((rewrite [] [] (eqn_leq)) THEN repeat_tactic 1 9 ((rewrite [] [] (leq_mul2l))) THEN (rewrite [] [] (GSYM orb_andr)) THEN (rewrite [] [] (GSYM eqn_leq))) THEN (done_tac)))));;
let eqn_mul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(n1 * m = n2 * m) <=> (m = 0) \/ (n1 = n2)`));;
refine (by (VALID ((((rewrite [] [] (eqn_leq)) THEN repeat_tactic 1 9 ((rewrite [] [] (leq_mul2r))) THEN (rewrite [] [] (GSYM orb_andr)) THEN (rewrite [] [] (GSYM eqn_leq))) THEN (done_tac)))));;
let eqn_mul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((m * n1 <= m * n2) <=> (n1 <= n2))`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP prednK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (leq_mul2l))) THEN ((ONCE_REWRITE_TAC[NOT_SUC]) THEN (ONCE_REWRITE_TAC[orFb])) THEN (done_tac)))));;
let leq_pmul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((n1 * m <= n2 * m) <=> (n1 <= n2))`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP prednK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (leq_mul2r))) THEN ((ONCE_REWRITE_TAC[NOT_SUC]) THEN (ONCE_REWRITE_TAC[orFb])) THEN (done_tac)))));;
let leq_pmul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((m * n1 = m * n2) <=> (n1 = n2))`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP prednK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (eqn_mul2l))) THEN ((ONCE_REWRITE_TAC[NOT_SUC]) THEN (ONCE_REWRITE_TAC[orFb])) THEN (done_tac)))));;
let eqn_pmul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((n1 * m = n2 * m) <=> (n1 = n2))`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP prednK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (eqn_mul2r))) THEN ((ONCE_REWRITE_TAC[NOT_SUC]) THEN (ONCE_REWRITE_TAC[orFb])) THEN (done_tac)))));;
let eqn_pmul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m * n1 < m * n2) <=> (0 < m) /\ (n1 < n2)`));;
refine (by (VALID ((((rewrite [] [] (lt0n)) THEN repeat_tactic 1 9 ((rewrite [] [] (ltnNge))) THEN (rewrite [] [] (leq_mul2l)) THEN (rewrite [] [] (negb_or))) THEN (done_tac)))));;
let ltn_mul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(n1 * m < n2 * m) <=> (0 < m) /\ (n1 < n2)`));;
refine (by (VALID ((((rewrite [] [] (lt0n)) THEN repeat_tactic 1 9 ((rewrite [] [] (ltnNge))) THEN (rewrite [] [] (leq_mul2r)) THEN (rewrite [] [] (negb_or))) THEN (done_tac)))));;
let ltn_mul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((m * n1 < m * n2) <=> (n1 < n2))`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP prednK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (ltn_mul2l)) THEN (rewrite [] [] (LT_0)) THEN (rewrite [] [] (andTb))) THEN (done_tac)))));;
let ltn_pmul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> (n1 * m < n2 * m <=> n1 < n2)`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP prednK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (ltn_mul2r)) THEN (rewrite [] [] (LT_0))) THEN (done_tac)))));;
let ltn_pmul2r = end_section_proof();;
(start_section_proof ["m";"n"](`1 < n ==> 0 < m ==> m < n * m`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["lt1n"]) THEN (move ["m_gt0"]))) THEN ((rewrite [1] [(`m`)] (GSYM mul1n)) THEN (rewrite [] [] (ltn_pmul2r))) THEN (done_tac)))));;
let ltn_Pmull = end_section_proof();;
(start_section_proof ["m";"n"](`1 < n ==> 0 < m ==> m < m * n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["lt1n"]) THEN (move ["m_gt0"]))) THEN ((rewrite [] [] (mulnC)) THEN (rewrite [] [] (ltn_Pmull))) THEN (done_tac)))));;
let ltn_Pmulr = end_section_proof();;
(start_section_proof ["m1";"m2";"n1";"n2"](`m1 < n1 ==> m2 < n2 ==> m1 * m2 < n1 * n2`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["lt_mn1"]) THEN (move ["lt_mn2"]))))));;
refine (by (VALID ((((MP_TAC (ISPEC (`n1 * n2`) (ISPEC (`m1 * m2`) (ISPEC (`m1 * n2`) leq_ltn_trans))))) THEN (BETA_TAC)))));;
refine (by (VALID (((ANTS_TAC)))));;
refine (by (VALID ((((rewrite [] [] (leq_mul2l)) THEN (rewrite [] [] (orbC)) THEN (rewrite [] [] (ltnW))) THEN (done_tac)))));;
refine (by (VALID (((DISCH_THEN MATCH_MP_TAC)))));;
refine (by (VALID (((rewrite [] [] (ltn_pmul2r)) THEN ((TRY done_tac))))));;
refine (by (VALID (USE_THEN "lt_mn2" (fun th_0 -> ((((MP_TAC th_0 THEN REMOVE_THEN "lt_mn2" (fun th -> ALL_TAC))) THEN (BETA_TAC)) THEN ((arith_tac)) THEN (done_tac))))));;
let ltn_mul = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * maxn n1 n2 = maxn (m * n1) (m * n2)`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) ((repeat_tactic 1 9 ((rewrite [] [] (mul0n))) THEN (rewrite [] [] (maxnn))) THEN (done_tac)))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (maxn))) THEN (rewrite [] [(`SUC n * _1`)] (fun_if)) THEN (rewrite [] [] (ltn_pmul2l)) THEN ((TRY done_tac)) THEN (rewrite [] [] (LT_0))) THEN (done_tac)))));;
let maxn_mulr = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`maxn m1 m2 * n = maxn (m1 * n) (m2 * n)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`_1 * n`)] (GSYM (ISPEC (mk_var("n",mk_type("num",[]))) mulnC)))) THEN (rewrite [] [] (maxn_mulr))) THEN (done_tac)))));;
let maxn_mull = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * minn n1 n2 = minn (m * n1) (m * n2)`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) ((repeat_tactic 1 9 ((rewrite [] [] (mul0n))) THEN (rewrite [] [] (minn)) THEN (rewrite [] [] (if_same))) THEN (done_tac)))))));;
refine (by (VALID ((repeat_tactic 1 9 ((rewrite [] [] (minn))) THEN (rewrite [] [(`SUC n * _1`)] (fun_if)) THEN (rewrite [] [] (ltn_pmul2l)) THEN ((TRY done_tac)) THEN (rewrite [] [] (LT_0))))));;
let minn_mulr = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`minn m1 m2 * n = minn (m1 * n) (m2 * n)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [(`_1 * n`)] (GSYM (ISPEC (mk_var("n",mk_type("num",[]))) mulnC)))) THEN (rewrite [] [] (minn_mulr))) THEN (done_tac)))));;
let minn_mull = end_section_proof();;
parse_as_infix("^", (24, "left"));;
override_interface("^", `EXP`);;
(start_section_proof ["m"](`m ^ 0 = 1`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[EXP])) THEN (done_tac)))));;
let expn0 = end_section_proof();;
(start_section_proof ["m"](`m ^ 1 = m`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[EXP_1])) THEN (done_tac)))));;
let expn1 = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ SUC n = m * m ^ n`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[EXP])) THEN (done_tac)))));;
let expnS = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ SUC n = m ^ n * m`));;
refine (by (VALID ((((rewrite [] [] (mulnC)) THEN (rewrite [] [] (expnS))) THEN (done_tac)))));;
let expnSr = end_section_proof();;
(start_section_proof ["n"](`0 < n ==> 0 ^ n = 0`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["m"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) (((ONCE_REWRITE_TAC[LT_REFL])) THEN (done_tac)))))));;
refine (by (VALID ((((ONCE_REWRITE_TAC[EXP]) THEN (ONCE_REWRITE_TAC[mul0n])) THEN (done_tac)))));;
let exp0n = end_section_proof();;
(start_section_proof ["n"](`1 ^ n = 1`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim)) THENL [((rewrite [] [] (expn0))); ((rewrite [] [] (expnS)) THEN (rewrite [] [] (mul1n)))] THEN (done_tac)))));;
let exp1n = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m ^ (n1 + n2) = m ^ n1 * m ^ n2`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n1",mk_type("num",[]))),(mk_var("n1",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n1"]) THEN (move ["IHn"]))])) THEN (repeat_tactic 0 10 ((rewrite [] [] (expn0))) THEN repeat_tactic 0 10 ((rewrite [] [] (mul1n))) THEN repeat_tactic 0 10 ((rewrite [] [] (add0n))) THEN ((TRY done_tac)) THEN (rewrite [] [] (addSn)) THEN repeat_tactic 1 9 ((rewrite [] [] (expnS))))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> (((rewrite [] [] (th_0)) THEN (rewrite [] [] (mulnA))) THEN (done_tac))))));;
let expn_add = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`(m1 * m2) ^ n = m1 ^ n * m2 ^ n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))])) ((repeat_tactic 1 9 ((rewrite [] [] (expn0))) THEN (rewrite [] [] (muln1))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> ((repeat_tactic 1 9 ((rewrite [] [] (expnS))) THEN (rewrite [] [] (th_0)) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM mulnA))) THEN (rewrite [] [(`m2 * _1`)] (mulnCA))) THEN (done_tac))))));;
let expn_mull = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m ^ (n1 * n2) = (m ^ n1) ^ n2`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n1",mk_type("num",[]))),(mk_var("n1",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n1"]) THEN (move ["IHn"]))])) ((repeat_tactic 1 9 ((rewrite [] [] (expn0))) THEN (rewrite [] [] (mul0n)) THEN (rewrite [] [] (expn0)) THEN (rewrite [] [] (exp1n))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> (((rewrite [] [] (mulSn)) THEN (rewrite [] [] (expn_add)) THEN (rewrite [] [] (expnS)) THEN (rewrite [] [] (expn_mull)) THEN (rewrite [] [] (th_0))) THEN (done_tac))))));;
let expn_mulr = end_section_proof();;
(start_section_proof ["m";"n"](`(0 < m ^ n) <=> (0 < m) \/ (n = 0)`));;
refine (by (VALID ((((THENL_FIRST) ((((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["q"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) THEN (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]))) (((rewrite [] [] (expn0))) THEN ((arith_tac)) THEN (done_tac)))))));;
refine (by (VALID ((((rewrite [] [] (expnS)) THEN (rewrite [] [] (mul0n))) THEN ((arith_tac)) THEN (done_tac)))));;
refine (by (VALID ((((rewrite [] [] (expn0))) THEN ((arith_tac)) THEN (done_tac)))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> (((rewrite [] [] (expnS)) THEN (rewrite [] [] (mulSn)) THEN (rewrite [] [] (addn_gt0)) THEN (rewrite [] [] (th_0))) THEN ((arith_tac)) THEN (done_tac))))));;
let expn_gt0 = end_section_proof();;
(start_section_proof ["m";"e"](`(m ^ e = 0) <=> (m = 0) /\ (0 < e)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (eqn0Ngt))) THEN (rewrite [] [] (expn_gt0)) THEN (rewrite [] [] (negb_or)) THEN (rewrite [] [] (GSYM lt0n))) THEN (done_tac)))));;
let expn_eq0 = end_section_proof();;
(start_section_proof ["m";"n"](`1 < m ==> n < m ^ n`));;
refine (by (VALID ((((THENL_FIRST) (((BETA_TAC) THEN ((move ["m_gt1"]))) THEN (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]))]))) (((rewrite [] [] (expn0))) THEN ((arith_tac)) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "m_gt1" (fun th_0 -> ((((MP_TAC (MATCH_MP ltnW th_0))) THEN (BETA_TAC)) THEN ((rewrite [] [] (ONE)) THEN (rewrite [] [] (GSYM ltE))) THEN ((DISCH_THEN (MP_TAC o (fun th_1 -> MATCH_MP leq_pmul2l th_1))) THEN BETA_TAC))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (ltE))) THEN (rewrite [] [] (expnS))) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (GSYM th_0)))))))));;
refine (by (VALID (((((MP_TAC leq_trans)) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((rewrite [] [] (GSYM ltE)))))));;
refine (by (VALID (USE_THEN "m_gt1" (fun th_0 -> ((((MP_TAC (MATCH_MP ltn_Pmull th_0))) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((arith_tac)) THEN (done_tac))))));;
let ltn_expl = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`1 < m ==> (m ^ n1 <= m ^ n2 <=> n1 <= n2)`));;
refine (by (VALID ((((THENL_ROT (-1)) (((BETA_TAC) THEN ((move ["m_gt1"]))) THEN (((SPEC_TAC ((mk_var("n2",mk_type("num",[]))),(mk_var("n2",mk_type("num",[]))))) THEN (SPEC_TAC ((mk_var("n1",mk_type("num",[]))),(mk_var("n1",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n1"]) THEN (move ["IHn"]))])) THEN ((BETA_TAC) THEN (case THENL [((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["q"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) THEN (repeat_tactic 0 10 ((rewrite [] [] (leqnn))) THEN ((TRY done_tac)))))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (expnS))) THEN (rewrite [] [] (leq_pmul2l)) THEN repeat_tactic 0 10 ((rewrite [] [] (leqSS))) THEN ((TRY done_tac)) THEN (rewrite [] [] (ltE)) THEN (rewrite [] [] (ltnW)) THEN (rewrite [] [] (GSYM ONE))) THEN (done_tac)))));;
refine (by (VALID (USE_THEN "m_gt1" (fun th_0 -> (((rewrite [] [] (expn0)) THEN (rewrite [] [] (ONE)) THEN (rewrite [] [] (GSYM ltE)) THEN (rewrite [] [] (expn_gt0))) THEN (((MP_TAC th_0 THEN REMOVE_THEN "m_gt1" (fun th -> ALL_TAC))) THEN (BETA_TAC)) THEN ((arith_tac)) THEN (done_tac))))));;
refine (by (VALID (((rewrite [] [] (leqNgt)) THEN (rewrite [] [] (expn0))))));;
refine (by (VALID (USE_THEN "m_gt1" (fun th_0 -> ((((MP_TAC th_0 THEN REMOVE_THEN "m_gt1" (fun th -> ALL_TAC))) THEN (BETA_TAC)) THEN (((rewrite [] [] (ltE))) THEN ((move ["m_gt1"]))))))));;
refine (by (VALID (USE_THEN "m_gt1" (fun th_0 -> ((rewrite [] [] (ltE)) THEN (rewrite [] [] ((MATCH_MP leq_trans th_0))) THEN repeat_tactic 0 10 ((rewrite [] [] (GSYM ltE))) THEN repeat_tactic 0 10 ((rewrite [] [] (ltn0))) THEN ((TRY done_tac)) THEN (rewrite [] [] (expnS)) THEN (rewrite [] [] (leq_pmulr)) THEN (rewrite [] [] (expn_gt0)))))));;
refine (by (VALID (USE_THEN "m_gt1" (fun th_0 -> ((((MP_TAC th_0 THEN REMOVE_THEN "m_gt1" (fun th -> ALL_TAC))) THEN (BETA_TAC)) THEN ((arith_tac)) THEN (done_tac))))));;
let leq_exp2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`1 < m ==> (m ^ n1 < m ^ n2 <=> n1 < n2)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m_gt1"]))) THEN (repeat_tactic 1 9 ((rewrite [] [] (ltnNge))) THEN (rewrite [] [] (leq_exp2l))) THEN (done_tac)))));;
let ltn_exp2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`1 < m ==> (m ^ n1 = m ^ n2 <=> n1 = n2)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m_gt1"]))) THEN (repeat_tactic 1 9 ((rewrite [] [] (eqn_leq))) THEN repeat_tactic 1 9 ((rewrite [] [] (leq_exp2l)))) THEN (done_tac)))));;
let eqn_exp2l = end_section_proof();;
(start_section_proof ["m"](`1 < m ==> !e1 e2. m ^ e1 = m ^ e2 ==> e1 = e2`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["m_gt1"]) THEN (move ["e1"]) THEN (move ["e2"]))) THEN ((rewrite [] [] (eqn_exp2l))) THEN (done_tac)))));;
let expnI = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> n1 <= n2 ==> m ^ n1 <= m ^ n2`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((case THENL [((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))); (case THEN ((move ["n'"]) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2))))))]) THEN (DISCH_THEN (fun th_3 -> (rewrite [] [] (th_3))))))])) THEN (repeat_tactic 0 10 ((rewrite [] [] (ltn0))) THEN ((TRY done_tac))) THENL [((rewrite [] [] (GSYM ONE)) THEN repeat_tactic 1 9 ((rewrite [] [] (exp1n))) THEN (rewrite [] [] (leqnn)) THEN ((TRY done_tac))); ((rewrite [] [] (leq_exp2l)) THEN ((TRY done_tac)))] THEN ((arith_tac)) THEN (done_tac)))));;
let leq_pexp2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> m ^ n1 < m ^ n2 ==> n1 < n2`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((case THENL [((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))); (case THEN ((move ["n'"]) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2))))))]) THEN (DISCH_THEN (fun th_3 -> (rewrite [] [] (th_3))))))])) ((rewrite [] [] (ltn0)) THEN ((TRY done_tac)))) THENL [((rewrite [] [] (GSYM ONE)) THEN repeat_tactic 1 9 ((rewrite [] [] (exp1n))) THEN (rewrite [] [] (ltnn)) THEN ((TRY done_tac))); ((rewrite [] [] (ltn_exp2l)) THEN ((TRY done_tac)))] THEN ((arith_tac)) THEN (done_tac)))));;
let ltn_pexp2l = end_section_proof();;
(start_section_proof ["m";"n";"e"](`0 < e ==> (m ^ e < n ^ e <=> m < n)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["e_gt0"]))) THEN (((EQ_TAC)) THENL ([ALL_TAC; ((move ["ltmn"]))]))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (ltnNge)))) THEN (((MP_TAC contra)) THEN ((DISCH_THEN MATCH_MP_TAC)) THEN ((move ["lemn"])))))));;
refine (by (VALID (((((SPEC_TAC ((mk_var("e",mk_type("num",[]))),(mk_var("e",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["e'"]) THEN (move ["IHe"]))])) THEN (repeat_tactic 0 10 ((rewrite [] [] (expn0))) THEN repeat_tactic 0 10 ((rewrite [] [] (leqnn))) THEN ((TRY done_tac)) THEN repeat_tactic 1 9 ((rewrite [] [] (expnS))) THEN (rewrite [] [] (leq_mul))) THEN (done_tac)))));;
refine (by (VALID (USE_THEN "e_gt0" (fun th_0 -> (((THENL_FIRST) (((MP_TAC th_0 THEN REMOVE_THEN "e_gt0" (fun th -> ALL_TAC)) THEN (SPEC_TAC ((mk_var("e",mk_type("num",[]))),(mk_var("e",mk_type("num",[])))))) THEN (elim)) (((rewrite [] [] (ltnn))) THEN (done_tac))))))));;
refine (by (VALID ((((THENL_FIRST) ((BETA_TAC) THEN (case THENL [((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); ((case THEN ((move ["e'"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))))) THEN (move ["IHe"]))])) (((rewrite [] [] (GSYM ONE)) THEN repeat_tactic 1 9 ((rewrite [] [] (expn1)))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHe" (fun th_0 -> ((repeat_tactic 1 9 ((rewrite [] [] (expnS))) THEN (rewrite [] [] (ltn_mul)) THEN (simp_tac) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM expnS))) THEN (rewrite [] [] (th_0)) THEN ((TRY done_tac))) THEN ((arith_tac)))))));;
let ltn_exp2r = end_section_proof();;
(start_section_proof ["m";"n";"e"](`0 < e ==> (m ^ e <= n ^ e <=> m <= n)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["e_gt0"]))) THEN ((rewrite [] [] (leqNgt)) THEN (rewrite [] [] (ltn_exp2r)) THEN ((TRY done_tac)) THEN (rewrite [] [] (GSYM leqNgt))) THEN (done_tac)))));;
let leq_exp2r = end_section_proof();;
(start_section_proof ["m";"n";"e"](`0 < e ==> (m ^ e = n ^ e <=> m = n)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["e_gt0"]))) THEN (repeat_tactic 1 9 ((rewrite [] [] (eqn_leq))) THEN repeat_tactic 1 9 ((rewrite [] [] (leq_exp2r)))) THEN (done_tac)))));;
let eqn_exp2r = end_section_proof();;
(start_section_proof ["e"](`0 < e ==> !m n. m ^ e = n ^ e ==> m = n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["e_gt0"]) THEN (move ["m"]) THEN (move ["n"]))) THEN ((rewrite [] [] (eqn_exp2r))) THEN (done_tac)))));;
let expIn = end_section_proof();;
(start_section_proof [](`FACT 0 = 1`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[FACT])) THEN (done_tac)))));;
let fact0 = end_section_proof();;
(start_section_proof ["n"](`FACT (SUC n)  = (SUC n) * FACT n`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[FACT])) THEN (done_tac)))));;
let factS = end_section_proof();;
(start_section_proof ["n"](`0 < FACT n`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]))])) THEN ((ONCE_REWRITE_TAC[FACT]) THEN repeat_tactic 0 10 ((ONCE_REWRITE_TAC[muln_gt0]))) THEN ((arith_tac)) THEN (done_tac)))));;
let fact_gt0 = end_section_proof();;
let odd = new_basic_definition `odd = ODD`;;
(start_section_proof [](`odd 0 = F`));;
refine (by (VALID ((((rewrite [] [] (odd))) THEN (repeat_tactic 2 0 ((ONCE_REWRITE_TAC[ODD]))) THEN (done_tac)))));;
let odd0 = end_section_proof();;
(start_section_proof ["n"](`odd (SUC n) = ~odd n`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[odd]) THEN (ONCE_REWRITE_TAC[ODD])) THEN (done_tac)))));;
let oddS = end_section_proof();;
(start_section_proof [](`odd 1 = T`));;
refine (by (VALID ((((rewrite [] [] (ONE)) THEN (rewrite [] [] (oddS)) THEN (rewrite [] [] (odd0))) THEN (done_tac)))));;
let odd1 = end_section_proof();;
(start_section_proof ["m";"n"](`odd (m + n) = odd m + odd n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["m"]) THEN (move ["IHn"]))])) (((rewrite [] [] (add0n)) THEN (rewrite [] [] (odd0)) THEN (rewrite [] [] (addFb))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> (((rewrite [] [] (addSn)) THEN repeat_tactic 1 9 ((rewrite [] [] (oddS))) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (GSYM addTb)) THEN (rewrite [] [] (addbA)) THEN (rewrite [] [] (addTb))) THEN (done_tac))))));;
let odd_add = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> odd (m - n) = odd m + odd n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["le_nm"]))) THEN (((MP_TAC (ISPEC (`odd n`) addIb))) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((rewrite [] [] (GSYM odd_add)) THEN (rewrite [] [] (subnK)) THEN ((TRY done_tac)) THEN (rewrite [] [] (addbK))) THEN (done_tac)))));;
let odd_sub = end_section_proof();;
(start_section_proof ["i";"m"](`odd m = F ==> i < m ==> odd (m - i) = odd i`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["oddm"]) THEN (move ["lt_im"]))))));;
refine (by (VALID (USE_THEN "lt_im" (fun th_0 -> USE_THEN "oddm" (fun th_1 -> (((rewrite [] [] ((MATCH_MP odd_sub (MATCH_MP ltnW th_0)))) THEN (rewrite [] [] (th_1)) THEN (rewrite [] [] (addFb))) THEN (done_tac)))))));;
let odd_opp = end_section_proof();;
(start_section_proof ["m";"n"](`odd (m * n) <=> odd m /\ odd n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["m"]) THEN (move ["IHm"]))])) (((rewrite [] [] (mul0n)) THEN (rewrite [] [] (odd0)) THEN (rewrite [] [] (andFb))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHm" (fun th_0 -> (((rewrite [] [] (mulSn)) THEN (rewrite [] [] (odd_add)) THEN (rewrite [] [] (oddS)) THEN (rewrite [] [] (GSYM addTb)) THEN (rewrite [] [] (andb_addl)) THEN (rewrite [] [] (GSYM th_0)) THEN (rewrite [] [] (andTb))) THEN (done_tac))))));;
let odd_mul = end_section_proof();;
(start_section_proof ["m";"n"](`odd (m ^ n) <=> (n = 0) \/ odd m`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))])) (((rewrite [] [] (expn0)) THEN (rewrite [] [] (odd1))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> ((rewrite [] [] (expnS)) THEN (rewrite [] [] (odd_mul)) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (orbC)) THEN (rewrite [] [] ((ARITH_RULE `SUC n = 0 <=> F`))) THEN (rewrite [] [] (orFb)))))));;
refine (by (VALID (((set_tac "b" (`odd m`))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> USE_THEN "b_def" (fun th_1 -> (((MP_TAC th_0 THEN REMOVE_THEN "IHn" (fun th -> ALL_TAC)) THEN (MP_TAC th_1 THEN REMOVE_THEN "b_def" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((move ["_"]) THEN (move ["_"]))))))));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (simp_tac))) THEN (done_tac)))));;
let odd_exp = end_section_proof();;
let double = define `double 0 = 0 /\ (!n. double (SUC n) = SUC (SUC (double n)))`;;
(start_section_proof [](`double 0 = 0`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[double])) THEN (done_tac)))));;
let double0 = end_section_proof();;
(start_section_proof ["n"](`double (SUC n) = SUC (SUC (double n))`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[double])) THEN (done_tac)))));;
let doubleS = end_section_proof();;
(start_section_proof ["n"](`n + n = double n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))])) (((rewrite [] [] (addn0)) THEN (rewrite [] [] (double0))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> (((rewrite [] [] (addnS)) THEN (rewrite [] [] (addSn)) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (doubleS))) THEN (done_tac))))));;
let addnn = end_section_proof();;
(start_section_proof ["m"](`2 * m = double m`));;
refine (by (VALID ((((rewrite [] [] ((ARITH_RULE `2 = SUC 1`))) THEN (rewrite [] [] (mulSn)) THEN (rewrite [] [] (mul1n)) THEN (rewrite [] [] (addnn))) THEN (done_tac)))));;
let mul2n = end_section_proof();;
(start_section_proof ["m"](`m * 2 = double m`));;
refine (by (VALID ((((rewrite [] [] (mulnC)) THEN (rewrite [] [] (mul2n))) THEN (done_tac)))));;
let muln2 = end_section_proof();;
(start_section_proof ["m";"n"](`double (m + n) = double m + double n`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (GSYM addnn))) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM addnA))) THEN (rewrite [] [(`n + _1`)] ((ISPEC (mk_var("n",mk_type("num",[]))) addnCA)))) THEN (done_tac)))));;
let double_add = end_section_proof();;
(start_section_proof ["m";"n"](`double (m - n) = double m - double n`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[]))))) THEN (SPEC_TAC ((mk_var("m",mk_type("num",[]))),(mk_var("m",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["m"]) THEN (move ["IHm"]))])) THEN ((BETA_TAC) THEN (case THENL [((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n'"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) THEN (repeat_tactic 0 10 ((rewrite [] [] (sub0n))) THEN repeat_tactic 0 10 ((rewrite [] [] (subn0))) THEN repeat_tactic 0 10 ((rewrite [] [] (double0))) THEN repeat_tactic 0 10 ((rewrite [] [] (subn0))) THEN repeat_tactic 0 10 ((rewrite [] [] (sub0n))) THEN ((TRY done_tac)))))));;
refine (by (VALID (USE_THEN "IHm" (fun th_0 -> ((repeat_tactic 1 9 ((rewrite [] [] (doubleS))) THEN repeat_tactic 1 9 ((rewrite [] [] (subSS))) THEN (rewrite [] [] (th_0))) THEN (done_tac))))));;
let double_sub = end_section_proof();;
(start_section_proof ["m";"n"](`(double m <= double n <=> m <= n)`));;
refine (by (VALID ((repeat_tactic 1 9 ((rewrite [] [] (leqE))) THEN (rewrite [] [] (GSYM double_sub))))));;
refine (by (VALID (((set_tac "d" (`m - n`))))));;
refine (by (VALID (USE_THEN "d_def" (fun th_0 -> (((THENL_FIRST) ((((MP_TAC th_0 THEN REMOVE_THEN "d_def" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((move ["_"]))) THEN (((SPEC_TAC ((mk_var("d",mk_type("num",[]))),(mk_var("d",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))); (case THEN ((move ["d'"]) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2))))))]))) (((rewrite [] [] (double0))) THEN (done_tac))))))));;
refine (by (VALID ((((rewrite [] [] (doubleS))) THEN ((arith_tac)) THEN (done_tac)))));;
let leq_double = end_section_proof();;
(start_section_proof ["m";"n"](`(double m < double n) = (m < n)`));;
refine (by (VALID (((repeat_tactic 2 0 ((rewrite [] [] (ltnNge))) THEN (rewrite [] [] (leq_double))) THEN (done_tac)))));;
let ltn_double = end_section_proof();;
(start_section_proof ["m";"n"](`(SUC (double m) < double n) = (m < n)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (GSYM muln2)))) THEN ((arith_tac)) THEN (done_tac)))));;
let ltn_Sdouble = end_section_proof();;
(start_section_proof ["m";"n"](`(double m <= SUC (double n)) = (m <= n)`));;
refine (by (VALID ((((rewrite [] [] (leqNgt)) THEN (rewrite [] [] (ltn_Sdouble)) THEN (rewrite [] [] (GSYM leqNgt))) THEN (done_tac)))));;
let leq_Sdouble = end_section_proof();;
(start_section_proof ["n"](`odd (double n) = F`));;
refine (by (VALID ((((rewrite [] [] (GSYM addnn)) THEN (rewrite [] [] (odd_add)) THEN (rewrite [] [] (addbb))) THEN (done_tac)))));;
let odd_double = end_section_proof();;
(start_section_proof ["n"](`(0 < double n) = (0 < n)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n'"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) THEN (repeat_tactic 0 10 ((rewrite [] [] (double0))) THEN ((TRY done_tac)) THEN (rewrite [] [] (doubleS))) THEN ((arith_tac))))));;
let double_gt0 = end_section_proof();;
(start_section_proof ["n"](`(double n = 0) = (n = 0)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n'"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) THEN (repeat_tactic 0 10 ((rewrite [] [] (double0))) THEN ((TRY done_tac)) THEN (rewrite [] [] (doubleS))) THEN ((arith_tac))))));;
let double_eq0 = end_section_proof();;
(start_section_proof ["m";"n"](`double (m * n) = double m * n`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (GSYM mul2n))) THEN (rewrite [] [] (mulnA))) THEN (done_tac)))));;
let double_mull = end_section_proof();;
(start_section_proof ["m";"n"](`double (m * n) = m * double n`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (GSYM muln2))) THEN (rewrite [] [] (mulnA))) THEN (done_tac)))));;
let double_mulr = end_section_proof();;
let half_def = define `HALF 0 = (0, 0) /\ 
	!n. HALF (SUC n) = (SND (HALF n), SUC (FST (HALF n)))`;;
let half = new_basic_definition `half = FST o HALF`;;
let uphalf = new_basic_definition `uphalf = SND o HALF`;;
(start_section_proof [](`half 0 = 0`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[half]) THEN (ONCE_REWRITE_TAC[o_DEF]) THEN (simp_tac) THEN (ONCE_REWRITE_TAC[half_def])) THEN (done_tac)))));;
let half0 = end_section_proof();;
(start_section_proof [](`uphalf 0 = 0`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[uphalf]) THEN (ONCE_REWRITE_TAC[o_DEF]) THEN (simp_tac) THEN (ONCE_REWRITE_TAC[half_def])) THEN (done_tac)))));;
let uphalf0 = end_section_proof();;
(start_section_proof ["n"](`half (SUC n) = uphalf n`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[half]) THEN (ONCE_REWRITE_TAC[uphalf]) THEN (ONCE_REWRITE_TAC[o_DEF]) THEN (simp_tac) THEN (ONCE_REWRITE_TAC[half_def])) THEN (done_tac)))));;
let halfS = end_section_proof();;
(start_section_proof ["n"](`uphalf (SUC n) = SUC (half n)`));;
refine (by (VALID ((((ONCE_REWRITE_TAC[half]) THEN (ONCE_REWRITE_TAC[uphalf]) THEN (ONCE_REWRITE_TAC[o_DEF]) THEN (simp_tac) THEN (ONCE_REWRITE_TAC[half_def])) THEN (done_tac)))));;
let uphalfS = end_section_proof();;
(start_section_proof ["x"](`half (double x) = x`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("x",mk_type("num",[]))),(mk_var("x",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]))])) (((rewrite [] [] (double0)) THEN (rewrite [] [] (half0))) THEN (done_tac)))))));;
refine (by (VALID (((((rewrite [] [] (doubleS)) THEN (rewrite [] [] (halfS)) THEN (rewrite [] [] (uphalfS))) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (done_tac)))));;
let doubleK = end_section_proof();;
let half_double = doubleK;;
(start_section_proof [](`!m n. double m = double n ==> m = n`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]))))));;
refine (by (VALID (((((rewrite [2] [(`m`)] (GSYM doubleK)) THEN (rewrite [2] [(`n`)] (GSYM doubleK))) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (done_tac)))));;
let double_inj = end_section_proof();;
(start_section_proof ["n"](`uphalf (double n) = n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]))])) (((rewrite [] [] (double0)) THEN (rewrite [] [] (uphalf0))) THEN (done_tac)))))));;
refine (by (VALID (((((rewrite [] [] (doubleS)) THEN (rewrite [] [] (uphalfS)) THEN (rewrite [] [] (halfS))) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (done_tac)))));;
let uphalf_double = end_section_proof();;
(start_section_proof ["n"](`uphalf n = (if odd n then 1 else 0) + half n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))])) (((rewrite [] [] (uphalf0)) THEN (rewrite [] [] (half0)) THEN (rewrite [] [] (odd0)) THEN (rewrite [] [] (addn0))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> ((rewrite [] [] (halfS)) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (addnA)) THEN (rewrite [] [] (oddS)) THEN (rewrite [] [] (uphalfS)))))));;
refine (by (VALID (((set_tac "b" (`odd n`))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> USE_THEN "b_def" (fun th_1 -> ((((MP_TAC th_0 THEN REMOVE_THEN "IHn" (fun th -> ALL_TAC)) THEN (MP_TAC th_1 THEN REMOVE_THEN "b_def" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((move ["_"]) THEN (move ["_"]))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac))) THEN (repeat_tactic 0 10 ((rewrite [] [] (addn0))) THEN repeat_tactic 0 10 ((rewrite [] [] (add0n))) THEN repeat_tactic 0 10 ((rewrite [] [] (add1n))) THEN repeat_tactic 0 10 ((rewrite [] [] (addn1)))) THEN (done_tac)))))));;
let uphalf_half = end_section_proof();;
(start_section_proof ["n"](`(if odd n then 1 else 0) + double (half n) = n`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (elim) THENL ([ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))])) (((rewrite [] [] (odd0)) THEN (rewrite [] [] (half0)) THEN (rewrite [] [] (double0)) THEN (simp_tac) THEN (rewrite [] [] (addn0))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> ((rewrite [3] [] (GSYM th_0)) THEN (rewrite [] [] (halfS)) THEN (rewrite [] [] (uphalf_half)) THEN (rewrite [] [] (double_add)) THEN (rewrite [] [] (oddS)))))));;
refine (by (VALID (((set_tac "b" (`odd n`))))));;
refine (by (VALID (USE_THEN "IHn" (fun th_0 -> USE_THEN "b_def" (fun th_1 -> (((THENL_FIRST) ((((MP_TAC th_0 THEN REMOVE_THEN "IHn" (fun th -> ALL_TAC)) THEN (MP_TAC th_1 THEN REMOVE_THEN "b_def" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((move ["_"]) THEN (move ["_"]))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))) (((rewrite [] [] (add0n)) THEN (rewrite [] [] (ONE)) THEN (rewrite [] [] (doubleS)) THEN (rewrite [] [] (double0)) THEN (rewrite [] [] (GSYM addSn))) THEN (done_tac)))))))));;
refine (by (VALID ((((rewrite [] [] (double0)) THEN (rewrite [] [] (add0n)) THEN (rewrite [] [] (ONE)) THEN (rewrite [] [] (addSn)) THEN (rewrite [] [] (add0n))) THEN (done_tac)))));;
let odd_double_half = end_section_proof();;
(start_section_proof ["n";"b"](`half ((if b then 1 else 0) + double n) = n`));;
refine (by (VALID ((((THENL_LAST) (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (simp_tac))) (((rewrite [] [] (add0n)) THEN (rewrite [] [] (half_double))) THEN (done_tac)))))));;
refine (by (VALID ((((rewrite [] [] (ONE)) THEN (rewrite [] [] (addSn)) THEN (rewrite [] [] (add0n)) THEN (rewrite [] [] (halfS)) THEN (rewrite [] [] (uphalf_double))) THEN (done_tac)))));;
let half_bit_double = end_section_proof();;
(start_section_proof ["m";"n"](`half (m + n) = (if odd m /\ odd n then 1 else 0) + (half m + half n)`));;
refine (by (VALID (((rewrite [1] [(`n`)] (GSYM odd_double_half)) THEN (rewrite [] [] (addnCA)) THEN (rewrite [1] [(`m`)] (GSYM odd_double_half)) THEN (rewrite [] [] (GSYM addnA)) THEN (rewrite [] [] (GSYM double_add))))));;
refine (by (VALID ((((set_tac "bn" (`odd n`))) THEN ((set_tac "bm" (`odd m`)))))));;
refine (by (VALID (USE_THEN "bm_def" (fun th_0 -> USE_THEN "bn_def" (fun th_1 -> (((MP_TAC th_0 THEN REMOVE_THEN "bm_def" (fun th -> ALL_TAC)) THEN (MP_TAC th_1 THEN REMOVE_THEN "bn_def" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((move ["_"]) THEN (move ["_"]))))))));;
refine (by (VALID (((((SPEC_TAC ((mk_var("bn",mk_type("bool",[]))),(mk_var("bn",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (((SPEC_TAC ((mk_var("bm",mk_type("bool",[]))),(mk_var("bm",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac))) THEN (repeat_tactic 0 10 ((rewrite [] [] (add0n))) THEN repeat_tactic 0 10 ((rewrite [] [] (half_double))) THEN repeat_tactic 0 10 ((rewrite [] [] (ONE))) THEN repeat_tactic 0 10 ((rewrite [] [] (addSn))) THEN repeat_tactic 0 10 ((rewrite [] [] (add0n))) THEN repeat_tactic 0 10 ((rewrite [] [] (halfS))) THEN repeat_tactic 0 10 ((rewrite [] [] (uphalf_double))) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((rewrite [] [] (uphalfS)) THEN (rewrite [] [] (half_double))) THEN (done_tac)))));;
let half_add = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> half m <= half n`));;
refine (by (VALID (((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP subnK th_0))) THEN BETA_TAC) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))) THEN ((rewrite [] [] (half_add)) THEN (rewrite [] [] (addnA)) THEN (rewrite [] [] (leq_addl))) THEN (done_tac)))));;
let half_leq = end_section_proof();;
(start_section_proof ["n"](`(0 < half n) = (1 < n)`));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n'"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) (((rewrite [] [] (half0)) THEN (rewrite [] [] (ltnn))) THEN ((arith_tac)) THEN (done_tac)))))));;
refine (by (VALID ((((THENL_FIRST) (((SPEC_TAC ((mk_var("n'",mk_type("num",[]))),(mk_var("n'",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["n"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) (((rewrite [] [] (ONE)) THEN (rewrite [] [] (halfS)) THEN (rewrite [] [] (uphalf0)) THEN repeat_tactic 1 9 ((rewrite [] [] (ltnn)))) THEN (done_tac)))))));;
refine (by (VALID ((((rewrite [] [] (halfS)) THEN (rewrite [] [] (uphalfS))) THEN ((arith_tac)) THEN (done_tac)))));;
let half_gt0 = end_section_proof();;
(start_section_proof ["m"](`m * m = m ^ 2`));;
refine (by (VALID ((((rewrite [] [] ((ARITH_RULE `2 = SUC (SUC 0)`))) THEN repeat_tactic 1 9 ((rewrite [] [] (expnS))) THEN (rewrite [] [] (expn0)) THEN (rewrite [] [] (muln1))) THEN (done_tac)))));;
let mulnn = end_section_proof();;
(start_section_proof ["m";"n"](`(m + n) ^ 2 = (m ^ 2 + n ^ 2) + 2 * (m * n)`));;
refine (by (VALID ((repeat_tactic 1 9 ((rewrite [] [] (GSYM mulnn))) THEN (rewrite [] [] (mul2n)) THEN (rewrite [] [] (muln_addr)) THEN repeat_tactic 1 9 ((rewrite [] [] (muln_addl))) THEN (rewrite [] [(`n * _1`)] (mulnC)) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM addnA)))))));;
refine (by (VALID ((((rewrite [] [] (EQ_ADD_LCANCEL)) THEN (rewrite [] [] (addnA)) THEN (rewrite [] [] (addnn)) THEN (rewrite [] [] (addnC))) THEN (done_tac)))));;
let sqrn_add = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> (m - n) ^ 2 = (m ^ 2 + n ^ 2) - 2 * (m * n)`));;
refine (by (VALID ((((DISCH_THEN (MP_TAC o (fun th_0 -> MATCH_MP subnK th_0))) THEN BETA_TAC) THEN ((move ["def_m"]))))));;
refine (by (VALID (USE_THEN "def_m" (fun th_0 -> ((rewrite [2] [] (GSYM th_0)) THEN (rewrite [] [] (sqrn_add)) THEN (rewrite [] [] (GSYM addnA)) THEN (rewrite [] [] (addnAC)))))));;
refine (by (VALID (USE_THEN "def_m" (fun th_0 -> ((repeat_tactic 2 0 ((rewrite [] [] (GSYM addnA))) THEN (rewrite [] [] (addnn)) THEN (rewrite [] [] (GSYM mul2n)) THEN (rewrite [] [] (GSYM muln_addr)) THEN (rewrite [] [(`n EXP 2`)] (GSYM mulnn)) THEN (rewrite [] [] (GSYM muln_addl)) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (addnK))) THEN (done_tac))))));;
let sqrn_sub = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> (m + n) ^ 2 - 4 * (m * n) = (m - n) ^ 2`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["le_nm"]))) THEN ((rewrite [] [] ((ARITH_RULE `4 = 2 * 2`))) THEN (rewrite [] [] (GSYM mulnA)) THEN (rewrite [] [] (mul2n)) THEN (rewrite [] [] (GSYM addnn)) THEN (rewrite [] [] (GSYM subn_sub)))))));;
refine (by (VALID ((((rewrite [] [] (sqrn_add)) THEN (rewrite [] [] (addnK)) THEN (rewrite [] [] (sqrn_sub))) THEN (done_tac)))));;
let sqrn_add_sub = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ 2 - n ^ 2 = (m - n) * (m + n)`));;
refine (by (VALID ((((rewrite [] [] (muln_subl)) THEN repeat_tactic 1 9 ((rewrite [] [] (muln_addr))) THEN (rewrite [] [] (addnC)) THEN (rewrite [] [] ((ISPEC (mk_var("m",mk_type("num",[]))) mulnC))) THEN (rewrite [] [] (subn_add2l)) THEN repeat_tactic 1 9 ((rewrite [] [] (mulnn)))) THEN (done_tac)))));;
let subn_sqr = end_section_proof();;
(start_section_proof ["m";"n"](`(m ^ 2 < n ^ 2) = (m < n)`));;
refine (by (VALID ((((rewrite [] [] (ltn_exp2r)) THEN ((TRY done_tac))) THEN ((arith_tac)) THEN (done_tac)))));;
let ltn_sqr = end_section_proof();;
(start_section_proof ["m";"n"](`(m ^ 2 <= n ^ 2) = (m <= n)`));;
refine (by (VALID ((((rewrite [] [] (leq_exp2r)) THEN ((TRY done_tac))) THEN ((arith_tac)) THEN (done_tac)))));;
let leq_sqr = end_section_proof();;
(start_section_proof ["n"](`(0 < n ^ 2) = (0 < n)`));;
refine (by (VALID ((((THENL_FIRST) ((((MP_TAC (ISPEC (`0`) ltn_sqr))) THEN (BETA_TAC)) THEN ((rewrite [] [] (exp0n)))) (((arith_tac)) THEN (done_tac)))))));;
refine (by (VALID ((((BETA_TAC) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (done_tac)))));;
let sqrn_gt0 = end_section_proof();;
(start_section_proof ["m";"n"](`(m ^ 2 = n ^ 2) = (m = n)`));;
refine (by (VALID ((((rewrite [] [] (eqn_exp2r)) THEN ((TRY done_tac))) THEN ((arith_tac)) THEN (done_tac)))));;
let eqn_sqr = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ 2 = n ^ 2 ==> m = n`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["eq"]))))));;
refine (by (VALID ((((MP_TAC (MATCH_MP expIn (ARITH_RULE `0 < 2`)))) THEN (BETA_TAC) THEN ((move ["inj"]))))));;
refine (by (VALID (USE_THEN "inj" (fun th_0 -> USE_THEN "eq" (fun th_1 -> (((rewrite [] [] ((MATCH_MP th_0 th_1)))) THEN (done_tac)))))));;
let sqrn_inj = end_section_proof();;
let leqif = new_definition `!m n c. leqif m n c <=> (m <= n /\ ((m = n) <=> c))`;;
(start_section_proof ["m";"n";"c"](`leqif m n c <=> if c then m = n else m < n`));;
refine (by (VALID ((((THENL_FIRST) (((rewrite [] [] (ltn_neqAle)) THEN (rewrite [] [] (leqif))) THEN ((EQ_TAC))) ((((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (simp_tac))) THEN (done_tac)))))));;
refine (by (VALID (((((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (simp_tac))) THEN ((rewrite [] [] (leqnn))) THEN (done_tac)))));;
let leqifP = end_section_proof();;
(start_section_proof ["m";"n";"c"](`leqif m n c ==> m <= n`));;
refine (by (VALID ((((rewrite [] [] (leqif)) THEN (simp_tac)) THEN (done_tac)))));;
let leqif_imp_le = end_section_proof();;
(start_section_proof ["m";"n";"c"](`leqif m n c ==> (m = n <=> c)`));;
refine (by (VALID ((((rewrite [] [] (leqif)) THEN (simp_tac)) THEN (done_tac)))));;
let leqif_imp_eq = end_section_proof();;
(start_section_proof ["m";"c"](`(leqif m m c) <=> c`));;
refine (by (VALID ((((rewrite [] [] (leqif)) THEN (rewrite [] [] (leqnn))) THEN (done_tac)))));;
let leqif_refl = end_section_proof();;
(start_section_proof ["m1";"m2";"m3";"c1";"c2"](`leqif m1 m2 c1 ==> leqif m2 m3 c2 ==> leqif m1 m3 (c1 /\ c2)`));;
refine (by (VALID ((repeat_tactic 1 9 ((rewrite [] [] (leqifP)))))));;
refine (by (VALID ((((THENL_FIRST) ((((SPEC_TAC ((mk_var("c1",mk_type("bool",[]))),(mk_var("c1",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c2",mk_type("bool",[]))),(mk_var("c2",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac) THEN (move ["lt12"])))) (((BETA_TAC) THEN ((DISCH_THEN (fun th_2 -> (rewrite [] [] (GSYM th_2)))))) THEN (done_tac)))))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (ltE)))) THEN (((MP_TAC leq_trans)) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN ((rewrite [] [] (leqSS))) THEN (((MP_TAC ltnW)) THEN ((exact_tac))) THEN (done_tac)))));;
let leqif_trans = end_section_proof();;
(start_section_proof ["f"](`(!m n. f m <= f n <=> m <= n) ==>
  !m n c. (leqif (f m) (f n) c) <=> (leqif m n c)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["f_mono"]) THEN (move ["m"]) THEN (move ["n"]) THEN (move ["c"]))))));;
refine (by (VALID (USE_THEN "f_mono" (fun th_0 -> ((repeat_tactic 1 9 ((rewrite [] [] (leqifP))) THEN repeat_tactic 1 9 ((rewrite [] [] (eqn_leq))) THEN repeat_tactic 1 9 ((rewrite [] [] (ltnNge))) THEN repeat_tactic 1 9 ((rewrite [] [] (th_0)))) THEN (done_tac))))));;
let monotone_leqif = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> leqif m n (n <= m)`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["lemn"]))) THEN ((rewrite [] [] (leqif))) THEN (((split_tac)) THEN (((TRY done_tac)))) THEN ((rewrite [] [] (eqn_leq)))))));;
refine (by (VALID (USE_THEN "lemn" (fun th_0 -> (((rewrite [] [] (th_0))) THEN (done_tac))))));;
let leqif_geq = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> leqif m n (m = n)`));;
refine (by (VALID ((((rewrite [] [] (leqif))) THEN (done_tac)))));;
let leqif_eq = end_section_proof();;
(start_section_proof ["a";"b";"C"](`leqif a b C ==> ((b <= a) <=> C)`));;
refine (by (VALID ((((rewrite [] [] (leqif))) THEN ((case) THEN ((move ["le_ab"]))) THEN ((rewrite [] [] (eqn_leq)))))));;
refine (by (VALID (USE_THEN "le_ab" (fun th_0 -> (((rewrite [] [] (th_0))) THEN (done_tac))))));;
let geq_leqif = end_section_proof();;
(start_section_proof ["a";"b";"C"](`leqif a b C ==> (a < b <=> ~ C)`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["le_ab"]))))));;
refine (by (VALID (USE_THEN "le_ab" (fun th_0 -> (((rewrite [] [] (ltnNge)) THEN (rewrite [] [] ((MATCH_MP geq_leqif th_0)))) THEN (done_tac))))));;
let ltn_leqif = end_section_proof();;
(start_section_proof ["m1";"n1";"c1";"m2";"n2";"c2"](`leqif m1 n1 c1 ==> leqif m2 n2 c2 ==> leqif (m1 + m2) (n1 + n2) (c1 /\ c2)`));;
refine (by (VALID ((((rewrite [] [] (GSYM (MATCH_MP monotone_leqif (ISPEC (mk_var("m2",mk_type("num",[]))) leq_add2r))))) THEN ((move ["le1"]))))));;
refine (by (VALID (((rewrite [] [] (GSYM (MATCH_MP monotone_leqif (ISPEC (mk_var("n1",mk_type("num",[]))) leq_add2l))))))));;
refine (by (VALID ((((MP_TAC leqif_trans)) THEN ((exact_tac))))));;
let leqif_add = end_section_proof();;
(start_section_proof ["m1";"n1";"c1";"m2";"n2";"c2"](`leqif m1 n1 c1 ==> leqif m2 n2 c2 ==>
	  leqif (m1 * m2) (n1 * n2) (n1 * n2 = 0 \/ (c1 /\ c2))`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["le1"]) THEN (move ["le2"]))))));;
refine (by (VALID ((((MP_TAC (ISPEC (`n1 * n2`) posnP))) THEN (case) THENL ([((move ["n12_0"])); ALL_TAC])))));;
refine (by (VALID (USE_THEN "n12_0" (fun th_0 -> USE_THEN "le2" (fun th_1 -> USE_THEN "le1" (fun th_2 -> USE_THEN "n12_0" (fun th_3 -> (((rewrite [] [] (th_0))) THEN (((MP_TAC th_1 THEN REMOVE_THEN "le2" (fun th -> ALL_TAC)) THEN (MP_TAC th_2 THEN REMOVE_THEN "le1" (fun th -> ALL_TAC)) THEN (MP_TAC th_3 THEN REMOVE_THEN "n12_0" (fun th -> ALL_TAC))) THEN (BETA_TAC)) THEN ((rewrite [] [] (muln_eq0)))))))))));;
refine (by (VALID ((((case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN (((SPEC_TAC ((mk_var("m2",mk_type("num",[]))),(mk_var("m2",mk_type("num",[]))))) THEN (SPEC_TAC ((mk_var("m1",mk_type("num",[]))),(mk_var("m1",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))); (case THEN ((move ["m"]) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2))))))])) THEN ((case) THENL ([((DISCH_THEN (fun th_3 -> (rewrite [] [] (th_3))))); (case THEN ((move ["m'"]) THEN (DISCH_THEN (fun th_4 -> (rewrite [] [] (th_4))))))])) THEN (repeat_tactic 1 9 ((rewrite [] [] (leqif))) THEN repeat_tactic 0 10 ((rewrite [] [] (muln0))) THEN repeat_tactic 0 10 ((rewrite [] [] (mul0n))) THEN repeat_tactic 0 10 ((rewrite [] [] (leqnn))) THEN (simp_tac)) THEN ((arith_tac))))));;
refine (by (VALID ((((rewrite [] [] (muln_gt0))) THEN ((BETA_TAC) THEN (case THEN ((move ["n1_gt0"]) THEN (move ["n2_gt0"]))))))));;
refine (by (VALID ((((MP_TAC (ISPEC (mk_var("m2",mk_type("num",[]))) posnP))) THEN (BETA_TAC) THEN (case THENL [((move ["m2_0"])); ((move ["m2_gt0"]))])))));;
refine (by (VALID (USE_THEN "le2" (fun th_0 -> (((rewrite [] [] (leqifP))) THEN (((MP_TAC th_0)) THEN (BETA_TAC)) THEN (((rewrite [] [] (leqif))) THEN (ALL_TAC THEN (case THEN ((move ["_"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (GSYM th_1)))))))))))));;
refine (by (VALID (USE_THEN "m2_0" (fun th_0 -> USE_THEN "n1_gt0" (fun th_1 -> USE_THEN "n2_gt0" (fun th_2 -> (((rewrite [] [] (andbC)) THEN repeat_tactic 1 9 ((rewrite [] [] (eqn_leq))) THEN repeat_tactic 1 9 ((rewrite [] [] (leqNgt))) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (muln0)) THEN (rewrite [] [] (muln_gt0)) THEN (rewrite [] [] (th_1)) THEN (rewrite [] [] (th_2))) THEN (done_tac))))))));;
refine (by (VALID (USE_THEN "n1_gt0" (fun th_0 -> ((((MP_TAC th_0)) THEN ((DISCH_THEN (MP_TAC o (fun th_1 -> MATCH_MP leq_pmul2l th_1))) THEN BETA_TAC)) THEN (((DISCH_THEN (MP_TAC o (fun th_2 -> MATCH_MP monotone_leqif th_2))) THEN BETA_TAC) THEN ((move ["Mn1"]))))))));;
refine (by (VALID (USE_THEN "le2" (fun th_0 -> USE_THEN "Mn1" (fun th_1 -> (((MP_TAC th_0 THEN REMOVE_THEN "le2" (fun th -> ALL_TAC)) THEN (MP_TAC th_1 THEN REMOVE_THEN "Mn1" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((DISCH_THEN (fun th_2 -> (rewrite [] [] (GSYM th_2)))))))))));;
refine (by (VALID (USE_THEN "m2_gt0" (fun th_0 -> ((((MP_TAC th_0 THEN REMOVE_THEN "m2_gt0" (fun th -> ALL_TAC))) THEN ((DISCH_THEN (MP_TAC o (fun th_1 -> MATCH_MP leq_pmul2r th_1))) THEN BETA_TAC)) THEN (((DISCH_THEN (MP_TAC o (fun th_2 -> MATCH_MP monotone_leqif th_2))) THEN BETA_TAC) THEN ((move ["Mm2"]))))))));;
refine (by (VALID (USE_THEN "le1" (fun th_0 -> USE_THEN "Mm2" (fun th_1 -> (((MP_TAC th_0 THEN REMOVE_THEN "le1" (fun th -> ALL_TAC)) THEN (MP_TAC th_1 THEN REMOVE_THEN "Mm2" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((DISCH_THEN (fun th_2 -> (rewrite [] [] (GSYM th_2)))))))))));;
refine (by (VALID (((BETA_TAC) THEN ((move ["leq1"]) THEN (move ["leq2"]))))));;
refine (by (VALID (USE_THEN "leq1" (fun th_0 -> USE_THEN "leq2" (fun th_1 -> ((((MP_TAC (MATCH_MP (MATCH_MP leqif_trans th_0) th_1))) THEN (BETA_TAC)) THEN (repeat_tactic 1 9 ((rewrite [] [] (leqifP))))))))));;
refine (by (VALID (((set_tac "b" (`c1 /\ c2`))))));;
refine (by (VALID (USE_THEN "b_def" (fun th_0 -> ((((MP_TAC th_0 THEN REMOVE_THEN "b_def" (fun th -> ALL_TAC))) THEN (BETA_TAC) THEN ((move ["_"]))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac))))))));;
refine (by (VALID (USE_THEN "n2_gt0" (fun th_0 -> USE_THEN "n1_gt0" (fun th_1 -> (((rewrite [] [] (eqn_leq)) THEN (rewrite [] [] (leqNgt)) THEN (rewrite [] [] (muln_gt0)) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (th_1))) THEN (done_tac)))))));;
let leqif_mul = end_section_proof();;
(start_section_proof ["m";"n"](`leqif (2 * (m * n)) (m ^ 2 + n ^ 2) (m = n)`));;
refine (by (VALID (((((THENL_ROT 1)) (SUBGOAL_THEN (`!m n. n <= m ==> leqif (2 * (m * n)) (m ^ 2 + n ^ 2) (m = n)`)(fun th -> MP_TAC th THEN ((move ["cond"])))))))));;
refine (by (VALID (((((MP_TAC (ISPEC (mk_var("m",mk_type("num",[]))) (ISPEC (mk_var("n",mk_type("num",[]))) leqP)))) THEN (case) THEN (((TRY done_tac)))) THEN (((rewrite [] [] (eq_sym)) THEN (rewrite [] [] (addnC)) THEN (rewrite [] [(`m * _1`)] (mulnC))) THEN ((move ["mn"])))))));;
refine (by (VALID (USE_THEN "cond" (fun th_0 -> USE_THEN "mn" (fun th_1 -> ((((MP_TAC th_0 THEN REMOVE_THEN "cond" (fun th -> ALL_TAC))) THEN ((DISCH_THEN MATCH_MP_TAC))) THEN (((MP_TAC (MATCH_MP ltnW th_1))) THEN (BETA_TAC)) THEN (done_tac)))))));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["le_nm"]))))));;
refine (by (VALID (((rewrite [] [] (leqifP))))));;
refine (by (VALID ((((THENL_FIRST) (((MP_TAC (ISPEC (`m = n:num`) EXCLUDED_MIDDLE))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); ((move ["ne_mn"]))])) (((rewrite [] [] (mulnn)) THEN (rewrite [] [] (addnn)) THEN (rewrite [] [] (mul2n))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "ne_mn" (fun th_0 -> (((ONCE_REWRITE_TAC[th_0]) THEN (simp_tac)) THEN ((rewrite [] [] (GSYM subn_gt0)) THEN (rewrite [] [] (GSYM sqrn_sub)) THEN ((TRY done_tac)) THEN (rewrite [] [] (sqrn_gt0)) THEN (rewrite [] [] (subn_gt0)) THEN (rewrite [] [] (ltn_neqAle)) THEN (rewrite [] [] (eq_sym))) THEN (done_tac))))));;
let nat_Cauchy = end_section_proof();;
(start_section_proof ["m";"n"](`leqif (4 * (m * n)) ((m + n) ^ 2) (m = n)`));;
refine (by (VALID (((rewrite [] [] ((ARITH_RULE `4 = 2 * 2`))) THEN (rewrite [] [] (GSYM mulnA)) THEN (rewrite [] [] (mul2n)) THEN (rewrite [] [] (GSYM addnn)) THEN (rewrite [] [] (sqrn_add)) THEN (rewrite [] [] (leqifP))))));;
refine (by (VALID (((rewrite [] [] (ltn_add2r)) THEN (rewrite [] [] (eqn_addr)) THEN (rewrite [] [] (ltn_neqAle))))));;
refine (by (VALID ((((rewrite [] [] ((MATCH_MP leqif_imp_eq (ISPEC (mk_var("n",mk_type("num",[]))) (ISPEC (mk_var("m",mk_type("num",[]))) nat_Cauchy))))) THEN (rewrite [] [] ((MATCH_MP leqif_imp_le (ISPEC (mk_var("n",mk_type("num",[]))) (ISPEC (mk_var("m",mk_type("num",[]))) nat_Cauchy))))) THEN (simp_tac) THEN (rewrite [] [] (if_same))) THEN (done_tac)))));;
let nat_AGM2 = end_section_proof();;
let distn = new_definition `!m n. distn m n = (m - n) + (n - m)`;;
(start_section_proof ["m";"n"](`distn m n = distn n m`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (distn))) THEN (rewrite [] [] (addnC))) THEN (done_tac)))));;
let distnC = end_section_proof();;
(start_section_proof ["d";"m";"n"](`distn (d + m) (d + n) = distn m n`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (distn))) THEN repeat_tactic 1 9 ((rewrite [] [] (subn_add2l)))) THEN (done_tac)))));;
let distn_add2l = end_section_proof();;
(start_section_proof ["d";"m";"n"](`distn (m + d) (n + d) = distn m n`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (distn))) THEN repeat_tactic 1 9 ((rewrite [] [] (subn_add2r)))) THEN (done_tac)))));;
let distn_add2r = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> distn m n = n - m`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["le_m_n"]))))));;
refine (by (VALID (USE_THEN "le_m_n" (fun th_0 -> (((rewrite [] [] (distn)) THEN (rewrite [] [] ((MATCH_MP (MATCH_MP EQ_IMP (ISPEC (mk_var("n",mk_type("num",[]))) (ISPEC (mk_var("m",mk_type("num",[]))) leqE))) th_0))) THEN (rewrite [] [] (add0n))) THEN (done_tac))))));;
let distnEr = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> distn m n = m - n`));;
refine (by (VALID ((((BETA_TAC) THEN ((move ["le_n_m"]))) THEN ((rewrite [] [] (distnC)) THEN (rewrite [] [] (distnEr))) THEN (done_tac)))));;
let distnEl = end_section_proof();;
(start_section_proof ["n"](`distn 0 n = n`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("n",mk_type("num",[]))),(mk_var("n",mk_type("num",[])))))) THEN (case) THENL ([((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0))))); (case THEN ((move ["m"]) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1))))))])) THEN ((rewrite [] [] (distn)) THEN (rewrite [] [] (sub0n)) THEN repeat_tactic 0 10 ((rewrite [] [] (subn0))) THEN (rewrite [] [] (add0n))) THEN (done_tac)))));;
let dist0n = end_section_proof();;
(start_section_proof ["n"](`distn n 0 = n`));;
refine (by (VALID ((((rewrite [] [] (distnC)) THEN (rewrite [] [] (dist0n))) THEN (done_tac)))));;
let distn0 = end_section_proof();;
(start_section_proof ["m"](`distn m m = 0`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (distn))) THEN (rewrite [] [] (subnn)) THEN (rewrite [] [] (addn0))) THEN (done_tac)))));;
let distnn = end_section_proof();;
(start_section_proof ["m";"n"](`(distn m n = 0) <=> (m = n)`));;
refine (by (VALID ((((rewrite [] [] (distn)) THEN (rewrite [] [] (addn_eq0)) THEN repeat_tactic 1 9 ((rewrite [] [] (subn_eq0))) THEN (rewrite [] [] (GSYM eqn_leq))) THEN (done_tac)))));;
let distn_eq0 = end_section_proof();;
(start_section_proof ["m"](`distn m (SUC m) = 1`));;
refine (by (VALID (((((MP_TAC (ISPEC (`1`) (ISPEC (`0`) (ISPEC (mk_var("m",mk_type("num",[]))) distn_add2r))))) THEN (BETA_TAC)) THEN ((rewrite [] [] (add0n)) THEN (rewrite [] [] (add1n)) THEN (rewrite [] [] (dist0n))) THEN (done_tac)))));;
let distnS = end_section_proof();;
(start_section_proof ["m"](`distn (SUC m) m = 1`));;
refine (by (VALID ((((rewrite [] [] (distnC)) THEN (rewrite [] [] (distnS))) THEN (done_tac)))));;
let distSn = end_section_proof();;
(start_section_proof ["m";"n"](`(distn m n = 1) <=> (if m < n then SUC m = n else m = SUC n)`));;
refine (by (VALID ((((MP_TAC (ISPEC (mk_var("n",mk_type("num",[]))) (ISPEC (mk_var("m",mk_type("num",[]))) ltnP)))) THEN (case) THENL ([((move ["lt_mn"])); ((move ["le_mn"]))])))));;
refine (by (VALID ((((rewrite [] [(`_ = 1`)] (eq_sym)) THEN (rewrite [] [] (GSYM (ISPEC (mk_var("m",mk_type("num",[]))) eqn_addr))) THEN (rewrite [] [] (distnEr)) THEN repeat_tactic 0 10 ((rewrite [] [] (subnK))) THEN repeat_tactic 0 10 ((rewrite [] [] (add1n))) THEN ((TRY done_tac)) THEN (rewrite [] [] (ltnW))) THEN (done_tac)))));;
refine (by (VALID (USE_THEN "le_mn" (fun th_0 -> (((rewrite [] [] (GSYM (ISPEC (mk_var("n",mk_type("num",[]))) eqn_addr))) THEN (rewrite [] [] (distnEl)) THEN repeat_tactic 0 10 ((rewrite [] [] (subnK))) THEN ((TRY done_tac)) THEN (rewrite [] [] (add1n)) THEN (rewrite [] [] (ltnNge)) THEN (rewrite [] [] (th_0)) THEN (simp_tac)) THEN (done_tac))))));;
let distn_eq1 = end_section_proof();;
(start_section_proof ["m";"n";"p"](`leqif (distn m p) (distn m n + distn n p) ((m <= n /\ n <= p) \/ (p <= n /\ n <= m))`));;
refine (by (VALID (((((THENL_ROT 1)) (SUBGOAL_THEN (`!m p. m <= p ==> leqif (distn m p) (distn m n + distn n p) (m <= n /\ n <= p \/ p <= n /\ n <= m)`)(fun th -> MP_TAC th THEN ((move ["IH"])))))))));;
refine (by (VALID (USE_THEN "IH" (fun th_0 -> ((((MP_TAC (ISPEC (mk_var("p",mk_type("num",[]))) (ISPEC (mk_var("m",mk_type("num",[]))) leq_total)))) THEN (case) THEN (((TRY done_tac)))) THEN ((DISCH_THEN (MP_TAC o (fun th_1 -> MATCH_MP th_0 th_1))) THEN BETA_TAC))))));;
refine (by (VALID ((((rewrite [] [] (addnC)) THEN (rewrite [] [] (orbC)) THEN (rewrite [] [(`distn n _`)] ((ISPEC (mk_var("n",mk_type("num",[]))) distnC))) THEN repeat_tactic 1 9 ((rewrite [] [(`distn p _`)] (distnC)))) THEN (done_tac)))));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["p"]) THEN (move ["le_mp"]))))));;
refine (by (VALID (((rewrite [] [] (distnEr)) THEN ((TRY done_tac))))));;
refine (by (VALID ((((MP_TAC (ISPEC (`m <= n /\ n <= p`) EXCLUDED_MIDDLE))) THEN (case) THENL ([((case THEN ((move ["le_mn"]) THEN (move ["le_np"]))) THEN ((simp_tac THEN TRY done_tac))); ALL_TAC])))));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (distnEr))) THEN ((TRY done_tac)) THEN (rewrite [] [] (addnC)) THEN (rewrite [] [] (leqifP)) THEN (simp_tac) THEN (rewrite [] [] (GSYM (ISPEC (mk_var("m",mk_type("num",[]))) eqn_addr))) THEN (rewrite [] [] (GSYM addnA)) THEN repeat_tactic 1 9 ((rewrite [] [] (subnK)))) THEN (done_tac)))));;
refine (by (VALID ((((rewrite [] [] (negb_and)) THEN repeat_tactic 1 9 ((rewrite [] [] (GSYM ltnNge)))) THEN (ALL_TAC THEN (case THENL [((move ["lt_nm"])); ((move ["lt_pn"]))]))))));;
refine (by (VALID (USE_THEN "lt_nm" (fun th_0 -> USE_THEN "le_mp" (fun th_1 -> (((MP_TAC (MATCH_MP (MATCH_MP ltn_leq_trans th_0) th_1))) THEN (BETA_TAC) THEN ((move ["lt_np"]))))))));;
refine (by (VALID (USE_THEN "lt_nm" (fun th_0 -> USE_THEN "lt_np" (fun th_1 -> (((rewrite [] [] (leqifP)) THEN repeat_tactic 1 9 ((rewrite [] [] (leqNgt))) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (th_1)) THEN (simp_tac) THEN (rewrite [] [] (ltn_addl)) THEN (rewrite [] [] (distnEr)) THEN repeat_tactic 0 10 ((rewrite [] [] (ltnW))) THEN ((TRY done_tac)) THEN (rewrite [] [] (ltn_sub2l))) THEN (done_tac)))))));;
refine (by (VALID (USE_THEN "le_mp" (fun th_0 -> USE_THEN "lt_pn" (fun th_1 -> (((MP_TAC (MATCH_MP (MATCH_MP leq_ltn_trans th_0) th_1))) THEN (BETA_TAC) THEN ((move ["lt_mn"]))))))));;
refine (by (VALID (USE_THEN "lt_mn" (fun th_0 -> USE_THEN "lt_pn" (fun th_1 -> (((rewrite [] [] (leqifP)) THEN repeat_tactic 1 9 ((rewrite [] [] (leqNgt))) THEN (rewrite [] [] (th_0)) THEN (rewrite [] [] (th_1)) THEN (simp_tac) THEN (rewrite [] [] (ltn_addr)) THEN (rewrite [] [] (distnEr)) THEN repeat_tactic 0 10 ((rewrite [] [] (ltn_sub2r))) THEN ((TRY done_tac)) THEN (rewrite [] [] (ltnW))) THEN (done_tac)))))));;
let leqif_add_distn = end_section_proof();;
(start_section_proof ["m";"n";"p"](`distn m p <= distn m n + distn n p`));;
refine (by (VALID (((((MP_TAC (MATCH_MP leqif_imp_le (ISPEC (mk_var("p",mk_type("num",[]))) (ISPEC (mk_var("n",mk_type("num",[]))) (ISPEC (mk_var("m",mk_type("num",[]))) leqif_add_distn)))))) THEN (BETA_TAC)) THEN (done_tac)))));;
let leq_add_distn = end_section_proof();;
(start_section_proof ["m";"n"](`(distn m n) ^ 2 + 2 * (m * n) = m ^ 2 + n ^ 2`));;
refine (by (VALID (((((THENL_ROT 1)) (SUBGOAL_THEN (`!m n. n <= m ==> distn m n ^ 2 + 2 * (m * n) = m ^ 2 + n ^ 2`)(fun th -> MP_TAC th THEN ((move ["IH"])))))))));;
refine (by (VALID (USE_THEN "IH" (fun th_0 -> ((((MP_TAC (ISPEC (mk_var("m",mk_type("num",[]))) (ISPEC (mk_var("n",mk_type("num",[]))) leq_total)))) THEN (case)) THEN (((DISCH_THEN (MP_TAC o (fun th_1 -> MATCH_MP th_0 th_1))) THEN BETA_TAC) THEN (((TRY done_tac)))))))));;
refine (by (VALID ((((rewrite [] [(`n ^ 2 + _`)] (addnC)) THEN (rewrite [] [(`n * _`)] (mulnC)) THEN (rewrite [] [] (distnC))) THEN (done_tac)))));;
refine (by (VALID (((BETA_TAC) THEN ((move ["m"]) THEN (move ["n"]) THEN (move ["le_mn"]))))));;
refine (by (VALID ((((rewrite [] [] (distnEl)) THEN repeat_tactic 0 10 ((rewrite [] [] (sqrn_sub))) THEN repeat_tactic 0 10 ((rewrite [] [] (subnK))) THEN ((TRY done_tac)) THEN (rewrite [] [] ((MATCH_MP leqif_imp_le (ISPEC (mk_var("n",mk_type("num",[]))) (ISPEC (mk_var("m",mk_type("num",[]))) nat_Cauchy)))))) THEN (done_tac)))));;
let sqrn_distn = end_section_proof();;
