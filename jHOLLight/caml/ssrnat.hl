needs "caml/ssrbool.hl";;
prioritize_num();;
(start_section_proof ["n"](`SUC n - 1 = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let succnK = end_section_proof();;
(start_section_proof ["n";"m"](`SUC n = SUC m ==> n = m`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let succn_inj = end_section_proof();;
(start_section_proof ["m";"n"](`(SUC m = SUC n) = (m = n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let eqSS = end_section_proof();;
(start_section_proof ["n"](`0 + n = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let add0n = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m + n = SUC (m + n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let addSn = end_section_proof();;
(start_section_proof ["n"](`1 + n = SUC n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let add1n = end_section_proof();;
(start_section_proof ["n"](`n + 0 = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let addn0 = end_section_proof();;
(start_section_proof ["m";"n"](`m + SUC n = SUC (m + n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let addnS = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m + n = m + SUC n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let addSnnS = end_section_proof();;
(start_section_proof ["m";"n";"p"](`m + (n + p) = n + (m + p)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let addnCA = end_section_proof();;
(start_section_proof ["m";"n"](`m + n = n + m`));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN addn0)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [1] []))) THEN ((USE_THM_THEN addnCA)(new_rewrite [] [])) THEN ((USE_THM_THEN addn0)(new_rewrite [] []))) THEN (done_tac)))));;
let addnC = end_section_proof();;
(start_section_proof ["n"](`n + 1 = SUC n`));;
refine (by (VALID (((((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((USE_THM_THEN add1n)(new_rewrite [] []))) THEN (done_tac)))));;
let addn1 = end_section_proof();;
(start_section_proof ["n";"m";"p"](`n + (m + p) = (n + m) + p`));;
refine (by (VALID (((((USE_THM_THEN addnC)(new_rewrite [] [(`m + p`)])) THEN ((USE_THM_THEN addnCA)(new_rewrite [] [])) THEN ((USE_THM_THEN addnC)(new_rewrite [] []))) THEN (done_tac)))));;
let addnA = end_section_proof();;
(start_section_proof ["m";"n";"p"](`(n + m) + p = (n + p) + m`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN addnC)(new_rewrite [] [(`p + m`)]))) THEN (done_tac)))));;
let addnAC = end_section_proof();;
(start_section_proof ["m";"n"](`(m + n = 0) <=> (m = 0) /\ (n = 0)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let addn_eq0 = end_section_proof();;
(start_section_proof ["p";"m";"n"](`(p + m = p + n) <=> (m = n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let eqn_addl = end_section_proof();;
(start_section_proof ["p";"m";"n"](`(m + p = n + p) = (m = n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let eqn_addr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m + n1 = m + n2 ==> n1 = n2`));;
refine (by (VALID (((BETA_TAC THEN (move ["Heq"])) THEN ((fun thm_tac -> (USE_THM_THEN eqn_addl)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] []))) THEN (done_tac)))));;
let addnI = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`n1 + m = n2 + m ==> n1 = n2`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN addnC)(GSYM_THEN (new_rewrite [] [(`_1 + m`)])))) THEN (move ["Heq"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN addnI)(fun fst_th ->(USE_THEN "Heq")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN (done_tac)))));;
let addIn = end_section_proof();;
(start_section_proof ["n"](`0 - n = 0`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let sub0n = end_section_proof();;
(start_section_proof ["n"](`n - 0 = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subn0 = end_section_proof();;
(start_section_proof [](`!n. n - n = 0`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subnn = end_section_proof();;
(start_section_proof [](`!n m. SUC m - SUC n = m - n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subSS = end_section_proof();;
(start_section_proof [](`!p m n. (p + m) - (p + n) = m - n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subn_add2l = end_section_proof();;
(start_section_proof [](`!p m n. (m + p) - (n + p) = m - n`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN addnC)(GSYM_THEN (new_rewrite [] [(`_1 + p`)])))) THEN ((USE_THM_THEN subn_add2l)(new_rewrite [] []))) THEN (done_tac)))));;
let subn_add2r = end_section_proof();;
(start_section_proof [](`!n x. (n + x) - n = x`));;
refine (by (VALID ((BETA_TAC THEN (move ["n"]) THEN (move ["m"])))));;
refine (by (VALID (((((USE_THM_THEN addn0)(GSYM_THEN (new_rewrite [2] [(`n`)]))) THEN ((USE_THM_THEN subn_add2l)(new_rewrite [] [])) THEN ((USE_THM_THEN subn0)(new_rewrite [] []))) THEN (done_tac)))));;
let addKn = end_section_proof();;
(start_section_proof [](`!n x. (x + n) - n = x`));;
refine (by (VALID (((BETA_TAC THEN (move ["n"]) THEN (move ["m"])) THEN (((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((USE_THM_THEN addKn)(new_rewrite [] []))) THEN (done_tac)))));;
let addnK = end_section_proof();;
(start_section_proof [](`!n. SUC n - n = 1`));;
refine (by (VALID ((BETA_TAC THEN (move ["n"])))));;
refine (by (VALID (((((USE_THM_THEN add1n)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addnK)(new_rewrite [] []))) THEN (done_tac)))));;
let subSnn = end_section_proof();;
(start_section_proof ["m";"n";"p"](`(n - m) - p = n - (m + p)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subn_sub = end_section_proof();;
(start_section_proof [](`!m n p. (m - n) - p = (m - p) - n`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN subn_sub)(new_rewrite [] []))) THEN ((USE_THM_THEN addnC)(new_rewrite [] []))) THEN (done_tac)))));;
let subnAC = end_section_proof();;
(start_section_proof [](`!m n. (m - n) - 1 = m - SUC n`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"])) THEN (((USE_THM_THEN subn_sub)(new_rewrite [] [])) THEN ((USE_THM_THEN addn1)(new_rewrite [] []))) THEN (done_tac)))));;
let predn_sub = end_section_proof();;
(start_section_proof [](`!m n. (SUC m - n) - 1 = m - n`));;
refine (by (VALID (((((USE_THM_THEN predn_sub)(new_rewrite [] [])) THEN ((USE_THM_THEN subSS)(new_rewrite [] []))) THEN (done_tac)))));;
let predn_subS = end_section_proof();;
(start_section_proof [](`!m n. (m < SUC n) = (m <= n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltnS = end_section_proof();;
(start_section_proof [](`!n. 0 <= n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leq0n = end_section_proof();;
(start_section_proof [](`!n. 0 < SUC n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltn0Sn = end_section_proof();;
(start_section_proof [](`!n. n < 0 <=> F`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltn0 = end_section_proof();;
(start_section_proof [](`!n. n <= n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqnn = end_section_proof();;
(start_section_proof [](`!n. n < SUC n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltnSn = end_section_proof();;
(start_section_proof [](`!m n. m = n ==> m <= n`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (DISCH_THEN(new_rewrite [] []))) THEN ((USE_THM_THEN leqnn)(new_rewrite [] [])) THEN (done_tac)))));;
let eq_leq = end_section_proof();;
(start_section_proof [](`!n. n <= SUC n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqnSn = end_section_proof();;
(start_section_proof [](`!n. n - 1 <= n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leq_pred = end_section_proof();;
(start_section_proof [](`!n. n <= SUC (n - 1)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqSpred = end_section_proof();;
(start_section_proof [](`!m n. m < n ==> SUC (n - 1) = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltn_predK = end_section_proof();;
(start_section_proof [](`!n. 0 < n ==> SUC (n - 1) = n`));;
refine (by (VALID (((BETA_TAC THEN (move ["n"]) THEN (move ["H"])) THEN (((fun thm_tac -> (USE_THM_THEN ltn_predK)(ISPEC_THEN (`0`) thm_tac))MP_TAC) THEN (exact_tac))))));;
let prednK = end_section_proof();;
(start_section_proof [](`!m n. (m <= n) <=> ~(n < m)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqNgt = end_section_proof();;
(start_section_proof [](`!m n. (m < n) = ~(n <= m)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"])) THEN (((USE_THM_THEN leqNgt)(new_rewrite [] [])) THEN (done_tac))))));;
let ltnNge = end_section_proof();;
(start_section_proof [](`!n. n < n <=> F`));;
refine (by (VALID (((BETA_TAC THEN (move ["n"])) THEN (((USE_THM_THEN ltnNge)(new_rewrite [] [])) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let ltnn = end_section_proof();;
(start_section_proof [](`!n. (n <= 0) = (n = 0)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqn0 = end_section_proof();;
(start_section_proof [](`!n. (0 < n) = ~(n = 0)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let lt0n = end_section_proof();;
(start_section_proof [](`!n. 0 < n ==> ~(n = 0)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let lt0n_neq0 = end_section_proof();;
(start_section_proof [](`!n. (n = 0) = ~(0 < n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let eqn0Ngt = end_section_proof();;
(start_section_proof [](`!n. (n = 0) = F ==> 0 < n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let neq0_lt0n = end_section_proof();;
(start_section_proof [](`!m n. (m = n) = (m <= n /\ n <= m)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let eqn_leq = end_section_proof();;
(start_section_proof [](`!m n. m <= n /\ n <= m ==> m = n`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"])) THEN ((USE_THM_THEN eqn_leq)(GSYM_THEN (new_rewrite [] []))) THEN (done_tac)))));;
let anti_leq = end_section_proof();;
(start_section_proof [](`!m n. ~(m = n) <=> (m < n) \/ (n < m)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((((USE_THM_THEN eqn_leq)(new_rewrite [] [])) THEN ((USE_THM_THEN negb_and)(new_rewrite [] [])) THEN ((USE_THM_THEN orbC)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(GSYM_THEN (new_rewrite [] []))))) THEN (done_tac)))));;
let neq_ltn = end_section_proof();;
(start_section_proof ["m";"n"](`(m <= n) <=> (m = n) \/ (m < n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leq_eqVlt = end_section_proof();;
(start_section_proof [](`!x y:A. x = y <=> y = x`));;
refine (by (VALID (((((USE_THM_THEN EQ_SYM_EQ)MP_TAC) THEN (clear_assumption "EQ_SYM_EQ") THEN BETA_TAC) THEN (done_tac)))));;
let eq_sym = end_section_proof();;
(start_section_proof [](`!m n. (m < n) <=> ~(m = n) /\ (m <= n)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((((USE_THM_THEN ltnNge)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_eqVlt)(new_rewrite [] [])) THEN ((USE_THM_THEN negb_or)(new_rewrite [] [])) THEN ((USE_THM_THEN leqNgt)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN eq_sym)(new_rewrite [] [(`n = m`)]))) THEN (done_tac)))));;
let ltn_neqAle = end_section_proof();;
(start_section_proof [](`!n m p. m <= n ==> n <= p ==> m <= p`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leq_trans = end_section_proof();;
(start_section_proof [](`!n m. n < m <=> SUC n <= m`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltE = end_section_proof();;
(start_section_proof [](`!n m. SUC n <= SUC m <=> n <= m`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqSS = end_section_proof();;
(start_section_proof [](`!n m p. m <= n ==> n < p ==> m < p`));;
refine (by (VALID ((BETA_TAC THEN (move ["n"]) THEN (move ["m"]) THEN (move ["p"]) THEN (move ["Hmn"])))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN (((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN (((USE_THM_THEN leqSS)(new_rewrite [] [])) THEN (done_tac)) THEN (done_tac)))));;
let leq_ltn_trans = end_section_proof();;
(start_section_proof ["n";"m";"p"](`m < n ==> n <= p ==> m < p`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltn_leq_trans = end_section_proof();;
(start_section_proof [](`!m n. m < n ==> m <= n`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"])) THEN ((USE_THM_THEN ltE)(new_rewrite [] [])) THEN (((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN leqnSn)(new_rewrite [] [])) THEN (done_tac)))));;
let ltnW = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> m <= SUC n`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["le_mn"])) THEN (((USE_THM_THEN ltnW)MP_TAC) THEN (clear_assumption "ltnW") THEN (DISCH_THEN apply_tac)) THEN (((USE_THM_THEN ltE)(new_rewrite [] [])) THEN ((USE_THM_THEN leqSS)(new_rewrite [] []))) THEN (done_tac)))));;
let leqW = end_section_proof();;
(start_section_proof [](`!n m p. m < n ==> n < p ==> m < p`));;
refine (by (VALID ((BETA_TAC THEN (move ["n"]) THEN (move ["m"]) THEN (move ["p"]) THEN (move ["lt_mn"])))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN ltnW)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((USE_THM_THEN ltE)(new_rewrite [] []))))));;
refine (by (VALID (((((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] []))) THEN (done_tac)))));;
let ltn_trans = end_section_proof();;
(start_section_proof [](`!m n. m >= n <=> n <= m`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let geqE = end_section_proof();;
(start_section_proof ["m";"n"](`m > n <=> n < m`));;
refine (by (VALID ((arith_tac))));;
let gtE = end_section_proof();;
(start_section_proof ["m";"n"](`(m <= n) \/ (n <= m)`));;
refine (by (VALID ((((((USE_THM_THEN implyNb)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN ltnNge)(GSYM_THEN (new_rewrite [] [])))) THEN (move ["lt_nm"])) THEN (((USE_THM_THEN ltnW)MP_TAC) THEN (clear_assumption "ltnW") THEN (exact_tac)) THEN (done_tac)))));;
let leq_total = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n \/ n < m`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqP = end_section_proof();;
(start_section_proof ["m";"n"](`m < n \/ n <= m`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltnP = end_section_proof();;
(start_section_proof ["n"](`n = 0 \/ 0 < n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let posnP = end_section_proof();;
(start_section_proof ["m";"n"](`m < n \/ n < m \/ m = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltngtP = end_section_proof();;
(start_section_proof [](`!p m n. (p + m <= p + n) = (m <= n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leq_add2l = end_section_proof();;
(start_section_proof [](`!p m n. (p + m < p + n) = (m < n)`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN ((USE_THM_THEN addnS)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN leq_add2l)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_add2l = end_section_proof();;
(start_section_proof [](`!p m n. (m + p <= n + p) = (m <= n)`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN addnC)(GSYM_THEN (new_rewrite [] [(`_1 + p`)])))) THEN ((USE_THM_THEN leq_add2l)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_add2r = end_section_proof();;
(start_section_proof [](`!p m n. (m + p < n + p) = (m < n)`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN ((USE_THM_THEN addSn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN leq_add2r)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_add2r = end_section_proof();;
(start_section_proof [](`!m1 m2 n1 n2. m1 <= n1 ==> m2 <= n2 ==> m1 + m2 <= n1 + n2`));;
refine (by (VALID ((BETA_TAC THEN (move ["m1"]) THEN (move ["m2"]) THEN (move ["n1"]) THEN (move ["n2"]) THEN (move ["le_mn1"]) THEN (move ["le_mn2"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN leq_trans)(ISPEC_THEN (`m1 + n2`) thm_tac))(new_rewrite [] [])) THEN ((USE_THM_THEN leq_add2l)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_add2r)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_add = end_section_proof();;
(start_section_proof [](`!m n. n <= n + m`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((((USE_THM_THEN addn0)(GSYM_THEN (new_rewrite [1] [(`n`)]))) THEN ((USE_THM_THEN leq_add2l)(new_rewrite [] [])) THEN ((USE_THM_THEN leq0n)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_addr = end_section_proof();;
(start_section_proof [](`!m n. n <= m + n`));;
refine (by (VALID (((((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_addr)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_addl = end_section_proof();;
(start_section_proof ["m";"n";"p"](`m < n ==> m < n + p`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN leq_trans)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(new_rewrite [] []))) THEN ((USE_THM_THEN leq_addr)(new_rewrite [] []))))));;
let ltn_addr = end_section_proof();;
(start_section_proof [](`!m n p. m < n ==> m < p + n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltn_addl = end_section_proof();;
(start_section_proof [](`!m n. (0 < m + n) <=> (0 < m) \/ (0 < n)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN lt0n)(new_rewrite [] []))) THEN ((USE_THM_THEN negb_and)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addn_eq0)(new_rewrite [] []))) THEN (done_tac)))));;
let addn_gt0 = end_section_proof();;
(start_section_proof ["m";"n"](`(0 < n - m) = (m < n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subn_gt0 = end_section_proof();;
(start_section_proof [](`!m n. (m - n = 0) = (m <= n)`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subn_eq0 = end_section_proof();;
(start_section_proof [](`!m n. m <= n <=> m - n = 0`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let leqE = end_section_proof();;
(start_section_proof [](`!m n p. (m - n <= p) = (m <= n + p)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])))));;
refine (by (VALID (((((USE_THM_THEN subn_eq0)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN subn_sub)(new_rewrite [] [])) THEN ((USE_THM_THEN leqE)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let leq_sub_add = end_section_proof();;
(start_section_proof [](`!m n. n - m <= n`));;
refine (by (VALID (((((USE_THM_THEN leq_sub_add)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_addl)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_subr = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> m + (n - m) = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let subnKC = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> (n - m) + m = n`));;
refine (by (VALID ((((USE_THM_THEN addnC)(new_rewrite [] [])) THEN (((USE_THM_THEN subnKC)MP_TAC) THEN (clear_assumption "subnKC") THEN (exact_tac)) THEN (done_tac)))));;
let subnK = end_section_proof();;
(start_section_proof [](`!m n p. p <= n ==> m + (n - p) = (m + n) - p`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"]) THEN (move ["le_pn"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN subnK)(fun fst_th ->(USE_THEN "le_pn")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (new_rewrite [2] []))) THEN ((USE_THM_THEN addnA)(new_rewrite [] [])) THEN ((USE_THM_THEN addnK)(new_rewrite [] []))) THEN (done_tac)))));;
let addn_subA = end_section_proof();;
(start_section_proof [](`!m n p. p <= n ==> m - (n - p) = (m + p) - n`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"]) THEN (move ["le_pn"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN subnK)(fun fst_th ->(USE_THEN "le_pn")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (new_rewrite [2] []))) THEN ((USE_THM_THEN subn_add2r)(new_rewrite [] []))) THEN (done_tac)))));;
let subn_subA = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> n - (n - m) = m`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN subn_subA)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(new_rewrite [] []))) THEN ((USE_THM_THEN addKn)(new_rewrite [] [])) THEN (done_tac)))));;
let subKn = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> SUC n - m = SUC (n - m)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID ((((USE_THM_THEN add1n)(GSYM_THEN (new_rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN addn_subA)(ISPEC_THEN (`1`) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] []))))))));;
refine (by (VALID ((((USE_THM_THEN add1n)(new_rewrite [] [])) THEN (done_tac)))));;
let leq_subS = end_section_proof();;
(start_section_proof [](`!m n. m < n ==> n - m = SUC (n - SUC m)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["lt_mn"])) THEN (((USE_THM_THEN leq_subS)(GSYM_THEN (new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN subSS)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let ltn_subS = end_section_proof();;
(start_section_proof [](`!p m n. m <= n ==> m - p <= n - p`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"]) THEN (move ["le_mn"])))));;
refine (by (VALID (((((USE_THM_THEN leq_sub_add)(new_rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN leq_trans)(fun fst_th ->(USE_THEN "le_mn")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN ((USE_THM_THEN leq_sub_add)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_sub2r = end_section_proof();;
(start_section_proof [](`!p m n. m <= n ==> p - n <= p - m`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN leq_add2r)(ISPEC_THEN (`p - m`) thm_tac))(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN leq_sub_add)(new_rewrite [] []))))));;
refine (by (VALID (((((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN (((USE_THM_THEN leq_sub_add)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_sub2l = end_section_proof();;
(start_section_proof [](`!m1 m2 n1 n2. m1 <= m2 ==> n2 <= n1 ==> m1 - n1 <= m2 - n2`));;
refine (by (VALID ((BETA_TAC THEN (move ["m1"]) THEN (move ["m2"]) THEN (move ["n1"]) THEN (move ["n2"])))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN leq_sub2r)(ISPEC_THEN (mk_var("n1",mk_type("num",[]))) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (move ["le_m12"])) THEN ((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN leq_sub2l)(ISPEC_THEN (mk_var("m2",mk_type("num",[]))) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (exact_tac))))));;
let leq_sub2 = end_section_proof();;
(start_section_proof [](`!p m n. p < n ==> m < n ==> m - p < n - p`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN ltn_subS)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(new_rewrite [] []))) THEN (repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN ((USE_THM_THEN leqSS)(new_rewrite [] [])))))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN leq_sub2r)(ISPEC_THEN (`SUC p`) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((USE_THM_THEN subSS)(new_rewrite [] [])) THEN (done_tac)))));;
let ltn_sub2r = end_section_proof();;
(start_section_proof [](`!p m n. m < p ==> m < n ==> p - n < p - m`));;
refine (by (VALID ((BETA_TAC THEN (move ["p"]) THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN ltn_subS)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(new_rewrite [] []))) THEN (repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN ((USE_THM_THEN leqSS)(new_rewrite [] [])))))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN leq_sub2l)(ISPEC_THEN (mk_var("p",mk_type("num",[]))) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let ltn_sub2l = end_section_proof();;
(start_section_proof [](`!m n p. (m + n < p) = (n < p - m)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(new_rewrite [] []))) THEN ((USE_THM_THEN leq_sub_add)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_add_sub = end_section_proof();;
let maxn = new_definition `maxn m n = if m < n then n else m`;;
let minn = new_definition `minn m n = if m < n then m else n`;;
(start_section_proof [](`!n. maxn 0 n = n`));;
refine (by (VALID ((((USE_THM_THEN maxn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let max0n = end_section_proof();;
(start_section_proof [](`!n. maxn n 0 = n`));;
refine (by (VALID ((((USE_THM_THEN maxn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let maxn0 = end_section_proof();;
(start_section_proof [](`!m n. maxn m n = maxn n m`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN maxn)(new_rewrite [] []))) THEN (arith_tac) THEN (done_tac)))));;
let maxnC = end_section_proof();;
(start_section_proof [](`!m n. n <= m ==> maxn m n = m`));;
refine (by (VALID ((((USE_THM_THEN maxn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let maxnl = end_section_proof();;
(start_section_proof [](`!m n. m <= n ==> maxn m n = n`));;
refine (by (VALID ((((USE_THM_THEN maxn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let maxnr = end_section_proof();;
(start_section_proof [](`!m n. m + (n - m) = maxn m n`));;
refine (by (VALID ((((USE_THM_THEN maxn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let add_sub_maxn = end_section_proof();;
(start_section_proof [](`!m n p. maxn (maxn m n) p = maxn (maxn m p) n`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN add_sub_maxn)(GSYM_THEN (new_rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN subn_sub)(GSYM_THEN (new_rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN add_sub_maxn)(new_rewrite [] []))) THEN ((USE_THM_THEN maxnC)(new_rewrite [] []))) THEN (done_tac)))));;
let maxnAC = end_section_proof();;
(start_section_proof [](`!m n p. maxn m (maxn n p) = maxn (maxn m n) p`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN maxnC)(new_rewrite [] [(`maxn m _1`)]))) THEN ((USE_THM_THEN maxnAC)(new_rewrite [] []))) THEN (done_tac)))));;
let maxnA = end_section_proof();;
(start_section_proof [](`!m n p. maxn m (maxn n p) = maxn n (maxn m p)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN maxnA)(new_rewrite [] []))) THEN ((USE_THM_THEN maxnC)(new_rewrite [] [(`maxn m _1`)]))) THEN (done_tac)))));;
let maxnCA = end_section_proof();;
(start_section_proof [](`!m n. (maxn m n = n) = (m <= n)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((((USE_THM_THEN maxnC)(new_rewrite [] [])) THEN ((USE_THM_THEN addn0)(GSYM_THEN (new_rewrite [2] [(`n`)]))) THEN ((USE_THM_THEN add_sub_maxn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN eqn_addl)(new_rewrite [] [])) THEN ((USE_THM_THEN leqE)(new_rewrite [] []))) THEN (done_tac)))));;
let eqn_maxr = end_section_proof();;
(start_section_proof [](`!m n. (maxn m n = m) = (n <= m)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID (((((USE_THM_THEN addn0)(GSYM_THEN (new_rewrite [2] [(`m`)]))) THEN ((USE_THM_THEN add_sub_maxn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN eqn_addl)(new_rewrite [] [])) THEN ((USE_THM_THEN leqE)(new_rewrite [] []))) THEN (done_tac)))));;
let eqn_maxl = end_section_proof();;
(start_section_proof [](`!n. maxn n n = n`));;
refine (by (VALID ((BETA_TAC THEN (move ["n"])))));;
refine (by (VALID (((((USE_THM_THEN maxnl)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let maxnn = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m <= maxn n1 n2) <=> (m <= n1) \/ (m <= n2)`));;
refine (by (VALID ((wlog_tac (move ["le_n21"])[(mk_var("n1",mk_type("num",[]))); (mk_var("n2",mk_type("num",[])))](`n2 <= n1`)))));;
refine (by (VALID ((((THENL_LAST) (((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leq_total)(ISPEC_THEN (mk_var("n2",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n1",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THEN (move ["le_n12"])) (((USE_THM_THEN maxnC)(new_rewrite [] [])) THEN ((USE_THM_THEN orbC)(new_rewrite [] [])))) THEN ((USE_THEN "le_n21")(new_rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID ((BETA_TAC THEN (move ["le_n21"])))));;
refine (by (VALID (((((USE_THM_THEN maxn)(new_rewrite [] [])) THEN ((USE_THM_THEN ltnNge)(new_rewrite [] [])) THEN ((USE_THEN "le_n21")(new_rewrite [] [])) THEN (simp_tac)) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`m <= n1`) thm_tac))MP_TAC) THEN case THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN contra)MP_TAC) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac)) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN leq_trans)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN ((fun thm_tac -> DISCH_THEN (ISPEC_THEN (mk_var("n1",mk_type("num",[]))) thm_tac))MP_TAC)) THEN (done_tac)))));;
let leq_maxr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(maxn n1 n2 <= m) <=> (n1 <= m) /\ (n2 <= m)`));;
refine (by (VALID (((((USE_THM_THEN leqNgt)(new_rewrite [] [])) THEN ((USE_THM_THEN ltE)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_maxr)(new_rewrite [] [])) THEN ((USE_THM_THEN negb_or)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN leqNgt)(GSYM_THEN (new_rewrite [] []))))) THEN (done_tac)))));;
let leq_maxl = end_section_proof();;
(start_section_proof [](`!m1 m2 n. (maxn m1 m2) + n = maxn (m1 + n) (m2 + n)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m1"]) THEN (move ["m2"]) THEN (move ["n"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN add_sub_maxn)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN subn_add2r)(new_rewrite [] [])) THEN ((USE_THM_THEN addnAC)(new_rewrite [] []))) THEN (done_tac)))));;
let addn_maxl = end_section_proof();;
(start_section_proof [](`!m n1 n2. m + maxn n1 n2 = maxn (m + n1) (m + n2)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n1"]) THEN (move ["n2"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN addnC)(new_rewrite [] [(`m + _1`)]))) THEN ((USE_THM_THEN addn_maxl)(new_rewrite [] []))) THEN (done_tac)))));;
let addn_maxr = end_section_proof();;
(start_section_proof ["n"](`minn 0 n = 0`));;
refine (by (VALID ((((USE_THM_THEN minn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let min0n = end_section_proof();;
(start_section_proof ["n"](`minn n 0 = 0`));;
refine (by (VALID ((((USE_THM_THEN minn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let minn0 = end_section_proof();;
(start_section_proof ["m";"n"](`minn m n = minn n m`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN minn)(new_rewrite [] []))) THEN (arith_tac) THEN (done_tac)))));;
let minnC = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> minn m n = n`));;
refine (by (VALID ((((USE_THM_THEN minn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let minnr = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> minn m n = m`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN minnr)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((USE_THM_THEN minnC)(new_rewrite [] [])) THEN (done_tac)))));;
let minnl = end_section_proof();;
(start_section_proof ["m";"n"](`minn m n + maxn m n = m + n`));;
refine (by (VALID (((((USE_THM_THEN minn)(new_rewrite [] [])) THEN ((USE_THM_THEN maxn)(new_rewrite [] []))) THEN (arith_tac) THEN (done_tac)))));;
let addn_min_max = end_section_proof();;
(start_section_proof ["m";"n"](`minn m n = (m + n) - maxn m n`));;
refine (by (VALID (((((USE_THM_THEN addn_min_max)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addnK)(new_rewrite [] []))) THEN (done_tac)))));;
let minn_to_maxn = end_section_proof();;
(start_section_proof ["m";"n"](`m - (m - n) = minn m n`));;
refine (by (VALID (((((USE_THM_THEN minnC)(new_rewrite [] [])) THEN ((USE_THM_THEN minn_to_maxn)(new_rewrite [] [])) THEN ((USE_THM_THEN add_sub_maxn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN subn_add2l)(new_rewrite [] []))) THEN (done_tac)))));;
let sub_sub_minn = end_section_proof();;
(start_section_proof [](`!m1 m2 m3. minn m1 (minn m2 m3) = minn m2 (minn m1 m3)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m1"]) THEN (move ["m2"]) THEN (move ["m3"])) THEN repeat_tactic 1 9 (((USE_THM_THEN minn_to_maxn)(new_rewrite [] [(`minn _1 (minn _2 _3)`)])))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN subn_add2r)(ISPEC_THEN (`maxn m2 m3`) thm_tac))(GSYM_THEN (new_rewrite [] []))) THEN ((fun thm_tac -> (USE_THM_THEN subn_add2r)(ISPEC_THEN (`maxn m1 m3`) thm_tac))(GSYM_THEN (new_rewrite [] [(`(m2 + _1) - _2`)]))) THEN repeat_tactic 1 9 (((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] []))))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN addn_maxl)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN addn_min_max)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN addn_maxr)(new_rewrite [] []))) THEN ((USE_THM_THEN addnCA)(new_rewrite [] [])) THEN ((USE_THM_THEN maxnAC)(new_rewrite [] [])) THEN ((USE_THM_THEN addnC)(new_rewrite [] [(`m2 + m1`)]))) THEN (done_tac)))));;
let minnCA = end_section_proof();;
(start_section_proof [](`!m1 m2 m3. minn m1 (minn m2 m3) = minn (minn m1 m2) m3`));;
refine (by (VALID ((BETA_TAC THEN (move ["m1"]) THEN (move ["m2"]) THEN (move ["m3"])))));;
refine (by (VALID (((((USE_THM_THEN minnC)(new_rewrite [] [(`minn m2 _1`)])) THEN ((USE_THM_THEN minnCA)(new_rewrite [] [])) THEN ((USE_THM_THEN minnC)(new_rewrite [] []))) THEN (done_tac)))));;
let minnA = end_section_proof();;
(start_section_proof ["m1";"m2";"m3"](`minn (minn m1 m2) m3 = minn (minn m1 m3) m2`));;
refine (by (VALID (((((USE_THM_THEN minnC)(new_rewrite [] [])) THEN ((USE_THM_THEN minnCA)(new_rewrite [] [])) THEN ((USE_THM_THEN minnA)(new_rewrite [] []))) THEN (done_tac)))));;
let minnAC = end_section_proof();;
(start_section_proof ["m";"n"](`(minn m n = n) = (n <= m)`));;
refine (by (VALID (((fun thm_tac -> (USE_THM_THEN eqn_addr)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] []))))));;
refine (by (VALID (((((USE_THM_THEN addn_min_max)(GSYM_THEN (new_rewrite [] [(`n + m`)]))) THEN ((USE_THM_THEN minnC)(new_rewrite [] [])) THEN ((USE_THM_THEN eqn_addl)(new_rewrite [] [])) THEN ((USE_THM_THEN eq_sym)(new_rewrite [] [(`m = _1`)])) THEN ((USE_THM_THEN maxnC)(new_rewrite [] [])) THEN ((USE_THM_THEN eqn_maxl)(new_rewrite [] []))) THEN (done_tac)))));;
let eqn_minr = end_section_proof();;
(start_section_proof ["m";"n"](`(minn m n = m) = (m <= n)`));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN eqn_addr)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN eq_sym)(new_rewrite [] [(`_1 = m + n`)])) THEN ((USE_THM_THEN addn_min_max)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN eqn_addl)(new_rewrite [] [])) THEN ((USE_THM_THEN eqn_maxr)(new_rewrite [] []))) THEN (done_tac)))));;
let eqn_minl = end_section_proof();;
(start_section_proof ["n"](`minn n n = n`));;
refine (by (VALID (((((USE_THM_THEN minnr)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let minnn = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m <= minn n1 n2) <=> (m <= n1) /\ (m <= n2)`));;
refine (by (VALID ((((USE_THM_THEN minn)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let leq_minr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(minn n1 n2 <= m) <=> (n1 <= m) \/ (n2 <= m)`));;
refine (by (VALID (((((USE_THM_THEN leqNgt)(new_rewrite [] [])) THEN ((USE_THM_THEN ltE)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_minr)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN negb_and)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN leqNgt)(GSYM_THEN (new_rewrite [] []))))) THEN (done_tac)))));;
let leq_minl = end_section_proof();;
(start_section_proof [](`!m1 m2 n. (minn m1 m2) + n = minn (m1 + n) (m2 + n)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m1"]) THEN (move ["m2"]) THEN (move ["n"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN minn_to_maxn)(new_rewrite [] []))) THEN ((USE_THM_THEN addn_maxl)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addnA)(new_rewrite [] [])) THEN ((USE_THM_THEN subn_add2r)(new_rewrite [] [])) THEN ((USE_THM_THEN addnAC)(new_rewrite [] [])))))));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN addnC)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] [(`_1 + n`)])))) THEN ((USE_THM_THEN addn_subA)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN addn_min_max)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN leq_addl)(new_rewrite [] []))) THEN (done_tac)))));;
let addn_minl = end_section_proof();;
(start_section_proof [](`!m n1 n2. m + minn n1 n2 = minn (m + n1) (m + n2)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n1"]) THEN (move ["n2"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN addnC)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(new_rewrite [] [(`m + _1`)]))) THEN ((USE_THM_THEN addn_minl)(new_rewrite [] []))) THEN (done_tac)))));;
let addn_minr = end_section_proof();;
(start_section_proof ["m";"n"](`minn (maxn m n) m = m`));;
refine (by (VALID (((((USE_THM_THEN minnr)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leq_maxr)(new_rewrite [] [])) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let maxnK = end_section_proof();;
(start_section_proof ["m";"n"](`minn n (maxn m n) = n`));;
refine (by (VALID (((((USE_THM_THEN minnC)(new_rewrite [] [])) THEN ((USE_THM_THEN maxnC)(new_rewrite [] [])) THEN ((USE_THM_THEN maxnK)(new_rewrite [] []))) THEN (done_tac)))));;
let maxKn = end_section_proof();;
(start_section_proof ["m";"n"](`maxn (minn m n) m = m`));;
refine (by (VALID (((((USE_THM_THEN maxnr)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leq_minl)(new_rewrite [] [])) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let minnK = end_section_proof();;
(start_section_proof ["m";"n"](`maxn n (minn m n) = n`));;
refine (by (VALID (((((USE_THM_THEN minnC)(new_rewrite [] [])) THEN ((USE_THM_THEN maxnC)(new_rewrite [] [])) THEN ((USE_THM_THEN minnK)(new_rewrite [] []))) THEN (done_tac)))));;
let minKn = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`maxn (minn m1 m2) n = minn (maxn m1 n) (maxn m2 n)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN maxn)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN minn)(new_rewrite [] [])))) THEN (arith_tac)))));;
let maxn_minl = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`maxn m (minn n1 n2) = minn (maxn m n1) (maxn m n2)`));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN maxnC)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(new_rewrite [] [(`maxn m _1`)]))) THEN ((USE_THM_THEN maxn_minl)(new_rewrite [] []))) THEN (done_tac)))));;
let maxn_minr = end_section_proof();;
(start_section_proof [](`!m1 m2 n. minn (maxn m1 m2) n = maxn (minn m1 n) (minn m2 n)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m1"]) THEN (move ["m2"]) THEN (move ["n"])) THEN (((USE_THM_THEN maxn_minr)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN maxn_minl)(new_rewrite [] []))) THEN ((USE_THM_THEN minnA)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN maxnn)(new_rewrite [] [])) THEN ((USE_THM_THEN maxnC)(new_rewrite [] [(`maxn _1 n`)])) THEN repeat_tactic 1 9 (((USE_THM_THEN maxnK)(new_rewrite [] [])))) THEN (done_tac)))));;
let minn_maxl = end_section_proof();;
(start_section_proof [](`!m n1 n2. minn m (maxn n1 n2) = maxn (minn m n1) (minn m n2)`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n1"]) THEN (move ["n2"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN minnC)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(new_rewrite [] [(`minn m _1`)]))) THEN ((USE_THM_THEN minn_maxl)(new_rewrite [] []))) THEN (done_tac)))));;
let minn_maxr = end_section_proof();;
(begin_section "Iteration");;
(add_section_var (mk_var ("m", (`:num`))); add_section_var (mk_var ("n", (`:num`))));;
(add_section_var (mk_var ("x", (`:A`))); add_section_var (mk_var ("y", (`:A`))));;
let iter = define `iter (SUC n) f (x:A) = f (iter n f x) /\ iter 0 f x = x`;;
let iteri = define `iteri (SUC n) f (x:A) = f n (iteri n f x) /\ iteri 0 f x = x`;;
(start_section_proof ["n";"f";"x"](`iter (SUC n) f (x : A) = iter n f (f x)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim) THEN (repeat_tactic 1 9 (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (move ["n"]) THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let iterSr = end_section_proof();;
(start_section_proof ["n";"f";"x"](`iter (SUC n) f (x:A) = f (iter n f x)`));;
refine (by (VALID ((((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let iterS = end_section_proof();;
(start_section_proof ["n";"m";"f";"x"](`iter (n + m) f (x:A) = iter n f (iter m f x)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim) THEN ((repeat_tactic 1 9 (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN addSn)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (move ["n"]) THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN iterS)(new_rewrite [] [])) THEN (done_tac)))));;
let iter_add = end_section_proof();;
(start_section_proof ["n";"f";"x"](`iteri (SUC n) f x = f n (iteri n f (x:A))`));;
refine (by (VALID ((((USE_THM_THEN iteri)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let iteriS = end_section_proof();;
let iteriS = finalize_theorem iteriS;;
let iter_add = finalize_theorem iter_add;;
let iterS = finalize_theorem iterS;;
let iterSr = finalize_theorem iterSr;;
(end_section "Iteration");;
(start_section_proof ["n"](`0 * n = 0`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let mul0n = end_section_proof();;
(start_section_proof ["n"](`n * 0 = 0`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let muln0 = end_section_proof();;
(start_section_proof ["n"](`1 * n = n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let mul1n = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m * n = n + m * n`));;
refine (by (VALID ((arith_tac))));;
let mulSn = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m * n = m * n + n`));;
refine (by (VALID ((arith_tac))));;
let mulSnr = end_section_proof();;
(start_section_proof ["m";"n"](`m * SUC n = m + m * n`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim) THEN ((repeat_tactic 0 10 (((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN addn0)(new_rewrite [] []))) THEN ((TRY done_tac))) THEN (move ["m"]))))));;
refine (by (VALID ((((repeat_tactic 1 9 (((USE_THM_THEN mulSn)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN addSn)(new_rewrite [] []))) THEN ((USE_THM_THEN addnCA)(new_rewrite [] []))) THEN (DISCH_THEN(new_rewrite [] []))) THEN (done_tac)))));;
let mulnS = end_section_proof();;
(start_section_proof ["m";"n"](`m * SUC n = m * n + m`));;
refine (by (VALID (((((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((USE_THM_THEN mulnS)(new_rewrite [] []))) THEN (done_tac)))));;
let mulnSr = end_section_proof();;
(start_section_proof ["n"](`n * 1 = n`));;
refine (by (VALID (((((USE_THM_THEN (ARITH_RULE `1 = SUC 0`))(new_rewrite [] [])) THEN ((USE_THM_THEN mulnSr)(new_rewrite [] [])) THEN ((USE_THM_THEN muln0)(new_rewrite [] [])) THEN ((USE_THM_THEN add0n)(new_rewrite [] []))) THEN (done_tac)))));;
let muln1 = end_section_proof();;
(start_section_proof [](`!m n. m * n = n * m`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; (move ["m"])]) THEN ((repeat_tactic 0 10 (((USE_THM_THEN muln0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN mulnS)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN mulSn)(new_rewrite [] []))) THEN (DISCH_THEN(new_rewrite [] []))) THEN (done_tac)))));;
let mulnC = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`(m1 + m2) * n = m1 * n + m2 * n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("m1",mk_type("num",[])))) THEN (clear_assumption "m1") THEN elim THENL [ALL_TAC; ((move ["m1"]) THEN (move ["IHm"]))]) ((((USE_THM_THEN mul0n)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN add0n)(new_rewrite [] [])))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN mulSn)(new_rewrite [] [])) THEN ((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THEN "IHm")(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN mulSn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addSn)(new_rewrite [] []))) THEN (done_tac)))));;
let muln_addl = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * (n1 + n2) = m * n1 + m * n2`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN mulnC)(new_rewrite [] [(`m * _1`)]))) THEN ((USE_THM_THEN muln_addl)(new_rewrite [] []))) THEN (done_tac)))));;
let muln_addr = end_section_proof();;
(start_section_proof [](`!m n p. (m - n) * p = m * p - n * p`));;
refine (by (VALID (((THENL_FIRST) (BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (case THENL [ALL_TAC; (move ["n'"])])) ((repeat_tactic 1 9 (((USE_THM_THEN muln0)(new_rewrite [] []))) THEN ((USE_THM_THEN subn0)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["IHm"]))] THEN (case THENL [ALL_TAC; (move ["n"])])) THEN (repeat_tactic 0 10 (((fun thm_tac ->(USE_THM_THEN mul0n)(fun tmp_th1 -> (fun thm_tac ->(USE_THM_THEN sub0n)(fun tmp_th1 -> (USE_THM_THEN subn0)(fun tmp_th2 -> thm_tac (CONJ tmp_th1 tmp_th2))))(fun tmp_th2 -> thm_tac (CONJ tmp_th1 tmp_th2))))(new_rewrite [] []))) THEN ((TRY done_tac)) THEN repeat_tactic 1 9 (((USE_THM_THEN mulSn)(new_rewrite [] []))) THEN ((USE_THM_THEN subn_add2l)(new_rewrite [] [])))))));;
refine (by (VALID (((((USE_THEN "IHm")(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN subSS)(new_rewrite [] []))) THEN (done_tac)))));;
let muln_subl = end_section_proof();;
(start_section_proof [](`!m n p. m * (n - p) = m * n - m * p`));;
refine (by (VALID (((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN mulnC)(new_rewrite [] [(`m * _1`)]))) THEN ((USE_THM_THEN muln_subl)(new_rewrite [] []))) THEN (done_tac)))));;
let muln_subr = end_section_proof();;
(start_section_proof [](`!m n p. m * (n * p) = (m * n) * p`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"]) THEN (move ["p"])))));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; (move ["m"])]) (repeat_tactic 1 9 (((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((repeat_tactic 1 9 (((USE_THM_THEN mulSn)(new_rewrite [] []))) THEN ((USE_THM_THEN muln_addl)(new_rewrite [] []))) THEN (DISCH_THEN(new_rewrite [] []))) THEN (done_tac)))));;
let mulnA = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * (n1 * n2) = n1 * (m * n2)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN mulnA)(new_rewrite [] []))) THEN ((fun thm_tac -> (USE_THM_THEN mulnC)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(new_rewrite [] [(`m * _1`)]))) THEN (done_tac)))));;
let mulnCA = end_section_proof();;
(start_section_proof ["m";"n";"p"](`(n * m) * p = (n * p) * m`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN mulnA)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN mulnC)(new_rewrite [] [(`p * _1`)]))) THEN (done_tac)))));;
let mulnAC = end_section_proof();;
(start_section_proof ["m";"n"](`(m * n = 0) <=> (m = 0) \/ (n = 0)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (move ["m"])] THEN (case THENL [ALL_TAC; (move ["n"])])) THEN (repeat_tactic 0 10 (((fun thm_tac ->(USE_THM_THEN muln0)(fun tmp_th1 -> (USE_THM_THEN mul0n)(fun tmp_th2 -> thm_tac (CONJ tmp_th1 tmp_th2))))(new_rewrite [] []))) THEN ((TRY done_tac))) THEN (arith_tac)))));;
let muln_eq0 = end_section_proof();;
(start_section_proof ["m";"n"](`(m * n = 1) <=> (m = 1) /\ (n = 1)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (case THENL [ALL_TAC; (move ["m"])])] THEN (case THENL [ALL_TAC; (case THENL [ALL_TAC; (move ["n"])])])) THEN (arith_tac) THEN (done_tac)))));;
let eqn_mul1 = end_section_proof();;
(start_section_proof ["m";"n"](`(0 < m * n) <=> (0 < m) /\ (0 < n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (move ["m"])] THEN (case THENL [ALL_TAC; (move ["n"])])) THEN (arith_tac) THEN (done_tac)))));;
let muln_gt0 = end_section_proof();;
(start_section_proof ["m";"n"](`0 < n ==> m <= n * m`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN prednK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN (((USE_THM_THEN mulSn)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_addr)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_pmull = end_section_proof();;
(start_section_proof ["m";"n"](`0 < n ==> m <= m * n`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN leq_pmull)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((USE_THM_THEN mulnC)(new_rewrite [] [])) THEN (done_tac)))));;
let leq_pmulr = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m * n1 <= m * n2) <=> (m = 0) \/ (n1 <= n2)`));;
refine (by (VALID (((((USE_THM_THEN leqE)(new_rewrite [] [])) THEN ((USE_THM_THEN muln_subr)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN muln_eq0)(new_rewrite [] [])) THEN ((USE_THM_THEN leqE)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let leq_mul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(n1 * m <= n2 * m) <=> (m = 0) \/ (n1 <= n2)`));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN mulnC)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] [(`_1 * m`)])))) THEN ((USE_THM_THEN leq_mul2l)(new_rewrite [] []))) THEN (done_tac)))));;
let leq_mul2r = end_section_proof();;
(start_section_proof ["m1";"m2";"n1";"n2"](`m1 <= n1 ==> m2 <= n2 ==> m1 * m2 <= n1 * n2`));;
refine (by (VALID ((BETA_TAC THEN (move ["le_mn1"]) THEN (move ["le_mn2"])))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leq_trans)(ISPEC_THEN (`m1 * n2`) thm_tac))(ISPEC_THEN (`m1 * m2`) thm_tac))(ISPEC_THEN (`n1 * n2`) thm_tac))MP_TAC) THEN BETA_TAC))));;
refine (by (VALID (((THENL_FIRST) (ANTS_TAC) ((((USE_THM_THEN leq_mul2l)(new_rewrite [] [])) THEN ((USE_THEN "le_mn2")(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((DISCH_THEN apply_tac))));;
refine (by (VALID (((((USE_THM_THEN leq_mul2r)(new_rewrite [] [])) THEN ((USE_THEN "le_mn1")(new_rewrite [] []))) THEN (done_tac)))));;
let leq_mul = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m * n1 = m * n2) <=> (m = 0) \/ (n1 = n2)`));;
refine (by (VALID (((((USE_THM_THEN eqn_leq)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN leq_mul2l)(new_rewrite [] []))) THEN ((USE_THM_THEN orb_andr)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN eqn_leq)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let eqn_mul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(n1 * m = n2 * m) <=> (m = 0) \/ (n1 = n2)`));;
refine (by (VALID (((((USE_THM_THEN eqn_leq)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN leq_mul2r)(new_rewrite [] []))) THEN ((USE_THM_THEN orb_andr)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN eqn_leq)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let eqn_mul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((m * n1 <= m * n2) <=> (n1 <= n2))`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN prednK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN leq_mul2l)(new_rewrite [] [])) THEN (((USE_THM_THEN NOT_SUC)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN orFb)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let leq_pmul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((n1 * m <= n2 * m) <=> (n1 <= n2))`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN prednK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN leq_mul2r)(new_rewrite [] [])) THEN (((USE_THM_THEN NOT_SUC)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN orFb)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let leq_pmul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((m * n1 = m * n2) <=> (n1 = n2))`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN prednK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN eqn_mul2l)(new_rewrite [] [])) THEN (((USE_THM_THEN NOT_SUC)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN orFb)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let eqn_pmul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((n1 * m = n2 * m) <=> (n1 = n2))`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN prednK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN eqn_mul2r)(new_rewrite [] [])) THEN (((USE_THM_THEN NOT_SUC)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN orFb)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let eqn_pmul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(m * n1 < m * n2) <=> (0 < m) /\ (n1 < n2)`));;
refine (by (VALID (((((USE_THM_THEN lt0n)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(new_rewrite [] []))) THEN ((USE_THM_THEN leq_mul2l)(new_rewrite [] [])) THEN ((USE_THM_THEN negb_or)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_mul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`(n1 * m < n2 * m) <=> (0 < m) /\ (n1 < n2)`));;
refine (by (VALID (((((USE_THM_THEN lt0n)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(new_rewrite [] []))) THEN ((USE_THM_THEN leq_mul2r)(new_rewrite [] [])) THEN ((USE_THM_THEN negb_or)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_mul2r = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> ((m * n1 < m * n2) <=> (n1 < n2))`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN prednK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN (((USE_THM_THEN ltn_mul2l)(new_rewrite [] [])) THEN ((USE_THM_THEN LT_0)(new_rewrite [] [])) THEN ((USE_THM_THEN andTb)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_pmul2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> (n1 * m < n2 * m <=> n1 < n2)`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN prednK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN (((USE_THM_THEN ltn_mul2r)(new_rewrite [] [])) THEN ((USE_THM_THEN LT_0)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_pmul2r = end_section_proof();;
(start_section_proof ["m";"n"](`1 < n ==> 0 < m ==> m < n * m`));;
refine (by (VALID (((BETA_TAC THEN (move ["lt1n"]) THEN (move ["m_gt0"])) THEN (((USE_THM_THEN mul1n)(GSYM_THEN (new_rewrite [1] [(`m`)]))) THEN ((USE_THM_THEN ltn_pmul2r)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_Pmull = end_section_proof();;
(start_section_proof ["m";"n"](`1 < n ==> 0 < m ==> m < m * n`));;
refine (by (VALID (((BETA_TAC THEN (move ["lt1n"]) THEN (move ["m_gt0"])) THEN (((USE_THM_THEN mulnC)(new_rewrite [] [])) THEN ((USE_THM_THEN ltn_Pmull)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_Pmulr = end_section_proof();;
(start_section_proof ["m1";"m2";"n1";"n2"](`m1 < n1 ==> m2 < n2 ==> m1 * m2 < n1 * n2`));;
refine (by (VALID ((BETA_TAC THEN (move ["lt_mn1"]) THEN (move ["lt_mn2"])))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leq_ltn_trans)(ISPEC_THEN (`m1 * n2`) thm_tac))(ISPEC_THEN (`m1 * m2`) thm_tac))(ISPEC_THEN (`n1 * n2`) thm_tac))MP_TAC) THEN BETA_TAC))));;
refine (by (VALID ((ANTS_TAC))));;
refine (by (VALID (((((USE_THM_THEN leq_mul2l)(new_rewrite [] [])) THEN ((USE_THM_THEN orbC)(new_rewrite [] [])) THEN ((USE_THM_THEN ltnW)(new_rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((DISCH_THEN apply_tac))));;
refine (by (VALID ((((USE_THM_THEN ltn_pmul2r)(new_rewrite [] [])) THEN ((TRY done_tac))))));;
refine (by (VALID (((((USE_THEN "lt_mn2")MP_TAC) THEN (clear_assumption "lt_mn2") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)))));;
let ltn_mul = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * maxn n1 n2 = maxn (m * n1) (m * n2)`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (move ["n"])]) ((repeat_tactic 1 9 (((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN ((USE_THM_THEN maxnn)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN maxn)(new_rewrite [] []))) THEN ((USE_THM_THEN fun_if)(new_rewrite [] [(`SUC n * _1`)])) THEN ((USE_THM_THEN ltn_pmul2l)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN LT_0)(new_rewrite [] []))) THEN (done_tac)))));;
let maxn_mulr = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`maxn m1 m2 * n = maxn (m1 * n) (m2 * n)`));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN mulnC)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] [(`_1 * n`)])))) THEN ((USE_THM_THEN maxn_mulr)(new_rewrite [] []))) THEN (done_tac)))));;
let maxn_mull = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m * minn n1 n2 = minn (m * n1) (m * n2)`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (move ["n"])]) ((repeat_tactic 1 9 (((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN ((USE_THM_THEN minn)(new_rewrite [] [])) THEN ((USE_THM_THEN if_same)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN minn)(new_rewrite [] []))) THEN ((USE_THM_THEN fun_if)(new_rewrite [] [(`SUC n * _1`)])) THEN ((USE_THM_THEN ltn_pmul2l)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN LT_0)(new_rewrite [] []))))));;
let minn_mulr = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`minn m1 m2 * n = minn (m1 * n) (m2 * n)`));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN mulnC)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] [(`_1 * n`)])))) THEN ((USE_THM_THEN minn_mulr)(new_rewrite [] []))) THEN (done_tac)))));;
let minn_mull = end_section_proof();;
parse_as_infix("^", (24, "left"));;
override_interface("^", `EXP`);;
(start_section_proof ["m"](`m ^ 0 = 1`));;
refine (by (VALID ((((USE_THM_THEN EXP)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let expn0 = end_section_proof();;
(start_section_proof ["m"](`m ^ 1 = m`));;
refine (by (VALID ((((USE_THM_THEN EXP_1)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let expn1 = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ SUC n = m * m ^ n`));;
refine (by (VALID ((((USE_THM_THEN EXP)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let expnS = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ SUC n = m ^ n * m`));;
refine (by (VALID (((((USE_THM_THEN mulnC)(new_rewrite [] [])) THEN ((USE_THM_THEN expnS)(new_rewrite [] []))) THEN (done_tac)))));;
let expnSr = end_section_proof();;
(start_section_proof ["n"](`0 < n ==> 0 ^ n = 0`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN case THENL [ALL_TAC; (move ["n"])]) (((USE_THM_THEN LT_REFL)(new_rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN EXP)(new_rewrite [] [])) THEN ((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN (done_tac)))));;
let exp0n = end_section_proof();;
(start_section_proof ["n"](`1 ^ n = 1`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim) THENL [((USE_THM_THEN expn0)(new_rewrite [] [])); (((USE_THM_THEN expnS)(new_rewrite [] [])) THEN ((USE_THM_THEN mul1n)(new_rewrite [] [])))] THEN (done_tac)))));;
let exp1n = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m ^ (n1 + n2) = m ^ n1 * m ^ n2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n1",mk_type("num",[])))) THEN (clear_assumption "n1") THEN elim THENL [ALL_TAC; ((move ["n1"]) THEN (move ["IHn"]))]) THEN (repeat_tactic 0 10 (((USE_THM_THEN expn0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN mul1n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN add0n)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN addSn)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN expnS)(new_rewrite [] []))))))));;
refine (by (VALID (((((USE_THEN "IHn")(new_rewrite [] [])) THEN ((USE_THM_THEN mulnA)(new_rewrite [] []))) THEN (done_tac)))));;
let expn_add = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`(m1 * m2) ^ n = m1 ^ n * m2 ^ n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) ((repeat_tactic 1 9 (((USE_THM_THEN expn0)(new_rewrite [] []))) THEN ((USE_THM_THEN muln1)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN expnS)(new_rewrite [] []))) THEN ((USE_THEN "IHn")(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN mulnA)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN mulnCA)(new_rewrite [] [(`m2 * _1`)]))) THEN (done_tac)))));;
let expn_mull = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`m ^ (n1 * n2) = (m ^ n1) ^ n2`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n1",mk_type("num",[])))) THEN (clear_assumption "n1") THEN elim THENL [ALL_TAC; ((move ["n1"]) THEN (move ["IHn"]))]) ((repeat_tactic 1 9 (((USE_THM_THEN expn0)(new_rewrite [] []))) THEN ((USE_THM_THEN mul0n)(new_rewrite [] [])) THEN ((USE_THM_THEN expn0)(new_rewrite [] [])) THEN ((USE_THM_THEN exp1n)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN mulSn)(new_rewrite [] [])) THEN ((USE_THM_THEN expn_add)(new_rewrite [] [])) THEN ((USE_THM_THEN expnS)(new_rewrite [] [])) THEN ((USE_THM_THEN expn_mull)(new_rewrite [] [])) THEN ((USE_THEN "IHn")(new_rewrite [] []))) THEN (done_tac)))));;
let expn_mulr = end_section_proof();;
(start_section_proof ["m";"n"](`(0 < m ^ n) <=> (0 < m) \/ (n = 0)`));;
refine (by (VALID (((THENL_FIRST) (((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (move ["m"])]) THEN ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))])) (((USE_THM_THEN expn0)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN expnS)(new_rewrite [] [])) THEN ((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN (arith_tac) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN expn0)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN expnS)(new_rewrite [] [])) THEN ((USE_THM_THEN mulSn)(new_rewrite [] [])) THEN ((USE_THM_THEN addn_gt0)(new_rewrite [] [])) THEN ((USE_THEN "IHn")(new_rewrite [] []))) THEN (arith_tac) THEN (done_tac)))));;
let expn_gt0 = end_section_proof();;
(start_section_proof ["m";"e"](`(m ^ e = 0) <=> (m = 0) /\ (0 < e)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN eqn0Ngt)(new_rewrite [] []))) THEN ((USE_THM_THEN expn_gt0)(new_rewrite [] [])) THEN ((USE_THM_THEN negb_or)(new_rewrite [] [])) THEN ((USE_THM_THEN lt0n)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let expn_eq0 = end_section_proof();;
(start_section_proof ["m";"n"](`1 < m ==> n < m ^ n`));;
refine (by (VALID (((THENL_FIRST) ((BETA_TAC THEN (move ["m_gt1"])) THEN ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; (move ["n"])])) (((USE_THM_THEN expn0)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN ltnW)(fun fst_th ->(USE_THEN "m_gt1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN (((USE_THM_THEN ONE)(new_rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] [])))) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN leq_pmul2l)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC)))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN ((USE_THM_THEN expnS)(new_rewrite [] []))) THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))))));;
refine (by (VALID (((((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] [])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN ltn_Pmull)(fun fst_th ->(USE_THEN "m_gt1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN (arith_tac) THEN (done_tac)))));;
let ltn_expl = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`1 < m ==> (m ^ n1 <= m ^ n2 <=> n1 <= n2)`));;
refine (by (VALID (((THENL_ROT (-1)) ((BETA_TAC THEN (move ["m_gt1"])) THEN ((disch_tm_tac [](mk_var("n2",mk_type("num",[])))) THEN (clear_assumption "n2") THEN (disch_tm_tac [](mk_var("n1",mk_type("num",[])))) THEN (clear_assumption "n1") THEN elim THENL [ALL_TAC; ((move ["n1"]) THEN (move ["IHn"]))]) THEN (BETA_TAC THEN (case THENL [ALL_TAC; (move ["q"])])) THEN (repeat_tactic 0 10 (((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN ((TRY done_tac))))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN expnS)(new_rewrite [] []))) THEN ((USE_THM_THEN leq_pmul2l)(new_rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN leqSS)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltE)(new_rewrite [] [])) THEN ((USE_THM_THEN ltnW)(new_rewrite [] [])) THEN ((USE_THM_THEN ONE)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN expn0)(new_rewrite [] [])) THEN ((USE_THM_THEN ONE)(new_rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN expn_gt0)(new_rewrite [] []))) THEN (((USE_THEN "m_gt1")MP_TAC) THEN (clear_assumption "m_gt1") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN leqNgt)(new_rewrite [] [])) THEN ((USE_THM_THEN expn0)(new_rewrite [] []))))));;
refine (by (VALID (((((USE_THEN "m_gt1")MP_TAC) THEN (clear_assumption "m_gt1") THEN BETA_TAC) THEN (((USE_THM_THEN ltE)(new_rewrite [] [])) THEN (move ["m_gt1"]))))));;
refine (by (VALID ((((USE_THM_THEN ltE)(new_rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN leq_trans)(fun fst_th ->(USE_THEN "m_gt1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN ltE)(GSYM_THEN (new_rewrite [] [])))) THEN repeat_tactic 0 10 (((USE_THM_THEN ltn0)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN expnS)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_pmulr)(new_rewrite [] [])) THEN ((USE_THM_THEN expn_gt0)(new_rewrite [] []))))));;
refine (by (VALID (((((USE_THEN "m_gt1")MP_TAC) THEN (clear_assumption "m_gt1") THEN BETA_TAC) THEN (arith_tac) THEN (done_tac)))));;
let leq_exp2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`1 < m ==> (m ^ n1 < m ^ n2 <=> n1 < n2)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m_gt1"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(new_rewrite [] []))) THEN ((USE_THM_THEN leq_exp2l)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_exp2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`1 < m ==> (m ^ n1 = m ^ n2 <=> n1 = n2)`));;
refine (by (VALID (((BETA_TAC THEN (move ["m_gt1"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN eqn_leq)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN leq_exp2l)(new_rewrite [] [])))) THEN (done_tac)))));;
let eqn_exp2l = end_section_proof();;
(start_section_proof ["m"](`1 < m ==> !e1 e2. m ^ e1 = m ^ e2 ==> e1 = e2`));;
refine (by (VALID (((BETA_TAC THEN (move ["m_gt1"]) THEN (move ["e1"]) THEN (move ["e2"])) THEN ((USE_THM_THEN eqn_exp2l)(new_rewrite [] [])) THEN (done_tac)))));;
let expnI = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> n1 <= n2 ==> m ^ n1 <= m ^ n2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (case THENL [ALL_TAC; (move ["m"])])]) THEN (repeat_tactic 0 10 (((USE_THM_THEN ltn0)(new_rewrite [] []))) THEN ((TRY done_tac))) THENL [(((USE_THM_THEN ONE)(GSYM_THEN (new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN exp1n)(new_rewrite [] []))) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))); (((USE_THM_THEN leq_exp2l)(new_rewrite [] [])) THEN ((TRY done_tac)))] THEN (arith_tac) THEN (done_tac)))));;
let leq_pexp2l = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`0 < m ==> m ^ n1 < m ^ n2 ==> n1 < n2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN case THENL [ALL_TAC; (case THENL [ALL_TAC; (move ["m"])])]) THEN (repeat_tactic 0 10 (((USE_THM_THEN ltn0)(new_rewrite [] []))) THEN ((TRY done_tac))) THENL [(((USE_THM_THEN ONE)(GSYM_THEN (new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN exp1n)(new_rewrite [] [])))); ((USE_THM_THEN ltn_exp2l)(new_rewrite [] []))] THEN (arith_tac) THEN (done_tac)))));;
let ltn_pexp2l = end_section_proof();;
(start_section_proof ["m";"n";"e"](`0 < e ==> (m ^ e < n ^ e <=> m < n)`));;
refine (by (VALID (((BETA_TAC THEN (move ["e_gt0"])) THEN ((split_tac) THENL [ALL_TAC; (move ["ltmn"])])))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(new_rewrite [] []))) THEN (((USE_THM_THEN contra)MP_TAC) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac) THEN (move ["lemn"]))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("e",mk_type("num",[])))) THEN (clear_assumption "e") THEN elim THENL [ALL_TAC; ((move ["e'"]) THEN (move ["IHe"]))]) THEN (repeat_tactic 0 10 (((USE_THM_THEN expn0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN repeat_tactic 1 9 (((USE_THM_THEN expnS)(new_rewrite [] []))) THEN ((USE_THM_THEN leq_mul)(new_rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((THENL_FIRST) (((USE_THEN "e_gt0")MP_TAC) THEN (clear_assumption "e_gt0") THEN (disch_tm_tac [](mk_var("e",mk_type("num",[])))) THEN (clear_assumption "e") THEN elim) (((USE_THM_THEN ltnn)(new_rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((THENL_FIRST) (BETA_TAC THEN (case THENL [ALL_TAC; ((move ["e"]) THEN (move ["IHe"]))])) ((((USE_THM_THEN ONE)(GSYM_THEN (new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN expn1)(new_rewrite [] [])))) THEN (done_tac))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN expnS)(new_rewrite [] []))) THEN ((USE_THM_THEN ltn_mul)(new_rewrite [] [])) THEN (simp_tac) THEN repeat_tactic 1 9 (((USE_THM_THEN expnS)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THEN "IHe")(new_rewrite [] [])) THEN ((TRY done_tac))) THEN (arith_tac)))));;
let ltn_exp2r = end_section_proof();;
(start_section_proof ["m";"n";"e"](`0 < e ==> (m ^ e <= n ^ e <=> m <= n)`));;
refine (by (VALID (((BETA_TAC THEN (move ["e_gt0"])) THEN (((USE_THM_THEN leqNgt)(new_rewrite [] [])) THEN ((USE_THM_THEN ltn_exp2r)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leqNgt)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let leq_exp2r = end_section_proof();;
(start_section_proof ["m";"n";"e"](`0 < e ==> (m ^ e = n ^ e <=> m = n)`));;
refine (by (VALID (((BETA_TAC THEN (move ["e_gt0"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN eqn_leq)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN leq_exp2r)(new_rewrite [] [])))) THEN (done_tac)))));;
let eqn_exp2r = end_section_proof();;
(start_section_proof ["e"](`0 < e ==> !m n. m ^ e = n ^ e ==> m = n`));;
refine (by (VALID (((BETA_TAC THEN (move ["e_gt0"]) THEN (move ["m"]) THEN (move ["n"])) THEN ((USE_THM_THEN eqn_exp2r)(new_rewrite [] [])) THEN (done_tac)))));;
let expIn = end_section_proof();;
(start_section_proof [](`FACT 0 = 1`));;
refine (by (VALID ((((USE_THM_THEN FACT)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let fact0 = end_section_proof();;
(start_section_proof ["n"](`FACT (SUC n)  = (SUC n) * FACT n`));;
refine (by (VALID ((((USE_THM_THEN FACT)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let factS = end_section_proof();;
(start_section_proof ["n"](`0 < FACT n`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; (move ["n"])]) THEN (((USE_THM_THEN FACT)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 0 10 (((USE_THM_THEN muln_gt0)(fun th -> ONCE_REWRITE_TAC[th])))) THEN (arith_tac) THEN (done_tac)))));;
let fact_gt0 = end_section_proof();;
let odd = new_basic_definition `odd = ODD`;;
(start_section_proof [](`odd 0 = F`));;
refine (by (VALID ((((USE_THM_THEN odd)(new_rewrite [] [])) THEN repeat_tactic 2 0 (((USE_THM_THEN ODD)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let odd0 = end_section_proof();;
(start_section_proof ["n"](`odd (SUC n) = ~odd n`));;
refine (by (VALID (((((USE_THM_THEN odd)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ODD)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let oddS = end_section_proof();;
(start_section_proof [](`odd 1 = T`));;
refine (by (VALID (((((USE_THM_THEN ONE)(new_rewrite [] [])) THEN ((USE_THM_THEN oddS)(new_rewrite [] [])) THEN ((USE_THM_THEN odd0)(new_rewrite [] []))) THEN (done_tac)))));;
let odd1 = end_section_proof();;
(start_section_proof ["m";"n"](`odd (m + n) = odd m + odd n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["IHn"]))]) ((((USE_THM_THEN add0n)(new_rewrite [] [])) THEN ((USE_THM_THEN odd0)(new_rewrite [] [])) THEN ((USE_THM_THEN addFb)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN addSn)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN oddS)(new_rewrite [] []))) THEN ((USE_THEN "IHn")(new_rewrite [] [])) THEN ((USE_THM_THEN addTb)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addbA)(new_rewrite [] [])) THEN ((USE_THM_THEN addTb)(new_rewrite [] []))) THEN (done_tac)))));;
let odd_add = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> odd (m - n) = odd m + odd n`));;
refine (by (VALID (((BETA_TAC THEN (move ["le_nm"])) THEN (((fun thm_tac -> (USE_THM_THEN addIb)(ISPEC_THEN (`odd n`) thm_tac))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN (((USE_THM_THEN odd_add)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN subnK)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN addbK)(new_rewrite [] []))) THEN (done_tac)))));;
let odd_sub = end_section_proof();;
(start_section_proof ["i";"m"](`odd m = F ==> i < m ==> odd (m - i) = odd i`));;
refine (by (VALID ((BETA_TAC THEN (move ["oddm"]) THEN (move ["lt_im"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN odd_sub)(fun fst_th ->(fun thm_tac -> (USE_THM_THEN ltnW)(fun fst_th ->(USE_THEN "lt_im")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN ((USE_THEN "oddm")(new_rewrite [] [])) THEN ((USE_THM_THEN addFb)(new_rewrite [] []))) THEN (done_tac)))));;
let odd_opp = end_section_proof();;
(start_section_proof ["m";"n"](`odd (m * n) <=> odd m /\ odd n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["IHm"]))]) ((((USE_THM_THEN mul0n)(new_rewrite [] [])) THEN ((USE_THM_THEN odd0)(new_rewrite [] [])) THEN ((USE_THM_THEN andFb)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN mulSn)(new_rewrite [] [])) THEN ((USE_THM_THEN odd_add)(new_rewrite [] [])) THEN ((USE_THM_THEN oddS)(new_rewrite [] [])) THEN ((USE_THM_THEN addTb)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN andb_addl)(new_rewrite [] [])) THEN ((USE_THEN "IHm")(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN andTb)(new_rewrite [] []))) THEN (done_tac)))));;
let odd_mul = end_section_proof();;
(start_section_proof ["m";"n"](`odd (m ^ n) <=> (n = 0) \/ odd m`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) ((((USE_THM_THEN expn0)(new_rewrite [] [])) THEN ((USE_THM_THEN odd1)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((USE_THM_THEN expnS)(new_rewrite [] [])) THEN ((USE_THM_THEN odd_mul)(new_rewrite [] [])) THEN ((USE_THEN "IHn")(new_rewrite [] [])) THEN ((USE_THM_THEN orbC)(new_rewrite [] [])) THEN ((USE_THM_THEN (ARITH_RULE `SUC n = 0 <=> F`))(new_rewrite [] [])) THEN ((USE_THM_THEN orFb)(new_rewrite [] []))))));;
refine (by (VALID ((set_tac "b" (`odd m`)))));;
refine (by (VALID ((((USE_THEN "IHn")MP_TAC) THEN (clear_assumption "IHn") THEN ((USE_THEN "b_def")MP_TAC) THEN (clear_assumption "b_def") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"])))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let odd_exp = end_section_proof();;
let double = define `double 0 = 0 /\ (!n. double (SUC n) = SUC (SUC (double n)))`;;
(start_section_proof [](`double 0 = 0`));;
refine (by (VALID ((((USE_THM_THEN double)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let double0 = end_section_proof();;
(start_section_proof ["n"](`double (SUC n) = SUC (SUC (double n))`));;
refine (by (VALID ((((USE_THM_THEN double)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let doubleS = end_section_proof();;
(start_section_proof ["n"](`n + n = double n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) ((((USE_THM_THEN addn0)(new_rewrite [] [])) THEN ((USE_THM_THEN double0)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN addnS)(new_rewrite [] [])) THEN ((USE_THM_THEN addSn)(new_rewrite [] [])) THEN ((USE_THEN "IHn")(new_rewrite [] [])) THEN ((USE_THM_THEN doubleS)(new_rewrite [] []))) THEN (done_tac)))));;
let addnn = end_section_proof();;
(start_section_proof ["m"](`2 * m = double m`));;
refine (by (VALID (((((USE_THM_THEN (ARITH_RULE `2 = SUC 1`))(new_rewrite [] [])) THEN ((USE_THM_THEN mulSn)(new_rewrite [] [])) THEN ((USE_THM_THEN mul1n)(new_rewrite [] [])) THEN ((USE_THM_THEN addnn)(new_rewrite [] []))) THEN (done_tac)))));;
let mul2n = end_section_proof();;
(start_section_proof ["m"](`m * 2 = double m`));;
refine (by (VALID (((((USE_THM_THEN mulnC)(new_rewrite [] [])) THEN ((USE_THM_THEN mul2n)(new_rewrite [] []))) THEN (done_tac)))));;
let muln2 = end_section_proof();;
(start_section_proof ["m";"n"](`double (m + n) = double m + double n`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN addnn)(GSYM_THEN (new_rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] [])))) THEN ((fun thm_tac -> (USE_THM_THEN addnCA)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(new_rewrite [] [(`n + _1`)]))) THEN (done_tac)))));;
let double_add = end_section_proof();;
(start_section_proof ["m";"n"](`double (m - n) = double m - double n`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["IHm"]))] THEN (case THENL [ALL_TAC; (move ["n"])])) THEN (repeat_tactic 0 10 (((USE_THM_THEN sub0n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN subn0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN double0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN subn0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN sub0n)(new_rewrite [] []))) THEN ((TRY done_tac)))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN doubleS)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN subSS)(new_rewrite [] []))) THEN ((USE_THEN "IHm")(new_rewrite [] []))) THEN (done_tac)))));;
let double_sub = end_section_proof();;
(start_section_proof ["m";"n"](`(double m <= double n <=> m <= n)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN leqE)(new_rewrite [] []))) THEN ((USE_THM_THEN double_sub)(GSYM_THEN (new_rewrite [] [])))) THEN ((disch_tm_tac [](`m - n`)) THEN case THENL [ALL_TAC; (move ["n"])]) THEN ((USE_THM_THEN double)(new_rewrite [] [])) THEN (arith_tac) THEN (done_tac)))));;
let leq_double = end_section_proof();;
(start_section_proof ["m";"n"](`(double m < double n) = (m < n)`));;
refine (by (VALID (((repeat_tactic 2 0 (((USE_THM_THEN ltnNge)(new_rewrite [] []))) THEN ((USE_THM_THEN leq_double)(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_double = end_section_proof();;
(start_section_proof ["m";"n"](`(SUC (double m) < double n) = (m < n)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN muln2)(GSYM_THEN (new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac)))));;
let ltn_Sdouble = end_section_proof();;
(start_section_proof ["m";"n"](`(double m <= SUC (double n)) = (m <= n)`));;
refine (by (VALID (((((USE_THM_THEN leqNgt)(new_rewrite [] [])) THEN ((USE_THM_THEN ltn_Sdouble)(new_rewrite [] [])) THEN ((USE_THM_THEN leqNgt)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let leq_Sdouble = end_section_proof();;
(start_section_proof ["n"](`odd (double n) = F`));;
refine (by (VALID (((((USE_THM_THEN addnn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN odd_add)(new_rewrite [] [])) THEN ((USE_THM_THEN addbb)(new_rewrite [] []))) THEN (done_tac)))));;
let odd_double = end_section_proof();;
(start_section_proof ["n"](`(0 < double n) = (0 < n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN case THENL [ALL_TAC; (move ["n"])]) THEN (repeat_tactic 0 10 (((USE_THM_THEN double0)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN doubleS)(new_rewrite [] []))) THEN (arith_tac)))));;
let double_gt0 = end_section_proof();;
(start_section_proof ["n"](`(double n = 0) = (n = 0)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN case THENL [ALL_TAC; (move ["n"])]) THEN (repeat_tactic 0 10 (((USE_THM_THEN double0)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN doubleS)(new_rewrite [] []))) THEN (arith_tac)))));;
let double_eq0 = end_section_proof();;
(start_section_proof ["m";"n"](`double (m * n) = double m * n`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN mul2n)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN mulnA)(new_rewrite [] []))) THEN (done_tac)))));;
let double_mull = end_section_proof();;
(start_section_proof ["m";"n"](`double (m * n) = m * double n`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN muln2)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN mulnA)(new_rewrite [] []))) THEN (done_tac)))));;
let double_mulr = end_section_proof();;
let half_def = define `HALF 0 = (0, 0) /\ 
	!n. HALF (SUC n) = (SND (HALF n), SUC (FST (HALF n)))`;;
let half = new_basic_definition `half = FST o HALF`;;
let uphalf = new_basic_definition `uphalf = SND o HALF`;;
(start_section_proof [](`half 0 = 0`));;
refine (by (VALID (((((USE_THM_THEN half)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN o_DEF)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN half_def)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let half0 = end_section_proof();;
(start_section_proof [](`uphalf 0 = 0`));;
refine (by (VALID (((((USE_THM_THEN uphalf)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN o_DEF)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN half_def)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let uphalf0 = end_section_proof();;
(start_section_proof ["n"](`half (SUC n) = uphalf n`));;
refine (by (VALID (((((USE_THM_THEN half)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uphalf)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN o_DEF)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN half_def)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let halfS = end_section_proof();;
(start_section_proof ["n"](`uphalf (SUC n) = SUC (half n)`));;
refine (by (VALID (((((USE_THM_THEN half)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uphalf)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN o_DEF)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN half_def)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let uphalfS = end_section_proof();;
(start_section_proof ["x"](`half (double x) = x`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("x",mk_type("num",[])))) THEN (clear_assumption "x") THEN elim THENL [ALL_TAC; (move ["n"])]) ((((USE_THM_THEN double0)(new_rewrite [] [])) THEN ((USE_THM_THEN half0)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((((USE_THM_THEN doubleS)(new_rewrite [] [])) THEN ((USE_THM_THEN halfS)(new_rewrite [] [])) THEN ((USE_THM_THEN uphalfS)(new_rewrite [] []))) THEN (DISCH_THEN(new_rewrite [] []))) THEN (done_tac)))));;
let doubleK = end_section_proof();;
let half_double = doubleK;;
(start_section_proof [](`!m n. double m = double n ==> m = n`));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["n"])))));;
refine (by (VALID ((((((USE_THM_THEN doubleK)(GSYM_THEN (new_rewrite [2] [(`m`)]))) THEN ((USE_THM_THEN doubleK)(GSYM_THEN (new_rewrite [2] [(`n`)])))) THEN (DISCH_THEN(new_rewrite [] []))) THEN (done_tac)))));;
let double_inj = end_section_proof();;
(start_section_proof ["n"](`uphalf (double n) = n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; (move ["n"])]) ((((USE_THM_THEN double0)(new_rewrite [] [])) THEN ((USE_THM_THEN uphalf0)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((((USE_THM_THEN doubleS)(new_rewrite [] [])) THEN ((USE_THM_THEN uphalfS)(new_rewrite [] [])) THEN ((USE_THM_THEN halfS)(new_rewrite [] []))) THEN (DISCH_THEN(new_rewrite [] []))) THEN (done_tac)))));;
let uphalf_double = end_section_proof();;
(start_section_proof ["n"](`uphalf n = (if odd n then 1 else 0) + half n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) ((((USE_THM_THEN uphalf0)(new_rewrite [] [])) THEN ((USE_THM_THEN half0)(new_rewrite [] [])) THEN ((USE_THM_THEN odd0)(new_rewrite [] [])) THEN ((USE_THM_THEN addn0)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((USE_THM_THEN halfS)(new_rewrite [] [])) THEN ((USE_THEN "IHn")(new_rewrite [] [])) THEN ((USE_THM_THEN addnA)(new_rewrite [] [])) THEN ((USE_THM_THEN oddS)(new_rewrite [] [])) THEN ((USE_THM_THEN uphalfS)(new_rewrite [] []))))));;
refine (by (VALID ((((disch_tm_tac [](`odd n`)) THEN case THEN (simp_tac)) THEN (((fun thm_tac ->(USE_THM_THEN add0n)(fun tmp_th1 -> (USE_THM_THEN addn0)(fun tmp_th2 -> thm_tac (CONJ tmp_th1 tmp_th2))))(new_rewrite [] [])) THEN ((USE_THM_THEN add1n)(new_rewrite [] []))) THEN (done_tac)))));;
let uphalf_half = end_section_proof();;
(start_section_proof ["n"](`(if odd n then 1 else 0) + double (half n) = n`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) ((((USE_THM_THEN odd0)(new_rewrite [] [])) THEN ((USE_THM_THEN half0)(new_rewrite [] [])) THEN ((USE_THM_THEN double0)(new_rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN addn0)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((USE_THEN "IHn")(GSYM_THEN (new_rewrite [3] []))) THEN ((USE_THM_THEN halfS)(new_rewrite [] [])) THEN ((USE_THM_THEN uphalf_half)(new_rewrite [] [])) THEN ((USE_THM_THEN double_add)(new_rewrite [] [])) THEN ((USE_THM_THEN oddS)(new_rewrite [] []))))));;
refine (by (VALID ((((USE_THEN "IHn")MP_TAC) THEN (clear_assumption "IHn") THEN BETA_TAC THEN (move ["_"])))));;
refine (by (VALID ((((disch_tm_tac [](`odd n`)) THEN case THEN (simp_tac)) THEN (repeat_tactic 0 10 (((USE_THM_THEN double0)(new_rewrite [] []))) THEN ((USE_THM_THEN add0n)(new_rewrite [] [])) THEN ((USE_THM_THEN add1n)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ONE)(new_rewrite [] [])) THEN ((USE_THM_THEN doubleS)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN addSn)(new_rewrite [] []))) THEN ((USE_THM_THEN double0)(new_rewrite [] [])) THEN ((USE_THM_THEN add0n)(new_rewrite [] []))) THEN (done_tac)))));;
let odd_double_half = end_section_proof();;
(start_section_proof ["n";"b"](`half ((if b then 1 else 0) + double n) = n`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((simp_tac) THEN repeat_tactic 0 10 (((USE_THM_THEN add0n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN add1n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN halfS)(new_rewrite [] []))) THEN ((fun thm_tac ->(USE_THM_THEN half_double)(fun tmp_th1 -> (USE_THM_THEN uphalf_double)(fun tmp_th2 -> thm_tac (CONJ tmp_th1 tmp_th2))))(new_rewrite [] []))) THEN (done_tac)))));;
let half_bit_double = end_section_proof();;
(start_section_proof ["m";"n"](`half (m + n) = (if odd m /\ odd n then 1 else 0) + (half m + half n)`));;
refine (by (VALID ((((USE_THM_THEN odd_double_half)(GSYM_THEN (new_rewrite [1] [(`n`)]))) THEN ((USE_THM_THEN addnCA)(new_rewrite [] [])) THEN ((USE_THM_THEN odd_double_half)(GSYM_THEN (new_rewrite [1] [(`m`)]))) THEN ((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN double_add)(GSYM_THEN (new_rewrite [] [])))))));;
refine (by (VALID ((repeat_tactic 2 0 (((disch_tm_tac [](`odd _`)) THEN case)) THEN ((simp_tac) THEN repeat_tactic 0 10 (((USE_THM_THEN add0n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN half_double)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN add1n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN halfS)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN uphalfS)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN uphalf_double)(new_rewrite [] []))) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((USE_THM_THEN half_double)(new_rewrite [] [])) THEN (done_tac)))));;
let half_add = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> half m <= half n`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN subnK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN (((USE_THM_THEN half_add)(new_rewrite [] [])) THEN ((USE_THM_THEN addnA)(new_rewrite [] [])) THEN ((USE_THM_THEN leq_addl)(new_rewrite [] []))) THEN (done_tac)))));;
let half_leq = end_section_proof();;
(start_section_proof ["n"](`(0 < half n) = (1 < n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN case THENL [ALL_TAC; (case THEN ALL_TAC)]) THEN (repeat_tactic 0 10 (((USE_THM_THEN halfS)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN uphalfS)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN uphalf0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN half0)(new_rewrite [] [])))) THEN (arith_tac) THEN (done_tac)))));;
let half_gt0 = end_section_proof();;
(start_section_proof ["m"](`m * m = m ^ 2`));;
refine (by (VALID (((((USE_THM_THEN (ARITH_RULE `2 = SUC (SUC 0)`))(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN expnS)(new_rewrite [] []))) THEN ((USE_THM_THEN expn0)(new_rewrite [] [])) THEN ((USE_THM_THEN muln1)(new_rewrite [] []))) THEN (done_tac)))));;
let mulnn = end_section_proof();;
(start_section_proof ["m";"n"](`(m + n) ^ 2 = (m ^ 2 + n ^ 2) + 2 * (m * n)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN mulnn)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN mul2n)(new_rewrite [] [])) THEN ((USE_THM_THEN muln_addr)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN muln_addl)(new_rewrite [] []))) THEN ((USE_THM_THEN mulnC)(new_rewrite [] [(`n * _1`)])) THEN repeat_tactic 1 9 (((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] []))))))));;
refine (by (VALID (((((USE_THM_THEN EQ_ADD_LCANCEL)(new_rewrite [] [])) THEN ((USE_THM_THEN addnA)(new_rewrite [] [])) THEN ((USE_THM_THEN addnn)(new_rewrite [] [])) THEN ((USE_THM_THEN addnC)(new_rewrite [] []))) THEN (done_tac)))));;
let sqrn_add = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> (m - n) ^ 2 = (m ^ 2 + n ^ 2) - 2 * (m * n)`));;
refine (by (VALID (((DISCH_THEN (fun snd_th -> (USE_THM_THEN subnK)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (move ["def_m"])))));;
refine (by (VALID ((((USE_THEN "def_m")(GSYM_THEN (new_rewrite [2] []))) THEN ((USE_THM_THEN sqrn_add)(new_rewrite [] [])) THEN ((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addnAC)(new_rewrite [] []))))));;
refine (by (VALID (((repeat_tactic 2 0 (((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN addnn)(new_rewrite [] [])) THEN ((USE_THM_THEN mul2n)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN muln_addr)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN mulnn)(GSYM_THEN (new_rewrite [] [(`n EXP 2`)]))) THEN ((USE_THM_THEN muln_addl)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THEN "def_m")(new_rewrite [] [])) THEN ((USE_THM_THEN addnK)(new_rewrite [] []))) THEN (done_tac)))));;
let sqrn_sub = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> (m + n) ^ 2 - 4 * (m * n) = (m - n) ^ 2`));;
refine (by (VALID (((BETA_TAC THEN (move ["le_nm"])) THEN (((USE_THM_THEN (ARITH_RULE `4 = 2 * 2`))(new_rewrite [] [])) THEN ((USE_THM_THEN mulnA)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN mul2n)(new_rewrite [] [])) THEN ((USE_THM_THEN addnn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN subn_sub)(GSYM_THEN (new_rewrite [] []))))))));;
refine (by (VALID (((((USE_THM_THEN sqrn_add)(new_rewrite [] [])) THEN ((USE_THM_THEN addnK)(new_rewrite [] [])) THEN ((USE_THM_THEN sqrn_sub)(new_rewrite [] []))) THEN (done_tac)))));;
let sqrn_add_sub = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ 2 - n ^ 2 = (m - n) * (m + n)`));;
refine (by (VALID (((((USE_THM_THEN muln_subl)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN muln_addr)(new_rewrite [] []))) THEN ((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN mulnC)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(new_rewrite [] [])) THEN ((USE_THM_THEN subn_add2l)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN mulnn)(new_rewrite [] [])))) THEN (done_tac)))));;
let subn_sqr = end_section_proof();;
(start_section_proof ["m";"n"](`(m ^ 2 < n ^ 2) = (m < n)`));;
refine (by (VALID (((((USE_THM_THEN ltn_exp2r)(new_rewrite [] [])) THEN ((TRY done_tac))) THEN (arith_tac) THEN (done_tac)))));;
let ltn_sqr = end_section_proof();;
(start_section_proof ["m";"n"](`(m ^ 2 <= n ^ 2) = (m <= n)`));;
refine (by (VALID (((((USE_THM_THEN leq_exp2r)(new_rewrite [] [])) THEN ((TRY done_tac))) THEN (arith_tac) THEN (done_tac)))));;
let leq_sqr = end_section_proof();;
(start_section_proof ["n"](`(0 < n ^ 2) = (0 < n)`));;
refine (by (VALID (((THENL_FIRST) ((((fun thm_tac -> (USE_THM_THEN ltn_sqr)(ISPEC_THEN (`0`) thm_tac))MP_TAC) THEN BETA_TAC) THEN ((USE_THM_THEN exp0n)(new_rewrite [] []))) ((arith_tac) THEN (done_tac))))));;
refine (by (VALID (((BETA_TAC THEN (DISCH_THEN(new_rewrite [] []))) THEN (done_tac)))));;
let sqrn_gt0 = end_section_proof();;
(start_section_proof ["m";"n"](`(m ^ 2 = n ^ 2) = (m = n)`));;
refine (by (VALID (((((USE_THM_THEN eqn_exp2r)(new_rewrite [] [])) THEN ((TRY done_tac))) THEN (arith_tac) THEN (done_tac)))));;
let eqn_sqr = end_section_proof();;
(start_section_proof ["m";"n"](`m ^ 2 = n ^ 2 ==> m = n`));;
refine (by (VALID ((BETA_TAC THEN (move ["eq"])))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN expIn)(fun fst_th ->(USE_THM_THEN (ARITH_RULE `0 < 2`))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC THEN (move ["inj"])))));;
refine (by (VALID ((((fun thm_tac -> (USE_THEN "inj")(fun fst_th ->(USE_THEN "eq")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN (done_tac)))));;
let sqrn_inj = end_section_proof();;
let leqif = new_definition `!m n c. leqif m n c <=> (m <= n /\ ((m = n) <=> c))`;;
(start_section_proof ["m";"n";"c"](`leqif m n c <=> if c then m = n else m < n`));;
refine (by (VALID (((THENL_FIRST) ((((USE_THM_THEN ltn_neqAle)(new_rewrite [] [])) THEN ((USE_THM_THEN leqif)(new_rewrite [] []))) THEN (split_tac)) (((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN ((USE_THM_THEN leqnn)(new_rewrite [] [])) THEN (done_tac)))));;
let leqifP = end_section_proof();;
(start_section_proof ["m";"n";"c"](`leqif m n c ==> m <= n`));;
refine (by (VALID (((((USE_THM_THEN leqif)(new_rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let leqif_imp_le = end_section_proof();;
(start_section_proof ["m";"n";"c"](`leqif m n c ==> (m = n <=> c)`));;
refine (by (VALID (((((USE_THM_THEN leqif)(new_rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let leqif_imp_eq = end_section_proof();;
(start_section_proof ["m";"c"](`(leqif m m c) <=> c`));;
refine (by (VALID (((((USE_THM_THEN leqif)(new_rewrite [] [])) THEN ((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (done_tac)))));;
let leqif_refl = end_section_proof();;
(start_section_proof ["m1";"m2";"m3";"c1";"c2"](`leqif m1 m2 c1 ==> leqif m2 m3 c2 ==> leqif m1 m3 (c1 /\ c2)`));;
refine (by (VALID (repeat_tactic 1 9 (((USE_THM_THEN leqifP)(new_rewrite [] []))))));;
refine (by (VALID (((THENL_FIRST) (((disch_tm_tac [](mk_var("c1",mk_type("bool",[])))) THEN (clear_assumption "c1") THEN case) THEN ((disch_tm_tac [](mk_var("c2",mk_type("bool",[])))) THEN (clear_assumption "c2") THEN case THEN (simp_tac) THEN (move ["lt12"]))) ((BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac))))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN ltE)(new_rewrite [] []))) THEN (((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN leqSS)(new_rewrite [] [])) THEN (((USE_THM_THEN ltnW)MP_TAC) THEN (clear_assumption "ltnW") THEN (exact_tac)) THEN (done_tac)))));;
let leqif_trans = end_section_proof();;
(start_section_proof ["f"](`(!m n. f m <= f n <=> m <= n) ==>
  !m n c. (leqif (f m) (f n) c) <=> (leqif m n c)`));;
refine (by (VALID ((BETA_TAC THEN (move ["f_mono"]) THEN (move ["m"]) THEN (move ["n"]) THEN (move ["c"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN leqifP)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN eqn_leq)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THEN "f_mono")(new_rewrite [] [])))) THEN (done_tac)))));;
let monotone_leqif = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> leqif m n (n <= m)`));;
refine (by (VALID (((BETA_TAC THEN (move ["lemn"])) THEN ((USE_THM_THEN leqif)(new_rewrite [] [])) THEN ((split_tac) THEN ((TRY done_tac))) THEN ((USE_THM_THEN eqn_leq)(new_rewrite [] []))))));;
refine (by (VALID ((((USE_THEN "lemn")(new_rewrite [] [])) THEN (done_tac)))));;
let leqif_geq = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> leqif m n (m = n)`));;
refine (by (VALID ((((USE_THM_THEN leqif)(new_rewrite [] [])) THEN (done_tac)))));;
let leqif_eq = end_section_proof();;
(start_section_proof ["a";"b";"C"](`leqif a b C ==> ((b <= a) <=> C)`));;
refine (by (VALID ((((USE_THM_THEN leqif)(new_rewrite [] [])) THEN (case THEN (move ["le_ab"])) THEN ((USE_THM_THEN eqn_leq)(new_rewrite [] []))))));;
refine (by (VALID ((((USE_THEN "le_ab")(new_rewrite [] [])) THEN (done_tac)))));;
let geq_leqif = end_section_proof();;
(start_section_proof ["a";"b";"C"](`leqif a b C ==> (a < b <=> ~ C)`));;
refine (by (VALID ((BETA_TAC THEN (move ["le_ab"])))));;
refine (by (VALID (((((USE_THM_THEN ltnNge)(new_rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN geq_leqif)(fun fst_th ->(USE_THEN "le_ab")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] []))) THEN (done_tac)))));;
let ltn_leqif = end_section_proof();;
(start_section_proof ["m1";"n1";"c1";"m2";"n2";"c2"](`leqif m1 n1 c1 ==> leqif m2 n2 c2 ==> leqif (m1 + m2) (n1 + n2) (c1 /\ c2)`));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN monotone_leqif)(fun fst_th ->(fun thm_tac -> (USE_THM_THEN leq_add2r)(ISPEC_THEN (mk_var("m2",mk_type("num",[]))) thm_tac))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (new_rewrite [] []))) THEN (move ["le1"])))));;
refine (by (VALID (((fun thm_tac -> (USE_THM_THEN monotone_leqif)(fun fst_th ->(fun thm_tac -> (USE_THM_THEN leq_add2l)(ISPEC_THEN (mk_var("n1",mk_type("num",[]))) thm_tac))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (new_rewrite [] []))))));;
refine (by (VALID ((((USE_THM_THEN leqif_trans)MP_TAC) THEN (clear_assumption "leqif_trans") THEN (exact_tac)))));;
let leqif_add = end_section_proof();;
(start_section_proof ["m1";"n1";"c1";"m2";"n2";"c2"](`leqif m1 n1 c1 ==> leqif m2 n2 c2 ==>
	  leqif (m1 * m2) (n1 * n2) (n1 * n2 = 0 \/ (c1 /\ c2))`));;
refine (by (VALID ((BETA_TAC THEN (move ["le1"]) THEN (move ["le2"])))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN posnP)(ISPEC_THEN (`n1 * n2`) thm_tac))MP_TAC) THEN case THENL [(move ["n12_0"]); ALL_TAC]))));;
refine (by (VALID ((((USE_THEN "n12_0")(new_rewrite [] [])) THEN (((USE_THEN "le2")MP_TAC) THEN (clear_assumption "le2") THEN ((USE_THEN "le1")MP_TAC) THEN (clear_assumption "le1") THEN ((USE_THEN "n12_0")MP_TAC) THEN (clear_assumption "n12_0") THEN BETA_TAC) THEN ((USE_THM_THEN muln_eq0)(new_rewrite [] []))))));;
refine (by (VALID (((case THEN (DISCH_THEN(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("m2",mk_type("num",[])))) THEN (clear_assumption "m2") THEN (disch_tm_tac [](mk_var("m1",mk_type("num",[])))) THEN (clear_assumption "m1") THEN case THENL [ALL_TAC; (move ["m"])]) THEN (case THENL [ALL_TAC; (move ["m'"])]) THEN (repeat_tactic 1 9 (((USE_THM_THEN leqif)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN muln0)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN mul0n)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN leqnn)(new_rewrite [] []))) THEN (simp_tac)) THEN (arith_tac)))));;
refine (by (VALID ((((USE_THM_THEN muln_gt0)(new_rewrite [] [])) THEN (BETA_TAC THEN (case THEN ((move ["n1_gt0"]) THEN (move ["n2_gt0"]))))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN posnP)(ISPEC_THEN (mk_var("m2",mk_type("num",[]))) thm_tac))MP_TAC) THEN BETA_TAC THEN (case THENL [(move ["m2_0"]); (move ["m2_gt0"])])))));;
refine (by (VALID ((((USE_THM_THEN leqifP)(new_rewrite [] [])) THEN (((USE_THEN "le2")MP_TAC) THEN BETA_TAC) THEN (((USE_THM_THEN leqif)(new_rewrite [] [])) THEN ALL_TAC THEN (case THEN ((move ["_"]) THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] []))))))))));;
refine (by (VALID (((((USE_THM_THEN andbC)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN eqn_leq)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN leqNgt)(new_rewrite [] []))) THEN ((USE_THEN "m2_0")(new_rewrite [] [])) THEN ((USE_THM_THEN muln0)(new_rewrite [] [])) THEN ((USE_THM_THEN muln_gt0)(new_rewrite [] [])) THEN ((USE_THEN "n1_gt0")(new_rewrite [] [])) THEN ((USE_THEN "n2_gt0")(new_rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "n1_gt0")MP_TAC) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN leq_pmul2l)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN monotone_leqif)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (move ["Mn1"]))))));;
refine (by (VALID ((((USE_THEN "le2")MP_TAC) THEN (clear_assumption "le2") THEN ((USE_THEN "Mn1")MP_TAC) THEN (clear_assumption "Mn1") THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))))));;
refine (by (VALID (((((USE_THEN "m2_gt0")MP_TAC) THEN (clear_assumption "m2_gt0") THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN leq_pmul2r)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN monotone_leqif)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (move ["Mm2"]))))));;
refine (by (VALID ((((USE_THEN "le1")MP_TAC) THEN (clear_assumption "le1") THEN ((USE_THEN "Mm2")MP_TAC) THEN (clear_assumption "Mm2") THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))))));;
refine (by (VALID ((BETA_TAC THEN (move ["leq1"]) THEN (move ["leq2"])))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leqif_trans)(fun fst_th ->(USE_THEN "leq1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(fun fst_th ->(USE_THEN "leq2")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN repeat_tactic 1 9 (((USE_THM_THEN leqifP)(new_rewrite [] [])))))));;
refine (by (VALID (((disch_tm_tac [](`c1 /\ c2`)) THEN case THEN (simp_tac)))));;
refine (by (VALID (((((USE_THM_THEN eqn_leq)(new_rewrite [] [])) THEN ((USE_THM_THEN leqNgt)(new_rewrite [] [])) THEN ((USE_THM_THEN muln_gt0)(new_rewrite [] [])) THEN ((USE_THEN "n1_gt0")(new_rewrite [] [])) THEN ((USE_THEN "n2_gt0")(new_rewrite [] []))) THEN (done_tac)))));;
let leqif_mul = end_section_proof();;
(start_section_proof ["m";"n"](`leqif (2 * (m * n)) (m ^ 2 + n ^ 2) (m = n)`));;
refine (by (VALID ((wlog_tac (move ["le_nm"])[(mk_var("m",mk_type("num",[]))); (mk_var("n",mk_type("num",[])))](`n <= m`)))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leqP)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THEN ((TRY done_tac))) THEN ((((USE_THM_THEN eq_sym)(new_rewrite [] [])) THEN ((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((USE_THM_THEN mulnC)(new_rewrite [] [(`m * _1`)]))) THEN (move ["mn"]))))));;
refine (by (VALID (((((USE_THEN "le_nm")MP_TAC) THEN (clear_assumption "le_nm") THEN (DISCH_THEN apply_tac)) THEN (((fun thm_tac -> (USE_THM_THEN ltnW)(fun fst_th ->(USE_THEN "mn")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN (done_tac)))));;
refine (by (VALID ((BETA_TAC THEN (move ["le_nm"])))));;
refine (by (VALID (((USE_THM_THEN leqifP)(new_rewrite [] [])))));;
refine (by (VALID (((THENL_FIRST) (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`m = n`) thm_tac))MP_TAC) THEN case THENL [(DISCH_THEN(new_rewrite [] [])); (move ["ne_mn"])]) ((((USE_THM_THEN mulnn)(new_rewrite [] [])) THEN ((USE_THM_THEN addnn)(new_rewrite [] [])) THEN ((USE_THM_THEN mul2n)(new_rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THEN "ne_mn")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (((USE_THM_THEN subn_gt0)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN sqrn_sub)(GSYM_THEN (new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN sqrn_gt0)(new_rewrite [] [])) THEN ((USE_THM_THEN subn_gt0)(new_rewrite [] [])) THEN ((USE_THM_THEN ltn_neqAle)(new_rewrite [] [])) THEN ((USE_THM_THEN eq_sym)(new_rewrite [] []))) THEN (done_tac)))));;
let nat_Cauchy = end_section_proof();;
(start_section_proof ["m";"n"](`leqif (4 * (m * n)) ((m + n) ^ 2) (m = n)`));;
refine (by (VALID ((((USE_THM_THEN (ARITH_RULE `4 = 2 * 2`))(new_rewrite [] [])) THEN ((USE_THM_THEN mulnA)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN mul2n)(new_rewrite [] [])) THEN ((USE_THM_THEN addnn)(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN sqrn_add)(new_rewrite [] [])) THEN ((USE_THM_THEN leqifP)(new_rewrite [] []))))));;
refine (by (VALID ((((USE_THM_THEN ltn_add2r)(new_rewrite [] [])) THEN ((USE_THM_THEN eqn_addr)(new_rewrite [] [])) THEN ((USE_THM_THEN ltn_neqAle)(new_rewrite [] []))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN leqif_imp_eq)(fun fst_th ->(fun thm_tac -> (fun thm_tac -> (USE_THM_THEN nat_Cauchy)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN leqif_imp_le)(fun fst_th ->(fun thm_tac -> (fun thm_tac -> (USE_THM_THEN nat_Cauchy)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN if_same)(new_rewrite [] []))) THEN (done_tac)))));;
let nat_AGM2 = end_section_proof();;
let distn = new_definition `!m n. distn m n = (m - n) + (n - m)`;;
(start_section_proof ["m";"n"](`distn m n = distn n m`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN distn)(new_rewrite [] []))) THEN ((USE_THM_THEN addnC)(new_rewrite [] []))) THEN (done_tac)))));;
let distnC = end_section_proof();;
(start_section_proof ["d";"m";"n"](`distn (d + m) (d + n) = distn m n`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN distn)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN subn_add2l)(new_rewrite [] [])))) THEN (done_tac)))));;
let distn_add2l = end_section_proof();;
(start_section_proof ["d";"m";"n"](`distn (m + d) (n + d) = distn m n`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN distn)(new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN subn_add2r)(new_rewrite [] [])))) THEN (done_tac)))));;
let distn_add2r = end_section_proof();;
(start_section_proof ["m";"n"](`m <= n ==> distn m n = n - m`));;
refine (by (VALID ((BETA_TAC THEN (move ["le_m_n"])))));;
refine (by (VALID (((((USE_THM_THEN distn)(new_rewrite [] [])) THEN ((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN EQ_IMP)(fun fst_th ->(fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leqE)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(fun fst_th ->(USE_THEN "le_m_n")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN ((USE_THM_THEN add0n)(new_rewrite [] []))) THEN (done_tac)))));;
let distnEr = end_section_proof();;
(start_section_proof ["m";"n"](`n <= m ==> distn m n = m - n`));;
refine (by (VALID (((BETA_TAC THEN (move ["le_n_m"])) THEN (((USE_THM_THEN distnC)(new_rewrite [] [])) THEN ((USE_THM_THEN distnEr)(new_rewrite [] []))) THEN (done_tac)))));;
let distnEl = end_section_proof();;
(start_section_proof ["n"](`distn 0 n = n`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN case THENL [ALL_TAC; (move ["m"])]) THEN (((USE_THM_THEN distn)(new_rewrite [] [])) THEN ((USE_THM_THEN sub0n)(new_rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN subn0)(new_rewrite [] []))) THEN ((USE_THM_THEN add0n)(new_rewrite [] []))) THEN (done_tac)))));;
let dist0n = end_section_proof();;
(start_section_proof ["n"](`distn n 0 = n`));;
refine (by (VALID (((((USE_THM_THEN distnC)(new_rewrite [] [])) THEN ((USE_THM_THEN dist0n)(new_rewrite [] []))) THEN (done_tac)))));;
let distn0 = end_section_proof();;
(start_section_proof ["m"](`distn m m = 0`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN distn)(new_rewrite [] []))) THEN ((USE_THM_THEN subnn)(new_rewrite [] [])) THEN ((USE_THM_THEN addn0)(new_rewrite [] []))) THEN (done_tac)))));;
let distnn = end_section_proof();;
(start_section_proof ["m";"n"](`(distn m n = 0) <=> (m = n)`));;
refine (by (VALID (((((USE_THM_THEN distn)(new_rewrite [] [])) THEN ((USE_THM_THEN addn_eq0)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN subn_eq0)(new_rewrite [] []))) THEN ((USE_THM_THEN eqn_leq)(GSYM_THEN (new_rewrite [] [])))) THEN (done_tac)))));;
let distn_eq0 = end_section_proof();;
(start_section_proof ["m"](`distn m (SUC m) = 1`));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN distn_add2r)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (`0`) thm_tac))(ISPEC_THEN (`1`) thm_tac))MP_TAC) THEN BETA_TAC) THEN (((USE_THM_THEN add0n)(new_rewrite [] [])) THEN ((USE_THM_THEN add1n)(new_rewrite [] [])) THEN ((USE_THM_THEN dist0n)(new_rewrite [] []))) THEN (done_tac)))));;
let distnS = end_section_proof();;
(start_section_proof ["m"](`distn (SUC m) m = 1`));;
refine (by (VALID (((((USE_THM_THEN distnC)(new_rewrite [] [])) THEN ((USE_THM_THEN distnS)(new_rewrite [] []))) THEN (done_tac)))));;
let distSn = end_section_proof();;
(start_section_proof ["m";"n"](`(distn m n = 1) <=> (if m < n then SUC m = n else m = SUC n)`));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN ltnP)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THENL [(move ["lt_mn"]); (move ["le_mn"])]))));;
refine (by (VALID (((((USE_THM_THEN eq_sym)(new_rewrite [] [(`_ = 1`)])) THEN ((fun thm_tac -> (USE_THM_THEN eqn_addr)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN distnEr)(new_rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN subnK)(new_rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN add1n)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltnW)(new_rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN eqn_addr)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN distnEl)(new_rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN subnK)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN add1n)(new_rewrite [] [])) THEN ((USE_THM_THEN ltnNge)(new_rewrite [] [])) THEN ((USE_THEN "le_mn")(new_rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let distn_eq1 = end_section_proof();;
(start_section_proof ["m";"n";"p"](`leqif (distn m p) (distn m n + distn n p) ((m <= n /\ n <= p) \/ (p <= n /\ n <= m))`));;
refine (by (VALID ((((THENL_ROT 1)) (have_tac (move ["IH"]) (`!m p. m <= p ==> leqif (distn m p) (distn m n + distn n p) (m <= n /\ n <= p \/ p <= n /\ n <= m)`))))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leq_total)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("p",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THEN ((TRY done_tac))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IH")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC)))));;
refine (by (VALID (((((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((USE_THM_THEN orbC)(new_rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN distnC)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(new_rewrite [] [(`distn n _`)])) THEN repeat_tactic 1 9 (((USE_THM_THEN distnC)(new_rewrite [] [(`distn p _`)])))) THEN (done_tac)))));;
refine (by (VALID ((BETA_TAC THEN (move ["m"]) THEN (move ["p"]) THEN (move ["le_mp"])))));;
refine (by (VALID ((((USE_THM_THEN distnEr)(new_rewrite [] [])) THEN ((TRY done_tac))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`m <= n /\ n <= p`) thm_tac))MP_TAC) THEN case THENL [((case THEN ((move ["le_mn"]) THEN (move ["le_np"]))) THEN ((simp_tac THEN TRY done_tac))); ALL_TAC]))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN distnEr)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN addnC)(new_rewrite [] [])) THEN ((USE_THM_THEN leqifP)(new_rewrite [] [])) THEN (simp_tac) THEN ((fun thm_tac -> (USE_THM_THEN eqn_addr)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(GSYM_THEN (new_rewrite [] []))) THEN ((USE_THM_THEN addnA)(GSYM_THEN (new_rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN subnK)(new_rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN negb_and)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltnNge)(GSYM_THEN (new_rewrite [] []))))) THEN ALL_TAC THEN (case THENL [(move ["lt_nm"]); (move ["lt_pn"])])))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN ltn_leq_trans)(fun fst_th ->(USE_THEN "lt_nm")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(fun fst_th ->(USE_THEN "le_mp")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC THEN (move ["lt_np"])))));;
refine (by (VALID (((((USE_THM_THEN leqifP)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN leqNgt)(new_rewrite [] []))) THEN ((USE_THEN "lt_nm")(new_rewrite [] [])) THEN ((USE_THEN "lt_np")(new_rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN ltn_addl)(new_rewrite [] [])) THEN ((USE_THM_THEN distnEr)(new_rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN ltnW)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltn_sub2l)(new_rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leq_ltn_trans)(fun fst_th ->(USE_THEN "le_mp")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(fun fst_th ->(USE_THEN "lt_pn")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC THEN (move ["lt_mn"])))));;
refine (by (VALID (((((USE_THM_THEN leqifP)(new_rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN leqNgt)(new_rewrite [] []))) THEN ((USE_THEN "lt_mn")(new_rewrite [] [])) THEN ((USE_THEN "lt_pn")(new_rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN ltn_addr)(new_rewrite [] [])) THEN ((USE_THM_THEN distnEr)(new_rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN ltn_sub2r)(new_rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltnW)(new_rewrite [] []))) THEN (done_tac)))));;
let leqif_add_distn = end_section_proof();;
(start_section_proof ["m";"n";"p"](`distn m p <= distn m n + distn n p`));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN leqif_imp_le)(fun fst_th ->(fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leqif_add_distn)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("p",mk_type("num",[]))) thm_tac))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN (done_tac)))));;
let leq_add_distn = end_section_proof();;
(start_section_proof ["m";"n"](`(distn m n) ^ 2 + 2 * (m * n) = m ^ 2 + n ^ 2`));;
refine (by (VALID ((wlog_tac (move ["le_nm"])[(mk_var("m",mk_type("num",[]))); (mk_var("n",mk_type("num",[])))](`n <= m`)))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leq_total)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THEN (DISCH_THEN (fun snd_th -> (USE_THEN "le_nm")(MATCH_MP_THEN snd_th MP_TAC))) THEN ((TRY done_tac))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN addnC)(ISPEC_THEN (`n EXP 2`) thm_tac))(new_rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN mulnC)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(new_rewrite [] [])) THEN ((USE_THM_THEN distnC)(new_rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((BETA_TAC THEN (move ["le_nm"])) THEN (((USE_THM_THEN distnEl)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN sqrn_sub)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN subnK)(new_rewrite [] [])) THEN ((TRY done_tac)) THEN ((fun thm_tac -> (USE_THM_THEN leqif_imp_le)(fun fst_th ->(fun thm_tac -> (fun thm_tac -> (USE_THM_THEN nat_Cauchy)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] []))) THEN (done_tac)))));;
let sqrn_distn = end_section_proof();;
