needs "caml/ssrnat.hl";;
(begin_section "Sequences");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_var (mk_var ("x0", (`:A`))));;
(add_section_type (mk_var ("x", (`:A`))); add_section_type (mk_var ("y", (`:A`))); add_section_type (mk_var ("z", (`:A`))));;
(add_section_type (mk_var ("m", (`:num`))); add_section_type (mk_var ("n", (`:num`))));;
(add_section_type (mk_var ("s", (`:(A)list`))));;
let size = new_definition `sizel = LENGTH`;;
(start_section_proof ["s"](`sizel s = 0 ==> s = []`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN case THENL [(DISCH_THEN(rewrite [] [])); (case THEN ((move ["h"]) THEN (case THEN (move ["t"])) THEN (DISCH_THEN(rewrite [] []))))]) THEN (BETA_TAC THEN ((TRY done_tac))) THEN (((USE_THM_THEN size)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN LENGTH)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (arith_tac) THEN (done_tac)))));;
let size0nil = end_section_proof();;
let nilp = new_definition `!(s:(A)list). nilp s <=> (sizel s = 0)`;;
(start_section_proof ["s"](`s = [] <=> nilp s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN case THENL [(DISCH_THEN(rewrite [] [])); (case THEN ((move ["h"]) THEN (case THEN ((move ["t"]) THEN (DISCH_THEN(rewrite [] []))))))]) THEN (((USE_THM_THEN nilp)(rewrite [] [])) THEN ((USE_THM_THEN size)(rewrite [] []))) THEN (((USE_THM_THEN LENGTH)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (arith_tac) THEN (done_tac)))));;
let nilP = end_section_proof();;
let head = define `!(x0:A) h t. headl x0 [] = x0 /\ headl x0 (CONS h t) = h`;;
let behead = define `!(h:A) t. behead [] = [] /\ behead (CONS h t) = t`;;
(start_section_proof ["s"](`sizel (behead s) = (sizel s) - 1`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN case THENL [(DISCH_THEN(rewrite [] [])); (case THEN ((move ["h"]) THEN (case THEN ((move ["t"]) THEN (DISCH_THEN(rewrite [] []))))))]) THEN (((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN LENGTH)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN SUC_SUB1)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sub0n)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let size_behead = end_section_proof();;
let ncons = new_definition `!n (x:A). ncons n x = iter n (CONS x)`;;
let nseq = new_definition `!n (x:A). nseq n x = ncons n x []`;;
(start_section_proof [](`sizel ([]:(A)list) = 0`));;
refine (by (VALID (((((USE_THM_THEN size)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN LENGTH)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let size_nil = end_section_proof();;
(start_section_proof ["h";"t"](`sizel (CONS (h:A) t) = SUC (sizel t)`));;
refine (by (VALID (((((USE_THM_THEN size)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN LENGTH)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let size_cons = end_section_proof();;
(start_section_proof ["n";"x";"s"](`sizel (ncons n x s) = n + sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim) THEN repeat_tactic 1 9 (((USE_THM_THEN ncons)(rewrite [] []))) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((repeat_tactic 0 10 (((USE_THM_THEN add0n)(rewrite [] []))) THEN ((TRY done_tac))) THEN (move ["n"]) THEN (move ["IH"]))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THEN "IH")(rewrite [] [])) THEN ((USE_THM_THEN addSn)(rewrite [] []))) THEN (done_tac)))));;
let size_ncons = end_section_proof();;
(start_section_proof ["n";"x"](`sizel (nseq n (x:A)) = n`));;
refine (by (VALID (((((USE_THM_THEN nseq)(rewrite [] [])) THEN ((USE_THM_THEN size_ncons)(rewrite [] [])) THEN ((USE_THM_THEN size_nil)(rewrite [] [])) THEN ((USE_THM_THEN addn0)(rewrite [] []))) THEN (done_tac)))));;
let size_nseq = end_section_proof();;
parse_as_infix ("::", (12, "right"));;
override_interface ("::", `CONS`);;
make_overloadable "++" `:A -> A -> A`;;
let cat = define `!(x:A) t s2. cat [] s2 = s2 /\ cat (CONS x t) s2 = x :: cat t s2`;;
overload_interface ("++", `cat`);;
(start_section_proof ["s"](`[] ++ (s:(A)list) = s`));;
refine (by (VALID ((((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let cat0s = end_section_proof();;
(start_section_proof ["x";"s"](`[x:A] ++ s = x :: s`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let cat1s = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`(x :: s1) ++ s2 = x :: s1 ++ s2`));;
refine (by (VALID ((((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let cat_cons = end_section_proof();;
(start_section_proof ["n";"x";"s"](`nseq n (x:A) ++ s = ncons n x s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim) THEN ((((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (move ["n"]) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let cat_nseq = end_section_proof();;
(start_section_proof ["s"](`s ++ [] = (s:(A)list)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]))]) THEN ((((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let cats0 = end_section_proof();;
(start_section_proof ["s1";"s2";"s3"](`s1 ++ s2 ++ s3 = (s1 ++ s2) ++ s3:(A)list`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]))]) THEN ((repeat_tactic 1 9 (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((TRY done_tac))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let catA = end_section_proof();;
(start_section_proof ["s1";"s2"](`sizel (s1 ++ s2) = sizel s1 + sizel (s2:(A)list)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]))]) THEN ((repeat_tactic 1 9 (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN addSn)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let size_cat = end_section_proof();;
let rcons = define `!x t (z:A). rcons [] z = [z] /\ rcons (x :: t) z = x :: rcons t z`;;
(start_section_proof ["x";"s";"z"](`rcons (x :: s) z = x:A :: rcons s z`));;
refine (by (VALID ((((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let rcons_cons = end_section_proof();;
(start_section_proof ["s";"z"](`s ++ [z:A] = rcons s z`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]))]) THEN ((((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let cats1 = end_section_proof();;
let last = define `!(x:A) h t. last x [] = x /\ last x (h :: t) = last h t`;;
let belast = define `!(x:A) h t. belast x [] = [] /\ belast x (h :: t) = x :: (belast h t)`;;
(start_section_proof ["x";"s"](`(x:A :: s) = rcons (belast x s) (last x s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (BETA_TAC THEN (move ["x"])) THEN (((USE_THM_THEN belast)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let lastI = end_section_proof();;
(start_section_proof ["x";"y";"s"](`last x (y:A :: s) = last y s`));;
refine (by (VALID ((((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let last_cons = end_section_proof();;
(start_section_proof ["s";"x"](`sizel (rcons s (x:A)) = SUC (sizel s)`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN size_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN size_nil)(rewrite [] [])) THEN ((USE_THM_THEN addnS)(rewrite [] [])) THEN ((USE_THM_THEN addn0)(rewrite [] []))) THEN (done_tac)))));;
let size_rcons = end_section_proof();;
(start_section_proof ["x";"s"](`sizel (belast (x:A) s) = sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (BETA_TAC THEN (move ["x"])) THEN (((USE_THM_THEN belast)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let size_belast = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`last (x:A) (s1 ++ s2) = last (last x s1) s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (BETA_TAC THEN (move ["x"])) THEN (((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let last_cat = end_section_proof();;
(start_section_proof ["x";"s";"z"](`last x (rcons s z) = z:A`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN last_cat)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let last_rcons = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`belast x (s1 ++ s2) = belast x s1 ++ belast (last (x:A) s1) s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (BETA_TAC THEN (move ["x"])) THEN (((USE_THM_THEN belast)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN belast)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let belast_cat = end_section_proof();;
(start_section_proof ["x";"s";"z"](`belast x (rcons s z) = x:A :: s`));;
refine (by (VALID (((((USE_THM_THEN lastI)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN belast_cat)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN belast)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let belast_rcons = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`rcons s1 x ++ s2 = s1 ++ (x:A :: s2)`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN catA)(GSYM_THEN (rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let cat_rcons = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`rcons (s1 ++ s2) x = s1 ++ rcons s2 (x:A)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN catA)(rewrite [] []))) THEN (done_tac)))));;
let rcons_cat = end_section_proof();;
(start_section_proof ["P"](`P [] ==> (!s (x : A). P s ==> P (rcons s x)) ==> (!s. P s)`));;
refine (by (VALID ((BETA_TAC THEN (move ["Hnil"]) THEN (move ["Hlast"]) THEN (move ["s"])))));;
refine (by (VALID (((fun thm_tac -> (USE_THM_THEN cat0s)(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [] []))))));;
refine (by (VALID (((THENL_FIRST) (((USE_THEN "Hnil")MP_TAC) THEN (clear_assumption "Hnil") THEN (disch_tm_tac [](`[]`)) THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s2"]) THEN (move ["IHs"]))]) (((USE_THM_THEN cats0)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN cat_rcons)(GSYM_THEN (rewrite [] []))) THEN (move ["s1"]) THEN (move ["Ps1"])) THEN (((USE_THEN "IHs")MP_TAC) THEN (clear_assumption "IHs") THEN (DISCH_THEN apply_tac)) THEN (((USE_THEN "Hlast")MP_TAC) THEN (clear_assumption "Hlast") THEN (exact_tac)) THEN (done_tac)))));;
let last_ind = end_section_proof();;
let nth = define `!(x0:A) h t n. nth x0 [] n = x0 /\ nth x0 (h :: t) 0 = h /\ nth x0 (h :: t) (SUC n) = nth x0 t n`;;
let set_nth = define `!(x0:A) h t n y. 
	set_nth x0 [] n y = ncons n x0 [y] /\
	set_nth x0 (h :: t) 0 y = y :: t /\
	set_nth x0 (h :: t) (SUC n) y = h :: set_nth x0 t n y`;;
(start_section_proof ["s"](`nth x0 s 0 = headl x0 s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["h"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN head)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let nth0 = end_section_proof();;
(start_section_proof ["s";"n"](`sizel s <= n ==> nth x0 s n = x0`));;
refine (by (VALID (((THENL_FIRST) (((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))) ((arith_tac) THEN (done_tac))))));;
refine (by (VALID ((((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let nth_default = end_section_proof();;
(start_section_proof ["n"](`nth x0 [] n = x0`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let nth_nil = end_section_proof();;
(start_section_proof ["x";"s"](`last x s = nth x0 (x :: s) (sizel s)`));;
refine (by (VALID (((THENL_FIRST) (((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (BETA_TAC THEN (move ["x"])) THEN (((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])))) (done_tac)))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let last_nth = end_section_proof();;
(start_section_proof ["s"](`nth x0 s (sizel s - 1) = last x0 s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["t"]) THEN (move ["h"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN succnK)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN last_nth)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let nth_last = end_section_proof();;
(start_section_proof ["s";"n"](`nth x0 (behead s) n = nth x0 s (SUC n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let nth_behead = end_section_proof();;
(start_section_proof ["s1";"s2";"n"](`nth x0 (s1 ++ s2) n = if n < sizel s1 then nth x0 s1 n else nth x0 s2 (n - sizel s1)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sub0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN subn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THENL [(arith_tac); (arith_tac); BETA_TAC]))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN subSS)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltE)(rewrite [] []))) THEN ((USE_THM_THEN leqSS)(rewrite [] []))) THEN (done_tac)))));;
let nth_cat = end_section_proof();;
(start_section_proof ["s";"x";"n"](`nth x0 (rcons s x) n =
    if n < sizel s then nth x0 s n else if n = sizel s then x else x0`));;
refine (by (VALID (((THENL_FIRST) (((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0Sn)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))) ((arith_tac) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN eqSS)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN ltE)(rewrite [] []))) THEN (done_tac)))));;
let nth_rcons = end_section_proof();;
(start_section_proof ["m";"x";"s";"n"](`nth x0 (ncons m x s) n = if n < m then x else nth x0 s (n - m)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["IHm"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN subn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ncons)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th]))) THENL [(arith_tac); (arith_tac); BETA_TAC]))));;
refine (by (VALID (((((USE_THEN "IHm")(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltE)(rewrite [] []))) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN subSS)(rewrite [] []))) THEN (done_tac)))));;
let nth_ncons = end_section_proof();;
(start_section_proof ["m";"x";"n"](`nth x0 (nseq m x) n = (if n < m then x else x0)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["IHm"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THENL [(arith_tac); (arith_tac); BETA_TAC]))));;
refine (by (VALID (((((USE_THM_THEN ncons)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN nseq)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHm")(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltE)(rewrite [] []))) THEN ((USE_THM_THEN leqSS)(rewrite [] []))) THEN (done_tac)))));;
let nth_nseq = end_section_proof();;
(start_section_proof ["s1";"s2"](`sizel s1 = sizel s2 ==> (!i. i < sizel s1 ==> nth x0 s1 i = nth x0 s2 i) ==>
  s1 = s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s2") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x1"]) THEN (move ["s1"]) THEN (move ["IHs1"]))]) THEN (elim THENL [ALL_TAC; ((move ["x2"]) THEN (move ["s2"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN NOT_SUC)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((USE_THM_THEN eqSS)(rewrite [] [])) THEN (move ["eq_sz"]) THEN (move ["eq_s12"])))));;
refine (by (VALID (((THENL_LAST) ((((fun thm_tac -> (USE_THEN "eq_s12")(ISPEC_THEN (`0`) thm_tac))MP_TAC) THEN BETA_TAC) THEN (((USE_THM_THEN ltn0Sn)(rewrite [] [])) THEN (simp_tac) THEN ((fun thm_tac -> (USE_THEN "IHs1")(ISPEC_THEN (mk_var("s2",mk_type("list",[mk_vartype "A"]))) thm_tac))(rewrite [] [])) THEN ((TRY done_tac)))) ((((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((((USE_THEN "eq_sz")(GSYM_THEN (rewrite [] []))) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["c"])) THEN (((fun thm_tac -> (USE_THEN "eq_s12")(ISPEC_THEN (`SUC i`) thm_tac))MP_TAC) THEN BETA_TAC)))));;
refine (by (VALID (((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] [])))) THEN (move ["h"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "h")(fun fst_th ->(USE_THEN "c")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let eq_from_nth = end_section_proof();;
(start_section_proof ["s";"n";"y"](`sizel (set_nth x0 s n y) = maxn (SUC n) (sizel s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN ((USE_THM_THEN set_nth)(fun th -> ONCE_REWRITE_TAC[th]))))));;
refine (by (VALID (((((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN maxn)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (arith_tac) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN size_ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ONE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN addn1)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN maxn)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (arith_tac) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN add_sub_maxn)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN (arith_tac) THEN (done_tac)))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN add1n)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN addn_maxr)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN add1n)(rewrite [] [])))) THEN (done_tac)))));;
let size_set_nth = end_section_proof();;
(start_section_proof ["n";"y"](`set_nth x0 [] n y = ncons n x0 [y]`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN ((USE_THM_THEN set_nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let set_nth_nil = end_section_proof();;
(start_section_proof ["n"](`SUC n < 0 <=> F`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltS0 = end_section_proof();;
(start_section_proof ["n"](`SUC n = 0 <=> F`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let eqS0 = end_section_proof();;
(start_section_proof ["n"](`0 = SUC n <=> F`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let eq0S = end_section_proof();;
(start_section_proof ["n"](`0 < SUC n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let gtS0 = end_section_proof();;
(start_section_proof ["m";"n"](`SUC m < SUC n <=> m < n`));;
refine (by (VALID (((arith_tac) THEN (done_tac)))));;
let ltSS = end_section_proof();;
(start_section_proof ["s";"n";"y";"i"](`nth x0 (set_nth x0 s n y) i = if i = n then y else nth x0 s i`));;
refine (by (VALID (((THENL_ROT (-1)) (((disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN (disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN set_nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth_ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sub0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN eqS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN eq0S)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN gtS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN subn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])))))))));;
refine (by (VALID (((((USE_THM_THEN eqSS)(rewrite [] [])) THEN ((USE_THEN "IHs")(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN ltSS)(rewrite [] [])) THEN ((USE_THM_THEN subSS)(rewrite [] [])) THEN ((USE_THM_THEN eqSS)(rewrite [] []))))));;
refine (by (VALID (((THENL_LAST) (((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN ltngtP)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THENL [(move ["lt_mn"]); (case THENL [(move ["lt_nm"]); (DISCH_THEN(rewrite [] []))])]) ((((USE_THM_THEN subnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THEN "lt_mn")(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN (ARITH_RULE `m < n ==> (m = n <=> F)`))(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((THENL_LAST) (((USE_THM_THEN nth_default)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN if_same)(rewrite [] [])))) (((USE_THM_THEN (ARITH_RULE `n < m ==> (m = n <=> F)`))(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN size_nil)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN subn_gt0)(rewrite [] []))) THEN (done_tac)))));;
let nth_set_nth = end_section_proof();;
(start_section_proof ["s";"n1";"y1";"n2";"y2"](`set_nth x0 (set_nth x0 s n1 y1) n2 y2 = 
	if n1 = n2 then set_nth x0 s n2 y2 else set_nth x0 (set_nth x0 s n2 y2) n1 y1`));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`n1 = n2:num`) thm_tac))MP_TAC) THEN case THENL [((DISCH_THEN(rewrite [] [])) THEN (simp_tac)); (move ["ne_n12"])]))));;
refine (by (VALID (((THENL_FIRST) ((((USE_THM_THEN (REWRITE_RULE[IMP_IMP] eq_from_nth))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN (split_tac)) ((repeat_tactic 1 9 (((USE_THM_THEN size_set_nth)(rewrite [] []))) THEN ((USE_THM_THEN maxnA)(rewrite [] [])) THEN ((USE_THM_THEN maxnn)(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((BETA_TAC THEN (move ["i"]) THEN (move ["_"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN nth_set_nth)(rewrite [] []))) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((THENL_FIRST) ((((USE_THM_THEN (REWRITE_RULE[IMP_IMP] eq_from_nth))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN (split_tac)) ((((USE_THEN "ne_n12")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (repeat_tactic 1 9 (((USE_THM_THEN size_set_nth)(rewrite [] []))) THEN ((USE_THM_THEN maxnCA)(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((BETA_TAC THEN (move ["i"]) THEN (move ["_"])) THEN (((simp_tac THEN TRY done_tac)) THEN repeat_tactic 1 9 (((USE_THM_THEN nth_set_nth)(rewrite [] []))) THEN (simp_tac)) THEN (((USE_THEN "ne_n12")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`i = n2:num`) thm_tac))MP_TAC) THEN case THENL [(DISCH_THEN(rewrite [] [])); (move ["ne_i2"])]) THEN (simp_tac)))));;
refine (by (VALID (((((USE_THM_THEN nth_set_nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THEN "ne_n12")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN nth_set_nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "ne_i2")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN repeat_tactic 1 9 (((USE_THM_THEN nth_set_nth)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THEN "ne_i2")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let set_set_nth = end_section_proof();;
(begin_section "SeqFind");;
(add_section_var (mk_var ("a", (`:A -> bool`))));;
let find = define `!a (x:A) s'. find a [] = 0 /\ 
	find a (x :: s') = if a x then 0 else SUC(find a s')`;;
let filter = define `!a (x:A) s'. filter a [] = [] /\
	filter a (x :: s') = if a x then x :: filter a s' else filter a s'`;;
let count = define `!a (x:A) s'. count a [] = 0 /\
	count a (x :: s') = (if a x then 1 else 0) + count a s'`;;
let has = define `!a (x:A) s'. has a [] = F /\
	has a (x :: s') = (a x \/ has a s')`;;
let all = define `!a (x:A) s'. all a [] = T /\
	all a (x :: s') = (a x /\ all a s')`;;
(start_section_proof [](`find a [] = 0`));;
refine (by (VALID ((((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let find_nil = end_section_proof();;
(start_section_proof ["x";"t"](`find a (x::t) = if a x then 0 else SUC (find a t)`));;
refine (by (VALID ((((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let find_cons = end_section_proof();;
(start_section_proof [](`filter a [] = []`));;
refine (by (VALID ((((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let filter_nil = end_section_proof();;
(start_section_proof ["x";"t"](`filter a (x::t) = if a x then x :: filter a t else filter a t`));;
refine (by (VALID ((((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let filter_cons = end_section_proof();;
(start_section_proof [](`count a [] = 0`));;
refine (by (VALID ((((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let count_nil = end_section_proof();;
(start_section_proof ["x";"t"](`count a (x::t) = (if a x then 1 else 0) + count a t`));;
refine (by (VALID ((((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let count_cons = end_section_proof();;
(start_section_proof [](`has a [] = F`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let has_nil = end_section_proof();;
(start_section_proof ["x";"t"](`has a (x::t) <=> a x \/ has a t`));;
refine (by (VALID ((((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let has_cons = end_section_proof();;
(start_section_proof [](`all a [] = T`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let all_nil = end_section_proof();;
(start_section_proof ["x";"t"](`all a (x::t) <=> a x /\ all a t`));;
refine (by (VALID ((((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let all_cons = end_section_proof();;
(start_section_proof ["s"](`count a s = sizel (filter a s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]))]) THEN ((((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (DISCH_THEN(rewrite [] [])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THENL [((DISCH_THEN(rewrite [] [])) THEN (simp_tac)); (move ["nax"])]) THEN (((USE_THM_THEN add1n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THEN "nax")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let count_filter = end_section_proof();;
(start_section_proof ["s"](`has a s = (0 < count a s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]))]) THEN ((((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (DISCH_THEN(rewrite [] [])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THENL [((DISCH_THEN(rewrite [] [])) THEN (simp_tac)); ((move ["nax"]) THEN ((simp_tac THEN TRY done_tac)))]) THEN (arith_tac) THEN (done_tac)))));;
let has_count = end_section_proof();;
(start_section_proof ["s"](`count a s <= sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]))]) THEN (((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN leqnn)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN ((simp_tac THEN TRY done_tac)) THEN (move ["_"])) THEN ((USE_THM_THEN size_cons)(rewrite [] [])) THEN (arith_tac)))));;
let count_size = end_section_proof();;
(start_section_proof ["s"](`all a s = (count a s = sizel s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]))]) THEN (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((THENL_FIRST) ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"]) THEN (move ["_"])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th]))) ((arith_tac) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN add0n)(rewrite [] [])) THEN ((USE_THM_THEN eqn_leq)(rewrite [] [])) THEN ((USE_THM_THEN andbC)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THM_THEN count_size)(rewrite [] []))) THEN (done_tac)))));;
let all_count = end_section_proof();;
(start_section_proof ["s"](`all a (filter a s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let filter_all = end_section_proof();;
(start_section_proof ["s"](`(filter a s = s) <=> (all a s)`));;
refine (by (VALID (((THENL_FIRST) ((EQ_TAC) THENL [(DISCH_THEN(GSYM_THEN (rewrite [] []))); ALL_TAC]) (((USE_THM_THEN filter_all)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN ((((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN ALL_TAC THEN (case THEN ((DISCH_THEN(rewrite [] [])) THEN (move ["Hs"]))) THEN (simp_tac))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THEN "IHs")(fun fst_th ->(USE_THEN "Hs")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN (done_tac)))));;
let all_filterP = end_section_proof();;
(start_section_proof ["s"](`filter a (filter a s) = filter a s`));;
refine (by (VALID (((((USE_THM_THEN all_filterP)(rewrite [] [])) THEN ((USE_THM_THEN filter_all)(rewrite [] []))) THEN (done_tac)))));;
let filter_id = end_section_proof();;
(start_section_proof ["s"](`has a s <=> (find a s < sizel s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((simp_tac THEN TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"])) THEN (repeat_tactic 0 10 (((USE_THM_THEN ltSS)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN gtS0)(rewrite [] [])))) THEN (done_tac)))));;
let has_find = end_section_proof();;
(start_section_proof ["s"](`find a s <= sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN leqnn)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"])) THEN (repeat_tactic 0 10 (((USE_THM_THEN leq0n)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leqSS)(rewrite [] []))) THEN (done_tac)))));;
let find_size = end_section_proof();;
(start_section_proof ["s1";"s2"](`find a (s1 ++ s2) = if has a s1 then find a s1 else sizel s1 + find a s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"])))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN fun_if)(rewrite [] [(`SUC _1`)])) THEN ((USE_THM_THEN addSn)(rewrite [] []))) THEN (done_tac)))));;
let find_cat = end_section_proof();;
(start_section_proof [](`has a [] = F`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let has_nil = end_section_proof();;
(start_section_proof ["x"](`has a [x] = a x`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let has_seq1 = end_section_proof();;
(start_section_proof ["b";"x"](`has a (nseq (if b then 1 else 0) x) <=> (b /\ a x)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (DISCH_THEN(rewrite [] [])) THEN (simp_tac)) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ONE)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN has_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN has_seq1)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let has_seqb = end_section_proof();;
(start_section_proof [](`all a [] = T`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let all_nil = end_section_proof();;
(start_section_proof ["x"](`all a [x] = a x`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let all_seq1 = end_section_proof();;
(start_section_proof ["s"](`has a s ==> a (nth x0 s (find a s))`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let nth_find = end_section_proof();;
(start_section_proof ["s";"i"](`i < find a s ==> (a (nth x0 s i) <=> F)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((THENL_FIRST) (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["ax"])) (((USE_THM_THEN ltn0)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THEN "ax")(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltSS)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let before_find = end_section_proof();;
(start_section_proof ["s1";"s2"](`filter a (s1 ++ s2) = filter a s1 ++ filter a s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["Ihs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let filter_cat = end_section_proof();;
(start_section_proof ["s";"x"](`filter a (rcons s x) = if a x then rcons (filter a s) x else filter a s`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN filter_cat)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"])) THEN ((USE_THM_THEN cats0)(rewrite [] [])) THEN (done_tac)))));;
let filter_rcons = end_section_proof();;
(start_section_proof ["s1";"s2"](`count a (s1 ++ s2) = count a s1 + count a s2`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN count_filter)(rewrite [] []))) THEN ((USE_THM_THEN filter_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_cat)(rewrite [] []))) THEN (done_tac)))));;
let count_cat = end_section_proof();;
(start_section_proof ["s1";"s2"](`has a (s1 ++ s2) = (has a s1 \/ has a s2)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN orbA)(rewrite [] []))) THEN (done_tac)))));;
let has_cat = end_section_proof();;
(start_section_proof ["s";"x"](`has a (rcons s x) = (a x \/ has a s)`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN has_cat)(rewrite [] [])) THEN ((USE_THM_THEN has_seq1)(rewrite [] [])) THEN ((USE_THM_THEN orbC)(rewrite [] []))) THEN (done_tac)))));;
let has_rcons = end_section_proof();;
(start_section_proof ["s1";"s2"](`all a (s1 ++ s2) = (all a s1 /\ all a s2)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN andbA)(rewrite [] []))) THEN (done_tac)))));;
let all_cat = end_section_proof();;
(start_section_proof ["s";"x"](`all a (rcons s x) = (a x /\ all a s)`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN all_cat)(rewrite [] [])) THEN ((USE_THM_THEN all_seq1)(rewrite [] [])) THEN ((USE_THM_THEN andbC)(rewrite [] []))) THEN (done_tac)))));;
let all_rcons = end_section_proof();;
let all_rcons = finalize_theorem all_rcons;;
let all_cat = finalize_theorem all_cat;;
let has_rcons = finalize_theorem has_rcons;;
let has_cat = finalize_theorem has_cat;;
let count_cat = finalize_theorem count_cat;;
let filter_rcons = finalize_theorem filter_rcons;;
let filter_cat = finalize_theorem filter_cat;;
let before_find = finalize_theorem before_find;;
let nth_find = finalize_theorem nth_find;;
let all_seq1 = finalize_theorem all_seq1;;
let all_nil = finalize_theorem all_nil;;
let has_seqb = finalize_theorem has_seqb;;
let has_seq1 = finalize_theorem has_seq1;;
let has_nil = finalize_theorem has_nil;;
let find_cat = finalize_theorem find_cat;;
let find_size = finalize_theorem find_size;;
let has_find = finalize_theorem has_find;;
let filter_id = finalize_theorem filter_id;;
let all_filterP = finalize_theorem all_filterP;;
let filter_all = finalize_theorem filter_all;;
let all_count = finalize_theorem all_count;;
let count_size = finalize_theorem count_size;;
let has_count = finalize_theorem has_count;;
let count_filter = finalize_theorem count_filter;;
let all_cons = finalize_theorem all_cons;;
let all_nil = finalize_theorem all_nil;;
let has_cons = finalize_theorem has_cons;;
let has_nil = finalize_theorem has_nil;;
let count_cons = finalize_theorem count_cons;;
let count_nil = finalize_theorem count_nil;;
let filter_cons = finalize_theorem filter_cons;;
let filter_nil = finalize_theorem filter_nil;;
let find_cons = finalize_theorem find_cons;;
let find_nil = finalize_theorem find_nil;;
(end_section "SeqFind");;
let pred0 = new_basic_definition `pred0 = (\(x:A). F)`;;
let pred1 = new_definition `pred1 (a:A) = (\x. x = a)`;;
let predT = new_basic_definition `predT = (\(x:A). T)`;;
let predI = new_definition `predI p1 p2 = (\(x:A). p1 x /\ p2 x)`;;
let predU = new_definition `predU p1 p2 = (\(x:A). p1 x \/ p2 x)`;;
let predC = new_definition `predC p = (\(x:A). ~(p x))`;;
let predD = new_definition `predD p1 p2 = predI (predC p2) p1`;;
let predD1 = new_definition `predD1 a x = predD a (pred1 x)`;;
(start_section_proof ["a1";"a2"](`(!x:A. a1 x = a2 x) ==> (!s. find a1 s = find a2 s)`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN EQ_EXT)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eq_find = end_section_proof();;
(start_section_proof ["a1";"a2"](`(!x:A. a1 x = a2 x) ==> (!s. filter a1 s = filter a2 s)`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN EQ_EXT)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eq_filter = end_section_proof();;
(start_section_proof ["a1";"a2"](`(!x:A. a1 x = a2 x) ==> (!s. count a1 s = count a2 s)`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN EQ_EXT)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eq_count = end_section_proof();;
(start_section_proof ["a1";"a2"](`(!x. a1 x = a2 x) ==> (!s. has a1 s = has a2 s)`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN EQ_EXT)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eq_has = end_section_proof();;
(start_section_proof ["a1";"a2"](`(!x. a1 x = a2 x) ==> (!s. all a1 s = all a2 s)`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN EQ_EXT)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eq_all = end_section_proof();;
(start_section_proof ["s"](`filter pred0 s = []`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN pred0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN pred0)(rewrite [] []))) THEN (done_tac)))));;
let filter_pred0 = end_section_proof();;
(start_section_proof ["s"](`filter predT s = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN predT)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THEN "IHs")(GSYM_THEN (rewrite [2] []))) THEN ((USE_THM_THEN predT)(rewrite [] []))) THEN (done_tac)))));;
let filter_predT = end_section_proof();;
(start_section_proof ["a1";"a2";"s"](`filter (predI a1 a2) s = filter a1 (filter a2 s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (repeat_tactic 1 9 (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((simp_tac THEN TRY done_tac)) THEN ((USE_THM_THEN predI)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((THENL_LAST) (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a2:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"])) ((((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN predI)(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a1:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["a1x"])) THEN ((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th]))))));;
refine (by (VALID (((((USE_THEN "a1x")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THEN "IHs")(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN predI)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "a1x")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THEN "IHs")(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN predI)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let filter_predI = end_section_proof();;
(start_section_proof ["s"](`count pred0 s = 0`));;
refine (by (VALID (((((USE_THM_THEN count_filter)(rewrite [] [])) THEN ((USE_THM_THEN filter_pred0)(rewrite [] [])) THEN ((USE_THM_THEN size_nil)(rewrite [] []))) THEN (done_tac)))));;
let count_pred0 = end_section_proof();;
(start_section_proof ["s"](`count predT s = sizel s`));;
refine (by (VALID (((((USE_THM_THEN count_filter)(rewrite [] [])) THEN ((USE_THM_THEN filter_predT)(rewrite [] []))) THEN (done_tac)))));;
let count_predT = end_section_proof();;
(start_section_proof ["a1";"a2";"s"](`count (predU a1 a2) s + count (predI a1 a2) s = count a1 s + count a2 (s:(A)list)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((simp_tac THEN TRY done_tac)) THEN ((USE_THM_THEN predI)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN predU)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a1:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["a1x"])) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a2:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["a2x"])) THEN (((USE_THM_THEN predI)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN predU)(GSYM_THEN (rewrite [] [])))) THEN (((USE_THEN "IHs")MP_TAC) THEN (clear_assumption "IHs") THEN BETA_TAC) THEN (arith_tac)))));;
let count_predUI = end_section_proof();;
(start_section_proof ["a";"s"](`count a s + count (predC a) s = sizel (s:(A)list)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID ((((USE_THM_THEN addnCA)(rewrite [] [])) THEN ((USE_THM_THEN addnA)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN predC)(rewrite [] []))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["ax"])) THEN (arith_tac)))));;
let count_predC = end_section_proof();;
(start_section_proof ["s"](`has pred0 s = F`));;
refine (by (VALID (((((USE_THM_THEN has_count)(rewrite [] [])) THEN ((USE_THM_THEN count_pred0)(rewrite [] [])) THEN ((USE_THM_THEN ltnn)(rewrite [] []))) THEN (done_tac)))));;
let has_pred0 = end_section_proof();;
(start_section_proof ["s"](`has predT s = (0 < sizel s)`));;
refine (by (VALID (((((USE_THM_THEN has_count)(rewrite [] [])) THEN ((USE_THM_THEN count_predT)(rewrite [] []))) THEN (done_tac)))));;
let has_predT = end_section_proof();;
(start_section_proof ["a";"s"](`has (predC a) s = ~ all a s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th]))))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN predC)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN negb_and)(rewrite [] []))) THEN (done_tac)))));;
let has_predC = end_section_proof();;
(start_section_proof ["a1";"a2";"s"](`has (predU a1 a2) s <=> (has a1 s \/ has a2 s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN predU)(rewrite [] [])) THEN (simp_tac) THEN repeat_tactic 1 9 (((USE_THM_THEN orbA)(GSYM_THEN (rewrite [] []))))))));;
refine (by (VALID ((((USE_THM_THEN orbCA)(rewrite [] [(`has a1 s \/ _ \/ _1`)])) THEN (done_tac)))));;
let has_predU = end_section_proof();;
(start_section_proof ["s"](`all pred0 s = (sizel s = 0)`));;
refine (by (VALID (((((USE_THM_THEN all_count)(rewrite [] [])) THEN ((USE_THM_THEN count_pred0)(rewrite [] [])) THEN ((USE_THM_THEN eq_sym)(rewrite [] [(`0 = _`)]))) THEN (done_tac)))));;
let all_pred0 = end_section_proof();;
(start_section_proof ["s"](`all predT s`));;
refine (by (VALID (((((USE_THM_THEN all_count)(rewrite [] [])) THEN ((USE_THM_THEN count_predT)(rewrite [] []))) THEN (done_tac)))));;
let all_predT = end_section_proof();;
(start_section_proof ["a";"s"](`all (predC a) s = ~ has a s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th]))))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN negb_or)(rewrite [] [])) THEN ((USE_THM_THEN predC)(rewrite [] []))) THEN (done_tac)))));;
let all_predC = end_section_proof();;
(start_section_proof ["f";"g"](`(!x. g (f x) = x) ==> (!x y. f x = f y ==> x = y)`));;
refine (by (VALID ((BETA_TAC THEN (move ["h"]) THEN (move ["x"]) THEN (move ["y"]) THEN (move ["f_eq"])))));;
refine (by (VALID (((((USE_THEN "h")(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "h")(GSYM_THEN (rewrite [] [(`y`)]))) THEN ((USE_THEN "f_eq")(rewrite [] []))) THEN (done_tac)))));;
let can_inj = end_section_proof();;
(start_section_proof ["a1";"a2";"s"](`all (predI a1 a2) s <=> all a1 s /\ all a2 s`));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN can_inj)(fun fst_th ->(USE_THM_THEN negbK)(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN (((USE_THM_THEN negb_and)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN has_predC)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN has_predU)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN predU)(rewrite [] [])) THEN ((USE_THM_THEN predI)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN predC)(rewrite [] []))) THEN (simp_tac) THEN ((USE_THM_THEN negb_and)(rewrite [] []))) THEN (done_tac)))));;
let all_predI = end_section_proof();;
let drop = define `!n x s. dropl (SUC n) (x :: s) = dropl n s /\ 
	dropl n [] = [] /\ dropl 0 s = s`;;
(start_section_proof ["f";"g"](`(!x. f x = g x) <=> f = g`));;
refine (by (VALID (((THENL_FIRST) ((EQ_TAC) THEN (move ["h"])) ((MATCH_MP_TAC EQ_EXT) THEN (done_tac))))));;
refine (by (VALID ((((USE_THEN "h")(rewrite [] [])) THEN (done_tac)))));;
let eq_ext = end_section_proof();;
(start_section_proof ["n"](`dropl n [] = []`));;
refine (by (VALID ((((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let drop_nil = end_section_proof();;
(start_section_proof [](`dropl 0 = I`));;
refine (by (VALID (((((USE_THM_THEN eq_ext)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN I_THM)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let drop0 = end_section_proof();;
(start_section_proof ["n";"x";"s"](`dropl (SUC n) (x :: s) = dropl n s`));;
refine (by (VALID ((((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let drop_cons = end_section_proof();;
(start_section_proof [](`dropl n0 = iter n0 behead`));;
refine (by (VALID (((THENL_FIRST) (((disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (((USE_THM_THEN eq_ext)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])))) (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac))))));;
refine (by (VALID (((elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN iterSr)(rewrite [] [])) THEN ((USE_THEN "IHn")(GSYM_THEN (rewrite [] [])))) THEN (((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let drop_behead = end_section_proof();;
(start_section_proof ["s"](`dropl 0 s = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let drop0 = end_section_proof();;
(start_section_proof ["s"](`dropl 1 s = behead s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN ONE)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN drop0)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let drop1 = end_section_proof();;
(start_section_proof ["n";"s"](`sizel s <= n ==> dropl n s = []`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHn")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let drop_oversize = end_section_proof();;
(start_section_proof ["s"](`dropl (sizel s) s = []`));;
refine (by (VALID (((((USE_THM_THEN drop_oversize)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leqnn)(rewrite [] []))) THEN (done_tac)))));;
let drop_size = end_section_proof();;
(start_section_proof ["s"](`sizel (dropl n0 s) = sizel s - n0`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN subn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sub0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN subSS)(rewrite [] []))) THEN (done_tac)))));;
let size_drop = end_section_proof();;
(start_section_proof ["s1";"s2"](`dropl n0 (s1 ++ s2) =
    if n0 < sizel s1 then dropl n0 s1 ++ s2 else dropl (n0 - sizel s1) s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1441906"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sub0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN if_same)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN subn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN gtS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] [])) THEN ((USE_THM_THEN subSS)(rewrite [] []))) THEN (done_tac)))));;
let drop_cat = end_section_proof();;
(start_section_proof ["n";"s1";"s2"](`sizel s1 = n ==> dropl n (s1 ++ s2) = s2`));;
refine (by (VALID (((BETA_TAC THEN (DISCH_THEN(GSYM_THEN (rewrite [] [])))) THEN ((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1441923"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN drop0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN drop_cons)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let drop_size_cat = end_section_proof();;
(start_section_proof ["n";"x";"s"](`dropl n (ncons n x s) = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th])))) THEN (done_tac)))));;
let nconsK = end_section_proof();;
let take = define `!x s n. take (SUC n) (x :: s) = x :: take n s /\
	take 0 s = [] /\ take n [] = []`;;
(start_section_proof ["s"](`take 0 s = []`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let take0 = end_section_proof();;
(start_section_proof ["n";"s"](`sizel s <= n ==> take n s = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltn0)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] []))) THEN (move ["Hsn"])) THEN ((USE_THEN "IHn")(rewrite [] [])) THEN (done_tac)))));;
let take_oversize = end_section_proof();;
(start_section_proof ["s"](`take (sizel s) s = s`));;
refine (by (VALID (((((USE_THM_THEN take_oversize)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN leqnn)(rewrite [] []))) THEN (done_tac)))));;
let take_size = end_section_proof();;
(start_section_proof ["x";"s"](`take (SUC n0) (x :: s) = x :: (take n0 s)`));;
refine (by (VALID ((((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let take_cons = end_section_proof();;
(start_section_proof ["s"](`n0 <= sizel s ==>
  !x. dropl n0 (rcons s x) = rcons (dropl n0 s) x`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN drop_cons)(rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
let drop_rcons = end_section_proof();;
(start_section_proof ["f";"x";"y"](`x = y ==> f x = f y`));;
refine (by (VALID (((BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let congr1 = end_section_proof();;
(start_section_proof ["s"](`take n0 s ++ dropl n0 s = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN (done_tac)))));;
let cat_take_drop = end_section_proof();;
(start_section_proof ["s"](`n0 <= sizel s ==> sizel (take n0 s) = n0`));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN subnKC)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (((fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [2] []))) THEN ((USE_THM_THEN size_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_drop)(rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN addIn)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
let size_takel = end_section_proof();;
(start_section_proof ["s"](`sizel (take n0 s) = if n0 < sizel s then n0 else sizel s`));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN leqP)(ISPEC_THEN (`sizel (s:(A)list)`) thm_tac))(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))MP_TAC) THEN BETA_TAC THEN (case THENL [(move ["le_sn"]); (move ["lt_ns"])])))));;
refine (by (VALID (((((USE_THM_THEN take_oversize)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THEN "le_sn")(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "lt_ns")(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN size_takel)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltnW)(rewrite [] []))) THEN (done_tac)))));;
let size_take = end_section_proof();;
(start_section_proof ["s1";"s2"](`take n0 (s1 ++ s2) =
   if n0 < sizel s1 then take n0 s1 else s1 ++ take (n0 - sizel s1) s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1442187"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN subn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN gtS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN ltSS)(rewrite [] [])) THEN ((USE_THM_THEN subSS)(rewrite [] [])) THEN ((USE_THM_THEN fun_if)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let take_cat = end_section_proof();;
(start_section_proof ["n";"s1";"s2"](`sizel s1 = n ==> take n (s1 ++ s2) = s1`));;
refine (by (VALID (((BETA_TAC THEN (DISCH_THEN(GSYM_THEN (rewrite [] [])))) THEN ((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1442204"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN (done_tac)))));;
let take_size_cat = end_section_proof();;
(start_section_proof ["s1"](`n0 <= sizel (s1:(A)list) ==> (!s2. take n0 (s1 ++ s2) = take n0 s1)`));;
refine (by (VALID ((BETA_TAC THEN (move ["Hn0"]) THEN (move ["s2"])))));;
refine (by (VALID ((((USE_THM_THEN take_cat)(rewrite [] [])) THEN ((USE_THM_THEN ltn_neqAle)(rewrite [] [])) THEN ((USE_THEN "Hn0")(rewrite [] [])) THEN ((USE_THM_THEN andbT)(rewrite [] []))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`n0 = sizel (s1:(A)list)`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["eq"])))));;
refine (by (VALID (((((USE_THM_THEN subnn)(rewrite [] [])) THEN ((USE_THM_THEN take0)(rewrite [] [])) THEN ((USE_THM_THEN cats0)(rewrite [] [])) THEN ((USE_THM_THEN take_size)(rewrite [] []))) THEN (done_tac)))));;
let takel_cat = end_section_proof();;
(start_section_proof ["s";"i"](`nth x0 (dropl n0 s) i = nth x0 s (n0 + i)`));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN ltnP)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (`sizel (s:(A)list)`) thm_tac))MP_TAC) THEN BETA_TAC THEN (case THENL [(move ["lt_n0_s"]); (move ["le_s_n0"])])))));;
refine (by (VALID ((((USE_THM_THEN cat_take_drop)(GSYM_THEN (rewrite [2] [(`s`)]))) THEN ((USE_THM_THEN nth_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_take)(rewrite [] [])) THEN ((USE_THEN "lt_n0_s")(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN addKn)(rewrite [] []))))));;
refine (by (VALID (((((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THM_THEN leq_addr)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN nth_default)(rewrite [] []))) THEN ((TRY done_tac))))));;
refine (by (VALID (((((USE_THEN "le_s_n0")MP_TAC) THEN (clear_assumption "le_s_n0") THEN BETA_TAC) THEN ((((USE_THM_THEN size_drop)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN leqE)(rewrite [] [])))) THEN (DISCH_THEN(rewrite [] []))) THEN ((USE_THM_THEN sub0n)(rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN leq_trans)(fun fst_th ->(USE_THEN "le_s_n0")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN leq_addr)(rewrite [] [])) THEN (done_tac)))));;
let nth_drop = end_section_proof();;
(start_section_proof ["i"](`i < n0 ==> !s. nth x0 (take n0 s) i = nth x0 s i`));;
refine (by (VALID (((BETA_TAC THEN (move ["lt_i_n0"]) THEN (move ["s"])) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`n0 < sizel (s:(A)list)`) thm_tac))MP_TAC) THEN case THEN (move ["lt_n0_s"]))))));;
refine (by (VALID (((((USE_THM_THEN cat_take_drop)(GSYM_THEN (rewrite [2] [(`s`)]))) THEN ((USE_THM_THEN nth_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_take)(rewrite [] [])) THEN ((USE_THEN "lt_n0_s")(rewrite [] [])) THEN (simp_tac) THEN ((USE_THEN "lt_i_n0")(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN cats0)(GSYM_THEN (rewrite [1] [(`s`)]))) THEN ((USE_THM_THEN take_cat)(rewrite [] []))) THEN (((USE_THEN "lt_n0_s")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cats0)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let nth_take = end_section_proof();;
(start_section_proof ["n";"s"](`n < sizel s ==> dropl n s = nth x0 s n :: dropl (SUC n) s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let drop_nth = end_section_proof();;
(start_section_proof ["n";"s"](`n < sizel s ==> take (SUC n) s = rcons (take n s) (nth x0 s n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let take_nth = end_section_proof();;
let rot = new_definition `rot n s = dropl n s ++ take n s`;;
(start_section_proof ["s"](`rot 0 s = s`));;
refine (by (VALID (((((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THM_THEN drop0)(rewrite [] [])) THEN ((USE_THM_THEN take0)(rewrite [] [])) THEN ((USE_THM_THEN cats0)(rewrite [] []))) THEN (done_tac)))));;
let rot0 = end_section_proof();;
(start_section_proof ["s"](`sizel (rot n0 s) = sizel s`));;
refine (by (VALID (((((USE_THM_THEN cat_take_drop)(GSYM_THEN (rewrite [2] [(`s`)]))) THEN ((USE_THM_THEN rot)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN size_cat)(rewrite [] []))) THEN ((USE_THM_THEN addnC)(rewrite [] []))) THEN (done_tac)))));;
let size_rot = end_section_proof();;
(start_section_proof ["n";"s"](`sizel s <= n ==> rot n s = s`));;
refine (by (VALID (((BETA_TAC THEN (move ["le_s_n"])) THEN (((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THM_THEN take_oversize)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN drop_oversize)(rewrite [] []))) THEN ((TRY done_tac))) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let rot_oversize = end_section_proof();;
(start_section_proof ["s"](`rot (sizel s) s = s`));;
refine (by (VALID (((((USE_THM_THEN rot_oversize)MP_TAC) THEN (clear_assumption "rot_oversize") THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN leqnn)(rewrite [] [])) THEN (done_tac)))));;
let rot_size = end_section_proof();;
(start_section_proof ["s";"a"](`has a (rot n0 s) = has a s`));;
refine (by (VALID (((((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THM_THEN has_cat)(rewrite [] [])) THEN ((USE_THM_THEN orbC)(rewrite [] [])) THEN ((USE_THM_THEN has_cat)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN cat_take_drop)(rewrite [] []))) THEN (done_tac)))));;
let has_rot = end_section_proof();;
(start_section_proof ["s1";"s2"](`rot (sizel s1) (s1 ++ s2) = s2 ++ s1`));;
refine (by (VALID (((((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THM_THEN take_size_cat)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN drop_size_cat)(rewrite [] [])))) THEN (done_tac)))));;
let rot_size_cat = end_section_proof();;
let rotr = new_definition `rotr n s = rot (sizel s - n) s`;;
(start_section_proof ["s"](`rotr n0 (rot n0 s) = s`));;
refine (by (VALID ((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN size_rot)(rewrite [] [])) THEN ((USE_THM_THEN size_drop)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rot)(rewrite [] [(`rot n0 _`)]))))));;
refine (by (VALID (((((USE_THM_THEN rot_size_cat)(rewrite [] [])) THEN ((USE_THM_THEN cat_take_drop)(rewrite [] []))) THEN (done_tac)))));;
let rotK = end_section_proof();;
(start_section_proof ["s1";"s2"](`rot n0 (s1:(A)list) = rot n0 s2 ==> s1 = s2`));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN can_inj)(fun fst_th ->(USE_THM_THEN rotK)(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(ISPEC_THEN (mk_var("s1",mk_type("list",[mk_vartype "A"]))) thm_tac))(ISPEC_THEN (mk_var("s2",mk_type("list",[mk_vartype "A"]))) thm_tac))MP_TAC) THEN BETA_TAC) THEN (done_tac)))));;
let rot_inj = end_section_proof();;
(start_section_proof ["x";"s"](`rot 1 (x :: s) = rcons s x`));;
refine (by (VALID (((((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THM_THEN ONE)(rewrite [] [])) THEN ((USE_THM_THEN drop_cons)(rewrite [] [])) THEN ((USE_THM_THEN take_cons)(rewrite [] [])) THEN ((USE_THM_THEN take0)(rewrite [] [])) THEN ((USE_THM_THEN drop0)(rewrite [] [])) THEN ((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
let rot1_cons = end_section_proof();;
let rot1_cons = finalize_theorem rot1_cons;;
let rot_inj = finalize_theorem rot_inj;;
let rotK = finalize_theorem rotK;;
let rot_size_cat = finalize_theorem rot_size_cat;;
let has_rot = finalize_theorem has_rot;;
let rot_size = finalize_theorem rot_size;;
let rot_oversize = finalize_theorem rot_oversize;;
let size_rot = finalize_theorem size_rot;;
let rot0 = finalize_theorem rot0;;
let take_nth = finalize_theorem take_nth;;
let drop_nth = finalize_theorem drop_nth;;
let nth_take = finalize_theorem nth_take;;
let nth_drop = finalize_theorem nth_drop;;
let takel_cat = finalize_theorem takel_cat;;
let take_size_cat = finalize_theorem take_size_cat;;
let take_cat = finalize_theorem take_cat;;
let size_take = finalize_theorem size_take;;
let size_takel = finalize_theorem size_takel;;
let cat_take_drop = finalize_theorem cat_take_drop;;
let congr1 = finalize_theorem congr1;;
let drop_rcons = finalize_theorem drop_rcons;;
let take_cons = finalize_theorem take_cons;;
let take_size = finalize_theorem take_size;;
let take_oversize = finalize_theorem take_oversize;;
let take0 = finalize_theorem take0;;
let nconsK = finalize_theorem nconsK;;
let drop_size_cat = finalize_theorem drop_size_cat;;
let drop_cat = finalize_theorem drop_cat;;
let size_drop = finalize_theorem size_drop;;
let drop_size = finalize_theorem drop_size;;
let drop_oversize = finalize_theorem drop_oversize;;
let drop1 = finalize_theorem drop1;;
let drop0 = finalize_theorem drop0;;
let drop_behead = finalize_theorem drop_behead;;
let drop_cons = finalize_theorem drop_cons;;
let drop0 = finalize_theorem drop0;;
let drop_nil = finalize_theorem drop_nil;;
let eq_ext = finalize_theorem eq_ext;;
let all_predI = finalize_theorem all_predI;;
let can_inj = finalize_theorem can_inj;;
let all_predC = finalize_theorem all_predC;;
let all_predT = finalize_theorem all_predT;;
let all_pred0 = finalize_theorem all_pred0;;
let has_predU = finalize_theorem has_predU;;
let has_predC = finalize_theorem has_predC;;
let has_predT = finalize_theorem has_predT;;
let has_pred0 = finalize_theorem has_pred0;;
let count_predC = finalize_theorem count_predC;;
let count_predUI = finalize_theorem count_predUI;;
let count_predT = finalize_theorem count_predT;;
let count_pred0 = finalize_theorem count_pred0;;
let filter_predI = finalize_theorem filter_predI;;
let filter_predT = finalize_theorem filter_predT;;
let filter_pred0 = finalize_theorem filter_pred0;;
let eq_all = finalize_theorem eq_all;;
let eq_has = finalize_theorem eq_has;;
let eq_count = finalize_theorem eq_count;;
let eq_filter = finalize_theorem eq_filter;;
let eq_find = finalize_theorem eq_find;;
let all_rcons = finalize_theorem all_rcons;;
let all_cat = finalize_theorem all_cat;;
let has_rcons = finalize_theorem has_rcons;;
let has_cat = finalize_theorem has_cat;;
let count_cat = finalize_theorem count_cat;;
let filter_rcons = finalize_theorem filter_rcons;;
let filter_cat = finalize_theorem filter_cat;;
let before_find = finalize_theorem before_find;;
let nth_find = finalize_theorem nth_find;;
let all_seq1 = finalize_theorem all_seq1;;
let all_nil = finalize_theorem all_nil;;
let has_seqb = finalize_theorem has_seqb;;
let has_seq1 = finalize_theorem has_seq1;;
let has_nil = finalize_theorem has_nil;;
let find_cat = finalize_theorem find_cat;;
let find_size = finalize_theorem find_size;;
let has_find = finalize_theorem has_find;;
let filter_id = finalize_theorem filter_id;;
let all_filterP = finalize_theorem all_filterP;;
let filter_all = finalize_theorem filter_all;;
let all_count = finalize_theorem all_count;;
let count_size = finalize_theorem count_size;;
let has_count = finalize_theorem has_count;;
let count_filter = finalize_theorem count_filter;;
let all_cons = finalize_theorem all_cons;;
let all_nil = finalize_theorem all_nil;;
let has_cons = finalize_theorem has_cons;;
let has_nil = finalize_theorem has_nil;;
let count_cons = finalize_theorem count_cons;;
let count_nil = finalize_theorem count_nil;;
let filter_cons = finalize_theorem filter_cons;;
let filter_nil = finalize_theorem filter_nil;;
let find_cons = finalize_theorem find_cons;;
let find_nil = finalize_theorem find_nil;;
let set_set_nth = finalize_theorem set_set_nth;;
let nth_set_nth = finalize_theorem nth_set_nth;;
let ltSS = finalize_theorem ltSS;;
let gtS0 = finalize_theorem gtS0;;
let eq0S = finalize_theorem eq0S;;
let eqS0 = finalize_theorem eqS0;;
let ltS0 = finalize_theorem ltS0;;
let set_nth_nil = finalize_theorem set_nth_nil;;
let size_set_nth = finalize_theorem size_set_nth;;
let eq_from_nth = finalize_theorem eq_from_nth;;
let nth_nseq = finalize_theorem nth_nseq;;
let nth_ncons = finalize_theorem nth_ncons;;
let nth_rcons = finalize_theorem nth_rcons;;
let nth_cat = finalize_theorem nth_cat;;
let nth_behead = finalize_theorem nth_behead;;
let nth_last = finalize_theorem nth_last;;
let last_nth = finalize_theorem last_nth;;
let nth_nil = finalize_theorem nth_nil;;
let nth_default = finalize_theorem nth_default;;
let nth0 = finalize_theorem nth0;;
let last_ind = finalize_theorem last_ind;;
let rcons_cat = finalize_theorem rcons_cat;;
let cat_rcons = finalize_theorem cat_rcons;;
let belast_rcons = finalize_theorem belast_rcons;;
let belast_cat = finalize_theorem belast_cat;;
let last_rcons = finalize_theorem last_rcons;;
let last_cat = finalize_theorem last_cat;;
let size_belast = finalize_theorem size_belast;;
let size_rcons = finalize_theorem size_rcons;;
let last_cons = finalize_theorem last_cons;;
let lastI = finalize_theorem lastI;;
let cats1 = finalize_theorem cats1;;
let rcons_cons = finalize_theorem rcons_cons;;
let size_cat = finalize_theorem size_cat;;
let catA = finalize_theorem catA;;
let cats0 = finalize_theorem cats0;;
let cat_nseq = finalize_theorem cat_nseq;;
let cat_cons = finalize_theorem cat_cons;;
let cat1s = finalize_theorem cat1s;;
let cat0s = finalize_theorem cat0s;;
let size_nseq = finalize_theorem size_nseq;;
let size_ncons = finalize_theorem size_ncons;;
let size_cons = finalize_theorem size_cons;;
let size_nil = finalize_theorem size_nil;;
let size_behead = finalize_theorem size_behead;;
let nilP = finalize_theorem nilP;;
let size0nil = finalize_theorem size0nil;;
(end_section "Sequences");;
let catrev = define `catrev (x :: s1) s2 = catrev s1 (x :: s2) /\ catrev [] s2 = s2`;;
let rev = new_definition `rev s = catrev s []`;;
(begin_section "Rev");;
(add_section_type (mk_var ("s", (`:(A)list`))); add_section_type (mk_var ("t", (`:(A)list`))));;
(start_section_proof ["s";"t";"u"](`catrev (s ++ t) u = catrev t (catrev s u)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("u",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "u") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let catrev_catl = end_section_proof();;
(start_section_proof ["s";"t";"u"](`catrev s (t ++ u) = catrev s t ++ u`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (BETA_TAC THEN (move ["t"])) THEN (((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THEN "IHs")(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let catrev_catr = end_section_proof();;
(start_section_proof ["s";"t"](`catrev s t = rev s ++ t`));;
refine (by (VALID (((((USE_THM_THEN rev)(rewrite [] [])) THEN ((USE_THM_THEN catrev_catr)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let catrevE = end_section_proof();;
(start_section_proof ["x";"s"](`rev (x :: s) = rcons (rev s) x`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN catrevE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rev)(rewrite [] []))) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let rev_cons = end_section_proof();;
(start_section_proof ["s"](`sizel (rev s) = sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN catrevE)(rewrite [] [])) THEN ((USE_THM_THEN cats1)(rewrite [] [])) THEN ((USE_THM_THEN size_rcons)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] []))) THEN (done_tac)))));;
let size_rev = end_section_proof();;
(start_section_proof ["s";"t"](`rev (s ++ t) = rev t ++ rev s`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN rev)(rewrite [] []))) THEN ((USE_THM_THEN catrev_catr)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN cat0s)(rewrite [] [])) THEN ((USE_THM_THEN catrev_catl)(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
let rev_cat = end_section_proof();;
(start_section_proof ["s";"x"](`rev (rcons s x) = x :: rev s`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rev_cat)(rewrite [] [])) THEN ((USE_THM_THEN rev)(rewrite [] []))) THEN (repeat_tactic 1 9 (((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th]))) THEN repeat_tactic 1 9 (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])))) THEN (done_tac)))));;
let rev_rcons = end_section_proof();;
(start_section_proof ["s"](`rev (rev s) = s`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) (repeat_tactic 1 9 (((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th]))) THEN repeat_tactic 1 9 (((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN rev_cons)(rewrite [] [])) THEN ((USE_THM_THEN rev_rcons)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let revK = end_section_proof();;
(start_section_proof ["x0";"n";"s"](`n < sizel s ==> nth x0 (rev s) n = nth x0 s (sizel s - SUC n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN BETA_TAC) THEN (((USE_THM_THEN (REWRITE_RULE[IMP_IMP] last_ind))MP_TAC) THEN (DISCH_THEN apply_tac))))));;
refine (by (VALID (((((USE_THM_THEN size_nil)(rewrite [] [])) THEN ((USE_THM_THEN ltn0)(rewrite [] [])) THEN (simp_tac)) THEN (move ["s"]) THEN (move ["x"]) THEN (move ["IHs"]) THEN (move ["n"])))));;
refine (by (VALID ((((USE_THM_THEN rev_rcons)(rewrite [] [])) THEN ((USE_THM_THEN size_rcons)(rewrite [] [])) THEN ((USE_THM_THEN ltnS)(rewrite [] [])) THEN ((USE_THM_THEN subSS)(rewrite [] [])) THEN ((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN nth_cat)(rewrite [] []))))));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) ((((USE_THM_THEN subn0)(rewrite [] [])) THEN ((USE_THM_THEN ltnn)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN subnn)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN nth0)(rewrite [] [])))) THEN ((USE_THM_THEN head)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac))))));;
refine (by (VALID ((BETA_TAC THEN (move ["lt_n_s"])))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN subnK)(fun fst_th ->(USE_THEN "lt_n_s")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (rewrite [2] []))) THEN ((USE_THM_THEN addSnnS)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leq_addr)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN ltE)(rewrite [] []))) THEN ((TRY done_tac))))));;
refine (by (VALID ((((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let nth_rev = end_section_proof();;
let nth_rev = finalize_theorem nth_rev;;
let revK = finalize_theorem revK;;
let rev_rcons = finalize_theorem rev_rcons;;
let rev_cat = finalize_theorem rev_cat;;
let size_rev = finalize_theorem size_rev;;
let rev_cons = finalize_theorem rev_cons;;
let catrevE = finalize_theorem catrevE;;
let catrev_catr = finalize_theorem catrev_catr;;
let catrev_catl = finalize_theorem catrev_catl;;
(end_section "Rev");;
(begin_section "EqSeq");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_var (mk_var ("x0", (`:A`))));;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(add_section_type (mk_var ("x", (`:A`))); add_section_type (mk_var ("y", (`:A`))); add_section_type (mk_var ("z", (`:A`))));;
(start_section_proof ["x1";"x2";"s1";"s2"](`((x1 :: s1) = x2 :: s2) <=> (x1 = x2 /\ s1 = s2)`));;
refine (by (VALID ((((USE_THM_THEN (injectivity "list"))(rewrite [] [])) THEN (done_tac)))));;
let eqseq_cons = end_section_proof();;
(start_section_proof ["s1";"s2";"s3";"s4"](`sizel s1 = sizel s2 ==> (s1 ++ s3 = s2 ++ s4 <=> (s1 = s2 /\ s3 = s4))`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "?1442720"])))) THEN (clear_assumption "s2") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1442720"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x1"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["x2"]) THEN (move ["s2"]) THEN (move ["_"]))]) THEN (repeat_tactic 1 9 (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THENL [(arith_tac); (arith_tac); BETA_TAC]))));;
refine (by (VALID (((((USE_THM_THEN eqSS)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN eqseq_cons)(rewrite [] []))) THEN ((USE_THM_THEN andbA)(GSYM_THEN (rewrite [] [])))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eqseq_cat = end_section_proof();;
(start_section_proof ["s1";"s2";"x1";"x2"](`(rcons s1 x1 = rcons s2 x2) <=> (s1 = s2 /\ x1 = x2)`));;
refine (by (VALID (((THENL_ROT (-1)) (((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "?1442761"])))) THEN (clear_assumption "s2") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1442761"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["y1"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y2"]) THEN (move ["s2"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN eqseq_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN andbA)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "?1442761"])))) THEN (clear_assumption "s2") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s2"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1442761"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["xx"]) THEN (move ["ss"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let eqseq_rcons = end_section_proof();;
(start_section_proof ["a";"s"](`has a s <=> ~(filter a s = [])`));;
refine (by (VALID ((((USE_THM_THEN has_count)(rewrite [] [])) THEN ((USE_THM_THEN count_filter)(rewrite [] []))))));;
refine (by (VALID ((set_tac "l" (`filter a s`)))));;
refine (by (VALID (((((USE_THEN "l_def")MP_TAC) THEN (clear_assumption "l_def") THEN (disch_tm_tac [](mk_var("l",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "l") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["l"]) THEN (move ["_"]))]) THEN (BETA_TAC THEN (move ["_"])) THEN (repeat_tactic 0 10 (((USE_THM_THEN size_nil)(rewrite [] []))) THEN (simp_tac) THEN repeat_tactic 0 10 (((USE_THM_THEN ltnn)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(rewrite [] [])))))));;
refine (by (VALID (((((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN gtS0)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let has_filter = end_section_proof();;
(start_section_proof ["s"](`(sizel s = 0) <=> (s = [])`));;
refine (by (VALID ((((split_tac) THENL [ALL_TAC; (DISCH_THEN(rewrite [] []))]) THEN (repeat_tactic 0 10 (((USE_THM_THEN size_nil)(rewrite [] []))) THEN ((TRY done_tac))) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN size0nil)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let size_eq0 = end_section_proof();;
parse_as_infix("<-", (11, "right"));;
override_interface("<-", `MEM`);;
(start_section_proof ["y";"s";"x"](`(x <- y :: s) <=> (x = y \/ x <- s)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN MEM)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let in_cons = end_section_proof();;
(start_section_proof ["x"](`(x <- []) = F`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN MEM)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let in_nil = end_section_proof();;
(start_section_proof ["x";"y"](`(x <- [y]) <=> (x = y)`));;
refine (by (VALID (((((USE_THM_THEN in_cons)(rewrite [] [])) THEN ((USE_THM_THEN in_nil)(rewrite [] [])) THEN ((USE_THM_THEN orbF)(rewrite [] []))) THEN (done_tac)))));;
let mem_seq1 = end_section_proof();;
(start_section_proof ["x";"y1";"y2"](`(x <- [y1; y2]) <=> (x = y1 \/ x = y2)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THM_THEN in_nil)(rewrite [] [])) THEN ((USE_THM_THEN orbF)(rewrite [] []))) THEN (done_tac)))));;
let mem_seq2 = end_section_proof();;
(start_section_proof ["x";"y1";"y2";"y3"](`(x <- [y1; y2; y3]) <=> (x = y1 \/ x = y2 \/ x = y3)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THM_THEN in_nil)(rewrite [] [])) THEN ((USE_THM_THEN orbF)(rewrite [] []))) THEN (done_tac)))));;
let mem_seq3 = end_section_proof();;
(start_section_proof ["x";"y1";"y2";"y3";"y4"](`(x <- [y1; y2; y3; y4]) <=> (x = y1 \/ x = y2 \/ x = y3 \/ x = y4)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THM_THEN in_nil)(rewrite [] [])) THEN ((USE_THM_THEN orbF)(rewrite [] []))) THEN (done_tac)))));;
let mem_seq4 = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`(x <- s1 ++ s2) <=> (x <- s1 \/ x <- s2)`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) ((((USE_THM_THEN cat0s)(rewrite [] [])) THEN ((USE_THM_THEN in_nil)(rewrite [] [])) THEN ((USE_THM_THEN orFb)(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN cat_cons)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN orbA)(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
let mem_cat = end_section_proof();;
(start_section_proof ["s";"y"](`!x. x <- rcons s y <=> x <- y :: s`));;
refine (by (VALID (((BETA_TAC THEN (move ["x"])) THEN (((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN (simp_tac) THEN ((USE_THM_THEN mem_cat)(rewrite [] [])) THEN ((USE_THM_THEN mem_seq1)(rewrite [] [])) THEN ((USE_THM_THEN orbC)(rewrite [] [])) THEN ((USE_THM_THEN in_cons)(rewrite [] []))) THEN (done_tac)))));;
let mem_rcons = end_section_proof();;
(start_section_proof ["x";"s"](`x <- x :: s`));;
refine (by (VALID (((((USE_THM_THEN in_cons)(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let mem_head = end_section_proof();;
(start_section_proof ["x";"s"](`last x s <- x :: s`));;
refine (by (VALID (((((USE_THM_THEN lastI)(rewrite [] [])) THEN ((USE_THM_THEN mem_rcons)(rewrite [] [])) THEN ((USE_THM_THEN mem_head)(rewrite [] []))) THEN (done_tac)))));;
let mem_last = end_section_proof();;
(start_section_proof ["s"](`!x. x <- behead s ==> x <- s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["_"]) THEN (move ["x"]))]) THEN (((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN in_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let mem_behead = end_section_proof();;
(start_section_proof ["s";"y"](`!x. x <- belast y s ==> x <- y :: s`));;
refine (by (VALID (((BETA_TAC THEN (move ["x"]) THEN (move ["ys'x"])) THEN (((USE_THM_THEN lastI)(rewrite [] [])) THEN ((USE_THM_THEN mem_rcons)(rewrite [] [])) THEN ((USE_THM_THEN mem_behead)(rewrite [] []))) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let mem_belast = end_section_proof();;
(start_section_proof ["s";"n"](`n < sizel s ==> nth x0 s n <- s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN mem_head)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN (move ["sz_s"])))));;
refine (by (VALID ((((USE_THM_THEN mem_behead)(rewrite [] [])) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN (done_tac)))));;
let mem_nth = end_section_proof();;
(start_section_proof ["s";"x"](`x <- take n0 s ==> x <- s`));;
refine (by (VALID (((BETA_TAC THEN (move ["s0x"])) THEN (((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN mem_cat)(rewrite [] []))) THEN (done_tac)))));;
let mem_take = end_section_proof();;
(start_section_proof ["s";"x"](`x <- dropl n0 s ==> x <- s`));;
refine (by (VALID (((BETA_TAC THEN (move ["s0'x"])) THEN (((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN mem_cat)(rewrite [] []))) THEN (done_tac)))));;
let mem_drop = end_section_proof();;
(start_section_proof ["s"](`!x. x <- rev s <=> x <- s`));;
refine (by (VALID (((THENL_FIRST) ((BETA_TAC THEN (move ["y"])) THEN ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))])) ((((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN rev_cons)(rewrite [] [])) THEN ((USE_THM_THEN mem_rcons)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let mem_rev = end_section_proof();;
(begin_section "Filters");;
(add_section_var (mk_var ("a", (`:A -> bool`))));;
(start_section_proof ["s"](`(?x. x <- s /\ a x) <=> has a s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th]))))))));;
refine (by (VALID (((THENL_FIRST) (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) y`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["ay"])) ((exists_tac (mk_var("y",mk_vartype "A"))) THEN ((USE_THM_THEN mem_head)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((THENL_ROT (-1)) (((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN ((split_tac) THEN ALL_TAC THEN (case THEN ((move ["x"]) THEN (case THEN ((move ["ysx"]) THEN (move ["ax"])))))))))));;
refine (by (VALID (((exists_tac (mk_var("x",mk_vartype "A"))) THEN (((USE_THM_THEN mem_behead)(rewrite [] [])) THEN ((TRY done_tac))) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
refine (by (VALID (((exists_tac (mk_var("x",mk_vartype "A"))) THEN (((USE_THEN "ysx")MP_TAC) THEN (clear_assumption "ysx") THEN BETA_TAC) THEN ((USE_THM_THEN in_cons)(rewrite [] []))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y:A`) thm_tac))MP_TAC) THEN case THEN ((simp_tac THEN TRY done_tac)) THEN (move ["xy"])))));;
refine (by (VALID (((((USE_THEN "ax")MP_TAC) THEN (clear_assumption "ax") THEN BETA_TAC) THEN (((USE_THEN "xy")(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THEN "ay")(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let hasP = end_section_proof();;
(start_section_proof ["s"](`(!x. x <- s ==> ~(a x)) <=> ~has a s`));;
refine (by (VALID (((THENL_ROT (1)) ((split_tac) THEN (move ["not_a_s"]))))));;
refine (by (VALID (((BETA_TAC THEN (move ["x"]) THEN (move ["s_x"])) THEN (((USE_THEN "not_a_s")MP_TAC) THEN (clear_assumption "not_a_s") THEN ((USE_THM_THEN contra)MP_TAC) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac) THEN (move ["a_x"]))))));;
refine (by (VALID ((((USE_THM_THEN hasP)(GSYM_THEN (rewrite [] []))) THEN (exists_tac (mk_var("x",mk_vartype "A"))) THEN (done_tac)))));;
refine (by (VALID ((((((USE_THM_THEN hasP)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN implybF)(GSYM_THEN (rewrite [] [])))) THEN (case THEN ((move ["x"]) THEN (case THEN (move ["s_x"]))))) THEN ((USE_THM_THEN implybF)(rewrite [] [])) THEN (((USE_THEN "not_a_s")MP_TAC) THEN (clear_assumption "not_a_s") THEN (exact_tac)) THEN (done_tac)))));;
let hasPn = end_section_proof();;
(start_section_proof ["s"](`(!x. x <- s ==> a x) <=> (all a s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((THENL_ROT (-1)) ((((USE_THM_THEN andbC)(rewrite [] [])) THEN ((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN in_cons)(rewrite [] []))) THEN (split_tac))))));;
refine (by (VALID ((BETA_TAC THEN (case THEN ((move ["h"]) THEN (move ["ax"]))) THEN (move ["y"]) THEN (case THENL [((DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac))); (move ["ys"])])))));;
refine (by (VALID ((((USE_THEN "h")MP_TAC) THEN (clear_assumption "h") THEN (exact_tac)))));;
refine (by (VALID ((BETA_TAC THEN (move ["h"])))));;
refine (by (VALID (((THENL_FIRST) (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) x`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) (BETA_TAC THEN (move ["ax"]))))));;
refine (by (VALID ((((((USE_THEN "ax")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (move ["y"]) THEN (move ["ys"])) THEN (((USE_THEN "h")MP_TAC) THEN (clear_assumption "h") THEN (exact_tac)) THEN (done_tac)))));;
refine (by (VALID ((((USE_THEN "h")MP_TAC) THEN (clear_assumption "h") THEN (exact_tac)))));;
let allP = end_section_proof();;
(start_section_proof ["s"](`(?x. x <- s /\ ~a x) <=> ~all a s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN in_cons)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((USE_THM_THEN andbC)(rewrite [] [])) THEN ((USE_THM_THEN negb_and)(rewrite [] [])) THEN ((USE_THEN "IHs")(GSYM_THEN (rewrite [] [])))) THEN (split_tac)))));;
refine (by (VALID ((BETA_TAC THEN (case THEN ((move ["y"]) THEN (case THEN ((move ["ay"]) THEN (case THENL [(move ["eq"]); (move ["mem"])])))))))));;
refine (by (VALID (((((USE_THEN "ay")MP_TAC) THEN (clear_assumption "ay") THEN BETA_TAC) THEN (((USE_THEN "eq")(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((DISJ2_TAC) THEN (exists_tac (mk_var("y",mk_vartype "A"))) THEN (done_tac)))));;
refine (by (VALID (((THENL_FIRST) (case THENL [(move ["nax"]); (case THEN ((move ["y"]) THEN (case THEN ((move ["ys"]) THEN (move ["nay"])))))]) (((exists_tac (mk_var("x",mk_vartype "A"))) THEN (simp_tac)) THEN (done_tac))))));;
refine (by (VALID (((exists_tac (mk_var("y",mk_vartype "A"))) THEN (done_tac)))));;
let allPn = end_section_proof();;
(start_section_proof ["x";"s"](`(x <- filter a s) <=> (a x /\ x <- s)`));;
refine (by (VALID ((((USE_THM_THEN andbC)(rewrite [] [])) THEN ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN MEM)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((USE_THM_THEN fun_if)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] []))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`(a:A->bool) y`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["ay"])) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y:A`) thm_tac))MP_TAC) THEN case THEN ((simp_tac THEN TRY done_tac))) THEN (done_tac)))));;
let mem_filter = end_section_proof();;
let mem_filter = finalize_theorem mem_filter;;
let allPn = finalize_theorem allPn;;
let allP = finalize_theorem allP;;
let hasPn = finalize_theorem hasPn;;
let hasP = finalize_theorem hasP;;
(end_section "Filters");;
(start_section_proof ["a1";"a2";"s"](`(!x. x <- s ==> a1 x = a2 x) ==> filter a1 s = filter a2 s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN ((((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (move ["eq_a"]))))));;
refine (by (VALID (((((USE_THEN "eq_a")(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN mem_head)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THEN "IHs")(rewrite [] []))) THEN ((TRY done_tac))) THEN (move ["y"]) THEN (move ["s_y"])))));;
refine (by (VALID (((((USE_THEN "eq_a")MP_TAC) THEN (clear_assumption "eq_a") THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN mem_behead)(rewrite [] [])) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let eq_in_filter = end_section_proof();;
(start_section_proof ["s1";"s2"](`(!x. x <- s1 <=> x <- s2) ==> (!a. has a s1 <=> has a s2)`));;
refine (by (VALID ((BETA_TAC THEN (move ["Es12"]) THEN (move ["a"])))));;
refine (by (VALID (((split_tac) THEN (repeat_tactic 1 9 (((USE_THM_THEN hasP)(GSYM_THEN (rewrite [] [])))) THEN ALL_TAC THEN (case THEN ((move ["x"]) THEN (case THEN ((move ["Hx"]) THEN (move ["Hax"]))))))))));;
refine (by (VALID (((exists_tac (mk_var("x",mk_vartype "?1443274"))) THEN ((USE_THEN "Es12")(GSYM_THEN (rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((exists_tac (mk_var("x",mk_vartype "?1443274"))) THEN ((USE_THEN "Es12")(rewrite [] [])) THEN (done_tac)))));;
let eq_has_r = end_section_proof();;
(start_section_proof ["s1";"s2"](`(!x. x <- s1 <=> x <- s2) ==> (!a. all a s1 = all a s2)`));;
refine (by (VALID (((BETA_TAC THEN (move ["Es12"]) THEN (move ["a"])) THEN repeat_tactic 1 9 (((USE_THM_THEN allP)(GSYM_THEN (rewrite [] [])))) THEN ((split_tac) THEN (move ["Hs"]) THEN (move ["x"]) THEN (move ["Hx"]))))));;
refine (by (VALID (((((USE_THEN "Hs")MP_TAC) THEN (clear_assumption "Hs") THEN (DISCH_THEN apply_tac)) THEN ((USE_THEN "Es12")(rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "Hs")MP_TAC) THEN (clear_assumption "Hs") THEN (DISCH_THEN apply_tac)) THEN ((USE_THEN "Es12")(GSYM_THEN (rewrite [] []))) THEN (done_tac)))));;
let eq_all_r = end_section_proof();;
(start_section_proof ["s1";"s2"](`has (\x. x <- s1) s2 = has (\x. x <- s2) s1`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN hasP)(GSYM_THEN (rewrite [] [])))) THEN (simp_tac) THEN ((USE_THM_THEN andbC)(rewrite [] []))) THEN (done_tac)))));;
let has_sym = end_section_proof();;
(start_section_proof ["x";"s"](`has (pred1 x) s <=> x <- s`));;
refine (by (VALID (((((USE_THM_THEN hasP)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN pred1)(rewrite [] [])) THEN (simp_tac)) THEN ((split_tac) THENL [((case THEN ((move ["y"]) THEN (case THEN ((move ["ys"]) THEN (DISCH_THEN(GSYM_THEN (rewrite [] []))))))) THEN ((TRY done_tac))); (move ["xs"])])))));;
refine (by (VALID (((exists_tac (mk_var("x",mk_vartype "A"))) THEN (done_tac)))));;
let has_pred1 = end_section_proof();;
let constant = define `constant [] = T /\ constant (CONS x s') = all (pred1 x) s'`;;
(start_section_proof ["x";"s"](`(s = nseq (sizel s) x) <=> (all (pred1 x) s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN eqseq_cons)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((THENL_ROT (-1)) (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THENL [(DISCH_THEN(GSYM_THEN (rewrite [] []))); (move ["ne_xy"])])))));;
refine (by (VALID (((((USE_THM_THEN pred1)(rewrite [] [])) THEN (simp_tac)) THEN (((USE_THEN "ne_xy")(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN andFb)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN pred1)(rewrite [1] [])) THEN (simp_tac) THEN ((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN nseq)(rewrite [] [])) THEN ((USE_THM_THEN ncons)(rewrite [] []))) THEN (done_tac)))));;
let all_pred1P = end_section_proof();;
(start_section_proof ["x";"s"](`all (pred1 x) s ==> constant s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim) THEN (((USE_THM_THEN constant)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let all_pred1_constant = end_section_proof();;
(start_section_proof ["x";"y";"n"](`all (pred1 x) (nseq n y) <=> (n = 0 \/ x = y)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((simp_tac THEN TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN eq_sym)(rewrite [] [(`y = x`)])) THEN ((USE_THM_THEN eqS0)(rewrite [] [])) THEN ((USE_THM_THEN orFb)(rewrite [] []))) THEN (((USE_THM_THEN andb_idr)MP_TAC) THEN (clear_assumption "andb_idr") THEN (DISCH_THEN apply_tac) THEN (DISCH_THEN(rewrite [] [])))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let all_pred1_nseq = end_section_proof();;
(start_section_proof ["n";"x"](`constant (nseq n x)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN constant)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN ncons)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN nseq)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN all_pred1_nseq)(rewrite [] []))) THEN (done_tac)))));;
let constant_nseq = end_section_proof();;
(start_section_proof ["s"](`(?x. s = nseq (sizel s) x) <=> (constant s)`));;
refine (by (VALID (((THENL_FIRST) ((split_tac) THENL [(case THEN ((move ["x"]) THEN (DISCH_THEN(rewrite [] [])))); ALL_TAC]) (((USE_THM_THEN constant_nseq)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((THENL_FIRST) (((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN constant)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))) ((EXISTS_TAC `x0:A`) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN all_pred1P)(GSYM_THEN (rewrite [] []))) THEN (move ["def_s"])) THEN (exists_tac (mk_var("x",mk_vartype "A")))))));;
refine (by (VALID ((((USE_THEN "def_s")(rewrite [1] [])) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let constantP = end_section_proof();;
let uniq = define `uniq [] = T /\ (uniq (x :: s') <=> ~(MEM x s') /\ uniq s')`;;
(start_section_proof [](`uniq ([]:(A)list)`));;
refine (by (VALID ((((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let nil_uniq = end_section_proof();;
(start_section_proof ["x";"s"](`uniq (x :: s) <=> ~(x <- s) /\ uniq s`));;
refine (by (VALID ((((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let cons_uniq = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq (s1 ++ s2) <=> uniq s1 /\ ~ has (\x. x <- s1) s2 /\ uniq s2`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1443522"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) ((((USE_THM_THEN in_nil)(rewrite [] [])) THEN ((USE_THM_THEN pred0)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN has_pred0)(rewrite [] [])) THEN ((USE_THM_THEN cat0s)(rewrite [] [])) THEN ((USE_THM_THEN nil_uniq)(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((USE_THM_THEN has_sym)(rewrite [] [])) THEN ((USE_THM_THEN cat_cons)(rewrite [] [])) THEN ((USE_THM_THEN cons_uniq)(rewrite [] [])) THEN ((USE_THM_THEN mem_cat)(rewrite [] [])) THEN ((USE_THM_THEN has_cons)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN negb_or)(rewrite [] []))) THEN ((USE_THM_THEN has_sym)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN cons_uniq)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN andbA)(rewrite [] []))) THEN (simp_tac)))));;
refine (by (VALID ((((USE_THM_THEN andbAC)(rewrite [] [(`_ /\ uniq s1`)])) THEN (done_tac)))));;
let cat_uniq = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq (s1 ++ s2) = uniq (s2 ++ s1)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN cat_uniq)(rewrite [] []))) THEN ((USE_THM_THEN has_sym)(rewrite [] [])) THEN ((USE_THM_THEN andbCA)(rewrite [] [])) THEN ((USE_THM_THEN andbA)(rewrite [] [])) THEN ((USE_THM_THEN andbC)(rewrite [] []))) THEN (done_tac)))));;
let uniq_catC = end_section_proof();;
(start_section_proof ["s1";"s2";"s3"](`uniq (s1 ++ s2 ++ s3) = uniq (s2 ++ s1 ++ s3)`));;
refine (by (VALID (repeat_tactic 1 9 (((USE_THM_THEN catA)(rewrite [] []))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN uniq_catC)(GSYM_THEN (rewrite [] [(`uniq (cat _ s3)`)])))) THEN repeat_tactic 1 9 (((USE_THM_THEN cat_uniq)(rewrite [] [(`uniq (cat s3 _)`)]))) THEN ((USE_THM_THEN uniq_catC)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN has_cat)(rewrite [] []))) THEN ((USE_THM_THEN orbC)(rewrite [] []))) THEN (done_tac)))));;
let uniq_catCA = end_section_proof();;
(start_section_proof ["s";"x"](`uniq (rcons s x) <=> (~(x <- s) /\ uniq s)`));;
refine (by (VALID (((((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN uniq_catC)(rewrite [] [])) THEN ((USE_THM_THEN cat_cons)(rewrite [] [])) THEN ((USE_THM_THEN cons_uniq)(rewrite [] [])) THEN ((USE_THM_THEN cat0s)(rewrite [] []))) THEN (done_tac)))));;
let rcons_uniq = end_section_proof();;
(start_section_proof ["s";"a"](`uniq s ==> uniq (filter a s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((THENL_ROT (-1)) ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`a x`) thm_tac))MP_TAC) THEN case THENL [((DISCH_THEN(rewrite [] [])) THEN (simp_tac)); (move ["nax"])]) THEN (BETA_TAC THEN (case THEN ((move ["Hx"]) THEN (move ["Hs"])))))))));;
refine (by (VALID (((((USE_THEN "nax")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (((USE_THEN "IHs")MP_TAC) THEN (clear_assumption "IHs") THEN (exact_tac)) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (((USE_THM_THEN mem_filter)(rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN negbTE)(fun fst_th ->(USE_THEN "Hx")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN ((USE_THM_THEN andbF)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let filter_uniq = end_section_proof();;
(start_section_proof ["s"](`uniq (rot n0 s) = uniq s`));;
refine (by (VALID (((((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THM_THEN uniq_catC)(rewrite [] [])) THEN ((USE_THM_THEN cat_take_drop)(rewrite [] []))) THEN (done_tac)))));;
let rot_uniq = end_section_proof();;
(start_section_proof ["s"](`uniq (rev s) = uniq s`));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) ((((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN rev_cons)(rewrite [] [])) THEN ((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN cat_uniq)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN cons_uniq)(rewrite [] []))) THEN ((USE_THM_THEN has_cons)(rewrite [] [])) THEN ((USE_THM_THEN in_nil)(rewrite [] [])) THEN ((USE_THM_THEN nil_uniq)(rewrite [] [])) THEN ((USE_THM_THEN has_nil)(rewrite [] [])) THEN ((USE_THM_THEN negb_or)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN andbC)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN mem_rev)(rewrite [] []))) THEN (done_tac)))));;
let rev_uniq = end_section_proof();;
(start_section_proof ["s";"x"](`uniq s ==> count (pred1 x) s = if (x <- s) then 1 else 0`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID ((((((USE_THM_THEN in_cons)(rewrite [] [])) THEN ((USE_THM_THEN cons_uniq)(rewrite [] []))) THEN ALL_TAC THEN (case THEN (move ["Hy"]))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] [])))))));;
refine (by (VALID ((((USE_THM_THEN pred1)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN eq_sym)(rewrite [] [(`y = x`)]))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THENL [((DISCH_THEN(rewrite [] [])) THEN (simp_tac)); ALL_TAC]) THEN (((USE_THEN "Hy")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN addn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((USE_THM_THEN add0n)(rewrite [] [])) THEN (done_tac)))));;
let count_uniq_mem = end_section_proof();;
let undup = define `undup [] = [] /\ 
	undup (x :: s') = if x <- s' then undup s' else x :: undup s'`;;
(start_section_proof ["s"](`sizel (undup s) <= sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN undup)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN leqnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x <- s`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THEN (repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN leqSS)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltnW)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] []))) THEN (done_tac)))));;
let size_undup = end_section_proof();;
(start_section_proof ["s"](`!x. x <- undup s <=> x <- s`));;
refine (by (VALID (((BETA_TAC THEN (move ["x"])) THEN ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN undup)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`y <- s`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["Hy"])) THEN (((USE_THM_THEN in_cons)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (((USE_THM_THEN MEM)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THEN (done_tac)))));;
let mem_undup = end_section_proof();;
(start_section_proof ["s"](`uniq (undup s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN undup)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x <- s`) thm_tac))MP_TAC) THEN case) THEN (((simp_tac THEN TRY done_tac)) THEN ((USE_THM_THEN cons_uniq)(rewrite [] [])) THEN ((USE_THM_THEN mem_undup)(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let undup_uniq = end_section_proof();;
(start_section_proof ["s"](`uniq s ==> undup s = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN ((((USE_THM_THEN undup)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((simp_tac THEN TRY done_tac))) THEN ALL_TAC THEN (case THEN ((move ["Hx"]) THEN (move ["Hs"]))))))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN (done_tac)))));;
let undup_id = end_section_proof();;
(start_section_proof ["s"](`(sizel (undup s) < sizel s) <=> ~ uniq s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN undup)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x <- s`) thm_tac))MP_TAC) THEN case) THEN (((simp_tac THEN TRY done_tac)) THEN repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN ltSS)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltnS)(rewrite [] [])) THEN ((USE_THM_THEN size_undup)(rewrite [] []))) THEN (done_tac)))));;
let ltn_size_undup = end_section_proof();;
let index = new_definition `indexl x = find (pred1 x)`;;
(start_section_proof ["x";"s"](`indexl x s <= sizel s`));;
refine (by (VALID (((((USE_THM_THEN index)(rewrite [] [])) THEN ((USE_THM_THEN find_size)(rewrite [] []))) THEN (done_tac)))));;
let index_size = end_section_proof();;
(start_section_proof ["x";"s"](`(indexl x s < sizel s) <=> (x <- s)`));;
refine (by (VALID (((((USE_THM_THEN has_pred1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN index)(rewrite [] [])) THEN ((USE_THM_THEN has_find)(rewrite [] []))) THEN (done_tac)))));;
let index_mem = end_section_proof();;
(start_section_proof ["x";"s"](`x <- s ==> nth x0 s (indexl x s) = x`));;
refine (by (VALID ((((USE_THM_THEN has_pred1)(GSYM_THEN (rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (fun thm_tac -> (USE_THM_THEN nth_find)(ISPEC_THEN (mk_var("x0",mk_vartype "A")) thm_tac))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (((USE_THM_THEN index)(rewrite [] [])) THEN ((USE_THM_THEN pred1)(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let nth_index = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`indexl x (s1 ++ s2) = if x <- s1 then indexl x s1 else sizel s1 + indexl x s2`));;
refine (by (VALID (((((USE_THM_THEN index)(rewrite [] [])) THEN ((USE_THM_THEN find_cat)(rewrite [] [])) THEN ((USE_THM_THEN has_pred1)(rewrite [] []))) THEN (done_tac)))));;
let index_cat = end_section_proof();;
(start_section_proof ["i";"s"](`i < sizel s ==> uniq s ==> indexl (nth x0 s i) s = i`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["_"]))])))));;
refine (by (VALID (((((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN index)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltnS)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN cons_uniq)(rewrite [] []))) THEN (move ["lt_i_s"]) THEN (case THEN (move ["not_s_x"]))))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (fun thm_tac -> (fun thm_tac -> (USE_THEN "IHs")(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(fun fst_th ->(USE_THEN "lt_i_s")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN index)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (DISCH_THEN(rewrite [] [])) THEN (simp_tac))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = nth x0 s i`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["x_eq"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN mem_nth)(fun fst_th ->(USE_THEN "lt_i_s")(fun th -> MATCH_MP_THEN th thm_tac fst_th))) MP_TAC) THEN ALL_TAC) THEN (((USE_THEN "x_eq")(GSYM_THEN (rewrite [] []))) THEN ((fun thm_tac -> (USE_THM_THEN negbTE)(fun fst_th ->(USE_THEN "not_s_x")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] []))) THEN (done_tac)))));;
let index_uniq = end_section_proof();;
(start_section_proof ["x";"s"](`indexl x (x :: s) = 0`));;
refine (by (VALID (((((USE_THM_THEN index)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let index_head = end_section_proof();;
(start_section_proof ["x";"s"](`uniq (x :: s) ==> indexl (last x s) (x :: s) = sizel s`));;
refine (by (VALID ((((USE_THM_THEN lastI)(rewrite [] [])) THEN ((USE_THM_THEN rcons_uniq)(rewrite [] [])) THEN ((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN index_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_belast)(rewrite [] []))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`last x s <- belast x s`) thm_tac))MP_TAC) THEN case THEN (simp_tac)))));;
refine (by (VALID (((((USE_THM_THEN index)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN addn0)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let index_last = end_section_proof();;
(start_section_proof ["s";"i";"j"](`i < sizel s ==> j < sizel s ==> uniq s ==> (nth x0 s i = nth x0 s j) = (i = j)`));;
refine (by (VALID (((BETA_TAC THEN (move ["lt_i_s"]) THEN (move ["lt_j_s"]) THEN (move ["Us"])) THEN ((split_tac) THENL [(move ["eq_sij"]); ((DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac)))])))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN index_uniq)(fun fst_th ->(USE_THEN "lt_i_s")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(fun fst_th ->(USE_THEN "Us")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "eq_sij")(rewrite [] [])) THEN ((USE_THM_THEN index_uniq)(rewrite [] []))) THEN (done_tac)))));;
let nth_uniq = end_section_proof();;
(start_section_proof ["s"](`!x. x <- rot n0 s <=> x <- s`));;
refine (by (VALID (((BETA_TAC THEN (move ["x"])) THEN (((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [2] [(`s`)]))) THEN ((USE_THM_THEN rot)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN mem_cat)(rewrite [] []))) THEN ((USE_THM_THEN orbC)(rewrite [] []))) THEN (done_tac)))));;
let mem_rot = end_section_proof();;
(start_section_proof ["s1";"s2"](`(rot n0 s1 = rot n0 s2) <=> (s1 = s2)`));;
refine (by (VALID ((((split_tac) THENL [ALL_TAC; ((DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac)))]) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN rot_inj)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let eqseq_rot = end_section_proof();;
(start_section_proof ["s";"x"](`x <- s ==> ?i s'. rot i s = x :: s'`));;
refine (by (VALID (((BETA_TAC THEN (move ["s_x"])) THEN (set_tac "i" (`indexl (x:A) s`))))));;
refine (by (VALID (((exists_tac (mk_var("i",mk_type("num",[])))) THEN (exists_tac (`dropl (SUC i) s ++ take i s`))))));;
refine (by (VALID (((((USE_THM_THEN cat_cons)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THEN "i_def")(GSYM_THEN (rewrite [] [])))) THEN (set_tac "r" (`take _1 _2`))))));;
refine (by (VALID ((((USE_THEN "r_def")MP_TAC) THEN (clear_assumption "r_def") THEN ((USE_THEN "i_def")MP_TAC) THEN (clear_assumption "i_def") THEN BETA_TAC THEN (move ["_"]) THEN (move ["_"])))));;
refine (by (VALID (((((USE_THEN "s_x")MP_TAC) THEN (clear_assumption "s_x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (repeat_tactic 0 10 (((USE_THM_THEN in_nil)(rewrite [] []))) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((USE_THM_THEN in_cons)(rewrite [] [])) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THEN (simp_tac))))));;
refine (by (VALID ((((USE_THM_THEN index_head)(rewrite [] [])) THEN ((USE_THM_THEN drop0)(rewrite [] [])) THEN ((USE_THM_THEN drop_cons)(rewrite [] [])) THEN ((USE_THM_THEN drop0)(rewrite [] [])) THEN ((TRY done_tac))))));;
refine (by (VALID ((((((USE_THM_THEN index)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN pred1)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN index)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN drop_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (move ["_"])) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let rot_to = end_section_proof();;
let rot_to = finalize_theorem rot_to;;
let eqseq_rot = finalize_theorem eqseq_rot;;
let mem_rot = finalize_theorem mem_rot;;
let nth_uniq = finalize_theorem nth_uniq;;
let index_last = finalize_theorem index_last;;
let index_head = finalize_theorem index_head;;
let index_uniq = finalize_theorem index_uniq;;
let index_cat = finalize_theorem index_cat;;
let nth_index = finalize_theorem nth_index;;
let index_mem = finalize_theorem index_mem;;
let index_size = finalize_theorem index_size;;
let ltn_size_undup = finalize_theorem ltn_size_undup;;
let undup_id = finalize_theorem undup_id;;
let undup_uniq = finalize_theorem undup_uniq;;
let mem_undup = finalize_theorem mem_undup;;
let size_undup = finalize_theorem size_undup;;
let count_uniq_mem = finalize_theorem count_uniq_mem;;
let rev_uniq = finalize_theorem rev_uniq;;
let rot_uniq = finalize_theorem rot_uniq;;
let filter_uniq = finalize_theorem filter_uniq;;
let rcons_uniq = finalize_theorem rcons_uniq;;
let uniq_catCA = finalize_theorem uniq_catCA;;
let uniq_catC = finalize_theorem uniq_catC;;
let cat_uniq = finalize_theorem cat_uniq;;
let cons_uniq = finalize_theorem cons_uniq;;
let nil_uniq = finalize_theorem nil_uniq;;
let constantP = finalize_theorem constantP;;
let constant_nseq = finalize_theorem constant_nseq;;
let all_pred1_nseq = finalize_theorem all_pred1_nseq;;
let all_pred1_constant = finalize_theorem all_pred1_constant;;
let all_pred1P = finalize_theorem all_pred1P;;
let has_pred1 = finalize_theorem has_pred1;;
let has_sym = finalize_theorem has_sym;;
let eq_all_r = finalize_theorem eq_all_r;;
let eq_has_r = finalize_theorem eq_has_r;;
let eq_in_filter = finalize_theorem eq_in_filter;;
let mem_filter = finalize_theorem mem_filter;;
let allPn = finalize_theorem allPn;;
let allP = finalize_theorem allP;;
let hasPn = finalize_theorem hasPn;;
let hasP = finalize_theorem hasP;;
let mem_rev = finalize_theorem mem_rev;;
let mem_drop = finalize_theorem mem_drop;;
let mem_take = finalize_theorem mem_take;;
let mem_nth = finalize_theorem mem_nth;;
let mem_belast = finalize_theorem mem_belast;;
let mem_behead = finalize_theorem mem_behead;;
let mem_last = finalize_theorem mem_last;;
let mem_head = finalize_theorem mem_head;;
let mem_rcons = finalize_theorem mem_rcons;;
let mem_cat = finalize_theorem mem_cat;;
let mem_seq4 = finalize_theorem mem_seq4;;
let mem_seq3 = finalize_theorem mem_seq3;;
let mem_seq2 = finalize_theorem mem_seq2;;
let mem_seq1 = finalize_theorem mem_seq1;;
let in_nil = finalize_theorem in_nil;;
let in_cons = finalize_theorem in_cons;;
let size_eq0 = finalize_theorem size_eq0;;
let has_filter = finalize_theorem has_filter;;
let eqseq_rcons = finalize_theorem eqseq_rcons;;
let eqseq_cat = finalize_theorem eqseq_cat;;
let eqseq_cons = finalize_theorem eqseq_cons;;
(end_section "EqSeq");;
(begin_section "NseqthTheory");;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(start_section_proof ["s";"x";"x0"](`(?i. i < sizel s /\ nth x0 s i = x) <=> (x <- s)`));;
refine (by (VALID (((THENL_FIRST) ((split_tac) THENL [(case THEN ((move ["n"]) THEN (case THEN ((move ["Hn"]) THEN (DISCH_THEN(GSYM_THEN (rewrite [] []))))))); (move ["Hx"])]) ((((USE_THM_THEN mem_nth)MP_TAC) THEN (clear_assumption "mem_nth") THEN (DISCH_THEN apply_tac)) THEN (done_tac))))));;
refine (by (VALID (((exists_tac (`indexl x s`)) THEN (((USE_THM_THEN index_mem)(rewrite [] [])) THEN ((USE_THEN "Hx")(rewrite [] [])) THEN ((USE_THM_THEN andTb)(rewrite [] []))) THEN (((USE_THM_THEN nth_index)MP_TAC) THEN (clear_assumption "nth_index") THEN (DISCH_THEN apply_tac)) THEN (done_tac)))));;
let nthP = end_section_proof();;
(start_section_proof ["a";"s";"x0"](`(?i. i < sizel s /\ a (nth x0 s i)) <=> (has a s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN andFb)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`a x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["ax"])))));;
refine (by (VALID (((exists_tac (`0`)) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0Sn)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((THENL_ROT (-1)) (((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN ((split_tac) THENL [(case THEN ALL_TAC); (case THEN (move ["i"]))]))))));;
refine (by (VALID (((BETA_TAC THEN (case THEN ((move ["i_s"]) THEN (move ["anth"])))) THEN (exists_tac (`SUC i`)) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltSS)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((THENL_FIRST) ((elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["_"]))]) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th]))) (((USE_THEN "ax")(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac))))));;
refine (by (VALID ((((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN ALL_TAC THEN (case THEN ((move ["i_s"]) THEN (move ["anth"])))) THEN (exists_tac (mk_var("i",mk_type("num",[])))) THEN (done_tac)))));;
let has_nthP = end_section_proof();;
(start_section_proof ["a";"s";"x0"](`(!i. i < sizel s ==> a (nth x0 s i)) <=> (all a s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((TRY done_tac)))))));;
refine (by (VALID (((THENL_ROT (-1)) (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`a x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["ax"]))))));;
refine (by (VALID ((((USE_THM_THEN NOT_FORALL_THM)(rewrite [] [])) THEN (exists_tac (`0`)) THEN (((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltn0Sn)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THEN "IHs")(GSYM_THEN (rewrite [] []))) THEN ((split_tac) THEN (move ["IH"]) THEN (move ["i"]) THEN (move ["i_s"]))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "IH")(ISPEC_THEN (`SUC i`) thm_tac))MP_TAC) THEN BETA_TAC) THEN (((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN (exact_tac) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "i_s")MP_TAC) THEN (clear_assumption "i_s") THEN (disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN (((USE_THEN "IH")MP_TAC) THEN (clear_assumption "IH") THEN (DISCH_THEN apply_tac)) THEN (done_tac)))));;
let all_nthP = end_section_proof();;
let all_nthP = finalize_theorem all_nthP;;
let has_nthP = finalize_theorem has_nthP;;
let nthP = finalize_theorem nthP;;
(end_section "NseqthTheory");;
(start_section_proof ["s";"y0";"x0";"n"](`n < sizel s ==> nth (x0:A) s n = nth y0 s n`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s'"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (done_tac)))));;
let set_nth_default = end_section_proof();;
(start_section_proof ["s";"x"](`rcons s x = headl x s :: behead (rcons s (x:A))`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["s"]) THEN (move ["x"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN head)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let headI = end_section_proof();;
let incr_nth = define `incr_nth (n :: v') (SUC i) = n :: incr_nth v' i /\
	incr_nth (n :: v') 0 = SUC n :: v' /\
	incr_nth [] i = ncons i 0 [1]`;;
(start_section_proof ["v";"i";"j"](`nth 0 (incr_nth v i) j = (if (i = j) then 1 else 0) + nth 0 v j`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("j",mk_type("num",[])))) THEN (clear_assumption "j") THEN (disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN (disch_tm_tac [](mk_var("v",mk_type("list",[mk_type("num",[])])))) THEN (clear_assumption "v") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["v"]) THEN (move ["IHv"]))]) THEN (elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["_"]))]) THEN (elim THENL [ALL_TAC; ((move ["j"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN incr_nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN addn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN eqS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN add1n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((arith_tac))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("j",mk_type("num",[])))) THEN (clear_assumption "j") THEN (disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["IHv"]))]) THEN (elim THENL [ALL_TAC; ((move ["j"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((TRY done_tac)))))));;
refine (by (VALID ((arith_tac))));;
refine (by (VALID ((arith_tac))));;
refine (by (VALID (((((USE_THEN "IHv")(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN eqSS)(rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN eq_sym)(rewrite [] [(`0 = SUC j`)])) THEN ((USE_THM_THEN eqS0)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN add0n)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "IHv")(rewrite [] [])) THEN ((USE_THM_THEN eqSS)(rewrite [] []))) THEN (done_tac)))));;
let nth_incr_nth = end_section_proof();;
(start_section_proof ["v";"i"](`sizel (incr_nth v i) = if i < sizel v then sizel v else SUC i`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN (disch_tm_tac [](mk_var("v",mk_type("list",[mk_type("num",[])])))) THEN (clear_assumption "v") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["v"]) THEN (move ["IHv"]))]) THEN (elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN incr_nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN ONE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN addn1)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN ltn0Sn)(rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "IHv")(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] [])) THEN ((USE_THM_THEN fun_if)(rewrite [] [(`SUC _`)]))) THEN (done_tac)))));;
let size_incr_nth = end_section_proof();;
(begin_section "PermSeq");;
(add_section_type (mk_var ("s", (`:(A)list`))); add_section_type (mk_var ("s1", (`:(A)list`))));;
let same_count1 = new_definition `same_count1 s1 s2 x <=> (count (pred1 x) s1 = count (pred1 x) s2)`;;
let perm_eq = new_definition `perm_eq s1 s2 = all (same_count1 s1 s2) (s1 ++ s2)`;;
let predD = new_definition `predD p1 p2 = predI (predC p2) p1`;;
let predD1 = new_definition `predD1 a x = predD a (pred1 x)`;;
(start_section_proof ["s1";"s2"](`perm_eq s1 s2 <=> (!a. count a s1 = count a s2)`));;
refine (by (VALID (((THENL_LAST) ((((USE_THM_THEN perm_eq)(rewrite [] [])) THEN ((USE_THM_THEN allP)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN same_count1)(rewrite [] []))) THEN ((split_tac) THENL [((move ["eq_cnt1"]) THEN (move ["a"])); ((move ["eq_cnt"]) THEN (move ["x"]) THEN (move ["_"]))])) (exact_tac)))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN ltnSn)(ISPEC_THEN (`count a (s1 ++ s2)`) thm_tac))MP_TAC) THEN (disch_tm_tac [1; 3; 4](mk_var("a",mk_type("fun",[mk_vartype "A";mk_type("bool",[])])))) THEN (clear_assumption "a") THEN (disch_tm_tac [](`SUC _`)) THEN elim) THEN ((repeat_tactic 0 10 (((USE_THM_THEN ltn0)(rewrite [] []))) THEN ((TRY done_tac))) THEN (move ["n"]) THEN (move ["IHn"]) THEN (move ["a"]) THEN (move ["le_an"]))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN posnP)(ISPEC_THEN (`count a (s1 ++ s2)`) thm_tac))MP_TAC) THEN case))));;
refine (by (VALID ((((((USE_THM_THEN count_cat)(rewrite [] [])) THEN ((USE_THM_THEN addn_eq0)(rewrite [] []))) THEN ALL_TAC THEN (case THEN ALL_TAC) THEN (DISCH_THEN(rewrite [] [])) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((((USE_THM_THEN has_count)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN hasP)(GSYM_THEN (rewrite [] [])))) THEN ALL_TAC THEN (case THEN (move ["x"])) THEN (case THEN ((move ["s12x"]) THEN (move ["a_x"])))) THEN (set_tac "a'" (`predD1 a x`))))));;
refine (by (VALID ((have_tac (move ["cnt_a'"]) (`!s. count a s = count (pred1 x) s + count a' s`)))));;
refine (by (VALID ((BETA_TAC THEN (move ["s"])))));;
refine (by (VALID ((((USE_THM_THEN count_filter)(rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN count_predC)(ISPEC_THEN (`pred1 x`) thm_tac))(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 2 0 (((USE_THM_THEN count_filter)(rewrite [] [])))))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN filter_predI)(GSYM_THEN (rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN count_filter)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN predD)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN predD1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "a'_def")(rewrite [] [])) THEN ((USE_THM_THEN eqn_addr)(rewrite [] []))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN ((USE_THM_THEN eq_count)MP_TAC) THEN (clear_assumption "eq_count") THEN (DISCH_THEN apply_tac) THEN (move ["y"])) THEN (((USE_THM_THEN predI)(rewrite [] [])) THEN ((USE_THM_THEN pred1)(rewrite [] [])) THEN (simp_tac)) THEN ((split_tac) THENL [(case THEN ((DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac)))); (DISCH_THEN(rewrite [] []))]) THEN (done_tac)))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THEN "cnt_a'")(rewrite [] []))) THEN ((fun thm_tac -> (USE_THEN "eq_cnt1")(fun fst_th ->(USE_THEN "s12x")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN ((fun thm_tac -> (USE_THEN "IHn")(ISPEC_THEN (mk_var("a'",mk_type("fun",[mk_vartype "A";mk_type("bool",[])]))) thm_tac))(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN ltnS)(GSYM_THEN (rewrite [] [])))))));;
refine (by (VALID (((((USE_THEN "le_an")MP_TAC) THEN (clear_assumption "le_an") THEN BETA_TAC) THEN repeat_tactic 1 9 (((USE_THM_THEN ltE)(rewrite [] []))) THEN (((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac))))));;
refine (by (VALID (((((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltnS)(rewrite [] [])) THEN ((USE_THEN "cnt_a'")(rewrite [] [])) THEN ((USE_THM_THEN add1n)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN leq_add2r)(rewrite [] [])) THEN ((USE_THM_THEN ONE)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN has_count)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN has_pred1)(rewrite [] []))) THEN (done_tac)))));;
let perm_eqP = end_section_proof();;
(start_section_proof ["s"](`perm_eq s s`));;
refine (by (VALID ((((USE_THM_THEN perm_eqP)(rewrite [] [])) THEN (done_tac)))));;
let perm_eq_refl = end_section_proof();;
(start_section_proof [](`!s1 s2. perm_eq s1 s2 = perm_eq s2 s1`));;
refine (by (VALID (((BETA_TAC THEN (move ["s1"]) THEN (move ["s2"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN perm_eqP)(rewrite [] []))) THEN ((USE_THM_THEN eq_sym)(rewrite [] [(`!a. _ a`)]))) THEN (done_tac)))));;
let perm_eq_sym = end_section_proof();;
(start_section_proof [](`!s2 s1 s3. perm_eq s1 s2 ==> perm_eq s2 s3 ==> perm_eq s1 s3`));;
refine (by (VALID (((BETA_TAC THEN (move ["s2"]) THEN (move ["s1"]) THEN (move ["s3"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN perm_eqP)(rewrite [] []))) THEN (move ["eq12"]) THEN (move ["eq23"]) THEN (move ["a"]))))));;
refine (by (VALID (((((USE_THEN "eq12")(rewrite [] [])) THEN ((USE_THEN "eq23")(rewrite [] []))) THEN (done_tac)))));;
let perm_eq_trans = end_section_proof();;
(start_section_proof ["s1";"s2"](`perm_eq s1 s2 <=> (!s. perm_eq s1 s = perm_eq s2 s)`));;
refine (by (VALID (((THENL_LAST) ((split_tac) THENL [((move ["eq12"]) THEN (move ["s3"])); (DISCH_THEN(rewrite [] []))]) (((USE_THM_THEN perm_eq_refl)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((THENL_LAST) (split_tac) (((USE_THM_THEN perm_eq_trans)MP_TAC) THEN (clear_assumption "perm_eq_trans") THEN (exact_tac))))));;
refine (by (VALID ((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN perm_eq_sym)(ISPEC_THEN (mk_var("s3",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [] [(`perm_eq _ s3`)])))) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN perm_eq_trans)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN (DISCH_THEN apply_tac) THEN (done_tac)))));;
let perm_eqlP = end_section_proof();;
(start_section_proof ["s1";"s2"](`perm_eq s1 s2 <=> (!s. perm_eq s s1 = perm_eq s s2)`));;
refine (by (VALID (((THENL_LAST) ((split_tac) THENL [ALL_TAC; (DISCH_THEN(GSYM_THEN (rewrite [] [])))]) (((USE_THM_THEN perm_eq_refl)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID ((((USE_THM_THEN perm_eqlP)(rewrite [] [])) THEN (move ["eq12"]) THEN (move ["s3"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((fun thm_tac -> (USE_THM_THEN perm_eq_sym)(ISPEC_THEN (mk_var("s3",mk_type("list",[mk_vartype "A"]))) thm_tac))(rewrite [] [(`perm_eq s3 _`)]))) THEN ((USE_THEN "eq12")(rewrite [] []))) THEN (done_tac)))));;
let perm_eqrP = end_section_proof();;
(start_section_proof ["s1";"s2"](`!s. perm_eq (s1 ++ s2) s = perm_eq (s2 ++ s1) s`));;
refine (by (VALID ((((((USE_THM_THEN perm_eqlP)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN perm_eqP)(rewrite [] []))) THEN (move ["a"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN count_cat)(rewrite [] []))) THEN ((USE_THM_THEN addnC)(rewrite [] []))) THEN (done_tac)))));;
let perm_catC = end_section_proof();;
(start_section_proof ["s1";"s2";"s3"](`perm_eq (s1 ++ s2) (s1 ++ s3) = perm_eq s2 s3`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN perm_eqP)(rewrite [] []))) THEN ((split_tac) THEN (move ["eq23"]) THEN (move ["a"]))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "eq23")(ISPEC_THEN (mk_var("a",mk_type("fun",[mk_vartype "A";mk_type("bool",[])]))) thm_tac))MP_TAC) THEN BETA_TAC) THEN (repeat_tactic 1 9 (((USE_THM_THEN count_cat)(rewrite [] []))) THEN ((USE_THM_THEN eqn_addl)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "eq23")(ISPEC_THEN (mk_var("a",mk_type("fun",[mk_vartype "A";mk_type("bool",[])]))) thm_tac))MP_TAC) THEN BETA_TAC) THEN (repeat_tactic 1 9 (((USE_THM_THEN count_cat)(rewrite [] []))) THEN ((USE_THM_THEN eqn_addl)(rewrite [] []))) THEN (done_tac)))));;
let perm_cat2l = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`perm_eq (x :: s1) (x :: s2) = perm_eq s1 s2`));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN perm_cat2l)(ISPEC_THEN (`[x]`) thm_tac))MP_TAC) THEN BETA_TAC) THEN ((repeat_tactic 1 9 (((USE_THM_THEN cat_cons)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN cat0s)(rewrite [] [])))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let perm_cons = end_section_proof();;
(start_section_proof ["s1";"s2";"s3"](`perm_eq (s2 ++ s1) (s3 ++ s1) = perm_eq s2 s3`));;
refine (by (VALID ((repeat_tactic 2 0 ((((USE_THM_THEN perm_eq_sym)(rewrite [] [])) THEN ((USE_THM_THEN perm_catC)(rewrite [] [])))) THEN ((USE_THM_THEN perm_cat2l)(rewrite [] [])) THEN (done_tac)))));;
let perm_cat2r = end_section_proof();;
(start_section_proof ["s1";"s2";"s3"](`!s. perm_eq ((s1 ++ s2) ++ s3) s = perm_eq ((s1 ++ s3) ++ s2) s`));;
refine (by (VALID (((((USE_THM_THEN perm_eqlP)(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN catA)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN perm_cat2l)(rewrite [] [])) THEN ((USE_THM_THEN perm_catC)(rewrite [] [])) THEN ((USE_THM_THEN perm_eq_refl)(rewrite [] []))) THEN (done_tac)))));;
let perm_catAC = end_section_proof();;
(start_section_proof ["s1";"s2";"s3"](`!s. perm_eq (s1 ++ s2 ++ s3) s = perm_eq (s2 ++ s1 ++ s3) s`));;
refine (by (VALID (((((USE_THM_THEN perm_eqlP)(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN catA)(rewrite [] []))) THEN ((USE_THM_THEN perm_cat2r)(rewrite [] [])) THEN ((USE_THM_THEN perm_catC)(rewrite [] [])) THEN ((USE_THM_THEN perm_eq_refl)(rewrite [] []))) THEN (done_tac)))));;
let perm_catCA = end_section_proof();;
(start_section_proof ["x";"s"](`!s2. perm_eq (rcons s x) s2 = perm_eq (x :: s) s2`));;
refine (by (VALID (((BETA_TAC THEN (move ["s2"])) THEN (((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN perm_catC)(rewrite [] [])) THEN ((USE_THM_THEN cat1s)(rewrite [] []))) THEN (done_tac)))));;
let perm_rcons = end_section_proof();;
(start_section_proof ["n";"s"](`!s2. perm_eq (rot n s) s2 = perm_eq s s2`));;
refine (by (VALID (((BETA_TAC THEN (move ["s2"])) THEN (((USE_THM_THEN rot)(rewrite [] [])) THEN ((USE_THM_THEN perm_catC)(rewrite [] [])) THEN ((USE_THM_THEN cat_take_drop)(rewrite [] []))) THEN (done_tac)))));;
let perm_rot = end_section_proof();;
(start_section_proof ["n";"s"](`!s2. perm_eq (rotr n s) s2 = perm_eq s s2`));;
refine (by (VALID (((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN perm_rot)(rewrite [] []))) THEN (done_tac)))));;
let perm_rotr = end_section_proof();;
(start_section_proof ["a";"s"](`!s2. perm_eq (filter a s ++ filter (predC a) s) s2 = perm_eq s s2`));;
refine (by (VALID ((((USE_THM_THEN perm_eqlP)(GSYM_THEN (rewrite [] []))) THEN ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN perm_eq_refl)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((USE_THM_THEN predC)(rewrite [] [])) THEN (simp_tac)))));;
refine (by (VALID ((set_tac "r" (`a x`)))));;
refine (by (VALID ((((THENL_LAST) (((USE_THEN "r_def")MP_TAC) THEN (clear_assumption "r_def") THEN (disch_tm_tac [](mk_var("r",mk_type("bool",[])))) THEN (clear_assumption "r") THEN case THEN (DISCH_THEN(rewrite [] [])) THEN (move ["_"]) THEN (simp_tac)) (((USE_THM_THEN cat1s)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN perm_catCA)(rewrite [] [])))) THEN (((USE_THM_THEN cat_cons)(rewrite [] [])) THEN ((USE_THM_THEN perm_cons)(rewrite [] [])) THEN ((USE_THM_THEN predC)(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN cat0s)(rewrite [] [])))) THEN (done_tac)))));;
let perm_filterC = end_section_proof();;
(start_section_proof ["s1";"s2"](`perm_eq s1 s2 ==> (!x. x <- s1 <=> x <- s2)`));;
refine (by (VALID (((((USE_THM_THEN perm_eqP)(rewrite [] [])) THEN (move ["eq12"]) THEN (move ["x"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN has_pred1)(GSYM_THEN (rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN has_count)(rewrite [] []))))))));;
refine (by (VALID ((((USE_THEN "eq12")(rewrite [] [])) THEN (done_tac)))));;
let perm_eq_mem = end_section_proof();;
(start_section_proof ["s1";"s2"](`perm_eq s1 s2 ==> sizel s1 = sizel s2`));;
refine (by (VALID ((((USE_THM_THEN perm_eqP)(rewrite [] [])) THEN (move ["eq12"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN count_predT)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THEN "eq12")(rewrite [] []))) THEN (done_tac)))));;
let perm_eq_size = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq s1 ==> (!x. x <- s1 ==> x <- s2) ==> sizel s1 <= sizel s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s2") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THENL [((((USE_THM_THEN size_nil)(rewrite [] [])) THEN ((USE_THM_THEN leq0n)(rewrite [] []))) THEN (done_tac)); (((USE_THM_THEN cons_uniq)(rewrite [] [])) THEN (move ["_"]) THEN (case THEN ((move ["Hx"]) THEN (move ["Hs1"]) THEN (move ["Hs12"]))))]))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "Hs12")(ISPEC_THEN (mk_var("x",mk_vartype "A")) thm_tac))MP_TAC) THEN BETA_TAC) THEN ((((USE_THM_THEN mem_head)(rewrite [] [])) THEN (simp_tac)) THEN (move ["Hxs2"]))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN rot_to)(fun fst_th ->(USE_THEN "Hxs2")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC THEN (case THEN (move ["i"])) THEN (case THEN ((move ["s2'"]) THEN (move ["Ds2'"])))))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN size_rot)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s2",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [] [(`sizel s2`)]))) THEN ((USE_THEN "Ds2'")(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THEN "Hs1")(rewrite [] [])) THEN ((USE_THM_THEN andTb)(rewrite [] []))) THEN (move ["y"]) THEN (move ["Hy"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "Hs12")(ISPEC_THEN (mk_var("y",mk_vartype "A")) thm_tac))MP_TAC) THEN BETA_TAC) THEN (((USE_THM_THEN in_cons)(rewrite [] [])) THEN ((USE_THEN "Hy")(rewrite [] [])) THEN (simp_tac) THEN ((fun thm_tac -> (USE_THM_THEN mem_rot)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "Ds2'")(rewrite [] [])) THEN ((USE_THM_THEN in_cons)(rewrite [] [])))))));;
refine (by (VALID (((case THEN ((TRY done_tac)) THEN (move ["yx"])) THEN (((USE_THEN "Hy")MP_TAC) THEN (clear_assumption "Hy") THEN ((USE_THEN "Hx")MP_TAC) THEN (clear_assumption "Hx") THEN BETA_TAC)))));;
refine (by (VALID (((((USE_THEN "yx")(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let uniq_leq_size = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq s1 ==> (!x. x <- s1 ==> x <- s2) ==> sizel s2 <= sizel s1 ==> uniq s2`));;
refine (by (VALID (((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s2") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [((move ["s2"]) THEN (move ["Hs1"]) THEN (move ["Hs12"])); ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]) THEN (move ["s2"]) THEN (move ["Hs1"]) THEN (move ["Hs12"]))]))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s2") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (repeat_tactic 0 10 (((USE_THM_THEN nil_uniq)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN size_nil)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltn0)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "Hs12")(ISPEC_THEN (mk_var("x",mk_vartype "A")) thm_tac))MP_TAC) THEN BETA_TAC) THEN ((((USE_THM_THEN mem_head)(rewrite [] [])) THEN (simp_tac)) THEN (move ["Hxs2"]))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN rot_to)(fun fst_th ->(USE_THEN "Hxs2")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC THEN (case THEN (move ["i"])) THEN (case THEN ((move ["s2'"]) THEN (move ["Ds2'"])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN size_rot)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((fun thm_tac -> (USE_THM_THEN rot_uniq)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "Ds2'")(rewrite [] []))) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x <- s2'`) thm_tac))MP_TAC) THEN case THEN (move ["Hs2'"]))))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THM_THEN cons_uniq)(rewrite [] [])) THEN ((USE_THEN "Hs2'")(rewrite [] [])) THEN (simp_tac) THEN ((fun thm_tac -> (USE_THM_THEN size_cons)(ISPEC_THEN (mk_var("x",mk_vartype "A")) thm_tac))(GSYM_THEN (rewrite [] [])))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN uniq_leq_size)(fun fst_th ->(USE_THEN "Hs1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN (DISCH_THEN apply_tac) THEN ((move ["y"]) THEN (move ["Hy"]))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "Hs12")(fun fst_th ->(USE_THEN "Hy")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN (((fun thm_tac -> (USE_THM_THEN mem_rot)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "Ds2'")(rewrite [] [])) THEN ((USE_THM_THEN in_cons)(rewrite [] []))) THEN (case THEN ((TRY done_tac)) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "Hs1")MP_TAC) THEN (clear_assumption "Hs1") THEN BETA_TAC) THEN (repeat_tactic 1 9 (((USE_THM_THEN cons_uniq)(rewrite [] []))) THEN ALL_TAC THEN (case THEN ((move ["Hx"]) THEN (move ["Hs1"])))) THEN (((USE_THEN "Hs2'")(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN leqSS)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THEN "IHs")(fun fst_th ->(USE_THEN "Hs1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN (DISCH_THEN apply_tac) THEN ((move ["y"]) THEN (move ["Hy"]))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THEN "Hs12")(ISPEC_THEN (mk_var("y",mk_vartype "A")) thm_tac)) MP_TAC) THEN ALL_TAC) THEN (((USE_THM_THEN in_cons)(rewrite [] [])) THEN ((USE_THEN "Hy")(rewrite [] [])) THEN (simp_tac) THEN ((fun thm_tac -> (USE_THM_THEN mem_rot)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "Ds2'")(rewrite [] [])) THEN ((USE_THM_THEN in_cons)(rewrite [] []))) THEN (case THEN ((TRY done_tac)) THEN (move ["yx"]))))));;
refine (by (VALID (((((USE_THEN "Hx")MP_TAC) THEN (clear_assumption "Hx") THEN ((USE_THEN "Hy")MP_TAC) THEN (clear_assumption "Hy") THEN BETA_TAC) THEN (((USE_THEN "yx")(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let leq_size_uniq = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq s1 ==> (!x. x <- s1 <=> x <- s2) ==> (uniq s2 = (sizel s2 = sizel s1))`));;
refine (by (VALID ((BETA_TAC THEN (move ["Us1"]) THEN (move ["Es12"])))));;
refine (by (VALID ((((USE_THM_THEN eqn_leq)(rewrite [] [])) THEN ((USE_THM_THEN andbC)(rewrite [] [])) THEN ((USE_THM_THEN uniq_leq_size)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THEN "Us1")(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THEN "Es12")(rewrite [] []))) THEN ((simp_tac THEN TRY done_tac))))));;
refine (by (VALID (((THENL_FIRST) ((split_tac) THENL [(move ["Hs2"]); ALL_TAC]) ((((USE_THM_THEN uniq_leq_size)(rewrite [] [])) THEN ((USE_THEN "Es12")(rewrite [] [])) THEN (simp_tac)) THEN (done_tac))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN leq_size_uniq)(fun fst_th ->(USE_THEN "Us1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN (DISCH_THEN apply_tac) THEN (move ["y"])) THEN ((USE_THEN "Es12")(rewrite [] [])) THEN (done_tac)))));;
let uniq_size_uniq = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq s1 ==> (!x. x <- s1 ==> x <- s2) ==> sizel s2 <= sizel s1 ==>
  (!x. x <- s1 <=> x <- s2) /\ sizel s1 = sizel s2`));;
refine (by (VALID (((BETA_TAC THEN (move ["Us1"]) THEN (move ["Hs1"]) THEN (move ["Hs12"])) THEN (have_tac (move ["Us2"]) (`uniq s2`))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN leq_size_uniq)(fun fst_th ->(USE_THEN "Us1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID ((((THENL_ROT 1)) (have_tac ALL_TAC (`!x. x <- s1 <=> x <- s2`))))));;
refine (by (VALID (((BETA_TAC THEN (move ["h"])) THEN ((split_tac) THEN ((TRY done_tac))) THEN ((USE_THM_THEN uniq_size_uniq)(GSYM_THEN (rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((BETA_TAC THEN (move ["x"])))));;
refine (by (VALID ((((split_tac) THENL [ALL_TAC; (move ["Hxs2"])]) THENL [((((USE_THEN "Hs1")MP_TAC) THEN (clear_assumption "Hs1") THEN (DISCH_THEN apply_tac)) THEN (done_tac)); (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x <- s1`) thm_tac))MP_TAC) THEN case THEN ((TRY done_tac)) THEN (move ["Hxs1"]))]))));;
refine (by (VALID ((((THENL_ROT 1)) (have_tac ALL_TAC (`sizel (x :: s1) <= sizel s2`))))));;
refine (by (VALID (((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THEN "Hs12")(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((THENL_FIRST) (((USE_THM_THEN uniq_leq_size)(rewrite [] [])) THEN ((split_tac) THENL [ALL_TAC; (move ["y"])])) (((USE_THM_THEN cons_uniq)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID ((((USE_THM_THEN in_cons)(rewrite [] [])) THEN (case THENL [((DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac))); (move ["Hy"])]) THEN (((USE_THEN "Hs1")MP_TAC) THEN (clear_assumption "Hs1") THEN (exact_tac)) THEN (done_tac)))));;
let leq_size_perm = end_section_proof();;
(start_section_proof ["s1";"s2"](`(!x. x <- s1 <=> x <- s2) ==> 
	sizel s1 = sizel s2 ==> uniq s1 = uniq s2`));;
refine (by (VALID (((BETA_TAC THEN (move ["Es12"]) THEN (move ["Hs12"])) THEN ((split_tac) THEN (move ["Us"]))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN uniq_size_uniq)(fun fst_th ->(USE_THEN "Us")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THEN "Hs12")(rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN uniq_size_uniq)(fun fst_th ->(USE_THEN "Us")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THEN "Hs12")(rewrite [] [])))) THEN (done_tac)))));;
let perm_uniq = end_section_proof();;
(start_section_proof ["s1";"s2"](`perm_eq s1 s2 ==> uniq s1 = uniq s2`));;
refine (by (VALID (((BETA_TAC THEN (move ["eq_s12"])) THEN (((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN perm_uniq)(ISPEC_THEN (mk_var("s1",mk_type("list",[mk_vartype "A"]))) thm_tac))(ISPEC_THEN (mk_var("s2",mk_type("list",[mk_vartype "A"]))) thm_tac))(rewrite [] [])) THEN ((TRY done_tac))) THEN (split_tac) THENL [(((USE_THM_THEN perm_eq_mem)MP_TAC) THEN (clear_assumption "perm_eq_mem") THEN (exact_tac)); (((USE_THM_THEN perm_eq_size)MP_TAC) THEN (clear_assumption "perm_eq_size") THEN (exact_tac))]))));;
let perm_eq_uniq = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq s1 ==> uniq s2 ==> 
	(!x. x <- s1 <=> x <- s2) ==> perm_eq s1 s2`));;
refine (by (VALID (((BETA_TAC THEN (move ["Us1"]) THEN (move ["Us2"]) THEN (move ["eq12"])) THEN ((((USE_THM_THEN perm_eq)(rewrite [] [])) THEN ((USE_THM_THEN allP)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN same_count1)(rewrite [] []))) THEN (move ["x"]) THEN (move ["_"]))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN count_uniq_mem)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THEN "eq12")(rewrite [] [])))) THEN (done_tac)))));;
let uniq_perm_eq = end_section_proof();;
(start_section_proof ["s"](`(!x. count (pred1 x) s = if (x <- s) then 1 else 0) ==> uniq s`));;
refine (by (VALID (((BETA_TAC THEN (move ["count1_s"])) THEN (((fun thm_tac -> (USE_THM_THEN undup_uniq)(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac)) MP_TAC) THEN (move ["Uus"]))))));;
refine (by (VALID (((THENL_FIRST) (((THENL_ROT 1)) (have_tac ALL_TAC (`perm_eq s (undup s)`))) (((DISCH_THEN (fun snd_th -> (USE_THM_THEN perm_eq_uniq)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((((USE_THM_THEN perm_eq)(rewrite [] [])) THEN ((USE_THM_THEN allP)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN same_count1)(rewrite [] []))) THEN (move ["x"]) THEN (move ["_"])))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN count_uniq_mem)(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(ISPEC_THEN (mk_var("x",mk_vartype "A")) thm_tac))(fun fst_th ->(USE_THEN "Uus")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN ((USE_THM_THEN mem_undup)(rewrite [] []))) THEN (done_tac)))));;
let count_mem_uniq = end_section_proof();;
let count_mem_uniq = finalize_theorem count_mem_uniq;;
let uniq_perm_eq = finalize_theorem uniq_perm_eq;;
let perm_eq_uniq = finalize_theorem perm_eq_uniq;;
let perm_uniq = finalize_theorem perm_uniq;;
let leq_size_perm = finalize_theorem leq_size_perm;;
let uniq_size_uniq = finalize_theorem uniq_size_uniq;;
let leq_size_uniq = finalize_theorem leq_size_uniq;;
let uniq_leq_size = finalize_theorem uniq_leq_size;;
let perm_eq_size = finalize_theorem perm_eq_size;;
let perm_eq_mem = finalize_theorem perm_eq_mem;;
let perm_filterC = finalize_theorem perm_filterC;;
let perm_rotr = finalize_theorem perm_rotr;;
let perm_rot = finalize_theorem perm_rot;;
let perm_rcons = finalize_theorem perm_rcons;;
let perm_catCA = finalize_theorem perm_catCA;;
let perm_catAC = finalize_theorem perm_catAC;;
let perm_cat2r = finalize_theorem perm_cat2r;;
let perm_cons = finalize_theorem perm_cons;;
let perm_cat2l = finalize_theorem perm_cat2l;;
let perm_catC = finalize_theorem perm_catC;;
let perm_eqrP = finalize_theorem perm_eqrP;;
let perm_eqlP = finalize_theorem perm_eqlP;;
let perm_eq_trans = finalize_theorem perm_eq_trans;;
let perm_eq_sym = finalize_theorem perm_eq_sym;;
let perm_eq_refl = finalize_theorem perm_eq_refl;;
let perm_eqP = finalize_theorem perm_eqP;;
(end_section "PermSeq");;
(begin_section "RotrLemmas");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(start_section_proof ["s"](`sizel (rotr n0 s) = sizel s`));;
refine (by (VALID (((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN size_rot)(rewrite [] []))) THEN (done_tac)))));;
let size_rotr = end_section_proof();;
(start_section_proof ["s"](`!x. x <- rotr n0 s <=> x <- s`));;
refine (by (VALID (((BETA_TAC THEN (move ["x"])) THEN (((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN mem_rot)(rewrite [] []))) THEN (done_tac)))));;
let mem_rotr = end_section_proof();;
(start_section_proof ["s1";"s2"](`rotr (sizel s2) (s1 ++ s2) = s2 ++ s1`));;
refine (by (VALID (((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN size_cat)(rewrite [] [])) THEN ((USE_THM_THEN addnK)(rewrite [] [])) THEN ((USE_THM_THEN rot_size_cat)(rewrite [] []))) THEN (done_tac)))));;
let rotr_size_cat = end_section_proof();;
(start_section_proof ["x";"s"](`rotr 1 (rcons s x) = x :: s`));;
refine (by (VALID (((((USE_THM_THEN rot1_cons)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rotK)(rewrite [] []))) THEN (done_tac)))));;
let rotr1_rcons = end_section_proof();;
(start_section_proof ["a";"s"](`has a (rotr n0 s) = has a s`));;
refine (by (VALID (((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN has_rot)(rewrite [] []))) THEN (done_tac)))));;
let has_rotr = end_section_proof();;
(start_section_proof ["s"](`uniq (rotr n0 s) = uniq s`));;
refine (by (VALID (((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN rot_uniq)(rewrite [] []))) THEN (done_tac)))));;
let rotr_uniq = end_section_proof();;
(start_section_proof [](`!s. rot n0 (rotr n0 s) = s`));;
refine (by (VALID ((BETA_TAC THEN (move ["s"])))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN ltnP)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (`sizel s`) thm_tac)) MP_TAC) THEN (ALL_TAC THEN (case THENL [(move ["lt_n0s"]); (move ["ge_n0s"])]))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN subKn)(fun fst_th ->(fun thm_tac -> (USE_THM_THEN ltnW)(fun fst_th ->(USE_THEN "lt_n0s")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (rewrite [1] []))) THEN ((USE_THM_THEN size_rotr)(GSYM_THEN (rewrite [1] [(`sizel s`)]))) THEN ((USE_THM_THEN rotr)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rotr)(rewrite [] [(`rotr n0 _`)])) THEN ((USE_THM_THEN rotK)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN rot_oversize)(fun fst_th ->(USE_THEN "ge_n0s")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (rewrite [2] []))) THEN ((USE_THM_THEN rotr)(rewrite [] []))))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN subn_eq0)(ISPEC_THEN (`sizel s`) thm_tac))(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))MP_TAC) THEN BETA_TAC) THEN (((USE_THEN "ge_n0s")(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN rot0)(rewrite [] []))) THEN (done_tac)))));;
let rotrK = end_section_proof();;
(start_section_proof ["s1";"s2"](`rotr n0 (s1:(A)list) = rotr n0 s2 ==> s1 = s2`));;
refine (by (VALID ((BETA_TAC THEN (move ["h"])))));;
refine (by (VALID (((((USE_THM_THEN rotrK)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "h")(rewrite [] [])) THEN ((USE_THM_THEN rotrK)(rewrite [] []))) THEN (done_tac)))));;
let rotr_inj = end_section_proof();;
(start_section_proof ["s"](`rev (rot n0 s) = rotr n0 (rev s)`));;
refine (by (VALID ((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN size_rev)(rewrite [] [])) THEN ((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [3] [(`s`)]))) THEN ((USE_THM_THEN rot)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN rev_cat)(rewrite [] [])))))));;
refine (by (VALID (((((USE_THM_THEN size_drop)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN size_rev)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rot_size_cat)(rewrite [] []))) THEN (done_tac)))));;
let rev_rot = end_section_proof();;
(start_section_proof ["s"](`rev (rotr n0 s) = rot n0 (rev s)`));;
refine (by (VALID (((((USE_THM_THEN rotrK)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rotrK)(GSYM_THEN (rewrite [] [(`rot n0 (rev s)`)])))) THEN (AP_TERM_TAC) THEN ((USE_THM_THEN rotK)(rewrite [] []))))));;
refine (by (VALID ((((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN size_rev)(rewrite [] [])) THEN ((USE_THM_THEN size_rotr)(rewrite [] [])) THEN ((USE_THM_THEN rotr)(rewrite [] []))))));;
refine (by (VALID ((((USE_THM_THEN rot)(rewrite [] [(`rot _ s`)])) THEN ((USE_THM_THEN rev_cat)(rewrite [] []))))));;
refine (by (VALID ((set_tac "m" (`sizel s - n0`)))));;
refine (by (VALID (((THENL_ROT (-1)) ((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN size_takel)(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [1] [])))))));;
refine (by (VALID (((((USE_THM_THEN size_rev)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rot_size_cat)(rewrite [] [])) THEN ((USE_THM_THEN rev_cat)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN cat_take_drop)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "m_def")(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN leq_subr)(rewrite [] []))) THEN (done_tac)))));;
let rev_rotr = end_section_proof();;
let rev_rotr = finalize_theorem rev_rotr;;
let rev_rot = finalize_theorem rev_rot;;
let rotr_inj = finalize_theorem rotr_inj;;
let rotrK = finalize_theorem rotrK;;
let rotr_uniq = finalize_theorem rotr_uniq;;
let has_rotr = finalize_theorem has_rotr;;
let rotr1_rcons = finalize_theorem rotr1_rcons;;
let rotr_size_cat = finalize_theorem rotr_size_cat;;
let mem_rotr = finalize_theorem mem_rotr;;
let size_rotr = finalize_theorem size_rotr;;
(end_section "RotrLemmas");;
(begin_section "RotCompLemmas");;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(start_section_proof ["m";"n";"s"](`m + n <= sizel s ==> rot (m + n) s = rot m (rot n s)`));;
refine (by (VALID (((BETA_TAC THEN (move ["sz_s"])) THEN (((USE_THM_THEN rot)(rewrite [] [])) THEN ((fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] [(`take _ s`)]))))))));;
refine (by (VALID ((((USE_THM_THEN catA)(rewrite [] [])) THEN ((USE_THM_THEN rot_size_cat)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN catA)(rewrite [] [])) THEN ((USE_THM_THEN rot_size_cat)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN catA)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN cat_take_drop)(rewrite [] [])))))));;
refine (by (VALID (((((USE_THM_THEN size_drop)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN size_takel)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN leq_addl)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN addnK)(rewrite [] [])))) THEN (done_tac)))));;
let rot_addn = end_section_proof();;
(start_section_proof ["n";"s"](`n < sizel s ==> rot (SUC n) s = rot 1 (rot n s)`));;
refine (by (VALID ((((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN add1n)(GSYM_THEN (rewrite [] [])))) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN rot_addn)(MATCH_MP_THEN snd_th MP_TAC)))) THEN (done_tac)))));;
let rotS = end_section_proof();;
(start_section_proof ["m";"n";"s"](`n <= sizel s ==> m <= sizel s ==>
  rot m (rot n s) = rot (if m + n <= sizel s then m + n else (m + n) - sizel s) s`));;
refine (by (VALID (((BETA_TAC THEN (move ["Hn"]) THEN (move ["Hm"])) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`m + n <= sizel s`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THENL [((DISCH_THEN (fun snd_th -> (USE_THM_THEN rot_addn)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac))); BETA_TAC]))));;
refine (by (VALID (((((USE_THM_THEN ltnNge)(GSYM_THEN (rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN ltnW)(MATCH_MP_THEN snd_th MP_TAC))) THEN (move ["Hmn"])) THEN ((USE_THM_THEN eq_sym)(rewrite [] []))))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN rotK)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [2] [(`s`)]))) THEN ((USE_THM_THEN rotr)(rewrite [] [])) THEN ((USE_THM_THEN rot_addn)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN size_rot)(rewrite [] [])) THEN ((USE_THM_THEN addn_subA)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN subnK)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN addnK)(rewrite [] [])))) THEN (done_tac)))));;
let rot_add_mod = end_section_proof();;
(start_section_proof ["m";"n";"s"](`rot m (rot n s) = rot n (rot m s)`));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN ltnP)(ISPEC_THEN (`sizel s`) thm_tac))(ISPEC_THEN (mk_var("m",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THEN (move ["Hm"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN rot_oversize)(rewrite [] [(`rot m _`)]))) THEN repeat_tactic 0 10 (((USE_THM_THEN size_rot)(rewrite [] []))) THEN repeat_tactic 0 1 (((USE_THM_THEN ltnW)(rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN ltnP)(ISPEC_THEN (`sizel s`) thm_tac))(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))MP_TAC) THEN case THEN (move ["Hn"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN rot_oversize)(rewrite [] [(`rot n _`)]))) THEN repeat_tactic 0 10 (((USE_THM_THEN size_rot)(rewrite [] []))) THEN repeat_tactic 0 1 (((USE_THM_THEN ltnW)(rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN rot_add_mod)(rewrite [] []))) THEN repeat_tactic 0 1 (((USE_THM_THEN addnC)(rewrite [] [])))) THEN (done_tac)))));;
let rot_rot = end_section_proof();;
(start_section_proof ["m";"n";"s"](`rot m (rotr n s) = rotr n (rot m s)`));;
refine (by (VALID (((((USE_THM_THEN rotr)(rewrite [] [(`rotr n (rot m s)`)])) THEN ((USE_THM_THEN size_rot)(rewrite [] [])) THEN ((USE_THM_THEN rot_rot)(rewrite [] [])) THEN ((USE_THM_THEN rotr)(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
let rot_rotr = end_section_proof();;
(start_section_proof ["m";"n";"s"](`rotr m (rotr n s) = rotr n (rotr m s)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN rotr)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN size_rot)(rewrite [] []))) THEN ((USE_THM_THEN rot_rot)(rewrite [] []))) THEN (done_tac)))));;
let rotr_rotr = end_section_proof();;
let rotr_rotr = finalize_theorem rotr_rotr;;
let rot_rotr = finalize_theorem rot_rotr;;
let rot_rot = finalize_theorem rot_rot;;
let rot_add_mod = finalize_theorem rot_add_mod;;
let rotS = finalize_theorem rotS;;
let rot_addn = finalize_theorem rot_addn;;
(end_section "RotCompLemmas");;
(begin_section "Mask");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_type (mk_var ("m", (`:(bool)list`))));;
(add_section_type (mk_var ("s", (`:(A)list`))); add_section_type (mk_var ("s1", (`:(A)list`))));;
let mask = define `mask [] s' = [] /\ mask m' [] = [] /\
	mask (b :: m') (x :: s') = if b then x :: mask m' s' else mask m' s'`;;
(start_section_proof ["s";"n"](`mask (nseq n F) s = []`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((simp_tac THEN TRY done_tac)) THEN ((USE_THM_THEN ncons)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN nseq)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th])))) THEN (done_tac)))));;
let mask_false = end_section_proof();;
(start_section_proof ["s";"n"](`sizel s <= n ==> mask (nseq n T) s = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN ncons)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN nseq)(GSYM_THEN (rewrite [] [])))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let mask_true = end_section_proof();;
(start_section_proof ["m"](`mask m [] = []`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["_"]))]) THEN ((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let mask0 = end_section_proof();;
(start_section_proof ["b";"x"](`mask [b] [x] = nseq (if b then 1 else 0) x`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (DISCH_THEN(rewrite [] [])) THEN (simp_tac)) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ONE)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let mask1 = end_section_proof();;
(start_section_proof ["b";"m";"x";"s"](`mask (b :: m) (x :: s) = nseq (if b then 1 else 0) x ++ mask m s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (DISCH_THEN(rewrite [] []))) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ONE)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN cat1s)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat0s)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let mask_cons = end_section_proof();;
(start_section_proof ["m";"s"](`sizel m = sizel s ==> sizel (mask m s) = count I m`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("m",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((move ["b"]) THEN (move ["m"]) THEN (move ["IHm"]))]) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN eqS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN eqSS)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((USE_THM_THEN I_THM)(rewrite [] [])) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (DISCH_THEN(rewrite [] [])) THEN (simp_tac) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHm")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(GSYM_THEN (rewrite [] [])))) THEN (repeat_tactic 0 10 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN add1n)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN add0n)(rewrite [] []))) THEN (done_tac)))));;
let size_mask = end_section_proof();;
(start_section_proof ["m1";"s1";"m2";"s2"](`sizel m1 = sizel s1 ==>
       mask (m1 ++ m2) (s1 ++ s2) = mask m1 s1 ++ mask m2 s2`));;
refine (by (VALID ((BETA_TAC THEN (move ["Hm1"])))));;
refine (by (VALID (((((USE_THEN "Hm1")MP_TAC) THEN (clear_assumption "Hm1") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN (disch_tm_tac [](mk_var("m1",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m1") THEN elim THENL [ALL_TAC; ((move ["b1"]) THEN (move ["m1"]) THEN (move ["IHm"]))]) THEN (elim THENL [ALL_TAC; ((move ["x1"]) THEN (move ["s1"]) THEN (move ["_"]))]) THEN (repeat_tactic 0 10 (((USE_THM_THEN mask0)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN cat0s)(rewrite [] []))) THEN ((TRY done_tac)) THEN repeat_tactic 0 10 (((USE_THM_THEN size_nil)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN eq_sym)(rewrite [] [(`0 = _`)]))) THEN repeat_tactic 0 10 (((USE_THM_THEN eqS0)(rewrite [] []))) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN eqSS)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN cat_cons)(rewrite [] [])))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHm")(MATCH_MP_THEN snd_th MP_TAC)))) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (DISCH_THEN(rewrite [] []))) THEN ((disch_tm_tac [](mk_var("b1",mk_type("bool",[])))) THEN (clear_assumption "b1") THEN case THEN (DISCH_THEN(rewrite [] [])) THEN (simp_tac)) THEN ((USE_THM_THEN cat_cons)(rewrite [] [])) THEN (done_tac)))));;
let mask_cat = end_section_proof();;
(start_section_proof ["a";"b";"m";"x";"s"](`has a (mask (b :: m) (x :: s)) <=> b /\ a x \/ has a (mask m s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (DISCH_THEN(rewrite [] []))) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let has_mask_cons = end_section_proof();;
(start_section_proof ["m";"s"](`sizel m = sizel s ==>
   mask (rot n0 m) (rot n0 s) = rot (count I (take n0 m)) (mask m s)`));;
refine (by (VALID ((BETA_TAC THEN (move ["Hs"])))));;
refine (by (VALID (((THENL_FIRST) (have_tac (move ["Hsn0"]) (`sizel (take n0 m) = sizel (take n0 s)`)) ((repeat_tactic 1 9 (((USE_THM_THEN size_take)(rewrite [] []))) THEN ((USE_THEN "Hs")(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN size_mask)(fun fst_th ->(USE_THEN "Hsn0")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 2 0 (((USE_THM_THEN rot)(rewrite [] []))) THEN ((USE_THM_THEN mask_cat)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN size_drop)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THEN "Hs")(rewrite [] []))) THEN ((TRY done_tac))))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("m",mk_type("list",[mk_type("bool",[])]))) thm_tac))(GSYM_THEN (rewrite [4] [(`m`)]))) THEN ((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(GSYM_THEN (rewrite [4] [(`s`)]))) THEN ((USE_THM_THEN mask_cat)(rewrite [] [])) THEN ((TRY done_tac))))));;
refine (by (VALID ((((USE_THM_THEN rot_size_cat)(rewrite [] [])) THEN (done_tac)))));;
let mask_rot = end_section_proof();;
let mask_rot = finalize_theorem mask_rot;;
let has_mask_cons = finalize_theorem has_mask_cons;;
let mask_cat = finalize_theorem mask_cat;;
let size_mask = finalize_theorem size_mask;;
let mask_cons = finalize_theorem mask_cons;;
let mask1 = finalize_theorem mask1;;
let mask0 = finalize_theorem mask0;;
let mask_true = finalize_theorem mask_true;;
let mask_false = finalize_theorem mask_false;;
(end_section "Mask");;
(begin_section "EqMask");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(add_section_type (mk_var ("m", (`:(bool)list`))));;
(start_section_proof ["x";"b";"m";"y";"s"](`(x <- mask (b :: m) (y :: s)) <=> b /\ (x = y) \/ (x <- mask m s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (DISCH_THEN(rewrite [] []))) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN in_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let mem_mask_cons = end_section_proof();;
(start_section_proof ["x";"m";"s"](`x <- mask m s ==> x <- s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["p"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["m"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN repeat_tactic 1 9 (((USE_THM_THEN in_cons)(fun th -> ONCE_REWRITE_TAC[th]))))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("bool",[])))) THEN (clear_assumption "m") THEN case THEN (DISCH_THEN(rewrite [] [])) THEN (simp_tac)) THEN repeat_tactic 0 10 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((disch_tm_tac [](`x = y`)) THEN case THEN (DISCH_THEN(rewrite [] [])) THEN (simp_tac) THEN (move ["_"])) THEN (((USE_THEN "IHs")MP_TAC) THEN (clear_assumption "IHs") THEN (DISCH_THEN apply_tac)) THEN (done_tac)))));;
let mem_mask = end_section_proof();;
(start_section_proof ["s"](`uniq s ==> !m. uniq (mask m s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN ((repeat_tactic 0 10 (((USE_THM_THEN mask0)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN nil_uniq)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN cons_uniq)(rewrite [] []))) THEN ALL_TAC THEN (case THEN ((move ["Hx"]) THEN (move ["Hs"])))) THEN (elim THENL [ALL_TAC; ((move ["b"]) THEN (move ["m"]) THEN (move ["_"]))])))));;
refine (by (VALID (((((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nil_uniq)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (DISCH_THEN(rewrite [] []))) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (((fun thm_tac -> (fun thm_tac -> (USE_THEN "IHs")(fun fst_th ->(USE_THEN "Hs")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(ISPEC_THEN (mk_var("m",mk_type("list",[mk_type("bool",[])]))) thm_tac))MP_TAC) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] [])) THEN ((simp_tac THEN TRY done_tac)))))));;
refine (by (VALID (((((USE_THEN "Hx")MP_TAC) THEN (clear_assumption "Hx") THEN BETA_TAC) THEN (((USE_THM_THEN contra)MP_TAC) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN mem_mask)(MATCH_MP_THEN snd_th MP_TAC)))) THEN (done_tac)))));;
let mask_uniq = end_section_proof();;
(start_section_proof ["m";"s"](`sizel m = sizel s ==>
  (!x. x <- mask (rot n0 m) (rot n0 s) <=> x <- mask m s)`));;
refine (by (VALID (((BETA_TAC THEN (move ["Hm"]) THEN (move ["x"])) THEN (((USE_THM_THEN mask_rot)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN mem_rot)(rewrite [] []))) THEN (done_tac)))));;
let mem_mask_rot = end_section_proof();;
let mem_mask_rot = finalize_theorem mem_mask_rot;;
let mask_uniq = finalize_theorem mask_uniq;;
let mem_mask = finalize_theorem mem_mask;;
let mem_mask_cons = finalize_theorem mem_mask_cons;;
(end_section "EqMask");;
(begin_section "Subseq");;
(add_section_type (mk_var ("s", (`:(A)list`))); add_section_type (mk_var ("s1", (`:(A)list`))));;
let subseq = define `subseq (x :: s1) (y :: s2) = subseq (if x = y then s1 else x :: s1) s2 /\
	subseq [] s2 = T /\ subseq (x :: s1) [] = F`;;
(start_section_proof ["s"](`subseq [] s`));;
refine (by (VALID ((((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let sub0seq = end_section_proof();;
(start_section_proof ["s"](`subseq s [] = (s = [])`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN repeat_tactic 1 9 (((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th])))) THEN (done_tac)))));;
let subseq0 = end_section_proof();;
(start_section_proof ["s1";"s2"](`subseq s1 s2 <=> (?m. sizel m = sizel s2 /\ s1 = mask m s2)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN (disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s2") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s2"]) THEN (move ["IHs2"]))]) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((exists_tac (`[]:(bool)list`)) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN NOT_EXISTS_THM)(rewrite [] [])) THEN ((USE_THM_THEN negb_and)(rewrite [] [])) THEN ((USE_THM_THEN mask0)(rewrite [] []))) THEN (((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((exists_tac (`nseq (SUC (sizel s2)) F`)) THEN (((USE_THM_THEN size_nseq)(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN mask_false)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THEN "IHs2")(rewrite [] [])) THEN ((split_tac) THEN ALL_TAC THEN (case THEN (move ["n"])) THEN (case THEN ((move ["sz_m"]) THEN (move ["def_s1"])))) THEN (((USE_THEN "IHs2")MP_TAC) THEN (clear_assumption "IHs2") THEN BETA_TAC THEN (move ["_"]))))));;
refine (by (VALID (((exists_tac (`(x = y) :: n`)) THEN (repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THEN "sz_m")(rewrite [] []))) THEN ((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (((USE_THEN "def_s1")(GSYM_THEN (rewrite [] []))) THEN (simp_tac))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((THENL_ROT (-1)) ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THENL [(BETA_TAC THEN (move ["_"])); (BETA_TAC THEN (move ["ne_xy"]))])))));;
refine (by (VALID (((((USE_THEN "sz_m")MP_TAC) THEN (clear_assumption "sz_m") THEN ((USE_THEN "def_s1")MP_TAC) THEN (clear_assumption "def_s1") THEN (disch_tm_tac [](mk_var("n",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((case THEN ALL_TAC) THEN (DISCH_THEN(rewrite [] [])) THEN (move ["m"]) THEN (move ["IHm"]))]) THEN ((((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN eqSS)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (move ["eq"]) THEN (move ["seq"]))))));;
refine (by (VALID (((((USE_THEN "eq")MP_TAC) THEN (clear_assumption "eq") THEN BETA_TAC) THEN (((USE_THM_THEN eqseq_cons)(rewrite [] [])) THEN ((TRY done_tac))) THEN (done_tac)))));;
refine (by (VALID (((exists_tac (mk_var("m",mk_type("list",[mk_type("bool",[])])))) THEN (done_tac)))));;
refine (by (VALID ((set_tac "i" (`indexl T n`)))));;
refine (by (VALID ((have_tac (move ["def_m_i"]) (`take i n = nseq (sizel (take i n)) F`)))));;
refine (by (VALID (((((USE_THM_THEN all_pred1P)(rewrite [] [])) THEN ((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN all_nthP)(ISPEC_THEN (`pred1 F`) thm_tac))(ISPEC_THEN (`take i n`) thm_tac))(ISPEC_THEN (`T`) thm_tac))(GSYM_THEN (rewrite [] [])))) THEN (move ["j"])))));;
refine (by (VALID (((((USE_THM_THEN size_take)(rewrite [] [])) THEN ((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THM_THEN minn)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN leq_minl)(rewrite [] [])) THEN ((USE_THM_THEN negb_or)(rewrite [] [])) THEN ((USE_THM_THEN ltnNge)(GSYM_THEN (rewrite [] [])))) THEN (case THEN (move ["lt_j_i"]) THEN (move ["_"]))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN nth_take)(fun fst_th ->(USE_THEN "lt_j_i")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN (((USE_THEN "lt_j_i")MP_TAC) THEN (clear_assumption "lt_j_i") THEN BETA_TAC) THEN ((((USE_THEN "i_def")(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN index)(rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN before_find)(MATCH_MP_THEN snd_th MP_TAC))) THEN ((fun thm_tac -> DISCH_THEN (ISPEC_THEN (`T`) thm_tac))MP_TAC))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN pred1)(rewrite [] []))) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID ((have_tac (move ["lt_i_m"]) (`i < sizel n`)))));;
refine (by (VALID ((((USE_THM_THEN ltnNge)(rewrite [] [])) THEN (((USE_THM_THEN (TAUT `(P ==> F) <=> ~P`))(GSYM_THEN (rewrite [] []))) THEN (move ["le_m_i"]))))));;
refine (by (VALID (((((USE_THEN "def_s1")MP_TAC) THEN (clear_assumption "def_s1") THEN ((USE_THEN "def_m_i")MP_TAC) THEN (clear_assumption "def_m_i") THEN BETA_TAC) THEN ((((USE_THM_THEN take_oversize)(rewrite [] [])) THEN ((TRY done_tac))) THEN (DISCH_THEN(rewrite [] []))) THEN ((USE_THM_THEN mask_false)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "def_m_i")MP_TAC) THEN (clear_assumption "def_m_i") THEN BETA_TAC) THEN ((((USE_THM_THEN size_take)(rewrite [] [])) THEN ((USE_THEN "lt_i_m")(rewrite [] [])) THEN (simp_tac)) THEN (move ["def_m_i"]))))));;
refine (by (VALID (((exists_tac (`take i n ++ dropl (SUC i) n`)) THEN (split_tac)))));;
refine (by (VALID ((((USE_THM_THEN size_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_take)(rewrite [] [])) THEN ((USE_THM_THEN size_drop)(rewrite [] [])) THEN ((USE_THEN "lt_i_m")(rewrite [] [])) THEN (simp_tac)))));;
refine (by (VALID (((((USE_THEN "lt_i_m")MP_TAC) THEN (clear_assumption "lt_i_m") THEN BETA_TAC) THEN ((((USE_THEN "sz_m")(rewrite [] [])) THEN ((USE_THM_THEN ltE)(rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN subnKC)(MATCH_MP_THEN snd_th MP_TAC)))) THEN (((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN addSn)(rewrite [] [])) THEN ((USE_THM_THEN eqSS)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN congr1)(ISPEC_THEN (`behead`) thm_tac))(fun fst_th ->(USE_THEN "def_s1")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN (((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN (DISCH_THEN(rewrite [] [])))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] [(`s2`)]))) THEN ((fun thm_tac -> (USE_THM_THEN cat_take_drop)(ISPEC_THEN (mk_var("i",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [1] [(`n`)]))) THEN ((USE_THEN "def_m_i")(rewrite [] [])) THEN ((USE_THM_THEN cat_cons)(GSYM_THEN (rewrite [] [])))))));;
refine (by (VALID ((have_tac (move ["sz_i_s2"]) (`sizel (take i s2) = i`)))));;
refine (by (VALID (((((USE_THM_THEN size_takel)MP_TAC) THEN (clear_assumption "size_takel") THEN (DISCH_THEN apply_tac)) THEN (((USE_THEN "lt_i_m")MP_TAC) THEN (clear_assumption "lt_i_m") THEN BETA_TAC) THEN (((USE_THEN "sz_m")(rewrite [] [])) THEN ((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN lastI)(rewrite [] [])) THEN ((USE_THM_THEN cat_rcons)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN mask_cat)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN size_nseq)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN size_belast)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN mask_false)(rewrite [] []))) THEN ((simp_tac THEN TRY done_tac)) THEN repeat_tactic 1 9 (((USE_THM_THEN cat0s)(rewrite [] [])))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN drop_nth)(ISPEC_THEN (`T`) thm_tac))(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THEN "i_def")(GSYM_THEN (rewrite [1] []))) THEN ((USE_THM_THEN nth_index)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN index_mem)(GSYM_THEN (rewrite [] [])))) THEN repeat_tactic 0 10 (((USE_THEN "i_def")(rewrite [] []))) THEN ((TRY done_tac))))));;
refine (by (VALID (((((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let subseqP = end_section_proof();;
(start_section_proof ["s1";"s2";"s3"](`subseq s1 s2 ==> subseq s2 s3 ==> subseq s1 s3`));;
refine (by (VALID (((((USE_THM_THEN subseqP)(rewrite [] [])) THEN ALL_TAC THEN (case THEN (move ["m2"])) THEN (case THEN ((move ["_"]) THEN (DISCH_THEN(rewrite [] []))))) THEN (((USE_THM_THEN subseqP)(rewrite [] [])) THEN ALL_TAC THEN (case THEN (move ["m1"])) THEN (case THEN ((move ["_"]) THEN (DISCH_THEN(rewrite [] [])))))))));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("m1",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m1") THEN (disch_tm_tac [](mk_var("m2",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m2") THEN (disch_tm_tac [](mk_var("s3",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s3") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) ((repeat_tactic 1 9 (((USE_THM_THEN mask0)(rewrite [] []))) THEN ((USE_THM_THEN subseq0)(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID ((BETA_TAC THEN (move ["m2"]) THEN (move ["m1"])))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m1",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m1") THEN elim THENL [ALL_TAC; ((case THEN ALL_TAC) THEN (DISCH_THEN(rewrite [] [])) THEN (move ["m1"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN mask0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m2",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m2") THEN elim THENL [ALL_TAC; ((case THEN ALL_TAC) THEN (DISCH_THEN(rewrite [] [])) THEN (move ["m2"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THEN "IHs")(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THEN "IHs")(ISPEC_THEN (mk_var("m2",mk_type("list",[mk_type("bool",[])]))) thm_tac))(ISPEC_THEN (mk_var("m1",mk_type("list",[mk_type("bool",[])]))) thm_tac))MP_TAC) THEN BETA_TAC) THEN (repeat_tactic 1 9 (((USE_THM_THEN subseqP)(rewrite [] []))) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN ((move ["sz_m"]) THEN (move ["def_s"]))))))));;
refine (by (VALID (((exists_tac (`F :: m`)) THEN (repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THEN "sz_m")(rewrite [] [])) THEN ((USE_THEN "def_s")(rewrite [] []))) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THEN "IHs")(ISPEC_THEN (mk_var("m2",mk_type("list",[mk_type("bool",[])]))) thm_tac))(ISPEC_THEN (mk_var("m1",mk_type("list",[mk_type("bool",[])]))) thm_tac))MP_TAC) THEN BETA_TAC) THEN (repeat_tactic 1 9 (((USE_THM_THEN subseqP)(rewrite [] []))) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN ((move ["sz_m"]) THEN (move ["def_s"]))))))));;
refine (by (VALID (((exists_tac (`F :: m`)) THEN (repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THEN "sz_m")(rewrite [] [])) THEN ((USE_THEN "def_s")(rewrite [] []))) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let subseq_trans = end_section_proof();;
(start_section_proof ["s"](`subseq s s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let subseq_refl = end_section_proof();;
(start_section_proof ["s1";"s2";"s3";"s4"](`subseq s1 s3 ==> subseq s2 s4 ==> subseq (s1 ++ s2) (s3 ++ s4)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN subseqP)(rewrite [] []))) THEN ALL_TAC THEN (case THEN (move ["m1"])) THEN (case THEN ((move ["sz_m1"]) THEN (DISCH_THEN(rewrite [] [])))) THEN (case THEN (move ["m2"])) THEN (case THEN ((move ["sz_m2"]) THEN (DISCH_THEN(rewrite [] []))))))));;
refine (by (VALID (((exists_tac (`m1 ++ m2`)) THEN (repeat_tactic 0 10 (((USE_THM_THEN size_cat)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN mask_cat)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THEN "sz_m1")(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THEN "sz_m2")(rewrite [] [])))) THEN (done_tac)))));;
let subseq_cat = end_section_proof();;
(start_section_proof ["s1";"s2"](`subseq s1 s2 ==> (!x. x <- s1 ==> x <- s2)`));;
refine (by (VALID (((((USE_THM_THEN subseqP)(rewrite [] [])) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN ((move ["_"]) THEN (DISCH_THEN(rewrite [] [])))) THEN (move ["x"])) THEN (((USE_THM_THEN mem_mask)MP_TAC) THEN (clear_assumption "mem_mask") THEN (DISCH_THEN apply_tac)) THEN (done_tac)))));;
let mem_subseq = end_section_proof();;
(start_section_proof ["x";"s"](`subseq [x] s <=> x <- s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN MEM)(fun th -> ONCE_REWRITE_TAC[th]))))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THEN (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let subseq_seq1 = end_section_proof();;
(start_section_proof ["s1";"s2"](`subseq s1 s2 ==> sizel s1 <= sizel s2`));;
refine (by (VALID ((((USE_THM_THEN subseqP)(rewrite [] [])) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN ((move ["sz_m"]) THEN (DISCH_THEN(rewrite [] []))))))));;
refine (by (VALID (((((USE_THM_THEN size_mask)(rewrite [] [])) THEN ((USE_THEN "sz_m")(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN count_size)(rewrite [] [])))) THEN (done_tac)))));;
let size_subseq = end_section_proof();;
(start_section_proof ["s1";"s2"](`subseq s1 s2 ==> leqif (sizel s1) (sizel s2) (s1 = s2)`));;
refine (by (VALID (((THENL_FIRST) ((BETA_TAC THEN (move ["sub12"])) THEN ((USE_THM_THEN leqif)(rewrite [] [])) THEN (split_tac)) (((USE_THM_THEN size_subseq)MP_TAC) THEN (clear_assumption "size_subseq") THEN (exact_tac))))));;
refine (by (VALID ((((split_tac) THENL [ALL_TAC; ((DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac)))]) THEN (((USE_THEN "sub12")MP_TAC) THEN (clear_assumption "sub12") THEN BETA_TAC) THEN (((USE_THM_THEN subseqP)(rewrite [] [])) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN ((move ["sz_m"]) THEN (DISCH_THEN(rewrite [] [])))))))));;
refine (by (VALID ((((USE_THM_THEN size_mask)(rewrite [] [])) THEN ((USE_THEN "sz_m")(GSYM_THEN (rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN all_count)(GSYM_THEN (rewrite [] [])))))));;
refine (by (VALID ((have_tac (DISCH_THEN(rewrite [] [])) (`all I m = all (pred1 T) m`)))));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN eq_all)(ISPEC_THEN (`I:bool->bool`) thm_tac))(ISPEC_THEN (`pred1 T`) thm_tac))MP_TAC) THEN BETA_TAC))));;
refine (by (VALID (((((USE_THM_THEN pred1)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN I_THM)(rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN all_pred1P)(GSYM_THEN (rewrite [] []))) THEN (DISCH_THEN(rewrite [] []))) THEN (((USE_THEN "sz_m")(rewrite [] [])) THEN ((USE_THM_THEN mask_true)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN leqnn)(rewrite [] [])))) THEN (done_tac)))));;
let size_subseq_leqif = end_section_proof();;
(start_section_proof ["s";"x"](`subseq s (x :: s)`));;
refine (by (VALID ((((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THM_THEN subseq_cat)(ISPEC_THEN (`[]`) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))(ISPEC_THEN (`[x]`) thm_tac))(ISPEC_THEN (mk_var("s",mk_type("list",[mk_vartype "A"]))) thm_tac))MP_TAC) THEN BETA_TAC))));;
refine (by (VALID (((((USE_THM_THEN subseq_refl)(rewrite [] [])) THEN ((USE_THM_THEN cat0s)(rewrite [] [])) THEN ((USE_THM_THEN cat1s)(rewrite [] []))) THEN (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let subseq_cons = end_section_proof();;
(start_section_proof ["s";"x"](`subseq s (rcons s x)`));;
refine (by (VALID (((((USE_THM_THEN cats0)(GSYM_THEN (rewrite [1] [(`s`)]))) THEN ((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN subseq_cat)(rewrite [] []))) THEN (((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN subseq_refl)(fun th -> ONCE_REWRITE_TAC[th])))) THEN (done_tac)))));;
let subseq_rcons = end_section_proof();;
(start_section_proof ["s1";"s2"](`subseq s1 s2 ==> uniq s2 ==> uniq s1`));;
refine (by (VALID ((((USE_THM_THEN subseqP)(rewrite [] [])) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN ((move ["_"]) THEN (DISCH_THEN(rewrite [] [])))) THEN (move ["Us2"])))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN mask_uniq)(fun fst_th ->(USE_THEN "Us2")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(ISPEC_THEN (mk_var("m",mk_type("list",[mk_type("bool",[])]))) thm_tac))MP_TAC) THEN BETA_TAC) THEN (done_tac)))));;
let subseq_uniq = end_section_proof();;
let subseq_uniq = finalize_theorem subseq_uniq;;
let subseq_rcons = finalize_theorem subseq_rcons;;
let subseq_cons = finalize_theorem subseq_cons;;
let size_subseq_leqif = finalize_theorem size_subseq_leqif;;
let size_subseq = finalize_theorem size_subseq;;
let subseq_seq1 = finalize_theorem subseq_seq1;;
let mem_subseq = finalize_theorem mem_subseq;;
let subseq_cat = finalize_theorem subseq_cat;;
let subseq_refl = finalize_theorem subseq_refl;;
let subseq_trans = finalize_theorem subseq_trans;;
let subseqP = finalize_theorem subseqP;;
let subseq0 = finalize_theorem subseq0;;
let sub0seq = finalize_theorem sub0seq;;
(end_section "Subseq");;
(begin_section "Map");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_var (mk_var ("x1", (`:A`))));;
(add_section_var (mk_var ("x2", (`:B`))));;
(add_section_var (mk_var ("f", (`:A -> B`))));;
let map = define `map f (x :: s) = f x :: map f s /\ map f [] = []`;;
(start_section_proof [](`map = MAP`));;
refine (by (VALID (((((USE_THM_THEN EQ_EXT) apply_tac) THEN (move ["f"])) THEN (((USE_THM_THEN EQ_EXT) apply_tac) THEN (move ["s"]))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1446373"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN MAP)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let map_MAP = end_section_proof();;
(start_section_proof ["x";"s"](`map f (x :: s) = f x :: map f s`));;
refine (by (VALID ((((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let map_cons = end_section_proof();;
(start_section_proof ["x"](`map f (nseq n0 x) = nseq n0 (f x)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN ncons)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN nseq)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))))))));;
refine (by (VALID ((((USE_THEN "IHn")(rewrite [] [])) THEN (done_tac)))));;
let map_nseq = end_section_proof();;
(start_section_proof ["s1";"s2"](`map f (s1 ++ s2) = map f s1 ++ map f s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (done_tac)))));;
let map_cat = end_section_proof();;
(start_section_proof ["s"](`sizel (map f s) = sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN (done_tac)))));;
let size_map = end_section_proof();;
(start_section_proof ["s"](`behead (map f s) = map f (behead s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN behead)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let behead_map = end_section_proof();;
(start_section_proof ["n";"s"](`n < sizel s ==> nth x2 (map f s) n = f (nth x1 s n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC)))) THEN (done_tac)))));;
let nth_map = end_section_proof();;
(start_section_proof ["s";"x"](`map f (rcons s x) = rcons (map f s) (f x)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN map_cat)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let map_rcons = end_section_proof();;
(start_section_proof ["s";"x"](`last (f x) (map f s) = f (last x s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let last_map = end_section_proof();;
(start_section_proof ["s";"x"](`belast (f x) (map f s) = map f (belast x s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]) THEN (move ["x"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN belast)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])))) THEN (done_tac)))));;
let belast_map = end_section_proof();;
let preim = new_definition `preim (f:A->B) (a:B->bool) = (\x. a (f x))`;;
(start_section_proof ["a";"s"](`filter a (map f s) = map f (filter (preim f a) s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN preim)(rewrite [] [])) THEN (simp_tac)))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`a (f x)`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["_"])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN (done_tac)))));;
let filter_map = end_section_proof();;
(start_section_proof ["a";"s"](`find a (map f s) = find (preim f a) s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN preim)(rewrite [] []))) THEN (done_tac)))));;
let find_map = end_section_proof();;
(start_section_proof ["a";"s"](`has a (map f s) = has (preim f a) s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN has)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN preim)(rewrite [] []))) THEN (done_tac)))));;
let has_map = end_section_proof();;
(start_section_proof ["a";"s"](`all a (map f s) = all (preim f a) s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN preim)(rewrite [] []))) THEN (done_tac)))));;
let all_map = end_section_proof();;
(start_section_proof ["a";"s"](`count a (map f s) = count (preim f a) s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN count)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN preim)(rewrite [] []))) THEN (done_tac)))));;
let count_map = end_section_proof();;
(start_section_proof ["s"](`map f (take n0 s) = take n0 (map f s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let map_take = end_section_proof();;
(start_section_proof ["s"](`map f (dropl n0 s) = dropl n0 (map f s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("n0",mk_type("num",[])))) THEN (clear_assumption "n0") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN drop)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let map_drop = end_section_proof();;
(start_section_proof ["s"](`map f (rot n0 s) = rot n0 (map f s)`));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN rot)(rewrite [] []))) THEN ((USE_THM_THEN map_cat)(rewrite [] [])) THEN ((USE_THM_THEN map_take)(rewrite [] [])) THEN ((USE_THM_THEN map_drop)(rewrite [] []))) THEN (done_tac)))));;
let map_rot = end_section_proof();;
(start_section_proof ["s"](`map f (rotr n0 s) = rotr n0 (map f s)`));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN rot_inj)(ISPEC_THEN (mk_var("n0",mk_type("num",[]))) thm_tac)) apply_tac) THEN (((USE_THM_THEN rotrK)(rewrite [] [])) THEN ((USE_THM_THEN map_rot)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN rotrK)(rewrite [] []))) THEN (done_tac)))));;
let map_rotr = end_section_proof();;
(start_section_proof ["s"](`map f (rev s) = rev (map f s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN rev_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map_rcons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let map_rev = end_section_proof();;
(start_section_proof ["m";"s"](`map f (mask m s) = mask m (map f s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("m",mk_type("list",[mk_type("bool",[])])))) THEN (clear_assumption "m") THEN elim THENL [ALL_TAC; ((case THEN ALL_TAC) THEN (DISCH_THEN(rewrite [] [])) THEN (move ["m"]) THEN (move ["IHm"]))]) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["p"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN map_cons)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THEN "IHm")(rewrite [] []))) THEN (done_tac)))));;
let map_mask = end_section_proof();;
(start_section_proof [](`(!x y. f x = f y ==> x = y) ==> (!s1 s2. map f s1 = map f s2 ==> s1 = s2)`));;
refine (by (VALID (((BETA_TAC THEN (move ["injf"])) THEN (elim THENL [ALL_TAC; ((move ["y1"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y2"]) THEN (move ["s2"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN repeat_tactic 0 10 (((USE_THM_THEN eq_sym)(rewrite [] [(`[] = CONS _1 _2`)]))) THEN (((USE_THM_THEN NOT_CONS_NIL)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN eqseq_cons)(rewrite [] [])) THEN ALL_TAC THEN (case THEN ((DISCH_THEN (fun snd_th -> (USE_THEN "injf")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] [])) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))))) THEN (done_tac)))));;
let inj_map = end_section_proof();;
let inj_map = finalize_theorem inj_map;;
let map_mask = finalize_theorem map_mask;;
let map_rev = finalize_theorem map_rev;;
let map_rotr = finalize_theorem map_rotr;;
let map_rot = finalize_theorem map_rot;;
let map_drop = finalize_theorem map_drop;;
let map_take = finalize_theorem map_take;;
let count_map = finalize_theorem count_map;;
let all_map = finalize_theorem all_map;;
let has_map = finalize_theorem has_map;;
let find_map = finalize_theorem find_map;;
let filter_map = finalize_theorem filter_map;;
let belast_map = finalize_theorem belast_map;;
let last_map = finalize_theorem last_map;;
let map_rcons = finalize_theorem map_rcons;;
let nth_map = finalize_theorem nth_map;;
let behead_map = finalize_theorem behead_map;;
let size_map = finalize_theorem size_map;;
let map_cat = finalize_theorem map_cat;;
let map_nseq = finalize_theorem map_nseq;;
let map_cons = finalize_theorem map_cons;;
let map_MAP = finalize_theorem map_MAP;;
(end_section "Map");;
(start_section_proof ["a";"s"](`filter (a:A->bool) s = mask (map a s) s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`a x`) thm_tac))MP_TAC) THEN case THEN (simp_tac)) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN (((USE_THM_THEN mask)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac)) THEN (done_tac)))));;
let filter_mask = end_section_proof();;
(begin_section "FilterSubseq");;
(add_section_type (mk_var ("s", (`:(A)list`))); add_section_type (mk_var ("s1", (`:(A)list`))));;
(add_section_type (mk_var ("a", (`:A -> bool`))));;
(start_section_proof ["a";"s"](`subseq (filter a s) s`));;
refine (by (VALID ((((USE_THM_THEN subseqP)(rewrite [] [])) THEN (exists_tac (`map a s`)) THEN (((USE_THM_THEN size_map)(rewrite [] [])) THEN ((USE_THM_THEN filter_mask)(rewrite [] []))) THEN (done_tac)))));;
let filter_subseq = end_section_proof();;
(start_section_proof ["s1";"s2";"a"](`subseq s1 (filter a s2) <=> all a s1 /\ subseq s1 s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN (disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s2") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s2"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s1"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN filter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN all)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`a x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["ax"])) THEN ((USE_THM_THEN subseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`y = x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["yx"])) THEN (((USE_THEN "IHs")(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN all_cons)(rewrite [] [])))) THEN (done_tac)))));;
let subseq_filter = end_section_proof();;
(start_section_proof ["s1";"s2"](`uniq s2 ==> (subseq s1 s2 <=> s1 = filter (\x. x <- s1) s2)`));;
refine (by (VALID (((THENL_LAST) ((BETA_TAC THEN (move ["uniq_s2"])) THEN ((split_tac) THENL [(move ["ss12"]); (DISCH_THEN(rewrite [] []))])) (((USE_THM_THEN filter_subseq)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID ((have_tac ALL_TAC (`subseq s1 (filter (\x. x <- s1) s2)`)))));;
refine (by (VALID (((((USE_THM_THEN subseq_filter)(rewrite [] [])) THEN ((USE_THM_THEN allP)(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THM_THEN size_subseq_leqif)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC) THEN ((DISCH_THEN (fun snd_th -> (USE_THM_THEN leqif_imp_eq)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(GSYM_THEN (rewrite [] []))))))));;
refine (by (VALID ((((USE_THM_THEN eq_sym)(rewrite [] [])) THEN (((USE_THM_THEN perm_eq_size)MP_TAC) THEN (clear_assumption "perm_eq_size") THEN (DISCH_THEN apply_tac))))));;
refine (by (VALID ((((USE_THM_THEN uniq_perm_eq)(rewrite [] [])) THEN ((USE_THM_THEN filter_uniq)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((fun thm_tac -> (USE_THM_THEN subseq_uniq)(fun fst_th ->(USE_THEN "ss12")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(rewrite [] [])) THEN ((TRY done_tac))))));;
refine (by (VALID ((((((USE_THM_THEN mem_filter)(rewrite [] [])) THEN (simp_tac)) THEN (move ["x"])) THEN (((USE_THM_THEN andb_idr)(rewrite [] [])) THEN ((TRY done_tac))) THEN (((fun thm_tac -> (USE_THM_THEN mem_subseq)(fun fst_th ->(USE_THEN "ss12")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN (done_tac)))));;
let subseq_uniqP = end_section_proof();;
let subseq_uniqP = finalize_theorem subseq_uniqP;;
let subseq_filter = finalize_theorem subseq_filter;;
let filter_subseq = finalize_theorem filter_subseq;;
(end_section "FilterSubseq");;
(begin_section "EqMap");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_var (mk_var ("x1", (`:A`))));;
(add_section_var (mk_var ("x2", (`:B`))));;
(add_section_var (mk_var ("f", (`:A -> B`))));;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(start_section_proof ["s";"x"](`x <- s ==> f x <- map f s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((case THENL [((DISCH_THEN(rewrite [] [])) THEN ((TRY done_tac))); (move ["Hx"])]) THEN (DISJ2_TAC) THEN (((USE_THEN "IHs")MP_TAC) THEN (clear_assumption "IHs") THEN (DISCH_THEN apply_tac)) THEN (done_tac)))));;
let map_f = end_section_proof();;
(start_section_proof ["s";"y"](`(y <- map f s) <=> (?x. x <- s /\ y = f x)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN andFb)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((USE_THM_THEN NOT_EXISTS_THM)(rewrite [] [])) THEN (move ["x"])) THEN (done_tac)))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN (((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`y = f x`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["Hxy"]))))));;
refine (by (VALID (((exists_tac (mk_var("x",mk_vartype "A"))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN ((split_tac) THENL [(case THEN ((move ["x'"]) THEN (case THEN ((move ["Hx'"]) THEN (DISCH_THEN(rewrite [] [])))))); (case THEN ((move ["x'"]) THEN (case THEN ((move ["Hx'"]) THEN (move ["Dy"])))))])))));;
refine (by (VALID (((exists_tac (mk_var("x'",mk_vartype "A"))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "Hx'")MP_TAC) THEN (clear_assumption "Hx'") THEN case THEN (move ["Hx'"])) THENL [BETA_TAC; ((exists_tac (mk_var("x'",mk_vartype "A"))) THEN ((TRY done_tac)))]))));;
refine (by (VALID (((((USE_THEN "Hxy")MP_TAC) THEN (clear_assumption "Hxy") THEN BETA_TAC) THEN (((USE_THEN "Dy")(rewrite [] [])) THEN ((USE_THEN "Hx'")(rewrite [] []))) THEN (done_tac)))));;
let mapP = end_section_proof();;
(start_section_proof ["s"](`uniq (map f s) ==> uniq s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN ((((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN ALL_TAC THEN (case THEN (move ["not_sfx"])))))));;
refine (by (VALID ((((DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))) THEN ((USE_THM_THEN andbT)(rewrite [] []))))));;
refine (by (VALID (((((USE_THEN "not_sfx")MP_TAC) THEN (clear_assumption "not_sfx") THEN ((USE_THM_THEN contra)MP_TAC) THEN (clear_assumption "contra") THEN (DISCH_THEN apply_tac) THEN (move ["sx"])) THEN ((USE_THM_THEN mapP)(rewrite [] [])) THEN (exists_tac (mk_var("x",mk_vartype "A"))) THEN (done_tac)))));;
let map_uniq = end_section_proof();;
(start_section_proof ["s"](`(!x y. x <- s ==> y <- s ==> (f x = f y ==> x = y)) ==>
	uniq (map f s) = uniq s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN ((((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (move ["injf"]))))));;
refine (by (VALID (((USE_THEN "IHs")(rewrite [] [])))));;
refine (by (VALID ((BETA_TAC THEN (move ["a"]) THEN (move ["b"]) THEN (case THEN ((case THEN ((move ["Ha"]) THEN (move ["Hb"]))) THEN (move ["fab"])))))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THEN "injf")(ISPEC_THEN (mk_var("a",mk_vartype "A")) thm_tac))(ISPEC_THEN (mk_var("b",mk_vartype "A")) thm_tac))MP_TAC) THEN BETA_TAC) THEN (repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THEN "Ha")(rewrite [] [])) THEN ((USE_THEN "Hb")(rewrite [] [])) THEN ((USE_THEN "fab")(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((AP_THM_TAC THEN AP_TERM_TAC))));;
refine (by (VALID (((((USE_THM_THEN mapP)(rewrite [] [])) THEN ((USE_THM_THEN NOT_EXISTS_THM)(rewrite [] [])) THEN ((USE_THM_THEN negb_and)(rewrite [] []))) THEN (split_tac)))));;
refine (by (VALID (((((fun thm_tac -> DISCH_THEN (ISPEC_THEN (mk_var("x",mk_vartype "A")) thm_tac))MP_TAC) THEN BETA_TAC THEN (simp_tac)) THEN (done_tac)))));;
refine (by (VALID ((BETA_TAC THEN (move ["Hx"]) THEN (move ["y"])))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`y <- s`) thm_tac))MP_TAC) THEN case THEN (simp_tac) THEN (move ["Hy"])))));;
refine (by (VALID ((((USE_THM_THEN (TAUT `~A <=> (A ==> F)`))(fun th -> ONCE_REWRITE_TAC[th])) THEN (move ["fxy"])))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THEN "injf")(ISPEC_THEN (mk_var("x",mk_vartype "A")) thm_tac))(ISPEC_THEN (mk_var("y",mk_vartype "A")) thm_tac))MP_TAC) THEN BETA_TAC) THEN (repeat_tactic 1 9 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((USE_THEN "Hy")(rewrite [] [])) THEN ((USE_THEN "fxy")(rewrite [] [])) THEN (simp_tac))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`x = y`) thm_tac))MP_TAC) THEN case THEN ((TRY done_tac)) THEN (move ["xy"])))));;
refine (by (VALID (((((USE_THEN "Hx")MP_TAC) THEN (clear_assumption "Hx") THEN ((USE_THEN "Hy")MP_TAC) THEN (clear_assumption "Hy") THEN BETA_TAC) THEN ((USE_THEN "xy")(rewrite [] [])) THEN (done_tac)))));;
let map_inj_in_uniq = end_section_proof();;
(start_section_proof ["s1";"s2"](`subseq s1 s2 ==> subseq (map f s1) (map f s2)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN subseqP)(rewrite [] []))) THEN ALL_TAC THEN (case THEN (move ["m"])) THEN (case THEN ((move ["sz_m"]) THEN (DISCH_THEN(rewrite [] []))))))));;
refine (by (VALID (((exists_tac (mk_var("m",mk_type("list",[mk_type("bool",[])])))) THEN (((USE_THM_THEN size_map)(rewrite [] [])) THEN ((USE_THM_THEN map_mask)(rewrite [] []))) THEN (done_tac)))));;
let map_subseq = end_section_proof();;
let map_subseq = finalize_theorem map_subseq;;
let map_inj_in_uniq = finalize_theorem map_inj_in_uniq;;
let map_uniq = finalize_theorem map_uniq;;
let mapP = finalize_theorem mapP;;
let map_f = finalize_theorem map_f;;
(end_section "EqMap");;
(begin_section "EqMap2");;
(add_section_var (mk_var ("n0", (`:num`))));;
(add_section_var (mk_var ("x1", (`:A`))));;
(add_section_var (mk_var ("x2", (`:B`))));;
(add_section_var (mk_var ("f", (`:A -> B`))));;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(add_section_hyp "Hf" (`!x y. f x = f y ==> x = y`));;
(start_section_proof ["x";"y"](`(f x = f y <=> x = y)`));;
refine (by (VALID ((((split_tac) THENL [(DISCH_THEN (fun snd_th -> (USE_THEN "Hf")(MATCH_MP_THEN snd_th MP_TAC))); (DISCH_THEN(rewrite [] []))]) THEN (done_tac)))));;
let inj_eq = end_section_proof();;
(start_section_proof ["s";"x"](`(f x <- map f s) = (x <- s)`));;
refine (by (VALID ((((USE_THM_THEN mapP)(rewrite [] [])) THEN ((split_tac) THENL [((case THEN ((move ["y"]) THEN (case THEN ((move ["Hy"]) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "Hf")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] [])))))) THEN ((TRY done_tac))); (move ["Hx"])]) THEN (exists_tac (mk_var("x",mk_vartype "A"))) THEN (done_tac)))));;
let mem_map = end_section_proof();;
(start_section_proof ["s";"x"](`indexl (f x) (map f s) = indexl x s`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN index)(rewrite [] []))) THEN ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN find)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN pred1)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac))))));;
refine (by (VALID (((((USE_THM_THEN inj_eq)(GSYM_THEN (rewrite [] [(`y = x`)]))) THEN repeat_tactic 1 9 (((USE_THM_THEN pred1)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let index_map = end_section_proof();;
(start_section_proof ["s"](`uniq (map f s) = uniq s`));;
refine (by (VALID (((((USE_THM_THEN map_inj_in_uniq)MP_TAC) THEN (clear_assumption "map_inj_in_uniq") THEN (DISCH_THEN apply_tac) THEN (move ["x"]) THEN (move ["y"]) THEN (move ["_"]) THEN (move ["_"]) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "Hf")(MATCH_MP_THEN snd_th MP_TAC)))) THEN (done_tac)))));;
let map_inj_uniq = end_section_proof();;
let map_inj_uniq = finalize_theorem map_inj_uniq;;
let index_map = finalize_theorem index_map;;
let mem_map = finalize_theorem mem_map;;
let inj_eq = finalize_theorem inj_eq;;
(end_section "EqMap2");;
(begin_section "MapComp");;
(start_section_proof ["s"](`map I (s:(A)list) = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN I_THM)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let map_id = end_section_proof();;
(start_section_proof ["f1";"f2"](`(!x. (f1:A->B) x = f2 x) ==> map f1 = map f2`));;
refine (by (VALID (((((USE_THM_THEN eq_ext)(rewrite [] [])) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eq_map = end_section_proof();;
(start_section_proof ["f1";"f2";"s"](`map (f1 o f2) s = map (f1:B->C) (map (f2:A->B) s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN repeat_tactic 1 9 (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN o_THM)(rewrite [] []))) THEN (done_tac)))));;
let map_comp = end_section_proof();;
(start_section_proof ["f1";"f2"](`(!x. (f2:B->A) ((f1:A->B) x) = x) ==> (!s. map f2 (map f1 s) = s)`));;
refine (by (VALID (((BETA_TAC THEN (move ["eq_f12"])) THEN (elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN repeat_tactic 1 9 (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let mapK = end_section_proof();;
let mapK = finalize_theorem mapK;;
let map_comp = finalize_theorem map_comp;;
let eq_map = finalize_theorem eq_map;;
let map_id = finalize_theorem map_id;;
(end_section "MapComp");;
(start_section_proof ["f1";"f2";"s"](`(!x. x <- s ==> (f1:A->B) x = f2 x) ==> map f1 s = map f2 s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]) THEN (move ["eqf12"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THEN "eqf12")(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN in_cons)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((TRY done_tac))) THEN (move ["y"]) THEN (move ["sy"])))));;
refine (by (VALID (((((USE_THEN "eqf12")(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN in_cons)(rewrite [] [])))) THEN (done_tac)))));;
let eq_in_map = end_section_proof();;
(start_section_proof ["f";"s"](`(!x. x <- s ==> f x = (x:A)) ==> map f s = s`));;
refine (by (VALID (((DISCH_THEN (fun snd_th -> (USE_THM_THEN eq_in_map)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (DISCH_THEN(rewrite [] []))))));;
refine (by (VALID (((USE_THM_THEN map_id)(GSYM_THEN (rewrite [2] [(`s`)]))))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (USE_THM_THEN eq_map)(ISPEC_THEN (`(\x. x)`) thm_tac))(ISPEC_THEN (`I`) thm_tac))(rewrite [] [])) THEN ((simp_tac THEN TRY done_tac)) THEN ((USE_THM_THEN I_THM)(rewrite [] []))) THEN (done_tac)))));;
let map_id_in = end_section_proof();;
let iota = define `iota m (SUC n) = m :: iota (SUC m) n /\ iota m 0 = []`;;
(start_section_proof ["m";"n"](`sizel (iota m n) = n`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN (disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]) THEN (move ["m"]))]) THEN (((USE_THM_THEN iota)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((USE_THEN "IHn")(rewrite [] [])) THEN (done_tac)))));;
let size_iota = end_section_proof();;
(start_section_proof ["m";"n1";"n2"](`iota m (n1 + n2) = iota m n1 ++ iota (m + n1) n2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN (disch_tm_tac [](mk_var("n1",mk_type("num",[])))) THEN (clear_assumption "n1") THEN elim THENL [ALL_TAC; ((move ["n1"]) THEN (move ["IHn1"]))]) THEN (((USE_THM_THEN addn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iota)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat0s)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN addSnnS)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN addSn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iota)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THEN "IHn1")(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN addSn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let iota_add = end_section_proof();;
(start_section_proof ["m1";"m2";"n"](`iota (m1 + m2) n = map ((+) m1) (iota m2 n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m2",mk_type("num",[])))) THEN (clear_assumption "m2") THEN (disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]) THEN (move ["m2"]))]) THEN (((USE_THM_THEN iota)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN addnS)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHn")(rewrite [] []))) THEN (done_tac)))));;
let iota_addl = end_section_proof();;
(start_section_proof ["m";"n";"i"](`i < n ==> nth 0 (iota m n) i = m + i`));;
refine (by (VALID (((((USE_THM_THEN ltE)(rewrite [] [])) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN subnKC)(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(GSYM_THEN (rewrite [] [])))) THEN (((USE_THM_THEN addSnnS)(rewrite [] [])) THEN ((USE_THM_THEN iota_add)(rewrite [] [])) THEN ((USE_THM_THEN nth_cat)(rewrite [] [])) THEN ((USE_THM_THEN size_iota)(rewrite [] [])) THEN ((USE_THM_THEN ltnn)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN subnn)(rewrite [] [])))))));;
refine (by (VALID (((((USE_THM_THEN iota)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let nth_iota = end_section_proof();;
(start_section_proof ["m";"n";"i"](`(i <- iota m n) <=> (m <= i) /\ (i < m + n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN (disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))] THEN (move ["m"])) THEN (((USE_THM_THEN iota)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((USE_THM_THEN addn0)(rewrite [] [])) THEN ((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THM_THEN andbN)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN addSnnS)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN leq_eqVlt)(rewrite [] [])) THEN ((USE_THM_THEN in_cons)(rewrite [] [])) THEN ((USE_THM_THEN eq_sym)(rewrite [] [(`i = m`)]))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THM_THEN EXCLUDED_MIDDLE)(ISPEC_THEN (`m = i`) thm_tac))MP_TAC) THEN case THEN (simp_tac)))));;
refine (by (VALID (((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN addSn)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN leq_addr)(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "IHn")(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] [])))) THEN (done_tac)))));;
let mem_iota = end_section_proof();;
(start_section_proof ["m";"n"](`uniq (iota m n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("m",mk_type("num",[])))) THEN (clear_assumption "m") THEN (disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]) THEN (move ["m"]))]) THEN (((USE_THM_THEN iota)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN uniq)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN mem_iota)(rewrite [] [])) THEN ((USE_THEN "IHn")(rewrite [] [])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ltnn)(rewrite [] [])) THEN ((USE_THM_THEN andFb)(rewrite [] []))) THEN (done_tac)))));;
let iota_uniq = end_section_proof();;
(begin_section "MakeSeq");;
(add_section_var (mk_var ("x0", (`:A`))));;
let mkseq = new_definition `mkseq f n = map f (iota 0 n)`;;
(start_section_proof ["f";"n"](`sizel (mkseq f n) = n`));;
refine (by (VALID (((((USE_THM_THEN mkseq)(rewrite [] [])) THEN ((USE_THM_THEN size_map)(rewrite [] [])) THEN ((USE_THM_THEN size_iota)(rewrite [] []))) THEN (done_tac)))));;
let size_mkseq = end_section_proof();;
(start_section_proof ["f";"g"](`(!x. f x = g x) ==> mkseq f = mkseq g`));;
refine (by (VALID ((((((USE_THM_THEN eq_ext)(GSYM_THEN (rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN mkseq)(rewrite [] [])))) THEN (DISCH_THEN (fun snd_th -> (USE_THM_THEN eq_map)(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let eq_mkseq = end_section_proof();;
(start_section_proof ["f";"n";"i"](`i < n ==> nth x0 (mkseq f n) i = f i`));;
refine (by (VALID (((BETA_TAC THEN (move ["Hi"])) THEN ((USE_THM_THEN mkseq)(rewrite [] []))))));;
refine (by (VALID ((((USE_THM_THEN nth_map)(rewrite [] [])) THEN (exists_tac (`0`)) THEN ((((USE_THM_THEN size_iota)(rewrite [] [])) THEN ((USE_THEN "Hi")(rewrite [] [])) THEN (simp_tac)) THEN (move ["_"]))))));;
refine (by (VALID (((((USE_THM_THEN nth_iota)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN add0n)(rewrite [] [])))) THEN (done_tac)))));;
let nth_mkseq = end_section_proof();;
(start_section_proof ["s"](`mkseq (nth x0 s) (sizel s) = s`));;
refine (by (VALID (((USE_THM_THEN (REWRITE_RULE[IMP_IMP] eq_from_nth)) apply_tac))));;
refine (by (VALID (((exists_tac (mk_var("x0",mk_vartype "A"))) THEN ((((USE_THM_THEN size_mkseq)(rewrite [] [])) THEN (simp_tac)) THEN (move ["i"]) THEN (move ["Hi"]))))));;
refine (by (VALID ((((USE_THM_THEN nth_mkseq)(rewrite [] [])) THEN (done_tac)))));;
let mkseq_nth = end_section_proof();;
let mkseq_nth = finalize_theorem mkseq_nth;;
let nth_mkseq = finalize_theorem nth_mkseq;;
let eq_mkseq = finalize_theorem eq_mkseq;;
let size_mkseq = finalize_theorem size_mkseq;;
(end_section "MakeSeq");;
(start_section_proof ["f";"n"](`(!x y. f x = f y ==> x = y) ==> uniq (mkseq f n)`));;
refine (by (VALID (((DISCH_THEN (fun snd_th -> (USE_THM_THEN map_inj_uniq)(MATCH_MP_THEN snd_th MP_TAC))) THEN BETA_TAC THEN (move ["Hs"])))));;
refine (by (VALID (((((USE_THM_THEN mkseq)(rewrite [] [])) THEN ((USE_THEN "Hs")(rewrite [] [])) THEN ((USE_THM_THEN iota_uniq)(rewrite [] []))) THEN (done_tac)))));;
let mkseq_uniq = end_section_proof();;
(begin_section "FoldRight");;
(add_section_var (mk_var ("f", (`:A -> B -> B`))));;
(add_section_var (mk_var ("z0", (`:B`))));;
let foldr = define `foldr f z0 (x :: s) = f x (foldr f z0 s) /\ foldr f z0 [] = z0`;;
(end_section "FoldRight");;
(begin_section "FoldRightComp");;
(add_section_var (mk_var ("h", (`:A->B`))));;
(add_section_var (mk_var ("f", (`:B->R->R`))));;
(add_section_var (mk_var ("z0", (`:R`))));;
(start_section_proof ["s1";"s2"](`foldr f z0 (s1 ++ s2) = foldr f (foldr f z0 s2) s1`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "B"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let foldr_cat = end_section_proof();;
(start_section_proof ["s"](`foldr f z0 (map h s) = foldr (\x z. f (h x) z) z0 s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let foldr_map = end_section_proof();;
let foldr_map = finalize_theorem foldr_map;;
let foldr_cat = finalize_theorem foldr_cat;;
(end_section "FoldRightComp");;
let sumn = new_definition `sumn = foldr (+) 0`;;
(start_section_proof [](`sumn [] = 0`));;
refine (by (VALID (((((USE_THM_THEN sumn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let sumn0 = end_section_proof();;
(start_section_proof ["x";"n"](`sumn (nseq n x) = x * n`));;
refine (by (VALID ((((USE_THM_THEN mulnC)(rewrite [] [])) THEN ((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["IHn"]))]) THEN (((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sumn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN mul0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN sumn)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN ncons)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN nseq)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHn")(rewrite [] [])) THEN ((USE_THM_THEN mulSn)(rewrite [] []))) THEN (done_tac)))));;
let sumn_nseq = end_section_proof();;
(start_section_proof ["s1";"s2"](`sumn (s1 ++ s2) = sumn s1 + sumn s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_type("num",[])])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sumn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN add0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN sumn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sumn)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THEN "IHs")(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN addnA)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let sumn_cat = end_section_proof();;
(start_section_proof ["s"](`sumn s = 0 <=> s = nseq (sizel s) 0`));;
refine (by (VALID (((THENL_LAST) ((split_tac) THENL [ALL_TAC; (DISCH_THEN(rewrite [] []))]) ((((USE_THM_THEN sumn_nseq)(rewrite [] [])) THEN ((USE_THM_THEN mul0n)(rewrite [] []))) THEN (done_tac))))));;
refine (by (VALID (((THENL_FIRST) ((disch_tm_tac [](mk_var("s",mk_type("list",[mk_type("num",[])])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) ((((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac))))));;
refine (by (VALID ((((((USE_THM_THEN sumn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sumn)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN addn_eq0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nseq)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN iter)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ncons)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN nseq)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th])))) THEN ALL_TAC THEN (case THEN ((DISCH_THEN(rewrite [] [])) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(GSYM_THEN (rewrite [] [])))))) THEN (done_tac)))));;
let natnseq0P = end_section_proof();;
(begin_section "FoldLeft");;
(add_section_var (mk_var ("f", (`:R->A->R`))));;
let foldl = define `foldl f z (x :: s) = foldl f (f z x) s /\ foldl f z [] = z`;;
(start_section_proof ["z";"s"](`foldl f z (rev s) = foldr (\x z0. f z0 x) z s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("z",mk_vartype "R"))) THEN (clear_assumption "z") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN ((USE_THM_THEN (REWRITE_RULE[IMP_IMP] last_ind))MP_TAC) THEN (DISCH_THEN apply_tac)) THEN ((split_tac) THENL [ALL_TAC; ((move ["s"]) THEN (move ["x"]) THEN (move ["IHs"]))] THEN (move ["z"]))))));;
refine (by (VALID (((((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldl)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN rev_rcons)(rewrite [] [])) THEN ((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN foldr_cat)(rewrite [] [])) THEN ((USE_THEN "IHs")(GSYM_THEN (rewrite [] [])))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN foldl)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let foldl_rev = end_section_proof();;
(start_section_proof ["z";"s1";"s2"](`foldl f z (s1 ++ s2) = foldl f (foldl f z s1) s2`));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN revK)(ISPEC_THEN (`s1 ++ s2`) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN foldl_rev)(rewrite [] [])) THEN ((USE_THM_THEN rev_cat)(rewrite [] [])) THEN ((USE_THM_THEN foldr_cat)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN foldl_rev)(GSYM_THEN (rewrite [] [])))) THEN repeat_tactic 1 9 (((USE_THM_THEN revK)(rewrite [] [])))) THEN (done_tac)))));;
let foldl_cat = end_section_proof();;
let foldl_cat = finalize_theorem foldl_cat;;
let foldl_rev = finalize_theorem foldl_rev;;
(end_section "FoldLeft");;
(begin_section "Scan");;
(add_section_var (mk_var ("x1", (`:A`))));;
(add_section_var (mk_var ("x2", (`:B`))));;
(add_section_var (mk_var ("f", (`:A -> A -> B`))));;
(add_section_var (mk_var ("g", (`:A -> B -> A`))));;
let pairmap = define `pairmap f x (y :: s) = f x y :: pairmap f y s /\ pairmap f x [] = []`;;
(start_section_proof ["x";"s"](`sizel (pairmap f x s) = sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))] THEN (move ["x"])) THEN (((USE_THM_THEN pairmap)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let size_pairmap = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`pairmap f x (s1 ++ s2) = pairmap f x s1 ++ pairmap f (last x s1) s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s1"]) THEN (move ["IHs1"]))] THEN (move ["x"])) THEN (((USE_THM_THEN pairmap)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN last)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN pairmap)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((USE_THEN "IHs1")(rewrite [] [])) THEN (done_tac)))));;
let pairmap_cat = end_section_proof();;
(start_section_proof ["s";"n"](`n < sizel s ==>
  !x. nth x2 (pairmap f x s) n = f (nth x1 (x :: s) n) (nth x1 s n)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN pairmap)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (move ["Hn"]) THEN (move ["x"])) THEN (done_tac)))));;
let nth_pairmap = end_section_proof();;
let scanl = define `scanl g x (y :: s) = g x y :: scanl g (g x y) s /\ scanl g x [] = []`;;
(start_section_proof ["x";"s"](`sizel (scanl g x s) = sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "B"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))] THEN (move ["x"])) THEN (((USE_THM_THEN scanl)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID ((((USE_THEN "IHs")(rewrite [] [])) THEN (done_tac)))));;
let size_scanl = end_section_proof();;
(start_section_proof ["x";"s1";"s2"](`scanl g x (s1 ++ s2) = scanl g x s1 ++ scanl g (foldl g x s1) s2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "B"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s1"]) THEN (move ["IHs1"]))] THEN (move ["x"])) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN scanl)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldl)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let scanl_cat = end_section_proof();;
(start_section_proof ["s";"n"](`n < sizel s ==>
  !x. nth x1 (scanl g x s) n = foldl g x (take (SUC n) s)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("n",mk_type("num",[])))) THEN (clear_assumption "n") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "B"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN scanl)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN take)(fun th -> ONCE_REWRITE_TAC[th]))) THEN repeat_tactic 1 9 (((USE_THM_THEN foldl)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN ltSS)(rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (move ["Hn"])) THEN (done_tac)))));;
let nth_scanl = end_section_proof();;
(start_section_proof [](`(!x y. f x (g x y) = y) ==> (!x s. pairmap f x (scanl g x s) = s)`));;
refine (by (VALID ((BETA_TAC THEN (move ["Hfg"]) THEN (move ["x"]) THEN (move ["s"])))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "B"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))] THEN (move ["x"])) THEN (((USE_THM_THEN scanl)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN pairmap)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let scanlK = end_section_proof();;
(start_section_proof [](`(!x y. g x (f x y) = y) ==> (!x s. scanl g x (pairmap f x s) = s)`));;
refine (by (VALID ((BETA_TAC THEN (move ["Hgf"]) THEN (move ["x"]) THEN (move ["s"])))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("x",mk_vartype "A"))) THEN (clear_assumption "x") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s"]) THEN (move ["IHs"]))] THEN (move ["x"])) THEN (((USE_THM_THEN pairmap)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN scanl)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let pairmapK = end_section_proof();;
let pairmapK = finalize_theorem pairmapK;;
let scanlK = finalize_theorem scanlK;;
let nth_scanl = finalize_theorem nth_scanl;;
let scanl_cat = finalize_theorem scanl_cat;;
let size_scanl = finalize_theorem size_scanl;;
let nth_pairmap = finalize_theorem nth_pairmap;;
let pairmap_cat = finalize_theorem pairmap_cat;;
let size_pairmap = finalize_theorem size_pairmap;;
(end_section "Scan");;
(begin_section "Zip");;
let zip = define `zip (x :: s) (y :: t) = (x, y) :: zip s t /\
	zip [] t = [] /\ zip s [] = []`;;
let unzip1 = new_definition `unzip1 = map FST`;;
let unzip2 = new_definition `unzip2 = map SND`;;
(start_section_proof ["s"](`zip (unzip1 s) (unzip2 s) = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_type("prod",[mk_vartype "?1448283";mk_vartype "?1448282"])])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN unzip1)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN unzip2)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN PAIR)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((USE_THM_THEN unzip1)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN unzip2)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (done_tac)))));;
let zip_unzip = end_section_proof();;
(start_section_proof ["s";"t"](`sizel s <= sizel t ==> unzip1 (zip s t) = s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "?1448296"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1448294"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN unzip1)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN unzip1)(GSYM_THEN (rewrite [] [])))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let unzip1_zip = end_section_proof();;
(start_section_proof ["s";"t"](`sizel t <= sizel s ==> unzip2 (zip s t) = t`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "?1448314"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1448316"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN unzip2)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN (simp_tac) THEN ((USE_THM_THEN unzip2)(GSYM_THEN (rewrite [] [])))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let unzip2_zip = end_section_proof();;
(start_section_proof ["s";"t"](`sizel s <= sizel t ==> sizel (zip s t) = sizel s`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "?1448336"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1448334"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (repeat_tactic 1 9 (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let size1_zip = end_section_proof();;
(start_section_proof ["s";"t"](`sizel t <= sizel s ==> sizel (zip s t) = sizel t`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "?1448355"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1448357"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID ((((((USE_THM_THEN ltE)(rewrite [] [])) THEN ((USE_THM_THEN leqSS)(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] []))) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let size2_zip = end_section_proof();;
(start_section_proof ["s";"t"](`sizel (zip s t) = minn (sizel s) (sizel t)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "?1448378"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1448377"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["t2"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN minn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltnn)(fun th -> ONCE_REWRITE_TAC[th])) THEN (simp_tac) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN gtS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltS0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN minn)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN add1n)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN addn_minr)(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN add1n)(rewrite [] [])))) THEN (done_tac)))));;
let size_zip = end_section_proof();;
(start_section_proof ["s1";"s2";"t1";"t2"](`sizel s1 = sizel t1 ==> zip (s1 ++ s2) (t1 ++ t2) = zip s1 t1 ++ zip s2 t2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t1",mk_type("list",[mk_vartype "?1448418"])))) THEN (clear_assumption "t1") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1448417"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (repeat_tactic 0 10 (((USE_THM_THEN eq_sym)(rewrite [] [(`0 = _`)]))) THEN repeat_tactic 0 10 (((USE_THM_THEN eqS0)(rewrite [] []))) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN eqSS)(rewrite [] [])) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHs")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let zip_cat = end_section_proof();;
(start_section_proof ["x";"y";"s";"t";"i"](`sizel s = sizel t ==> nth (x, y) (zip s t) i = (nth x s i, nth y t i)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "?1448454"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1448455"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["IHi"]))]) THEN (elim THENL [ALL_TAC; ((move ["y1"]) THEN (move ["s1"]) THEN (move ["_"]))]) THEN (elim THENL [ALL_TAC; ((move ["y2"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac))) THEN (repeat_tactic 0 10 (((USE_THM_THEN size_nil)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN repeat_tactic 0 10 (((USE_THM_THEN eq_sym)(rewrite [] [(`0 = _`)]))) THEN repeat_tactic 0 10 (((USE_THM_THEN eqS0)(rewrite [] []))) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN eqSS)(rewrite [] [])) THEN (DISCH_THEN (fun snd_th -> (USE_THEN "IHi")(MATCH_MP_THEN snd_th MP_TAC))) THEN (DISCH_THEN(rewrite [] []))) THEN (done_tac)))));;
let nth_zip = end_section_proof();;
(start_section_proof ["p";"s";"t";"i"](`nth p (zip s t) i
     = (if i < sizel (zip s t) then (nth (FST p) s i, nth (SND p) t i) else p)`));;
refine (by (VALID ((((USE_THM_THEN size_zip)(rewrite [] [])) THEN ((USE_THM_THEN ltnNge)(rewrite [] [])) THEN ((USE_THM_THEN leq_minl)(rewrite [] []))))));;
refine (by (VALID ((((disch_tm_tac [](mk_var("i",mk_type("num",[])))) THEN (clear_assumption "i") THEN (disch_tm_tac [](mk_var("t",mk_type("list",[mk_vartype "?1448495"])))) THEN (clear_assumption "t") THEN (disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "?1448496"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["t"]) THEN (move ["_"]))]) THEN (elim THENL [ALL_TAC; ((move ["i"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN repeat_tactic 1 9 (((USE_THM_THEN leqnn)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN nth)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN leq0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN repeat_tactic 1 9 (((USE_THM_THEN ltE)(rewrite [] []))) THEN repeat_tactic 1 9 (((USE_THM_THEN leqSS)(rewrite [] [])))) THEN (done_tac)))));;
let nth_zip_cond = end_section_proof();;
(start_section_proof ["s1";"s2";"z1";"z2"](`sizel s1 = sizel s2 ==>
  zip (rcons s1 z1) (rcons s2 z2) = rcons (zip s1 s2) (z1, z2)`));;
refine (by (VALID (((BETA_TAC THEN (move ["eq_sz"])) THEN (repeat_tactic 1 9 (((USE_THM_THEN cats1)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THM_THEN zip_cat)(rewrite [] [])) THEN ((TRY done_tac))) THEN repeat_tactic 1 9 (((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let zip_rcons = end_section_proof();;
(start_section_proof ["s1";"s2"](`sizel s1 = sizel s2 ==> rev (zip s1 s2) = zip (rev s1) (rev s2)`));;
refine (by (VALID (((THENL_ROT (-1)) (((disch_tm_tac [](mk_var("s2",mk_type("list",[mk_vartype "?1448573"])))) THEN (clear_assumption "s2") THEN (disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "?1448571"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (elim THENL [ALL_TAC; ((move ["y"]) THEN (move ["s2"]) THEN (move ["_"]))]))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN size_cons)(rewrite [] []))) THEN ((USE_THM_THEN eqSS)(rewrite [] []))) THEN (move ["eq_sz"])))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN rev_cons)(rewrite [] []))) THEN ((USE_THM_THEN zip_rcons)(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN size_rev)(rewrite [] []))) THEN ((TRY done_tac))) THEN (((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN rev_cons)(fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THM_THEN rev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN zip)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN catrev)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let rev_zip = end_section_proof();;
let rev_zip = finalize_theorem rev_zip;;
let zip_rcons = finalize_theorem zip_rcons;;
let nth_zip_cond = finalize_theorem nth_zip_cond;;
let nth_zip = finalize_theorem nth_zip;;
let zip_cat = finalize_theorem zip_cat;;
let size_zip = finalize_theorem size_zip;;
let size2_zip = finalize_theorem size2_zip;;
let size1_zip = finalize_theorem size1_zip;;
let unzip2_zip = finalize_theorem unzip2_zip;;
let unzip1_zip = finalize_theorem unzip1_zip;;
let zip_unzip = finalize_theorem zip_unzip;;
(end_section "Zip");;
(begin_section "Flatten");;
(add_section_type (mk_var ("s", (`:(A)list`))));;
(add_section_type (mk_var ("ss", (`:((A)list)list`))));;
let flatten = new_definition `flatten = foldr cat []`;;
let shape = new_definition `shape = map sizel`;;
let reshape = define `reshape (n :: sh) s = take n s :: reshape sh (dropl n s) /\
	reshape [] s = []`;;
(start_section_proof [](`flatten [] = []`));;
refine (by (VALID (((((USE_THM_THEN flatten)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let flatten0 = end_section_proof();;
(start_section_proof ["s";"ss"](`flatten (s :: ss) = s ++ flatten ss`));;
refine (by (VALID (((((USE_THM_THEN flatten)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let flatten_cons = end_section_proof();;
(start_section_proof ["ss"](`sizel (flatten ss) = sumn (shape ss)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("ss",mk_type("list",[mk_type("list",[mk_vartype "A"])])))) THEN (clear_assumption "ss") THEN elim THENL [ALL_TAC; ((move ["s"]) THEN (move ["ss"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN flatten)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN shape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sumn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN flatten)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN size_cat)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN shape)(GSYM_THEN (rewrite [] [])))) THEN (((USE_THM_THEN sumn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let size_flatten = end_section_proof();;
(start_section_proof ["ss1";"ss2"](`flatten (ss1 ++ ss2) = flatten ss1 ++ flatten ss2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("ss1",mk_type("list",[mk_type("list",[mk_vartype "?1448703"])])))) THEN (clear_assumption "ss1") THEN elim THENL [ALL_TAC; ((move ["s"]) THEN (move ["ss1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN flatten0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN flatten_cons)(fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN catA)(rewrite [] []))) THEN (done_tac)))));;
let flatten_cat = end_section_proof();;
(start_section_proof ["ss"](`reshape (shape ss) (flatten ss) = ss`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("ss",mk_type("list",[mk_type("list",[mk_vartype "A"])])))) THEN (clear_assumption "ss") THEN elim THENL [ALL_TAC; ((move ["s"]) THEN (move ["ss"]) THEN (move ["IHss"]))]) THEN (((USE_THM_THEN flatten)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN shape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN reshape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN take_size_cat)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN drop_size_cat)(rewrite [] [])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN flatten)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN shape)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHss")(rewrite [] []))) THEN (done_tac)))));;
let flattenK = end_section_proof();;
(start_section_proof ["sh";"s"](`sizel s <= sumn sh ==> flatten (reshape sh s) = s`));;
refine (by (VALID (((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("sh",mk_type("list",[mk_type("num",[])])))) THEN (clear_assumption "sh") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["sh"]) THEN (move ["IHsh"]) THEN (move ["s"]) THEN (move ["sz_s"]))]))));;
refine (by (VALID (((elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN reshape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN flatten0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)) THEN ((USE_THM_THEN sumn0)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_cons)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN ltE)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th]))) THEN ((USE_THM_THEN ltn0)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN reshape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN flatten)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN flatten)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th])))))));;
refine (by (VALID (((((USE_THEN "IHsh")(rewrite [] [])) THEN repeat_tactic 0 10 (((USE_THM_THEN cat_take_drop)(rewrite [] []))) THEN ((TRY done_tac)) THEN ((USE_THM_THEN size_drop)(rewrite [] [])) THEN ((USE_THM_THEN leq_sub_add)(rewrite [] []))) THEN (((USE_THEN "sz_s")MP_TAC) THEN (clear_assumption "sz_s") THEN BETA_TAC)))));;
refine (by (VALID (((((USE_THM_THEN sumn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
let reshapeKr = end_section_proof();;
(start_section_proof ["sh";"s"](`sumn sh <= sizel s ==> shape (reshape sh s) = sh`));;
refine (by (VALID (((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "A"])))) THEN (clear_assumption "s") THEN (disch_tm_tac [](mk_var("sh",mk_type("list",[mk_type("num",[])])))) THEN (clear_assumption "sh") THEN elim THENL [ALL_TAC; ((move ["n"]) THEN (move ["sh"]) THEN (move ["IHsh"]) THEN (move ["s"]) THEN (move ["sz_s"]))]))));;
refine (by (VALID (((elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["_"]))]) THEN (((USE_THM_THEN reshape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN shape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th]))) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "sz_s")MP_TAC) THEN (clear_assumption "sz_s") THEN BETA_TAC) THEN ((((USE_THM_THEN sumn)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN sumn)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th])))) THEN (move ["sz_s"]))))));;
refine (by (VALID (((((USE_THM_THEN reshape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN shape)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN map)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN shape)(GSYM_THEN (fun th -> ONCE_REWRITE_TAC[th])))) THEN ((USE_THM_THEN size_takel)(rewrite [] []))))));;
refine (by (VALID (((((USE_THEN "sz_s")MP_TAC) THEN (clear_assumption "sz_s") THEN ((USE_THM_THEN leq_trans)MP_TAC) THEN (clear_assumption "leq_trans") THEN (DISCH_THEN apply_tac)) THEN ((USE_THM_THEN leq_addr)(rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID (((((USE_THEN "IHsh")(rewrite [] [])) THEN ((TRY done_tac)) THEN ((fun thm_tac -> (USE_THM_THEN leq_add2l)(ISPEC_THEN (mk_var("n",mk_type("num",[]))) thm_tac))(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN size_drop)(rewrite [] [])) THEN ((USE_THM_THEN add_sub_maxn)(rewrite [] [])) THEN ((USE_THM_THEN leq_maxr)(rewrite [] [])) THEN ((USE_THEN "sz_s")(rewrite [] [])) THEN ((USE_THM_THEN orbT)(rewrite [] []))) THEN (done_tac)))));;
let reshapeKl = end_section_proof();;
let reshapeKl = finalize_theorem reshapeKl;;
let reshapeKr = finalize_theorem reshapeKr;;
let flattenK = finalize_theorem flattenK;;
let flatten_cat = finalize_theorem flatten_cat;;
let size_flatten = finalize_theorem size_flatten;;
let flatten_cons = finalize_theorem flatten_cons;;
let flatten0 = finalize_theorem flatten0;;
(end_section "Flatten");;
(begin_section "AllPairs");;
(add_section_var (mk_var ("f", (`:S->T->R`))));;
(add_section_type (mk_var ("s", (`:(S)list`))));;
(add_section_type (mk_var ("t", (`:(T)list`))));;
let allpairs = new_definition `allpairs f s t = foldr (\x. cat (map (f x) t)) [] s`;;
(start_section_proof ["s";"t"](`sizel (allpairs f s t) = sizel s * sizel t`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "S"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN allpairs)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN size_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN mul0n)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN size_cat)(rewrite [] [])) THEN ((USE_THM_THEN allpairs)(GSYM_THEN (rewrite [] []))) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN size_map)(rewrite [] [])) THEN ((USE_THM_THEN size_cons)(rewrite [] [])) THEN ((USE_THM_THEN mulSn)(rewrite [] []))) THEN (done_tac)))));;
let size_allpairs = end_section_proof();;
(start_section_proof ["s1";"s2";"t"](`allpairs f (s1 ++ s2) t = allpairs f s1 t ++ allpairs f s2 t`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s1",mk_type("list",[mk_vartype "S"])))) THEN (clear_assumption "s1") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s1"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN allpairs)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN cat)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((repeat_tactic 1 9 (((USE_THM_THEN allpairs)(GSYM_THEN (rewrite [] [])))) THEN ((USE_THEN "IHs")(rewrite [] [])) THEN ((USE_THM_THEN catA)(rewrite [] []))) THEN (done_tac)))));;
let allpairs_cat = end_section_proof();;
let allpairs_cat = finalize_theorem allpairs_cat;;
let size_allpairs = finalize_theorem size_allpairs;;
(end_section "AllPairs");;
(begin_section "EqAllPairs");;
(add_section_var (mk_var ("f", (`:S->T->R`))));;
(add_section_type (mk_var ("s", (`:(S)list`))));;
(add_section_type (mk_var ("t", (`:(T)list`))));;
(start_section_proof ["s";"t";"z"](`(z <- allpairs f s t) <=> (?p. FST p <- s /\ SND p <- t /\ z = f (FST p) (SND p))`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("s",mk_type("list",[mk_vartype "S"])))) THEN (clear_assumption "s") THEN elim THENL [ALL_TAC; ((move ["x"]) THEN (move ["s"]) THEN (move ["IHs"]))]) THEN (((USE_THM_THEN allpairs)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN foldr)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((USE_THM_THEN in_nil)(fun th -> ONCE_REWRITE_TAC[th])) THEN ((TRY done_tac)))))));;
refine (by (VALID (((((USE_THM_THEN allpairs)(GSYM_THEN (rewrite [] []))) THEN ((USE_THM_THEN mem_cat)(rewrite [] [])) THEN ((USE_THM_THEN mapP)(rewrite [] [])) THEN ((USE_THEN "IHs")(rewrite [] []))) THEN (split_tac)))));;
refine (by (VALID (((THENL_FIRST) (case THENL [((case THEN (move ["y"])) THEN (case THEN ((move ["Hy"]) THEN (DISCH_THEN(rewrite [] []))))); ((case THEN (move ["p"])) THEN (case THEN ((move ["p1"]) THEN (case THEN ((move ["p2"]) THEN (DISCH_THEN(rewrite [] [])))))))]) (((exists_tac (`(x, y)`)) THEN (simp_tac)) THEN ((USE_THM_THEN in_cons)(rewrite [] [])) THEN (done_tac))))));;
refine (by (VALID (((exists_tac (mk_var("p",mk_type("prod",[mk_vartype "S";mk_vartype "T"])))) THEN ((USE_THM_THEN in_cons)(rewrite [] [])) THEN (done_tac)))));;
refine (by (VALID ((((USE_THM_THEN in_cons)(rewrite [] [])) THEN (BETA_TAC THEN (case THEN (move ["p"])) THEN (case THEN (case THEN (move ["p_s"]))) THEN (case THEN ((move ["p_t"]) THEN (DISCH_THEN(rewrite [] [])))))))));;
refine (by (VALID (((DISJ1_TAC) THEN (exists_tac (`SND p`)) THEN (done_tac)))));;
refine (by (VALID (((DISJ2_TAC) THEN (exists_tac (mk_var("p",mk_type("prod",[mk_vartype "S";mk_vartype "T"])))) THEN (done_tac)))));;
let allpairsP = end_section_proof();;
(start_section_proof ["s1";"t1";"s2";"t2"](`(!x. x <- s1 <=> x <- s2) ==> (!y. y <- t1 <=> y <- t2) 
	==> (!p. p <- allpairs f s1 t1 <=> p <- allpairs f s2 t2)`));;
refine (by (VALID ((BETA_TAC THEN (move ["eq_s"]) THEN (move ["eq_t"]) THEN (move ["z"])))));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN allpairsP)(rewrite [] []))) THEN ((split_tac) THEN ALL_TAC THEN (case THEN (move ["p"]))) THEN ((((USE_THEN "eq_s")(rewrite [] [])) THEN ((USE_THEN "eq_t")(rewrite [] []))) THEN (move ["fpz"]))))));;
refine (by (VALID (((exists_tac (mk_var("p",mk_type("prod",[mk_vartype "S";mk_vartype "T"])))) THEN (done_tac)))));;
refine (by (VALID (((exists_tac (mk_var("p",mk_type("prod",[mk_vartype "S";mk_vartype "T"])))) THEN (done_tac)))));;
let mem_allpairs = end_section_proof();;
(start_section_proof ["s";"t1";"t2"](`!p. p <- allpairs f s (t1 ++ t2) <=> p <- allpairs f s t1 ++ allpairs f s t2`));;
refine (by (VALID (((BETA_TAC THEN (move ["z"])) THEN ((USE_THM_THEN mem_cat)(rewrite [] []))))));;
refine (by (VALID ((((USE_THM_THEN allpairsP)(rewrite [] [])) THEN ((split_tac) THENL [(case THEN ((move ["p"]) THEN (case THEN (move ["sP1"])))); ALL_TAC])))));;
refine (by (VALID (((((USE_THM_THEN mem_cat)(rewrite [] [])) THEN ALL_TAC THEN (case THEN ((case THEN (move ["H"])) THEN (DISCH_THEN(rewrite [] []))))) THENL [(DISJ1_TAC); (DISJ2_TAC)] THEN ((USE_THM_THEN allpairsP)(rewrite [] [])) THEN (exists_tac (mk_var("p",mk_type("prod",[mk_vartype "S";mk_vartype "T"])))) THEN (done_tac)))));;
refine (by (VALID ((case THEN (((USE_THM_THEN allpairsP)(rewrite [] [])) THEN (case THEN (move ["p"])) THEN (case THEN (move ["sp1"])) THEN (case THEN ((move ["sp2"]) THEN (DISCH_THEN(rewrite [] [])))))))));;
refine (by (VALID (((exists_tac (mk_var("p",mk_type("prod",[mk_vartype "S";mk_vartype "T"])))) THEN (((USE_THM_THEN mem_cat)(rewrite [] [])) THEN ((USE_THEN "sp2")(rewrite [] []))) THEN (done_tac)))));;
refine (by (VALID (((exists_tac (mk_var("p",mk_type("prod",[mk_vartype "S";mk_vartype "T"])))) THEN (((USE_THM_THEN mem_cat)(rewrite [] [])) THEN ((USE_THEN "sp2")(rewrite [] []))) THEN (done_tac)))));;
let allpairs_catr = end_section_proof();;
let allpairs_catr = finalize_theorem allpairs_catr;;
let mem_allpairs = finalize_theorem mem_allpairs;;
let allpairsP = finalize_theorem allpairsP;;
(end_section "EqAllPairs");;
