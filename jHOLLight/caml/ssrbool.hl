(start_section_proof [](`T`));;
refine (by (VALID (((done_tac)))));;
let is_true_true = end_section_proof();;
(start_section_proof [](`~F`));;
refine (by (VALID (((done_tac)))));;
let not_false_is_true = end_section_proof();;
let isT = is_true_true;;
let notF = not_false_is_true;;
(start_section_proof ["b"](`(b = F) ==> ~b`));;
refine (by (VALID (((done_tac)))));;
let negbT = end_section_proof();;
(start_section_proof ["b"](`~b ==> b = F`));;
refine (by (VALID (((done_tac)))));;
let negbTE = end_section_proof();;
(start_section_proof ["b"](`b ==> ~b = F`));;
refine (by (VALID (((done_tac)))));;
let negbF = end_section_proof();;
(start_section_proof ["b"](`~b = F ==> b`));;
refine (by (VALID (((done_tac)))));;
let negbFE = end_section_proof();;
(start_section_proof ["b"](`~ ~b = b`));;
refine (by (VALID (((done_tac)))));;
let negbK = end_section_proof();;
(start_section_proof ["b"](`~ ~ b ==> b`));;
refine (by (VALID (((done_tac)))));;
let negbNE = end_section_proof();;
(start_section_proof ["b1";"b2"](`~b1 = ~b2 ==> b1 = b2`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b1",mk_type("bool",[]))),(mk_var("b1",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("b2",mk_type("bool",[]))),(mk_var("b2",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let negb_inj = end_section_proof();;
(start_section_proof ["b";"c"](`b = ~c ==> ~b = c`));;
refine (by (VALID ((((BETA_TAC) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))))) THEN ((rewrite [] [] (negbK))) THEN (done_tac)))));;
let negbLR = end_section_proof();;
(start_section_proof ["b";"c"](`~b = c ==> b = ~c`));;
refine (by (VALID ((((BETA_TAC) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (GSYM th_0)))))) THEN ((rewrite [] [] (negbK))) THEN (done_tac)))));;
let negbRL = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> ~b ==> ~c`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac)))))));;
let contra = end_section_proof();;
let contraNN = contra;;
(start_section_proof ["c";"b"](`(c ==> ~b) ==> b ==> ~c`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["h"]))))));;
refine (by (VALID (USE_THEN "h" (fun th_0 -> ((((MP_TAC (MATCH_MP contra th_0))) THEN (BETA_TAC)) THEN ((rewrite [] [] (negbK))) THEN (done_tac))))));;
let contraL = end_section_proof();;
(start_section_proof ["c";"b"](`(~c ==> b) ==> ~b ==> c`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["h"]))))));;
refine (by (VALID (USE_THEN "h" (fun th_0 -> ((((MP_TAC (MATCH_MP contra th_0))) THEN (BETA_TAC)) THEN ((rewrite [] [] (negbK))) THEN (done_tac))))));;
let contraR = end_section_proof();;
(start_section_proof ["c";"b"](`(~c ==> ~b) ==> b ==> c`));;
refine (by (VALID (((BETA_TAC) THEN ((move ["h"]))))));;
refine (by (VALID (USE_THEN "h" (fun th_0 -> ((((MP_TAC (MATCH_MP contra th_0))) THEN (BETA_TAC)) THEN (repeat_tactic 1 9 ((rewrite [] [] (negbK)))) THEN (done_tac))))));;
let contraLR = end_section_proof();;
(start_section_proof ["b"](`(~b ==> F) ==> b`));;
refine (by (VALID (((done_tac)))));;
let contraT = end_section_proof();;
(start_section_proof ["b"](`(~b ==> b) ==> b`));;
refine (by (VALID ((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))))));;
let wlog_neg = end_section_proof();;
(start_section_proof ["c";"b"](`(~c ==> b) ==> b = F ==> c`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac)))))));;
let contraFT = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> b = F ==> ~c`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac)))))));;
let contraFN = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> ~b) ==> b ==> c = F`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac)))))));;
let contraTF = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> ~b ==> c = F`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac)))))));;
let contraNF = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> b = F ==> c = F`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac)))))));;
let contraFF = end_section_proof();;
(begin_section "BoolIf");;
(add_section_var (mk_var ("vT", (`:A`))); add_section_var (mk_var ("vF", (`:A`))));;
(add_section_var (mk_var ("f", (`:A -> B`))));;
(add_section_var (mk_var ("b", (`:bool`))));;
(start_section_proof [](`(if b then vT else vT) = vT`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let if_same = end_section_proof();;
(start_section_proof [](`(if ~b then vT else vF) = if b then vF else vT`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let if_neg = end_section_proof();;
(start_section_proof [](`f (if b then vT else vF) = if b then f vT else f vF`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let fun_if = end_section_proof();;
(start_section_proof ["fT";"fF";"x"](`(if b then (fT:A->B) else fF) x = if b then fT x else fF x`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let if_arg = end_section_proof();;
let if_arg = finalize_theorem if_arg;;
let fun_if = finalize_theorem fun_if;;
let if_neg = finalize_theorem if_neg;;
let if_same = finalize_theorem if_same;;
(end_section "BoolIf");;
(start_section_proof ["b"](`(T /\ b) = b`));;
refine (by (VALID (((done_tac)))));;
let andTb = end_section_proof();;
(start_section_proof ["b"](`(F /\ b) = F`));;
refine (by (VALID (((done_tac)))));;
let andFb = end_section_proof();;
(start_section_proof ["b"](`(b /\ T) = b`));;
refine (by (VALID (((done_tac)))));;
let andbT = end_section_proof();;
(start_section_proof ["b"](`(b /\ F) = F`));;
refine (by (VALID (((done_tac)))));;
let andbF = end_section_proof();;
(start_section_proof ["b"](`(b /\ b) = b`));;
refine (by (VALID (((done_tac)))));;
let andbb = end_section_proof();;
(start_section_proof ["b";"c"](`(b /\ c) = (c /\ b)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andbC = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b /\ (c /\ p) <=> (b /\ c) /\ p`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andbA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b /\ (c /\ p) <=> c /\ (b /\ p)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andbCA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b /\ c) /\ p <=> (b /\ p) /\ c`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andbAC = end_section_proof();;
(start_section_proof ["b"](`T \/ b <=> T`));;
refine (by (VALID (((done_tac)))));;
let orTb = end_section_proof();;
(start_section_proof ["b"](`F \/ b <=> b`));;
refine (by (VALID (((done_tac)))));;
let orFb = end_section_proof();;
(start_section_proof ["b"](`b \/ T <=> T`));;
refine (by (VALID (((done_tac)))));;
let orbT = end_section_proof();;
(start_section_proof ["b"](`b \/ F <=> b`));;
refine (by (VALID (((done_tac)))));;
let orbF = end_section_proof();;
(start_section_proof ["b"](`b \/ b <=> b`));;
refine (by (VALID (((done_tac)))));;
let orbb = end_section_proof();;
(start_section_proof ["b";"c"](`b \/ c <=> c \/ b`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orbC = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b \/ (c \/ p) <=> (b \/ c) \/ p`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orbA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b \/ (c \/ p) <=> c \/ (b \/ p)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orbCA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b \/ c) \/ p <=> (b \/ p) \/ c`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orbAC = end_section_proof();;
(start_section_proof ["b"](`b /\ ~b <=> F`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andbN = end_section_proof();;
(start_section_proof ["b"](`~b /\ b <=> F`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andNb = end_section_proof();;
(start_section_proof ["b"](`b \/ ~b <=> T`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orbN = end_section_proof();;
(start_section_proof ["b"](`~b \/ b <=> T`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orNb = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b \/ c) /\ p <=> (b /\ p) \/ (c /\ p)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andb_orl = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b /\ (c \/ p) <=> (b /\ c) \/ (b /\ p)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andb_orr = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b /\ c) \/ p <=> (b \/ p) /\ (c \/ p)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orb_andl = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b \/ (c /\ p) <=> (b \/ c) /\ (b \/ p)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orb_andr = end_section_proof();;
(start_section_proof ["a";"b"](`(b ==> a) ==> (a /\ b <=> b)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andb_idl = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> b) ==> (a /\ b <=> a)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andb_idr = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a ==> (b <=> c)) ==> (a /\ b <=> a /\ c)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andb_id2l = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(b ==> (a <=> c)) ==> (a /\ b <=> c /\ b)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andb_id2r = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> b) ==> (a \/ b <=> b)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orb_idl = end_section_proof();;
(start_section_proof ["a";"b"](`(b ==> a) ==> (a \/ b <=> a)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orbb_idr = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(~ a ==> (b <=> c)) ==> (a \/ b <=> a \/ c)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orb_id2l = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(~ b ==> (a <=> c)) ==> (a \/ b <=> c \/ b)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orb_id2r = end_section_proof();;
(start_section_proof ["a";"b"](`~ (a /\ b) <=> ~ a \/ ~ b`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let negb_and = end_section_proof();;
(start_section_proof ["a";"b"](`~ (a \/ b) <=> ~ a /\ ~ b`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let negb_or = end_section_proof();;
(start_section_proof ["a";"b"](`((a /\ b) \/ a) = a`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andbK = end_section_proof();;
(start_section_proof ["a";"b"](`a \/ b /\ a <=> a`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let andKb = end_section_proof();;
(start_section_proof ["a";"b"](`(a \/ b) /\ a <=> a`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orbK = end_section_proof();;
(start_section_proof ["a";"b"](`a /\ (b \/ a) <=> a`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let orKb = end_section_proof();;
(start_section_proof ["b"](`b ==> T`));;
refine (by (VALID (((done_tac)))));;
let implybT = end_section_proof();;
(start_section_proof ["b"](`(b ==> F) <=> ~ b`));;
refine (by (VALID (((done_tac)))));;
let implybF = end_section_proof();;
(start_section_proof ["b"](`F ==> b`));;
refine (by (VALID (((done_tac)))));;
let implyFb = end_section_proof();;
(start_section_proof ["b"](`(T ==> b) <=> b`));;
refine (by (VALID (((done_tac)))));;
let implyTb = end_section_proof();;
(start_section_proof ["b"](`b ==> b`));;
refine (by (VALID (((done_tac)))));;
let implybb = end_section_proof();;
(start_section_proof ["a";"b"](`~ (a ==> b) <=> a /\ ~ b`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let negb_imply = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> b) <=> ~ a \/ b`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let implybE = end_section_proof();;
(start_section_proof ["a";"b"](`(~ a ==> b) <=> a \/ b`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let implyNb = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> ~ b) <=> (b ==> ~ a)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let implybN = end_section_proof();;
(start_section_proof ["a";"b"](`(~ a ==> ~ b) <=> b ==> a`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let implybNN = end_section_proof();;
(start_section_proof ["a";"b"](`(~ a ==> b) ==> ((a ==> b) <=> b)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let implyb_idl = end_section_proof();;
(start_section_proof ["a";"b"](`(b ==> ~ a) ==> ((a ==> b) <=> ~ a)`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let implyb_idr = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a ==> (b <=> c)) ==> ((a ==> b) <=> (a ==> c))`));;
refine (by (VALID (((((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let implyb_id2l = end_section_proof();;
let XOR_DEF = new_definition `XOR p q = if p then ~q else q`;;
overload_interface("+", `XOR`);;
(start_section_proof ["b"](`F + b <=> b`));;
refine (by (VALID ((((rewrite [] [] (XOR_DEF))) THEN (done_tac)))));;
let addFb = end_section_proof();;
(start_section_proof ["b"](`b + F <=> b`));;
refine (by (VALID ((((rewrite [] [] (XOR_DEF))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let addbF = end_section_proof();;
(start_section_proof ["b"](`b + b <=> F`));;
refine (by (VALID ((((rewrite [] [] (XOR_DEF))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((simp_tac))) THEN (done_tac)))));;
let addbb = end_section_proof();;
(start_section_proof ["b";"c"](`b + c <=> c + b`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac))) THEN (done_tac)))));;
let addbC = end_section_proof();;
(start_section_proof ["a";"b";"c"](`a + (b + c) <=> (a + b) + c`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))))));;
let addbA = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a + b) + c <=> (a + c) + b`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))))));;
let addbCA = end_section_proof();;
(start_section_proof ["a";"b";"c"](`a + (b + c) <=> b + (a + c)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))))));;
let addbAC = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a + b) /\ c <=> (a /\ c) + (b /\ c)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))))));;
let andb_addl = end_section_proof();;
(start_section_proof ["a";"b";"c"](`a /\ (b + c) <=> (a /\ b) + (a /\ c)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("c",mk_type("bool",[]))),(mk_var("c",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))))));;
let andb_addr = end_section_proof();;
(start_section_proof ["x";"y"](`x + (x + y) <=> y`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("x",mk_type("bool",[]))),(mk_var("x",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("y",mk_type("bool",[]))),(mk_var("y",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac)))))));;
let addKb = end_section_proof();;
(start_section_proof ["x";"y"](`(y + x) + x <=> y`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("x",mk_type("bool",[]))),(mk_var("x",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("y",mk_type("bool",[]))),(mk_var("y",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac)))))));;
let addbK = end_section_proof();;
(start_section_proof ["x";"y1";"y2"](`(y1 + x <=> y2 + x) ==> (y1 = y2)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("y1",mk_type("bool",[]))),(mk_var("y1",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("y2",mk_type("bool",[]))),(mk_var("y2",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("x",mk_type("bool",[]))),(mk_var("x",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))))));;
let addIb = end_section_proof();;
(start_section_proof ["x";"y1";"y2"](`(x + y1 <=> x + y2) ==> (y1 = y2)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("x",mk_type("bool",[]))),(mk_var("x",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("y1",mk_type("bool",[]))),(mk_var("y1",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("y2",mk_type("bool",[]))),(mk_var("y2",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (DISCH_THEN (fun th_2 -> (rewrite [] [] (th_2)))) THEN (simp_tac)))))));;
let addbI = end_section_proof();;
(start_section_proof ["b"](`T + b <=> ~b`));;
refine (by (VALID ((((rewrite [] [] (XOR_DEF)) THEN ((TRY done_tac))) THEN (done_tac)))));;
let addTb = end_section_proof();;
(start_section_proof ["b"](`b + T <=> ~ b`));;
refine (by (VALID ((((rewrite [] [] (XOR_DEF))) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (simp_tac))) THEN (done_tac)))));;
let addbT = end_section_proof();;
(start_section_proof ["a";"b"](`a + ~ b <=> ~ (a + b)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac)))))));;
let addbN = end_section_proof();;
(start_section_proof ["a";"b"](`~ a + b <=> ~ (a + b)`));;
refine (by (VALID (((repeat_tactic 1 9 ((rewrite [] [] (XOR_DEF)))) THEN (((SPEC_TAC ((mk_var("a",mk_type("bool",[]))),(mk_var("a",mk_type("bool",[])))))) THEN (case)) THEN (((SPEC_TAC ((mk_var("b",mk_type("bool",[]))),(mk_var("b",mk_type("bool",[])))))) THEN (case) THEN ((DISCH_THEN (fun th_0 -> (rewrite [] [] (th_0)))) THEN (DISCH_THEN (fun th_1 -> (rewrite [] [] (th_1)))) THEN (simp_tac)))))));;
let addNb = end_section_proof();;
