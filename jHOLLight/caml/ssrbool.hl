needs "caml/ssrfun.hl";;
(begin_section "ApplyIff");;
(add_section_var (mk_var ("P", (`:bool`))); add_section_var (mk_var ("Q", (`:bool`))));;
(add_section_hyp "eqPQ" (`P <=> Q`));;
(start_section_proof [](`P ==> Q`));;
refine (by (VALID ((done_tac))));;
let iffLR = end_section_proof();;
(start_section_proof [](`Q ==> P`));;
refine (by (VALID ((done_tac))));;
let iffRL = end_section_proof();;
(start_section_proof [](`~P ==> ~Q`));;
refine (by (VALID ((done_tac))));;
let iffLRn = end_section_proof();;
(start_section_proof [](`~Q ==> ~P`));;
refine (by (VALID ((done_tac))));;
let iffRLn = end_section_proof();;
let iffRLn = finalize_theorem iffRLn;;
let iffLRn = finalize_theorem iffLRn;;
let iffRL = finalize_theorem iffRL;;
let iffLR = finalize_theorem iffLR;;
(end_section "ApplyIff");;
(start_section_proof [](`T`));;
refine (by (VALID ((done_tac))));;
let is_true_true = end_section_proof();;
(start_section_proof [](`~F`));;
refine (by (VALID ((done_tac))));;
let not_false_is_true = end_section_proof();;
let isT = is_true_true;;
let notF = not_false_is_true;;
(start_section_proof ["b"](`(b = F) ==> ~b`));;
refine (by (VALID ((done_tac))));;
let negbT = end_section_proof();;
(start_section_proof ["b"](`~b ==> b = F`));;
refine (by (VALID ((done_tac))));;
let negbTE = end_section_proof();;
(start_section_proof ["b"](`b ==> ~b = F`));;
refine (by (VALID ((done_tac))));;
let negbF = end_section_proof();;
(start_section_proof ["b"](`~b = F ==> b`));;
refine (by (VALID ((done_tac))));;
let negbFE = end_section_proof();;
(start_section_proof ["b"](`~ ~b = b`));;
refine (by (VALID ((done_tac))));;
let negbK = end_section_proof();;
(start_section_proof ["b"](`~ ~ b ==> b`));;
refine (by (VALID ((done_tac))));;
let negbNE = end_section_proof();;
(start_section_proof ["b1";"b2"](`~b1 = ~b2 ==> b1 = b2`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b1",mk_type("bool",[])))) THEN (clear_assumption "b1") THEN case) THEN ((disch_tm_tac [](mk_var("b2",mk_type("bool",[])))) THEN (clear_assumption "b2") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let negb_inj = end_section_proof();;
(start_section_proof ["b";"c"](`b = ~c ==> ~b = c`));;
refine (by (VALID (((BETA_TAC THEN (DISCH_THEN(new_rewrite [] []))) THEN ((USE_THM_THEN negbK)(new_rewrite [] [])) THEN (done_tac)))));;
let negbLR = end_section_proof();;
(start_section_proof ["b";"c"](`~b = c ==> b = ~c`));;
refine (by (VALID (((BETA_TAC THEN (DISCH_THEN(GSYM_THEN (new_rewrite [] [])))) THEN ((USE_THM_THEN negbK)(new_rewrite [] [])) THEN (done_tac)))));;
let negbRL = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> ~b ==> ~c`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac))))));;
let contra = end_section_proof();;
let contraNN = contra;;
(start_section_proof ["c";"b"](`(c ==> ~b) ==> b ==> ~c`));;
refine (by (VALID ((BETA_TAC THEN (move ["h"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN contra)(fun fst_th ->(USE_THEN "h")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN ((USE_THM_THEN negbK)(new_rewrite [] [])) THEN (done_tac)))));;
let contraL = end_section_proof();;
(start_section_proof ["c";"b"](`(~c ==> b) ==> ~b ==> c`));;
refine (by (VALID ((BETA_TAC THEN (move ["h"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN contra)(fun fst_th ->(USE_THEN "h")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN ((USE_THM_THEN negbK)(new_rewrite [] [])) THEN (done_tac)))));;
let contraR = end_section_proof();;
(start_section_proof ["c";"b"](`(~c ==> ~b) ==> b ==> c`));;
refine (by (VALID ((BETA_TAC THEN (move ["h"])))));;
refine (by (VALID (((((fun thm_tac -> (USE_THM_THEN contra)(fun fst_th ->(USE_THEN "h")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC) THEN BETA_TAC) THEN repeat_tactic 1 9 (((USE_THM_THEN negbK)(new_rewrite [] []))) THEN (done_tac)))));;
let contraLR = end_section_proof();;
(start_section_proof ["b"](`(~b ==> F) ==> b`));;
refine (by (VALID ((done_tac))));;
let contraT = end_section_proof();;
(start_section_proof ["b"](`(~b ==> b) ==> b`));;
refine (by (VALID (((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)))));;
let wlog_neg = end_section_proof();;
(start_section_proof ["c";"b"](`(~c ==> b) ==> b = F ==> c`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac))))));;
let contraFT = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> b = F ==> ~c`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac))))));;
let contraFN = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> ~b) ==> b ==> c = F`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac))))));;
let contraTF = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> ~b ==> c = F`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac))))));;
let contraNF = end_section_proof();;
(start_section_proof ["c";"b"](`(c ==> b) ==> b = F ==> c = F`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac))))));;
let contraFF = end_section_proof();;
let isSome = define `isSome NONE = F /\ (!x. isSome (SOME x) = T)`;;
(begin_section "BoolIf");;
(add_section_var (mk_var ("vT", (`:A`))); add_section_var (mk_var ("vF", (`:A`))));;
(add_section_var (mk_var ("f", (`:A -> B`))));;
(add_section_var (mk_var ("b", (`:bool`))));;
(start_section_proof [](`(if b then vT else vT) = vT`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let if_same = end_section_proof();;
(start_section_proof [](`(if ~b then vT else vF) = if b then vF else vT`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let if_neg = end_section_proof();;
(start_section_proof [](`f (if b then vT else vF) = if b then f vT else f vF`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let fun_if = end_section_proof();;
(start_section_proof ["fT";"fF";"x"](`(if b then (fT:A->B) else fF) x = if b then fT x else fF x`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let if_arg = end_section_proof();;
let if_arg = finalize_theorem if_arg;;
let fun_if = finalize_theorem fun_if;;
let if_neg = finalize_theorem if_neg;;
let if_same = finalize_theorem if_same;;
(end_section "BoolIf");;
(start_section_proof ["b"](`(T /\ b) = b`));;
refine (by (VALID ((done_tac))));;
let andTb = end_section_proof();;
(start_section_proof ["b"](`(F /\ b) = F`));;
refine (by (VALID ((done_tac))));;
let andFb = end_section_proof();;
(start_section_proof ["b"](`(b /\ T) = b`));;
refine (by (VALID ((done_tac))));;
let andbT = end_section_proof();;
(start_section_proof ["b"](`(b /\ F) = F`));;
refine (by (VALID ((done_tac))));;
let andbF = end_section_proof();;
(start_section_proof ["b"](`(b /\ b) = b`));;
refine (by (VALID ((done_tac))));;
let andbb = end_section_proof();;
(start_section_proof ["b";"c"](`(b /\ c) = (c /\ b)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andbC = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b /\ (c /\ p) <=> (b /\ c) /\ p`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andbA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b /\ (c /\ p) <=> c /\ (b /\ p)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andbCA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b /\ c) /\ p <=> (b /\ p) /\ c`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andbAC = end_section_proof();;
(start_section_proof ["b"](`T \/ b <=> T`));;
refine (by (VALID ((done_tac))));;
let orTb = end_section_proof();;
(start_section_proof ["b"](`F \/ b <=> b`));;
refine (by (VALID ((done_tac))));;
let orFb = end_section_proof();;
(start_section_proof ["b"](`b \/ T <=> T`));;
refine (by (VALID ((done_tac))));;
let orbT = end_section_proof();;
(start_section_proof ["b"](`b \/ F <=> b`));;
refine (by (VALID ((done_tac))));;
let orbF = end_section_proof();;
(start_section_proof ["b"](`b \/ b <=> b`));;
refine (by (VALID ((done_tac))));;
let orbb = end_section_proof();;
(start_section_proof ["b";"c"](`b \/ c <=> c \/ b`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orbC = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b \/ (c \/ p) <=> (b \/ c) \/ p`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orbA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b \/ (c \/ p) <=> c \/ (b \/ p)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orbCA = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b \/ c) \/ p <=> (b \/ p) \/ c`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orbAC = end_section_proof();;
(start_section_proof ["b"](`b /\ ~b <=> F`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andbN = end_section_proof();;
(start_section_proof ["b"](`~b /\ b <=> F`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andNb = end_section_proof();;
(start_section_proof ["b"](`b \/ ~b <=> T`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orbN = end_section_proof();;
(start_section_proof ["b"](`~b \/ b <=> T`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orNb = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b \/ c) /\ p <=> (b /\ p) \/ (c /\ p)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andb_orl = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b /\ (c \/ p) <=> (b /\ c) \/ (b /\ p)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andb_orr = end_section_proof();;
(start_section_proof ["b";"c";"p"](`(b /\ c) \/ p <=> (b \/ p) /\ (c \/ p)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orb_andl = end_section_proof();;
(start_section_proof ["b";"c";"p"](`b \/ (c /\ p) <=> (b \/ c) /\ (b \/ p)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orb_andr = end_section_proof();;
(start_section_proof ["a";"b"](`(b ==> a) ==> (a /\ b <=> b)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andb_idl = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> b) ==> (a /\ b <=> a)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andb_idr = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a ==> (b <=> c)) ==> (a /\ b <=> a /\ c)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andb_id2l = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(b ==> (a <=> c)) ==> (a /\ b <=> c /\ b)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andb_id2r = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> b) ==> (a \/ b <=> b)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orb_idl = end_section_proof();;
(start_section_proof ["a";"b"](`(b ==> a) ==> (a \/ b <=> a)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orbb_idr = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(~ a ==> (b <=> c)) ==> (a \/ b <=> a \/ c)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orb_id2l = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(~ b ==> (a <=> c)) ==> (a \/ b <=> c \/ b)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orb_id2r = end_section_proof();;
(start_section_proof ["a";"b"](`~ (a /\ b) <=> ~ a \/ ~ b`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let negb_and = end_section_proof();;
(start_section_proof ["a";"b"](`~ (a \/ b) <=> ~ a /\ ~ b`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let negb_or = end_section_proof();;
(start_section_proof ["a";"b"](`((a /\ b) \/ a) = a`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andbK = end_section_proof();;
(start_section_proof ["a";"b"](`a \/ b /\ a <=> a`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let andKb = end_section_proof();;
(start_section_proof ["a";"b"](`(a \/ b) /\ a <=> a`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orbK = end_section_proof();;
(start_section_proof ["a";"b"](`a /\ (b \/ a) <=> a`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let orKb = end_section_proof();;
(start_section_proof ["b"](`b ==> T`));;
refine (by (VALID ((done_tac))));;
let implybT = end_section_proof();;
(start_section_proof ["b"](`(b ==> F) <=> ~ b`));;
refine (by (VALID ((done_tac))));;
let implybF = end_section_proof();;
(start_section_proof ["b"](`F ==> b`));;
refine (by (VALID ((done_tac))));;
let implyFb = end_section_proof();;
(start_section_proof ["b"](`(T ==> b) <=> b`));;
refine (by (VALID ((done_tac))));;
let implyTb = end_section_proof();;
(start_section_proof ["b"](`b ==> b`));;
refine (by (VALID ((done_tac))));;
let implybb = end_section_proof();;
(start_section_proof ["a";"b"](`~ (a ==> b) <=> a /\ ~ b`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let negb_imply = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> b) <=> ~ a \/ b`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let implybE = end_section_proof();;
(start_section_proof ["a";"b"](`(~ a ==> b) <=> a \/ b`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let implyNb = end_section_proof();;
(start_section_proof ["a";"b"](`(a ==> ~ b) <=> (b ==> ~ a)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let implybN = end_section_proof();;
(start_section_proof ["a";"b"](`(~ a ==> ~ b) <=> b ==> a`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let implybNN = end_section_proof();;
(start_section_proof ["a";"b"](`(~ a ==> b) ==> ((a ==> b) <=> b)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let implyb_idl = end_section_proof();;
(start_section_proof ["a";"b"](`(b ==> ~ a) ==> ((a ==> b) <=> ~ a)`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let implyb_idr = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a ==> (b <=> c)) ==> ((a ==> b) <=> (a ==> c))`));;
refine (by (VALID ((((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let implyb_id2l = end_section_proof();;
let XOR_DEF = new_definition `XOR p q = if p then ~q else q`;;
overload_interface("+", `XOR`);;
(start_section_proof ["b"](`F + b <=> b`));;
refine (by (VALID ((((USE_THM_THEN XOR_DEF)(new_rewrite [] [])) THEN (done_tac)))));;
let addFb = end_section_proof();;
(start_section_proof ["b"](`b + F <=> b`));;
refine (by (VALID ((((USE_THM_THEN XOR_DEF)(new_rewrite [] [])) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let addbF = end_section_proof();;
(start_section_proof ["b"](`b + b <=> F`));;
refine (by (VALID ((((USE_THM_THEN XOR_DEF)(new_rewrite [] [])) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let addbb = end_section_proof();;
(start_section_proof ["b";"c"](`b + c <=> c + b`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let addbC = end_section_proof();;
(start_section_proof ["a";"b";"c"](`a + (b + c) <=> (a + b) + c`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case) THEN ((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac))))));;
let addbA = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a + b) + c <=> (a + c) + b`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case) THEN ((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac))))));;
let addbCA = end_section_proof();;
(start_section_proof ["a";"b";"c"](`a + (b + c) <=> b + (a + c)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case) THEN ((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac))))));;
let addbAC = end_section_proof();;
(start_section_proof ["a";"b";"c"](`(a + b) /\ c <=> (a /\ c) + (b /\ c)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case) THEN ((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac))))));;
let andb_addl = end_section_proof();;
(start_section_proof ["a";"b";"c"](`a /\ (b + c) <=> (a /\ b) + (a /\ c)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case) THEN ((disch_tm_tac [](mk_var("c",mk_type("bool",[])))) THEN (clear_assumption "c") THEN case) THEN ((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case THEN (simp_tac))))));;
let andb_addr = end_section_proof();;
(start_section_proof ["x";"y"](`x + (x + y) <=> y`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("x",mk_type("bool",[])))) THEN (clear_assumption "x") THEN case) THEN ((disch_tm_tac [](mk_var("y",mk_type("bool",[])))) THEN (clear_assumption "y") THEN case THEN (simp_tac))))));;
let addKb = end_section_proof();;
(start_section_proof ["x";"y"](`(y + x) + x <=> y`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("x",mk_type("bool",[])))) THEN (clear_assumption "x") THEN case) THEN ((disch_tm_tac [](mk_var("y",mk_type("bool",[])))) THEN (clear_assumption "y") THEN case THEN (simp_tac))))));;
let addbK = end_section_proof();;
(start_section_proof ["x";"y1";"y2"](`(y1 + x <=> y2 + x) ==> (y1 = y2)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("y1",mk_type("bool",[])))) THEN (clear_assumption "y1") THEN case) THEN ((disch_tm_tac [](mk_var("y2",mk_type("bool",[])))) THEN (clear_assumption "y2") THEN case) THEN ((disch_tm_tac [](mk_var("x",mk_type("bool",[])))) THEN (clear_assumption "x") THEN case THEN (simp_tac))))));;
let addIb = end_section_proof();;
(start_section_proof ["x";"y1";"y2"](`(x + y1 <=> x + y2) ==> (y1 = y2)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("x",mk_type("bool",[])))) THEN (clear_assumption "x") THEN case) THEN ((disch_tm_tac [](mk_var("y1",mk_type("bool",[])))) THEN (clear_assumption "y1") THEN case) THEN ((disch_tm_tac [](mk_var("y2",mk_type("bool",[])))) THEN (clear_assumption "y2") THEN case THEN (simp_tac))))));;
let addbI = end_section_proof();;
(start_section_proof ["b"](`T + b <=> ~b`));;
refine (by (VALID (((((USE_THM_THEN XOR_DEF)(new_rewrite [] [])) THEN ((TRY done_tac))) THEN (done_tac)))));;
let addTb = end_section_proof();;
(start_section_proof ["b"](`b + T <=> ~ b`));;
refine (by (VALID ((((USE_THM_THEN XOR_DEF)(new_rewrite [] [])) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac)) THEN (done_tac)))));;
let addbT = end_section_proof();;
(start_section_proof ["a";"b"](`a + ~ b <=> ~ (a + b)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac))))));;
let addbN = end_section_proof();;
(start_section_proof ["a";"b"](`~ a + b <=> ~ (a + b)`));;
refine (by (VALID ((repeat_tactic 1 9 (((USE_THM_THEN XOR_DEF)(new_rewrite [] []))) THEN ((disch_tm_tac [](mk_var("a",mk_type("bool",[])))) THEN (clear_assumption "a") THEN case) THEN ((disch_tm_tac [](mk_var("b",mk_type("bool",[])))) THEN (clear_assumption "b") THEN case THEN (simp_tac))))));;
let addNb = end_section_proof();;
let subpred = new_definition `subpred p1 p2 <=> (!x. p1 x ==> p2 x)`;;
let subrel = new_definition `subrel r1 r2 <=> (!x y. r1 x y ==> r2 x y)`;;
let pred0 = new_definition `pred0 = (\x. F)`;;
let predT = new_definition `predT = (\x. T)`;;
let predI = new_definition `predI p1 p2 = (\x. p1 x /\ p2 x)`;;
let predU = new_definition `predU p1 p2 = (\x. p1 x \/ p2 x)`;;
let predC = new_definition `predC p = (\x. ~p x)`;;
let predD = new_definition `predD p1 p2 = (\x. ~p2 x /\ p1 x)`;;
let preim = new_definition `preim f (d:A->bool) = (\x. d (f x))`;;
let relU = new_definition `relU r1 r2 = (\x y. r1 x y \/ r2 x y)`;;
(start_section_proof ["r1";"r2"](`subrel r1 (relU r1 r2)`));;
refine (by (VALID (((((USE_THM_THEN relU)(new_rewrite [] [])) THEN ((USE_THM_THEN subrel)(new_rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let subrelUl = end_section_proof();;
(start_section_proof ["r1";"r2"](`subrel r2 (relU r1 r2)`));;
refine (by (VALID (((((USE_THM_THEN relU)(new_rewrite [] [])) THEN ((USE_THM_THEN subrel)(new_rewrite [] [])) THEN (simp_tac)) THEN (done_tac)))));;
let subrelUr = end_section_proof();;
(begin_section "RelationProperties");;
(add_section_var (mk_var ("R", (`:A->A->bool`))));;
let total = new_definition `total R <=> !x y. R x y \/ R y x`;;
let transitive = new_definition `transitive R <=> (!x y z. R x y ==> R y z ==> R x z)`;;
let symmetric = new_definition `symmetric R <=> (!x y. R x y <=> R y x)`;;
let antisymmetric = new_definition `antisymmetric R <=> (!x y. R x y /\ R y x ==> x = y)`;;
let pre_symmetric = new_definition `pre_symmetric R <=> (!x y. R x y ==> R y x)`;;
(start_section_proof [](`pre_symmetric R ==> symmetric R`));;
refine (by (VALID ((((((USE_THM_THEN pre_symmetric)(new_rewrite [] [])) THEN ((USE_THM_THEN symmetric)(new_rewrite [] []))) THEN (move ["h"]) THEN (move ["x"]) THEN (move ["y"])) THEN (split_tac) THEN (done_tac)))));;
let symmetric_from_pre = end_section_proof();;
let reflexive = new_definition `reflexive R <=> !x. R x x`;;
let irreflexive = new_definition `irreflexive R <=> !x. ~R x x`;;
let left_transitive = new_definition `left_transitive R <=> !x y. R x y ==> R x = R y`;;
let right_transitive = new_definition `right_transitive R <=> (!x y. R x y ==> !z. R z x = R z y)`;;
(begin_section "PER");;
(add_section_hyp "symR" (`symmetric R`));;
(add_section_hyp "trR" (`transitive R`));;
(start_section_proof [](`left_transitive R`));;
refine (by (VALID (((((USE_THEN "trR")MP_TAC) THEN (clear_assumption "trR") THEN ((USE_THEN "symR")MP_TAC) THEN (clear_assumption "symR") THEN BETA_TAC) THEN ((((USE_THM_THEN symmetric)(new_rewrite [] [])) THEN ((USE_THM_THEN transitive)(new_rewrite [] [])) THEN ((USE_THM_THEN left_transitive)(new_rewrite [] []))) THEN (move ["sym"]) THEN (move ["tr"]) THEN (move ["x"]) THEN (move ["y"]) THEN (move ["Rxy"]))))));;
refine (by (VALID (((((USE_THM_THEN eq_ext)(GSYM_THEN (new_rewrite [] []))) THEN (move ["z"])) THEN ((split_tac) THEN (move ["HR"])) THEN (((USE_THEN "tr")MP_TAC) THEN (clear_assumption "tr") THEN (DISCH_THEN apply_tac)) THENL [(exists_tac (mk_var("x",mk_vartype "A"))); ((exists_tac (mk_var("y",mk_vartype "A"))) THEN ((TRY done_tac)))] THEN ((USE_THEN "sym")(new_rewrite [] [])) THEN (done_tac)))));;
let sym_left_transitive = end_section_proof();;
(start_section_proof [](`right_transitive R`));;
refine (by (VALID (((((USE_THEN "trR")MP_TAC) THEN (clear_assumption "trR") THEN ((USE_THEN "symR")MP_TAC) THEN (clear_assumption "symR") THEN BETA_TAC) THEN ((((USE_THM_THEN symmetric)(new_rewrite [] [])) THEN ((USE_THM_THEN transitive)(new_rewrite [] [])) THEN ((USE_THM_THEN right_transitive)(new_rewrite [] []))) THEN (move ["sym"]) THEN (move ["tr"]) THEN (move ["x"]) THEN (move ["y"]) THEN (move ["z"]) THEN (move ["Rxy"]))))));;
refine (by (VALID ((((split_tac) THEN (move ["HR"])) THEN (((USE_THEN "tr")MP_TAC) THEN (clear_assumption "tr") THEN (DISCH_THEN apply_tac)) THENL [((exists_tac (mk_var("x",mk_vartype "A"))) THEN ((TRY done_tac))); (exists_tac (mk_var("y",mk_vartype "A")))] THEN ((USE_THEN "sym")(new_rewrite [] [(`R y x`)])) THEN (done_tac)))));;
let sym_right_transitive = end_section_proof();;
let sym_right_transitive = finalize_theorem sym_right_transitive;;
let sym_left_transitive = finalize_theorem sym_left_transitive;;
(end_section "PER");;
let equivalence_rel = new_definition `equivalence_rel R <=>
	!x y z. R z z /\ (R x y ==> R x z = R y z)`;;
(start_section_proof [](`equivalence_rel R <=> (reflexive R /\ left_transitive R)`));;
refine (by (VALID (((((USE_THM_THEN equivalence_rel)(new_rewrite [] [])) THEN ((USE_THM_THEN reflexive)(new_rewrite [] [])) THEN ((USE_THM_THEN left_transitive)(new_rewrite [] []))) THEN ((split_tac) THENL [(move ["H"]); (case THEN ((move ["sym"]) THEN (move ["left_tr"])))])))));;
refine (by (VALID (((split_tac) THENL [((move ["x"]) THEN ((TRY done_tac))); ((move ["x"]) THEN (move ["y"]))] THEN (move ["Rxy"])))));;
refine (by (VALID ((((USE_THM_THEN eq_ext)(GSYM_THEN (new_rewrite [] []))) THEN (move ["z"])))));;
refine (by (VALID (((((fun thm_tac -> (fun thm_tac -> (fun thm_tac -> (USE_THEN "H")(ISPEC_THEN (mk_var("x",mk_vartype "A")) thm_tac))(ISPEC_THEN (mk_var("y",mk_vartype "A")) thm_tac))(ISPEC_THEN (mk_var("z",mk_vartype "A")) thm_tac))MP_TAC) THEN BETA_TAC THEN (case THEN ((move ["_"]) THEN ((fun thm_tac -> DISCH_THEN (fun fst_th ->(USE_THEN "Rxy")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))MP_TAC)))) THEN (done_tac)))));;
refine (by (VALID (((BETA_TAC THEN (move ["x"]) THEN (move ["y"]) THEN (move ["z"])) THEN ((((USE_THEN "sym")(new_rewrite [] [])) THEN (simp_tac)) THEN (move ["Rxy"]))))));;
refine (by (VALID ((((fun thm_tac -> (USE_THEN "left_tr")(fun fst_th ->(USE_THEN "Rxy")(fun th -> MATCH_MP_THEN th thm_tac fst_th)))(new_rewrite [] [])) THEN (done_tac)))));;
let equivalence_relP = end_section_proof();;
let equivalence_relP = finalize_theorem equivalence_relP;;
let sym_right_transitive = finalize_theorem sym_right_transitive;;
let sym_left_transitive = finalize_theorem sym_left_transitive;;
let symmetric_from_pre = finalize_theorem symmetric_from_pre;;
(end_section "RelationProperties");;
(start_section_proof ["R"](`transitive R ==> transitive (\x y. R y x)`));;
refine (by (VALID ((repeat_tactic 2 0 (((USE_THM_THEN transitive)(new_rewrite [] []))) THEN (move ["tr1"]) THEN (move ["x"]) THEN (move ["y"]) THEN (move ["z"]) THEN (simp_tac) THEN (case THEN ((move ["R1"]) THEN (move ["R2"])))))));;
refine (by (VALID (((((USE_THEN "tr1")MP_TAC) THEN (clear_assumption "tr1") THEN (DISCH_THEN apply_tac)) THEN (exists_tac (mk_var("y",mk_vartype "?1435248"))) THEN (done_tac)))));;
let rev_trans = end_section_proof();;
