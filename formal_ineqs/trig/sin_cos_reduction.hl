needs "update_database.ml";;

needs "misc/misc.hl";;
needs "misc/vars.hl";;
needs "arith/interval_arith.hl";;
needs "arith/float_atn.hl";;

open Arith_misc;;
open Float_atn;;
open Float_theory;;
open Interval_arith;;
open More_float;;
open Arith_float;;
open Misc_vars;;

prioritize_real();;

(* Move to float.hl *)
(* Creates a (not normalized) floating-point number from a given natural number. *)
(* Returns the theorem |- &n = float F n min_exp and the term n                  *)
let float_eq_th_of_num =
  let conv_th = (Arith_nat.NUMERALS_TO_NUM o REWRITE_RULE[min_exp_def] o SPEC_ALL) FLOAT_OF_NUM in
    fun n ->
      let _ = if sign_num n < 0 then failwith "float_of_num_eq: negative number" in
      let n_tm = rand (Arith_nat.mk_numeral_array n) in
	INST[n_tm, n_var_num] conv_th, n_tm;;

(* Interval approximations of 2 * pi *)
let two_pi_array = 
  let n = Array.length pi_approx_array in
  let pi = pi_approx_array.(n - 1) in
  let two_pi = float_interval_mul n two_interval pi in
    Array.init (n - 1) (fun i -> float_interval_round i two_pi);;

(* Interval approximations of -pi *)
let neg_pi_array =
  let n = Array.length pi_approx_array in
  Array.init n (fun i -> float_interval_neg pi_approx_array.(i));;


(* Theorems of the form: |- &2 * pi <= high, |- interval_arith low (&0, &2 * pi) *)
let two_pi_high, two_pi_low =
  let interval_pos = prove(`interval_arith x (float_num F n e, f) 
			   ==> x <= f /\ interval_arith (float_num F n e) (&0, x)`,
			   REWRITE_TAC[interval_arith] THEN 
			     MP_TAC (SPECL[`n:num`; `e:num`] FLOAT_F_POS) THEN
			     REAL_ARITH_TAC) in
  let two_pi_list = Array.to_list two_pi_array in
  let ths1 = map (fun th -> CONJUNCTS (MATCH_MP interval_pos th)) two_pi_list in
  let list1, list2 = unzip (map pair_of_list ths1) in
    Array.of_list list1, Array.of_list list2;;

  
(**********)				   

let f_pi = 3.14159265358979323846 and
    f_2_pi = 6.28318530717958647693 and
    f_pi_2 = 1.57079632679489661923;;


let low_reduction_th = prove(`z = &i /\ &2 * pi <= t /\ z * t <= m /\ a <= x - m
    ==> ?k. integer k /\ a <= x + (&2 * pi) * k`,
   REWRITE_TAC[interval_arith] THEN REPEAT STRIP_TAC THEN 
     EXISTS_TAC `-- &i` THEN SIMP_TAC[INTEGER_CLOSED] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `x - m:real` THEN
     ASM_REWRITE_TAC[REAL_LE_LADD; real_sub; REAL_MUL_RNEG; REAL_LE_NEG] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `z * t:real` THEN
     ASM_REWRITE_TAC[REAL_ARITH `(&2 * pi) * &i = &i * (&2 * pi)`] THEN
     MATCH_MP_TAC REAL_LE_MUL2 THEN ASM_REWRITE_TAC[] THEN
     MP_TAC PI_POS_LE THEN REAL_ARITH_TAC);;



let f_tm = mk_float (int_of_float ((f_pi +. f_2_pi +. 0.0001) *. 10. ** 10.)) (-10);;
let f_tm = mk_float 20 0;;

let x = float_of_float_tm f_tm;;
let k0 = -int_of_float (x /. f_2_pi);;
let y = x +. float_of_int k0 *. f_2_pi;;
let i =
  if y < -.f_pi then k0 + 1
  else if y > f_pi then k0 - 1 
  else k0;;

(* i = 0 *)
(* a = f_tm *)

let pp = 3;;

(* i < 0 *)
let i_eq_th, i_num_tm = float_eq_th_of_num (Int (-i));;
let z_tm = rand (concl i_eq_th);;
let two_pi_th = two_pi_high.(pp);;
let t_tm = rand (concl two_pi_th);;
let zt_th = float_mul_hi pp z_tm t_tm;;
let m_tm = rand (concl zt_th);;
let xm_th = float_sub_lo pp f_tm m_tm;;
let a_tm = rand (rator (concl xm_th));;

float_prove_le_interval a_tm pi_approx_array.(pp);;
float_compare_interval a_tm pi_approx_array.(pp);;

float_compare_interval a_tm neg_pi_array.(pp);;

let tmp_th = float_add_hi pp a_tm t_tm;;
let xx_tm = rand (concl tmp_th);;

float_compare_interval xx_tm pi_approx_array.(pp);;
float_compare_interval xx_tm neg_pi_array.(pp);;

test 10000 float_of_float_tm f_tm;;


let y = 2;;

prove(`(?k. integer k /\ a <= x + (&2 * pi) * k) /\ 
	b <= a + (&2 * pi)
	==> (?k. integer k /\ b <= x + (&2 * pi) * k)`,
   REPEAT STRIP_TAC THEN EXISTS_TAC `k + &1` THEN
     ASM_SIMP_TAC[INTEGER_ADD_EQ; INTEGER_CLOSED] THEN
     REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC);;


prove(`&2 * pi <= b /\ &i * b <= m /\ r <= x - m
	==> ?k. integer k /\ r <= x + (&2 * pi) * k`,
   REWRITE_TAC[interval_arith] THEN REPEAT STRIP_TAC THEN 
     EXISTS_TAC `-- &i` THEN SIMP_TAC[INTEGER_CLOSED] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `x - m:real` THEN
     ASM_REWRITE_TAC[REAL_LE_LADD; real_sub; REAL_MUL_RNEG; REAL_LE_NEG] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `&i * b` THEN
     ASM_REWRITE_TAC[REAL_ARITH `(&2 * pi) * &i = &i * (&2 * pi)`] THEN
     MATCH_MP_TAC REAL_LE_MUL2 THEN ASM_REWRITE_TAC[] THEN
     MP_TAC PI_POS_LE THEN REAL_ARITH_TAC);;


prove(`interval_arith a (&0, &2 * pi) /\
	m <= &i * a /\ r <= x + m
	==> ?k. integer k /\ r <= x + (&2 * pi) * k`,
   REWRITE_TAC[interval_arith] THEN REPEAT STRIP_TAC THEN 
     EXISTS_TAC `&i` THEN SIMP_TAC[INTEGER_CLOSED] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `x + m:real` THEN
     ASM_REWRITE_TAC[REAL_LE_LADD] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `&i * a` THEN
     ASM_REWRITE_TAC[REAL_ARITH `(&2 * pi) * &i = &i * (&2 * pi)`] THEN
     MATCH_MP_TAC REAL_LE_MUL2 THEN ASM_REWRITE_TAC[] THEN
     MP_TAC PI_POS_LE THEN REAL_ARITH_TAC);;


let cos_minus_pi = prove(`!x. cos (x - pi) = -- cos x`,
			 ONCE_REWRITE_TAC[GSYM (SPEC `x - pi` COS_PERIODIC)] THEN
			   REWRITE_TAC[REAL_ARITH `a - b + &2 * b = a + b`] THEN
			   REWRITE_TAC[COS_PERIODIC_PI]);;
  

let cos_reduction_0_pi_1 = prove(`interval_arith x (a,b) /\
				 (?k. integer k /\ a1 <= a + (&2 * pi) * k 
				  /\ b + (&2 * pi) * k <= b1) /\
				 interval_arith a1 (&0, pi) /\
				 b1 <= pi /\
				 cos a1 <= high /\ low <= cos b1
				 ==> interval_arith (cos x) (low, high)`,
      REWRITE_TAC[interval_arith] THEN STRIP_TAC THEN REWRITE_TAC[GSYM interval_arith] THEN
	MATCH_MP_TAC APPROX_INTERVAL THEN
	EXISTS_TAC `cos b1` THEN EXISTS_TAC `cos a1` THEN ASM_REWRITE_TAC[interval_arith] THEN
	SUBGOAL_THEN `cos x = cos (x + (&2 * pi) * k)` (fun th -> REWRITE_TAC[th]) THENL [
	  REWRITE_TAC[COS_EQ] THEN EXISTS_TAC `--k:real` THEN ASM_SIMP_TAC[INTEGER_CLOSED] THEN
	    REAL_ARITH_TAC;
	  ALL_TAC
	] THEN
	CONJ_TAC THEN MATCH_MP_TAC COS_MONO_LE THEN REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC);;

let cos_reduction_0_pi_2 = prove(`interval_arith x (a,b) /\
				   (?k. integer k /\ a1 <= a + (&2 * pi) * k 
				    /\ b + (&2 * pi) * k <= b1) /\
				   interval_arith a1 (&0, pi) /\
				   b1 <= &2 * pi /\
				   cos a1 <= high1 /\ cos b1 <= high2 /\
				   max high1 high2 = high
				       ==> interval_arith (cos x) (-- &1, high)`,
   REWRITE_TAC[interval_arith; COS_BOUNDS] THEN STRIP_TAC THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `max (cos a1) (cos b1)` THEN
     CONJ_TAC THENL [ ALL_TAC; REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC ] THEN
     REWRITE_TAC[REAL_LE_MAX] THEN
     SUBGOAL_THEN `cos x = cos (x + (&2 * pi) * k)` (fun th -> REWRITE_TAC[th]) THENL [
       REWRITE_TAC[COS_EQ] THEN EXISTS_TAC `--k:real` THEN ASM_SIMP_TAC[INTEGER_CLOSED] THEN
	 REAL_ARITH_TAC;
       ALL_TAC
     ] THEN
     ASM_CASES_TAC `x + (&2 * pi) * k <= pi` THENL [
       DISJ1_TAC THEN
	 MATCH_MP_TAC COS_MONO_LE THEN
	 REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC;
       ALL_TAC
     ] THEN
     DISJ2_TAC THEN
     ONCE_REWRITE_TAC[GSYM REAL_LE_NEG] THEN
     REWRITE_TAC[GSYM cos_minus_pi] THEN
     MATCH_MP_TAC COS_MONO_LE THEN
     REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC);;


let cos_reduction_0_pi_2a = prove(`interval_arith x (a,b) /\
				    (?k. integer k /\ a1 <= a + (&2 * pi) * k 
				     /\ b + (&2 * pi) * k <= b1) /\
				    interval_arith a1 (&0, pi) /\
				    a1 + b1 <= &2 * pi /\
				    cos a1 <= high
				    ==> interval_arith (cos x) (-- &1, high)`,
   STRIP_TAC THEN MATCH_MP_TAC (GEN_ALL cos_reduction_0_pi_2) THEN
     MAP_EVERY EXISTS_TAC [`a:real`; `b:real`; `a1:real`; `b1:real`; `high:real`; `high:real`] THEN
     ASM_REWRITE_TAC[REAL_MAX_ACI] THEN
     REPEAT CONJ_TAC THENL [
       EXISTS_TAC `k:real` THEN ASM_REWRITE_TAC[];
       REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC;
       ALL_TAC
     ] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `cos a1` THEN ASM_REWRITE_TAC[] THEN
     ASM_CASES_TAC `b1 <= pi` THENL [
       MATCH_MP_TAC COS_MONO_LE THEN
	 REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC;
       ALL_TAC
     ] THEN
     ONCE_REWRITE_TAC[GSYM REAL_LE_NEG] THEN
     REWRITE_TAC[GSYM cos_minus_pi] THEN
     SUBGOAL_THEN `cos (a1 - pi) = cos (pi - a1)` (fun th -> REWRITE_TAC[th]) THENL [
       ONCE_REWRITE_TAC[REAL_ARITH `a1 - pi = --(pi - a1)`] THEN REWRITE_TAC[COS_NEG];
       ALL_TAC
     ] THEN
     MATCH_MP_TAC COS_MONO_LE THEN
     REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC);;


let cos_reduction_0_pi_2b = prove(`interval_arith x (a,b) /\
				    (?k. integer k /\ a1 <= a + (&2 * pi) * k 
				     /\ b + (&2 * pi) * k <= b1) /\
				    interval_arith a1 (&0, pi) /\
				    b1 <= &2 * pi /\ &2 * pi <= a1 + b1 /\
				    cos b1 <= high
				    ==> interval_arith (cos x) (-- &1, high)`,
   STRIP_TAC THEN MATCH_MP_TAC (GEN_ALL cos_reduction_0_pi_2) THEN
     MAP_EVERY EXISTS_TAC [`a:real`; `b:real`; `a1:real`; `b1:real`; `high:real`; `high:real`] THEN
     ASM_REWRITE_TAC[REAL_MAX_ACI] THEN
     REPEAT CONJ_TAC THENL [
       EXISTS_TAC `k:real` THEN ASM_REWRITE_TAC[];
       ALL_TAC
     ] THEN
     MATCH_MP_TAC REAL_LE_TRANS THEN EXISTS_TAC `cos b1` THEN ASM_REWRITE_TAC[] THEN
     ONCE_REWRITE_TAC[GSYM REAL_LE_NEG] THEN
     REWRITE_TAC[GSYM cos_minus_pi] THEN
     SUBGOAL_THEN `cos (a1 - pi) = cos (pi - a1)` (fun th -> REWRITE_TAC[th]) THENL [
       ONCE_REWRITE_TAC[REAL_ARITH `a1 - pi = --(pi - a1)`] THEN REWRITE_TAC[COS_NEG];
       ALL_TAC
     ] THEN
     MATCH_MP_TAC COS_MONO_LE THEN
     REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC);;
     

let cos_reduction_neg_pi_0_1 = prove(`interval_arith x (a,b) /\
				       (?k. integer k /\ a1 <= a + (&2 * pi) * k 
					/\ b + (&2 * pi) * k <= b1) /\
				       interval_arith a1 (--pi, &0) /\
				       b1 <= &0 /\
				       low <= cos a1 /\ cos b1 <= high
				       ==> interval_arith (cos x) (low, high)`,
   STRIP_TAC THEN ONCE_REWRITE_TAC[GSYM INTERVAL_NEG_EQ] THEN REWRITE_TAC[GSYM COS_PERIODIC_PI] THEN
     MATCH_MP_TAC (GEN_ALL cos_reduction_0_pi_1) THEN
     MAP_EVERY EXISTS_TAC [`a + pi`; `b + pi`; `a1 + pi`; `b1 + pi`] THEN
     REWRITE_TAC[COS_PERIODIC_PI] THEN
     REPEAT CONJ_TAC THEN TRY (REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC) THEN
     EXISTS_TAC `k:real` THEN
     ASM_REWRITE_TAC[] THEN CONJ_TAC THENL [
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
     ]);;


let cos_reduction_neg_pi_0_2 = prove(`interval_arith x (a,b) /\
				       (?k. integer k /\ a1 <= a + (&2 * pi) * k 
					/\ b + (&2 * pi) * k <= b1) /\
				       interval_arith a1 (--pi, &0) /\
				       b1 <= pi /\
				       low1 <= cos a1 /\ low2 <= cos b1 /\
				       min low1 low2 = low
				       ==> interval_arith (cos x) (low, &1)`,
   STRIP_TAC THEN ONCE_REWRITE_TAC[GSYM INTERVAL_NEG_EQ] THEN REWRITE_TAC[GSYM COS_PERIODIC_PI] THEN
     MATCH_MP_TAC (GEN_ALL cos_reduction_0_pi_2) THEN
     MAP_EVERY EXISTS_TAC [`a + pi`; `b + pi`; `a1 + pi`; `b1 + pi`; `--low1`; `--low2`] THEN
     REWRITE_TAC[COS_PERIODIC_PI] THEN
     REPEAT CONJ_TAC THEN TRY (REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC) THEN
     EXISTS_TAC `k:real` THEN
     ASM_REWRITE_TAC[] THEN CONJ_TAC THENL [
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
     ]);;

     
let cos_reduction_neg_pi_0_2a = prove(`interval_arith x (a,b) /\
					(?k. integer k /\ a1 <= a + (&2 * pi) * k 
					 /\ b + (&2 * pi) * k <= b1) /\
					interval_arith a1 (--pi, &0) /\
					a1 + b1 <= &0 /\
					low <= cos a1
					==> interval_arith (cos x) (low, &1)`,
   STRIP_TAC THEN ONCE_REWRITE_TAC[GSYM INTERVAL_NEG_EQ] THEN REWRITE_TAC[GSYM COS_PERIODIC_PI] THEN
     MATCH_MP_TAC (GEN_ALL cos_reduction_0_pi_2a) THEN
     MAP_EVERY EXISTS_TAC [`a + pi`; `b + pi`; `b1 + pi`; `a1 + pi`] THEN
     REWRITE_TAC[COS_PERIODIC_PI] THEN
     REPEAT CONJ_TAC THEN TRY (REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC) THEN
     EXISTS_TAC `k:real` THEN
     ASM_REWRITE_TAC[] THEN CONJ_TAC THENL [
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
     ]);;


let cos_reduction_neg_pi_0_2b = prove(`interval_arith x (a,b) /\
					(?k. integer k /\ a1 <= a + (&2 * pi) * k 
					 /\ b + (&2 * pi) * k <= b1) /\
					interval_arith a1 (--pi, &0) /\
					b1 <= pi /\ &0 <= a1 + b1 /\
					low <= cos b1
					==> interval_arith (cos x) (low, &1)`,
   STRIP_TAC THEN ONCE_REWRITE_TAC[GSYM INTERVAL_NEG_EQ] THEN REWRITE_TAC[GSYM COS_PERIODIC_PI] THEN
     MATCH_MP_TAC (GEN_ALL cos_reduction_0_pi_2b) THEN
     MAP_EVERY EXISTS_TAC [`a + pi`; `b + pi`; `a1 + pi`; `b1 + pi`] THEN
     REWRITE_TAC[COS_PERIODIC_PI] THEN
     REPEAT CONJ_TAC THEN TRY (REPEAT (POP_ASSUM MP_TAC) THEN REWRITE_TAC[interval_arith] THEN REAL_ARITH_TAC) THEN
     EXISTS_TAC `k:real` THEN
     ASM_REWRITE_TAC[] THEN CONJ_TAC THENL [
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
       ASM_REWRITE_TAC[REAL_ARITH `(a + pi) + b = (a + b) + pi`; REAL_LE_RADD];
     ]);;

	  
        
 
