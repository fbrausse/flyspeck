needs "series.hl";;

(* matan *)

let matan = new_definition `matan x = 
  if (x = &0) then &1
  else if (x > &0) then atn (sqrt x) / (sqrt x) 
  else  (log ((&1 + sqrt( -- x))/(&1 - sqrt( -- x)))) / (&2 * sqrt (-- x))`;;


let log_matan_series = prove(`!x. abs x < &1 /\ ~(x = &0)
			       ==> ((\k. x pow (2 * k) / &(2 * k + 1))
				      real_sums log ((&1 + x) / (&1 - x)) / (&2 * x)) (:num)`,
   REPEAT STRIP_TAC THEN
     MATCH_MP_TAC REAL_SUMS_EQ THEN REWRITE_TAC[IN_UNIV] THEN
     EXISTS_TAC `\k. x pow (2 * k + 1) / &(2 * k + 1) * inv x` THEN
     CONJ_TAC THENL [
       X_GEN_TAC `k:num` THEN REWRITE_TAC[REAL_POW_ADD; REAL_POW_1] THEN
	 ONCE_REWRITE_TAC[REAL_ARITH `(a * x) / b * inv x = (x * inv x) * a / b:real`] THEN
	 ASM_SIMP_TAC[REAL_MUL_RINV; REAL_MUL_LID];
       ALL_TAC
     ] THEN
     REWRITE_TAC[real_div; REAL_INV_MUL; REAL_MUL_ASSOC] THEN
     MATCH_MP_TAC REAL_SERIES_RMUL THEN REWRITE_TAC[GSYM real_div] THEN
     ABBREV_TAC `f = \x:real. log ((&1 + x) / (&1 - x)) / &2` THEN
     MP_TAC (SPECL[`f:real->real`; `\x:real. inv (&1 - x pow 2)`; `\i. if EVEN i then &1 else &0`; `(:num)`; `&1`] power_series_integral2) THEN
     ANTS_TAC THENL [
       CONJ_TAC THEN X_GEN_TAC `t:real` THEN DISCH_TAC THEN REWRITE_TAC[] THENL [
	 EXPAND_TAC "f" THEN REAL_DIFF_TAC THEN
	   CONJ_TAC THENL [
	     ASM_SIMP_TAC[REAL_ARITH `abs t < &1 ==> ~(&1 - t = &0)`] THEN
	       MATCH_MP_TAC REAL_LT_DIV THEN POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
	     ALL_TAC
	   ] THEN
	   POP_ASSUM MP_TAC THEN CONV_TAC REAL_FIELD;
	 ALL_TAC
       ] THEN
	 REWRITE_TAC[COND_RAND; COND_RATOR; REAL_MUL_LZERO; real_sums_image_even; FROM_0] THEN
	 MP_TAC (SPECL[`0`; `t:real pow 2`] REAL_SUMS_GP) THEN
	 ANTS_TAC THENL [
	   REWRITE_TAC[REAL_ABS_MUL; REAL_ABS_POW; REAL_ARITH `abs (-- &1) = &1`; REAL_MUL_LID] THEN
	     ASM_REWRITE_TAC[ABS_SQUARE_LT_1; REAL_ABS_ABS];
	   ALL_TAC
	 ] THEN
	 REWRITE_TAC[real_pow; real_div; REAL_MUL_LID; REAL_POW_POW; FROM_0; MULT_0];
       ALL_TAC
     ] THEN
     DISCH_THEN (MP_TAC o SPEC `x:real`) THEN ASM_REWRITE_TAC[] THEN
     REWRITE_TAC[COND_RAND; COND_RATOR; REAL_MUL_LZERO; real_sums_image_even; REAL_MUL_LID] THEN
     SUBGOAL_THEN `f (&0) = &0` (fun th -> REWRITE_TAC[th; REAL_SUB_RZERO]) THENL [
       EXPAND_TAC "f" THEN REWRITE_TAC[REAL_ADD_RID; REAL_SUB_RZERO; real_div; REAL_MUL_LID; REAL_INV_1; LOG_1; REAL_MUL_LZERO];
       ALL_TAC
     ] THEN
     EXPAND_TAC "f" THEN REWRITE_TAC[]);;



let matan_power_series = prove(`!x. abs x < &1
			       ==> ((\k. ((-- &1) pow k / &(2 * k + 1)) * x pow k)
				      real_sums matan x) (:num)`,
   REPEAT STRIP_TAC THEN REWRITE_TAC[matan] THEN
     ASM_CASES_TAC `x = &0` THEN ASM_REWRITE_TAC[] THENL [
       ABBREV_TAC `h = \k. -- &1 pow k / &(2 * k + 1) * &0 pow k` THEN
	 SUBGOAL_THEN `h 0 = &1 /\ (!i. 1 <= i ==> h i = &0)` ASSUME_TAC THENL [
	   EXPAND_TAC "h" THEN REWRITE_TAC[REAL_POW_ZERO; real_pow; MULT_0; ADD] THEN
	     CONJ_TAC THENL [ REAL_ARITH_TAC; ALL_TAC ] THEN
	     GEN_TAC THEN COND_CASES_TAC THEN ASM_SIMP_TAC[ARITH_RULE `1 <= i ==> ~(i = 0)`; ARITH_RULE `~(1 <= 0)`; REAL_MUL_RZERO];
	   ALL_TAC
	 ] THEN
	 SUBGOAL_THEN `&1 = &0 + sum(0..1 - 1) h` (fun th -> REWRITE_TAC[th]) THENL [
	   ASM_REWRITE_TAC[SUB_REFL; SUM_SING_NUMSEG; REAL_ADD_LID];
	   ALL_TAC
	 ] THEN
	 REWRITE_TAC[GSYM FROM_0] THEN MATCH_MP_TAC REAL_SUMS_OFFSET_REV THEN
	 REWRITE_TAC[ARITH_RULE `0 < 1`] THEN
	 MATCH_MP_TAC REAL_SUMS_EQ THEN
	 EXISTS_TAC `\i:num. &0` THEN
	 ASM_SIMP_TAC[REAL_SERIES_0; IN_FROM];
       ALL_TAC
     ] THEN
     ASM_CASES_TAC `x > &0` THENL [
       ASM_REWRITE_TAC[] THEN
	 SUBGOAL_THEN `!y. y > &0 /\ y < &1 ==> ((\k. -- &1 pow k / &(2 * k + 1) * (y pow 2) pow k) real_sums atn y / y) (:num)` MP_TAC THENL [
	   REPEAT STRIP_TAC THEN
	     MATCH_MP_TAC REAL_SUMS_EQ THEN REWRITE_TAC[IN_UNIV] THEN
	     EXISTS_TAC `\k. (-- &1 pow k / &(2 * k + 1) * y pow (2 * k + 1)) * inv y` THEN
	     CONJ_TAC THENL [
	       X_GEN_TAC `k:num` THEN REWRITE_TAC[REAL_POW_ADD; REAL_POW_1; GSYM REAL_MUL_ASSOC; REAL_POW_POW] THEN
		 ASM_SIMP_TAC[REAL_ARITH `y > &0 ==> ~(y = &0)`; REAL_MUL_RINV; REAL_MUL_RID];
	       ALL_TAC
	     ] THEN
	     REWRITE_TAC[real_div] THEN
	     MATCH_MP_TAC REAL_SERIES_RMUL THEN REWRITE_TAC[GSYM real_div] THEN
	     MATCH_MP_TAC atn_series THEN POP_ASSUM MP_TAC THEN POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
	   ALL_TAC
	 ] THEN
	 DISCH_THEN (MP_TAC o SPEC `sqrt x`) THEN ANTS_TAC THENL [
	   ASM_REWRITE_TAC[real_gt; SQRT_LT_0; REAL_ARITH `&0 < x <=> x > &0`] THEN
	     MATCH_MP_TAC REAL_LT_LSQRT THEN
	     REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC;
	   ALL_TAC
	 ] THEN
         SUBGOAL_THEN `sqrt x pow 2 = x` (fun th -> REWRITE_TAC[th]) THEN
	 ASM_REWRITE_TAC[SQRT_POW2] THEN POP_ASSUM MP_TAC THEN REAL_ARITH_TAC;
       ALL_TAC
     ] THEN
     ASM_REWRITE_TAC[] THEN
     MP_TAC (SPEC `sqrt (--x:real)` log_matan_series) THEN ANTS_TAC THENL [
       ASM_REWRITE_TAC[SQRT_EQ_0; REAL_NEG_EQ_0] THEN
	 ONCE_REWRITE_TAC[REAL_ARITH `&1 = abs(&1)`] THEN REWRITE_TAC[REAL_LT_SQUARE_ABS] THEN
	 REWRITE_TAC[REAL_SQRT_POW_2] THEN REPEAT (POP_ASSUM MP_TAC) THEN REAL_ARITH_TAC;
       ALL_TAC
     ] THEN
     REWRITE_TAC[GSYM REAL_POW_POW; REAL_SQRT_POW_2] THEN
       ASM_SIMP_TAC[REAL_ARITH `~(x > &0) ==> abs (--x) = --x`] THEN
       ONCE_REWRITE_TAC[REAL_NEG_MINUS1] THEN 
       REWRITE_TAC[REAL_POW_MUL; REAL_POW_ONE; REAL_MUL_RID; real_div; REAL_MUL_AC]);;
	

