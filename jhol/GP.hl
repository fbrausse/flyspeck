

let GP_TERM_4 = `(x - &1) * (x pow n * x) = (x pow n * x) * (x - &1)`;;
let GP_LEMMA_4 = REAL_ARITH GP_TERM_4;;
let GP_TERM_5 = `(x - &1) * (x pow n * x) = x * x pow n * x - x pow n * x`;;
let GP_LEMMA_5 = ARITH_RULE GP_TERM_5;;

let GP_FINITE = prove
  (`!x. ~(x = &1) ==> !n. (sum(0..n) (\i. x pow i) = ((x pow (n + 1)) - &1) / (x - &1))`, 
   (* Base Case *)
   fix [`x:real`] THEN
   assume "0" `~(x = &1)` THEN
   induction THEN    
ASM_SIMP_TAC[SUM_CLAUSES_NUMSEG;real_pow;REAL_POW_1;ARITH_RULE `0 + 1 = 1`] THEN
   ABBREV_TAC `y = x - &1` THEN
  ASM_MESON_TAC[REAL_ARITH `~(x = &1) ==> ~(x - &1 = &0)`;REAL_DIV_REFL] THEN
   (* Inductive Step *)   
   SIMP_TAC[SUM_CLAUSES_NUMSEG] THEN
   ASSUME_TAC(REAL_DIV_RMUL) THEN
   ABBREV_TAC `y = x - &1` THEN
   SIMP_TAC[LE_0;REAL_DIV_RMUL] THEN
   ASSUME_TAC () THEN
   ASM_REWRITE_TAC[real_pow;REAL_POW_1;REAL_ARITH `~(x = &1) ==> ~(x - &1 = &0)`] THEN
   ASM_REWRITE_TAC[REAL_POW_ADD] THEN
   ASM_REWRITE_TAC[real_pow;REAL_POW_1] THEN
   cases ("X", `(x = &0) \/ ~(x = &0)`) (arithmetic) THEN
     (* X = 0 *)
     ASM_REWRITE_TAC[REAL_POW_ZERO] THEN
     cases("N", `(n = 0) \/ (n > 0)`) (arithmetic) THEN      
       (* X = 0 N = 0 *)
       ASM_REWRITE_TAC[] THEN
       ASM_REWRITE_TAC[ARITH_RULE `&1 * &0 = &0`] THEN
       ASM_REWRITE_TAC[ARITH_RULE `&0 * &1 = &0`] THEN
       ASM_REWRITE_TAC[ARITH_RULE `&0 * &0 = &0`] THEN
       ABBREV_TAC `z = (&0 - &1) / y` THEN
       ASM_REWRITE_TAC[ARITH_RULE `z + &0 = z`] THEN
       (* X = 0 N > 0 *)
       ASSUME_TAC(ARITH_RULE `n > 0 ==> ~(n = 0)`) THEN
       ASSUME_TAC(ARITH_RULE `~(n=0) ==> (n=0) = F`) THEN
       ASM_SIMP_TAC[] THEN
       ASM_REWRITE_TAC[ARITH_RULE `&0 * &0 = &0`] THEN
       ABBREV_TAC `z = (&0 - &1) / y` THEN
       ASM_REWRITE_TAC[ARITH_RULE `z + &0 = z`] THEN
     (* X ~= 0 *)
     ASM_SIMP_TAC[ARITH_RULE `(x pow n * x - &1) / y = x pow n * x / y - &1 / y`] THEN
     ABBREV_TAC `z = x pow n` THEN
     ASM_SIMP_TAC[ARITH_RULE `((x * z) * x - &1) / y = x * z * x / y - &1 / y`] THEN
     REAL_ARITH_TAC THEN
     AP_TERM_TAC THEN
     suffices_to_prove `z * x / y  + x * z = x * z * x / y` (REAL_ARITH_TAC) THEN      
       EXPAND_TAC "z" THEN
     EXPAND_TAC "y" THEN
     ASM_REWRITE_TAC[(REAL_ARITH `~(x = &1) ==> ~(x - &1 = &0)`); (SPEC `x - &1` (SPEC `(x * x pow n)` REAL_DIV_RMUL))] THEN
     ASSUME_TAC( REAL_POW_NZ) THEN
     ASM_SIMP_TAC[REAL_POW_NZ] THEN
     ASSUME_TAC() THEN
     EXPAND_TAC "z" THEN
     EXPAND_TAC "y" THEN
     REWRITE_TAC[(REAL_ARITH ` z * x * (&1 + y) = z * x + x * z * y`);REAL_ARITH `&1 + x - &1 = x`] THEN
     REWRITE_TAC[REAL_ARITH `x pow n * x * x = x * x pow n * x`] THEN



suffices_to_prove(`x * x pow n = (x * x pow n * x / (x - &1))- (x pow n * x / ( x - &1))`) (REAL_ARITH_TAC) THEN
REWRITE_TAC[REAL_ARITH `x * x pow n * x / (x - &1) - x pow n * x / (x - &1)
= (x * x pow n * x - x pow n * x) / (x - &1)`] THEN
REWRITE_TAC[REAL_ARITH `(x * x pow n * x - x pow n * x)
= (x - &1) * (x pow n * x)`] THEN
     ASSUME_TAC(GP_LEMMA_4) THEN
     ASM_SIMP_TAC[] THEN
     ASSUME_TAC(ARITH_RULE `z * x = x * z`) THEN
     ASSUME_TAC(GP_LEMMA_5) THEN
     REWRITE_TAC[REAL_ARITH `((z * x) * y) / y = (z * x) * (y / y)`] THEN
ASSUME_TAC(REAL_ARITH `(z * x) * y / y = x * z ==> x * z = (z * x) * y / y`) THEN
FIRST_X_ASSUM MATCH_MP_TAC THEN
EXPAND_TAC "y" THEN
EXPAND_TAC "z" THEN
  suffices_to_prove (`(x pow n * x) * &1 = x * x pow n`) (REWRITE_TAC[REAL_DIV_REFL]) THEN
 ASSUME_TAC(REAL_ARITH `(x pow n * x) = x * x pow n ==> (x pow n * x) * &1 = x * x pow n`) THEN
FIRST_X_ASSUM MATCH_MP_TAC THEN
suffices_to_prove  (`x = x`) (ASM_REAL_ARITH_TAC) THEN (trivial) THEN
assume ("last") (`(x pow n * x) * &1 = x * x pow n`) THEN
note ("JOE1", `~(x - &1 = &0)`) (by ["0"] REAL_ARITH_TAC) THEN
note ("JOE2", `!j. ~(j = &0) ==> j / j = &1`) ( using [REAL_DIV_REFL] trivial) THEN
so have `(x - &1) / (x - &1) = &1` (ASM_MESON_TAC[]) THEN
ASM_REWRITE_TAC[] THEN
EXPAND_TAC "z" THEN
have `(x pow n * x) * &1 = x * x pow n` (by ["last"] trivial) THEN
ASM_REWRITE_TAC[]);;
