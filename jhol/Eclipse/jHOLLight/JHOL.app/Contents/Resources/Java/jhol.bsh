import java.lang.reflect.Array;
import java.nio.file.StandardOpenOption.*;

import javax.swing.text.DefaultStyledDocument;

import bsh.util.JConsole;
import bsh.util.NameCompletion;

import com.apple.eawt.*;

import com.syncleus.dann.*;
import com.syncleus.dann.hyperassociativemap.*;
import com.syncleus.dann.visualization.*;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;

import edu.pitt.math.jhol.*;
import edu.pitt.math.jhol.core.lexer.*;
import edu.pitt.math.jhol.core.*;
import edu.pitt.math.jhol.caml.*;

/**
   Initial version created on Oct 29 2010
   
   * @author Joe Pleso
   */

sourceRelative("jhol_db.bsh");
sourceRelative("lowlevel.bsh");
sourceRelative("about.bsh");		       
sourceRelative("holhelp.bsh");

void showGUI(WindowAdapter controller){	
    IS_A_MAC = System.getProperty("os.name").equals("Mac OS X");
					       
    sourceRelative("mac.bsh");

    global.ad = getNewAboutDialog();

    //Create frame
     global.frame = new JFrame()
	{
	    //set name to JHOL DEBUG//
	    WindowAdapter framework = controller;
	    addWindowListener(framework);
	    
	   
	    holHelpDialog = holHelp(this);

	    JMenu menu = new JMenu("File");
	    JMenu helpMenu = new JMenu("Help");
	    JMenu windowMenu = new JMenu("Window");
	    
	    JMenuItem item = null;
	    
	    //HOL Light Commands
	    item = new JMenuItem("HOL Light Commands");
	    //	    item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M,
	    //						       Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));		
	    getNewHOLCommandHelpListener(child){
		return new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
			//System.out.println("Minimize request");
			//child.setState ( Frame.ICONIFIED );;
			child.popupHOLHelp();
		    }
		};
	    }	
	    item.addActionListener(getNewHOLCommandHelpListener(holHelpDialog));
	    //	    JMenuItem minimizeItem = item;	
	    helpMenu.add(item);


	    //minimize
	    item = new JMenuItem("Minimize");
	    item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M,
						       Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));		
	    getNewMinimizeListener(child){
		return new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
			System.out.println("Minimize request");
			child.setState ( Frame.ICONIFIED );;
		    }
		};
	    }	
	    item.addActionListener(getNewMinimizeListener(this));
	    JMenuItem minimizeItem = item;	
	    windowMenu.add(item);
	    
	    //Zoom
	    item = new JMenuItem("Zoom");
	    item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
						       6));	//6 is ctrl-meta mask
	    getNewZoomListener(child){
		return new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
			System.out.println("Zoom request");
			if ((child.getExtendedState() & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH)
			    child.setExtendedState(Frame.MAXIMIZED_BOTH ^ child.getExtendedState());
			else
			    child.setExtendedState(Frame.MAXIMIZED_BOTH | child.getExtendedState());		    
		    }
		};
	    }	
	    item.addActionListener(getNewZoomListener(this));
	    JMenuItem zoomItem = item;
	    windowMenu.add(item);
	    
	    //new
	    /*	    item = new JMenuItem("New Window");
		    item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,
		    Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));		
		    item.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		    System.out.println("New window");
		    framework.makeNewWindow();
		    }
		    });
		    menu.add(item);*/
	    
	    //close
	    /*  item = new JMenuItem("Close");
		item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,
		Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		item.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
		System.out.println("Close window");
		super.setVisible(false);
		super.dispose();
		}
		});
		menu.add(item);
	    */
	    /*		//quit
			item = new JMenuItem("Quit");
			item.setMnemonic(KeyEvent.VK_Q);
			getNewQuitListener(child){
			return new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			System.out.println("Quit request");
			framework.quit(child);
			}
			};
			}*/
	    
	    //	item.addActionListener(getNewQuitListener(this));
	    //	menu.add(item);
	    
	    JMenuBar menuBar = new JMenuBar();
	    menuBar.add(menu);
	    menuBar.add(windowMenu);
	    menuBar.add(helpMenu);
	    setJMenuBar(menuBar);
	};
    
    //Create buttons 
    JButton sigIntButton = new JButton("Assume");
    sigIntButton.setActionCommand("assume");
    JButton genTac = new JButton("Remove  \"for all\"");
    genTac.setActionCommand("e(GEN_TAC);;");
    JButton conjTac = new JButton("Remove Conjuction");
    conjTac.setActionCommand("e(CONJ_TAC);;");
    JButton conjTac1 = new JButton("Test Button 1");
    conjTac1.setActionCommand("test1");
    JButton conjTac2 = new JButton("Interrupt");
    conjTac2.setActionCommand("test2");
					       
    //Keep track of buttons
    List buttonList = new LinkedList();
    buttonList.add(sigIntButton);
    buttonList.add(genTac);
    buttonList.add(conjTac);
    buttonList.add(conjTac1);
    buttonList.add(conjTac2);


    //Console for getting input from user
    JConsole console = new JConsole();
    consoleTextPane = console.getViewport().getView();
    consoleTextPane.addKeyListener( new KeyListener(){
	    invoke( name, args ) { print("Method: "+name+" invoked!");}
	    //handle other methods
	    void keyPressed(KeyEvent e){
		if  (e.getKeyCode() != KeyEvent.VK_ENTER )
		    return;
		
		//Main Loop
		List cmdList = new LinkedList();
		try {	
		    //	    do
			//{
			    //in case someone pastes more than one command into the buffer	    
			    line = readLine(bufInput);
			    cmdList.add(line);
			    //		}while(bufInput.ready());
		    while(cmdList.size() != 0){
			printHTML(global.runCommand(cmdList.removeFirst()  + "\n"));
		    }	   
		    //updateTopGoal();
		    
		} catch (IOException e) {
		    e.printStackTrace();
		}
	    }
	});

     
    //Method for printing to the console
    printHTML(String html){
	while (html.indexOf("<HTML>") != -1){
	    int start = html.indexOf("<HTML>");
	    //console.print(html.substring(0, start));//Print any text that occurs before the HTML
	    int end = html.indexOf("</HTML>");
	    htmlText = html.substring(start,end+7);
	    JLabel tmpLabel = GoalPane.htmlToJLabel(htmlText);
	    consoleTextPane.insertComponent(tmpLabel);
	    html = html.substring(end+7, html.length());
	}
	console.print(html);
    }
    
    //Reader for the console
    BufferedReader bufInput = new BufferedReader(console.getIn());
    
    /*//For creating panes
    JTextPane createEditorPane() {
	JTextPane editorPane = new JTextPane(new DefaultStyledDocument());
	editorPane.setEditable(false);
	return editorPane;
    }*/
    
    //Panes for displaying different output
    global.goalPane = new GoalPane(global.hol);
    JScrollPane editorScrollPane = new JScrollPane(global.goalPane);

    /*helpPane = createEditorPane();
    JScrollPane helpScrollPane = new JScrollPane(helpPane);
*/

    

    //start a new hol process
List command = new ArrayList();
	command.add("./local.hol");
	futureHOL = new FutureTask(HOLLightWrapper.getHOLBuilderTask(command));
	es = Executors.newCachedThreadPool();
	es.execute(futureHOL);

    global.hol = futureHOL.get();
	
	printHTML("# ");
    
    
    try{
	newprinterMLStream = new BufferedReader(new FileReader("newprinter.ml"));
	int c = newprinterMLStream.read();
	StringBuilder newprinterMLString = new StringBuilder();
	while (c != -1){
	    newprinterMLString.append((char)c);
	    c = newprinterMLStream.read();
	}

	runHOLCommands(newprinterMLString.toString());
    }
    catch (IOException x) {
	System.err.println(x);
    } 
    finally{
	if (newprinterMLStream != null)
	    newprinterMLStream.close();
    }
    



    //update the theorem list
    global.hol.updateHolTheorems();

    sourceRelative("name.bsh");


    test1(){
	global.runCommand("g `!x. ~(x = &1) ==> !n. (sum(0..n) (\\i. x pow i) = ((x pow (n + 1)) - &1) / (x - &1))`;;");
    }

    //List of theorem labels
    String[] thmStrings = { "All", "Basic Logic", "Constructs", "Pairs", "Well Foundedness",
			    "Natural Numbers", "Lists", "Real Numbers", "Integers",
			    "Sets and Functions", "Iterated Operations", "Cartesian Powers"};

    //Combo box to select which list of theorems to list
    JComboBox thmCombo = new JComboBox(thmStrings);
    JList myList = new JList ();

    //find the matching set of theorems
    lookupTheoremList(String name){
	if (name.equals("Real Numbers"))
	    return realNumberTheorems.toArray();
	if (name.equals("Integers"))
	    return integerTheorems.toArray();
	if (name.equals("Sets and Functions"))
	    return setAndFunctionTheorems.toArray();
	if (name.equals("Iterated Operations"))
	    return iteratedOperationTheorems.toArray();
	if(name.equals("Cartesian Powers"))
	    return cartesianPowerTheorems.toArray();
	if(name.equals("Constructs"))
	    return constructTheorems.toArray();
	if(name.equals("Pairs"))
	    return pairTheorems.toArray();
	if(name.equals("Well Foundedness"))
	    return wellfoundednessTheorems.toArray();
	if (name.equals("Natural Numbers"))
	    return naturalNumberTheorems.toArray();
	if(name.equals("Lists"))
	    return listTheorems.toArray();
	if (name.equals("All"))
	    {
		global.hol.updateHolTheorems();
		return global.hol.getTheoremList().toArray();
	    }
	if( name.equals("Basic Logic"))
	    return basicLogicTheorems.toArray();

	return null;
    }

    //Detect mouse clicks
    ml = new MouseAdapter() {
	    public void mouseClicked(MouseEvent e) {
		if (e.getClickCount() == 2) {
		    global.runCommand(((String)e.getSource().getSelectedValue())+";;");
		}
	    }
	};

    //Detect button presses
    al  = new ActionListener() {
	    actionPerformed( event ) {
		if ( event.getSource() == thmCombo){
		    myList.setListData(lookupTheoremList(thmStrings[thmCombo.getSelectedIndex()]));
		}
	    
		if (event.getActionCommand().startsWith("e"))
		    global.runCommand(event.getActionCommand());
		
		if (event.getActionCommand().equals("test1")){
		    test1();
		}
		if(event.getActionCommand().equals("test2")){
		    try {
			conjTac2.setEnabled(false);
			kill.start();
			//	print(hol.flushOutput(false));
		    
		    } catch (IOException e) {
			return null;
		    }
		}
	    }
	};

    /*
      SPEC  copy paste
      INDUCT_TAC
      ALL_TAC
      UNDISCH_TAC
      asm ONCE PURE REWRITE_TAC
      /SIMP_TAC
      let_tac
      asm meson tac
      highlight delete comma rewrite tac pair eq
      abbrev tac highlight type
      sexpand tac highlight
      mp_tac thm
      assume_tac

      rewritetac real arith 1+1 highlight type 2
      ap thm tac
      ap term tac
      gsym
      sqrt pos lt

    */

    JPanel toolbar = new JPanel();

    console.setPreferredSize(new Dimension(700,400));

    //START EDITORPANE
    
    helpScrollPane.setPreferredSize(new Dimension(250, 145));
    helpScrollPane.setMinimumSize(new Dimension(10, 10));
    
    editorScrollPane.setPreferredSize(new Dimension(250, 145));
    editorScrollPane.setMinimumSize(new Dimension(10, 10));




    //Put the editor pane and the text pane in a split pane.
    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
					  editorScrollPane,
					  console);
    splitPane.setOneTouchExpandable(true);
    splitPane.setResizeWeight(0.5);


    for (JButton jb: buttonList){
	jb.addActionListener(al);
	toolbar.add(jb);
    }

    conjTac2.setEnabled(false);


    myList.setLayoutOrientation(JList.VERTICAL);
    JScrollPane myScroll = new JScrollPane(myList);
    myList.addMouseListener(ml);


    toolbar.add(thmCombo);
    //END EDITORPANE


    thmCombo.setSelectedIndex(0);
    thmCombo.addActionListener(al);

    myList.setListData(lookupTheoremList(thmStrings[thmCombo.getSelectedIndex()]));

    frame.getContentPane().add(toolbar,BorderLayout.NORTH);
    frame.getContentPane().add(splitPane,BorderLayout.WEST);
    frame.getContentPane().add(myScroll,BorderLayout.CENTER);
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

    //Display the window.
    frame.pack();

    frame.setVisible(true);

    //tmp2();//DEBUG

}

getNewFramework(){
    return  new WindowAdapter() {
	Point lastLocation = null;
	int maxX = 500;
	int maxY = 500;

	//DEBUG	
	boolean quitConfirmed( frame) {
	    String s1 = "Quit";
	    String s2 = "Cancel";
	    Object[] options = {s1, s2};
	    int n = JOptionPane.showOptionDialog(((JFrame)frame),
						 "Windows are still open.\nDo you really want to quit?",
						 "Quit Confirmation",
						 JOptionPane.YES_NO_OPTION,
						 JOptionPane.QUESTION_MESSAGE,
						 null,
						 options,
						 s1);
	    if (n == JOptionPane.YES_OPTION) {
		return true;
	    } else {
		return false;
	    }
	}
		
	//This method must be evoked from the event-dispatching thread.
	public void quit( frame) {
	    if (quitConfirmed(frame)) {
		System.out.println("Quitting.");
		global.hol.kill();
		System.exit(0);
	    }
	    System.out.println("Quit operation not confirmed; staying alive.");
	}
	
	public void windowStateChanged(WindowEvent e){
	    
	}	

        public void windowClosed(WindowEvent e) {
	   
	}
	public void windowClosing(WindowEvent e ){
	   
	}

	public void windowIconified(WindowEvent e){
	    Window window = e.getWindow();
	    window.zoomItem.setEnabled(false);
	    window.minimizeItem.setEnabled(false);
	}	
	public void windowDeiconified(WindowEvent e){
	    Window window = e.getWindow();
	    window.zoomItem.setEnabled(true);
	    window.minimizeItem.setEnabled(true);
	}	
	    		
	/*	void makeNewWindow() {
		frame = getNewMyFrame(this);
		numWindows++;
		System.out.println("Number of windows: " + numWindows);
	    
		if (lastLocation != null) {
		//Move the window over and down 40 pixels.
		lastLocation.translate(40, 40);
		if ((lastLocation.x > maxX) || (lastLocation.y > maxY)) {
		lastLocation.setLocation(0, 0);
		}
		frame.setLocation(lastLocation);
		} else {
		lastLocation = frame.getLocation();
		}
	    
		System.out.println("Frame location: " + lastLocation);
		frame.setVisible(true);
		}*/
		
	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	maxX = screenSize.width - 50;
	maxY = screenSize.height - 50;
	showGUI(this);
    };
}


javax.swing.SwingUtilities.invokeLater(
				       new Runnable() {
					   void run() {
					       System.setProperty("apple.laf.useScreenMenuBar", "true");
					       System.setProperty("com.apple.mrj.application.apple.menu.about.name", "JHOL");
					       System.setProperty("com.apple.mrj.application.growbox.intrudes", "false");
					       System.setProperty("com.apple.macos.smallTabs", "true");
					       getNewFramework();
					   }
				       }); 						





