import java.lang.reflect.Array;
import javax.swing.text.DefaultStyledDocument;

import bsh.util.JConsole;
import bsh.util.NameCompletion;

import com.apple.eawt.AboutHandler;
import com.apple.eawt.PreferencesHandler;
import com.apple.eawt.Application;

/**
   Initial version created on Oct 29 2010
   
   * @author Joe Pleso
   */

//begin low level functions
sourceRelative("jhol_db.bsh");

int asciiToDecimal(int c){
    if (97 <= c){
	c = c - 87;}else{
	c = c - 48;}
    return  c;}

int getChar(BufferedReader br){
    char[] tmp = new char[6];
    for (int i = 0; i < 6; i++)
        tmp[i] = (char)br.read();
    int result = 0;
    int factor = 1;
    for (int i = 5; i >= 2; i--){
	result += factor * asciiToDecimal(tmp[i]);
	factor *= 16;}
    return  result;}

String readLine(BufferedReader br){
    StringBuilder sb = new StringBuilder();
    while(true){
	int c = getChar(br);
	if(c==10)
	    break;
        sb.appendCodePoint(c);
    }
    return sb.toString();
}
//end low level functions



sourceRelative("about.bsh");		       
void showGUI(WindowAdapter controller){	
    IS_A_MAC = System.getProperty("os.name").equals("Mac OS X");
					       
    //begin MacOS stuff
    if (IS_A_MAC){
	aboutHandler = new AboutHandler() {
		public void handleAbout(com.apple.eawt.AppEvent.AboutEvent event) {
		    (ad).show();
		}
	    };
						   
	preferencesHandler = new PreferencesHandler(){
		public void handlePreferences(com.apple.eawt.AppEvent.PreferencesEvent e) {
		    //what to do on flower-,
		}
	    };
						   
	macOSApplication = Application.getApplication() ;
	macOSApplication.setAboutHandler(aboutHandler);
	macOSApplication.setPreferencesHandler(preferencesHandler);
    }
    //end MacOS stuff



    ad = getNewAboutDialog();

    //Create frame
    JFrame frame = new JFrame()
	{
	    //set name to JHOL DEBUG//
	    WindowAdapter framework = controller;
	    addWindowListener(framework);
	    
	    JMenu menu = new JMenu("File");
	    JMenu helpMenu = new JMenu("Help");
	    JMenu windowMenu = new JMenu("Window");
	    
	    JMenuItem item = null;
	    
	    //minimize
	    item = new JMenuItem("Minimize");
	    item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_M,
						       Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));		
	    getNewMinimizeListener(child){
		return new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
			System.out.println("Minimize request");
			child.setState ( Frame.ICONIFIED );;
		    }
		};
	    }	
	    item.addActionListener(getNewMinimizeListener(this));
	    JMenuItem minimizeItem = item;	
	    windowMenu.add(item);
	    
	    //Zoom
	    item = new JMenuItem("Zoom");
	    item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,
						       6));	//6 is ctrl-meta mask
	    getNewZoomListener(child){
		return new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
			System.out.println("Zoom request");
			if ((child.getExtendedState() & Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH)
			    child.setExtendedState(Frame.MAXIMIZED_BOTH ^ child.getExtendedState());
			else
			    child.setExtendedState(Frame.MAXIMIZED_BOTH | child.getExtendedState());		    
		    }
		};
	    }	
	    item.addActionListener(getNewZoomListener(this));
	    JMenuItem zoomItem = item;
	    windowMenu.add(item);
	    
	    //new
	    /*	    item = new JMenuItem("New Window");
		    item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,
		    Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));		
		    item.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		    System.out.println("New window");
		    framework.makeNewWindow();
		    }
		    });
		    menu.add(item);*/
	    
	    //close
	    /*  item = new JMenuItem("Close");
		item.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,
		Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()));
		item.addActionListener(new ActionListener() {
		public void actionPerformed(ActionEvent e) {
		System.out.println("Close window");
		super.setVisible(false);
		super.dispose();
		}
		});
		menu.add(item);
	    */
	    /*		//quit
			item = new JMenuItem("Quit");
			item.setMnemonic(KeyEvent.VK_Q);
			getNewQuitListener(child){
			return new ActionListener() {
			public void actionPerformed(ActionEvent e) {
			System.out.println("Quit request");
			framework.quit(child);
			}
			};
			}*/
	    
	    //	item.addActionListener(getNewQuitListener(this));
	    //	menu.add(item);
	    
	    JMenuBar menuBar = new JMenuBar();
	    menuBar.add(menu);
	    menuBar.add(windowMenu);
	    menuBar.add(helpMenu);
	    setJMenuBar(menuBar);
	};
    
    //Create buttons 
    JButton sigIntButton = new JButton("Assume");
    sigIntButton.setActionCommand("assume");
    JButton genTac = new JButton("Remove  \"for all\"");
    genTac.setActionCommand("e(GEN_TAC);;");
    JButton conjTac = new JButton("Remove Conjuction");
    conjTac.setActionCommand("e(CONJ_TAC);;");
    JButton conjTac1 = new JButton("Test Button 1");
    conjTac1.setActionCommand("test1");
    JButton conjTac2 = new JButton("Interrupt");
    conjTac2.setActionCommand("test2");
					       
    //Keep track of buttons
    List buttonList = new LinkedList();
    buttonList.add(sigIntButton);
    buttonList.add(genTac);
    buttonList.add(conjTac);
    buttonList.add(conjTac1);
    buttonList.add(conjTac2);

    //Queue for commands to be run in java from hol
    StringBuilder evalStr;

    //Run java commands in the queue from hol
    clearEvalStr(){
	eval(evalStr.toString());
    }

    int numAssumptions;
    beginTopGoal(){
	numAssumptions = 0;
	updateTopGoal();
    }

    updateTopGoal(){

	text = editorPane;
	text.insertComponent(new JLabel("<HTML><b> Goal: </b> </HTML>",JLabel.LEFT));
	//insert new line DEBUG
	junk =  hol.runCommand("(snd o top_goal)();;");
	junkInt = junk.indexOf("<HTML>");//DEBUG all html tag tests should be case insensitive 
	if (junkInt == -1)
	    return;
	junkEnd = junk.indexOf("</HTML>") + 7;
	junk = junk.substring(junkInt, junkEnd);
	text.insertComponent(new JLabel(junk,JLabel.LEFT));
	//insert new line DEBUG
	text.insertComponent(new JLabel("<HTML><b>Assumption(s): </b></HTML>",JLabel.LEFT));
	junk = hol.runCommand(
					 "List.iter (fun x,y ->( ((fun ()->" +
					 "(print_string \"\\n\")) o  (fun () ->" +
					 "(((print_qterm o  concl) y)))) o print_string) (\"\"" +
					 "))   ((fst o top_realgoal)());;");
	junkInt = junk.indexOf("<HTML>");//we might need to split these into multiple JLabels DEBUG
	if (junkInt == -1)
	    return;
	junkEnd = junk.indexOf("</HTML>") + 7;//DEBUG Last occurence
	text.insertComponent(new JLabel(termList,JLabel.LEFT));
    }

    //Console for getting input from user
    JConsole console = new JConsole();
    consoleTextPane = console.getViewport().getView();
    consoleTextPane.addKeyListener( new KeyListener(){
	    invoke( name, args ) { print("Method: "+name+" invoked!");}
	    //handle other methods
	    void keyPressed(KeyEvent e){
		if  (e.getKeyCode() != KeyEvent.VK_ENTER )
		    return;
		
		//Main Loop
		List cmdList = new LinkedList();
		try {	
		    do
			{
			    //in case someone pastes more than one command into the buffer	    
			    line = readLine(bufInput);
			    cmdList.add(line);
			}while(bufInput.ready());
		    while(cmdList.size() != 0){
			hol.runCommand(cmdList.removeFirst()  + "\n");
		    }	   
		    //updateTopGoal();
		    
		} catch (IOException e) {
		    e.printStackTrace();
		}
	    }
	});
    //Method for printing to the console
    printHTML(String html){
	while (html.indexOf("<HTML>") != -1){
	    int start = html.indexOf("<HTML>");
	    console.print(html.substring(0, start));
	    int end = html.indexOf("</HTML>");
	    htmlText = html.substring(start,end+7);
	    inTag = false;
	    sb = new StringBuilder();
	    sb.append(htmlText.substring(0,htmlText.indexOf("<BODY>")));
	    for (int i = htmlText.indexOf("<BODY>") ; i < end + 7 - start; i++){
		if (inTag)
		    {
			inTag = (htmlText.charAt(i) != '>');
			sb.append(htmlText.charAt(i));
		    }
		else
		    {
			inTag = (htmlText.charAt(i) == '<');
			if (htmlText.charAt(i) == '\n')
			    sb.append("<br>");
			else if (htmlText.charAt(i) == ' ')
			    sb.append("&#160;");
			else
			    sb.append(htmlText.charAt(i));
		    }
	    }
	    htmlText = sb.toString();
	    JLabel tmpLabel = new JLabel (htmlText, JLabel.LEFT);
	    consoleTextPane.insertComponent(tmpLabel);
	    html = html.substring(end+7, html.length());
	}
	console.print(html);
    }
    
    //Reader for the console
    BufferedReader bufInput = new BufferedReader(console.getIn());
    
    //For creating panes
    JTextPane createEditorPane() {
	JTextPane editorPane = new JTextPane(new DefaultStyledDocument());
	editorPane.setEditable(false);
	return editorPane;
    }
    
    //Panes for displaying different output
    editorPane = createEditorPane();
    JScrollPane editorScrollPane = new JScrollPane(editorPane,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
						   JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);

    helpPane = createEditorPane();
    JScrollPane helpScrollPane = new JScrollPane(helpPane,JScrollPane.VERTICAL_SCROLLBAR_ALWAYS,
						 JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);


    sourceRelative("hol.bsh");

    //start a new hol process
    hol = HOLLightWrapper(console);

    //method for running multiple hol commands at once
    runHOLCommands (String cmds){
	String[] array = cmds.split("\n");

	for(int i = 0; i < Array.getLength(array); i++){
	    (hol.runCommand(array[i]));
	}
    }

    //run commands in hol to initialize the data pipe
    runHOLCommands( 
		   "let java cmd = ignore(Sys.command(String.concat  \" \" [\"echo \\\"@\";String.escaped cmd;\"\\\"\"]));;\n" +
		   "let suffices_to_prove q tac = SUBGOAL_THEN q (fun th -> MP_TAC th THEN tac);;\n" +
		   "let assume lab t = DISCH_THEN(fun th -> if concl th = t then LABEL_TAC lab th else failwith \"assume\");;\n" +
		   "let note(lab,t) tac = SUBGOAL_THEN t MP_TAC  THENL [tac; ALL_TAC]  THEN DISCH_THEN(fun th -> LABEL_TAC lab th);;\n" +
		   "let cases (lab,t) tac = SUBGOAL_THEN t MP_TAC  THENL [tac; ALL_TAC]  THEN DISCH_THEN(REPEAT_TCL DISJ_CASES_THEN (LABEL_TAC lab));;\n" +
		   "let consider (x,lab,t) tac  = let tm  = mk_exists(x,t) in SUBGOAL_THEN tm (X_CHOOSE_THEN x (LABEL_TAC lab))   THENL [tac; ALL_TAC];;\n" +
		   "let trivial = MESON_TAC[];;\n" +
		   "let induction = INDUCT_TAC;;\n" +
		   "let by labs tac = MAP_EVERY (fun l -> USE_THEN l MP_TAC) labs THEN tac;;\n" +
		   "let using ths tac = MAP_EVERY MP_TAC ths THEN tac;;\n" +
		   "let so constr arg tac = constr arg (FIRST_ASSUM MP_TAC THEN tac);;\n" +
		   "let g goal = (java o (fun () -> \"beginTopGoal();\") o ignore o g) goal;;\n" +
		   "let e tactic = (java o (fun () -> \"updateTopGoal();\") o ignore o e) tactic;;\n" +
		   "let b () = (java o (fun () -> \"updateTopGoal();\") o ignore o b) ();;\n" +
		   "let set_goal (asl,goal) = (java o (fun () -> \"beginTopGoal();\") o ignore o set_goal) asl,goal;;\n" +
		   "let r int = (java o (fun () -> \"updateTopGoal();\") o ignore o r) int;;");
    try{
	newprinterMLStream = new BufferedReader(new FileReader("newprinter.ml"));
	int c = newprinterMLStream.read();
	StringBuilder newprinterMLString = new StringBuilder();
	while (c != -1){
	    newprinterMLString.append((char)c);
	    c = newprinterMLStream.read();
	}

	runHOLCommands(newprinterMLString.toString());
    }
    catch (IOException x) {
	System.err.println(x);
    } 
    finally{
	if (newprinterMLStream != null)
	    newprinterMLStream.close();
    }
    //Set up sig int method for hol
    int holPid = Integer.decode(
				hol.runCommand("Sys.command(\"echo $PPID\");;").trim().split("\n")[0]);
    command = new LinkedList();
    command.add("sig_int_hol_light");
    command.add(holPid.toString());
    kill = new ProcessBuilder(command);
    kill.redirectErrorStream(true);

    //query hol for the number of theorems in the system  
    getNumHolTheorems(){
	return Integer.decode(hol.runCommand("List.length !theorems;;").trim().split("\n")[0].split(" ")[5]) ;}

    //variable to keep track of the theorem count
    int numHolTheorems = 0;

    //variable to hold all the theorems
    Set holTheorems = new TreeSet();

    //method to keep theorem list up to date
    updateHolTheorems(){
	if (numHolTheorems != getNumHolTheorems()){
	    numHolTheorems = getNumHolTheorems();
	    String[] bangTheorems = hol.runCommand("List.iter (fun x->(print_string(fst(x)^\" \"))) !theorems;;").trim().split(" ");
	    for (int i = 0; i < Array.getLength(bangTheorems); i++){
		if (bangTheorems[i].equals("\nval"))
		    break;
		holTheorems.add(bangTheorems[i]);
	    }
	}
    }

    //update the theorem list
    updateHolTheorems();

    sourceRelative("name.bsh");


    test1(){
	hol.runCommand("g `!x. ~(x = &1) ==> !n. (sum(0..n) (\\i. x pow i) = ((x pow (n + 1)) - &1) / (x - &1))`;;");
    }

    //List of theorem labels
    String[] thmStrings = { "All", "Basic Logic", "Constructs", "Pairs", "Well Foundedness",
			    "Natural Numbers", "Lists", "Real Numbers", "Integers",
			    "Sets and Functions", "Iterated Operations", "Cartesian Powers"};

    //Combo box to select which list of theorems to list
    JComboBox thmCombo = new JComboBox(thmStrings);
    JList myList = new JList ();

    //find the matching set of theorems
    lookupTheoremList(String name){
	if (name.equals("Real Numbers"))
	    return realNumberTheorems.toArray();
	if (name.equals("Integers"))
	    return integerTheorems.toArray();
	if (name.equals("Sets and Functions"))
	    return setAndFunctionTheorems.toArray();
	if (name.equals("Iterated Operations"))
	    return iteratedOperationTheorems.toArray();
	if(name.equals("Cartesian Powers"))
	    return cartesianPowerTheorems.toArray();
	if(name.equals("Constructs"))
	    return constructTheorems.toArray();
	if(name.equals("Pairs"))
	    return pairTheorems.toArray();
	if(name.equals("Well Foundedness"))
	    return wellfoundednessTheorems.toArray();
	if (name.equals("Natural Numbers"))
	    return naturalNumberTheorems.toArray();
	if(name.equals("Lists"))
	    return listTheorems.toArray();
	if (name.equals("All"))
	    {
		updateHolTheorems();
		return holTheorems.toArray();
	    }
	if( name.equals("Basic Logic"))
	    return basicLogicTheorems.toArray();

	return null;
    }

    //Detect mouse clicks
    ml = new MouseAdapter() {
	    public void mouseClicked(MouseEvent e) {
		if (e.getClickCount() == 2) {
		    hol.runCommand(((String)e.getSource().getSelectedValue())+";;");
		}
	    }
	};

    //Detect button presses
    al  = new ActionListener() {
	    actionPerformed( event ) {
		if ( event.getSource() == thmCombo){
		    myList.setListData(lookupTheoremList(thmStrings[thmCombo.getSelectedIndex()]));
		}
	    
		if (event.getActionCommand().startsWith("e"))
		    hol.runCommand(event.getActionCommand());
		if (event.getActionCommand().equals("assume")){
		    numAssumptions++;
		    hol.runCommand("e( assume \"" + (numAssumptions).toString() + "\" ((fst o dest_imp o snd o top_goal) ()));;");
		}
		if (event.getActionCommand().equals("test1")){
		    test1();
		}
		if(event.getActionCommand().equals("test2")){
		    try {
			conjTac2.setEnabled(false);
			kill.start();
			//	print(hol.flushOutput(false));
		    
		    } catch (IOException e) {
			return null;
		    }
		}
	    }
	};

    /*
      SPEC  copy paste
      INDUCT_TAC
      ALL_TAC
      UNDISCH_TAC
      asm ONCE PURE REWRITE_TAC
      /SIMP_TAC
      let_tac
      asm meson tac
      highlight delete comma rewrite tac pair eq
      abbrev tac highlight type
      sexpand tac highlight
      mp_tac thm
      assume_tac

      rewritetac real arith 1+1 highlight type 2
      ap thm tac
      ap term tac
      gsym
      sqrt pos lt

    */

    JPanel toolbar = new JPanel();

    console.setPreferredSize(new Dimension(700,400));

    //START EDITORPANE
    helpScrollPane.setVerticalScrollBarPolicy(
					      JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    helpScrollPane.setPreferredSize(new Dimension(250, 145));
    helpScrollPane.setMinimumSize(new Dimension(10, 10));
    editorScrollPane.setVerticalScrollBarPolicy(
						JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
    editorScrollPane.setPreferredSize(new Dimension(250, 145));
    editorScrollPane.setMinimumSize(new Dimension(10, 10));




    //Put the editor pane and the text pane in a split pane.
    JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
					  editorScrollPane,
					  console);
    splitPane.setOneTouchExpandable(true);
    splitPane.setResizeWeight(0.5);


    for (JButton jb: buttonList){
	jb.addActionListener(al);
	toolbar.add(jb);
    }

    conjTac2.setEnabled(false);


    myList.setLayoutOrientation(JList.VERTICAL);
    JScrollPane myScroll = new JScrollPane(myList);
    myList.addMouseListener(ml);


    toolbar.add(thmCombo);
    //END EDITORPANE


    thmCombo.setSelectedIndex(0);
    thmCombo.addActionListener(al);

    myList.setListData(lookupTheoremList(thmStrings[thmCombo.getSelectedIndex()]));

    frame.getContentPane().add(toolbar,BorderLayout.NORTH);
    frame.getContentPane().add(splitPane,BorderLayout.WEST);
    frame.getContentPane().add(myScroll,BorderLayout.CENTER);
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

    //Display the window.
    frame.pack();
    frame.setVisible(true);
}

getNewFramework(){
    return  new WindowAdapter() {
	Point lastLocation = null;
	int maxX = 500;
	int maxY = 500;

	//DEBUG	
	boolean quitConfirmed( frame) {
	    String s1 = "Quit";
	    String s2 = "Cancel";
	    Object[] options = {s1, s2};
	    int n = JOptionPane.showOptionDialog(((JFrame)frame),
						 "Windows are still open.\nDo you really want to quit?",
						 "Quit Confirmation",
						 JOptionPane.YES_NO_OPTION,
						 JOptionPane.QUESTION_MESSAGE,
						 null,
						 options,
						 s1);
	    if (n == JOptionPane.YES_OPTION) {
		return true;
	    } else {
		return false;
	    }
	}
		
	//This method must be evoked from the event-dispatching thread.
	public void quit( frame) {
	    if (quitConfirmed(frame)) {
		System.out.println("Quitting.");
		System.exit(0);
	    }
	    System.out.println("Quit operation not confirmed; staying alive.");
	}
	
	public void windowStateChanged(WindowEvent e){
	    
	}	

        public void windowClosed(WindowEvent e) {
	   
	}
	public void windowClosing(WindowEvent e ){
	   
	}

	public void windowIconified(WindowEvent e){
	    Window window = e.getWindow();
	    window.zoomItem.setEnabled(false);
	    window.minimizeItem.setEnabled(false);
	}	
	public void windowDeiconified(WindowEvent e){
	    Window window = e.getWindow();
	    window.zoomItem.setEnabled(true);
	    window.minimizeItem.setEnabled(true);
	}	
	    		
	/*	void makeNewWindow() {
		frame = getNewMyFrame(this);
		numWindows++;
		System.out.println("Number of windows: " + numWindows);
	    
		if (lastLocation != null) {
		//Move the window over and down 40 pixels.
		lastLocation.translate(40, 40);
		if ((lastLocation.x > maxX) || (lastLocation.y > maxY)) {
		lastLocation.setLocation(0, 0);
		}
		frame.setLocation(lastLocation);
		} else {
		lastLocation = frame.getLocation();
		}
	    
		System.out.println("Frame location: " + lastLocation);
		frame.setVisible(true);
		}*/
		
	Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
	maxX = screenSize.width - 50;
	maxY = screenSize.height - 50;
	showGUI(this);
	
    };
}


javax.swing.SwingUtilities.invokeLater(
				       new Runnable() {
					   void run() {
					       System.setProperty("apple.laf.useScreenMenuBar", "true");
					       System.setProperty("com.apple.mrj.application.apple.menu.about.name", "JHOL");
					       System.setProperty("com.apple.mrj.application.growbox.intrudes", "false");
					       System.setProperty("com.apple.macos.smallTabs", "true");
					       getNewFramework();
					   }
				       }); 						





