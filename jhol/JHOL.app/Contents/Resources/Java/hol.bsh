    //Object for holding hol process
    HOLLightWrapper(JConsole console) {
	List command = new ArrayList();
	command.add("./local.hol");
	proc = new ProcessBuilder(command);
	proc.redirectErrorStream(true);
	try {
	    proc =  proc.start();
	} catch (IOException e) {
	    return null;
	}
    
	bin = new BufferedWriter(new OutputStreamWriter(proc.getOutputStream()));
	bout = new BufferedReader(new InputStreamReader(proc.getInputStream()));
    
	public String flushOutput () {
	    try {
		StringBuilder str = new StringBuilder();
		evalStr = new StringBuilder();
		suppressedOutput = new StringBuilder();
		char c;
		do {
		    c = (char) bout.read();

		    if (str.length() == 0 && c == '@')
			{
			    evalStr.append(bout.readLine());
			    evalStr.append(';');
			    continue;}
		
		    if (c == 65535){
		   
			suppressedOutput.append(str.toString());
			print("hol_light: EOF reached.");
			break;
		    }
		    str.append(c);		
		
		    if (c == 10)
			{
		
			    suppressedOutput.append(str.toString());
			    str = new StringBuilder();
			    continue;}
		
		}while (!(
			  str.length() == 2 &&
			  (str.charAt(0) == '#' || str.charAt(0) == ' ') &&
			  str.charAt(1) == ' ' &&
			  !bout.ready()));
	   
		suppressedOutput.append(str.toString());
		return suppressedOutput.toString();
	    } catch (IOException ex) {
		ex.printStackTrace();           

	    }
	}
    
	public String runCommand(String cmd) {
		    
	    if(cmd.length() == 0)
		return null;
	    flag = cmd.charAt(cmd.length() - 1) != '\n';
	    if(flag)
		{
		    cmd = cmd + "\n";
		    printHTML(cmd);
		}//If we generated the command, echo it to the user

	    try {
		bin.write(cmd);
		bin.flush();

		conjTac2.setEnabled(true);//Interrupt button	    
		String result = flushOutput();
		printHTML(result);
		conjTac2.setEnabled(false);

		clearEvalStr();
		return result;
	    
	    } catch (IOException e) {
		e.printStackTrace();
		return null;
	    }
	}

	printHTML(flushOutput());

	return this;
    }

