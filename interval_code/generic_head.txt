#include "error.h"
#include <float.h>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
#include "interval.h"
#include "lineInterval.h"
#include "univariate.h"
#include "secondDerive.h"
#include "taylorInterval.h"
#include "recurse.h"
#include <time.h>
#include <string.h>
#include <stdlib.h>

using namespace std;

void selfTest()
	{
	interMath::selfTest();
	linearization::selfTest();
	univariate::selfTest();
	secondDerive::selfTest();
	taylorFunction::selfTest();
	}

interval sqrt8 ("2.8284271247461900976");
interval sqrt3 ("1.7320508075688772935");
interval pi ("3.141592653589793238");
interval const1 ("0.175479656091821810");
interval hminus("1.2317544220903043901");
interval arc_hhn("0.81611135460255697143595");

interval yStrongDodec("2.1029244484765344");
interval aStrongDodec("-0.581169206221610");
interval bStrongDodec("0.023248513304698");

/*
int generic(const domain& x,const domain& z,const taylorFunction& F,int allowSp)
    {
	domain x0 = x,z0 = z;
	const taylorFunction* I[1] = {&F};
	cellOption opt;
	opt.allowSharp = allowSp;
    return prove::recursiveVerifier(0,x,z,x0,z0,I,1,opt);
    }
*/
