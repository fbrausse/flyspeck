#include "error.h"
#include <float.h>
#include <iomanip>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string.h>
#include "interval.h"
#include "lineInterval.h"
#include "univariate.h"
#include "wide.h"
#include "secondDerive.h"
#include "taylorData.h"
#include "Lib.h"
#include "recurse.h"
#include <time.h>
#include <string.h>
#include <stdlib.h>

using namespace std;

// This one we have to compute externally.
static const interval hminus("1.2317544220903043901");

static bool epsilonCloseDoubles(const char* s, double x,double y,double epsilon)
{
  if (abs(y-x)>epsilon * (0.1+abs(x)+abs(y)))
    {
      cout << s << ": " ;
      cout << "diff: " << abs(y-x)
	   << " external value: " << x << "  value here: " << y << endl<< flush;
      error::message("error encountered in loading Lib");
      return false;
    }
  return true;
}

static void epsValue(const char* s,const Function& f,double x) {
  double eps = 1.0e-8;
  domain d(6.36,4.2,4.3,4.4,4.5,4.6);
  double y = f.evalf(d,d).upperBound();
  epsilonCloseDoubles(s,x,y,eps);
  //cout << "-- tested " << s << endl << flush;
}

/*
static void uniValue(const char* s,const univariate& u,double x) {
  double eps = 1.0e-8;
  interval i("1.1");
  double y = u.eval(i,0).hi;
  epsilonCloseDoubles(s,x,y,eps);
}
*/

void moduleTest()
	{
	interMath::selfTest();
	linearization::selfTest();
	univariate::selfTest();
	wide::selfTest();
	secondDerive::selfTest();
	Function::selfTest();
	Lib::selfTest();
	}

