"needs \"../formal_lp/hypermap/ssreflect/list_hypermap-compiled.hl\"".
"needs \"../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl\"".


Module More_list_hypermap.

"open Ssrbool".
"open Ssrnat".
"open Seq".
"open List_hypermap".
"open Hypermap".
"open Hypermap_and_fan".
"open Hypermap_iso".
"open Tame_general".

(* Darts *)

"let list_pairs2 = (GEN_ALL o define) 
	`list_pairs2 [] (hd:A) = [] /\ 
          list_pairs2 [h] hd = [h,hd] /\ 
          list_pairs2 (h1 :: (h2 :: t)) hd = (h1,h2) :: (list_pairs2 (h2 :: t) hd)`".

Lemma size_list_pairs2 x s: `sizel (list_pairs2 s x) = sizel s`.
Proof.
by elim: s => [|h [|h2 t] Ih]; rewrite !list_pairs2 ?(size_nil, size_cons) // Ih size_cons.
Qed.

Lemma nth_list_pairs2 x0 x s i: `i < sizel s
	==> nth (x0,x0) (list_pairs2 s x) i =
		nth x0 s i, if i = sizel s - 1 then x else nth x0 s (i + 1)`.
Proof.
elim: s i => [|h [|h2 t] Ih]; rewrite !list_pairs2 ?(size_nil, size_cons, ltn0) //.
  move => i i_lt.
  have ->: `i = 0` by move: i_lt; arith.
  by rewrite -ONE subnn /= !nth.
case => [|i]; first by rewrite succnK -NOT_SUC /= add0n ONE !nth.
rewrite ltSS !nth succnK eqSS => i_lt.
by rewrite Ih ?size_cons // succnK addSn nth.
Qed.

Lemma list_pairs_eq_list_pairs2 s: `list_pairs s = list_pairs2 s (HD s)`.
Proof.
apply (eq_from_nth `HD s,HD s`).
rewrite size_list_pairs size_list_pairs2 /= => i i_lt.
rewrite nth_list_pairs // nth_list_pairs2 // PAIR_EQ /=.
case: `i = _` => /=.
by rewrite nth0 Seq2.head_HD //; move: i_lt; arith.
Qed.


(* Nodes *)

Lemma node_hypermap_of_list_explicit L n d: `good_list_nodes L /\
	MEM n (list_of_nodes L) /\ MEM d n
	==> node (hypermap_of_list L) d = set_of_list n`.
Proof.
rewrite good_list_nodes => [] [eq] [mem_n] mem_d.
have: `set_of_list n IN node_set (hypermap_of_list L)`.
  by rewrite eq IN_SET_OF_LIST nodes_of_list MEM_MAP; exists n.
move/lemma_node_representation => [x] [_] eq2.
rewrite eq2 eq_sym; apply lemma_node_identity.
by rewrite -eq2 IN_SET_OF_LIST.
Qed.


Lemma nodes_hypermap_of_list_all L: `good_list_nodes L
   ==> ALL (\n. ALL (\d. node (hypermap_of_list L) d = set_of_list n) n) (list_of_nodes L)`.
Proof.
rewrite -!ALL_MEM => /node_hypermap_of_list_explicit eq n mem_n /= d mem_d.
by rewrite (eq mem_n).
Qed.


(* Faces *)
Lemma face_hypermap_of_list_explicit L f d: `good_list L /\
	MEM f (list_of_faces L) /\ MEM d f
	==> face (hypermap_of_list L) d = set_of_list f`.
Proof.
move => [goodL] [mem_f] mem_d; move: (goodL); rewrite good_list => [] [uniqL] _.
have mem_d2: `MEM d (list_of_darts L)`.
  by rewrite list_of_darts_alt Seq2.mem_flatten; exists f.
rewrite face_of_list //; congr `_1 _2` => /=.
by rewrite find_face_eq.
Qed.


Lemma faces_hypermap_of_list_all L: `good_list L
   ==> ALL (\f. ALL (\d. face (hypermap_of_list L) d = set_of_list f 
			/\ find_face L d = f) f) (list_of_faces L)`.
Proof.
rewrite -!ALL_MEM => goodL f mem_f /= d mem_d.
rewrite (face_hypermap_of_list_explicit mem_f) // find_face_eq //.
move: goodL; rewrite good_list => goodL; rewrite goodL andTb.
by rewrite list_of_darts_alt Seq2.mem_flatten; exists f.
Qed.


(* f_list_ext *)

"let f_list_ext_table = (GEN_ALL o define) 
	`(f_list_ext_table L [] (first:A#A) <=> T)
  	/\ (f_list_ext_table L (CONS h1 (CONS h2 t)) first 
			<=> f_list_ext L h1 = h2
				/\ inverse (f_list_ext L) h2 = h1
				/\ f_list_ext_table L (CONS h2 t) first)
	/\ (f_list_ext_table L [h1] first 
			<=> f_list_ext L h1 = first
	         		/\ inverse (f_list_ext L) first = h1)`".


Lemma f_list_ext_table_list_of_faces L: `good_list L
	==> ALL (\f. f_list_ext_table L f (HD f)) (list_of_faces L)`.
Proof.
move => goodL; move: (goodL); rewrite good_list => [] [uniqL] _.
rewrite Seq2.ALL_all -allP => f /= mem_f.
have [d [mem_d f_eq]] := mem_face_lemma goodL mem_f.
have f_size: `0 < sizel f`.
  case: f f_eq => [|h t]; last by rewrite size_cons gtS0.
  by rewrite eq_sym find_face_empty.
have h s2 s1 x: `f = s1 ++ [x] ++ s2 /\ f_list_ext_table L s2 (HD f) 
	==> f_list_ext_table L (x :: s2) (HD f)`.
  move => [f_eq_cat].
  have mem_xf: `MEM x f` by rewrite f_eq_cat !mem_cat mem_seq1.
  have fx_eq: `find_face L x = f`.
    by rewrite f_eq; apply: (mem_find_face_imp_faces_eq uniqL); rewrite -f_eq.
  have mem_x: `MEM x (list_of_darts L)`.
    apply dart_in_darts; exists `find_pair_list L d`.
    by rewrite -find_face_alt -f_eq mem_find_pair_list.
  case: s2 f_eq_cat => [|h2 t] f_eq_cat Ih; rewrite !f_list_ext_table ?Ih /=.
    suff eq: `f_list_ext L x = (HD f)`.
      by rewrite eq /= -eq -(o_THM `inverse _`) f_list_ext_inverse_works // I_THM.
    rewrite f_list_ext res darts_of_list IN_SET_OF_LIST mem_x /= f_list fx_eq.
    suff ->: `x = last (HD f) f`.
      by rewrite Seq2.next_el_last // f_size f_eq uniq_find_face.
    by rewrite {2}f_eq_cat cats0 cats1 last_rcons.
  suff eq: `f_list_ext L x = h2`.
    by rewrite eq /= -eq -(o_THM `inverse _`) f_list_ext_inverse_works // I_THM.
  rewrite f_list_ext res darts_of_list IN_SET_OF_LIST f_list mem_x /=.
  rewrite -(Seq2.next_el_rot_eq `sizel s1`) ?uniq_find_face //.
  by rewrite rot fx_eq f_eq_cat drop_size_cat // cat1s !cat Seq2.next_el_hd_cons2.
set P := `\k. ?s1 x s2. f = s1 ++ [x] ++ s2 /\ sizel s1 = k /\ f_list_ext_table L s2 (HD f)`.
have: `?n. P n`.
  exists `sizel f - 1`; rewrite -P_def /=.
  exists `butlast f` `last (HD f) f` `[]`.
  by rewrite f_list_ext_table Seq2.size_butlast cats0 -Seq2.cat_butlast_last.
rewrite MINIMAL => [] [Pk] Pm.
set k := `(minimal) P`.
move: Pk; rewrite -P_def /= => [] [s1] [x] [s2] [f_eq] [size_s1] h_s2.
case k_eq: `k = 0` => /=.
  move: size_s1; rewrite k_eq size_eq0 => s1_eq.
  by rewrite {1}f_eq s1_eq cat cat1s (h f_eq).
suff: `P (k - 1)` by rewrite Pm //; move: k_eq; arith.
rewrite -P_def /=.
exists `butlast s1` `last (HD f) s1` `x :: s2`.
rewrite Seq2.size_butlast size_s1 (h f_eq) //=.
rewrite catA -Seq2.cat_butlast_last -1?cat1s ?f_eq // size_s1.
by move: k_eq; arith.
Qed.


(* Contravening *)
Section Contravening.

Variable V: `:real^3->bool`.
Variable L: `:((num)list)list`.
Variable h: `:num->real^3`.
Variable g: `:num#num->real^3#real^3`.


Lemma mem_list_of_darts_imp_mem_list_of_elements a b: `MEM (a,b) (list_of_darts L)
	==> MEM a (list_of_elements L) /\ MEM b (list_of_elements L)`.
Proof.
rewrite mem_list_of_darts => [] [l] [mem_l] /mem_list_pairs mem_ab.
rewrite !list_of_elements !mem_undup !Seq2.mem_flatten.
by split; exists l.
Qed.


Hypothesis contrV: `contravening V`.

Let fanV: `FAN (vec 0,V,ESTD V)`.
Proof. by rewrite CONTRAVENING_FAN. Qed.


Section Norm.

Hypothesis bij_h: `BIJ h (elements_of_list L) V`.

Lemma contravening_norm_le: `ALL (\x. norm (h x) <= #2.52) (list_of_elements L)`.
Proof.
move: bij_h; rewrite -ALL_MEM BIJ INJ elements_of_list IN_SET_OF_LIST.
move => [] [x_in] _ _ x /x_in inV.
by rewrite -Trigonometry1.DIST_L_ZERO (CONTRAVENING_DIST contrV).
Qed.


Lemma contravening_norm_ge: `ALL (\x. &2 <= norm (h x)) (list_of_elements L)`.
Proof.
move: bij_h; rewrite -ALL_MEM BIJ INJ elements_of_list IN_SET_OF_LIST.
move => [] [x_in] _ _ x /x_in inV; rewrite "REAL_ARITH `&2 = #2.0`".
by rewrite -Trigonometry1.DIST_L_ZERO (CONTRAVENING_DIST contrV).
Qed.


End Norm.


Lemma contravening_dart_eq_dart1: `dart_of_fan (V,ESTD V) = dart1_of_fan (V,ESTD V)`.
Proof.
rewrite (Add_triangle.fully_surrounded_dart_of_fan_eq fanV) //.
by rewrite CONTRAVENING_IMP_FULLY_SURROUNDED.
Qed.


Hypothesis goodL: `good_list L`.
Hypothesis iso_g: `hyp_iso g (hypermap_of_list L, hypermap_of_fan (V,ESTD V))`.


Let mem_dartsL d: `MEM d (list_of_darts L) <=> d IN dart (hypermap_of_list L)`.
Proof. by rewrite -IN_SET_OF_LIST -darts_of_list (components_hypermap_of_list goodL). Qed.

Let in_dartsH x: `x IN dart (hypermap_of_fan (V,ESTD V)) <=> x IN dart_of_fan (V,ESTD V)`.
Proof. by rewrite (COMPONENTS_HYPERMAP_OF_FAN fanV). Qed.


Lemma contravening_dist_dart_ge: `ALL (\d. &2 <= dist (g d)) (list_of_darts L)`.
Proof.
rewrite -ALL_MEM mem_dartsL => d /(hyp_iso_dart iso_g) /=.
by rewrite in_dartsH => /(CONTRAVENING_DART_DIST contrV); arith.
Qed.


Lemma contravening_dist_dart_le: `ALL (\d. dist (g d) <= #2.52) (list_of_darts L)`.
Proof.
rewrite -ALL_MEM mem_dartsL => d /(hyp_iso_dart iso_g) /=.
by rewrite in_dartsH => /(CONTRAVENING_DART_DIST contrV); arith.
Qed.


(* h *)
Hypothesis bij_h: `BIJ h (elements_of_list L) V`.
Hypothesis g_eq: `g = \d. h (FST d), h (SND d)`.


Lemma contravening_dist_not_dart s: 
	`ALL (\d. MEM (FST d) (list_of_elements L) /\ MEM (SND d) (list_of_elements L) 
		/\ (FST d = SND d <=> F)) s
	/\ ALL (\d. MEM d (list_of_darts L) <=> F) s
	==> ALL (\d. #2.52 <= dist (g d)) s`.
Proof.
rewrite -!ALL_MEM => /= [h1] h2 [a b] mem_ds.
have hab_in: `h a IN V /\ h b IN V /\ ~(h a = h b)`.
  move: bij_h; rewrite BIJ INJ => [] [] [x_in] h_inj _.
  move: (h1 mem_ds) => /= h1.
  rewrite !x_in // ?(elements_of_list, IN_SET_OF_LIST) // !andTb.
  by rewrite -implybF => /h_inj; rewrite elements_of_list !IN_SET_OF_LIST !h1.
suff mem_gd: `~(g (a,b) IN dart_of_fan (V,ESTD V))`.
  apply: contraR mem_gd; rewrite g_eq => /= ineq.
  rewrite contravening_dart_eq_dart1 -Add_triangle.inE_eq_in_dart1.
  by rewrite IN_ESTD !hab_in; move: ineq; arith.
apply: contra (h2 mem_ds) => g_in.
move: (hyp_iso_surj iso_g); rewrite in_dartsH.
move/(_ g_in) => [[a' b']]; rewrite -mem_dartsL => [] [ab'_in].
rewrite g_eq /= PAIR_EQ => [] [eq_a eq_b].
move: bij_h; rewrite BIJ INJ elements_of_list !IN_SET_OF_LIST => [] [] [_] inj _.
move: (h1 mem_ds) => /= mem_ab.
move: (mem_list_of_darts_imp_mem_list_of_elements ab'_in) => mem_ab'.
by move: (inj eq_b) (inj eq_a) => <- // <-.
Qed.


End Contravening.
