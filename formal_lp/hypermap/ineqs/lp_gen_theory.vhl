"needs \"../formal_lp/hypermap/ssreflect/list_hypermap-compiled.hl\"".

Module Lp_gen_theory.

"open Ssrbool".
"open Ssrnat".
"open Seq".
"open Seq2".
"open Fan_defs".
"open Hypermap".
"open Hypermap_and_fan".
"open Hypermap_iso".
"open List_hypermap".

"let list_dart_pairs = new_definition
	`list_dart_pairs L = allpairs (\x y. (x,y)) (list_of_darts L) (list_of_darts L)`".

Lemma mem_list_dart_pairs L p: `MEM p (list_dart_pairs L)
	<=> MEM (FST p) (list_of_darts L) /\ MEM (SND p) (list_of_darts L)`.
Proof.
rewrite list_dart_pairs allpairsP /=; split.
  by move => [p'] [mem1] [mem2] ->.
by move => h; exists p.
Qed.

Lemma set_of_list_list_dart_pairs L: 
	`set_of_list (list_dart_pairs L) = (darts_of_list L) CROSS (darts_of_list L)`.
Proof.
rewrite EXTENSION => [] [x y].
by rewrite darts_of_list IN_CROSS !IN_SET_OF_LIST mem_list_dart_pairs.
Qed.

Lemma ALL_list_dart_pairs_split L P: `ALL P (list_dart_pairs L) 
	<=> ALL (\d1. ALL (\d2. P (d1, d2)) (list_of_darts L)) (list_of_darts L)`.
Proof.
rewrite -!ALL_MEM /= mem_list_dart_pairs; split.
  by move => h d1 mem_d1 d2 mem_d2; rewrite h.
by move => h [d1 d2] /= mem_ds; rewrite h.
Qed.


(* IsoLemmas *)
Section IsoLemmas.

Variable G: `:(B)hypermap`.
Variable H: `:(A)hypermap`.
Variable g: `:B->A`.

Lemma darts_k_subset k d: `d IN darts_k k G ==> d IN dart G`.
Proof. by rewrite darts_k inE => ->. Qed.

Lemma face_set_k_subset k f: `f IN face_set_k k G ==> f IN face_set G`.
Proof. by rewrite face_set_k inE => ->. Qed.

Hypothesis g_iso: `hyp_iso g (G,H)`.

Lemma components_iso_image d: `d IN dart G ==>
	node H (g d) = IMAGE g (node G d)
	/\ face H (g d) = IMAGE g (face G d)`.
Proof. by move/(iso_components g_iso) => /=. Qed.

Lemma components_iso_image_face_map d: `d IN dart G
	==> node H (g (face_map G d)) = IMAGE g (node G (face_map G d))
	/\ face H (g (face_map G d)) = IMAGE g (face G (face_map G d))
	/\ node H (g (inverse (face_map G) d)) = IMAGE g (node G (inverse (face_map G) d))
	/\ face H (g (inverse (face_map G) d)) = IMAGE g (face G (inverse (face_map G) d))`.
Proof.
by move => d_in; rewrite !components_iso_image // 
	(lemma_dart_invariant, lemma_dart_inveriant_under_inverse_maps).
Qed.

Lemma hyp_iso_comm_special d: `d IN dart G
	==> face_map H (g d) = g (face_map G d)
	   /\ node_map H (g d) = g (node_map G d)
	   /\ edge_map H (g d) = g (edge_map G d)
	   /\ (!k. (face_map H POWER k) (g d) = g ((face_map G POWER k) d))`.
Proof.
move => d_in; rewrite !(hyp_iso_comm g_iso) //=.
elim => [|k Ih]; first by rewrite !POWER_0 !I_THM.
by rewrite !COM_POWER !o_THM Ih (hyp_iso_comm g_iso) // lemma_dart_invariant_power_face.
Qed.

Lemma hyp_iso_inv_comm d: `d IN dart G
	==> inverse (face_map H) (g d) = g (inverse (face_map G) d)
            /\ inverse (node_map H) (g d) = g (inverse (node_map G) d)`.
Proof. by move/(hyp_iso_inverse_comm g_iso) => /=. Qed.

Lemma card_face_iso f: `f IN face_set G ==> CARD (IMAGE g f) = CARD f`.
Proof.
move/lemma_face_representation => [d] [d_in] ->.
by rewrite -(iso_components g_iso) // (hyp_iso_card_components g_iso).
Qed.

Lemma card_face_dart_iso d: `d IN dart G ==> CARD (IMAGE g (face G d)) = CARD (face G d)`.
Proof. by move => d_in; rewrite card_face_iso // -lemma_in_face_set. Qed.

Lemma hyp_iso_face_set_k k: `face_set_k k H = IMAGE (IMAGE g) (face_set_k k G)`.
Proof.
rewrite !face_set_k EXTENSION IN_IMAGE !inE => f.
rewrite (iso_face_set g_iso) IN_IMAGE.
split => [[] [f'] [->] f'_in card_f' | [f'] [->] h].
  by exists f'; rewrite -card_face_iso.
by rewrite card_face_iso // h /=; exists f'.
Qed.

Lemma hyp_iso_darts_k_eq k: `darts_k k H = IMAGE g (darts_k k G)`.
Proof. by rewrite !darts_k_union_face_set_k IMAGE_UNIONS hyp_iso_face_set_k. Qed.

Lemma hyp_iso_darts_k k d: `d IN darts_k k G ==> g d IN darts_k k H`.
Proof. by rewrite hyp_iso_darts_k_eq IN_IMAGE => d_in; exists d. Qed.

Lemma sum_node_iso r n: `n IN node_set G ==> sum (IMAGE g n) r = sum n (r o g)`.
Proof.
move/lemma_node_representation => [d] [d_in] ->.
move: (lemma_node_subset d_in); rewrite SUBSET => x_in.
by rewrite SUM_IMAGE // => x y [/x_in] xG [/x_in] yG /(hyp_iso_inj g_iso) ->.
Qed.

Lemma sum_face_iso r f: `f IN face_set G ==> sum (IMAGE g f) r = sum f (r o g)`.
Proof.
move/lemma_face_representation => [d] [d_in] ->.
move: (lemma_face_subset d_in); rewrite SUBSET => x_in.
by rewrite SUM_IMAGE // => x y [/x_in] xG [/x_in] yG /(hyp_iso_inj g_iso) ->.
Qed.

Lemma iso_dart_trans P: `(!d. d IN dart H ==> P d) ==> (!d. d IN dart G ==> P (g d))`.
Proof. by move => h d d_in; rewrite h (hyp_iso_dart g_iso). Qed.

Lemma iso_darts_k_trans k P: `(!d. d IN darts_k k H ==> P d) 
	==> (!d. d IN darts_k k G ==> P (g d))`.
Proof. by move => h d d_in; rewrite h hyp_iso_darts_k. Qed.

Lemma iso_dart_pairs_trans P: `(!p. p IN dart H CROSS dart H ==> P p)
	==> (!p. p IN dart G CROSS dart G ==> P (g (FST p), g (SND p)))`.
Proof.
move => h [x y]; rewrite IN_CROSS => [] [x_in y_in] /=.
by rewrite h IN_CROSS !(hyp_iso_dart g_iso).
Qed.

Lemma iso_face_trans P: `(!f. f IN face_set H ==> P f) 
	==> (!f. f IN face_set G ==> P (IMAGE g f))`.
Proof. by rewrite (iso_face_set g_iso) IN_IMAGE => h f f_in; rewrite h; exists f. Qed.

Lemma iso_node_trans P: `(!n. n IN node_set H ==> P n) 
	==> (!n. n IN node_set G ==> P (IMAGE g n))`.
Proof. by rewrite (iso_node_set g_iso) IN_IMAGE => h n n_in; rewrite h; exists n. Qed.

Lemma iso_face_k_trans k P: `(!f. f IN face_set_k k H ==> P f) 
	==> (!f. f IN face_set_k k G ==> P (IMAGE g f))`.
Proof. by rewrite hyp_iso_face_set_k IN_IMAGE => h f f_in; rewrite h; exists f. Qed.


End IsoLemmas.


(* BijLemmas *)
Section BijLemmas.

Variable h: `:D->C`.

Lemma bij_trans R V: `BIJ h R V
	==> !P. (!x. x IN V ==> P x) ==> (!x. x IN R ==> P (h x))`.
Proof. by rewrite BIJ INJ => bij_h p h x x_in; rewrite h bij_h. Qed.

Lemma fst_iso_trans g: `(!d. g d = h (FST d), h (SND d))
	==> (!d. FST (g d) = h (FST d))`.
Proof. by move => g_eq d; rewrite g_eq FST. Qed.

End BijLemmas.


Lemma list_sum_set_of_list_gen s: `uniq s ==> list_sum s = sum (set_of_list s)`.
Proof. by move => uniq_s; rewrite FUN_EQ_THM => f; rewrite list_sum_set_of_list. Qed.


(* ListLemmas *)
Section ListLemmas.

Variable L: `:((A)list)list`.

Lemma list_of_faces3_subset f: `MEM f (list_of_faces3 L) ==> MEM f (list_of_faces L)`.
Proof. by rewrite list_of_faces3 mem_filter => ->. Qed.

Lemma list_of_faces4_subset f: `MEM f (list_of_faces4 L) ==> MEM f (list_of_faces L)`.
Proof. by rewrite list_of_faces4 mem_filter => ->. Qed.

Lemma list_of_faces5_subset f: `MEM f (list_of_faces5 L) ==> MEM f (list_of_faces L)`.
Proof. by rewrite list_of_faces5 mem_filter => ->. Qed.

Lemma list_of_faces6_subset f: `MEM f (list_of_faces6 L) ==> MEM f (list_of_faces L)`.
Proof. by rewrite list_of_faces6 mem_filter => ->. Qed.


Lemma list_of_darts3_subset d: `MEM d (list_of_darts3 L) ==> MEM d (list_of_darts L)`.
Proof.
rewrite list_of_darts3 list_of_darts_alt list_of_faces3.
by rewrite !mem_flatten mem_filter /= => [] [l] h; exists l.
Qed.

Lemma list_of_darts4_subset d: `MEM d (list_of_darts4 L) ==> MEM d (list_of_darts L)`.
Proof.
rewrite list_of_darts4 list_of_darts_alt list_of_faces4.
by rewrite !mem_flatten mem_filter /= => [] [l] h; exists l.
Qed.

Lemma list_of_darts5_subset d: `MEM d (list_of_darts5 L) ==> MEM d (list_of_darts L)`.
Proof.
rewrite list_of_darts5 list_of_darts_alt list_of_faces5.
by rewrite !mem_flatten mem_filter /= => [] [l] h; exists l.
Qed.

Lemma list_of_darts6_subset d: `MEM d (list_of_darts6 L) ==> MEM d (list_of_darts L)`.
Proof.
rewrite list_of_darts6 list_of_darts_alt list_of_faces6.
by rewrite !mem_flatten mem_filter /= => [] [l] h; exists l.
Qed.

Lemma list_of_dart_pairs_subset p: `MEM p (list_dart_pairs L) 
	==> MEM (FST p) (list_of_darts L) /\ MEM (SND p) (list_of_darts L)`.
Proof. by rewrite list_dart_pairs allpairsP /= => [] [p'] [mem1] [mem2] ->. Qed.


Lemma e_list_ext_eq_e_list d: `MEM d (list_of_darts L) ==> e_list_ext L d = e_list d`.
Proof. by rewrite e_list_ext res darts_of_list IN_SET_OF_LIST => ->. Qed.

Lemma fst_choice_of_list_node g h n: `MEM n (list_of_nodes L)
	/\ (!d. g d = h (FST d), h (SND d):C)
	==> FST (CHOICE (IMAGE g (set_of_list n))) = FST (g (HD n))`.
Proof.
move => [mem_n] g_eq.
set x := `CHOICE _`.
set y := `HD n`.
have: `x IN IMAGE g (set_of_list n)`.
  by rewrite -x_def CHOICE_DEF IMAGE_EQ_EMPTY SET_OF_LIST_EQ_EMPTY (node_of_list_not_nil mem_n).
rewrite IN_IMAGE IN_SET_OF_LIST => [] [d] [->] mem_d.
have mem_y: `MEM y n`.
  rewrite -y_def.
  by case: n (node_of_list_not_nil mem_n) => [|h t] //; rewrite HD MEM.
move: mem_n; rewrite list_of_nodes -map_MAP mapP => [] [t] [_] /= n_eq.
by move: mem_y mem_d; rewrite n_eq !mem_filter /= !g_eq => [] [->] _ ->.
Qed.


Hypothesis goodL: `good_list L`.

Lemma card_set_of_list_node n: `MEM n (list_of_nodes L) ==> CARD (set_of_list n) = LENGTH n`.
Proof. by move => mem_n; rewrite card_set_of_list_uniq ?(uniq_node goodL) // Seq.size. Qed.

Lemma card_set_of_list_face f: `MEM f (list_of_faces L) ==> CARD (set_of_list f) = LENGTH f`.
Proof. by move => mem_n; rewrite card_set_of_list_uniq ?(uniq_face goodL) // Seq.size. Qed.

Lemma card_face_eq_length_find_face d: `MEM d (list_of_darts L)
	==> CARD (face (hypermap_of_list L) d) = LENGTH (find_face L d)`.
Proof.
move => mem_d; rewrite face_of_list // card_set_of_list_uniq ?Seq.size //.
by move: goodL; rewrite good_list => goodL; rewrite uniq_find_face.
Qed.

Lemma dart_list_all P: `(!d. d IN dart (hypermap_of_list L) ==> P d)
	<=> (!d. MEM d (list_of_darts L) ==> P d)`.
Proof. by rewrite (components_hypermap_of_list goodL) darts_of_list IN_SET_OF_LIST. Qed.

Lemma dart3_list_all P: `(!d. d IN darts_k 3 (hypermap_of_list L) ==> P d)
	<=> (!d. MEM d (list_of_darts3 L) ==> P d)`.
Proof. by rewrite darts3_eq_list_of_darts3 // IN_SET_OF_LIST. Qed.

Lemma dart4_list_all P: `(!d. d IN darts_k 4 (hypermap_of_list L) ==> P d)
	<=> (!d. MEM d (list_of_darts4 L) ==> P d)`.
Proof. by rewrite darts4_eq_list_of_darts4 // IN_SET_OF_LIST. Qed.

Lemma dart5_list_all P: `(!d. d IN darts_k 5 (hypermap_of_list L) ==> P d)
	<=> (!d. MEM d (list_of_darts5 L) ==> P d)`.
Proof. by rewrite darts5_eq_list_of_darts5 // IN_SET_OF_LIST. Qed.

Lemma dart6_list_all P: `(!d. d IN darts_k 6 (hypermap_of_list L) ==> P d)
	<=> (!d. MEM d (list_of_darts6 L) ==> P d)`.
Proof. by rewrite darts6_eq_list_of_darts6 // IN_SET_OF_LIST. Qed.

Lemma dart_pairs_list_all P: 
	`(!p. p IN dart (hypermap_of_list L) CROSS dart (hypermap_of_list L) ==> P p)
	<=> (!p. MEM p (list_dart_pairs L) ==> P p)`.
Proof. 
by rewrite -IN_SET_OF_LIST set_of_list_list_dart_pairs (components_hypermap_of_list goodL).
Qed.

Lemma elements_list_all P: `(!x. x IN elements_of_list L ==> P x)
	<=> (!x. MEM x (list_of_elements L) ==> P x)`.
Proof. by rewrite elements_of_list IN_SET_OF_LIST. Qed.

Lemma sum_node_list_all P: `good_list_nodes L
	==> ((!n. n IN node_set (hypermap_of_list L) ==> P n (sum n))
		<=> (!n. MEM n (list_of_nodes L) ==> P (set_of_list n) (list_sum n)))`.
Proof.
rewrite good_list_nodes => ->; rewrite IN_SET_OF_LIST nodes_of_list -map_MAP mapP.
split => [h n mem_n | h t [n] [mem_n] ->].
  by rewrite list_sum_set_of_list_gen ?(uniq_node mem_n) // h; exists n.
by rewrite -list_sum_set_of_list_gen ?(uniq_node mem_n) // h.
Qed.

Lemma sum_face_list_all P: `(!f. f IN face_set (hypermap_of_list L) ==> P f (sum f))
		<=> (!f. MEM f (list_of_faces L) ==> P (set_of_list f) (list_sum f))`.
Proof.
rewrite face_set_eq_list // IN_SET_OF_LIST faces_of_list -map_MAP mapP.
split => [h f mem_f | h t [f] [mem_f] ->].
  by rewrite list_sum_set_of_list_gen ?(uniq_face mem_f) // h; exists f.
by rewrite -list_sum_set_of_list_gen ?(uniq_face mem_f) // h.
Qed.


End ListLemmas.
