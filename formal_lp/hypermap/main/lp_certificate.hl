module Lp_certificate = struct

(* inequality id, indices of inequalities, coefficients *)
type constraint_type = string * int list * int64 list;;

type terminal_case = {
  precision : int;
  constraints : constraint_type list;
  target_variables : constraint_type list;
  variable_bounds : constraint_type list;
};;

type split_type = Triangle_split | Quad_split | Pent_split | Hex_split;;

type split_case = {
  split_type : split_type;
  split_face : int list;
};;

type lp_certificate_case = 
    Lp_terminal of terminal_case
  | Lp_split of split_case * lp_certificate_case list;;

type lp_certificate = {
  hypermap_string : string;
  root_case : lp_certificate_case;
};;


(* Writes a certificate into a binary file *)
let write_lp_certificate fname (certificate : lp_certificate) =
  let out = open_out_bin fname in
  let _ = Marshal.to_channel out certificate [] in
    close_out out;;

(* Reads a certificate from a binary file *)
let read_lp_certificate fname =
  let input = open_in_bin fname in
  let certificate = (Marshal.from_channel input : lp_certificate) in
  let _ = close_in input in
    certificate;;

end;;
