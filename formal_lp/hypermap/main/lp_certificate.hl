module Lp_certificate = struct

(* inequality id, indices of inequalities, coefficients *)
type constraint_type = string * int list * int64 list;;

type terminal_case = {
  precision : int;
  constraints : constraint_type list;
  target_variables : constraint_type list;
  variable_bounds : constraint_type list;
};;

type split_case = {
  split_type : string;
  split_face : int list;
};;

type lp_certificate_case = 
    Lp_terminal of terminal_case
  | Lp_split of split_case * lp_certificate_case list;;

type lp_certificate = {
  hypermap_string : string;
  root_case : lp_certificate_case;
};;

type lp_certificate_info = {
  terminals : int;
  split3 : int;
  split4 : int;
  split5 : int;
  split6 : int;
};;

(* Counts the number of terminal cases *)
let rec count_terminals lp_case =
  match lp_case with
    | Lp_terminal _ -> 1
    | Lp_split (_, cs) -> itlist (+) (map count_terminals cs) 0;;

let case_info lp_case =
  let terminals = ref 0 and
      split3 = ref 0 and
      split4 = ref 0 and
      split5 = ref 0 and
      split6 = ref 0 in
  let rec count case =
    match case with
      | Lp_terminal _ -> terminals := !terminals + 1
      | Lp_split (info, cs) ->
	  let _ =
	    (match info.split_type with
	       | "tri" -> split3 := !split3 + 1
	       | "quad" -> split4 := !split4 + 1
	       | "pent" -> split5 := !split5 + 1
	       | "hex" -> split6 := !split6 + 1
	       | s -> failwith ("Unknown split type: " ^ s)) in
	  let _ = map count cs in
	    () in
  let _ = count lp_case in
    {terminals = !terminals; split3 = !split3; split4 = !split4; split5 = !split5; split6 = !split6};;


(* Writes a certificate into a binary file *)
let write_lp_certificates fname (certificates : lp_certificate list) =
  let out = open_out_bin fname in
  let _ = Marshal.to_channel out certificates [] in
    close_out out;;

(* Reads a certificate from a binary file *)
let read_lp_certificates fname =
  let input = open_in_bin fname in
  let certificates = (Marshal.from_channel input : lp_certificate list) in
  let _ = close_in input in
    certificates;;
	
(******************)
(* Test functions *)
(******************)

type test_split = Test_dummy | Test_info of string * int list * (test_split list);;

let rec build_test_split case =
  match case with
    | Lp_terminal _ -> Test_dummy
    | Lp_split (info, cs) ->
	  Test_info (info.split_type, info.split_face, map build_test_split cs);;

end;;
