needs "../formal_lp/hypermap/ineqs/lp_ineqs.hl";;
needs "../formal_lp/hypermap/computations/list_hypermap_computations.hl";;
needs "../formal_lp/more_arith/prove_lp.hl";;

(* module Flyspeck_lp = struct *)

open Arith_misc;;
open Linear_function;;
open Prove_lp;;
open Arith_nat;;
open Misc_vars;;
open List_hypermap_computations;;
open List_conversions;;
open Lp_approx_ineqs;;


(* Prepare theorems for the final inequality: &12 <= scriptL V *)
let to_lin_f_ineq ineq_th =
  let lhs, rhs = dest_binop le_op_real (concl ineq_th) in
  let lhs_th = LIN_F_CONV lhs in
    EQ_MP (AP_THM (AP_TERM le_op_real lhs_th) rhs) ineq_th;;

let FINAL_INEQ = (MY_RULE_NUM o prove)(`lin_f [] <= -- &n <=> n = 0`,
		     REWRITE_TAC[LIN_F_EMPTY; REAL_NEG_GE0; REAL_OF_NUM_LE; LE]);;

let lnsum_ineqs =
  let DECIMAL_INT = prove(`!n. DECIMAL n 1 = &n`, REWRITE_TAC[DECIMAL; REAL_DIV_1]) in
  let ineq_th = (add_lp_hyp o REWRITE_RULE[GSYM IMP_IMP]) Lp_ineqs_proofs.lnsum_ineq in
  let ineq_tm = concl ineq_th in
  let ths1 = create_approximations [9;12;15] ineq_tm in
  let ths2 = map generalize_hyp ths1 in
  let ths3 = map (itlist PROVE_HYP Lp_ineqs_def.list_var_pos) ths2 in
  let ths4 = map (C MP ineq_th) ths3 in
  let r = CONV_RULE(REWRITE_CONV[DECIMAL_INT; GSYM LIST_SUM_LMUL] THENC DEPTH_CONV Arith_nat.NUMERAL_TO_NUM_CONV) in
  let ths5 = map r ths4 in
    zip (3--5) ths5;;



(* Performs the following conversions:
   (a + ... + c) + d = a + ... + c + d *)
let plus_assoc_conv = 
  let REAL_ADD_ASSOC' = (SYM o SPEC_ALL) REAL_ADD_ASSOC in
  let rec plus_conv tm =
    if (is_binop add_op_real tm) then
      let lhs, rhs = dest_binop add_op_real tm in
	if (is_binop add_op_real lhs) then
	  let x_tm, y_tm = dest_binop add_op_real lhs in
	  let th0 = INST[x_tm, x_var_real; y_tm, y_var_real; rhs, z_var_real] REAL_ADD_ASSOC' in
	  let ltm, rtm = dest_comb(rand(concl th0)) in
	    TRANS th0 (AP_TERM ltm (plus_conv rtm))
	else
	  REFL tm
    else
      REFL tm
  in plus_conv;;


(**********************)

let convert_ineq hyp_fun =
  let rec rewrite_lhs tm =
    let rewrite_one tm =
      if (is_binop mul_op_real tm) then
	let mul_tm, var_tm = dest_comb tm in
	let var_f, arg = dest_comb var_tm in
	    
	let rec convert_arg arg =
	  if (is_comb arg) then
	    let ltm, sub_arg' = dest_comb arg in
	    let const_name = (fst o dest_const) (if (is_const ltm) then ltm else rator ltm) in
	      (* Str.first_chars const_name 1 = "D" is a hack *)
	      if (Str.first_chars const_name 1 = "D" or const_name = "_0" 
		  or const_name = "," or const_name = "CONS" or const_name = "INSERT") then
		REFL arg
	      else
		try
		  let sub_arg_th = convert_arg sub_arg' in
		  let th0 = AP_TERM ltm sub_arg_th in
		  let rtm = rand(concl th0) in
		  let th1 = 
		    if (const_name = "set_of_list") then
		      set_of_list_conv rtm
		    else if (const_name = "FST") then
		      fst_conv rtm
		    else if (const_name = "SND") then
		      snd_conv rtm
		    else if (const_name = "HD") then
		      hd_conv rtm
		    else if (const_name = "e_list") then
		      e_list_conv_num rtm
		    else
		      hyp_fun const_name (rand rtm) in
		    TRANS th0 th1
		with _ ->
		  failwith ("convert_arg: "^const_name)
	  else
	    REFL arg in
	    
	let arg_th = convert_arg arg in
	  AP_TERM mul_tm (AP_TERM var_f arg_th)
	      
      else
	(* tm should be list_sum *)
	list_sum_conv BETA_CONV tm in
	
      if (is_binop add_op_real tm) then
	let lhs, rhs = dest_binop add_op_real tm in
	let lhs_th = rewrite_one lhs in
	let rhs_th = rewrite_lhs rhs in
	let th1 = MK_COMB(AP_TERM add_op_real lhs_th, rhs_th) in
	  if (is_binop add_op_real (rand(concl lhs_th))) then
	    let th2 = plus_assoc_conv (rand(concl th1)) in
	      TRANS th1 th2
	  else
	    th1
      else
	rewrite_one tm in
      
    fun ineq_tm ->
      let ltm, rtm = dest_comb ineq_tm in
      let op_tm, l_tm = dest_comb ltm in
      let lhs_eq_th = rewrite_lhs l_tm in
	AP_THM (AP_TERM op_tm lhs_eq_th) rtm;;


let convert_tm =
  let num_str = (fst o dest_const) Arith_hash.num_const in
  let rec convert hyp_fun tm =
    if (is_comb tm) then
      let ltm, rtm = dest_comb tm in
      let op_tm = if is_comb ltm then rator ltm else ltm in
	if is_const op_tm then
	  let const_name = (fst o dest_const) op_tm in
	    if const_name = "real_of_num" or const_name = "DECIMAL" then
	      REFL tm
	    else
	      let rtm_th = convert hyp_fun rtm in
	      let th0 = AP_TERM ltm rtm_th in
	      let arg = rand (concl th0) in
	      let th1 =
		if const_name = num_str then
		  INST[rand arg, n_var_num] Arith_hash.NUM_THM
		else
		  match const_name with
		    | "set_of_list" -> set_of_list_conv arg
		    | "FST" -> fst_conv arg
		    | "SND" -> snd_conv arg
		    | "HD" -> hd_conv arg
		    | "e_list" -> e_list_conv_num arg
		    | "LENGTH" -> length_conv arg
		    | _ ->
			(try hyp_fun const_name (rand arg)
			 with Not_found -> REFL arg) in
		TRANS th0 th1
	else
	  REFL tm
    else
      REFL tm in
    convert;;


let convert_condition hyp_fun tm =
  if is_comb tm then
    let ltm, rtm = dest_comb tm in
    let r_th = convert_tm hyp_fun rtm in
      if is_comb ltm then
	let op_tm, larg = dest_comb ltm in
	let l_th = convert_tm hyp_fun larg in
	  MK_COMB (AP_TERM op_tm l_th, r_th)
      else
	AP_TERM ltm r_th
  else
    convert_tm hyp_fun tm;;



let rec simplify_ineq_tm hyp_fun tm =
  if is_imp tm then
    let ltm, q_tm = dest_comb tm in
    let imp_tm, p_tm = dest_comb ltm in
    let p_eq_th = convert_condition hyp_fun p_tm in
    let q_eq_th = simplify_ineq_tm hyp_fun q_tm in
      MK_COMB (AP_TERM imp_tm p_eq_th, q_eq_th)
  else
    convert_ineq hyp_fun tm;;


let simplify_ineq hyp_fun ineq_th =
  let eq_th = simplify_ineq_tm hyp_fun (concl ineq_th) in
    EQ_MP eq_th ineq_th;;


let rec prove_conditions ineq_th =
  let concl_tm = concl ineq_th in
    if is_imp concl_tm then
      let p_tm = lhand concl_tm in
      let flag, p_th =
	if is_eq p_tm then
	  let ltm, rtm = dest_eq p_tm in
	    if ltm = rtm then
	      true, REFL ltm
	    else
	      false, TRUTH
	else
	  false, TRUTH in
      let th1 =
	if flag then
	  MP ineq_th p_th
	else
	  UNDISCH ineq_th in
	prove_conditions th1
    else
      ineq_th;;
      

let get_ineqs (hyp_list_tm, hyp_set, hyp_fun) std_flag precision name indices =
  let tag, ineq0_th = find_ineq std_flag precision name in
  let ineq1_th = INST[hyp_list_tm, l_cap_var] ineq0_th in
  let all_tm, set_tm = dest_comb (concl ineq1_th) in
  let set_eq_th = hyp_set ((fst o dest_const o rator) set_tm) in
  let ineq2_th = EQ_MP (AP_TERM all_tm set_eq_th) ineq1_th in
  let ineq0_ths = select_all ineq2_th indices in
  let ineq1_ths = map MY_BETA_RULE ineq0_ths in
  let ineq2_ths = map (simplify_ineq hyp_fun) ineq1_ths in
  let ineq3_ths = map prove_conditions ineq2_ths in
    ineq3_ths;;


(****************************)

let prove_flyspeck_lp hyp_list_tm std_flag precision constraints target_variables variable_bounds =
  let list_thm, fun_table = compute_all hyp_list_tm None in
  let hyp_fun name dart_tm = 
    let table = Hashtbl.find fun_table name in
      Hashtbl.find table (num_pair_hash dart_tm) in
  let hyp_set =
    let set_list =
      [
	"list_of_elements", "elements";
	"list_of_darts", "darts";
	"list_of_darts3", "darts3";
	"list_of_darts4", "darts4";
	"list_of_nodes", "nodes";
	"list_of_faces", "faces";
	"nodes_of_list", "set_nodes";
	"faces_of_list", "set_faces";
      ] in
      fun const_name ->
	let name = assoc const_name set_list in
	  Hashtbl.find list_thm name in
  let precision_constant = Int 10 **/ (Int precision) in

(* This function generates all inequalities with the given name and indices,
   multiplies these inequalities by given coefficients, and finds the sum of 
   the generated inequalities *)
  let sum_step = fun (name, indices, c) ->
    try
      let ineqs = get_ineqs (hyp_list_tm, hyp_set, hyp_fun) std_flag precision name indices in
      let s1 = map transform_le_ineq (zip ineqs c) in
	List.fold_left add_step' dummy s1
    with _ ->
      failwith ("Problem: "^name) in

  let s1' = List.fold_left add_step' dummy (map sum_step constraints) in
  let s1 = mul_step s1' (mk_real_int precision_constant) in
  let s2 = List.fold_left add_step' dummy (map sum_step target_variables) in
  let s3 = List.fold_left add_step' dummy (map sum_step variable_bounds) in
  let s4 = add_step' (add_step' s1 s2) s3 in

  let ineq_th0 = assoc precision lnsum_ineqs in
  let ineq_th1 = (INST[hyp_list_tm, l_cap_var] o add_lp_hyp) ineq_th0 in
  let ineq_th2 = EQ_MP (term_rewrite (concl ineq_th1) (hyp_set "list_of_elements")) ineq_th1 in
  let ineq_th3 = simplify_ineq hyp_fun ineq_th2 in
  let ineq_th4 = to_lin_f_ineq ineq_th3 in

  let r1 = add_step' ineq_th4 s4 in
  let n_tm = (rand o rand o rand o concl) r1 in
  let r_eq_th = INST[n_tm, n_var_num] FINAL_INEQ in
  let not_zero_th = NUM_EQ0_HASH_CONV n_tm in
    EQ_MP not_zero_th (EQ_MP r_eq_th r1);;



(*************************)


(*************************)

loadt "../formal_lp/glpk/ex1/bb1_out.hl";;
loadt "../formal_lp/glpk/ex2/bb2_1_out.hl";;
loadt "../formal_lp/glpk/ex2/bb2_2_out.hl";;
loadt "../formal_lp/glpk/ex2/bb2_5_out.hl";;


let test_list = (to_num o create_hol_list_str) hypermap_string;;
(* bb2_1 *)
let split_list = eval_split_list_hyp test_list (to_num `1,2`);;
(* bb2_2 *)
let split_list = eval_split_list_hyp test_list (to_num `0,1`);;
let test_list = (rand o concl) split_list;;


prove_flyspeck_lp test_list false precision constraints target_variables variable_bounds;;
prove_flyspeck_lp test_list true precision constraints target_variables variable_bounds;;
(* 10, bb1: 2.256 *)
(* 10, bb2_1: 2.224 *)
(* 10, bb2_2: 2.532 *)
(* 10, bb2_3: *)
(* 10, bb2_4: *)
(* 10, bb2_5: 2.580 *)
test 1 (prove_flyspeck_lp test_list false precision constraints target_variables) variable_bounds;;

let th = it;;
length (filter (is_binop le_op_real) (hyp th));;



(************************)

let hyp_list_tm = test_list;;
let std_flag = true;;

let list_thm, fun_table = compute_all hyp_list_tm None;;
let hyp_fun name dart_tm = 
  let table = Hashtbl.find fun_table name in
    Hashtbl.find table (num_pair_hash dart_tm);;

let hyp_set =
  let set_list =
    [
      "list_of_elements", "elements";
      "list_of_darts", "darts";
      "list_of_darts3", "darts3";
      "list_of_darts4", "darts4";
      "list_of_nodes", "nodes";
      "list_of_faces", "faces";
      "nodes_of_list", "set_nodes";
      "faces_of_list", "set_faces";
    ] in
  fun const_name ->
    let name = assoc const_name set_list in
      Hashtbl.find list_thm name;;


(********************)
let name, indices, _ = List.nth constraints 29;;
let name, indices, _ = List.nth variable_bounds 22;;
get_ineqs (hyp_list_tm, hyp_set, hyp_fun) std_flag precision name indices;;




generate_ineq (find_raw_ineq "y9_def");;

let x = 2;;


(******************)

let precision_constant = Int 10 **/ (Int precision) and
    target_bound = `&12`;;

(* This function generates all inequalities with the given name and indices,
   multiplies these inequalities by given coefficients, and finds the sum of 
   the generated inequalities *)
let sum_step = fun (name, indices, c) ->
  try
    let ineqs = get_ineqs (hyp_list_tm, hyp_set, hyp_fun) std_flag precision name indices in
    let s1 = map transform_le_ineq (zip ineqs c) in
      List.fold_left add_step' dummy s1
  with _ ->
    failwith ("Problem: "^name);;

let s1' = List.fold_left add_step' dummy (map sum_step constraints);;
let s1 = mul_step s1' (mk_real_int precision_constant);;
let s2 = List.fold_left add_step' dummy (map sum_step target_variables);;
let s3 = List.fold_left add_step' dummy (map sum_step variable_bounds);;
let s4 = add_step' (add_step' s1 s2) s3;;

let ineq_th0 = assoc precision lnsum_ineqs;;
let ineq_th1 = (INST[hyp_list_tm, l_cap_var] o add_lp_hyp) ineq_th0;;
let ineq_th2 = EQ_MP (term_rewrite (concl ineq_th1) (hyp_set "list_of_elements")) ineq_th1;;
let ineq_th3 = simplify_ineq hyp_fun ineq_th2;;
let ineq_th4 = to_lin_f_ineq ineq_th3;;

let r1 = add_step' ineq_th4 s4;;
let n_tm = (rand o rand o rand o concl) r1;;
let r_eq_th = INST[n_tm, n_var_num] FINAL_INEQ;;
let not_zero_th = NUM_EQ0_HASH_CONV n_tm;;
EQ_MP not_zero_th (EQ_MP r_eq_th r1);;



(* (old) Final transformations *)
let r6 = CONV_RULE (DEPTH_CONV NUM_TO_NUMERAL_CONV) s4;;
let m = term_of_rat (precision_constant */ precision_constant */ precision_constant);;
let r7 = mul_rat_step r6 (mk_comb (`(/) (&1)`, m));;
let r8 = REWRITE_RULE[lin_f; ITLIST; REAL_ADD_RID] r7;;
let r9 = EQT_ELIM (REAL_RAT_LE_CONV (mk_binop le_op_real ((rand o concl) r8) target_bound));;
MATCH_MP REAL_LE_TRANS (CONJ r8 r9);;
