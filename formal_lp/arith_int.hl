needs "arith_hash.hl";;

open Arith_hash;;


let n_var_num = `n:num`;;
let m_var_num = `m:num`;;

let neg_op = `(--):real->real`;;
let amp_op = `(&):num->real`;;
let plus_op_real = `(+):real->real->real`;;
let mul_op_real = `( * ):real->real->real`;;


let [pth1; pth2; pth3; pth4; pth5; pth6] = (CONJUNCTS o prove)
   (`(--(&m) + --(&n) = --(&(m + n))) /\
     (--(&m) + &(m + n) = &n) /\
     (--(&(m + n)) + &m = --(&n)) /\
     (&(m + n) + --(&m) = &n) /\
     (&m + --(&(m + n)) = --(&n)) /\
     (&m + &n = &(m + n))`,
    REWRITE_TAC[GSYM REAL_OF_NUM_ADD; REAL_NEG_ADD] THEN
    REWRITE_TAC[REAL_ADD_ASSOC; REAL_ADD_LINV; REAL_ADD_LID] THEN
    REWRITE_TAC[REAL_ADD_RINV; REAL_ADD_LID] THEN
    ONCE_REWRITE_TAC[REAL_ADD_SYM] THEN
    REWRITE_TAC[REAL_ADD_ASSOC; REAL_ADD_LINV; REAL_ADD_LID] THEN
    REWRITE_TAC[REAL_ADD_RINV; REAL_ADD_LID]);;




let REAL_BITS_ADD_CONV =
  let dest = dest_binop plus_op_real in
  (fun tm ->
    try let l,r = dest tm in
        if rator l = neg_op then
          if rator r = neg_op then
            let th1 = INST [rand(rand l), m_var_num; rand(rand r), n_var_num] pth1 in
            let tm1 = rand(rand(rand(concl th1))) in
            let th2 = AP_TERM neg_op (AP_TERM amp_op (NUM_ADD_HASH_CONV tm1)) in
            TRANS th1 th2
          else
            let m = rand(rand l) and n = rand r in
            let m' = dest_numeral_hash m and n' = dest_numeral_hash n in
            if m' <=/ n' then
              let p = mk_numeral_array (n' -/ m') in
              let th1 = INST [m,m_var_num; p,n_var_num] pth2 in
              let th2 = NUM_ADD_HASH_CONV (rand(rand(lhand(concl th1)))) in
              let th3 = AP_TERM (rator tm) (AP_TERM amp_op (SYM th2)) in
              TRANS th3 th1
            else
              let p = mk_numeral_array (m' -/ n') in
              let th1 = INST [n,m_var_num; p,n_var_num] pth3 in
              let th2 = NUM_ADD_HASH_CONV (rand(rand(lhand(lhand(concl th1))))) in
              let th3 = AP_TERM neg_op (AP_TERM amp_op (SYM th2)) in
              let th4 = AP_THM (AP_TERM plus_op_real th3) (rand tm) in
              TRANS th4 th1
        else
          if rator r = neg_op then
            let m = rand l and n = rand(rand r) in
            let m' = dest_numeral_hash m and n' = dest_numeral_hash n in
            if n' <=/ m' then
              let p = mk_numeral_array (m' -/ n') in
              let th1 = INST [n,m_var_num; p,n_var_num] pth4 in
              let th2 = NUM_ADD_HASH_CONV (rand(lhand(lhand(concl th1)))) in
              let th3 = AP_TERM plus_op_real (AP_TERM amp_op (SYM th2)) in
              let th4 = AP_THM th3 (rand tm) in
              TRANS th4 th1
            else
             let p = mk_numeral_array (n' -/ m') in
             let th1 = INST [m,m_var_num; p,n_var_num] pth5 in
             let th2 = NUM_ADD_HASH_CONV (rand(rand(rand(lhand(concl th1))))) in
             let th3 = AP_TERM neg_op (AP_TERM amp_op (SYM th2)) in
             let th4 = AP_TERM (rator tm) th3 in
             TRANS th4 th1
          else
            let th1 = INST [rand l,m_var_num; rand r,n_var_num] pth6 in
            let tm1 = rand(rand(concl th1)) in
            let th2 = AP_TERM amp_op (NUM_ADD_HASH_CONV tm1) in
            TRANS th1 th2
    with Failure _ -> failwith "REAL_BITS_ADD_CONV");;


let mul_pp = prove(`&m * &n = &(m * n)`, REWRITE_TAC[REAL_OF_NUM_MUL]);;
let mul_nn = prove(`--(&m) * --(&n) = &(m * n)`, REWRITE_TAC[REAL_NEG_MUL2; mul_pp]);;
let mul_np = prove(`--(&m) * &n = --(&(m * n))`, REWRITE_TAC[REAL_MUL_LNEG; mul_pp]);;
let mul_pn = prove(`&m * --(&n) = --(&(m * n))`, REWRITE_TAC[REAL_MUL_RNEG; mul_pp]);;


let REAL_BITS_MUL_CONV tm =
  let l, r = dest_binop mul_op_real tm in
    if rator l = neg_op then
      if rator r = neg_op then
        let th1 = INST [rand(rand l), m_var_num; rand(rand r), n_var_num] mul_nn in
        let tm1 = rand(rand(concl th1)) in
        let th2 = AP_TERM amp_op (NUM_MULT_HASH_CONV tm1) in
          TRANS th1 th2
      else
        let th1 = INST [rand(rand l), m_var_num; rand r, n_var_num] mul_np in
	let tm1 = rand(rand(rand(concl th1))) in
	let th2 = AP_TERM neg_op (AP_TERM amp_op (NUM_MULT_HASH_CONV tm1)) in
	  TRANS th1 th2
    else
      if rator r = neg_op then
	let th1 = INST[rand l, m_var_num; rand(rand r), n_var_num] mul_pn in
	let tm1 = rand(rand(rand(concl th1))) in
	let th2 = AP_TERM neg_op (AP_TERM amp_op (NUM_MULT_HASH_CONV tm1)) in
	  TRANS th1 th2
      else
	let th1 = INST[rand l, m_var_num; rand r, n_var_num] mul_pp in
	let tm1 = rand(rand(concl th1)) in
	let th2 = AP_TERM amp_op (NUM_MULT_HASH_CONV tm1) in
          TRANS th1 th2;;
	


(*
let amp x = mk_comb(amp_op, x);;
let negate x = mk_comb(neg_op, x);;

let x = num_of_string "398537263103485";;
let y = num_of_string "243089539573957";;


let xx = amp (mk_numeral_array x) and yy = amp (mk_numeral_array y);;
let xxx = amp (mk_numeral x) and yyy = amp (mk_numeral y);;


test 100 REAL_INT_MUL_CONV (mk_binop mul_op_real (negate xxx) yyy);;

test 100 REAL_BITS_MUL_CONV (mk_binop mul_op_real (negate xx) yy);;

(DEPTH_CONV NUM_TO_NUMERAL_CONV) (concl(REAL_BITS_MUL_CONV (mk_binop mul_op_real xx yy)))
*)
