flyspeck_needs "../formal_lp/formal_interval/m_verifier.hl";;


(******)

let pp = 5;;

let n = 2;;
let poly_tm = expr_to_vector_fun `x1 pow 2 + x2 pow 2`;;

let xx = `[-- &6; -- &6]` and zz = `[&1; &2]`;;
let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;

let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval_f, eval_taylor, tf = mk_verification_functions pp poly_tm true `-- &1`;;
let certificate = run_test tf xx_float zz_float false 0.0 true false true;;
let c1 = transform_result xx_float zz_float certificate;;

m_verify_list n pp eval_f eval_taylor c1 xx1 zz1;;
m_verify_raw0 n pp eval_f eval_taylor certificate xx1 zz1;;

let c0 = run_test0 tf xx_float zz_float false 0.0 false false false;;
result_size c0;;


(****************)
let delta_x_poly = 
  let tm = (rand o concl o SPEC_ALL) Sphere.delta_x in
    expr_to_vector_fun tm;;

let delta_y_poly =
  let tm = (rand o concl o SPEC_ALL o REWRITE_RULE[Sphere.delta_x]) Sphere.delta_y in
    expr_to_vector_fun tm;;

let delta_x4_poly =
  let tm = (rand o concl o SPEC_ALL) Sphere.delta_x4 in
    expr_to_vector_fun tm;;


(****)
(* delta_x4 *)
let pp = 10;;
let n = 6;;
let xx = `[&4;&4;&4;&4;&4;&8]` and
    zz = `[#6.3504;#6.3504;#6.3504;#6.3504;#6.3504;#25.4016]`;;
let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;

let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;


let eval0_delta_x4, eval_delta_x4, tf_delta_x4 = mk_verification_functions pp delta_x4_poly true `#6.02525`;;
let certificate = run_test tf_delta_x4 xx_float zz_float false 0.0 true true true;;
let c1 = transform_result xx_float zz_float certificate;;

m_verify_list n pp eval0_delta_x4 eval_delta_x4 c1 xx1 zz1;;

m_verify_raw n pp eval0_delta_x4 eval_delta_x4 certificate xx1 zz1;;
result_size certificate;;

let c0 = run_test0 tf_delta_x4 xx_float zz_float false 0.0 true false false;;
(* 12 (true false false) 2 (true true false) *)
result_size c0;;
m_verify_raw n pp eval0_delta_x4 eval_delta_x4 c0 xx1 zz1;;



(***)
(* delta_x *)

let pp = 10;;
let n = 6;;
let xx = `[&4;&4;&4;&4;&4;&4]` and
    zz = `[#6.3504;#6.3504;#6.3504;#6.3504;#6.3504;#6.3504]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_delta_x, eval_delta_x, tf_delta_x = mk_verification_functions pp delta_x_poly true `#127.999`;;
let certificate = run_test tf_delta_x xx_float zz_float false 0.0 true false true;;
let c1 = transform_result xx_float zz_float certificate;;
length c1;;
(* 46 (true false false) 10 (true true false) *)
result_size certificate;;
m_verify_list n pp eval0_delta_x eval_delta_x c1 xx1 zz1;;

let c0 = run_test0 tf_delta_x xx_float zz_float false 0.0 true true true;;
(* 4873 (true false true) 32 (true true true) *)
result_size c0;;


(* 10: 65 *)
test 1 (m_verify_raw_old n pp eval_delta_x certificate xx1) zz1;;
(* 10: 38.642 *)
test 1 (m_verify_raw0 n pp eval0_delta_x eval_delta_x certificate xx1) zz1;;
(* 10: 40.187 *)
test 1 (m_verify_list n pp eval0_delta_x eval_delta_x c1 xx1) zz1;;
(* 10: 4.228 (2.408, new restrict_domain) *)
test 1 (m_verify_domain_test n pp eval_delta_x certificate xx1) zz1;;



(***)
(* delta_y *)
let pp = 10;;
let n = 6;;
let xx = `[&2;&2;&2;&2;&2;&2]` and
    zz = `[#2.52;#2.52;#2.52;#2.52;#2.52;#2.52]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_delta_y, eval_delta_y, tf_delta_y = mk_verification_functions pp delta_y_poly true `#127.999`;;
let certificate = run_test tf_delta_y xx_float zz_float false 0.0 true false true;;
let c1 = transform_result xx_float zz_float certificate;;
length c1;;
(* 134 (true true false) *)
result_size certificate;;

m_verify_list n pp eval0_delta_y eval_delta_y c1 xx1 zz1;;
m_verify_raw0 n pp eval0_delta_y eval_delta_y certificate xx1 zz1;;
(* 10: 494 *)
test 1 (m_verify_raw n pp eval0_delta_y eval_delta_y certificate xx1) zz1;;


let c0 = run_test0 tf_delta_y xx_float zz_float false 0.0 true true true;;
(* 24671 (true false true) 1785 (true true true) *)
result_size c0;;



(***)
(* schwefel *)
let pp = 12;;
let n = 3;;
let xx = `[-- &10; -- &10; -- &10]` and
    zz = `[&10; &10; &10]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_schwefel,eval_schwefel,tf_schwefel = mk_verification_functions pp schwefel_poly true schwefel_min;;
let certificate = run_test tf_schwefel xx_float zz_float false 0.0 true false true;;
let c1 = transform_result xx_float zz_float certificate;;
(* 641 *)
length c1;;
(* 1922 (true false false) 1423 (true false true) *)
result_size certificate;;

m_verify_list n pp eval0_schwefel eval_schwefel c1 xx1 zz1;;

m_verify_raw0 n pp eval0_schwefel eval_schwefel certificate xx1 zz1;;
(* 10: 698 (f0_flag: 133) *)
test 1 (m_verify_raw0 n pp eval0_schwefel eval_schwefel certificate xx1) zz1;;
(* 10: 103 *)
test 1 (m_verify_list n pp eval0_schwefel eval_schwefel c1 xx1) zz1;;

let c0 = run_test0 tf_schwefel xx_float zz_float false 0.0 true false false;;
(* 2152 *)
result_size c0;;



(***)
(* rd *)

let pp = 12;;
let n = 3;;
let xx = `[-- &5; -- &5; -- &5]` and
    zz = `[&5; &5; &5]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_rd, eval_rd, tf_rd = mk_verification_functions pp rd_poly true rd_min;;
let certificate = run_test tf_rd xx_float zz_float false 0.0 true true false;;
result_size certificate;;
m_verify_raw n pp eval0_rd eval_rd certificate xx1 zz1;;

(***)
(* caprasse *)

let pp = 8;;
let n = 4;;
let xx = `[-- #0.5; -- #0.5; -- #0.5; -- #0.5]` and
    zz = `[#0.5; #0.5; #0.5; #0.5]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_caprasse,eval_caprasse,tf_caprasse = mk_verification_functions pp caprasse_poly true caprasse_min;;
let certificate = run_test tf_caprasse xx_float zz_float false 0.0 true false false;;
let c0 = transform_result xx_float zz_float certificate;;
(* 53 *)
length c0;;
(* 48 (true true false) 80 (true false false) 80 (true false true) *)
result_size certificate;;
m_verify_list n pp eval0_caprasse eval_caprasse c0 xx1 zz1;;

(* 10: 30.826 (f0_flag: 16.497) *)
test 1 (m_verify_raw0 n pp eval0_caprasse eval_caprasse certificate xx1) zz1;;
(* 10: 17.005 *)
test 1 (m_verify_list n pp eval0_caprasse eval_caprasse c0 xx1) zz1;;

let c0 = run_test0 tf_caprasse xx_float zz_float false 0.0 true false false;;
(* 128 (true false false) 88 (true true false) *)
result_size c0;;
m_verify_raw n pp eval0_caprasse eval_caprasse c0 xx1 zz1;;


(***)
(* lv *)

let pp = 5;;
let n = 4;;
let xx = `[-- &2; -- &2; -- &2; -- &2]` and
    zz = `[&2; &2; &2; &2]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_lv, eval_lv, tf_lv = mk_verification_functions pp lv_poly true lv_min;;
let certificate = run_test tf_lv xx_float zz_float false 0.0 true false true;;
let c0 = transform_result xx_float zz_float certificate;;
(* 1 *)
length c0;;
(* 3 (true true false) 11 (true false false) *)
result_size certificate;;
m_verify_list n pp eval0_lv eval_lv c0 xx1 zz1;;

(* 10: 2.688 (f0_flag: 1.216) (df0_flag: 0.564) *)
test 1 (m_verify_raw0 n pp eval0_lv eval_lv certificate xx1) zz1;;


let c0 = run_test0 tf_lv xx_float zz_float false 0.0 true true false;;
(* 11 (true false false) 3 (true true false) *)
result_size c0;;

(***)
(* butcher *)

let pp = 5;;
let n = 6;;
let xx = `[-- &1; -- #0.1; -- #0.1; -- &1; -- #0.1; -- #0.1]` and
    zz = `[&0; #0.9; #0.5; -- #0.1; -- #0.05; -- #0.03]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_butcher, eval_butcher, tf_butcher = mk_verification_functions pp butcher_poly true butcher_min;;
let certificate = run_test tf_butcher xx_float zz_float false 0.0 true true false;;
result_size certificate;;
m_verify_raw n pp eval0_butcher eval_butcher certificate xx1 zz1;;


(***)
(* magnetism *)

let pp = 8;;
let n = 7;;
let xx = `[-- &1; -- &1; -- &1; -- &1; -- &1; -- &1; -- &1]` and
    zz = `[&1; &1; &1; &1; &1; &1; &1]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_magnetism, eval_magnetism, tf_magnetism = 
  mk_verification_functions pp magnetism_poly true magnetism_min;;
let certificate = run_test tf_magnetism xx_float zz_float false 0.0 true false true;;
let c1 = transform_result xx_float zz_float certificate;;
(* 76 *)
length c1;;
(* 8732 (true false false) 77 (true false true) *)
result_size certificate;;

m_verify_list n pp eval0_magnetism eval_magnetism c1 xx1 zz1;;
(* 10: 7.86 *)
test 1 (m_verify_list n pp eval0_magnetism eval_magnetism c1 xx1) zz1;;


let c00 = run_test0 tf_magnetism xx_float zz_float false 0.0 true false true;;
(* 121 (true false true) *)
result_size c00;;
let c0 = transform_result xx_float zz_float c00;;
(* 120 *)
length c0;;
m_verify_list n pp eval0_magnetism eval_magnetism c0 xx1 zz1;;
(* 10: 13.772 *)
test 1 (m_verify_list n pp eval0_magnetism eval_magnetism c0 xx1) zz1;;





(***)
(* heart *)

let pp = 10;;
let n = 8;;
let xx = `[-- #0.1; #0.4; -- #0.7; -- #0.7; #0.1; -- #0.1; -- #0.3; -- #1.1]` and
    zz = `[#0.4; &1; -- #0.4; #0.4; #0.2; #0.2; #1.1; -- #0.3]`;;

let xx1 = convert_to_float_list pp true xx and
    zz1 = convert_to_float_list pp false zz;;
let xx_float = map float_of_float_tm (dest_list xx1) and
    zz_float = map float_of_float_tm (dest_list zz1);;

let eval0_heart, eval_heart, tf_heart = mk_verification_functions pp heart_poly true heart_min;;
let certificate = run_test tf_heart xx_float zz_float false 0.0 true false false;;
let c0 = transform_result xx_float zz_float certificate;;
(* 33 *)
length c0;;
(* 42 (true true false) 50 (true false false) 48 (true false true) *)
result_size certificate;;
m_verify_list n pp eval0_heart eval_heart c0 xx1 zz1;;

let c0 = run_test0 tf_heart xx_float zz_float false 0.0 true false false;;
(* 50 (true true false) 61 (true false false) 50 (true true true) *)
result_size c0;;
m_verify_raw n pp eval0_heart eval_heart c0 xx1 zz1;;


(* 10: 109 *)
test 1 (m_verify_raw_old n pp eval_heart certificate xx1) zz1;;

(* 10: 94 (f0_flag: 22.929) (df0_flag: 13.229) *)
test 1 (m_verify_raw0 n pp eval0_heart eval_heart certificate xx1) zz1;;

(* 10: 13.689 *)
test 1 (m_verify_list n pp eval0_heart eval_heart c0 xx1) zz1;;

(* 10: 13 (10.625, new restrict_domain) (f0_flag: 5.3) (df0_flag: 2.264) *)
test 1 (m_verify_domain_test n pp eval_heart certificate xx1) zz1;;
