Sphere.vol2r;;
Sphere.vol2f;;
Sphere.gamma23f;;
Sphere.a_spine5;;
Sphere.b_spine5;;
Sphere.gamma3f;;
Sphere.vol3f;;
vol3f_palt;;
search[`vol3f`];;
search[`gchi`];;
search[`delta_x`;`eta_x`];;
vol3f_x_sqrt2_lmplus;;
vol3f_x_lfun;;
vol3_x_sqrt;;
vol3f_palt;;
help_grep "GEN";;

Sphere.eta2_135;;
ineq;;
Sphere.vol3r;;
searcht 5 [`lfun`];;
cpp_string_of_term `#3.0`;;
chop_list 3 [`a`;`b`;`c`;`d`];;

Parse_ineq.autogen;;
let ineq = Sphere.ineq;;
let all_forall = Sphere.all_forall;;
split_ineq;;
Sphere.vol3r;;
Sphere.vol_x;;
(*  *)
Sys.command("pwd");;


search[`vol3f`];;
search[`sqrt2`];;
search[`dihRy`];;
search[`solRy`];;
search[`lmfun`;`lfun`];;
search[`lmfun`;`h0`];;

Sphere.dih_x;;
Sphere.atn2;;
Sphere.vol_x;;
Sphere.vol4f;;
Sphere.gamma4f;;

search [`lfun`];;
search [`ly`];;
searcht 3 [`matn`];;
type_of `matan`;;
Sphere.vol4f;;
help "dest_binder";;
help_grep "binder";;
help "is_binder";;
binders();;

Sphere.arclength;;
searcht 5 [`acs`;`atn`];;
searcht 5 [`acs`;`asn`];;

Sphere.a_spine5;;
Sphere.atn2;;
Sphere.dih_x;;
Sphere.vol3r;;
Sphere.vol_x;;
Sphere.vol3f;;
Sphere.sol_y;;
searcht 5 [`sol_y`;`atn`];;
searcht 20 [`delta_x4`];;
search [name "Euler"];;
it;;
Sphere.gamma3f;;
Sphere.vol3f;;
Sphere.gamma23f;;
Sphere.vol2r;;
Sphere.marchal_quartic;;
Sphere.taum;;
Sphere.lnazim;;
Sphere.rhazim;;
Sphere.rho;;
Sphere.rhazim;;
Sphere.ly;;
Sphere.const1;;
Sphere.vol4f;;
Sphere.vol_y;;
Sphere.const1;;
Sphere.lfun;;
Sphere.lmfun;;
Sphere.mm1;;
Sphere.mm2;;
Sphere.rhazim2;;
Sphere.sol0;;
Sphere.edge_flat;;

Sphere.vol2r;;
Sphere.vol2f;;
Sphere.mm1;;
Sphere.mm2;;
Sphere.tau0;;
Sphere.marchal_quartic;;
Sphere.hplus;;
searcht 100 [`asn`;`atn`];;
searcht 100 [`rhazim2`];;
searcht 100 [`sol0`];;
Sphere.arclength;;

REAL_FIELD;;
search[`];;
search[`&0 < sol0`];;

Sphere.edge_flat;;
Sphere.flat_term;;
Sphere.tame_table_d;;


search[`radV`];;
Sphere.gamma4f;;
Sphere.rad2_y;;
Sphere.rad2_x;;
Parse_ineq.y_of_x_e;;
Sphere.vol_x;;
Sphere.dih6_y;;
gchi1_x;;
gchi;;
dih4_x;;
List.length !Ineq.ineqs;;
Sphere.atn2;;
"string";;

curry;;
search [name "Packing"];;
help_grep "list";;
help "chop_list";;

Sphere.gamma4f;;
Sphere.vol4f;;
Sphere.vol3f;;
Sphere.vol2f;;

Sphere.ups_x;;
Sphere.quadratic_root_plus;;
searcht 10 [`edge_flat`];;
searcht 10 [`(sqrt x) pow 2`];;
searcht 4 [`abs`;`sqrt`];;

searcht 5 [`sqrt x pow 2`];; SQRT_POW_2;;
help_grep "REWRITE_TAC";;
(*
Sphere.beta_bump_y;;
Sphere.bump;;
Sphere.lmfun;;
Sphere.beta_bump_force_y;;
Sphere.critical_edge_y;;
Sphere.vol4f;;
Sphere.hminus;;
Sphere.h0;;
Sphere.hplus;;
*)

search[`vol4f`;`lmfun`];;
search[`gcy`;`gchi`];;
search[`gcy`];;
ineq_expand;;


help_grep "REP";;
search [name "cycle_";];;
help "REPEATC";;
help "MATCH_MP";;
help_grep "CHANGED";;
search[name "MVT"];;"MVT_GENERAL";;
search[name "IVT"];;
REAL_IVT_DECREASING;;
REAL_IVT_DECREASING;;
search[`real_continuous_on`];;"REAL_CONTINUOUS_ON_NEG","REAL_CONTINUOUS_ON_MUL","REAL_CONTINUOUS_ON_POW",("REAL_CONTINUOUS_ON_LMUL"),"REAL_CONTINUOUS_ON_SUB","REAL_CONTINUOUS_ON_RMUL","REAL_CONTINUOUS_ON_ID","REAL_ROLLE","REAL_CONTINUOUS_ON_ADD","REAL_CONTINUOUS_ON_CONST";
(* also REAL_CONTINUOUS_MUL, REAL_CONTINUOUS_SUB, etc. *)
REAL_CONTINUOUS_ON_POW;;

searcht 5 [`has_real_derivative`;`u + v`],"HAS_REAL_DERIVATIVE_ADD";;
search [name "HAS_REAL_DERIVATIVE"];;
"HAS_REAL_DERIVATIVE_INCREASING_IMP","HAS_REAL_DERIVATIVE_CONST","HAS_REAL_DERIVATIVE_POW_ATREAL",("HAS_REAL_DERIVATIVE_POW_WITHIN"),"HAS_REAL_DERIVATIVE_INCREASING","HAS_REAL_DERIVATIVE_ADD","HAS_REAL_DERIVATIVE_ID",
search[`has_real_derivative`;name "MVT"];;
REAL_ROLLE;;
HAS_REAL_DERIVATIVE_INCREASING;;
searcht 10 [`has_real_derivative`;`f x < f y`];;


REAL_ROLLE;;

searcht 5 [`&0 <= a /\ &0 <= b ==> &0 <= a * b`];;
searcht 5 [`(a /\ b) /\ c` ; `a /\ b /\ c`];;



searcht 5 [`#1.2`;`hminus`]; hminus_prop;;
searcht 5 [`rhazim_x`];;
rhazim_x;;
rhazim2_x;;


searcht 5 [`(\x. f (x) * g x) real_continuous_on s`];;
searcht 10 [`inv (x * y)`;`inv x * inv y`];;
searcht 10 [`inv(inv x)`];;
searcht 5 [`&0 <= inv (x) <=> &0 <= x`];;

searcht 10 [`x ==> (&0 < u / v)`];;
searcht 10 [`x < t /\ t <= u ==> x < u`];;
searcht 10 [`x pow 2 < y pow 2`];;
searcht 10 [`x ==> (&0 <= u/v)`];;

searcht 5 [`lmfun`;`lfun`];;

Sphere.marchal_quartic;;
Sphere.lmfun;;
Sphere.hminus;;


searcht 5[`FST a,SND a`],PAIR;;
searcht 5 [`sol0`];;GSYM Tame_general.sol0_over_pi_EQ_const1
searcht 5 [`&0 < pi`],PI_POS;

searcht 4 [` (x * y) pow n`];;REAL_POW_MUL;;
searcht 10 [`x * inv y`];;


searcht 10 [`sqrt8`;`sqrt2`];;
searcht 5 [`sqrt ( x pow 2)`];;
searcht 5 [`sqrt (x ) * sqrt(a)`];;


searcht 10 [`&0 <= sqrt (x)`],SQRT_POS_LE;;;

search [name "TAYLOR"];;
search [name "GRAD"];;

(search [`x pow 2 <= y pow 2 `],Collect_gome.POW2_COND);;
searcht 10 [`(sqrt x) pow 2`],Collect_geom.POW2_COND;;
searcht 10 [`&0 <= a pow 2`],Collect_geom.REAL_LE_SQUARE_POW;;
searcht 10 [`abs b pow 2 = b pow 2`];;
searcht 10 [`x <=y /\ y <= z ==> P`],REAL_LE_TRANS;;;
searcht 10 [`&0 <= sqrt x`],Collect_geom.REAL_LE_SQUARE_POW;;
(search [`x pow 2 <= y pow 2 `],SQRT_POW2);;
searcht 10 [`x pow 2 = x * x`], REAL_POW_2;;

searcht 10 [`x pow 2 <= y pow 2`];;
searcht 10 [`sqrt(y pow 2)`];;


search[`sqrt(a*b) = sqrt a * sqrt b`],SQRT_MUL;;
search[`sqrt(a pow 2 * b)`];;
search[`sqrt(x pow 2)`],POW_2_SQRT_ABS;;


search[`acs`;`atn`],ACS_ATN;;
search[`atn`;`pi`],ATN_1;;
search[`pi`;`atn`],ATN_1;;
search[`interval_eps (float a b) r e`];;
search[`real_of_int (& n)`];;
search[`twopow (-- (int_of_num n))`],Float.TWOPOW_NEG;;
search[`x:1`];;
search_thml (term_match []) [(concl Hypermap.lemma_mAdd)] (map (fun t -> ("",t)) (definitions()));;
search!definitions
searcht 10 [`pi`;`atn`];;
searcht 10 [`atn`;`halfatn4`];;
search[`acs`;`atn`];;
searcht 10[`atn`;`pi`];;
searcht 10 [`ssqrt`];;
search[`!i. 1 <= i /\ i <= 3 ==> vec 1$ i = &1`];;
searcht[`x <= y /\ y <= z ==> x <= z`];;
search[`atn`];;
search[`cos`];;
search[`sin`;`FACT`];; 
search [`sum (:num)`];;
search[`has_real_derivative`;`atn`];; (* HAS_REAL_DERIVATIVE_ATN *)
search[`binom`];;
search[`has_real_derivative`;`Re`];;  (* HAS_REAL_COMPLEX_DERIVATIVE_AT *)
search[`has_complex_derivative`];;
search[`atn`;`catn`];; (* yes *)
search[`dihX3`];;
search[`sin x = t`];;
search[`mcell_set`];;
search[`dihV a b c d = dihV a' b' c' d'`];;
search[`facet_of`];;
searcht 5[`aff_ge`];;
searcht 5[`sum X f = &0`], SUM_TRIV_NUMSEG;;
search [`sum (i..SUC j) f`], CONJUNCT2 SUM_CLAUSES_NUMSEG;;
search [`sum (i..i)`],SUM_SING_NUMSEG;;
searcht 5[`sum (i..j) f`;`i< j`];;
search[`sum (SUC i..j) f`];;
search[`fan80 (x,V,E) = y`];;
search[`fan81 (x,V,E) = y`];;
search[`let x = (y:A) in (z:B)`];;
search[`let x = y in z`];;
search[name "CZZH"];;  
fst(List.nth (search[full `sqrt(&x) = y`]) 0);;
search[full `!x y. x + y = y + x`];;
search[`sqrt`;omit `x:num`];;
search[];;
search[exactly `a + b = b + a`];;
search[full `!a b. a + b = b + a`];;
search[`x:hypermap`];;
search[`sqrt(&x) = y`];;

search [`sum (i..SUC j)`];;
Searching.suggest();;
search[`abs(atn u - &16 *x)`];;
search[`abs(x + y) <= abs(x) + abs y`],REAL_ABS_TRIANGLE;;

help_grep "mk_n";;
help "instantiate";;
help "INSTANTIATE";;
help_grep "TERM";;
help "AP_TERM";;
help_grep "DISCH";;
help "UNDISCH";;
help_grep "conj";;
help_grep "mk.*eq";;
help_grep "ty.*var";;
help_grep "ty";;
help_grep "strip";;
help_grep "_TAC$";;
help_grep "^ASM";;
help "PROVE_HYP";;
help "EQ_MP";;
help "AP_TERM";;
Searching.help_grep "AP_";;
help "striplist";;
help"MK_CONJ";;
help "META_EXISTS_TAC";;
help "UNIFY_ACCEPT_TAC";;
help_grep "PURE_";;
help "BETA_CONV";;
help_grep "ARITH";;


(*
g `(P:num-> bool) ( @ t. t >0)`;;
g `(a /\ b) ==> c`;;
g `(a \/ b) ==> c`;;
g `(?x . t) ==> c`;;
g `(f:A->B) = g`;;
g `(x:A->B) = g`;;
g `sqrt(&3) < sqrt(&4)`;;
g `?x. f x`;;
DISCH_TAC;
s 0;;

eh 1;;
eh 0;;
eh 0;;

eh 1;;
suggest();;
g `?x. f x`;;
g `(f:A->B)  =g`;;
*)


(*


termination tactics MESON, REAL_ARITH, SET_TAC, ARITH_TAC;;
REAL_FIELD, REAL_RING, SIMPLE_COMPLEX_ARITH_TAC;
 
 REAL_LET_TRANS;;
FORALL_PAIR_THM;;
REWRITE_TAC[FORALL_PAIR_THM];;
 EXISTS_PAIRED_THM;;
REWRITE_TAC[GSYM EXISTS_PAIRED_THM] ;;
*)


(* IMP_RES_THEN  forward implications of assumption list *)
(* MATCH_ACCEPT_TAC goal is instance of supplied theorem 
    PATH_CONV, find_path, follow_path
    PAT_CONV  (can be used on swapping quantifiers! ) 
  POP_ASSUM, POP_ASSUM_LIST
  REPLICATE_TAC n GEN_TAC
  RULE_ASSUM_TAC (maps an inference rule over assumption list)
     RULE_ASSUM_TAC (TRY (CHOOSE_))
  SUBST1_TAC, SUBST_ALL_TAC.
   *)

(*
NAMED ASSUMPTIONS 
*)

(*
theorem usage.
rewrites, simplifications, introductions, definitions,
assume ispecl,
*)

(*
amplifications,
curtailments,
*)

(*
terminators.
*)

(*
quants.
*)

(searcht 5 [`x pow (a + y) = x pow a * x pow y`],REAL_POW_ADD);;
(searcht 5 [`x pow 1`],REAL_POW_1);;
(searcht 5 [`x pow 0`],(CONJUNCT1 real_pow);;

(* some searches that came up in practice. *)

Searching.suggest();;
search[`atn has_real_derivative z`];;
searcht 10[name "WITHIN";`atreal`;`has_real_derivative`],"HAS_REAL_DERIVATIVE_ATREAL_WITHIN;
searcht 3[name "MVT";`has_real_derivative`],REAL_MVT_VERY_SIMPLE;;
searcht 5 [`inv (x * y ) = inv (x ) * inv (y)`],REAL_INV_MUL;;
searcht 5 [`z pow (a + b) = z pow a * z pow b`],REAL_POW_ADD;;
searcht 5 [`(z pow a) pow b = z pow (a * b)`];;
searcht 8 [`halfatn`],halfatn_bounds_abs;;
searcht 8 [`atn(halfatn x)`];;
halfatn_half;
searcht 8 [`&0 <= abs(x)`],REAL_ABS_POS;;
searcht 8 [`inv (x pow k)`],REAL_INV_POW;;
search[`x pow k <= y pow k`],Real_ext.REAL_PROP_LE_POW;
search[`&0 <= x pow 2`];;
search[`inv x <= inv y`];REAL_LE_INV2;;
search[`&0 <= abs(x)`],REAL_ABS_POS;;
search[`abs(inv x)`;`inv(abs x)`],REAL_ABS_INV;;
search[`abs(x * y) = abs(x) * abs y`],REAL_ABS_MUL;;
search[`x * y <= x * z`],REAL_LE_LMUL;;




(
searcht 5 [`EVEN`;`ODD`],NOT_EVEN;;
searcht 5 [`~(?x. P)`],NOT_EXISTS_THM;;
searcht 10 [`(=) (a..b)`],numseg;;
searcht 3[`sum (IMAGE f X)`],SUM_IMAGE;;
searcht 3[`sum`;`SUBSET`;`&0`],SUM_SUPERSET;;
search[`m/m = &1`],REAL_DIV_REFL;;
search [`&x = &y`;`(x:num) = y`],REAL_OF_NUM_EQ;;
searcht 4 [`& (x * y)`;  `& x * & y`],REAL_OF_NUM_MUL;;
searcht 4 [`ODD`;`2 * k`], ODD_EXISTS;;
searcht 4 [`EVEN`;`ODD`],NOT_EVEN;;
search[`norm (Cx x)`],COMPLEX_NORM_CX;;
search[`Cx x pow i`],CX_POW;;
search[`Cx a - Cx b`],CX_SUB;;
search[`Cx (x) * Cx (y)`],CX_MUL;;
search[`Cx(x)/Cx(y)`],CX_DIV;;
searcht 5 [`f (if x then y else z)`;`(if x then f y else f z)`];; "not found"
search[`Im (Cx x)`];;
search[`catn`;`atn`],GSYM CX_ATN;;
search[`taylor_coeff_catn`;`DIV`],taylor_coeff0;;
(searcht 10 [`Im z = &0`;`Cx`],"not found" (Im z = &0 <=> (?x. z = Cx(x))));;
search[`Im (Cx x) = &0`],IM_CX;;
search[`(x:num) > y <=> y < x`],GT;;
search [`0 < FACT n`],FACT_LT;;
search[`(&x = &y) = (x = y)`],REAL_OF_NUM_EQ;;
(search[`((a:real) * b /a = b)`],REAL_DIV_LMUL);
(search[`taylor_coeff_catn 0`],taylor_coeff_catn0);;
search[`taylor_coeff_catn`;`has_complex_derivative`];;

--  hard one to find.  (at x) (at x within y) 
([`at x within y`,`has_complex_derivative`],HAS_COMPLEX_DERIVATIVE_AT_WITHIN);
(search[`Im ( v % x )`],IM_CMUL);
(`Im (x + y)`,IM_ADD);
(`&1 pow n`,REAL_POW_ONE);
(`abs( -- x)`,REAL_ABS_NEG);
(`abs(&n)`,REAL_ABS_NUM);
[
(`norm((a:real^A)  + b) <= norm (a) + norm(b)`,"NORM_TRIANGLE",NORM_TRIANGLE);;
];;

MATCH_MPlist:
[
(`((a:real) <= c ) /\ (b <= d) ==> (a + b <= c + d)`,"REAL_LE_ADD2",REAL_LE_ADD2);
];;
num_CASES;;
search[`norm(a-b)`;`dist`];;
search[`0 <= FACT n`];;
search[`norm(inv(a))`];;
search[`&a <= &b`;`(a:num) <= (b:num)`];;
search[`norm (a * b) = norm (a) * norm (b)`];;
search[`norm ii`];;
search[`norm (z pow k)`];;
search[`norm (Cx a)`];;
search[`norm(inv z)`];;
COMPLEX_NORM_POW;;
COMPLEX_NORM_INV;;
search [`(z:real) pow (a + b)`];;
search[`z pow (a + b)`];;
search[`EVEN`;`2*m`];;
search[`atn (&0)`];;
search[`catn`;`atn`];;
search[`EVEN`;`ODD`];;
search[`Cx(&1) pow n`];;
search[`Cx (a *  b)`];;
search[`z pow 0`];;

search[`vsum`;`sum`;`Cx`],VSUM_CX_NUMSEG;;
VSUM_CX_NUMSEG;;
search[`has_complex_derivative`;`has_real_derivative`];;
COMPLEX_TAYLOR;;
HAS_COMPLEX_REAL_DERIVATIVE_AT;;

([`vsum`;`sum`;`Cx`],VSUM_CX_NUMSEG);;
([`vsum:(num->bool) -> (num->complex)->complex`;`sum`],VSUM_CX_NUMSEG);;

type_of `vsum`;;

(* counting_spheres *)


(*
PRESERVES_NORM_INJECTIVE;;
MEASURABLE_LINEAR_IMAGE_EQ;;
RADIAL_NORM_LINEAR_INVARIANT;;
linear_inter_normball;;
search [`solvec0`];;
searcht 10 [`radial`];;
Marchal_cells_2.RADIAL_VS_RADIAL_NORM;;
searcht 1 [`radial_norm`];;
searcht 0 [`linear`;`radial_norm`];;
MEASURABLE_LINEAR_IMAGE_EQ;;
searcht 15 [`measurable`;`linear`];;
Vol1.sol;;
searcht 15  [`sol`];;
searcht 10 [`measurable (a INTER b)`];;
*)


(*
Vol1.sol;;
sol0_linear_r;;
linear_inter_normball;;
MEASURE_LINEAR_IMAGE_SAME;;
search[`vol`;`measure`];;
Marchal_cells_2.RADIAL_VS_RADIAL_NORM;;
search[`linear`;`measurable`];;
Vol1.sol;;
search[`radial_norm`];;
sol;;
SUBGOAL_TAC;;
SUBGOAL_THEN;;
search[`linear`;`t % f u`];;
type_of_goal ();;
help "apropos_types";;
PRESERVES_NORM_INJECTIVE;;
searcht 15 [`norm u = norm v`;`(f x = f  y) ==> (x = y)`];;
searcht 5 [`<=>`;`(A ==> b) /\ (b ==> A)`];;
srch[`dist`;`norm`];;
ball;;
srch[`ball`];;
srch[`X SUBSET ball(u,r)`];;
srch[`vec 0 + x`];;
srch;;
srch [`IMAGE f x SUBSET IMAGE f t`];;
srch [`vec 0 + x`];;
type_of `radial_norm`;;
*)

(* Work in progress 

def_of_regexp "radial$";;
def_of_regexp "radial_norm";;
def_of_regexp "radial$";;
srch [`eventually_radial`];;
srch [`radial_norm`];;
more();;
srch [`normball`;`ball`];;
search [`sol`];; 
Vol1.sol;;
type_of `sol`;;
type_of_thm LINEAR_CMUL;;
type_of_goal();;
linear;;
srch [`f (t % u)`;`linear`];;
help "ISPECL";;
 RELATIVE_INTERIOR_INJECTIVE_LINEAR_IMAGE;;
srch [`relative_interior (IMAGE f c)`];;
Polyhedron.fchanged;;
search_thml (term_match []) [`sol`] (map (fun s -> ("",s)) (!invariant_under_linear));;
srch [`fchanged`];;

*)

(*
add_linear_invariants;;
*)

(* add_linear_invariants [FCHANGED_LINEAR_INVARIANT ; LINEAR_0;RCONE_LINEAR_INVARIANT ];; *)




(*
searcht 15 [`rcone_gt`];;
more();;
def_of_regexp "rconesgn";;
help_grep "without";;
searcht 5 [`dropout`];;
searcht 5 [`azim`;`Arg`];;
type_of `hypermap_of_fanx`;;
def_of_regexp "wedge";;
def_of_regexp "cyclic_set";;
search [`wedge_ge`;];;
search [`azim v1 v2 x y + azim v1 v2 y z`;name "sum"];;
search [`wedge_ge`];;
search [`cwedge`];;
search [`cw_dart_fan`];;
search [`cwedge`];;
search [`fan`];;
search [`FAN`];;
*)

(* a polyhedral bound *)
