
(* PROJECT BUILD *)


(* USEFUL CONSTRUCTS *)

let report s =
  Format.print_string s; Format.print_newline();;

let scriptfile = ref "";;


let outlog = ref "/Users/thomashales/Dropbox/thacklog.hl";;
let errlog = ref "/Users/thomashales/Dropbox/thackerrory.hl";;
let sleep = ref (6);;
let emsg = ref "/";;
let msg = ref ".";;
scriptfile;;

let doubleout fl s = 
      let _ =       report s in
      let _ = Parse_ineq.output_filestring fl s in
	();;

doubleout !errlog "err";;
doubleout !outlog "ok";;

let rec loop () = 
  let _ = try ( loadt (!scriptfile)) 
  with _ -> (doubleout (!errlog) (!emsg)) in
  let _ = Unix.sleep(!sleep) in
  let _ = doubleout (!outlog) (!msg) in
    loop();;


loadt (!scriptfile);;
loop();;

g `?(x:A) . f A`

let (EXISTSv_TAC :string -> tactic) = 
   fun s (asl,g) ->
     let (v,_) = dest_binder "?" g in 
     let (_,ty) = dest_var v in
       EXISTS_TAC (mk_var(s,ty)) (asl,g);;

(* generalize *)

let ( TYPE_VAR :string -> (term -> tactic) -> tactic) = 
    fun s tm_tactic (asl,g) ->
      let (_,r) = dest_comb g in
      let (v,_) = dest_abs r in
      let (_,ty) = dest_var v in
	tm_tactic (mk_var(s,ty)) (asl,g);;

TYPE_VAR "x" EXISTS_TAC;
;;
Format.print_flush();;
FINITE_EMPTY;;

searcht 10 [`eulerA_hexall_x`];;

Sphere.num_combo1;;

(*
process_to_string "cat qed_log.txt | sed  's/^.*ineq./\"/' | sed 's/., secs.*$/\";/'  "

cat qed_log.txt | sed  's/^.*ineq./"/' | sed 's/., secs.*$/";/' | sort -u | wc  

(*
let _ = Sys.command("cat "^flyspeck_dir^"/../interval_code/qed_log.txt");;
*)
*)


let ee () = 
  let b = (false or (let _ = Sys.command("date") in failwith "h")) in b;;


suggest();;

EXISTSv_TAC "y";

dest_binder "?" (`?(x:A). f A`);;

(*

let searchl = sortlength_thml o search;;
let take = Lib_ext.take;;
let searcht r = take 0 5 (searchl r);;
let searchtake i j r = take i j (searchl r);;

*)
term_match;;
INSTANTIATE;;
  open Searching;;

definitions();;
State_manager.neutralize_state();;
let vv = (eval("1+1")) + 3;;
let vv = (eval("REFL `T`"));;
concl vv;;

prefixes();;
rev(infixes());;
binders();;
unparse_as_infix;;
map (List.nth (infixes())) (95--131);;
unparse_as_binder "!";;
binders();;

sort (<) [`y3:real`;`y2:real`];;

Sphere.all_forall `(y1 + y3 + y2  = y0 + y7)`;;

REAL_FIELD `x > &0 /\ y > &0 ==> x * y > &0`;;

find_path ((=) `4`) `(sum (3..4) f)`;;  (* lrr *)

help "MK_CONJ";;
Temp_in.generate_ineq_datum_p;;
List.length !theorems;;

let kill_process n = Sys.command (Printf.sprintf "sudo kill -9 %d" n);;

search [`min`];;
type_of `max`;;

help_grep "conj";;
help "list_mk_conj";;
 end_itlist;;

FROZEN_REWRITE_TAC [REAL_ARITH `b + d = d - (--b)`];;

Print_types.goal_types();;
Print_types.print_term_types `#2`;;
Print_types.print_thm_types (REFL `1`);;


edge_flat_x;;
Print_types.print_term_types 
`dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x2 x4 ((&2 * h0) pow 2) x14 x12 - dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0)    x23 x12)`;;
(*
(* parsing printing *)
let pterm = Print_types.print_term_types;;
let tterm = Print_types.print_thm_types;;

#install_printer print_qterm;;


#install_printer Goal_printer.print_goal_hashed;;
#install_printer Goal_printer.print_goalstack_hashed;;

#remove_printer Goal_printer.print_goal_hashed;;
#remove_printer Goal_printer.print_goalstack_hashed;;

#print_length 1000;;
*)

search[`f (x:A) (g (y:A) z) = f (g x y) z`];; (* min, max, + /\, \/ *, compose, monoidal ops,
   APPEND, a - (b + c) = a - b - c /\ a - (b - c) = a - b + c),
    p ==> q ==> r <=> p /\ q ==> r);; *)

find_term  ( can (term_match[ `r a (r y z) = r (r x y) z`])) (concl IMP_IMP);;

filter_pred;;
can (term_match[]);;


constant_of_regexp "at.*[gn]$";;

constant_of_regexp "FILTER";;
searcht 15 [`cos`];;
def_of_string "FILTER";;

def_of_string "fan";;
conjuncts `!a b c. (u /\ v /\ (!c. w /\ r) /\ (!x y. r2 /\ r3))`;;


help "dest_forall";;
List.nth !theorems 0;;

help_grep ".*TAC$";;

INFINITE_DIFF_FINITE;;
search[`INFINITE`;`DIFF`];;

Tame_general.sol0_over_pi_EQ_const1;;
Tame_general.sol0_POS;;
def_of_string "dih_x";;
search[name "SQRT_MUL_POW_2"];;

search[`sqrt x = sqrt y`];;
search[`sqrt x = y`;`x = y pow 2`];;
search[`sqrt (x * y) = sqrt x * sqrt y`];;
search[`&0 <= a*a `];;
searcht 5 [`x <= y`;`y >= x`];;
search[`sqrt x * sqrt x`];;
search [`&0 pow 2`];;

type_of `bn_facesAt`;;


flyspeck_needs "hypermap/bauer_nipkow.hl";;
search[name "ACS_2"];;


Format.set_max_boxes 100;;
let tt = hol_of_smalllist (1--300);;
string_of_my_term tt;;



let hel i = help (List.nth  tacsss i );;

hel 1;;

constant_of_regexp "sol";;

apropos;;
suggest;;


(* get all word counts in HOL LIGHT and FLYSPECK *)

let tcs = word_counts();;

let tacsss =  (help_grep "TAC$");;

let stactics = sort (fun (_,a) (_,b) -> (a > b)) (filter (fun (a,_) -> mem a  tacsss) tcs);;

(* word counts of theorems *)

let alphatheorem = sort (<) (map fst !theorems);;

let rec stheorems buff ats bts = match (ats,bts) with
  | ([],_) -> buff
  | (_,[]) -> buff
  | (a::atss,(b,n)::btss) -> if (a=b) then stheorems ((b,n)::buff) atss btss
    else if (a>b) then stheorems buff ats btss else stheorems buff atss bts;;

let st = sort (fun (_,a) (_,b) -> (a > b)) (stheorems [] (alphatheorem) tcs);;


(* quicksilver style search for tactics *)

let unsplit d f = function
  | (x::xs) ->  List.fold_left (fun s t -> s^d^(f t)) (f x) xs
  | [] -> "";;

let recent_search = ref [""];;

let refcount = ref [("",0)];;

let tachy  = 
  let tac = map fst stactics in
  fun s ->
  let re = Str.regexp_case_fold (unsplit ".*" I (   explode s)) in
      filter (fun u-> Str.string_match re u 0) tac;;

tachy "rt";;

(* to get tacticals as well *)
(* grep "TYPE.*tactic" -i *.doc -l | sed 's/.doc//g' *)

tachy "";;
tachy "bool";;

help "SUBST1_TAC";;

let typesss ss = 
  let split =   Str.split (Str.regexp "\n") in
  let cmd s = process_to_string ("(cd "  ^s^  "; grep TYPE "^ss^".doc | sed 's/TYPE[^{]*//g' )") in
  List.flatten (map ( split o cmd ) (!helpdirs));;

help "SUBST1_TAC";;

(*
let MP_TAC_BAK = MP_TAC;;
let MATCH_MP_TAC_BAK = MATCH_MP_TAC;;
*)


let mp_theorems = ref[];;
let incr1 thm = (mp_theorems:= thm::!mp_theorems);;

let MP_TAC_COUNT t  = 
  let _ = incr1 t in MP_TAC_BAK t;;

let MP_TAC = MP_TAC_COUNT ;;

let MATCH_MP_TAC_COUNT t  = 
  let _ = incr1 t in MATCH_MP_TAC_BAK t;;

let MATCH_MP_TAC = MATCH_MP_TAC_COUNT ;;
let MATCH_MP_TAC = MATCH_MP_TAC_BAK ;;


reneeds "trigonometry/trig2.hl";;

let thm_hash = Hashtbl.create 1000;;
map (fun (x,y) -> Hashtbl.add thm_hash y x) (!theorems);;

let find_name th = 
  try (Hashtbl.find thm_hash th) with Not_found -> "ANONYMOUS";;

PI_POS;;
List.length !mp_theorems;;
 filter (fun s -> not (s="ANONYMOUS"))  (map find_name (!mp_theorems));;

SIN_COS_SQRT;; 
COS_INJ_PI;;
REAL_LT_MUL;;
HULL_INC;;
Real_ext.REAL_PROP_NN_SQRT;;
stactics;;
help "ASM_CASES_TAC";;
help "BOOL_CASES_TAC";;


mk_binop `(+):(num->num->num)` in
end_itlist plus (map mk_small_numeral (1--200));;

end_itlist (+) (1--200);;

1.0/. 0.0;;

1.0e-324;;

float_of_string "3";;

List.fold_left;;
