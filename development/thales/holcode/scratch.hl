(* see localbuild.hl in this directory for build info *)

let rec list_sub x tl = match x with
  | Var _ -> x::tl
  | Const _ -> x::tl
  | Abs (u,v) -> list_sub u [] @ list_sub v [] @ (x::tl)
  | Comb (f,g) -> list_sub f [] @ list_sub g [] @ (x::tl);;

list_sub `!x. h f g` [];;

1::[2];;
[2;3] @ [4;5];;

(* PROJECT BUILD *)

map (fun t-> (t.id,t.tags)) ((map (hd o Ineq.getexact) thackmac));;

Sphere.vol2f;;
Sphere.lmfun;;

(*
process and exec: QITNPEA 4003532128 d split(0/2)
{6.3492831131897222718,5.5556596606118802129,5.5429987906606363879,4.4099999999999965894,6.0688758252356631573,6.0688758251152385981} {6.3492831133208165184,5.5556596607323038839,5.5429987907810609471,4.4100000002089627671,6.0688758253560868283,6.0688758252356631573}  recursion limit exceeded
recursion depth is currently at 200
count = 5
lower 0 -0.057136015014915685073
upper 0 -0.057094380383945160518
lower 1 0.13999999461405998602
upper 1 0.13999999903925861022
lower 2 9.6074151750054606452e-10
upper 2 5.3859398851463914457e-09
lower 3 -3.588574023452593835e-09
upper 3 8.2351001236270299703e-10
lower 4 0.13999999917648997538
upper 4 0.14000000358857400684

process and exec: QITNPEA 4003532128 d split(1/2);
{7.0267406398425364955,4.6726690737083540483,4.6569761898003623202,4.4099999999999965894,6.0688758251152385981,6.0688758251152385981} {7.026740640000008753,4.6726690738287786075,4.6569761899207868794,4.4100000002089627671,6.0688758252356631573,6.0688758253560868283}  recursion limit exceeded
recursion depth is currently at 200
count = 5
terminate called after throwing an instance of 'unstable'
Exception: Failure "interval execution error case fail: 1".


*)

Sphere.taum_x;;
Sphere.const1;;
Sphere.edge_flat;;
search[`edge_flat`];;
Enclosed_def.enclosed;;
search[`enclosed`];;
enclosed;;


let edge_flat2_alt = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. ( &0 <= x1 /\ &0 <= x2 /\ &0 <= x3  /\ &0 <= x5 /\ &0 <= x6) ==> edge_flat2_x x1 x2 x3 x5 x6 = (-bx + sqrt(ups_x x1 x3 x5 * ups_x x1 x2 x6)/(&2 * x1)`,
  (* {{{ proof *)
  [
  #
  ]);;
  (* }}} *)


Sphere.gamma23f_red_03;;
Sphere.vol2r;;
Sphere.vol2f;;

(* USEFUL CONSTRUCTS *)

g `?(x:A) . f A`

let (EXISTSv_TAC :string -> tactic) = 
   fun s (asl,g) ->
     let (v,_) = dest_binder "?" g in 
     let (_,ty) = dest_var v in
       EXISTS_TAC (mk_var(s,ty)) (asl,g);;

(* generalize *)

let ( TYPE_VAR :string -> (term -> tactic) -> tactic) = 
    fun s tm_tactic (asl,g) ->
      let (_,r) = dest_comb g in
      let (v,_) = dest_abs r in
      let (_,ty) = dest_var v in
	tm_tactic (mk_var(s,ty)) (asl,g);;

TYPE_VAR "x" EXISTS_TAC;
;;
Format.print_flush();;
FINITE_EMPTY;;

let ee () = 
  let b = (false or (let _ = Sys.command("date") in failwith "h")) in b;;


Printf.sprintf;;
unzip;;
(* test case *)
let idq0 = hd(Ineq.getexact "4240815464");;
let s = idq0.id;;
let t = snd(top_goal());;



help "term_match";;

let mk_cppq_proc (t,s) = 
  let svn = (quoted(svn_version())) in
  let ineq_id = quoted s in
  let c = map cpp_string_of_term in
  let f (x,y,(r,s,u)) = (c x,c y,c r,c s,u) in
  let (a,b,is) = dest_nonlin t in
  let is' = partition_quad_term is in
  let (aas,bbs,iiA,iiB) = f  (dest_nonlin t) in
  let len = List.length iis in
  let jaas = join_comma aas in
  let jbbs = join_comma bbs in
  cppq_template_gen svn ineq_id jaas jbbs (cpp_template_t iis) 
    len (cppq_template_Fc len) sharp  checkderiv len;;

ineq_square2;;




gamma23f_126_03;;
Sphere.arclength_y1;;
map (fun t-> ee()) (0--50);;

suggest();;
dest_comb (snd(top_realgoal()));;


EXISTSv_TAC "y";

dest_binder "?" (`?(x:A). f A`);;

(*

let searchl = sortlength_thml o search;;
let take = Lib_ext.take;;
let searcht r = take 0 5 (searchl r);;
let searchtake i j r = take i j (searchl r);;

*)
Sphere.flat_term;;
taum_template_B_x_alt;;
Sphere.flat_term;;
process_to_string ("svn info "^flyspeck_dir^ " | grep Revision");;
Glpk_link.solve_counter;;
term_match;;
INSTANTIATE;;
  open Searching;;

definitions();;
State_manager.neutralize_state();;
let vv = (eval("1+1")) + 3;;
let vv = (eval("REFL `T`"));;
concl vv;;

prefixes();;
rev(infixes());;
binders();;
unparse_as_infix;;
map (List.nth (infixes())) (95--131);;
unparse_as_binder "!";;
binders();;

sort (<) [`y3:real`;`y2:real`];;

Sphere.all_forall `(y1 + y3 + y2  = y0 + y7)`;;

REAL_FIELD `x > &0 /\ y > &0 ==> x * y > &0`;;

find_path ((=) `4`) `(sum (3..4) f)`;;  (* lrr *)

help "MK_CONJ";;
Temp_in.generate_ineq_datum_p;;
List.length !theorems;;

let kill_process n = Sys.command (Printf.sprintf "sudo kill -9 %d" n);;

(* let LOCAL_REWRITE_TAC t = ASSUME_TAC t THEN POP_ASSUM (fun t-> REWRITE_TAC[t]);; *)

help_grep "conj";;
help "list_mk_conj";;
 end_itlist;;



let test = prove_by_refinement(
  `d + b = c`,
  (* {{{ proof *)
  [
  FROZEN_REWRITE_TAC [REAL_ARITH `b + d = d - (--b)`];
  FROZEN_REWRITE_TAC [REAL_ARITH `d + b = b - (--d)`];
  ASSUME_TAC (REAL_ARITH `b + d = d - (-- b)`);
  ASM_REWRITE_TAC[];
  SUBGOAL_THEN `b + d = d - (--b)` (fun t-> REWRITE_TAC[t]);
  LOCAL_REWRITE_TAC (REAL_ARITH `b + d = d+b`);
  ]);;
  (* }}} *)



Print_types.goal_types();;
Print_types.print_term_types `#2`;;
Print_types.print_thm_types (REFL `1`);;


(*
(* parsing printing *)
let pterm = Print_types.print_term_types;;
let tterm = Print_types.print_thm_types;;

#install_printer print_qterm;;


#install_printer Goal_printer.print_goal_hashed;;
#install_printer Goal_printer.print_goalstack_hashed;;

#remove_printer Goal_printer.print_goal_hashed;;
#remove_printer Goal_printer.print_goalstack_hashed;;

#print_length 1000;;
*)

