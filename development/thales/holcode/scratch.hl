(* see localbuild.hl in this directory for build info *)

(* PROJECT BUILD *)

map (fun t-> (t.id,t.tags)) ((map (hd o Ineq.getexact) thackmac));;

Sphere.vol2f;;
Sphere.lmfun;;

(* USEFUL CONSTRUCTS *)

g `?(x:A) . f A`

let (EXISTSv_TAC :string -> tactic) = 
   fun s (asl,g) ->
     let (v,_) = dest_binder "?" g in 
     let (_,ty) = dest_var v in
       EXISTS_TAC (mk_var(s,ty)) (asl,g);;

(* generalize *)

let ( TYPE_VAR :string -> (term -> tactic) -> tactic) = 
    fun s tm_tactic (asl,g) ->
      let (_,r) = dest_comb g in
      let (v,_) = dest_abs r in
      let (_,ty) = dest_var v in
	tm_tactic (mk_var(s,ty)) (asl,g);;

TYPE_VAR "x" EXISTS_TAC;
;;

FINITE_EMPTY;;
help_grep "CASES";;

suggest();;
dest_comb (snd(top_realgoal()));;


EXISTSv_TAC "y";

dest_binder "?" (`?(x:A). f A`);;

(*

let searchl = sortlength_thml o search;;
let take = Lib_ext.take;;
let searcht r = take 0 5 (searchl r);;
let searchtake i j r = take i j (searchl r);;

*)

process_to_string ("svn info "^flyspeck_dir^ " | grep Revision");;
Glpk_link.solve_counter;;
term_match;;
INSTANTIATE;;
  open Searching;;

definitions();;
State_manager.neutralize_state();;
let vv = (eval("1+1")) + 3;;
let vv = (eval("REFL `T`"));;
concl vv;;

prefixes();;
rev(infixes());;
binders();;
unparse_as_infix;;
map (List.nth (infixes())) (95--131);;
unparse_as_binder "!";;
binders();;

sort (<) [`y3:real`;`y2:real`];;

Sphere.all_forall `(y1 + y3 + y2  = y0 + y7)`;;

REAL_FIELD `x > &0 /\ y > &0 ==> x * y > &0`;;

find_path ((=) `4`) `(sum (3..4) f)`;;  (* lrr *)

help "MK_CONJ";;
Temp_in.generate_ineq_datum_p;;
List.length !theorems;;

let kill_process n = Sys.command (Printf.sprintf "sudo kill -9 %d" n);;

(* let LOCAL_REWRITE_TAC t = ASSUME_TAC t THEN POP_ASSUM (fun t-> REWRITE_TAC[t]);; *)

help_grep "conj";;
help "list_mk_conj";;
 end_itlist;;



let test = prove_by_refinement(
  `d + b = c`,
  (* {{{ proof *)
  [
  FROZEN_REWRITE_TAC [REAL_ARITH `b + d = d - (--b)`];
  FROZEN_REWRITE_TAC [REAL_ARITH `d + b = b - (--d)`];
  ASSUME_TAC (REAL_ARITH `b + d = d - (-- b)`);
  ASM_REWRITE_TAC[];
  SUBGOAL_THEN `b + d = d - (--b)` (fun t-> REWRITE_TAC[t]);
  LOCAL_REWRITE_TAC (REAL_ARITH `b + d = d+b`);
  ]);;
  (* }}} *)



Print_types.goal_types();;
Print_types.print_term_types `#2`;;
Print_types.print_thm_types (REFL `1`);;


(*
(* parsing printing *)
let pterm = Print_types.print_term_types;;
let tterm = Print_types.print_thm_types;;

#install_printer print_qterm;;


#install_printer Goal_printer.print_goal_hashed;;
#install_printer Goal_printer.print_goalstack_hashed;;

#remove_printer Goal_printer.print_goal_hashed;;
#remove_printer Goal_printer.print_goalstack_hashed;;

#print_length 1000;;
*)

