
new_type("universe",1);;

let universe_axiom = `(:A) <_c (:A universe) /\
   (!s:B->bool. s <_c (:A universe) ==> 
     { t | t SUBSET s } <_c (:A universe))`;;

let category =  
  `category_1 (object:A->bool,arrow:B->bool,domain:B->A,codomain:B->A,identity:A->B,composite:B->B->B) = 
    ((!a. arrow a ==> object (domain a)) /\
    (!a. arrow a ==> object (codomain a)) /\
       (!b. object b ==> arrow (identity b)) /\
    // composition exists
      (!a a'. arrow a /\ arrow a' /\ (domain a' = codomain a) ==> 
	 (arrow (composite a' a) /\ (domain (composite a' a) = domain a)
          /\ (codomain (composite a' a) = codomain a'))) /\
    // composition is associative
    (!a a' a''. arrow a /\ arrow a' /\ arrow a'' /\ 
       ( codomain a = domain a' ) /\
       (codomain a'' = domain a') ==> 
       (composite (composite a'' a') a = composite a'' (composite  a' a)))
    /\ // identity
    (!a b. arrow a /\ object b /\ (domain a = b) ==> 
       (composite a (identity b) = a)) /\
    (!a b. arrow a /\ object b /\ (codomain a = b) ==> 
       (composite (identity b) a = a))
)`;;

let category = 
  `category_2 (arrow:B ->A->A->bool,identity:A->B,composite:B->B->B) =
    ((arrow f a b /\ arrow f a' b' ==> (a = a') /\ (b = b')) /\
      (!f a b g b c. arrow f a b /\ arrow g b c ==> 
	 arrow (composite g f) a c) /\
      (!f g h a b c d. arrow f a b /\ arrow g b c /\ arrow h c d ==>
	 (composite h (composite g f) = composite (composite h g) f)) /\
      (!f a b. arrow f a b ==> (arrow (identity b) b b) /\
	 arrow (identity a) a a) /\
      (!f a b. arrow f a b ==> (composite (identity b) f = f)) /\
      (!f a b. arrow f a b ==> (composite  f (identity a) = f)) )`;;

let domain = 
  `domain arrow f = @a. (?b. arrow f a b)`;;

let codomain = `codomain arrow f  = @b. (?a. arrow f a b)`;;

let obj = `obj arrow = { a | ? f b. arrow f a b }`;;

let obj_1 = `obj arrow = { b | ? f a. arrow f a b }`;;

      


(* PROJECT BUILD *)


(* USEFUL CONSTRUCTS *)

let report s =
  Format.print_string s; Format.print_newline();;

let scriptfile = ref "";;


let outlog = ref "/Users/thomashales/Dropbox/thacklog.hl";;
let errlog = ref "/Users/thomashales/Dropbox/thackerrory.hl";;
let sleep = ref (6);;
let emsg = ref "/";;
let msg = ref ".";;
scriptfile;;

let doubleout fl s = 
      let _ =       report s in
      let _ = Parse_ineq.output_string fl s in
	();;

doubleout !errlog "err";;
doubleout !outlog "ok";;

let rec loop () = 
  let _ = try ( loadt (!scriptfile)) 
  with _ -> (doubleout (!errlog) (!emsg)) in
  let _ = Unix.sleep(!sleep) in
  let _ = doubleout (!outlog) (!msg) in
    loop();;


loadt (!scriptfile);;
loop();;

g `?(x:A) . f A`

let (EXISTSv_TAC :string -> tactic) = 
   fun s (asl,g) ->
     let (v,_) = dest_binder "?" g in 
     let (_,ty) = dest_var v in
       EXISTS_TAC (mk_var(s,ty)) (asl,g);;

(* generalize *)

let ( TYPE_VAR :string -> (term -> tactic) -> tactic) = 
    fun s tm_tactic (asl,g) ->
      let (_,r) = dest_comb g in
      let (v,_) = dest_abs r in
      let (_,ty) = dest_var v in
	tm_tactic (mk_var(s,ty)) (asl,g);;

TYPE_VAR "x" EXISTS_TAC;
;;
Format.print_flush();;
FINITE_EMPTY;;

searcht 10 [`eulerA_hexall_x`];;

Sphere.num_combo1;;

(*
process_to_string "cat qed_log.txt | sed  's/^.*ineq./\"/' | sed 's/., secs.*$/\";/'  "

cat qed_log.txt | sed  's/^.*ineq./"/' | sed 's/., secs.*$/";/' | sort -u | wc  

(*
let _ = Sys.command("cat "^flyspeck_dir^"/../interval_code/qed_log.txt");;
*)
*)


let ee () = 
  let b = (false or (let _ = Sys.command("date") in failwith "h")) in b;;


suggest();;

EXISTSv_TAC "y";

dest_binder "?" (`?(x:A). f A`);;

(*

let searchl = sortlength_thml o search;;
let take = Lib_ext.take;;
let searcht r = take 0 5 (searchl r);;
let searchtake i j r = take i j (searchl r);;

*)
term_match;;
INSTANTIATE;;
  open Searching;;

definitions();;
State_manager.neutralize_state();;
let vv = (eval("1+1")) + 3;;
let vv = (eval("REFL `T`"));;
concl vv;;

prefixes();;
rev(infixes());;
binders();;
unparse_as_infix;;
map (List.nth (infixes())) (95--131);;
unparse_as_binder "!";;
binders();;

sort (<) [`y3:real`;`y2:real`];;

Sphere.all_forall `(y1 + y3 + y2  = y0 + y7)`;;

REAL_FIELD `x > &0 /\ y > &0 ==> x * y > &0`;;

find_path ((=) `4`) `(sum (3..4) f)`;;  (* lrr *)

help "MK_CONJ";;
Temp_in.generate_ineq_datum_p;;
List.length !theorems;;

let kill_process n = Sys.command (Printf.sprintf "sudo kill -9 %d" n);;

help_grep "conj";;
help "list_mk_conj";;
 end_itlist;;

FROZEN_REWRITE_TAC [REAL_ARITH `b + d = d - (--b)`];;

Print_types.goal_types();;
Print_types.print_term_types `#2`;;
Print_types.print_thm_types (REFL `1`);;


edge_flat_x;;
Print_types.print_term_types 
`dih_hexall_x x14 x12 x23 x1 x2 x3 x4 x5 (x6:real) = 
   dih_x x1 x2 x4 ((&2 * h0) pow 2) x14 x12 - dih_x x1 x3 x4 x5 x14 (edge_flat2_x x2 x1 x3 (&0)    x23 x12)`;;
(*
(* parsing printing *)
let pterm = Print_types.print_term_types;;
let tterm = Print_types.print_thm_types;;

#install_printer print_qterm;;


#install_printer Goal_printer.print_goal_hashed;;
#install_printer Goal_printer.print_goalstack_hashed;;

#remove_printer Goal_printer.print_goal_hashed;;
#remove_printer Goal_printer.print_goalstack_hashed;;

#print_length 1000;;
*)

