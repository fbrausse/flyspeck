(* PROJECT BUILD *)
1;;


(* Desktop init.                                *)
let desktop_init _ = 
  let _ = load_path := 
     "/Users/thomashales/Desktop/googlecode/flyspeck/text_formalization/" :: 
       !load_path in
   reneeds "strictbuild.hl";;

(* #load "unix.cma";; (* dynamic loading not supported *) *)

let open_search =
  let _ = flyspeck_needs "general/tactics.hl" in
  let _ = flyspeck_needs "usr/thales/search_tac.hl" in
    reneeds "usr/thales/search_tac.hl";;

open Searching;;

(* running linear programs *)


(* Desktop source: *)
Lpproc.archiveraw := "/Users/thomashales/Desktop/tame_archive_svn1830.txt";;
flyspeck_needs "../glpk/sphere.ml";;
flyspeck_needs "../glpk/tame_archive/hard_lp.ml";;
flyspeck_needs "../glpk/tame_archive/scaffolding.hl";;

(*
let lpdata = Lpproc.execute();;
let  (tame_bb,feasible_bb,hard_bb,easy_bb,remaining_easy_bb) = lpdata;;
Hard_lp.execute();;
*)

(*let searcht = Searching.searcht;;
let help_grep = Searching.help_grep;; *)


(* laptop/desktop init *)
reneeds "strictbuild.hl";;
build_silent();;
build_and_report();;

flyspeck_needs "usr/thales/localbuild.hl";;

(* END LOCAL BUILD *)


(* START NONLINEAR INEQS *)

reneeds "nonlinear/ineqdata3q1h.hl";;
reneeds "nonlinear/ineq.hl";;
reneeds "nonlinear/parse_ineq.ml";;
reneeds "nonlinear/optimize.hl";;

let ineq = Sphere.ineq;;
let all_forall = Sphere.all_forall;;
split_ineq;;


(*  *)
Sys.command("pwd");;

let finished_cases = 
  let split_sp=  Str.split (Str.regexp "\n") in
  let p = process_to_string ("cat ../../../interval_code/qed_log.txt   "
			     ^"| sed  's/^.*ineq./\"/' | sed 's/., secs.*$/\";/'   "
			     ^"| sed 's/ split.*$//g' | sed 's/\"//g' "
			    ^" | sed 's/;//g' ") in
    Parse_ineq.nub (split_sp p);;
List.length finished_cases;;

let all_cases = 
  Parse_ineq.nub (map (fun t -> t.id) (!Ineq.ineqs));;
List.length  all_cases;;

let unfinished_cases = subtract all_cases finished_cases;;
List.length unfinished_cases;;


flyspeck_needs "../glpk/tame_archive/hard_lp.ml";;
flyspeck_needs "general/sphere.hl";;
reneeds "general/print_types.hl";;
flyspeck_needs "jordan/flyspeck_constants.hl";;
reneeds "jordan/flyspeck_constants.hl";;


flyspeck_needs "packing/ky/vukhacky_tactics.hl";;
flyspeck_needs "packing/ky/beta_pair_thm.hl";;
flyspeck_needs "packing/ky/lemma_negligible.hl";;
flyspeck_needs "packing/ky/RDWKARC.hl";;
search[`radV`];;
flyspeck_needs "packing/ky/EMNWUUS.hl";;

flyspeck_needs "../glpk/tame_archive/hard_lp.ml";;
flyspeck_needs "../glpk/tame_archive/scaffolding.hl";;




let mk_archive file =
  let tame = Glpk_link.strip_archive file in
  map Lpproc.mk_bb tame;;


Sphere.gamma4f;;
Sphere.rad2_y;;
Sphere.rad2_x;;
Parse_ineq.y_of_x_e;;
Sphere.vol_x;;
Sphere.dih6_y;;
gchi1_x;;
gchi;;
dih4_x;;
List.length !Ineq.ineqs;;
Sphere.atn2;;
"string";;
Parse_ineq.trialcount:= 500;;
Parse_ineq.execute_cfsqp  (hd(Ineq.getexact "HJKDESR4-D3"));;

Sphere.gamma4f;;
Sphere.vol4f;;
let kill_process n = Sys.command (Printf.sprintf "sudo kill -9 %d" n);;
searcht 5 [`x pow 2 = x * x`];;
let xspec = SPECL [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`];;

let LOCAL_REWRITE t = ASSUME_TAC t THEN POP_ASSUM (fun t-> REWRITE_TAC[t]);;


let tq1h = Ineq.getprefix "OXLZLEZ 6346351218";;
List.length tq1h;;
List.length (!Ineq.ineqs);;

Parse_ineq.dest_ineq;;
let ineql = map (fun t->  (Parse_ineq.dest_ineq (t.ineq))) !Ineq.ineqs;;
let ineqodd = filter (fun (_,b,_) -> not(List.length b = 6)) ineql;;
let ineq1 = filter(fun (_,b,_) -> List.length b =9) ineql;;
List.length ineq1;;
map (fun (_,b,_) -> List.length b) ineqodd;;
map List.length ineql;;
Sphere.arclength;;
searcht 5 [`acs`;`atn`];;
searcht 5 [`acs`;`asn`];;
it;;
Sphere.vol2r;;
Sphere.marchal_quartic;;
Sphere.taum;;
Sphere.lnazim;;
Sphere.rhazim;;
Sphere.rho;;
Sphere.rhazim;;
Sphere.ly;;
Sphere.const1;;
Sphere.vol4f;;
Sphere.vol_y;;
Sphere.const1;;
Sphere.lfun;;
Sphere.lmfun;;
Sphere.mm1;;
Sphere.mm2;;
Sphere.rhazim2;;
Sphere.sol0;;
Sphere.edge_flat;;

Sphere.vol2r;;
Sphere.vol2f;;
Sphere.mm1;;
Sphere.mm2;;
Sphere.tau0;;
Sphere.marchal_quartic;;
Sphere.hplus;;
searcht 100 [`asn`;`atn`];;
searcht 100 [`rhazim2`];;
searcht 100 [`sol0`];;
Sphere.arclength;;

REAL_FIELD;;
search[`];;
search[`&0 < sol0`];;

Sphere.edge_flat;;
Sphere.flat_term;;
Sphere.tame_table_d;;
List.length !Ineq.ineqs;;
mem;;
let exec i = Parse_ineq.execute_cfsqp (List.nth lpineq i);;
exec 0;;
exec 1;;
exec 5;;
List.nth lpineq 1;;
rotateL 1 [0;5;1];;
cx;;

module Lib = struct
reneeds "lib.ml";;
end;;

Ineq.getfield Lpsymmetry;;
Ineq.getfield Lpsymmetry;;
Parse_ineq.lpstring();;
map Parse_ineq.test_domain_symmetry (Ineq.getfield Lpsymmetry) ;;
  join_lines 
    ("# File automatically generated from nonlinear inequality list via lpstring().\n\n" ::
    (map (Parse_ineq.mk_glpk_ineq false) (Ineq.getfield Lp)) @
    ["# Symmetry section\n\n"] @ 
    (map (Parse_ineq.mk_glpk_ineq true) (Ineq.getfield Lpsymmetry)));;
let lp1 = hd (Ineq.getfield Lp);;
Parse_ineq.mk_glpk_ineq false lp1;;
Parse_ineq.glpk_form false ` (--dih2_y y1 y2 y3 y4 y5 y6 + #0.0087 >
          -- #1.18616 +
          #0.436647 * (-- #2.18 + y1) +
          #0.032258 * (-- &2 + y2) +
          -- #0.289629 * (-- &2 + y3) +
          #0.397053 * (-- #2.52 + y4) +
          -- #0.0210289 * (-- &2 + y5) +
          -- #0.683341 * (-- #2.25 + y6))`;;
Parse_ineq.glpk_form false `y1:real`;;
Parse_ineq.glpk_lookup false "y1" [];;
 let reverse2 = 
     let xs =     [("y2","y3");("y5","y6");("rhazim2","rhazim3");
      ("dih2_y","dih3_y");] in
     let f (a,b) = (b,a) in
     let ys =     xs @ map f xs in
       fun s -> try (assoc s ys) with Failure _ -> s;;
#trace reverse2;;
reverse2 "y1";;
assoc "y1" [];;
!Parse_ineq.translate;;

+
          #0.032258 * (-- &2 + y2) +
          -- #0.289629 * (-- &2 + y3) +
          #0.397053 * (-- #2.52 + y4) +
          -- #0.0210289 * (-- &2 + y5) +
          -- #0.683341 * (-- #2.25 + y6)`;;
model;;
wheretriplemod;;
wheretriplemod [[1;2;3]] [2;3;1];;
bx;;

map Parse_ineq.test_domain_symmetry (Ineq.getfield Lpsymmetry);;
Ineq.getfield Lpsymmetry;;
map (Parse_ineq.mk_glpk_ineq false) (Ineq.getfield Lpsymmetry);;
let ppp = hd (Ineq.getfield Lpsymmetry);;
Parse_ineq.mk_glpk_ineq false ppp;;
Ineq.getfield Lpsymmetry;;
Ineq.getfield Lp;;
Ineq.ineqs;;
Ineq.getfield Cfsqp;;
Parse_ineq.lpstring();;
length (!Ineq.ineqs);;
let fil r = filter (can (fun t ->  (find ((=) r) t.tags))) (!Ineq.ineqs) ;;
fil Lpsymmetry;;
map Parse_ineq.test_domain_symmetry (fil Lpsymmetry);;

string_of_term `#3.0`;;
REFL `#3.14`;;
#remove_printer print_thm_x;;
Lpproc.execute();;

bbmax;;

map card_node hard_bb;;


loadt "printer.ml";;
parse_preterm (lex (explode "#3.14159"));;
`#3.14`;;
`&3`;;
`-- #3.14`;;
dest_const `DECIMAL`;;
mk_const("DECIMAL";;
is_binop;;
dest_binop;;
parse_term;;
c1.d_edge_200_225;;
c1.node_200_218;;
c1.node_218_236;;
c1.node_236_252;;
sorted_azim_diff darts_of_std_tri c1;; (* 4 2 1 *)
sorted_azim_weighted_diff darts_of_std_tri c1;; (* 4 2 1 *)
set_node_numerics;;
follow_hint;;



g `?(x:A) . f A`

let (EXISTSv_TAC :string -> tactic) = 
   fun s (asl,g) ->
     let (v,_) = dest_binder "?" g in 
     let (_,ty) = dest_var v in
       EXISTS_TAC (mk_var(s,ty)) (asl,g);;

(* generalize *)

let ( TYPE_VAR :string -> (term -> tactic) -> tactic) = 
    fun s tm_tactic (asl,g) ->
      let (_,r) = dest_comb g in
      let (v,_) = dest_abs r in
      let (_,ty) = dest_var v in
	tm_tactic (mk_var(s,ty)) (asl,g);;

TYPE_VAR "x" EXISTS_TAC;
;;

FINITE_EMPTY;;
help_grep "CASES";;

suggest();;
dest_comb (snd(top_realgoal()));;

help "dest_binder";;
help_grep "binder";;
help "is_binder";;
binders();;
EXISTSv_TAC "y";

dest_binder "?" (`?(x:A). f A`);;

(*

let searchl = sortlength_thml o search;;
let take = Lib_ext.take;;
let searcht r = take 0 5 (searchl r);;
let searchtake i j r = take i j (searchl r);;

*)

process_to_string ("svn info "^flyspeck_dir^ " | grep Revision");;

term_match;;
INSTANTIATE;;
  open Searching;;

definitions();;
State_manager.neutralize_state();;
let vv = (eval("1+1")) + 3;;
let vv = (eval("REFL `T`"));;
concl vv;;

prefixes();;
rev(infixes());;
binders();;
unparse_as_infix;;
map (List.nth (infixes())) (95--131);;
unparse_as_binder "!";;
binders();;

sort (<) [`y3:real`;`y2:real`];;

Sphere.all_forall `(y1 + y3 + y2  = y0 + y7)`;;

REAL_FIELD `x > &0 /\ y > &0 ==> x * y > &0`;;

find_path ((=) `4`) `(sum (3..4) f)`;;  (* lrr *)

find_term;;     
term_match;;

generate_ineq_datum_p with input Dihedral3 {2.36,2.1,2.1,2.55,2.1,2.0} {2,2,2,2.52,2,2} {2.52,2.52,2.52,sqrt8,2.52,2.52};;

Temp_in.generate_ineq_datum_p;;

Print_types.goal_types();;
Print_types.print_term_types `#2`;;
Print_types.print_thm_types (REFL `1`);;


(*
(* parsing printing *)
let pterm = Print_types.print_term_types;;
let tterm = Print_types.print_thm_types;;

#install_printer print_qterm;;


#install_printer Goal_printer.print_goal_hashed;;
#install_printer Goal_printer.print_goalstack_hashed;;

#remove_printer Goal_printer.print_goal_hashed;;
#remove_printer Goal_printer.print_goalstack_hashed;;

#print_length 1000;;
*)

mk_imp (( end_itlist (curry mk_conj) [`a:bool`;`b:bool`;`c:bool`]),`d:bool`);;


curry;;
search [name "Packing"];;
help_grep "list";;
help "chop_list";;

Sphere.gamma4f;;
Sphere.vol4f;;
Sphere.vol3f;;
Sphere.vol2f;;
