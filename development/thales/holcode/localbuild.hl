(* Nov 2010 *)

1;;

(* Desktop init.                                *)
let desktop_init _ = 
  let _ = load_path := 
     "/Users/thomashales/Desktop/googlecode/flyspeck/text_formalization/" :: 
       !load_path in
   needs "strictbuild.hl";;

desktop_init();;
(* #load "unix.cma";; (* dynamic loading not supported *) *)

let open_search =
  let _ = flyspeck_needs "general/tactics.hl" in
  let _ = flyspeck_needs "usr/thales/search_tac.hl" in
    reneeds "usr/thales/search_tac.hl";;

open Searching;;

(* laptop/desktop init *)
reneeds "strictbuild.hl";;

build_silent();;
build_and_report();;


(* END LOCAL BUILD *)

(* RUNNING LINEAR PROGRAMS, see build_lp.hl.  *)

(* START NONLINEAR INEQS *)
(* reneeds "nonlinear/ineqdata3q1h.hl";; *)
(* reneeds "nonlinear/strongdodec_ineq.hl";; *)


flyspeck_needs "leg/enclosed_def.hl";;
flyspeck_needs "general/sphere.hl";;
reneeds "nonlinear/ineq.hl";;
reneeds "nonlinear/parse_ineq.ml";;
reneeds "nonlinear/optimize.hl";;

let all_cases = 
  Parse_ineq.nub (map (fun t -> t.id) (!Ineq.ineqs));;
List.length  all_cases;;

let finished_cases = 
  let split_sp=  Str.split (Str.regexp "\n") in
  let p = process_to_string ("cat "^flyspeck_dir
			      ^"/../interval_code/qed_log.txt   "
			     ^"| sed  's/^.*ineq./\"/' " 
                             ^"| sed 's/., secs.*$/\";/'   "
			     ^"| sed 's/ split.*$//g' " 
                             ^"| sed 's/\"//g' "
			     ^" | sed 's/;//g' ") in
    Parse_ineq.nub (split_sp p);;
List.length finished_cases;;

let finished_splits = 
  let split_sp = Str.split(Str.regexp "\n") in
  let p = process_to_string("grep split "^flyspeck_dir
			      ^"/../interval_code/qed_log.txt   "
			     ^"| sed  's/^.*ineq./\"/' " 
                             ^"| sed 's/., secs.*$/\";/'   "
			     ^"| sed 's/ split.*$//g' " 
                             ^"| sed 's/\"//g' "
			     ^" | sed 's/;//g' ") in
    Parse_ineq.nub (split_sp p);;



let unfinished_cases = subtract all_cases finished_cases;;
List.length unfinished_cases;;

let hassplit =  
  let a = filter (fun t -> List.length (get_split t) > 0)  !Ineq.ineqs in 
  let a' = filter (fun t -> mem t.id  unfinished_cases) a in
    map (fun t-> t.id) a';;
List.length hassplit;;

(* lists of inequality ids *)

let hardcases = (* return to these later *)
   [
   "2065952723 A"; (* [3142*10^4] 1292339886 - 1292379887, (11 hours) no termin. *)
  "2986512815";
 "9563139965D"; (* derived lp, ignore it *)
"7676202716D"; (* derived lp, ignore it *)
  ] ;;

let testids = ref[];;
List.length !testids;;
let view nth = hd (Ineq.getexact (List.nth !testids nth));;
strip_idq(view 0);;
view 0;;


(* need also hexall 5 *)

let thackmac = ["PROIQUZ hexall 1-main: 1 0";
"PROIQUZ hexall 4-b1";
    "PROIQUZ hexall 3-b1"; (* bail after 70m cases *)
    ];;

let malt=[ "PROIQUZ hexall 3-b1";
   "PROIQUZ hexall 4-b1"];;

Sphere.delta4_hexall_x;;
Sphere.upper_dih_hexall_x;;
Sphere.edge_flat2_x;;
Sphere.flat_term;;

testids:= (List.rev (subtract unfinished_cases hardcases));;
testids :=hardcases;;
testids:=thackmac;;
testids :=  malt;;

!testids;;

(* running one id *)
let testid = hd(!testids);;
testsplit true testid;;

map (testsplit true) !testids;;

(* goal *)

let (id,tags,case) = 
  let idq =  (hd(Ineq.getexact testid)) in
  let (s,tags,ineq) = strip_idq idq in
  let ls = get_split idq in
   if (ls=[]) then (s,tags,ineq) else
     let cases = split_all_h0 [(ineq,ls)] in 
       (s^" case0",tags,hd cases);;

g (mk_imp (`NONLIN`,case));;
e(PRELIM_TAC);;
if (is_branch tags ) then e(BRANCH_TAC) else e(ALL_TAC);; 
if (is_xconvert tags) then e (X_OF_Y_TAC) else e(ALL_TAC);;
if (is_branch tags && not(is_xconvert tags)) then e(SERIES3Q1H_5D_TAC) else e(ALL_TAC);;
e (STYLIZE_TAC);;
e (WRAPUP_TAC);;




(* TESTING CFSQP *)

let cfsqp t = Parse_ineq.execute_cfsqp (hd(Ineq.getexact t));;
cfsqp (hd !testids);;
map cfsqp !testids;;
map Parse_ineq.execute_cfsqp !Ineq.ineqs;;


(* Parse_ineq.trialcount:= 500;; *)


(* SCRIPT *)
let svnstring = 
  "svn commit -m \"\" /Users/thomashales/Desktop/googlecode/flyspeck";;
let svn_commit() = Sys.command(svnstring);;

let test_and_commit t = (let _ = testsplit true t in svn_commit());;

!testids;;

(* started Jan 2, 2011 at 3:35pm on Thackmac *)
let jmm2011() = map test_and_commit ( !testids);;

(*
jmm2011();;
*)


Sys.command("svn /Users/Users/thomashales/Desktop/googlecode/flyspeck");
flyspeck_needs "general/sphere.hl";;
reneeds "nonlinear/ineq.hl";;
reneeds "nonlinear/parse_ineq.ml";;
reneeds "nonlinear/optimize.hl";;
map (testsplit_report true) ( !testids);;
