(* Nov 2010 *)

1;;

(* Desktop init.                                *)
let desktop_init _ = 
  let _ = load_path := 
     "/Users/thomashales/Desktop/googlecode/flyspeck/text_formalization/" :: 
       !load_path in
   needs "strictbuild.hl";;

desktop_init();;
(* #load "unix.cma";; (* dynamic loading not supported *) *)

let open_search =
  let _ = flyspeck_needs "general/tactics.hl" in
  let _ = flyspeck_needs "usr/thales/search_tac.hl" in
    reneeds "usr/thales/search_tac.hl";;

open Searching;;

(* laptop/desktop init *)
reneeds "strictbuild.hl";;
build_silent();;
build_and_report();;

flyspeck_needs "usr/thales/localbuild.hl";;

(* END LOCAL BUILD *)

(* RUNNING LINEAR PROGRAMS *)
(* Desktop source: *)
Lpproc.archiveraw := "/Users/thomashales/Desktop/tame_archive_svn1830.txt";;
flyspeck_needs "../glpk/sphere.ml";;
flyspeck_needs "../glpk/tame_archive/hard_lp.ml";;
flyspeck_needs "../glpk/tame_archive/scaffolding.hl";;



(* START NONLINEAR INEQS *)
(* reneeds "nonlinear/ineqdata3q1h.hl";; *)
(* reneeds "nonlinear/strongdodec_ineq.hl";; *)

flyspeck_needs "general/sphere.hl";;
reneeds "nonlinear/ineq.hl";;
reneeds "nonlinear/parse_ineq.ml";;
reneeds "nonlinear/optimize.hl";;

let all_cases = 
  Parse_ineq.nub (map (fun t -> t.id) (!Ineq.ineqs));;
List.length  all_cases;;

let finished_cases = 
  let split_sp=  Str.split (Str.regexp "\n") in
  let p = process_to_string ("cat "^flyspeck_dir
			      ^"/../interval_code/qed_log.txt   "
			     ^"| sed  's/^.*ineq./\"/' | sed 's/., secs.*$/\";/'   "
			     ^"| sed 's/ split.*$//g' | sed 's/\"//g' "
			    ^" | sed 's/;//g' ") in
    Parse_ineq.nub (split_sp p);;
List.length finished_cases;;


let unfinished_cases = subtract all_cases finished_cases;;
List.length unfinished_cases;;

let hassplit =  
  let a = filter (fun t -> List.length (get_split t) > 0)  !Ineq.ineqs in 
  let a' = filter (fun t -> mem t.id  unfinished_cases) a in
    map (fun t-> t.id) a';;
List.length hassplit;;

(* lists of inequality ids *)

let hardcases = (* return to these later *)
  union ["QITNPEA 4003532128 c" 
     (* time [1291064641,1291300410] to [2728*10^4] 2010/12/1, no termination *);
   "QITNPEA 4003532128 b" (* ran 1.5 days no termination *);
   "ZTGIJCF23 1 0 1 7907792228 c" 
      (* 1 0 1: various subcases ran over the weekend up to 10 hours each *);
  ] hassplit;;

let testids = ref (List.rev (subtract unfinished_cases hardcases));;

List.length !testids;;
let view nth = hd (Ineq.getexact (List.nth !testids nth));;
strip_idq(view 1);;
view 0;;
let thackmac =[ "PQFYWHW B' 0 1"; "PQFYWHW B' 1 1"; "PQFYWHW B' 2 1";
     "PQFYWHW B' 3 1";"2065952723 A"; ];;
List.length thackmac;;

let malt = ["GYQVFXJ hexA 0";  "PQFYWHW B' 0 0";"4240815464";];;

testids := thackmac;;

(* running one id *)
let testid = hd(!testids);;
let testid = hd (malt);;
let testid = hd (thackmac);;

testsplit false testid;;
map (testsplit true) ( !testids);;

(* Parse_ineq.execute_cfsqp (List.nth testids 0);; *)

(* goal *)

let (id,tags,case) = strip_idq (hd(Ineq.getexact testid));;
g (mk_imp (`NONLIN`,case));;
e(PRELIM_TAC);;
if (is_branch tags ) then e(BRANCH_TAC) else e(ALL_TAC);; 
if (is_xconvert tags) then e (X_OF_Y_TAC) else e(ALL_TAC);;
if (is_branch tags && not(is_xconvert tags)) then e(SERIES3Q1H_5D_TAC) else e(ALL_TAC);;
e (STYLIZE_TAC);;
e (WRAPUP_TAC);;


(* case splitting needs updating: *)

let testcase = get_firstexact  testid;;

let cases =
  let ls = get_split (fst testcase) in
     map (fun t -> (fst testcase,t)) (split_all_h0  [(snd testcase, ls)]);;
List.length cases;;
g (mk_imp (`NONLIN`,(fun (_,c) -> c) (List.nth cases 0)));;



(*
process_to_string "cat qed_log.txt | sed  's/^.*ineq./\"/' | sed 's/., secs.*$/\";/'  "

cat qed_log.txt | sed  's/^.*ineq./"/' | sed 's/., secs.*$/";/' | sort -u | wc  

(*
let _ = Sys.command("cat "^flyspeck_dir^"/../interval_code/qed_log.txt");;
*)
*)

vol3_x_sqrt;;

let gg = top_goal();;
gg;;
search[`vol3_x`];;
gamma3f_vLR0;;
gamma3f_vLR_lfun;;
gamma3f_vL_lfun;;
gamma3f_vL_lfun;;
gamma3f_v_lfun;;
gamma3f_v0;;
dih_x_126_s2;;
vol3_x_sqrt;;
vol3_x_135_s2;;
Sphere.vol3r;;
Sphere.vol2r;;
gamma3f_126;;
Sphere.gamma3f;;
Sphere.vol3r;;
vol3f_alt;;
delta4_y;;
Sphere.delta4_y;;
Sphere.delta_y;;
search[`x * &0 = &0`];;
search[`x - &0 = x`];;
search[`y <= &2 * h0`;`lmfun`;`lfun`];;
search[` &2 * h0 <= y1`;`lmfun`;`&0`];;
lmdih5_0;;
search[`hminus`;`h0`];;

lmfun_lfun;;
Sphere.dih_x;;

(* TESTING CFSQP *)

let cfsqp t = Parse_ineq.execute_cfsqp (hd(Ineq.getexact t));;
map cfsqp !testids;;
map Parse_ineq.execute_cfsqp !Ineq.ineqs;;


(* Parse_ineq.trialcount:= 500;; *)
