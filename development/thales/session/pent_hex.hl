(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(* Section: Main Estimate - Appendix - Terminal Cases                         *)
(* Chapter: Local Fan                                                         *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2013-05-10                                                           *)
(* ========================================================================== *)

(* Terminal Pent and Hex cases.  *)

(* pent with 5 top edges=2 *)




module Pent_hex = struct
end;;

Functional_equation.functional_overload();;

(* May 9, 2013. taud function.  taud_v4 seems to be the version that
   works in all cases (pent and hex).  *)


    let add = Ineq.add;;

    let skip = Ineq.skip;;

    let all_forall = Sphere.all_forall;;






(* Scratch area *)

(*
let runhh i234 i126 i135 = try (run(make_hex_ear i234 i126 i135)) with _ -> () ;;
let run2hh i234 i126 i135 = try (
  let _ = run2(make_hex_ear i234 i126 i135) in ()) with _ -> () ;;

*)



let install_functions () = 
  let _ = map Parse_ineq.autogen_add [mu_y;delta_x1;taud;] in
  let _ = map Parse_ineq.macro_add[ mud_135_x;
			      mud_126_x;mud_234_x;mudLs_234_x;mudLs_135_x;mudLs_126_x;
			      taud_x;nonfunctional_mu6_x;nonfunctional_taud_D1;
			    nonfunctional_taud_D2;
			    nonfunctional_edge2_126_x;
			    nonfunctional_edge2_135_x;
			    nonfunctional_edge2_234_x;
			    flat_term2_126_x;
				       flat_term2_135_x;flat_term2_234_x] in
  let _ = map Function_list.function_add
    [ functional_delta_x1;mu6_x;taud_x_ALT;taud_D2_num_x;taud_D1_num_x;
    functional_mud_135_x;functional_mud_126_x;functional_mud_234_x;mudLs_234_x;mudLs_126_x;mudLs_135_x;
    ups_126;
    functional_edge2_126_x;functional_edge2_135_x;functional_edge2_234_x;
    flat_term2_126_x;flat_term2_135_x;flat_term2_234_x] in
    "remember to reload Auto_lib, etc.";;

(*
    map Parse_ineq.autogen_remove [edge_flatD_x1;taud_v4_D2_num;taud;taud_D2_num_x];; 
    map Parse_ineq.macro_remove [taud_D2_num_x;edge_126_x;edge_135_x;
				 functional_edge_135_x;flat_term_126_x;flat_term_135_x;
				functional_edge_126_x;mudd_135_x;mudd_126_x;			   
      mudd_135_x_v2;mudd_126_x_v2;
];; 

   map Function_list.function_remove [mu_y;taud_x;delta_x1;functional_edge_126_x;
				       functional_edge_135_x;];; 
*)


Parse_ineq.autogen_remove mudL_234_x;;
Function_list.function_remove mudL_234_x;;
1;;    


(*

flyspeck_needs "nonlinear/scripts.hl";;

    let run s = 
      let _ = Ineq.add s in
	Scripts.one_cfsqp s.idv;;

    rflyspeck_needs   "nonlinear/auto_lib.hl";;

    let run2 s = 
      let _ = Ineq.add s in
	Auto_lib.testsplit true s.idv;;

    let run2f s = 
      let _ = Ineq.add s in
	Auto_lib.testsplit false s.idv;;



Auto_lib.testsplit true "7796879304";;
map (Auto_lib.testsplit true)  cases;;
  

map Scripts.one_cfsqp cases;;
*)

map (Auto_lib.testsplit true) ["test U1";"test U2";"test U3";
"test U4";"test U5";"test U6";
"test U7";"test U8";"test U9";
"test U10";];;


