(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(* Section: Main Estimate - Appendix - Terminal Cases                         *)
(* Chapter: Local Fan                                                         *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2013-05-10                                                           *)
(* ========================================================================== *)

(* Terminal Pent and Hex cases.  *)

(* pent with 5 top edges=2 *)




module Pent_hex = struct
end;;

Functional_equation.functional_overload();;

(* May 9, 2013. taud function.  taud_v4 seems to be the version that
   works in all cases (pent and hex).  *)

(* DEPRECATED:
   let taud = new_definition `taud y1 y2 y3 y4 y5 y6 = 
      #0.027 * safesqrt(delta_y y1 y2 y3 y4 y5 y6) + sol0 * (y1 - &2 * h0)/(&2 * h0 - &2)`;;

    let taud_v2 = new_definition `taud_v2 y1 y2 y3 y4 y5 y6 = 
      #0.027 * safesqrt(delta_y y1 y2 y3 y4 y5 y6) + sol0 * (y1 - &2 * h0)/(&2 * h0 - &2) +
	safesqrt(delta_y y1 y2 y3 y4 y5 y6) * #0.04 * (#2.52 - y1)`;;

    let taud_v3 = new_definition `taud_v3 y1 y2 y3 y4 y5 y6 = 
      #0.023 * safesqrt(delta_y y1 y2 y3 y4 y5 y6) + sol0 * (y1 - &2 * h0)/(&2 * h0 - &2) +
	safesqrt(delta_y y1 y2 y3 y4 y5 y6) * #0.055 * (#2.52 - y1)`;;

    let edge_flat50 =  new_definition`edge_flat50 y1 y2 y3 y5 y6 = 
      sqrt(quadratic_root_plus (abc_of_quadratic (
	\x4.  &50 - delta_x (y1*y1) (y2*y2)  (y3*y3)  x4 (y5*y5)  (y6*y6))))`;;

    let edge_flat250_x = new_definition `edge_flat250_x x1 x2 x3 x4 x5 x6 =
      (edge_flat (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x5) (sqrt x6)) pow 2`;;  (* x4 dummy *)

    let edge_flat50_x =  new_definition`edge_flat50_x x1 x2 x3 (x4:real) x5 x6 = 
      edge_flat (sqrt x1) (sqrt x2) (sqrt x3) (sqrt x5) (sqrt x6)`;; 


    let fn_sub246 = new_definition 
      `fn_sub246 f (x2s:real) (x4s:real) (x6s:real) 
      (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
      (f x1 x2s x3 x4s x5 x6s):real`;;

    let fn_sub345 = new_definition 
      `fn_sub345 f (x3s:real) (x4s:real) (x5s:real) 
      (x1:real) (x2:real) (x3:real) (x4:real) (x5:real) (x6:real) = 
      (f x1 x2 x3s x4s x5s x6):real`;;

    let edge_flatD_x1 = new_definition `edge_flatD_x1 d x2 x3 x4 x5 x6 = 
      sqrt(quadratic_root_plus (abc_of_quadratic (
	\x1.  d - delta_x x1 x2 x3 x4 x5 x6)))`;;

    let edge_126_x = new_definition `edge_126_x d x4 x5 = 
      compose6 (edge_flatD_x1) (constant6 d) proj_x1 proj_x2 proj_x6 (constant6 x4) (constant6 x5)`;;

    let edge_135_x = new_definition `edge_135_x d x4 x6 =
      compose6 (edge_flatD_x1) (constant6 d) proj_x1 proj_x3 proj_x5 (constant6 x4) (constant6 x6)`;;

    let flat_term_126_x = new_definition `flat_term_126_x d x4 x5 = 
      uni(flat_term,edge_126_x d x4 x5)`;;

    let flat_term_135_x = new_definition `flat_term_135_x d x4 x6 = 
      uni(flat_term,edge_135_x d x4 x6)`;;

    let mudd_135_x_v2 = new_definition `mudd_135_x_v2 d x4 x6 = 
      mul6 (compose6 (promote3_to_6 mu_y) (uni(sqrt,edge2_135_x d x4 x6)) proj_y1 proj_y3 dummy6 dummy6 dummy6)
	(constant6 (sqrt d))`;;

    let mudd_126_x_v2 = new_definition `mudd_126_x_v2 d x4 x5 = 
      mul6 (compose6 (promote3_to_6 mu_y) (uni(sqrt,edge2_126_x d x4 x5)) proj_y1 proj_y2 dummy6 dummy6 dummy6)
	(constant6 (sqrt d))`;;

    let mudt_234_x = new_definition `mudt_234_x d y1 y5 y6 = 
      (mul6 (compose6 (mu6_x) (constant6 (y1*y1)) proj_x2 proj_x3 dummy6 dummy6 dummy6)
	(uni(truncate_sqrt d,(delta_234_x (y1*y1) (y5*y5) (y6*y6)))))`;;


*)

    let add = Ineq.add;;

    let skip = Ineq.skip;;

    let all_forall = Sphere.all_forall;;

    let flat_term = new_definition `flat_term y = sol0 * (y - &2 * h0)/(&2 * h0 - &2)`;;

    let mu_y = new_definition `mu_y y1 y2 y3 = 
     (#0.012 + #0.07 * (#2.52 - y1) + #0.01 * (#2.52 * &2 - y2 - y3 ))`;;

    let mu6_x = new_definition `(mu6_x:real->real->real->real->real->real->real) = 
      (constant6 (#0.012) + constant6 (#0.07) * (constant6 (#2.52) - proj_y1)
	  + constant6 (#0.01) * ((constant6 (#2.52 * &2) - proj_y2 - proj_y3)))`;;

    let taud = new_definition `taud y1 y2 y3 y4 y5 y6 = 
       sol0 * (y1 - &2 * h0)/(&2 * h0 - &2) +
	sqrt(delta_y y1 y2 y3 y4 y5 y6) * 
	 (#0.012 + #0.07 * (#2.52 - y1) + #0.01 * (#2.52 * &2 - y2 - y3 ))`;;

    let taud_x = new_definition `taud_x  = 
      add6 (promote1_to_6 flat_term_x)
	(mul6 (uni(sqrt,delta_x))
	(compose6 (promote3_to_6 mu_y) proj_y1 proj_y2 proj_y3 dummy6 dummy6 dummy6))`;;

    let delta_x1 = new_definition 
      `delta_x1 x1 x2 x3 x4 x5 x6 = 
      -- x1 * x4 + x2 * x5 - x3 * x5 - x2 * x6 + x3 * x6 + 
	x4 * (-- x1 + x2 + x3 - x4 + x5 + x6)`;;

    let ups_126 = new_definition
      `ups_126 = compose6 (promote3_to_6 ups_x) proj_x1 proj_x2 proj_x6 dummy6 dummy6 dummy6`;;

    let taud_v4_D2_num = new_definition `taud_v4_D2_num y1 y2 y3 y4 y5 y6 = 
      (let d = delta_y y1 y2 y3 y4 y5 y6 in
     let delta' = y_of_x delta_x1 y1 y2 y3 y4 y5 y6 * (&2 * y1) in
     let delta'' = -- &8 * (y1 * y4) pow 2  + y_of_x delta_x1 y1 y2 y3 y4 y5 y6 * (&2) in
     let mu = (#0.012 + #0.07 * (#2.52 - y1) + #0.01 * (#2.52 * &2 - y2 - y3 )) in 
     let mu' = -- #0.07 in
       (mu' * d * delta' - (&1 / &4) * mu * (delta' pow 2) + (&1 / &2) * mu * d * delta'' ))`;;

    let taud_D1_num_x = new_definition `taud_D1_num_x = 
      (let d = delta_x in
       let delta' = delta_x1 * (constant6 (&2)) * proj_y1 in
       let mu = mu6_x in
       let mu' = constant6 (-- #0.07) in
       let ft' = sol0 / (#0.52) in
	 (mu' * d + constant6(&1 / &2) * mu * delta' + constant6 ft' * uni(sqrt ,d)))`;;

    let taud_D2_num_x = new_definition `taud_D2_num_x =
      (let d = delta_x in
       let delta' = delta_x1 * (constant6 (&2)) * proj_y1 in
       let delta'' = constant6 (-- &8) * proj_x1 * proj_x4 + delta_x1 * constant6 (&2) in
       let mu = mu6_x in
       let mu' = constant6 (-- #0.07) in
       (mu' * d * delta' - constant6(&1 / &4) * mu * (delta' *delta') + constant6(&1 / &2) * mu * d * delta'' ))`;;

    let edge2_flatD_x1 = new_definition `edge2_flatD_x1 d x2 x3 x4 x5 x6 = 
      quadratic_root_plus (abc_of_quadratic (
	\x1.  d - delta_x x1 x2 x3 x4 x5 x6))`;;

    let edge2_126_x = new_definition `edge2_126_x d x4 x5 = 
      compose6 (edge2_flatD_x1) (constant6 d) proj_x1 proj_x2 proj_x6 (constant6 x4) (constant6 x5)`;;

    let edge2_135_x = new_definition `edge2_135_x d x4 x6 =
      compose6 (edge2_flatD_x1) (constant6 d) proj_x1 proj_x3 proj_x5 (constant6 x4) (constant6 x6)`;;

    let edge2_234_x = new_definition `edge2_234_x d x5 x6 =
      compose6 (edge2_flatD_x1) (constant6 d) proj_x2 proj_x3 proj_x4 (constant6 x5) (constant6 x6)`;;

    let flat_term2_126_x = new_definition `flat_term2_126_x d x4 x5 = 
      uni(flat_term_x,edge2_126_x d x4 x5)`;;

    let flat_term2_135_x = new_definition `flat_term2_135_x d x4 x6 = 
      uni(flat_term_x,edge2_135_x d x4 x6)`;;

    let flat_term2_234_x = new_definition `flat_term2_234_x d x5 x6 = 
      uni(flat_term_x,edge2_234_x d x5 x6)`;;

    let mud_135_x = new_definition `mud_135_x_v1 y2 y4 y6 = 
      mul6 (compose6 (promote3_to_6 mu_y) (constant6 y2) proj_y1 proj_y3 dummy6 dummy6 dummy6)
	(uni(sqrt,(delta_135_x (y2*y2) (y4*y4) (y6*y6))))`;;

    let mud_126_x = new_definition `mud_126_x_v1 y3 y4 y5 = 
      mul6 (compose6 (promote3_to_6 mu_y) (constant6 y3) proj_y1 proj_y2 dummy6 dummy6 dummy6)
	(uni(sqrt,(delta_126_x (y3*y3) (y4*y4) (y5*y5))))`;;

    let mud_234_x = new_definition `mud_234_x_v1 y1 y5 y6 = 
      mul6 (compose6 (promote3_to_6 mu_y) (constant6 y1) proj_y2 proj_y3 dummy6 dummy6 dummy6)
	(uni(sqrt,(delta_234_x (y1*y1) (y5*y5) (y6*y6))))`;;

    (* deprecate this *)

    let mudL_234_x = new_definition `mudL_234_x d1 d2 y1 y5 y6 = 
      (mul6 (compose6 (mu6_x) (constant6 (y1*y1)) proj_x2 proj_x3 dummy6 dummy6 dummy6)
	(constant6 (&1/ (sqrt(d1)+sqrt(d2))) * (delta_234_x (y1*y1) (y5*y5) (y6*y6)) + constant6(sqrt(d1))))`;;

    let mudLs_234_x = new_definition `mudLs_234_x d1s d2s y1 y5 y6 = 
      (mul6 (compose6 (mu6_x) (constant6 (y1*y1)) proj_x2 proj_x3 dummy6 dummy6 dummy6)
	(constant6 (&1/ (d1s+d2s)) * (delta_234_x (y1*y1) (y5*y5) (y6*y6) - constant6(d1s *d1s)) + constant6(d1s)))`;;

    let mudLs_126_x = new_definition `mudLs_126_x d1s d2s y3 y4 y5 = 
      (mul6 (compose6 (mu6_x) (constant6 (y3*y3)) proj_x1 proj_x2 dummy6 dummy6 dummy6)
	(constant6 (&1/ (d1s+d2s)) * (delta_126_x (y3*y3) (y4*y4) (y5*y5) - constant6(d1s *d1s)) + constant6(d1s)))`;;

    let mudLs_135_x = new_definition `mudLs_135_x d1s d2s y2 y4 y6 = 
      (mul6 (compose6 (mu6_x) (constant6 (y2*y2)) proj_x1 proj_x3 dummy6 dummy6 dummy6)
	(constant6 (&1/ (d1s+d2s)) * (delta_135_x (y2*y2) (y4*y4) (y6*y6) - constant6(d1s *d1s)) + constant6(d1s)))`;;


    let F_REWRITE_TAC = REWRITE_TAC[mud_126_x;mu6_x;mu_y;taud;taud_x;
				    ups_126;edge2_126_x;edge2_flatD_x1;
				    edge2_135_x;edge2_234_x;
				    mud_135_x;mud_126_x;mud_234_x;mudLs_234_x;mudLs_126_x;mudLs_135_x;
				    LET_DEF;LET_END_DEF;
				    Sphere.delta_y;
	Sphere.y_of_x;Sphere.flat_term_x;Sphere.flat_term;
	Functional_equation.compose6;Functional_equation.promote3_to_6;
	Functional_equation.promote1_to_6;	Functional_equation.domain6;
	Functional_equation.constant6;
	Functional_equation.uni;
	Functional_equation.add6;Functional_equation.mul6;
	Functional_equation.sub6;Functional_equation.div6;
	Functional_equation.proj_y1;Functional_equation.proj_y2;
	Functional_equation.proj_y3;Functional_equation.proj_y4;
	Functional_equation.proj_y5;Functional_equation.proj_y6;
	Functional_equation.dummy6;	Functional_equation.zero6;
	Functional_equation.proj_x1;Functional_equation.proj_x2;
	Functional_equation.proj_x4;Functional_equation.proj_x3;
	Functional_equation.proj_x5;	Functional_equation.proj_x6;
];;

    let taud_x_taud = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. 
    &0 <= y1 /\ &0 <= y2 /\ &0 <= y3 ==>
    y_of_x taud_x y1 y2 y3 y4 y5 y6 = taud y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
    F_REWRITE_TAC;
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_SIMP_TAC[Nonlinear_lemma.sqrtxx])
  ]);;
  (* }}} *)

let mu6_x_mu_y = prove_by_refinement(
  `!y1 y2 y3 x4 x5 x6. &0 <= y1 /\ &0 <= y2 /\ &0 <= y3 ==>
    mu_y y1 y2 y3 = mu6_x (y1 * y1) ( y2 * y2) (y3 * y3) x4 x5 x6 `,
  (* {{{ proof *)
  [
  F_REWRITE_TAC;
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_SIMP_TAC[Nonlinear_lemma.sqrtxx])
  ]);;
  (* }}} *)

let taud_x_ALT = prove_by_refinement(
  `domain6
    (\x1 x2 x3 x4 x5 x6.
       (&0 <= x1 /\ &0 <= x2 /\ &0 <= x3))
    taud_x ( (promote1_to_6 flat_term_x) +
	 (uni(sqrt,delta_x)) * mu6_x)`,
  (* {{{ proof *)
  [
    F_REWRITE_TAC;
  ]);;
  (* }}} *)

let functional_edge2_126_x = prove_by_refinement(
  `!d x4 x5. 
    (edge2_126_x d x4 x5) =
    (let a =  proj_x6 in
     let c4 = constant6 x4 in
     let c5 = constant6 x5 in
     let b = constant6(-- &1) * compose6 delta_x1 zero6 proj_x2 proj_x1 proj_x6 (c5) (c4) in
     let c = constant6 ( d) - compose6 delta_x proj_x1 proj_x2 zero6 (c4) (c5)  proj_x6  in
     let ups_456 = compose6 ups_126 (c4) (c5) dummy6 dummy6 dummy6 proj_x6 in
     let discr = ups_456 * ups_126 + constant6( -- &4*d) * a in
        (uni(sqrt,discr) - b) /  (constant6 (&2) * a))`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM];
    F_REWRITE_TAC;
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY_GOAL_THEN `!x1 x2 x3 x4 x5 x6.  d - delta_x x3 x1 x2 x6 x4 x5 = (x6) * x3 pow 2 + ( -- delta_x1 (&0) x2 x1 x6 x5 x4) * x3 + (d - delta_x (&0) x2 x1 x6 x5 x4)` (unlist ONCE_REWRITE_TAC);
    REWRITE_TAC[Sphere.delta_x;delta_x1];
    BY(REAL_ARITH_TAC);
  REWRITE_TAC[Nonlinear_lemma.abc_quadratic;Sphere.quadratic_root_plus];
  AP_THM_TAC;
  AP_TERM_TAC;
  MATCH_MP_TAC (arith `s1 = s2 ==> -- -- d + s1 = s2 - -- &1 * d`);
  AP_TERM_TAC;
  REWRITE_TAC[delta_x1;Sphere.ups_x;Sphere.delta_x];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let functional_edge2_135_x = prove_by_refinement(
  `!d x4 x6. 
    (edge2_135_x d x4 x6) =
    compose6 (edge2_126_x d x4 x6) (proj_x1) (proj_x3) (dummy6) (dummy6) (dummy6) (proj_x5)`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM];
    F_REWRITE_TAC;
  ]);;
  (* }}} *)

let functional_edge2_234_x = prove_by_refinement(
  `!d x5 x6.
    edge2_234_x d x5 x6 = 
    compose6 (edge2_126_x d x5 x6) (proj_x2) (proj_x3) (dummy6) (dummy6) (dummy6) (proj_x4)`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM];
    F_REWRITE_TAC;
  ]);;
  (* }}} *)

let nonfunctional_edge2_126_x = prove_by_refinement(
  `!d x1 x2 a b c x4 x5 x6. 
    (edge2_126_x d x4 x5) x1 x2 a b c x6 = 
     ((sqrt (ups_x x4 x5 x6 * ups_x x1 x2 x6 + (-- &4 * d) * x6) -
       -- &1 * delta_x1 (&0) x2 x1 x6 x5 x4) /
      (&2 * x6))`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM;functional_edge2_126_x];
        F_REWRITE_TAC;
  ]);;
  (* }}} *)

let nonfunctional_edge2_135_x = prove_by_refinement(
  `!d x1 x3 x5 x4 x6 a b c. 
    (edge2_135_x d x4 x6) x1 a x3 b x5 c = (sqrt (ups_x x4 x6 x5 * ups_x x1 x3 x5 + (-- &4 * d) * x5) -
      -- &1 * delta_x1 (&0) x3 x1 x5 x6 x4) /
     (&2 * x5)`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM;functional_edge2_126_x;functional_edge2_135_x];
        F_REWRITE_TAC;
  ]);;
  (* }}} *)

let nonfunctional_edge2_234_x = prove_by_refinement(
  `!d x2 x3 x4 x5 x6 a b c. 
    (edge2_234_x d x5 x6) a x2 x3 x4 b c = 
    (sqrt (ups_x x5 x6 x4 * ups_x x2 x3 x4 + (-- &4 * d) * x4) -
      -- &1 * delta_x1 (&0) x3 x2 x4 x6 x5) /
     (&2 * x4)`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM;functional_edge2_126_x;functional_edge2_234_x];
        F_REWRITE_TAC;
  ]);;
  (* }}} *)

let functional_mud_135_x = prove_by_refinement(
  `!y2 y4 y6. (domain6 (\ x1 x2 x3 x4 x5 x6. &0 <= y2)) 
    (mud_135_x_v1 y2 y4 y6) 
      (mul6 (compose6 (mu6_x) (constant6 (y2*y2)) proj_x1 proj_x3 dummy6 dummy6 dummy6)
	(uni(sqrt,(delta_135_x (y2*y2) (y4*y4) (y6*y6)))))`,
  (* {{{ proof *)
  [
    F_REWRITE_TAC;
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_SIMP_TAC[Nonlinear_lemma.sqrtxx])
  ]);;
  (* }}} *)

let functional_mud_126_x = prove_by_refinement(
  `!y3 y4 y5. (domain6 (\ x1 x2 x3 x4 x5 x6. &0 <= y3)) 
    (mud_126_x_v1 y3 y4 y5) 
      (mul6 (compose6 (mu6_x) (constant6 (y3*y3)) proj_x1 proj_x2 dummy6 dummy6 dummy6)
	(uni(sqrt,(delta_126_x (y3*y3) (y4*y4) (y5*y5)))))`,
  (* {{{ proof *)
  [
    F_REWRITE_TAC;
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_SIMP_TAC[Nonlinear_lemma.sqrtxx])
  ]);;
  (* }}} *)

let functional_mud_234_x = prove_by_refinement(
  `!y1 y5 y6. (domain6 (\ x1 x2 x3 x4 x5 x6. &0 <= y1)) 
    (mud_234_x_v1 y1 y5 y6) 
      (mul6 (compose6 (mu6_x) (constant6 (y1*y1)) proj_x2 proj_x3 dummy6 dummy6 dummy6)
	(uni(sqrt,(delta_234_x (y1*y1) (y5*y5) (y6*y6)))))`,
  (* {{{ proof *)
  [
    F_REWRITE_TAC;
  REPEAT WEAKER_STRIP_TAC;
  BY(ASM_SIMP_TAC[Nonlinear_lemma.sqrtxx])
  ]);;
  (* }}} *)

let taud_D2_num_x_y = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6.
    &0 <= y1 /\ &0 <= y2 /\ &0 <= y3 ==>
    taud_v4_D2_num y1 y2 y3 y4 y5 y6 = y_of_x taud_D2_num_x y1 y2 y3 y4 y5 y6`,
  (* {{{ proof *)
  [
    REWRITE_TAC[taud_v4_D2_num;taud_D2_num_x];
    F_REWRITE_TAC;
  REWRITE_TAC[GSYM mu_y];
  REWRITE_TAC[GSYM Sphere.delta_y];
  ASM_SIMP_TAC[Nonlinear_lemma.sqrtxx];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let nonfunctional_taud_D2 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. taud_D2_num_x x1 x2 x3 x4 x5 x6 = -- #0.07 *
     delta_x x1 x2 x3 x4 x5 x6 *
     delta_x1 x1 x2 x3 x4 x5 x6 *
     &2 *
     sqrt x1 -
     &1 / &4 *
     mu6_x x1 x2 x3 x4 x5 x6 *
     (delta_x1 x1 x2 x3 x4 x5 x6 * &2 * sqrt x1) pow 2 +
     &1 / &2 *
     mu6_x x1 x2 x3 x4 x5 x6 *
     delta_x x1 x2 x3 x4 x5 x6 *
     (-- &8 * x1 * x4 + delta_x1 x1 x2 x3 x4 x5 x6 * &2)`,
  (* {{{ proof *)
  [
    REWRITE_TAC[taud_D2_num_x];
      F_REWRITE_TAC;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let nonfunctional_taud_D1 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. taud_D1_num_x x1 x2 x3 x4 x5 x6 = 
     -- #0.07 * delta_x x1 x2 x3 x4 x5 x6 +
     &1 / &2 *
     mu6_x x1 x2 x3 x4 x5 x6 *
     delta_x1 x1 x2 x3 x4 x5 x6 *
     &2 *
     sqrt x1 +
     sol0 /  #0.52 * sqrt (delta_x x1 x2 x3 x4 x5 x6)`,
  (* {{{ proof *)
  [
    REWRITE_TAC[taud_D1_num_x];
    F_REWRITE_TAC;
  ]);;
  (* }}} *)

let nonfunctional_mu6_x = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    mu6_x x1 x2 x3 x4 x5 x6 = 
     (#0.012 + #0.07 * (#2.52 - sqrt(x1)) + #0.01 * (#2.52 * &2 - sqrt(x2) - sqrt(x3) ))`,
  (* {{{ proof *)
  [
    F_REWRITE_TAC;
  ]);;
  (* }}} *)

let functional_delta_x1 = prove_by_refinement(
  `delta_x1 = rotate4 delta_x4`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM;Sphere.rotate4;delta_x1;Sphere.delta_x4];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

(* PENT SECTION *)

skip
{
  idv="3405144397-numerical";
  doc="old name: test8*
   Local-fan/Main-estimate/terminal-pent/both-ears-under-20.
   ear dih inequality when delta < 20";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0);Deprecated];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
      (&2,y5,&2);
    (#3.01,y6,#3.237)
  ]
(
  (delta_y y1 y2 y3 y4 y5 y6 > &20)  \/
     (dih_y y1 y2 y3 y4 y5 y6 < (#1.75 - #1.109) / &2) \/
  (delta_y y1 y2 y3 y4 y5 y6 < &0) 
 )`;
};;

add
{
  idv="3405144397";
  doc="ear dih ineq when delta < 20.
   Local-fan/Main-estimate/Terminal-pent/both-ears-under-20.
    Adaptation of 9459075374.
    (EAR) A bound on the delta of an ear in a pent,
   The disjunct   (dih_y y1 y2 y3 y4 y5 y6 < #0.3205 = (1.75-1.109)/2)  has been 'linearized'. 
   Tan[0.3205]^2 = (>=) 0.110186
   In more detail, this calc shows that delta > 20 or dih < 0.3205
   By 4887115291, we know that the combined angle at the crowded node of a pent is
   at least 1.75.  If both ears have delta < 20, then combined angle
   is at least 1.109 + 2 * 0.3205 = 1.75, so a cross diag <= 3.01.
   Hence wlog one of the two ears has delta >= 20.
   ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(50.0,500.0);];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (#2.52,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
     (#3.01,y5,#3.24);
      (&2,y6,#2.52)
  ]
(let tan2lower = #0.110186 in
   (delta_y y1 y2 y3 y4 y5 y6 > &20) \/
  (&4 * x1_delta_y y1 y2 y3 y4 y5 y6 < tan2lower * delta4_squared_y y1 y2 y3 y4 y5 y6)
 )`;
};;

add
{
  idv="4887115291";
  doc="old name: angles pent*
    Local-fan/Main-estimate/Terminal-pent/both-ears-under-20.
  ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.01);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
(  #1.75 < dih_y y1 y2 y3 y4 y5 y6 
)`;
};; 

add
{
  idv="6789182745";
  doc="old name: test A*
   Local-fan/Main-estimate/Terminal-pent/both-ears-under-20.
  ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = Sphere.all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
      (#3.01,y5,#3.237);
    (#3.01,y6,#3.237)
  ]
(
     (dih_y y1 y2 y3 y4 y5 y6 < #1.109) 
 )`;
};;

add
{
  idv="7796879304";
  doc="old name: res1*
   Local-fan/Main-estimate/terminal-pent/ear-tau-approximation
   tau_residual.  This restricts delta to [0,C]";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (#2.0,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
  (delta_y y1 y2 y3 y4 y5 y6 < &0)  \/
  (delta_y y1 y2 y3 y4 y5 y6 > &80)  \/
   (y_of_x tau_residual_x y1 y2 y3 y4 y5 y6 > #0.012 + #0.07 * (#2.52 - y1) + #0.01 * (#2.52 * &2 - y2 - y3 ))
 )`;
};;

add
{
  idv="2314572187";
  doc="old name: res1*
   Local-fan/Main-estimate/terminal-pent/ear-tau-approximation
   tau_residual.  This restricts delta above C";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (#2.0,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
      (&2,y6,&2)
  ]
(
   (taum y1 y2 y3 y4 y5 y6 > y_of_x taud_x y1 y2 y3 y4 y5 y6) \/ 
    (delta_y y1 y2 y3 y4 y5 y6 < &80) 
 )`;
};;

add
{
  idv="8146670324";
  doc="old name: local max v4*, WNLKGOQ, 1671775772 (with #0.12->#0.1)
    better local max test.
    This is the numerator of the 2nd derivative of the function taud.
    Case delta > 20.";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52); 
    (&2,y3,#2.52);
    (#3.01,y4,#3.237);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
    (y_of_x taud_D1_num_x y1 y2 y3 y4 y5 y6  > &0 \/
    y_of_x taud_D1_num_x y1 y2 y3 y4 y5 y6  < &0 \/
    y_of_x taud_D2_num_x y1 y2 y3 y4 y5 y6 < &0 \/
       taum y1 y2 y3 y4 y5 y6 > #0.12 \/
  delta_y y1 y2 y3 y4 y5 y6 < &20)`;
};;

add
{
  idv="9504486349";
  doc="When delta <= 20, delta is monotonic decreasing in y1.
    Hence smallest y1 on the comain delta <= 20 occurs when delta =20.
   This gives a lower bound flat_term (y1 @ del20) <= taud on the domain delta <= 20.";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Tex;Xconvert;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52); 
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
    (
    y_of_x delta_x1 y1 y2 y3 y4 y5 y6 < &0 \/
  delta_y y1 y2 y3 y4 y5 y6 > &20 \/
  delta_y y1 y2 y3 y4 y5 y6 < &0 
)`;
};;

add
{
  idv="6601228004";
  doc="old name: local max v4*
    better local max test.
    This is the numerator of the 2nd derivative of the function taud.";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52); 
    (&2,y3,#2.52);
    (#3.01,y4,#3.237);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
    (
    y_of_x taud_D2_num_x y1 y2 y3 y4 y5 y6 < &0 \/
  delta_y y1 y2 y3 y4 y5 y6 > &20 \/
  delta_y y1 y2 y3 y4 y5 y6 < &0 
)`;
};;

add
{
  idv="3665919985";
  doc=" 'A' piece lower bound for terminal pent.";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52); 
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#3.01,y5,#3.237);
    (#3.01,y6,#3.237)
  ]
(taum y1 y2 y3 y4 y5 y6 > #0.541
)`;
};;

add
{
  idv="7903347843";
  doc="
    local fan/main estimate/terminal pent
    LHS(135,taum>=0.12) RHS(126,y1=2,delta>20)
    ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#3.01,y5,#3.237);
    (#3.01,y6,#3.237)
  ]
(
    (taum y1 y2 y3 y4 y5 y6 + 
       y_of_x (mud_126_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6 - sol0 +
       #0.12
     > #0.616) 
)
`;
};;

add
{
  idv="5546286427";
  doc="
    local fan/main estimate/terminal pent
    LHS(135,taum>=0.12) RHS(126,delta=0 (reduced from 20))
    ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#3.01,y5,#3.237);
    (#3.01,y6,#3.237)
  ]
(
  let d = &0 in
    ((taum y1 y2 y3 y4 y5 y6 + 
       y_of_x (flat_term2_126_x d (&4) (&4)) y1 y2 y3 y4 y5 y6 +
       #0.12
     > #0.616) \/
      y_of_x (delta_126_x (&4 * h0 * h0) (&4) (&4)) y1 y2 y3 y4 y5 y6 > d ))
`;
};;

add
{
  idv="7997589055";
  doc="
    local fan/main estimate/terminal pent
    LHS(135,y1=2) RHS(126,y1=2)
    ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#3.01,y5,#3.237);
    (#3.01,y6,#3.237)
  ]
(
    (taum y1 y2 y3 y4 y5 y6 + 
       y_of_x (mud_126_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6 - sol0 +
       y_of_x (mud_135_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6 - sol0
     > #0.616) 
)
`;
};;

add
{
  idv="8723570049";
  doc="local fan/main estimate/terminal pent
    y1=2.52, delta>=20, falls into taum>=0.12 case";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (#2.52,y1,#2.52); 
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (#3.01,y4,#3.237);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
(taum y1 y2 y3 y4 y5 y6 > #0.12 \/
delta_y y1 y2 y3 y4 y5 y6 < &20
)`;
};;

add
{
  idv="5429238960";
  doc="
    local fan/main estimate/terminal pent
    LHS(135,y1=2) RHS(126,y1=2.52), extra implicit assumption delta < 20.
    ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#3.01,y5,#3.237);
    (#3.01,y6,#3.237)
  ]
(
      y_of_x (delta_126_x (&4 * h0 * h0) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &20  \/
    (taum y1 y2 y3 y4 y5 y6 + 
       y_of_x (mud_135_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6 - sol0
     > #0.616))  
`;
};;

add
{
  idv="2565248885";
  doc="
    local fan/main estimate/terminal pent
    LHS(135,y1=2) RHS(126,delta <= 20 (reduce to delta=0 or previous case))
    ";
  tags=[Flypaper ["XFZFSWT"];Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
    (&2,y4,&2);
    (#3.01,y5,#3.237);
    (#3.01,y6,#3.237)
  ]
(
  let d = &0 in
    ((taum y1 y2 y3 y4 y5 y6 + 
       y_of_x (flat_term2_126_x d (&4) (&4)) y1 y2 y3 y4 y5 y6 +
       y_of_x (mud_135_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6 - sol0
     > #0.616) \/
      y_of_x (delta_126_x (&4 * h0 * h0) (&4) (&4)) y1 y2 y3 y4 y5 y6 > d ))
`;
};;

(* START OF HEX SECTION *)

skip
{
  idv="test-hex-numerical";
  doc="For cfsqp only.
    This is the numerator of the 2nd derivative of the function taud.";
  tags=[Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0);Deprecated];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52); 
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
    (((y_of_x taud_D1_num_x y1 y2 y3 y4 y5 y6) pow 2 > &0) \/
    (y_of_x taud_D2_num_x y1 y2 y3 y4 y5 y6 < &0 \/
       taum y1 y2 y3 y4 y5 y6 > #0.0 \/ // can adjust this later.
  delta_y y1 y2 y3 y4 y5 y6 < &15))`;
};;

add
{
  idv="4910585280";
  doc="local fan/main estimate/appendix/terminal hex
     2nd derivative test for taud.";
  tags=[Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52); 
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
    (y_of_x taud_D1_num_x y1 y2 y3 y4 y5 y6 > &0 \/
       y_of_x taud_D1_num_x y1 y2 y3 y4 y5 y6 < &0 \/
    (y_of_x taud_D2_num_x y1 y2 y3 y4 y5 y6 < &0 \/
       taum y1 y2 y3 y4 y5 y6 > &0 \/ 
  delta_y y1 y2 y3 y4 y5 y6 < &15))`;
};;

add
{
  idv="9692636487";
  doc="local fan/main estimate/appendix/terminal hex.
    2nd derivative test for taud.";
  tags=[Cfsqp;Xconvert;Tex;Penalty(500.0,5000.0)];
  ineq = all_forall `ineq [
    (&2,y1,#2.52);
    (&2,y2,#2.52); 
    (&2,y3,#2.52);
    (#3.01,y4,#3.915);
    (&2,y5,&2);
    (&2,y6,&2)
  ]
    (
    (y_of_x taud_D2_num_x y1 y2 y3 y4 y5 y6 < &0 \/
  delta_y y1 y2 y3 y4 y5 y6 < &0) \/
  delta_y y1 y2 y3 y4 y5 y6 > &15
)`;
};;


let template_hex = `\ d234 d126 d135 c234 c126 c135 s45 s56 . ineq
   [
   (&2,y1,#2.52);
    (&2,y2,#2.52);
    (&2,y3,#2.52);
      (#3.01,y4,#3.915);
     (#3.01,y5,#3.915);
   (#3.01,y6,#3.915)
   ]
    (taum y1 y2 y3 y4 y5 y6 + 
       d234 + 
       d126 + 
       d135 
     > #0.712  \/ 
      y_of_x eulerA_x y1 y2 y3 y4 y5 y6 < &0 \/
       c234 \/
       c126 \/
       c135 \/
       s45 \/
       s56
)`;;

let mk_ineq_hex i234 i126 i135 = 
  let nth = List.nth in
  let d234 = nth [`   y_of_x (flat_term2_234_x (&0) (&4) (&4)) y1 y2 y3 y4 y5 y6 `;
		  `&0`;
          `y_of_x (mud_234_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6  -  sol0`;  
          `y_of_x (mudLs_234_x (&4) (&10) (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6  -  sol0`;  
	  `&0 - sol0`] i234 in
  let d126 = nth [`   y_of_x (flat_term2_126_x (&0) (&4) (&4)) y1 y2 y3 y4 y5 y6 `;
		  `&0`;
          `y_of_x (mud_126_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6  -  sol0`;  
          `y_of_x (mudLs_126_x (&4) (&10) (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6  -  sol0`;  
	  `&0 - sol0`] i126 in
  let d135 = nth [`   y_of_x (flat_term2_135_x (&0) (&4) (&4)) y1 y2 y3 y4 y5 y6 `;
		  `&0`;
          `y_of_x (mud_135_x_v1 (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6  -  sol0`;  
          `y_of_x (mudLs_135_x (&4) (&10) (&2) (&2) (&2)) y1 y2 y3 y4 y5 y6  -  sol0`;  
	  `&0 - sol0`] i135 in
  let c234 = nth [`y_of_x (delta_234_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &0 \/ 
		    y_of_x (delta_234_x (#2.52 pow 2) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &0`;
		  `F`;
		      `y_of_x (delta_234_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &100`;
		      `y_of_x (delta_234_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &16 \/
			y_of_x (delta_234_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &100`;
		      `y_of_x (delta_234_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &0 \/
			y_of_x (delta_234_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &16`;] i234 in
  let c126 = nth [`y_of_x (delta_126_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &0 \/ 
		    y_of_x (delta_126_x (#2.52 pow 2) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &0`;
		  `F`;
		      `y_of_x (delta_126_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &100`;
		      `y_of_x (delta_126_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &16 \/
			y_of_x (delta_126_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &100`;
		      `y_of_x (delta_126_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &0 \/
			y_of_x (delta_126_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &16`;] i126 in
  let c135 = nth [`y_of_x (delta_135_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &0 \/ 
		    y_of_x (delta_135_x (#2.52 pow 2) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &0`;
		  `F`;
		      `y_of_x (delta_135_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &100`;
		      `y_of_x (delta_135_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &16 \/
			y_of_x (delta_135_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &100`;
		      `y_of_x (delta_135_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 < &0 \/
			y_of_x (delta_135_x (&4) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &16`;] i135 in
  let s45 = if (i135= i234) then `y4 < y5` else `F` in
  let s56 = if (i126= i135) then `y5 < y6` else `F` in
 rhs(concl(REWRITE_CONV[] (Ineq.mk_tplate template_hex [d234;d126;d135;c234;c126;c135;s45;s56])));;


let make_hex_ear i234 i126 i135 = 
   {
    idv = Printf.sprintf "7550003505 %d %d %d" i234 i126 i135;
    ineq = mk_ineq_hex i234 i126 i135;
    doc = "local fan/main estimate/terminal hex/body";
    tags=[Cfsqp;Xconvert;Penalty(50.0,500.0)];
  };;

let runhh i234 i126 i135 = try (run(make_hex_ear i234 i126 i135)) with _ -> () ;;
let run2hh i234 i126 i135 = try (
  let _ = run2(make_hex_ear i234 i126 i135) in ()) with _ -> () ;;

for i1=0 to 4 do
for i2=i1 to 4 do 
for i3=i2 to 4 do 
      run2hh i1 i2 i3 done done done;;





let install_functions () = 
  let _ = map Parse_ineq.autogen_add [mu_y;delta_x1;taud;] in
  let _ = map Parse_ineq.macro_add[ mud_135_x;
			      mud_126_x;mud_234_x;mudLs_234_x;mudLs_135_x;mudLs_126_x;
			      taud_x;nonfunctional_mu6_x;nonfunctional_taud_D1;
			    nonfunctional_taud_D2;
			    nonfunctional_edge2_126_x;
			    nonfunctional_edge2_135_x;
			    nonfunctional_edge2_234_x;
			    flat_term2_126_x;
				       flat_term2_135_x;flat_term2_234_x] in
  let _ = map Function_list.function_add
    [functional_delta_x1;mu6_x;taud_x_ALT;taud_D2_num_x;taud_D1_num_x;
    functional_mud_135_x;functional_mud_126_x;functional_mud_234_x;mudLs_234_x;mudLs_126_x;mudLs_135_x;
    ups_126;
    functional_edge2_126_x;functional_edge2_135_x;functional_edge2_234_x;
    flat_term2_126_x;flat_term2_135_x;flat_term2_234_x] in
    "remember to reload Auto_lib, etc.";;

(*
    map Parse_ineq.autogen_remove [edge_flatD_x1;taud_v4_D2_num;taud;taud_D2_num_x];; 
    map Parse_ineq.macro_remove [taud_D2_num_x;edge_126_x;edge_135_x;
				 functional_edge_135_x;flat_term_126_x;flat_term_135_x;
				functional_edge_126_x;mudd_135_x;mudd_126_x;			   
      mudd_135_x_v2;mudd_126_x_v2;
];; 

   map Function_list.function_remove [mu_y;taud_x;delta_x1;functional_edge_126_x;
				       functional_edge_135_x;];; 
*)


Parse_ineq.autogen_remove mudL_234_x;;
Function_list.function_remove mudL_234_x;;
1;;    


(*

flyspeck_needs "nonlinear/scripts.hl";;

    let run s = 
      let _ = Ineq.add s in
	Scripts.one_cfsqp s.idv;;

    rflyspeck_needs   "nonlinear/auto_lib.hl";;

    let run2 s = 
      let _ = Ineq.add s in
	Auto_lib.testsplit true s.idv;;

    let run2f s = 
      let _ = Ineq.add s in
	Auto_lib.testsplit false s.idv;;



Auto_lib.testsplit true "7796879304";;
map (Auto_lib.testsplit true)  cases;;
  

map Scripts.one_cfsqp cases;;
*)

map (Auto_lib.testsplit true) ["test U1";"test U2";"test U3";
"test U4";"test U5";"test U6";
"test U7";"test U8";"test U9";
"test U10";];;


