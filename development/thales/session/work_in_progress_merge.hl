

module Merge_ineq2 = struct

open Hales_tactic;;
open Merge_ineq;;


(* ========================================================================== *)
(* COMPLETED LEMMAS  *)
(* ========================================================================== *)




(* ========================================================================== *)
(* WORK IN PROGRESS *)
(* ========================================================================== *)

end;;

let LET_THM = CONJ LET_DEF LET_END_DEF;;

Functional_equation.functional_overload();;


let DOT_LSUB  = prove_by_refinement(
  `!x y (z:real^A). (x - y) dot z = x dot z - y dot z`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  BY(VECTOR_ARITH_TAC)
  ]);;
  (* }}} *)

let DOT_RSUB  = prove_by_refinement(
  `!x y (z:real^A). x dot (y - z) = x dot y - x dot z `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  BY(VECTOR_ARITH_TAC)
  ]);;
  (* }}} *)

let euler_p_eulerA_x = prove_by_refinement(
  `!(v0:real^A) v1 v2 v3. 
    (let x1 = dist(v0,v1) pow 2 in 
     let x2 = dist(v0,v2) pow 2 in 
     let x3 = dist(v0,v3) pow 2 in
     let x4 = dist(v2,v3) pow 2 in
     let x5 = dist(v1,v3) pow 2 in
     let x6 = dist(v1,v2) pow 2 in
       (euler_p v0 v1 v2 v3 = eulerA_x x1 x2 x3 x4 x5 x6))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_DEF;LET_END_DEF;Sphere.euler_p;Sphere.eulerA_x;Sphere.ylist];
  REPEAT WEAKER_STRIP_TAC;
  REPEAT (GMATCH_SIMP_TAC POW_2_SQRT);
  REWRITE_TAC[DIST_POS_LE];
  MATCH_MP_TAC (arith `b = b' ==> a + b = a + b'`);
  MATCH_MP_TAC (arith `a = a' /\ b = b' /\ c = c' ==> ra * a + rb * b + rc * c = ra * a' + rb * b' + rc * c'`);
  REWRITE_TAC[Collect_geom2.DIST_POW2_DOT];
  REWRITE_TAC[DOT_LSUB;DOT_RSUB];
  REWRITE_TAC[DOT_SYM];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

(* was DELTA_IMP_DIH_PI *)

let COPLANAR_IMP_DIH_PI = prove_by_refinement(
  `!(v0:real^3) v1 v2 v3. (let y1 = dist(v0,v1)  in 
     let y2 = dist(v0,v2)  in 
     let y3 = dist(v0,v3)  in
     let y4 = dist(v2,v3)  in
     let y5 = dist(v1,v3)  in
     let y6 = dist(v1,v2)  in
       (~collinear {v0, v1, v2} /\ ~collinear {v0, v1, v3} /\ coplanar {v0,v1,v2,v3} /\ 
	  y_of_x delta_x4 y1 y2 y3 y4 y5 y6 < &0 ==>
	  dihV v0 v1 v2 v3 = pi))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_DEF;LET_END_DEF];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `coplanar` MP_TAC;
  GMATCH_SIMP_TAC (GSYM DIHV_EQ_0_PI_EQ_COPLANAR);
  ASM_REWRITE_TAC[];
  TYPIFY `(&0 < dihV v0 v1 v2 v3 )` ENOUGH_TO_SHOW_TAC;
    BY(REAL_ARITH_TAC);
  INTRO_TAC Euler_complement.OJEKOJF2 [`v0`;`v1`;`v2`;`v3`];
  REWRITE_TAC[LET_DEF;LET_END_DEF];
  ASM_REWRITE_TAC[];
  DISCH_THEN SUBST1_TAC;
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[Sphere.y_of_x;arith `x*x = x pow 2`];
  TYPIFY `d4 = delta_x4 (dist (v0,v1) pow 2) (dist (v0,v2) pow 2) (dist (v0,v3) pow 2)  (dist (v2,v3) pow 2) (dist (v1,v3) pow 2) (dist (v1,v2) pow 2)` TYPED_ABBREV_TAC;
  DISCH_TAC;
  TYPIFY `!x y. (y < &0 ==> atn2 (x,y) = --(pi / &2) - atn (x / y))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(MESON_TAC[Trigonometry1.ATN2_BREAKDOWN]);
  FIRST_X_ASSUM (unlist ASM_SIMP_TAC);
  MATCH_MP_TAC (arith `&0 < pi /\ -- (pi / &2) < a  ==> &0 < pi/ &2 - ( -- (pi/ &2) - a)`);
  REWRITE_TAC[PI_POS];
  BY(REWRITE_TAC[ATN_BOUNDS])
  ]);;
  (* }}} *)

let DIH_IMP_EULER_A_POS = prove_by_refinement(
  `main_nonlinear_terminal_v9 ==> (!(v0:real^3) v1 v2 v3. (let y1 = dist(v0,v1)  in 
     let y2 = dist(v0,v2)  in 
     let y3 = dist(v0,v3)  in
     let y4 = dist(v2,v3)  in
     let y5 = dist(v1,v3)  in
     let y6 = dist(v1,v2)  in
       (~collinear {v0,v1,v2} /\ ~collinear {v0,v2,v3} /\ ~collinear{v0,v1,v3} /\
	  dihV v0 v1 v2 v3 + dihV v0 v2 v3 v1 + dihV v0 v3 v1 v2 < &2 * pi /\
	  &2 <= y1 /\ y1 <= &2 * h0 /\
	  &2 <= y2 /\ y2 <= &2 * h0 /\
	  &2 <= y3 /\ y3 <= &2 * h0 /\
	  #3.01 <= y4 /\ y4 <= #3.915 /\
	  #3.01 <= y5 /\ y5 <= #3.915 /\
	  #3.01 <= y6 /\ y6 <= #3.915 ==>
	  y_of_x eulerA_x y1 y2 y3 y4 y5 y6 > &0)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_DEF;LET_END_DEF];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `&0 < delta_y (dist(v0,v1)) (dist(v0,v2)) (dist(v0,v3)) (dist(v2,v3)) (dist(v1,v3)) (dist(v1,v2))` ASM_CASES_TAC;
    INTRO_TAC Euler_main_theorem.EULER_TRIANGLE [`v0`;`v1`;`v2`;`v3`];
    REWRITE_TAC[LET_DEF;LET_END_DEF;Sphere.xlist;Sphere.ylist];
    ANTS_TAC;
      BY(ASM_REWRITE_TAC[arith `x pow 2 = x * x`;GSYM Sphere.delta_y]);
    DISCH_TAC;
    FIRST_X_ASSUM_ST `&2 * pi` MP_TAC;
    REWRITE_TAC[arith `dd < &2 * pi <=> dd - pi < pi`];
    ASM_REWRITE_TAC[arith `(a + b+c) -pi = a + b + c - pi`];
    ASM_REWRITE_TAC[arith `x pow 2 = x * x`;GSYM Sphere.delta_y;arith `pi - u < pi <=> &0 < u`];
    REWRITE_TAC[ (REWRITE_RULE[LET_DEF;LET_END_DEF] euler_p_eulerA_x)];
    REWRITE_TAC[arith `x pow 2 = x * x`;GSYM Sphere.y_of_x];
    TYPIFY `p = y_of_x eulerA_x (dist (v0,v1)) (dist (v0,v2)) (dist (v0,v3)) (dist (v2,v3))   (dist (v1,v3))  (dist (v1,v2))` TYPED_ABBREV_TAC;
    REWRITE_TAC[arith `&0 < &2 * x <=> &0 < x`];
    GMATCH_SIMP_TAC Merge_ineq.ATN2_POS;
    CONJ_TAC;
      GMATCH_SIMP_TAC REAL_LT_RSQRT;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    BY(REAL_ARITH_TAC);
  COMMENT "case delta=0";
  TYPIFY `delta_y  (dist (v0,v1)) (dist (v0,v2)) (dist (v0,v3)) (dist (v2,v3))        (dist (v1,v3))        (dist (v1,v2)) = &0` (C SUBGOAL_THEN ASSUME_TAC);
    INTRO_TAC Terminal.DELTA_Y_POS_4POINTS [`v0`;`v1`;`v2`;`v3`];
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  PROOF_BY_CONTR_TAC;
  TYPIFY `coplanar {v0,v1,v2,v3}` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[ONCE_REWRITE_RULE[TAUT `(~a <=> b) <=> (a <=> ~b)`] Oxlzlez.coplanar_delta_y];
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `{v0,v2,v3,v1} = {v0,v1,v2,v3} /\ {v0,v3,v1,v2} = {v0,v1,v2,v3}` (C SUBGOAL_THEN ASSUME_TAC);
    BY(SET_TAC[]);
  TYPIFY `{v0,v2,v1} = {v0,v1,v2} /\ {v0,v3,v2} = {v0,v2,v3} /\ {v0,v3,v1} = {v0,v1,v3}` (C SUBGOAL_THEN ASSUME_TAC);
    BY(SET_TAC[]);
  INTRO_TAC (Terminal.get_main_nonlinear "7439076204") [`dist(v0,v1)`;`dist(v0,v2)`;`dist(v0,v3)`;`dist(v2,v3)`;`dist(v1,v3)`;`dist(v1,v2)`];
  ASM_REWRITE_TAC[Sphere.ineq;TAUT `a ==> b ==> c <=> a /\ b ==> c`];
  DISCH_THEN MP_TAC THEN ANTS_TAC;
    BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
  DISCH_TAC;
  TYPIFY `dihV v0 v1 v2 v3 = pi` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC (REWRITE_RULE[LET_THM] COPLANAR_IMP_DIH_PI);
    BY(ASM_REWRITE_TAC[]);
  INTRO_TAC (Terminal.get_main_nonlinear "7439076204") [`dist(v0,v2)`;`dist(v0,v3)`;`dist(v0,v1)`;`dist(v3,v1)`;`dist(v2,v1)`;`dist(v2,v3)`];
  ASM_REWRITE_TAC[Sphere.ineq;TAUT `a ==> b ==> c <=> a /\ b ==> c`];
  DISCH_THEN MP_TAC THEN ANTS_TAC;
    BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0;DIST_SYM] THEN REAL_ARITH_TAC);
  TYPIFY_GOAL_THEN `y_of_x eulerA_x (dist (v0,v2)) (dist (v0,v3)) (dist (v0,v1)) (dist (v3,v1)) (dist (v2,v1)) (dist (v2,v3)) = y_of_x eulerA_x (dist (v0,v1)) (dist (v0,v2)) (dist (v0,v3))        (dist (v2,v3))        (dist (v1,v3))        (dist (v1,v2))` (unlist ASM_REWRITE_TAC);
    REWRITE_TAC[DIST_SYM;Sphere.y_of_x];
    BY(MESON_TAC[Merge_ineq.eulerA_x_sym]);
  DISCH_TAC;
  TYPIFY `dihV v0 v2 v3 v1 = pi` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC (REWRITE_RULE[LET_THM] COPLANAR_IMP_DIH_PI);
    BY(ASM_REWRITE_TAC[]);
  INTRO_TAC (Terminal.get_main_nonlinear "7439076204") [`dist(v0,v3)`;`dist(v0,v1)`;`dist(v0,v2)`;`dist(v1,v2)`;`dist(v3,v2)`;`dist(v3,v1)`];
  ASM_REWRITE_TAC[Sphere.ineq;TAUT `a ==> b ==> c <=> a /\ b ==> c`];
  DISCH_THEN MP_TAC THEN ANTS_TAC;
    BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0;DIST_SYM] THEN REAL_ARITH_TAC);
  TYPIFY_GOAL_THEN `y_of_x eulerA_x (dist (v0,v3)) (dist (v0,v1)) (dist (v0,v2)) (dist (v1,v2)) (dist (v3,v2)) (dist (v3,v1)) =  y_of_x eulerA_x (dist (v0,v1)) (dist (v0,v2)) (dist (v0,v3))        (dist (v2,v3))        (dist (v1,v3))        (dist (v1,v2))` (unlist ASM_REWRITE_TAC);
    REWRITE_TAC[DIST_SYM;Sphere.y_of_x];
    BY(MESON_TAC[Merge_ineq.eulerA_x_sym]);
  DISCH_TAC;
  TYPIFY `dihV v0 v3 v1 v2 = pi` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC (REWRITE_RULE[LET_THM] COPLANAR_IMP_DIH_PI);
    BY(ASM_REWRITE_TAC[]);
  REPEAT (FIRST_X_ASSUM_ST `dihV` MP_TAC);
  MP_TAC PI_POS;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let ups_x_delta_x = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    delta_x4 x1 x2 x3 x4 x5 x6 pow 2 + &4 * x1 * delta_x x1 x2 x3 x4 x5 x6 = ups_x x1 x3 x5 * ups_x x1 x2 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.delta_x4;Sphere.delta_x;Sphere.ups_x];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

(* DERIVATIVES *)

let derived_form_b = prove_by_refinement(
  `!b f f' x s. derived_form b f f' x s <=> (b ==> derived_form T f f' x s)`,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[Calc_derivative.derived_form])
  ]);;
  (* }}} *)

let derived_form_delta_x_wrt_x4 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. 
    derived_form T (\q. delta_x x1 x2 x3 q x5 x6) (delta_x4 x1 x2 x3 x4 x5 x6) (x4) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Sphere.delta_x4;Sphere.delta_x];
  DERIVED_TAC (MP_TAC);
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_delta_x_wrt_x5 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. 
    derived_form T (\q. delta_x x1 x2 x3 x4 q x6) (delta_x5 x1 x2 x3 x4 x5 x6) (x5) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Nonlin_def.delta_x5;Sphere.delta_x];
  DERIVED_TAC (MP_TAC);
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_delta_x_wrt_x6 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. 
    derived_form T (\q. delta_x x1 x2 x3 x4 x5 q) (delta_x6 x1 x2 x3 x4 x5 x6) (x6) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Nonlin_def.delta_x6;Sphere.delta_x];
  DERIVED_TAC (MP_TAC);
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_delta_x4_wrt_x4 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. 
    derived_form T (\q. delta_x4 x1 x2 x3 q x5 x6) (-- &2 * x1) (x4) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Sphere.delta_x4];
  DERIVED_TAC (MP_TAC);
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_delta_x4_wrt_x5 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. 
    derived_form T (\q. delta_x4 x1 x2 x3 x4 q x6) (x1 + x2 - x6) (x5) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Sphere.delta_x4];
  DERIVED_TAC (MP_TAC);
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_delta_x4_wrt_x6 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. 
    derived_form T (\q. delta_x4 x1 x2 x3 x4 x5 q) (x1 + x3 - x5) (x6) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Sphere.delta_x4];
  DERIVED_TAC (MP_TAC);
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_dih_x_wrt_x4 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    &0 < x1 /\
    &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < ups_x x1 x2 x6 /\
    &0 < ups_x x1 x3 x5 ==>
    derived_form T (\q. dih_x x1 x2 x3 q x5 x6) (sqrt x1 / sqrt (delta_x x1 x2 x3 x4 x5 x6)) (x4) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `w = (sqrt x1 / sqrt (delta_x x1 x2 x3 x4 x5 x6))`;
  REWRITE_TAC[Sphere.dih_x;LET_THM];
  DERIVED_TAC (MP_TAC o GEN_ALL o (GENL [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`]));
  DISCH_THEN (C INTRO_TAC [`(-- &2 * x1)`;`(delta_x4 x1 x2 x3 x4 x5 x6)`;`x1`;`x2`;`x3`;`x4`;`x5`;`x6`]);
  TYPIFY `&0 < &4 * x1 * delta_x x1 x2 x3 x4 x5 x6` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    REWRITE_TAC[arith `&0 < &4`];
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `&0 < sqrt(&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC REAL_LT_RSQRT;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  ONCE_REWRITE_TAC[derived_form_b];
  ANTS_TAC;
    ASM_REWRITE_TAC[derived_form_delta_x4_wrt_x4;derived_form_delta_x_wrt_x4;IN_UNIV;DE_MORGAN_THM];
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  REWRITE_TAC[];
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  TYPIFY `(sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6) pow 2 +  --delta_x4 x1 x2 x3 x4 x5 x6 pow 2) = ups_x x1 x3 x5 * ups_x x1 x2 x6 ` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC SQRT_POW_2;
    ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`];
    REWRITE_TAC[arith `(-- x) pow 2 = x pow 2`;GSYM ups_x_delta_x];
    BY(REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  TYPIFY `(((-- &2 * x1) * -- &1) * sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6) -  --delta_x4 x1 x2 x3 x4 x5 x6 *  (&4 * x1 * delta_x4 x1 x2 x3 x4 x5 x6) *  inv (&2 * sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)))  = (&2 * x1) * (ups_x x1 x3 x5 * ups_x x1 x2 x6) / sqrt(&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN SUBST1_TAC);
    FIRST_ASSUM ( SUBST1_TAC o GSYM);
    Calc_derivative.CALC_ID_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `((&2 * x1) *  (ups_x x1 x3 x5 * ups_x x1 x2 x6) /  sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)) / (ups_x x1 x3 x5 * ups_x x1 x2 x6) = sqrt(x1) / sqrt(delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    TYPIFY `&0 < sqrt(delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN ASSUME_TAC);
      GMATCH_SIMP_TAC REAL_LT_RSQRT;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    CONJ_TAC;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `sqrt(&4 * x1 * delta_x x1 x2 x3 x4 x5 x6) = &2 * sqrt(x1) * sqrt(delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN SUBST1_TAC);
      GMATCH_SIMP_TAC (GSYM SQRT_MUL);
      TYPIFY `&2 = sqrt(&4)` (C SUBGOAL_THEN SUBST1_TAC);
        MATCH_MP_TAC Upfzbzm_support_lemmas.SQRT_RULE_Euler_lemma;
        BY(REAL_ARITH_TAC);
      CONJ_TAC;
        BY(ASM_TAC THEN REAL_ARITH_TAC);
      GMATCH_SIMP_TAC (GSYM SQRT_MUL);
      REWRITE_TAC[arith `&0 <= &4`];
      GMATCH_SIMP_TAC REAL_LE_MUL;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `sqrt x1 * sqrt x1 = x1` (C SUBGOAL_THEN MP_TAC);
      GMATCH_SIMP_TAC (GSYM SQRT_MUL);
      GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `s = sqrt(delta_x x1 x2 x3 x4 x5 x6)` TYPED_ABBREV_TAC;
    REWRITE_TAC[arith `((&2 * sx * s) * u) * sx = &2 * (sx * sx) * s * u`];
    DISCH_THEN SUBST1_TAC;
    BY(REAL_ARITH_TAC);
  EXPAND_TAC "w";
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let derived_form_dih_x_wrt_x5 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    &0 < x1 /\
    &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < ups_x x1 x2 x6 /\
    &0 < ups_x x1 x3 x5 ==>
    derived_form T (\q. dih_x x1 x2 x3 x4 q x6) (--sqrt x1 *
 delta_x6 x1 x2 x3 x4 x5 x6 /
 (ups_x x1 x3 x5 * sqrt (delta_x x1 x2 x3 x4 x5 x6))) (x5) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `w = (--sqrt x1 * delta_x6 x1 x2 x3 x4 x5 x6 / (ups_x x1 x3 x5 * sqrt (delta_x x1 x2 x3 x4 x5 x6)))`;
  REWRITE_TAC[Sphere.dih_x;LET_THM];
  DERIVED_TAC (MP_TAC o GEN_ALL o (GENL [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`]));
  DISCH_THEN (C INTRO_TAC [`x1 + x2 - x6`;`(delta_x5 x1 x2 x3 x4 x5 x6)`;`x1`;`x2`;`x3`;`x4`;`x5`;`x6`]);
  TYPIFY `&0 < &4 * x1 * delta_x x1 x2 x3 x4 x5 x6` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    REWRITE_TAC[arith `&0 < &4`];
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `&0 < sqrt(&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC REAL_LT_RSQRT;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  ONCE_REWRITE_TAC[derived_form_b];
  ANTS_TAC;
    ASM_REWRITE_TAC[derived_form_delta_x4_wrt_x5;derived_form_delta_x_wrt_x5;IN_UNIV;DE_MORGAN_THM];
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  REWRITE_TAC[];
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  TYPIFY `(sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6) pow 2 +  --delta_x4 x1 x2 x3 x4 x5 x6 pow 2) = ups_x x1 x3 x5 * ups_x x1 x2 x6 ` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC SQRT_POW_2;
    ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`];
    REWRITE_TAC[arith `(-- x) pow 2 = x pow 2`;GSYM ups_x_delta_x];
    BY(REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  TYPIFY `(((x1 + x2 - x6) * -- &1) * sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6) -  --delta_x4 x1 x2 x3 x4 x5 x6 *  (&4 * x1 * delta_x5 x1 x2 x3 x4 x5 x6) *  inv (&2 * sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6))) = (-- &4 * x1 * ups_x x1 x2 x6 * delta_x6 x1 x2 x3 x4 x5 x6) / (&2 * sqrt(&4 * x1 * delta_x x1 x2 x3 x4 x5 x6))` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    CONJ_TAC;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    REWRITE_TAC[arith `(xx * s) * &2 * s = (s * s) * xx * &2`];
    GMATCH_SIMP_TAC (GSYM SQRT_MUL);
    ASM_SIMP_TAC[arith `&0 <x ==> &0 <= x`];
    GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx;
    ASM_SIMP_TAC[arith `&0 <x ==> &0 <= x`];
    TYPED_ABBREV_TAC `sq = sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)`;
    REWRITE_TAC[Sphere.delta_x;Nonlin_def.delta_x4;Nonlin_def.delta_x5;Nonlin_def.delta_x6;Sphere.ups_x];
    BY(REAL_ARITH_TAC);
  TYPIFY `(-- &4 * x1 * ups_x x1 x2 x6 * delta_x6 x1 x2 x3 x4 x5 x6) / (&2 * sqrt (&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)) / (ups_x x1 x3 x5 * ups_x x1 x2 x6) = -- sqrt x1 * delta_x6 x1 x2 x3 x4 x5 x6 / (ups_x x1 x3 x5 * sqrt(delta_x x1 x2 x3 x4 x5 x6))` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    TYPIFY `&0 < sqrt(delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN ASSUME_TAC);
      GMATCH_SIMP_TAC REAL_LT_RSQRT;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    CONJ_TAC;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `sqrt(&4 * x1 * delta_x x1 x2 x3 x4 x5 x6) = &2 * sqrt(x1) * sqrt(delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN SUBST1_TAC);
      GMATCH_SIMP_TAC (GSYM SQRT_MUL);
      TYPIFY `&2 = sqrt(&4)` (C SUBGOAL_THEN SUBST1_TAC);
        MATCH_MP_TAC Upfzbzm_support_lemmas.SQRT_RULE_Euler_lemma;
        BY(REAL_ARITH_TAC);
      CONJ_TAC;
        BY(ASM_TAC THEN REAL_ARITH_TAC);
      GMATCH_SIMP_TAC (GSYM SQRT_MUL);
      REWRITE_TAC[arith `&0 <= &4`];
      GMATCH_SIMP_TAC REAL_LE_MUL;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `sqrt x1 * sqrt x1 = x1` (C SUBGOAL_THEN MP_TAC);
      GMATCH_SIMP_TAC (GSYM SQRT_MUL);
      GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `s = sqrt(delta_x x1 x2 x3 x4 x5 x6)` TYPED_ABBREV_TAC;
    REWRITE_TAC[arith `((&2 * sx * s) * u) * sx = &2 * (sx * sx) * s * u`];
    BY(CONV_TAC REAL_RING);
  EXPAND_TAC "w";
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let derived_form_dih_x_wrt_x6 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    &0 < x1 /\
    &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < ups_x x1 x2 x6 /\
    &0 < ups_x x1 x3 x5 ==>
    derived_form T (\q. dih_x x1 x2 x3 x4 x5 q) (--sqrt x1 *
 delta_x5 x1 x2 x3 x4 x5 x6 /
 (ups_x x1 x2 x6 * sqrt (delta_x x1 x2 x3 x4 x5 x6))) (x6) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY_GOAL_THEN `!q. dih_x x1 x2 x3 x4 x5 q = dih_x x1 x3 x2 x4 q x5` (unlist REWRITE_TAC);
    BY(REWRITE_TAC[Nonlinear_lemma.dih_x_sym]);
  INTRO_TAC derived_form_dih_x_wrt_x5 [`x1`;`x3`;`x2`;`x4`;`x6`;`x5`];
  TYPIFY `delta_x x1 x3 x2 x4 x6 x5 = delta_x x1 x2 x3 x4 x5 x6` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_TAC THEN MESON_TAC[Merge_ineq.delta_x_sym]);
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  REWRITE_TAC[Nonlin_def.delta_x6;Nonlin_def.delta_x5];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_sum_dih = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 e1 e2 e3.
    &0 < x1 /\ &0 < x2 /\ &0 < x3 /\
    &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < ups_x x1 x2 x6 /\
    &0 < ups_x x1 x3 x5 /\
    &0 < ups_x x2 x3 x4 ==>
    derived_form T (\q. e1 * dih_x x1 x2 x3 q x5 x6
		   + e2 * dih_x x2 x3 x1 x5 x6 q 
		   + e3 * dih_x x3 x1 x2 x6 q x5) ((e1 * sqrt x1 * ups_x x2 x3 x4 -
  e2 * sqrt x2 * delta_x6 x1 x2 x3 x4 x5 x6 -
  e3 * sqrt x3 * delta_x5 x1 x2 x3 x4 x5 x6) /
 (ups_x x2 x3 x4 * sqrt (delta_x x1 x2 x3 x4 x5 x6))) (x4) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `w = (e1 * sqrt x1 * ups_x x2 x3 x4 -  e2 * sqrt x2 * delta_x6 x1 x2 x3 x4 x5 x6 -  e3 * sqrt x3 * delta_x5 x1 x2 x3 x4 x5 x6) / (ups_x x2 x3 x4 * sqrt (delta_x x1 x2 x3 x4 x5 x6))`;
  TYPIFY_GOAL_THEN `!q. e1 * dih_x x1 x2 x3 q x5 x6  + e2 * dih_x x2 x3 x1 x5 x6 q 		   + e3 * dih_x x3 x1 x2 x6 q x5 = e1 * (\q. dih_x x1 x2 x3 q x5 x6) q + e2 * (\q. dih_x x2 x3 x1 x5 x6 q) q + e3 * (\q. dih_x x3 x1 x2 x6 q x5) q` (unlist PURE_REWRITE_TAC);
    BY(REWRITE_TAC[]);
  TYPIFY `f1 = (\q. dih_x x1 x2 x3 q x5 x6)` TYPED_ABBREV_TAC;
  TYPIFY `f2 = (\q. dih_x x2 x3 x1 x5 x6 q)` TYPED_ABBREV_TAC;
  TYPIFY `f3 = (\q. dih_x x3 x1 x2 x6 q x5)` TYPED_ABBREV_TAC;
  DERIVED_TAC (MP_TAC o GEN_ALL o (GENL [`x1:real`;`x2:real`;`x3:real`;`x4:real`;`x5:real`;`x6:real`;`e1:real`;`e2:real`;`e3:real`]));
  DISCH_THEN (C INTRO_TAC [`f1`;`f2`;`f3`]);
  EXPAND_TAC "f1";
  DISCH_THEN (C INTRO_TAC [`(sqrt x1 / sqrt (delta_x x1 x2 x3 x4 x5 x6))`;`(--sqrt x2 * delta_x5 x2 x3 x1 x5 x6 x4 / (ups_x x2 x3 x4 * sqrt (delta_x x2 x3 x1 x5 x6 x4)))`;` (--sqrt x3 * delta_x6 x3 x1 x2 x6 x4 x5 / (ups_x x3 x2 x4 * sqrt (delta_x x3 x1 x2 x6 x4 x5)))`;`x1`;`x2`;`x3`;`x4`;`x5`;`x6`;`e1`;`e2`;`e3`]);
  ASM_SIMP_TAC[derived_form_dih_x_wrt_x4];
  TYPIFY `delta_x x2 x3 x1 x5 x6 x4 = delta_x x1 x2 x3 x4 x5 x6 /\ delta_x x3 x1 x2 x6 x4 x5 = delta_x x1 x2 x3 x4 x5 x6` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Merge_ineq.delta_x_sym]);
  TYPIFY `ups_x x2 x1 x6 = ups_x x1 x2 x6 /\ ups_x x3 x1 x5 = ups_x x1 x3 x5 /\ ups_x x3 x2 x4 = ups_x x2 x3 x4` (C SUBGOAL_THEN ASSUME_TAC);
    BY(REWRITE_TAC[Merge_ineq.ups_x_sym]);
  ONCE_REWRITE_TAC[derived_form_b];
  ANTS_TAC;
    EXPAND_TAC "f2";
    EXPAND_TAC "f3";
    CONJ_TAC;
      MATCH_MP_TAC derived_form_dih_x_wrt_x6;
      BY(ASM_REWRITE_TAC[]);
    MATCH_MP_TAC derived_form_dih_x_wrt_x5;
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[];
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  ASM_REWRITE_TAC[];
  TYPIFY `delta_x5 x2 x3 x1 x5 x6 x4 = delta_x6 x1 x2 x3 x4 x5 x6` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[Nonlin_def.delta_x5;Nonlin_def.delta_x6];
    BY(REAL_ARITH_TAC);
  TYPIFY `delta_x6 x3 x1 x2 x6 x4 x5 = delta_x5 x1 x2 x3 x4 x5 x6` (C SUBGOAL_THEN SUBST1_TAC);
    REWRITE_TAC[Nonlin_def.delta_x5;Nonlin_def.delta_x6];
    BY(REAL_ARITH_TAC);
  TYPIFY `&0 < sqrt(delta_x x1 x2 x3 x4 x5 x6)` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC REAL_LT_RSQRT;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `e1 * sqrt x1 / sqrt (delta_x x1 x2 x3 x4 x5 x6) + e2 * --sqrt x2 * delta_x6 x1 x2 x3 x4 x5 x6 / (ups_x x2 x3 x4 * sqrt (delta_x x1 x2 x3 x4 x5 x6)) + e3 * --sqrt x3 * delta_x5 x1 x2 x3 x4 x5 x6 / (ups_x x2 x3 x4 * sqrt (delta_x x1 x2 x3 x4 x5 x6)) = (e1 * sqrt x1 * ups_x x2 x3 x4 - e2 * sqrt x2 * delta_x6 x1 x2 x3 x4 x5 x6 - e3 * sqrt x3 * delta_x5 x1 x2 x3 x4 x5 x6) / (ups_x x2 x3 x4 * sqrt(delta_x x1 x2 x3 x4 x5 x6))` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  EXPAND_TAC "w";
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let derived_form_sum_dih444 = prove_by_refinement(
  `!x4 x5 x6 e1 e2 e3.
    &0 < x4 /\ x4 < &16 /\
    &0 < x5 /\ x5 < &16 /\
    &0 < x6 /\ x6 < &16 /\
    &0 < delta_x (&4) (&4) (&4) x4 x5 x6 ==>
    derived_form T (\q. e1 * dih_x (&4) (&4) (&4) q x5 x6
		   + e2 * dih_x (&4) (&4) (&4) x5 x6 q 
		   + e3 * dih_x (&4) (&4) (&4) x6 q x5) 
    (( num1 e1 e2 e3 x4 x5 x6 ) / (&2 * x4 * (&16 - x4) * sqrt(delta_x (&4) (&4) (&4) x4 x5 x6))) (x4) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ONCE_REWRITE_TAC[arith `a / (&2 * b) = (a/ &2) / b`];
  INTRO_TAC derived_form_sum_dih [`&4`;`&4`;`&4`;`x4`;`x5`;`x6`;`e1`;`e2`;`e3`];
  TYPIFY_GOAL_THEN `!x. ups_x (&4) (&4) (x) = x * (&16 - x)` (unlist REWRITE_TAC);
    ASM_REWRITE_TAC[Sphere.ups_x;arith `&0 < &4`];
    TYPIFY_GOAL_THEN `!x6. -- &4 * &4 - &4 * &4 - x6 * x6 + &2 * &4 * x6 + &2 * &4 * &4 + &2 * &4 * x6 = x6 * (&16- x6)` (unlist REWRITE_TAC);
    BY(REAL_ARITH_TAC);
  ANTS_TAC;
    REPEAT (GMATCH_SIMP_TAC REAL_LT_MUL_EQ);
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REWRITE_TAC[REAL_MUL_AC;Collect_geom2.SQRT4_EQ2];
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  REWRITE_TAC[Sphere.num1;Nonlin_def.delta_x6;Nonlin_def.delta_x5];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_num1 = prove_by_refinement(
  `!x4 x5 x6 e1 e2 e3.
    derived_form T  (\q. num1 e1 e2 e3 q x5 x6)  (&4 * ((&16 - &2 * x4) * e1 + (x5 - &8) * e2 + (x6 - &8) * e3))
    (x4) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[Sphere.num1];
  DERIVED_TAC MP_TAC;
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let derived_form_dnum1 = prove_by_refinement(
  `!x4 x5 x6 e1 e2 e3.
    derived_form T  (\q. num1 e1 e2 e3 q x5 x6)  (&4 * dnum1 e1 e2 e3 x4 x5 x6)
    (x4) (:real)`,
  (* {{{ proof *)
  [
   BY(REWRITE_TAC[Nonlin_def.dnum1;derived_form_num1])
  ]);;
  (* }}} *)

let derived_form_tau2D = prove_by_refinement(
  `!x4 x5 x6 e1 e2 e3.
    &0 < x4 /\ x4 < &16 /\
    &0 < x5 /\ x5 < &16 /\
    &0 < x6 /\ x6 < &16 /\
    &0 < delta_x (&4) (&4) (&4) x4 x5 x6 /\
    num1 e1 e2 e3 x4 x5 x6 = &0 ==>
    derived_form T
    (\q. ( num1 e1 e2 e3 q x5 x6) / (&2 * q * (&16 - q) * sqrt(delta_x (&4) (&4) (&4) q x5 x6))) 
    ((&4 * dnum1 e1 e2 e3 x4 x5 x6) / 
       (&2 * x4 * (&16 - x4) * sqrt(delta_x (&4) (&4) (&4) x4 x5 x6)))
     (x4) (:real)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `    (\q. ( num1 e1 e2 e3 q x5 x6) / (&2 * q * (&16 - q) * sqrt(delta_x (&4) (&4) (&4) q x5 x6))) =     (\q. (\q.  num1 e1 e2 e3 q x5 x6) q   / (\q. &2 * q * (&16 - q) * sqrt(delta_x (&4) (&4) (&4) q x5 x6)) q) ` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[FUN_EQ_THM]);
  TYPIFY `(f:real->real) =  (\q. num1 e1 e2 e3 q x5 x6 )` TYPED_ABBREV_TAC;
  TYPIFY `(g:real->real) = (\q. &2 * q * (&16 - q) * sqrt (delta_x (&4) (&4) (&4) q x5 x6))` TYPED_ABBREV_TAC;
  DERIVED_TAC (MP_TAC o GEN_ALL);
  MP_TAC (diff `(\q. &2 * q * (&16 - q) * sqrt (delta_x (&4) (&4) (&4) q x5 x6))` [Sphere.delta_x] `x4:real` `(:real)`);
  ASM_REWRITE_TAC[];
  DISCH_TAC;
  TYPIFY `(g':real) = (&2 *  (x4 *   ((&16 - x4) *    (&4 * (x4 * -- &1 + -- &4 + &4 + &4 - x4 + x5 + x6) +     &4 * x5 +     &4 * x6 - &4 * &4 - x5 * x6) *    inv (&2 * sqrt (delta_x (&4) (&4) (&4) x4 x5 x6)) +    -- &1 * sqrt (delta_x (&4) (&4) (&4) x4 x5 x6)) +   (&16 - x4) * sqrt (delta_x (&4) (&4) (&4) x4 x5 x6)))` TYPED_ABBREV_TAC;
  DISCH_THEN (C INTRO_TAC [`&4 * dnum1 e1 e2 e3 x4 x5 x6`;`f`;`g'`;`g`;`x4`]);
  ASM_REWRITE_TAC[];
  EXPAND_TAC "f";
  REWRITE_TAC[derived_form_dnum1];
  EXPAND_TAC "g";
  ASM_REWRITE_TAC[arith `&0 * x = &0 /\ &0 / x = &0 /\ x - &0 = x`];
  ONCE_REWRITE_TAC[derived_form_b];
  TYPIFY `~(&2 * x4 * (&16 - x4) * sqrt (delta_x (&4) (&4) (&4) x4 x5 x6) = &0)` (C SUBGOAL_THEN ASSUME_TAC);
    REWRITE_TAC[REAL_ENTIRE;DE_MORGAN_THM];
    TYPIFY_GOAL_THEN `~(sqrt(delta_x (&4) (&4) (&4) x4 x5 x6) = &0)` (unlist REWRITE_TAC);
      GMATCH_SIMP_TAC SQRT_EQ_0;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  TYPIFY `d = (&2 * x4 * (&16 - x4) * sqrt (delta_x (&4) (&4) (&4) x4 x5 x6))` TYPED_ABBREV_TAC;
  MATCH_MP_TAC (TAUT `(x <=> y) ==> (x ==> y)`);
  REPEAT (AP_THM_TAC ORELSE AP_TERM_TAC);
  Calc_derivative.CALC_ID_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let delta_y_dim_reduction = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. 
 (let x6' = &8 * (&1 - (y1 * y1 + y2*y2 - y6*y6)/(&2* y1 * y2)) in
  let x5' = &8 * (&1 - (y1*y1 + y3*y3 - y5*y5)/(&2 * y1 * y3)) in
  let x4' = &8 * (&1 - (y2*y2 + y3*y3 - y4*y4)/(&2*y2*y3)) in
    (~(y1 = &0) /\ ~(y2 = &0) /\ ~(y3 = &0) ==>
    delta_x (&4) (&4) (&4) x4' x5' x6' = &64 * delta_y y1 y2 y3 y4 y5 y6 / ((y1 * y2 * y3) pow 2)))
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_THM];
  REWRITE_TAC[Sphere.delta_x;Sphere.delta_y];
  BY(CONV_TAC REAL_FIELD)
  ]);;
  (* }}} *)

let delta_x4_dim_reduction = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6. 
 (let x6' = &8 * (&1 - (y1 * y1 + y2*y2 - y6*y6)/(&2* y1 * y2)) in
  let x5' = &8 * (&1 - (y1*y1 + y3*y3 - y5*y5)/(&2 * y1 * y3)) in
  let x4' = &8 * (&1 - (y2*y2 + y3*y3 - y4*y4)/(&2*y2*y3)) in
    (~(y1 = &0) /\ ~(y2 = &0) /\ ~(y3 = &0) ==>
    delta_x4 (&4) (&4) (&4) x4' x5' x6' = &16 * y_of_x delta_x4 y1 y2 y3 y4 y5 y6 / (y1 * y1 * y2 * y3)))
    `,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_THM];
  REWRITE_TAC[Sphere.delta_x4;Sphere.y_of_x];
  BY(CONV_TAC REAL_FIELD)
  ]);;
  (* }}} *)

let dih_x_dim_reduction = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6.
 (let x6' = &8 * (&1 - (y1 * y1 + y2*y2 - y6*y6)/(&2* y1 * y2)) in
  let x5' = &8 * (&1 - (y1*y1 + y3*y3 - y5*y5)/(&2 * y1 * y3)) in
  let x4' = &8 * (&1 - (y2*y2 + y3*y3 - y4*y4)/(&2*y2*y3)) in
    ((&0 < y1) /\ (&2 < y2) /\ (&0 < y3) /\ &0 < delta_y y1 y2 y3 y4 y5 y6 ==>
       dih_x (&4) (&4) (&4) x4' x5' x6' = dih_y y1 y2 y3 y4 y5 y6))
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.dih_x;Sphere.dih_y;LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `~(y1 = &0) /\ ~(y2 = &0) /\ ~(y3 = &0)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  ASM_SIMP_TAC[REWRITE_RULE[LET_THM] delta_x4_dim_reduction;REWRITE_RULE[LET_THM] delta_y_dim_reduction];
  REWRITE_TAC[GSYM Sphere.y_of_x];
  TYPIFY `sqrt (&4 * &4 * &64 * delta_y y1 y2 y3 y4 y5 y6 / (y1 * y2 * y3) pow 2) = &16 * sqrt (&4 * (y1 * y1) * y_of_x delta_x y1 y2 y3 y4 y5 y6) / (y1 * y1 * y2 * y3)` (C SUBGOAL_THEN SUBST1_TAC);
    Calc_derivative.CALC_ID_TAC;
    ASM_REWRITE_TAC[];
    TYPIFY `&0 < y1 * y1 * y2 * y3` (C SUBGOAL_THEN ASSUME_TAC);
      REPEAT (GMATCH_SIMP_TAC REAL_LT_MUL);
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `y1 * y1 * y2 * y3 = sqrt((y1 * y1 * y2 * y3) pow 2)` (C SUBGOAL_THEN SUBST1_TAC);
      GMATCH_SIMP_TAC POW_2_SQRT;
      BY(ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`]);
    GMATCH_SIMP_TAC (GSYM SQRT_MUL);
    REWRITE_TAC[ REAL_LE_POW_2];
    GMATCH_SIMP_TAC (arith `&0 <= d/ y ==> &0 <= &4 * &4 * &64 * d / y`);
    GMATCH_SIMP_TAC REAL_LE_RDIV_EQ;
    CONJ_TAC;
      REPEAT (GMATCH_SIMP_TAC REAL_LT_MUL);
      REWRITE_TAC[GSYM Trigonometry2.NOT_ZERO_EQ_POW2_LT];
      REWRITE_TAC[REAL_ENTIRE];
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    CONJ_TAC;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    TYPIFY `&16 * sqrt (&4 * (y1 * y1) * y_of_x delta_x y1 y2 y3 y4 y5 y6)  = sqrt (&16 pow 2 * &4 * (y1 * y1) * y_of_x delta_x y1 y2 y3 y4 y5 y6)` (C SUBGOAL_THEN SUBST1_TAC);
      TYPIFY `&16 = sqrt(&16 pow 2)` (C SUBGOAL_THEN SUBST1_TAC);
        REWRITE_TAC[POW_2_SQRT_ABS];
        BY(REAL_ARITH_TAC);
      GMATCH_SIMP_TAC (GSYM SQRT_MUL);
      CONJ_TAC;
        CONJ_TAC;
          BY(REAL_ARITH_TAC);
        GMATCH_SIMP_TAC (arith `&0 <= x ==> &0 <= &4 * x`);
        GMATCH_SIMP_TAC REAL_LE_MUL;
        REWRITE_TAC[ REAL_LE_SQUARE];
        REWRITE_TAC[Sphere.y_of_x;Sphere.delta_x;GSYM Sphere.delta_y];
        BY(ASM_TAC THEN REAL_ARITH_TAC);
      AP_TERM_TAC;
      REWRITE_TAC[POW_2_SQRT_ABS];
      BY(REAL_ARITH_TAC);
    REWRITE_TAC[arith `s - s' = &0 <=> s = s'`];
    AP_TERM_TAC;
    REWRITE_TAC[Sphere.y_of_x;Sphere.delta_x;GSYM Sphere.delta_y];
    Calc_derivative.CALC_ID_TAC;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `dx = y_of_x delta_x y1 y2 y3 y4 y5 y6` TYPED_ABBREV_TAC;
  TYPIFY `d4 =  y_of_x delta_x4 y1 y2 y3 y4 y5 y6 ` TYPED_ABBREV_TAC;
  TYPIFY `s = sqrt(&4 * (y1 * y1) * dx)` TYPED_ABBREV_TAC;
  REWRITE_TAC[arith `&16 * s / y = (&16 / y) * s`];
  REWRITE_TAC[arith `-- (a * d4) = a * -- d4`];
  GMATCH_SIMP_TAC Trigonometry1.ATN2_LMUL_EQ;
  GMATCH_SIMP_TAC REAL_LT_DIV;
  REPEAT (GMATCH_SIMP_TAC REAL_LT_MUL);
  BY(ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

