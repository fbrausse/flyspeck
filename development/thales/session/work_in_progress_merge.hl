flyspeck_needs "nonlinear/merge_ineq.hl";;


open Hales_tactic;;
open Searching;;
open Merge_ineq;;

let CALC_ID_TAC = Calc_derivative.CALC_ID_TAC;;



let cell3_from_ineq = `!y4 y5 y6.
   &2 <= y4 /\ &2 <= y5 /\ &2 <= y6 /\
    y4 <= &2 * sqrt(&2) /\ y5 <= &2 * sqrt(&2) /\ y6 <= &2 * sqrt(&2) /\
    eta_y (y4) (y5) (y6) < sqrt(&2) ==>
    &0 <= gamma3f y4 y5 y6 sqrt2 lmfun `;;

(* some conclusions *)

let leaf_def = `leaf V u0 u1 = { u |  u IN V /\ ~collinear {u0,u1,u} /\
				     radV {u0, u1, u2} < sqrt2 }`;;

let leaf_ordering_def = `leaf_ordering V u0 u1 v f n = 
  leaf V u0 u1 HAS_SIZE n /\
  (! i j. i < n /\ j < n /\ (f i = f j) ==> (i = j)) /\
    (f n = f 0) /\
    (!i. i < n ==> (f i IN leaf V u0 u1)) /\
    u0 IN V /\ u1 IN V /\
    (!i j. i < j ==> azim u0 u1 v (f i) < azim u0 u1 v (f (i+1)))`;;
    
let mcell_group_def = `mcell_group V u0 u1 f i = 
      {X |   X SUBSET wedge u0 u1 (f i) (f (i+1)) /\
	   {u0,u1} IN edgeX V X /\
         X IN mcell_set V /\
	 ~(NULLSET X) }`;;

let mcell_group_sum = `!V u0 u1 v f n i.
  packing V /\ saturated V /\
  leaf_ordering V u0 u1 v f n /\
  1 < n /\ i < n   ==>
  sum (mcell_group V u0 u1 f) (\X. dihX V X (u0,u1)) = azim u0 u1 (f i) (f (i+1))`;;

let mcell_group_4_type = `!V u0 u1 v f n X.
  packing V /\ saturated V /\
  leaf_ordering V u0 u1 v f n /\
  1 < n /\
  X IN mcell_set V /\
  ~(NULLSET X) /\
  {u0,u1} IN edgeX V X /\
  FST(cell_params V X) = 4 ==>
  (?i. i < n /\
     azim u0 u1 (f i) (f (i+1)) < pi /\
     radV {u0,u1,(f i),(f (i+1))} < sqrt2  /\
     X IN mcell_group V u0 u1 f i)`;;

let mcell_group_23_type = `!V u0 u1 v f n X.
  packing V /\ saturated V /\
  leaf_ordering V u0 u1 v f n /\
  1 < n /\
  X IN mcell_set V /\
  ~(NULLSET X) /\
  {u0,u1} IN edgeX V X /\
  FST(cell_params V X) IN {2,3} ==>
  (?i. i < n /\
     ~(azim u0 u1 (f i) (f (i+1)) < pi /\
     radV {u0,u1,(f i),(f (i+1))} < sqrt2)  /\
     X IN mcell_group V u0 u1 f i)`;;

(* consequence of previous 2 *)
let mcell_group_type = `!V u0 u1 v f n X.
  packing V /\ saturated V /\
  leaf_ordering V u0 u1 v f n /\
  1 < n /\ 
  u0 IN V /\ u1 IN V  
  X IN mcell_set V /\
  ~(NULLSET X) /\
  {u0,u1} IN edgeX V X ==>
  (?i. i < n /\ X IN mcell_group V u0 u1 f i)`;;

let mcell_group_4_singleton = `!V u0 u1 v f n i.
  packing V /\ saturated V /\
  leaf_ordering V u0 u1 v f n /\
  1 < n /\ i < n /\
  azim u0 u1 (f i) (f (i+1)) < pi /\
  radV {u0,u1,(f i),(f (i+1))} < sqrt2  ==>
  mcell_group V u0 u1 f i = {  mcell 4 V [u0;u1;(f i);(f (i+1))] }`;;

(* needed: ? *)

let mcell_sqrt2_barV = `!V u0 u1 w1 w2.
  packing V /\ saturated V /\
  {u0,u1,w1,w2} SUBSET V /\
  ~coplanar {u0,u1,w1,w2} /\
  radV {u0,u1,w1,w2} < sqrt2 ==>
  [u0;u1;w1;w2] IN barV V 3`;;

let mcell_group_3_a = `!V u0 u1 f v n i.
  packing V /\ saturated V /\
  leaf_ordering V u0 u1 v f n /\
  1 < n /\ i < n /\
  (azim u0 u1 (f i) (f (i+1)) >= pi \/
  radV {u0,u1,(f i),(f (i+1))} >= sqrt2)  ==>
  (?X w. X IN mcell_group V u0 u1 f i /\
     [u0;u1;(f i);w] IN barV V 3 /\
     X = mcell3 V [u0;u1;(f i);w])`;;

let mcell_group_3_b = `!V u0 u1 v f n i.
  packing V /\ saturated V /\
  leaf_ordering V u0 u1 v f n /\
  1 < n /\ i < n /\
  (azim u0 u1 (f i) (f (i+1)) >= pi \/
  radV {u0,u1,(f i),(f (i+1))} >= sqrt2)  ==>
  (?X w. X IN mcell_group V u0 u1 f i /\
     [u0;u1;(f i);w] IN barV V 3 /\
     X = mcell3 V [u0;u1;(f i);w])`;;

(*
need if mcell3 V ul = mcell3 V vl , ul, vl IN barV, NONNULL, and both start with [u0;u1]
the ul = vl.  In particular, the two mcells in 3_a and 3_b are distinct, and
the w is uniquely determined by X.
*)

let mcell_group_3_exhaust = 
  `!V u0 u1 v f n i X.
    packing V /\ saturated V /\
    leaf_ordering V u0 u1 v f n /\
    1 < n /\ i < n /\
    X IN mcell_group V u0 u1 f i /\  
    FST(cell_params V X) = 3 /\
  (?w u.
     u IN {(f i),(f (i+1))} /\
     X = mcell3 V [u0;u1;u;w] /\ [u0;u1;u;w] IN barV V 3)`;;

(* also need formula for 4-cell gamma, 3-cell gamma, 2-cell gamma (as a function of angle)
   in terms of the functions that appear in ineq.hl.
*)


(* ========================================================================== *)
(* COMPLETED LEMMAS  *)
(* ========================================================================== *)




let HJKDESR1a_1cell = prove_by_refinement(
  `&0 <  &8 * pi * sqrt2 / &3  -  &8 * mm1 `,
  (* {{{ proof *)
  [
  REWRITE_TAC[ arith `&8 * pi * sqrt2 / &3 = (&8 / &3) * (pi * sqrt2)`];
  MATCH_MP_TAC (arith `&3 * mm1 < z ==> &0 < (&8/ &3) * z  - &8 * mm1`);
  MATCH_MP_TAC REAL_LT_TRANS;
  EXISTS_TAC (`&3 * #1.3`);
  GMATCH_SIMP_TAC REAL_LT_LMUL_EQ;
  GMATCH_SIMP_TAC REAL_LT_MUL2;
  MP_TAC Flyspeck_constants.bounds;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let add_hyp s concl = 
  let nonlinear = map (fun t -> (hd(Ineq.getexact t)).ineq) s in
  let conj = end_itlist (curry mk_conj) nonlinear in
    mk_imp(conj,concl);;

let GRKIBMP_concl = 
  `!y. &2 <= y /\ y <= sqrt8 ==>
     &0 <= gamma2_x_div_azim (h0cut y) (y* y)`;;

(* Merge_ineq.lmfun_h0cut relates this to the function lmfun *)

let GRKIBMP = prove_by_refinement(
  (add_hyp ["GRKIBMP A"; "GRKIBMP B"] GRKIBMP_concl),
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REPEAT (FIRST_X_ASSUM (fun t -> INTRO_TAC t [`y`;`&1`;`&1`;`&1`;`&1`;`&1`]));
  REWRITE_TAC[Sphere.ineq;Sphere.y_of_x;arith `&1 * &1 = &1`;arith `&1 <= &1`;Functional_equation.nonf_gamma2_x1_div_a];
  ASM_CASES_TAC `&2 * hplus <= y`;
    ASM_REWRITE_TAC[arith `x >= &0 <=> &0 <= x`];
    REPEAT WEAK_STRIP_TAC;
    ENOUGH_TO_SHOW_TAC `h0cut y = &0`;
      BY(ASM_MESON_TAC[]);
    MATCH_MP_TAC Optimize.h0cutB;
    MP_TAC Nonlinear_lemma.h0_lt_hplus;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

(* see also Nonlinear_lemma.h0_lt_gt *)

let y_bounds = prove_by_refinement(
  `!y. (y <= &2 * hminus ==> y <= sqrt8) /\ 
    (y <= sqrt8 ==> y <= &2 * sqrt(&2)) /\
    (y <= &2 * sqrt(&2) ==> y < &4) /\
    (y < &2 * hminus ==> y <= &2 * hminus) /\
    (y < &2 * hminus ==> y <= &2 * sqrt(&2)) /\
    (&2 <= y ==> &0 < y) /\
    (&2 * hminus <= y ==> &2 <= y) /\
    (y <= &2 * hplus ==> y <= &2 * sqrt(&2)) `,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  MP_TAC Flyspeck_constants.bounds;
  REWRITE_TAC[GSYM Nonlinear_lemma.sqrt8_sqrt2;GSYM Sphere.sqrt2];
  MP_TAC Nonlinear_lemma.hminus_prop;
  REWRITE_TAC[Sphere.hplus];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let rad2_x_eta_x = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    &0 < x4 /\ &0 < x5 /\ &0 < x6 /\ 
    &0 < ups_x x4 x5 x6 /\ &0 < delta_x x1 x2 x3 x4 x5 x6 ==>
     eta_x x4 x5 x6 pow 2 <= rad2_x x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REWRITE_TAC[Sphere.rad2_x;Sphere.eta_x;GSYM Merge_ineq.rho_ij_rho_x];
  GMATCH_SIMP_TAC REAL_LE_RDIV_EQ;
  CONJ_TAC;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    ASM_REWRITE_TAC[];
    BY(REAL_ARITH_TAC);
  GMATCH_SIMP_TAC SQRT_POW_2;
  CONJ_TAC;
    GMATCH_SIMP_TAC REAL_LE_DIV;
    ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`];
    GMATCH_SIMP_TAC REAL_LE_MUL;
    GMATCH_SIMP_TAC REAL_LE_MUL;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  SUBGOAL_THEN `(x4 * x5 * x6) / ups_x x4 x5 x6 * delta_x x1 x2 x3 x4 x5 x6 * &4 = (&4 * delta_x x1 x2 x3 x4 x5 x6 * x4 * x5 * x6) / ups_x x4 x5 x6` SUBST1_TAC;
    Calc_derivative.CALC_ID_TAC;
    FIRST_X_ASSUM_ST `ups_x` MP_TAC;
    BY(REAL_ARITH_TAC);
  GMATCH_SIMP_TAC REAL_LE_LDIV_EQ;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Collect_geom.RHUFIIB];
  REWRITE_TAC[Merge_ineq.delta_delta_x];
  MATCH_MP_TAC (arith `&0 <= x ==> y <= x + y`);
  BY(REWRITE_TAC[ REAL_LE_POW_2])
  ]);;
  (* }}} *)

let rad2_eta2 = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6.
    &2 <= y1 /\ &2 <= y2 /\ &2 <= y6 /\ y1 < &4 /\ y2 < &4 /\ y6 < &4 /\
    rad2_y y1 y2 y3 y4 y5 y6 < &2 /\
    &0 < delta_y y1 y2 y3 y4 y5 y6 ==>
    eta_y y1 y2 y6 pow 2 < &2`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  MATCH_MP_TAC REAL_LET_TRANS;
  GOAL_TERM (fun w -> (EXISTS_TAC ( env w `rad2_y y1 y2 y3 y4 y5 y6`)));
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Sphere.eta_y;Sphere.rad2_y;LET_DEF;LET_END_DEF;Sphere.y_of_x];
  SUBGOAL_THEN `!x1 x2 x3 x4 x5 x6. rad2_x x1 x2 x3 x4 x5 x6 = rad2_x x4 x5 x3  x1 x2 x6` (unlist ONCE_REWRITE_TAC);
    BY((MESON_TAC[Merge_ineq.rad2_x_sym]));
  MATCH_MP_TAC rad2_x_eta_x;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  ASM_SIMP_TAC[y_bounds];
  CONJ2_TAC;
    FIRST_X_ASSUM MP_TAC;
    REWRITE_TAC[Sphere.delta_y];
    MATCH_MP_TAC (arith `x = y ==> (&0 < x ==> &0 < y)`);
    BY((MESON_TAC[Merge_ineq.delta_x_sym]));
  MATCH_MP_TAC UPS_X_POS;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let COND_FALSE = prove_by_refinement(
  `!a (b:B) c. (~a) ==> ((if a then b else c) = c)`,
  (* {{{ proof *)
  [
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let g_quqya_goal = 
  add_hyp ["FHBVYXZ a";"FHBVYXZ b";"FWGKMBZ"]
    (mk_imp(cell3_from_ineq,`!y1 y2 y3 y4 y5 y6.
        ineq
      [(&2 * hminus, y1, &2 * hplus );
       (&2,y2,&2 * hminus );
       (&2,y3,&2 * hminus);
       (&2,y4,&2 * hminus);
       (&2,y5,&2 * hminus );
       (&2,y6,&2 * hminus )
      ]
    (rad2_y y1 y2 y3 y4 y5 y6 < &2 ==>
    (&0 <= gamma4fgcy y1 y2 y3 y4 y5 y6 lmfun  + gamma3f y1 y2 y6 sqrt2 lmfun))`));;

g g_quqya_goal;;

let g_quqya_g_quqyb = prove_by_refinement(
  g_quqya_goal,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM (fun t -> INTRO_TAC t [`y1`;`y2`;`y6`]);
  REPEAT (FIRST_X_ASSUM (fun t -> INTRO_TAC t [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`]));
  REWRITE_TAC[Sphere.ineq];
  REPEAT WEAK_STRIP_TAC;
  REPEAT (FIRST_X_ASSUM_ST `gamma4fgcy` MP_TAC);
  REPEAT (FIRST_X_ASSUM_ST `gamma3f` MP_TAC);
  REPEAT (FIRST_X_ASSUM_ST `delta_x` MP_TAC);
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[y_bounds];
  REWRITE_TAC[GSYM Sphere.rad2_y];
  ASM_SIMP_TAC[arith `x < y ==> ~(x > y)`];
  DISCH_TAC;
  ANTS_TAC;
    GMATCH_SIMP_TAC REAL_LT_RSQRT;
    MATCH_MP_TAC rad2_eta2;
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `y3`)));
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `y4`)));
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `y5`)));
    ASM_SIMP_TAC[y_bounds];
    FIRST_X_ASSUM MP_TAC;
    REWRITE_TAC[Sphere.y_of_x];
    REWRITE_TAC[Sphere.y_of_x;Sphere.delta_y];
    BY(REAL_ARITH_TAC);
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let gamma10_gamma11_concl = 
  add_hyp ["GLFVCVK4 2477216213";"QITNPEA  5400790175 a";"QITNPEA  5400790175 b";"FWGKMBZ"]
    (mk_imp(cell3_from_ineq,`!y1 y2 y3 y4 y5 y6.
    &2 * hminus <= y1 /\ y1 <= &2 * hplus /\
     &2 <= y2 /\ y2 < &2 * hminus /\
     &2 <= y3 /\ y3 < &2 * hminus /\
     &2 * hminus <= y4 /\ y4 <= sqrt8 /\
     &2 <= y5 /\ y5 < &2 * hminus /\
     &2 <= y6 /\ y6 < &2 * hminus /\
    rad2_y y1 y2 y3 y4 y5 y6 < &2 ==>
    (#0.0057 <= gamma4fgcy y1 y2 y3 y4 y5 y6 lmfun / &(wtcount6_y y1 y2 y3 y4 y5 y6) 
     + beta_bump_y y1 y2 y3 y4 y5 y6  + 
     gamma3f y1 y2 y6 sqrt2 lmfun)`));;

let gamma10_gamma11 = prove_by_refinement(
  gamma10_gamma11_concl,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM (fun t -> INTRO_TAC t [`y1`;`y2`;`y6`]);
  REPEAT (FIRST_X_ASSUM (fun t -> INTRO_TAC t [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`]));
  REWRITE_TAC[Sphere.ineq];
  REPEAT WEAK_STRIP_TAC;
  REPEAT (FIRST_X_ASSUM_ST `gamma4fgcy` MP_TAC);
  REPEAT (FIRST_X_ASSUM_ST `gamma3f` MP_TAC);
  REPEAT (FIRST_X_ASSUM_ST `delta_x` MP_TAC);
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[y_bounds];
  REWRITE_TAC[GSYM Sphere.rad2_y];
  ASM_SIMP_TAC[arith `x < y ==> ~(x > y)`];
  DISCH_TAC;
  ANTS_TAC;
    GMATCH_SIMP_TAC REAL_LT_RSQRT;
    MATCH_MP_TAC rad2_eta2;
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `y3`)));
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `y4`)));
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `y5`)));
    ASM_SIMP_TAC[y_bounds];
    FIRST_X_ASSUM MP_TAC;
    REWRITE_TAC[Sphere.y_of_x;Sphere.delta_y];
    BY(REAL_ARITH_TAC);
  REPEAT DISCH_TAC;
  SUBGOAL_THEN `#0.0057 <= gamma4fgcy y1 y2 y3 y4 y5 y6 lmfun / &2  +     beta_bump_lb +     gamma3f y1 y2 y6 sqrt2 lmfun` ASSUME_TAC;
    ASM_CASES_TAC `eta_y y1 y2 y6 pow 2 < #1.34 pow 2`;
      REPLICATE_TAC 4 (FIRST_X_ASSUM MP_TAC);
      BY(REAL_ARITH_TAC);
    REPEAT (FIRST_X_ASSUM_ST `gamma4fgcy` MP_TAC);
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `gamma3f` MP_TAC;
    BY(REAL_ARITH_TAC);
  FIRST_X_ASSUM MP_TAC;
  MATCH_MP_TAC (arith `x <= x' /\ y <= y' ==> (z <= x + y + u ==> z <= x' + y' +u)`);
  CONJ2_TAC;
    BY(ASM_MESON_TAC[Merge_ineq.beta_bump_lb1;arith `&1 * x = x`]);
  ASM_CASES_TAC (`wtcount6_y y1 y2 y3 y4 y5 y6 = 2`);
    ASM_REWRITE_TAC[];
    BY(REAL_ARITH_TAC);
  COMMENT "insert here";
  FIRST_X_ASSUM_ST `norm2hh` MP_TAC;
  REWRITE_TAC[TAUT ` (a \/b) <=> (~b ==> a) `];
  ANTS_TAC;
    DISCH_THEN (fun t -> MP_TAC(MATCH_MP quarter_norm2hh t));
    BY(REPEAT (FIRST_X_ASSUM_ST `hminus` MP_TAC) THEN REAL_ARITH_TAC);
  DISCH_TAC;
  COMMENT "end insert";
  SUBGOAL_THEN `critical_edge_y y1 /\ ~critical_edge_y y2 /\ ~critical_edge_y y3 /\ ~critical_edge_y y4 /\ ~critical_edge_y y5 /\ ~critical_edge_y y6 /\ wtcount6_y y1 y2 y3 y4 y5 y6 = 1` ASSUME_TAC;
    FIRST_X_ASSUM_ST `wtcount6_y` MP_TAC;
    REWRITE_TAC[Sphere.wtcount6_y;Sphere.wtcount3_y;Sphere.critical_edge_y];
    GOAL_TERM (fun w -> (ABBREV_TAC ( env w `A = if &2 * hminus <= y4 /\ y4 <= &2 * hplus then 1 else 0`)));
    ASM_REWRITE_TAC[];
    REPEAT (GMATCH_SIMP_TAC COND_FALSE);
    REWRITE_TAC[DE_MORGAN_THM;arith `~(x <= y) <=> y < x`];
    ASM_SIMP_TAC[y_bounds];
    REWRITE_TAC[arith `(1 + 0 +0 ) + A + 0 + 0 = 1 + A`];
    EXPAND_TAC "A";
    COND_CASES_TAC;
      BY(MESON_TAC[arith `1 + 1 = 2`]);
    DISCH_TAC;
    CONJ2_TAC;
      BY(ARITH_TAC);
    REPEAT (FIRST_X_ASSUM_ST `hminus` MP_TAC);
    BY(REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `gamma4fgcy` MP_TAC;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

(* ========================================================================== *)
(* WORK IN PROGRESS *)
(* ========================================================================== *)
