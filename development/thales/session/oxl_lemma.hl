(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Chapter: Packing                                                           *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2012-11-23                                                           *)
(* ========================================================================== *)

(*
Use nonlinear inequalities to prove OXLZLEZ
*)

 open Hales_tactic;;

let cc_eps = new_definition `cc_eps = #0.0057`;;

let cc_v9_exists = MESON[]   `?(x:((num->real) list) # ((num->bool)list) # num ). T`;;

let cc_v9 = REWRITE_RULE[] (new_type_definition "cc_v9" ("cc_v9", "pair_of_cc_v9")cc_v9_exists);;

(* discarded ccx1, cc_bool *)

let cc_real_v9 = new_definition `cc_real_v9 cc = FST (pair_of_cc_v9 cc)`;;
let cc_bool_v9 = new_definition `cc_bool_v9 (cc) = FST(SND (pair_of_cc_v9 cc))`;;
let cc_card_v9 = new_definition `cc_card_v9 (cc) = SND(SND (pair_of_cc_v9 cc))`;;

let cc_azim_v9 = new_definition `cc_azim_v9 cc i = EL 0 (cc_real_v9 cc) i`;;
let cc_gg_v9 = new_definition `cc_gg_v9 cc i = EL 1 (cc_real_v9 cc) i`;;
let cc_gg3a_v9 = new_definition `cc_gg3a_v9 cc i = EL 2 (cc_real_v9 cc) i`;;
let cc_gg3b_v9 = new_definition `cc_gg3b_v9 cc i = EL 3 (cc_real_v9 cc) i`;;


let cc_subcrit_v9 = new_definition `cc_subcrit_v9 cc i = EL 0 (cc_bool_v9 cc) i`;;
let cc_crit_v9 = new_definition `cc_crit_v9 cc i = EL 1 (cc_bool_v9 cc) i`;;
let cc_supercrit_v9 = new_definition `cc_supercrit_v9 cc i = EL 2 (cc_bool_v9 cc) i`;;
let cc_small_v9 = new_definition `cc_small_v9 cc i = EL 3 (cc_bool_v9 cc) i`;;
let cc_small_eta_v9 = new_definition `cc_small_eta_v9 cc i = EL 4 (cc_bool_v9 cc) i`;;
let cc_4cell_v9 = new_definition `cc_4cell_v9 cc i = EL 5 (cc_bool_v9 cc) i`;;


let cc_hassmall_v9 = new_definition 
  `cc_hassmall_v9 cc i = (cc_small_v9 cc i /\ cc_small_v9 cc (i+1))`;;

let cc_qu_v9 = new_definition `cc_qu_v9 cc i = (cc_hassmall_v9 cc i /\ cc_4cell_v9 cc i /\ cc_subcrit_v9 cc i)`;;
let cc_qx_v9 = new_definition `cc_qx_v9 cc i = (cc_4cell_v9 cc i /\ ~(cc_qu_v9 cc i))`;;
let cc_qy_v9 = new_definition `cc_qy_v9 cc i = ~cc_4cell_v9 cc i`;;

let cc_size_v9 = new_definition `cc_size_v9 cc p = 
  CARD {i | i IN 0..(cc_card_v9 cc -1) /\ p i }`;;

let periodic = new_definition `periodic (f:num->A) n = (!i. (f (i+n) = f (i:num)))`;;

let cc_bool_model_v9 = new_definition `cc_bool_model_v9 cc <=> 
  ~(cc_card_v9 cc = 0) /\
  periodic (cc_subcrit_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_crit_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_supercrit_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_small_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_small_eta_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_4cell_v9 cc) (cc_card_v9 cc) /\
(!i. ~(cc_crit_v9 cc i /\ cc_supercrit_v9 cc i)) /\
(!i. ~(cc_crit_v9 cc i /\ cc_subcrit_v9 cc i)) /\
(!i. ~(cc_supercrit_v9 cc i /\ cc_subcrit_v9 cc i)) /\
(!i. (cc_4cell_v9 cc i ==> cc_crit_v9 cc i \/ cc_subcrit_v9 cc i \/ cc_supercrit_v9 cc i)) /\
(!i. (cc_small_eta_v9 cc i ==> cc_small_v9 cc i)) // jsp
`;;

let cc_bool_prep_v9 = new_definition `cc_bool_prep_v9 cc = (!i. cc_qy_v9 cc i ==> ~cc_qy_v9 cc (i+1))`;;


let cc_real_model_v9 = new_definition `cc_real_model_v9 cc <=> 
  periodic (cc_azim_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_gg_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_gg3a_v9 cc) (cc_card_v9 cc) /\
  periodic (cc_gg3b_v9 cc) (cc_card_v9 cc) /\
//
// general bounds.
//
(!i. #0.606 <= cc_azim_v9 cc i) /\ // gckb
(!i. cc_4cell_v9 cc i ==> cc_azim_v9 cc i < #2.8) /\ // azim_c4
(sum (0.. (cc_card_v9 cc - 1)) (cc_azim_v9 cc) = &2 * pi) /\
((cc_card_v9 cc = 4) /\ (?i. cc_4cell_v9 cc i /\ cc_crit_v9 cc i /\ 
			   cc_qu_v9 cc (i+1) /\ cc_qu_v9 cc (i+2) /\ cc_qu_v9 cc (i+3)) ==>
   (&0 <= sum (0.. (cc_card_v9 cc -1)) (cc_gg_v9 cc))) /\  // ox3q1h
//
// quarters
//
(!i. cc_qu_v9 cc i ==> -- cc_eps <= cc_gg_v9 cc i) /\ // gamma_qu
(!i. cc_qu_v9 cc i /\ ~(cc_small_eta_v9 cc i) ==> cc_eps <= cc_gg_v9 cc i ) /\ // fhbv2
(!i. cc_qu_v9 cc i /\ ~(cc_small_eta_v9 cc (i+1)) ==> cc_eps <= cc_gg_v9 cc i ) /\ // fhbv2
(!i. cc_qu_v9 cc i /\ cc_qy_v9 cc (i+1) ==> cc_eps <= cc_gg_v9 cc i + cc_gg3a_v9 cc (i+1)) /\ // quqy
(!i. cc_qu_v9 cc (i+1) /\ cc_qy_v9 cc i ==> cc_eps <= cc_gg3b_v9 cc i + cc_gg_v9 cc (i+1)) /\ // quqy
(!i. cc_4cell_v9 cc  i ==> a_spine5 + b_spine5 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // ztg4
(!i. cc_qu_v9 cc  i ==>  -- #0.0659 + #0.042 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // azim1
(!i. cc_qu_v9 cc  i ==> -- #0.0142852 + #0.00609451 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // gaz4
(!i. cc_qu_v9 cc  i ==>  #0.161517 - #0.119482 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // gaz6
//
// nonquarter 4-cells
//
(!i. cc_qx_v9 cc i ==> #0.0 <= cc_gg_v9 cc i) /\ // gamma_qx
(!i. cc_qx_v9 cc i /\ #2.3 < cc_azim_v9 cc i ==> cc_eps <= cc_gg_v9 cc i) /\ // gamma_qxd
(!i. cc_qx_v9 cc i /\ cc_hassmall_v9 cc i /\ cc_qy_v9 cc (i+1) ==> &0 <= cc_gg_v9 cc i + cc_gg3a_v9 cc (i+1)) /\ // gamma10
(!i. cc_qx_v9 cc (i+1) /\ cc_hassmall_v9 cc (i+1) /\ cc_qy_v9 cc i ==> &0 <= cc_gg3b_v9 cc i + cc_gg_v9 cc (i+1)) /\ // gamma11
(!i. cc_qx_v9 cc i /\ cc_small_v9 cc i /\ ~cc_small_v9 cc (i+1)  ==> cc_eps <= cc_gg_v9 cc i) /\ // gamma8
(!i. cc_qx_v9 cc i /\ cc_small_v9 cc (i+1) /\ ~cc_small_v9 cc i  ==> cc_eps <= cc_gg_v9 cc i) /\ // gamma8
(!i. cc_qx_v9 cc i /\ cc_hassmall_v9 cc i ==>  #0.213849 - #0.119482* cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // gaz9
(!i. cc_qx_v9 cc i /\ cc_hassmall_v9 cc i /\ cc_supercrit_v9 cc i ==>  #0.00457511 + #0.00609451*cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // azim2
//
// 23-cells
//
  (!i. cc_qy_v9 cc i ==> cc_gg3a_v9 cc i + cc_gg3b_v9 cc i <= cc_gg_v9 cc i) /\
  (!i. cc_qy_v9 cc i ==> &0 <= cc_gg3a_v9 cc i) /\
  (!i. cc_qy_v9 cc i ==> &0 <= cc_gg3b_v9 cc i) /\
(!i. cc_qy_v9 cc i ==> #0.008 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // cell3, grki
(!i. cc_qy_v9 cc i /\ cc_small_eta_v9 cc i /\ ~cc_small_eta_v9 cc (i+1) /\ cc_azim_v9 cc i < #1.074 ==>
   a_spine5 + b_spine5 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // pem
(!i. cc_qy_v9 cc i /\ ~cc_small_eta_v9 cc i /\ cc_small_eta_v9 cc (i+1) /\ cc_azim_v9 cc i < #1.074 ==>
   a_spine5 + b_spine5 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // pem
(!i. cc_qy_v9 cc i /\ cc_small_eta_v9 cc i /\ cc_small_eta_v9 cc (i+1) ==> 
   a_spine5 + b_spine5 * cc_azim_v9 cc i <= cc_gg_v9 cc i) /\ // tew
(!i. cc_qy_v9 cc i /\ cc_small_eta_v9 cc i /\ cc_small_eta_v9 cc (i+1) /\ #1.946 <= cc_azim_v9 cc i /\ 
 cc_azim_v9 cc i <= #2.089 ==> 
 #3.0 * cc_eps <= cc_gg_v9 cc i) // txq
`;;

let periodic_nk = prove_by_refinement(
  `!i k f n. periodic (f:num->A) n /\ (0 < n) ==> (f (i + k * n) = f i)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[periodic];
  REPEAT WEAK_STRIP_TAC;
  SPEC_TAC (`k:num`,`k:num`);
  INDUCT_TAC;
    AP_TERM_TAC;
    BY(ARITH_TAC);
  SUBST1_TAC (arith `i + SUC k * n  = (i+ k * n) + n`);
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let periodic_mod = prove_by_refinement(
  `!f n m. periodic (f:num->A) n /\ ~( n=0) ==> (f m = f (m MOD n))`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  INTRO_TAC DIVISION [`m`;`n`];
  ASM_REWRITE_TAC[];
  ONCE_REWRITE_TAC[arith `x + (y:num) = y + x`];
  BY(ASM_MESON_TAC[periodic_nk;arith `~(n=0) ==> (0 < n)`])
  ]);;
  (* }}} *)

let MOD_IN_NUMSEG = prove_by_refinement(
  `!m n. ~(n =0) ==> (m MOD n IN (0..(n-1)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[IN_NUMSEG];
  REPEAT WEAK_STRIP_TAC;
  INTRO_TAC DIVISION [`m`;`n`];
  ASM_REWRITE_TAC[];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let MOD_INJ = prove_by_refinement(
  `!n r a b. ~(n = 0) /\ a IN (r..((n-1)+r)) /\ b IN (r..((n-1)+r)) /\ a MOD n = b MOD n ==> (a = b)`,
  (* {{{ proof *)
  [
  REPEAT GEN_TAC;
  SUBGOAL_THEN `!P. ((!a b. (a <= (b:num)) ==> P a b) /\ (!a b. P a b <=> P b a)) ==> (P a b)` MATCH_MP_TAC;
    BY(MESON_TAC[ (arith `a <= b \/ b <= (a:num)`)]);
  CONJ2_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT WEAK_STRIP_TAC;
  INTRO_TAC DIVISION [`a`;`n`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  INTRO_TAC DIVISION [`b`;`n`];
  ANTS_TAC;
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `(b - a) DIV n = 0` ASSUME_TAC;
    GMATCH_SIMP_TAC DIV_LT;
    REPEAT (FIRST_X_ASSUM_ST `IN` MP_TAC);
    REWRITE_TAC[IN_NUMSEG];
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  SUBGOAL_THEN `(b - a) MOD n = 0` ASSUME_TAC;
    REWRITE_TAC[MOD_EQ_0];
    ASM_SIMP_TAC[MOD_EQ_0];
    EXISTS_TAC (`b DIV n - a DIV n`);
    REPEAT (FIRST_X_ASSUM_ST `( * ):num->num->num` MP_TAC);
    ASM_REWRITE_TAC[];
    REWRITE_TAC[RIGHT_SUB_DISTRIB];
    FIRST_X_ASSUM_ST `a <= (b:num)` MP_TAC;
    BY(ARITH_TAC);
  ENOUGH_TO_SHOW_TAC `b - a = 0`;
    FIRST_X_ASSUM_ST `a <= (b:num)` MP_TAC;
    BY(ARITH_TAC);
  INTRO_TAC DIVISION [`b - (a:num)`;`n`];
  ASM_REWRITE_TAC[];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let MOD_SURJ = prove_by_refinement(
  `!n r a. ~(n=0) /\ a IN (0..(n-1)) ==> (?b. b IN (r..((n-1)+r)) /\ b MOD n = a)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[IN_NUMSEG];
  REPEAT WEAK_STRIP_TAC;
  ASM_CASES_TAC `r MOD n <= a`;
    EXISTS_TAC (`(r DIV n) * n + a`);
    INTRO_TAC DIVISION [`r`;`n`];
    ASM_REWRITE_TAC[];
    REPEAT WEAK_STRIP_TAC;
    CONJ_TAC;
      BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
    REWRITE_TAC[ MOD_MULT_ADD];
    MATCH_MP_TAC MOD_LT;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  EXISTS_TAC (`((r DIV n) + 1) * n + a`);
  REWRITE_TAC[ MOD_MULT_ADD ];
  CONJ2_TAC;
    MATCH_MP_TAC MOD_LT;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  INTRO_TAC DIVISION [`r`;`n`];
  ASM_REWRITE_TAC[];
  REPEAT WEAK_STRIP_TAC;
  CONJ_TAC;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC)
  ]);;
  (* }}} *)

let BIJ_SUM = prove_by_refinement(
  `!(A:A->bool) (B:B->bool) f ab.
    BIJ ab A B ==> (sum A (f o ab) = sum B f)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[BIJ;INJ];
  BY(ASM_MESON_TAC[ SUM_IMAGE ; Misc_defs_and_lemmas.SURJ_IMAGE ])
  ]);;
  (* }}} *)


let periodic_sum = prove_by_refinement(
  `!f n. periodic f n /\ ~( n=0) ==> (!i. sum (i..((n-1) +i)) f = sum (0..(n-1)) f)`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  INTRO_TAC BIJ_SUM [`i..((n-1)+i)`;`0..(n-1)`;`f`;`(\j. (j MOD n))`];
  ANTS_TAC;
    REWRITE_TAC[BIJ;INJ];
    SUBCONJ_TAC;
      CONJ_TAC;
        REPEAT WEAK_STRIP_TAC;
        BY(ASM_SIMP_TAC[ MOD_IN_NUMSEG]);
      REPEAT WEAK_STRIP_TAC;
      MATCH_MP_TAC MOD_INJ;
      BY(ASM_MESON_TAC[]);
    REPEAT WEAK_STRIP_TAC;
    REWRITE_TAC[SURJ];
    ASM_REWRITE_TAC[];
    REPEAT WEAK_STRIP_TAC;
    BY(ASM_MESON_TAC[MOD_SURJ]);
  DISCH_THEN (SUBST1_TAC o GSYM);
  AP_TERM_TAC;
  REWRITE_TAC[FUN_EQ_THM];
  GEN_TAC;
  REWRITE_TAC[o_THM];
  BY(ASM_MESON_TAC[periodic_mod])
  ]);;
  (* }}} *)

let periodic_fn = prove_by_refinement(
  `!cc. cc_bool_model_v9 cc ==> (periodic (cc_hassmall_v9 cc) (cc_card_v9 cc) /\
   periodic (cc_qu_v9 cc) (cc_card_v9 cc) /\
   periodic (cc_qx_v9 cc) (cc_card_v9 cc) /\
   periodic (cc_qy_v9 cc) (cc_card_v9 cc))
   `,
  (* {{{ proof *)
  [
  REWRITE_TAC[cc_bool_model_v9;periodic;cc_hassmall_v9;cc_qu_v9;cc_qx_v9;cc_qy_v9];
  REPEAT WEAK_STRIP_TAC;
  BY(ASM_SIMP_TAC[arith `!i. (i + cc_card_v9 cc) + 1 = (i + 1) + cc_card_v9 cc`])
  ]);;
  (* }}} *)

let CHQSQEY_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (3 <= cc_size_v9 cc (cc_4cell_v9 cc))`;;

let MTMLSRF_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (?i. 0 < i /\ cc_gg_v9 cc i < &0 /\ cc_qu_v9 cc i /\
						      cc_4cell_v9 cc (i+1) /\ cc_4cell_v9 cc (i-1))`;;

let LXDEYBO_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (cc_size_v9 cc (cc_4cell_v9 cc) <= 4)`;;

let UNPNFVW_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (cc_size_v9 cc (cc_qy_v9 cc) <= 1)`;;

let DHCVTVE_concl = `T`;; (* This is just a repeat of CHQSQEY, LXDEYBO, UNPNFVW *)

let PMZTATI_concl = `T`;; (* This is a restatement of gamma8 *)

let RJSZKQX_concl = `T`;; (* This is a restatement of fhvb2 *)

let IXPFBKA_concl = `T`;; (* This is a restatement of jsp *)

let IPVICGW_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (!i. cc_small_v9 cc i)`;;

let RSIWAMP_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (cc_card_v9 cc <= 4)`;;

let RSIWAMP_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (cc_card_v9 cc <= 4)`;;
	
let BKLETJQ_concl = `T`;; (* This is a restatement of gamma10_gamma11 *)

let UTEOITF_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (!i. cc_4cell_v9 cc i)`;;

let LUIKGMH_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (4 <= cc_card_v9 cc)`;;

let GRHIDFA_concl = `!cc. cc_bool_model_v9 cc /\ cc_bool_prep_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (F)`;;  (* main conclusion *)

let XSBYGIQ_concl = 
  `(?cc. cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0))
  ==> (?cc. cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ cc_bool_prep_v9 cc /\  (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0))`;;

let QX_NN = prove_by_refinement(
  `!cc i. cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ (cc_qx_v9 cc i) ==>
    (#0.0 <= cc_gg_v9 cc i)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[cc_bool_model_v9;cc_real_model_v9];
  REPEAT WEAK_STRIP_TAC;
  BY(ASM_SIMP_TAC[])
  ]);;
  (* }}} *)

let QY_NN = prove_by_refinement(
  `!cc i. cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ (cc_qy_v9 cc i) ==>
    (#0.0 <= cc_gg_v9 cc i)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[cc_bool_model_v9;cc_real_model_v9];
  REPEAT WEAK_STRIP_TAC;
  ENOUGH_TO_SHOW_TAC `&0 <= cc_gg3a_v9 cc i /\ &0 <= cc_gg3b_v9 cc i /\ cc_gg3a_v9 cc i + cc_gg3b_v9 cc i <= cc_gg_v9 cc i`;
    BY(REAL_ARITH_TAC);
  BY(ASM_SIMP_TAC[])
  ]);;
  (* }}} *)

let QY_QX_QU = prove_by_refinement(
  `!cc i. cc_bool_model_v9 cc ==>
    (cc_qu_v9 cc i \/ cc_qy_v9 cc i \/ cc_qx_v9 cc i)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[cc_bool_model_v9];
  REWRITE_TAC[cc_qu_v9;cc_qy_v9;cc_qx_v9];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let QUARTER1 = prove_by_refinement(
`!cc. cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ 
   (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0) ==> (1 <= cc_size_v9 cc (cc_qu_v9 cc))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM_ST `cc_real_model_v9` MP_TAC;
  COPY_TAC;
  FIRST_X_ASSUM_ST `cc_bool_model_v9` MP_TAC;
  COPY_TAC;
  REWRITE_TAC[cc_size_v9;cc_real_model_v9;cc_bool_model_v9];
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `~(cc_card_v9 cc = 0)` ASSUME_TAC;
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[arith `1 <= x <=> ~(x = 0)`];
  GMATCH_SIMP_TAC CARD_EQ_0;
  CONJ_TAC;
    MATCH_MP_TAC FINITE_SUBSET;
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `0..cc_card_v9 cc - 1`)));
    REWRITE_TAC[FINITE_NUMSEG];
    BY(SET_TAC[]);
  REWRITE_TAC[Misc_defs_and_lemmas.EMPTY_EXISTS];
  GOAL_TERM (fun w -> (ENOUGH_TO_SHOW_TAC ( env w `~(!i. ~(cc_qu_v9 cc i))`)));
    REWRITE_TAC[NOT_FORALL_THM];
    REPEAT WEAK_STRIP_TAC;
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `i MOD (cc_card_v9 cc)`)));
    REWRITE_TAC[IN_ELIM_THM];
    CONJ_TAC;
      GMATCH_SIMP_TAC MOD_IN_NUMSEG;
      BY(ASM_REWRITE_TAC[]);
    GMATCH_SIMP_TAC (GSYM periodic_mod);
    ASM_REWRITE_TAC[];
    BY(ASM_SIMP_TAC[periodic_fn]);
  DISCH_TAC;
  GOAL_TERM (fun w -> (SUBGOAL_THEN ( env w `?p. cc_gg_v9 cc p < &0`) MP_TAC));
    GOAL_TERM (fun w -> (ENOUGH_TO_SHOW_TAC ( env w `~(!i. &0 <= cc_gg_v9 cc i)`)));
      BY(MESON_TAC[arith `&0 <= x <=> ~(x < &0)`]);
    DISCH_TAC;
    FIRST_X_ASSUM_ST `sum X f < &0` MP_TAC;
    REWRITE_TAC[arith `((x < &0) ==> F) <=> &0 <= x`];
    MATCH_MP_TAC SUM_POS_LE;
    REWRITE_TAC[FINITE_NUMSEG];
    REPEAT WEAK_STRIP_TAC;
    BY(ASM_SIMP_TAC[]);
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM (MP_TAC o (ISPEC `p:num`));
  REWRITE_TAC[];
  GOAL_TERM (fun w -> (ENOUGH_TO_SHOW_TAC ( env w `~(cc_qx_v9 cc p \/ cc_qy_v9 cc p)`)));
    BY(ASM_MESON_TAC[ QY_QX_QU]);
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[arith `x < &0 <=> ~(#0.0 <= x)`];
  REWRITE_TAC[TAUT `(~a ==> ~b) <=> (b ==> a)`];
  BY(ASM_MESON_TAC[QX_NN;QY_NN])
  ]);;
  (* }}} *)

let QU_EXISTS = prove_by_refinement(
  `!cc. cc_bool_model_v9 cc /\
          cc_real_model_v9 cc /\
          sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0 ==>
   (?q. cc_qu_v9 cc q /\ q IN 0..cc_card_v9 cc - 1)`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  INTRO_TAC QUARTER1 [`cc`];
  ASM_REWRITE_TAC[];
  REWRITE_TAC[cc_size_v9;arith `1 <= x <=> ~(x = 0)`];
  GMATCH_SIMP_TAC CARD_EQ_0;
  REWRITE_TAC[Misc_defs_and_lemmas.EMPTY_EXISTS];
  REWRITE_TAC[IN_ELIM_THM];
  GMATCH_SIMP_TAC FINITE_SUBSET;
  CONJ2_TAC;
    BY(MESON_TAC[]);
  GOAL_TERM (fun w -> (EXISTS_TAC ( env w `0..cc_card_v9 cc  - 1`)));
  REWRITE_TAC[FINITE_NUMSEG];
  REWRITE_TAC[SUBSET;IN_ELIM_THM];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let CC_CARD2 = prove_by_refinement(
  `!cc. cc_bool_model_v9 cc /\
          cc_real_model_v9 cc /\
          sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0 ==>
    (2 <= cc_card_v9 cc)`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  INTRO_TAC QU_EXISTS [`cc`];
  ASM_REWRITE_TAC[];
  REPEAT WEAK_STRIP_TAC;
  ENOUGH_TO_SHOW_TAC `~(cc_card_v9 cc = 1)`;
    REWRITE_TAC[arith `2 <= x <=> ~(x = 0) /\ ~(x = 1)`];
    BY(ASM_MESON_TAC[cc_bool_model_v9]);
  DISCH_TAC;
  SUBGOAL_THEN `sum (0..cc_card_v9 cc -1) (cc_azim_v9 cc) = &2 * pi /\ cc_azim_v9 cc q <  #2.8` MP_TAC;
    FIRST_X_ASSUM_ST `cc_qu_v9` MP_TAC;
    REWRITE_TAC[cc_qu_v9];
    REPEAT WEAK_STRIP_TAC;
    FIRST_X_ASSUM_ST `cc_real_model_v9` MP_TAC;
    REWRITE_TAC[cc_real_model_v9];
    REPEAT WEAK_STRIP_TAC;
    BY(ASM_SIMP_TAC[]);
  SUBGOAL_THEN `cc_card_v9 cc - 1 = 0` SUBST1_TAC;
    FIRST_X_ASSUM MP_TAC;
    BY(ARITH_TAC);
  REWRITE_TAC[NUMSEG_SING;SUM_SING];
  SUBGOAL_THEN `q = 0` SUBST1_TAC;
    FIRST_X_ASSUM_ST `IN` MP_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[IN_NUMSEG];
    BY(ARITH_TAC);
  REPEAT WEAK_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ASM_REWRITE_TAC[];
  MP_TAC Flyspeck_constants.bounds;
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let CASE_3Q1H = prove_by_refinement(
  `!cc.  cc_bool_model_v9 cc /\
((cc_card_v9 cc = 4) /\ (?i. cc_4cell_v9 cc i /\ cc_crit_v9 cc i /\ 
			   cc_qu_v9 cc (i+1) /\ cc_qu_v9 cc (i+2) /\ cc_qu_v9 cc (i+3))) ==>
   ~(?i. cc_qy_v9 cc i)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[cc_qu_v9;cc_qy_v9];
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `periodic (cc_4cell_v9 cc) (cc_card_v9 cc) /\ ~(0 = cc_card_v9 cc)` ASSUME_TAC;
    BY(ASM_MESON_TAC[cc_bool_model_v9]);
  SUBGOAL_THEN `cc_4cell_v9 cc (i MOD 4) /\ cc_4cell_v9 cc ((i+1) MOD 4) /\ cc_4cell_v9 cc ((i+2) MOD 4) /\ cc_4cell_v9 cc ((i+3) MOD 4)` MP_TAC;
    FIRST_X_ASSUM_ST `4` (SUBST1_TAC o GSYM);
    REPEAT (GMATCH_SIMP_TAC (GSYM periodic_mod));
    BY(ASM_REWRITE_TAC[]);
  REPEAT WEAK_STRIP_TAC;
  SUBGOAL_THEN `~(cc_4cell_v9 cc (i' MOD 4))` MP_TAC;
    FIRST_X_ASSUM_ST `4` (SUBST1_TAC o GSYM);
    REPEAT (GMATCH_SIMP_TAC (GSYM periodic_mod));
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[TAUT `(~a ==> F) <=> a`];
  SUBGOAL_THEN `(i' MOD 4 = i MOD 4) \/ (i' MOD 4 = (i+1) MOD 4) \/ (i' MOD 4 = (i+2) MOD 4) \/ (i' MOD 4 =  (i+3) MOD 4)` ASSUME_TAC;
    INTRO_TAC MOD_SURJ [`4`;`i`;`i' MOD 4`];
    ASM_SIMP_TAC[MOD_IN_NUMSEG;arith `~(4 = 0)`];
    REWRITE_TAC[IN_NUMSEG;arith `4 - 1 +i = i + 3`];
    REWRITE_TAC[arith `(i <= b /\ b <= i + 3) <=> (b = i \/ b = i+1 \/ b = i+2 \/ b = i+3)`];
    BY(MESON_TAC[]);
  BY(ASM_MESON_TAC[])
  ]);;
  (* }}} *)

let CC_EXISTS = prove_by_refinement(
  `!az gg gg3a gg3b sub cri super sma eta cell4 n.  ?cc. 
    cc_azim_v9 cc = az /\
    cc_gg_v9 cc = gg /\
    cc_gg3a_v9 cc = gg3a /\
    cc_gg3b_v9 cc = gg3b /\
    cc_subcrit_v9 cc = sub /\
    cc_crit_v9 cc = cri /\
    cc_supercrit_v9 cc = super /\
    cc_small_v9 cc = sma /\
    cc_small_eta_v9 cc = eta /\
    cc_4cell_v9 cc = cell4 /\
    cc_card_v9 cc = n`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  GOAL_TERM (fun w -> (EXISTS_TAC ( env w `cc_v9 ([az;gg;gg3a;gg3b],([sub;cri;super;sma;eta;cell4],n))`)));
  REWRITE_TAC[FUN_EQ_THM];
  REWRITE_TAC[cc_azim_v9;cc_gg_v9;cc_gg3a_v9;cc_gg3b_v9;cc_subcrit_v9;cc_crit_v9;cc_supercrit_v9;cc_small_v9;cc_small_eta_v9;cc_4cell_v9;cc_card_v9;cc_real_v9;cc_bool_v9;cc_v9];
  BY(REWRITE_TAC[EL;HD;TL;arith `5 = SUC 4 /\ 4 = SUC 3 /\ 3 = SUC 2 /\ 2 = SUC 1 /\ 1 = SUC 0`])
  ]);;
  (* }}} *)


g XSBYGIQ_concl;;


(*
let XSBYGIQ = prove_by_refinement(
  XSBYGIQ_concl,
  (* {{{ proof *)
  [
  GOAL_TERM (fun w -> (ABBREV_TAC ( env w `bad_set  = \cc. {i | i IN 0..(cc_card_v9 cc - 1) /\ cc_qy_v9 cc i /\ cc_qy_v9 cc (i+1) }`)));
  GOAL_TERM (fun w -> (SUBGOAL_THEN ( env w `!cc. FINITE (bad_set cc)`) ASSUME_TAC));
    GEN_TAC;
    EXPAND_TAC "bad_set";
    MATCH_MP_TAC FINITE_SUBSET;
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `0.. cc_card_v9 cc - 1`)));
    REWRITE_TAC[FINITE_NUMSEG;SUBSET];
    REWRITE_TAC[IN_ELIM_THM];
    BY(MESON_TAC[]);
  COMMENT "set up induction";
  REPEAT WEAK_STRIP_TAC;
  PROOF_BY_CONTR_TAC;
  GOAL_TERM (fun w -> (ENOUGH_TO_SHOW_TAC ( env w `(!k. (!cc. (bad_set cc) HAS_SIZE k ==> ~( cc_bool_model_v9 cc /\        cc_real_model_v9 cc /\       sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0)))`)));
    DISCH_THEN (C INTRO_TAC [`CARD(bad_set cc)`;`cc`]);
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[HAS_SIZE]);
  INDUCT_TAC;
    GEN_TAC;
    REWRITE_TAC[HAS_SIZE_0];
    EXPAND_TAC "bad_set";
    ONCE_REWRITE_TAC[EXTENSION];
    REWRITE_TAC[IN_ELIM_THM;NOT_IN_EMPTY];
    REPEAT WEAK_STRIP_TAC;
    FIRST_X_ASSUM_ST `?` MP_TAC;
    REWRITE_TAC[];
    GOAL_TERM (fun w -> (EXISTS_TAC ( env w `cc'`)));
    ASM_REWRITE_TAC[];
    REWRITE_TAC[cc_bool_prep_v9];
    GEN_TAC;
    SUBGOAL_THEN `~(cc_card_v9 cc' = 0)` ASSUME_TAC;
      BY(ASM_MESON_TAC[cc_bool_model_v9]);
    ABBREV_TAC `x = i MOD cc_card_v9 cc'`;
    FIRST_X_ASSUM_ST `cc_qy_v9` (C INTRO_TAC [`x`]);
    REPEAT WEAK_STRIP_TAC;
    FIRST_X_ASSUM_ST `~` MP_TAC;
    REWRITE_TAC[];
    EXPAND_TAC "x";
    GMATCH_SIMP_TAC MOD_IN_NUMSEG;
    ASM_REWRITE_TAC[];
    INTRO_TAC periodic_fn [`cc'`];
    ASM_REWRITE_TAC[];
    REPEAT WEAK_STRIP_TAC;
    CONJ_TAC;
      EXPAND_TAC "x";
      GMATCH_SIMP_TAC (GSYM periodic_mod);
      BY(ASM_REWRITE_TAC[]);
    EXPAND_TAC "x";
    SUBGOAL_THEN `cc_qy_v9 cc' ((i DIV cc_card_v9 cc') * cc_card_v9 cc' + (i MOD cc_card_v9 cc'  + 1))` MP_TAC;
      INTRO_TAC (GSYM DIVISION) [`i`;`cc_card_v9 cc'`];
      ASM_REWRITE_TAC[];
      REPEAT WEAK_STRIP_TAC;
      SUBGOAL_THEN `i DIV cc_card_v9 cc' * cc_card_v9 cc' + x + 1 = i + 1` SUBST1_TAC;
        BY(FIRST_X_ASSUM_ST `DIV` MP_TAC THEN ARITH_TAC);
      BY(ASM_REWRITE_TAC[]);
    SUBST1_TAC (arith `i DIV cc_card_v9 cc' * cc_card_v9 cc' + i MOD cc_card_v9 cc' + 1 =  (i MOD cc_card_v9 cc' + 1) + i DIV cc_card_v9 cc' * cc_card_v9 cc'`);
    GMATCH_SIMP_TAC periodic_nk;
    BY(ASM_SIMP_TAC[arith `~(n=0) ==> (0 < n)`]);
  COMMENT "base case of induction completed, now induct step";
  REPEAT WEAK_STRIP_TAC;
  COMMENT "pick element in bad set";
  GOAL_TERM (fun w -> (SUBGOAL_THEN ( env w `?x. x IN bad_set cc'`) MP_TAC));
    REWRITE_TAC[MEMBER_NOT_EMPTY];
    REWRITE_TAC[GSYM HAS_SIZE_0];
    FIRST_X_ASSUM_ST `SUC` MP_TAC;
    REWRITE_TAC[HAS_SIZE];
    DISCH_THEN (unlist REWRITE_TAC);
    BY(ARITH_TAC);
  REPEAT WEAK_STRIP_TAC;
  COMMENT "construct reduced cc";
  ABBREV_TAC `n = cc_card_v9 cc' - 1`;
  ABBREV_TAC `cutr = \ (f:num->real) j. if (0 = j MOD n) then f x + f (x+1) else f (x + 1 + (j MOD n))`;
  ABBREV_TAC `cutb = \ (g:num->bool) j. if (0 = j MOD n) then g x else g (x + 1 + (j MOD n))`;
  INTRO_TAC CC_EXISTS [`cutr (cc_azim_v9 cc')`;`cutr (cc_gg_v9 cc')`;`cutr (cc_gg3a_v9 cc')`;`cutr (cc_gg3b_v9 cc')`;`cutb (cc_subcrit_v9 cc')`;`cutb (cc_crit_v9 cc')`;`cutb (cc_supercrit_v9 cc')`;`cutb (cc_small_v9 cc')`;`cutb (cc_small_eta_v9 cc')`;`cutb (cc_4cell_v9 cc')`;`n`];
  REPEAT WEAK_STRIP_TAC;
  GOAL_TERM (fun w -> (FIRST_X_ASSUM (MP_TAC o (ISPEC ( env w `cc''`)))));
  REWRITE_TAC[TAUT (`((x ==> ~y) ==> F) <=> x /\ y`)];
  COMMENT "size of n";
  SUBGOAL_THEN `~(cc_card_v9 cc'' = 0)` ASSUME_TAC;
    INTRO_TAC CC_CARD2 [`cc'`];
    ASM_REWRITE_TAC[];
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN ARITH_TAC);
  COMMENT "periodicity";
  GOAL_TERM (fun w -> (SUBGOAL_THEN ( env w `!f. periodic (cutr f) n`) ASSUME_TAC));
    REWRITE_TAC[periodic];
    EXPAND_TAC "cutr";
    REPEAT WEAK_STRIP_TAC;
    SUBGOAL_THEN ` (i + n) MOD n = i MOD n` SUBST1_TAC;
      BY(MESON_TAC[MOD_MULT_ADD;arith `(i + n) = (1 * n + i)`]);
    BY(MESON_TAC[]);
  GOAL_TERM (fun w -> (SUBGOAL_THEN ( env w `!g. periodic (cutb g) n`) ASSUME_TAC));
    REWRITE_TAC[periodic];
    EXPAND_TAC "cutb";
    REPEAT WEAK_STRIP_TAC;
    SUBGOAL_THEN ` (i + n) MOD n = i MOD n` SUBST1_TAC;
      BY(MESON_TAC[MOD_MULT_ADD;arith `(i + n) = (1 * n + i)`]);
    BY(MESON_TAC[]);
  (COMMENT "bad_set")
  (* NOT FINISHED TO HERE XXD, 4 CONJUNCTS TO GO. *)
  ]);;
  (* }}} *)

*)
(* Need to finish of this lemma *)

(*
let XSBYGIQ = prove_by_refinement(
  XSBYGIQ_concl,
  (* {{{ proof *)
  [
  ets `!n. (?cc. (cc_card_v9 cc = n) /\ cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0))   ==> (?cc. (cc_card_v9 cc <= n) /\ cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ cc_bool_prep_v9 cc /\  (sum (0..cc_card_v9 cc -1) (cc_gg_v9 cc) < &0))` 
mt[]
st/r
abbrev `bad_set  = \cc i. i IN 0..(cc_card_v9 cc - 1) /\ cc_qy_v9 cc i /\ cc_qy_v9 cc (i+1)`
    intro (FINITE_INDUCT_STRONG) [`\s.  (?cc. (s INTER bad_set cc = {}) /\ (cc_card_v9 cc <= n) /\ cc_bool_model_v9 cc /\ cc_real_model_v9 cc /\ sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0)`]
beta
st/r
ets (% `(!s. FINITE s                ==> (?cc. s INTER bad_set cc = {} /\  cc_card_v9 cc <= n /\                        cc_bool_model_v9 cc /\                         cc_real_model_v9 cc /\                         sum (0..cc_card_v9 cc - 1) (cc_gg_v9 cc) < &0))`)
dthen (mp o (spec (% `0..n - 1`)))
rt[FINITE_NUMSEG]
expand "bad_set"
rt[cc_bool_prep_v9]
st/r
ex (% `cc'`)
art[]
st/r
gthen `periodic (cc_qy_v9 cc') (cc_card_v9 cc')`  mp
amt[periodic_fn]
dt
gthen `~(cc_card_v9 cc' = 0)` assume
amt[cc_bool_model_v9]
gthen `cc_qy_v9 cc' (i MOD (cc_card_v9 cc')) /\ cc_qy_v9 cc' ((i MOD (cc_card_v9 cc')) + 1)` assume
gm (GSYM periodic_mod)
asimp[]
intro (GSYM periodic_mod) [`\i. cc_qy_v9 cc' (i + 1)`;`cc_card_v9 cc'`;`i`]
beta
asimp[]
dthen mmp
fxast `periodic` mp
rt[periodic]
rt[arith `(i + j) + 1 = (i +1) + j`]
st/r
amt[]
fxast `INTER` mp
rt[taut `(x ==> F) <=> (~x)`]
rt[Misc_defs_and_lemmas.EMPTY_EXISTS]
ex (% `i MOD cc_card_v9 cc'`)
rt[IN_INTER]
rt[IN_ELIM_THM]
art[]
mmp (taut `a /\ b ==> b /\ a`)
subconj
gm (MOD_IN_NUMSEG)
art[]
fxast `cc_card_v9 cc' <= n` mp
rt[IN_NUMSEG]
ARITH_TAC
comment "now do induction"
fxa mmp
rt[INTER_EMPTY]
conj
ex (% `cc`)
art[]
ARITH_TAC
st/r
asmcase (% `~(x IN bad_set cc')`)
ex (% `cc'`)
art[]
fxa mp
fxast `INTER` mp
set[]
comment "now do insertion step"
gthen (% `x IN 0..cc_card_v9 cc' - 1 /\ cc_qy_v9 cc' x /\ cc_qy_v9 cc' (x+1)`) mp
fxa mp
expand "bad_set"
rt[IN_ELIM_THM]
st/r
  ]);;
  (* }}} *)





  

