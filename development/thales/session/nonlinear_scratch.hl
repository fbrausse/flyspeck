
(* ADDED June 28, 2014 *)
let delta_ineq_eulerA = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    delta_ineq_v6 /\
    &4 <= x1 /\ x1 <= #6.3504 /\
    &4 <= x2 /\ x2 <= #6.3504 /\
    &4 <= x3 /\ x3 <= #6.3504 /\
    #9.0 <= x4 /\ x4 <= #15.328 /\
    #9.0 <= x5 /\ x5 <= #15.328 /\
    #9.0 <= x6 /\ x6 <= #15.328 ==>
    (eulerA_x x1 x2 x3 x4 x5 x6 < &0 \/
   &0 < delta_x x1 x2 x3 x4 x5 x6 )
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[delta_ineq;Sphere.ineq];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)


let delta_ineq_delta4_x_squared = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    delta_ineq_v6 /\
              &4 <= x1 /\ x1 <= &8 /\
            &4 <= x2 /\ x2 <= &7 /\
            &4 <= x3 /\ x3 <= &7 /\
            &8 <= x4 /\ x4 <= &28 /\
            &4 <= x5 /\ x5 <= &7 /\
            &4 <= x6 /\ x6 <= &7 ==>
    (&0 < delta4_squared_x x1 x2 x3 x4 x5 x6 \/
   &0 < delta_x x1 x2 x3 x4 x5 x6 )
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[delta_ineq;Sphere.ineq];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)

let delta_ineq_delta4_x_squared_wide = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6.
    delta_ineq_v6 /\
              &4 <= x1 /\ x1 <= &7 /\
            &4 <= x2 /\ x2 <= &7 /\
            &4 <= x3 /\ x3 <= &7 /\
            &4 <= x4 /\ x4 <= &7 /\
            &8 <= x5 /\ x5 <= &28 /\
            &4 <= x6 /\ x6 <= &7 ==>
    (&0 < delta4_squared_x x1 x2 x3 x4 x5 x6 \/
   &0 < delta_x x1 x2 x3 x4 x5 x6 )
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[delta_ineq;Sphere.ineq];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `28` (C INTRO_TAC [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`]);
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let delta_ineq_delta4_x_squared2 = prove_by_refinement(
  `!c x1 x2 x3 x4 x5 x6.
     ~(x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
      delta4_squared_x x1 x2 x3 x4 x5 x6 * c <
      &0) ==>
    (delta_ineq_v6 /\
    c < &0 /\
              &4 <= x1 /\ x1 <= &8 /\
            &4 <= x2 /\ x2 <= &7 /\
            &4 <= x3 /\ x3 <= &7 /\
            &8 <= x4 /\ x4 <= &28 /\
            &4 <= x5 /\ x5 <= &7 /\
            &4 <= x6 /\ x6 <= &7 )
	     ==>
    (
   &0 < delta_x x1 x2 x3 x4 x5 x6 )
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +      delta4_squared_x x1 x2 x3 x4 x5 x6 * c <      &0 \/ &0 < delta_x x1 x2 x3 x4 x5 x6` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  FIRST_X_ASSUM_ST `delta4_squared_x` kill;
  TYPIFY `&0 < delta_x x1 x2 x3 x4 x5 x6` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  INTRO_TAC delta_ineq_delta4_x_squared [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`];
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Sphere.x1_delta_x];
  DISCH_TAC;
  MATCH_MP_TAC (arith `&0 <= -- a /\ &0 < -- b  ==> a + b < &0`);
  CONJ2_TAC;
    REWRITE_TAC[arith `-- (a * b ) = a * (-- b)`];
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `-- ((a * b) * &4) = &4 * a * (-- b)`];
  GMATCH_SIMP_TAC REAL_LE_MUL;
  GMATCH_SIMP_TAC REAL_LE_MUL;
  BY(ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let delta_ineq_delta4_x_squared2_wide = prove_by_refinement(
  `!c x1 x2 x3 x4 x5 x6.
     ~(x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
      delta4_squared_x x1 x2 x3 x4 x5 x6 * c <
      &0) ==>
    (delta_ineq_v6 /\
    c < &0 /\
              &4 <= x1 /\ x1 <= &7 /\
            &4 <= x2 /\ x2 <= &7 /\
            &4 <= x3 /\ x3 <= &7 /\
            &4 <= x4 /\ x4 <= &7 /\
            &8 <= x5 /\ x5 <= &28 /\
            &4 <= x6 /\ x6 <= &7 )
	     ==>
    (
   &0 < delta_x x1 x2 x3 x4 x5 x6 )
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +      delta4_squared_x x1 x2 x3 x4 x5 x6 * c <      &0 \/ &0 < delta_x x1 x2 x3 x4 x5 x6` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  FIRST_X_ASSUM_ST `delta4_squared_x` kill;
  TYPIFY `&0 < delta_x x1 x2 x3 x4 x5 x6` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  INTRO_TAC delta_ineq_delta4_x_squared_wide [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`];
  ASM_REWRITE_TAC[];
  REWRITE_TAC[Sphere.x1_delta_x];
  DISCH_TAC;
  MATCH_MP_TAC (arith `&0 <= -- a /\ &0 < -- b  ==> a + b < &0`);
  CONJ2_TAC;
    REWRITE_TAC[arith `-- (a * b ) = a * (-- b)`];
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  REWRITE_TAC[arith `-- ((a * b) * &4) = &4 * a * (-- b)`];
  GMATCH_SIMP_TAC REAL_LE_MUL;
  GMATCH_SIMP_TAC REAL_LE_MUL;
  BY(ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let delta_ineq_delta_234_x = prove_by_refinement(
  `delta_ineq_v6 ==> (!x1 x2 x3 x4 x5 x6 r.
	~(delta_234_x r (&4) (&4) x1 x2 x3 x4 x5 x6 +
 unit6 x1 x2 x3 x4 x5 x6 * -- &98  <
 &0 ) ==> ( r = ((#2.0 * #1.26) * #2.0 * #1.26) /\
	    &4 <= x1 /\ x1 <= &4 * #1.26 pow 2 /\
	&4 <= x2 /\ x2 <= &4 * #1.26 pow 2 /\
	&4 <= x3 /\ x3 <= &4 * #1.26 pow 2 /\
	#3.01 pow 2 <= x4 /\ x4 <= #3.36 pow 2 /\
	&4 <= x5 /\ x5 <= &4 * #1.26 pow 2 /\
	&4 <= x6 /\ x6 <= &4 * #1.26 pow 2
==> &0 < delta_x x1 x2 x3 x4 x5 x6))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[delta_ineq];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `&98` (C INTRO_TAC [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`]);
  ASM_REWRITE_TAC[Sphere.ineq;IMP_IMP_THM];
  ANTS_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  FIRST_X_ASSUM_ST `delta_234_x` MP_TAC THEN ASM_REWRITE_TAC[];
  ASM_REWRITE_TAC[arith `(a * b * a * b) = (a * b) * (a*b)`];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)


(* END *)
1;;


add { 
  idv= "4680581274 delta issue-ups";
  doc="added Jun 26, 2014";
  tags= [Main_estimate];
  ineq= `!x1 x2 x3 x4 x5 x6.
     ineq
     [ #4.0,x1, #2.0 *  #1.26 *  #2.0 *  #1.26;  #4.0,
                                                x2,
                                                 #2.0 *
                                                 #1.26 *
                                                 #2.0 *
                                                 #1.26;  #4.0,
                                                        x3,
                                                         #2.0 *
                                                         #1.26 *
                                                         #2.0 *
                                                         #1.26;  #3.01 *
                                                                 #3.01,
                                                                x4,
                                                                 #3.166 *
                                                                 #3.166; 
      #4.0,
     x5,
      #4.0;  #4.0,x6, #4.0]
     (
      &0 < ups_x x2 x3 x4 \/ &10 + delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0 \/
      delta_x4 x1 x2 x3 x4 x5 x6 * -- &1 < &0 )`;
};;



111;;


let domain6_assum = prove_by_refinement(
  `!h g f. domain6 h f g ==> (F ==> (f = g))`,
  (* {{{ proof *)
  [
  MESON_TAC[]
  ]);;
  (* }}} *)

  let strip_domain6 thm = 
    try 
      UNDISCH (MATCH_MP domain6_assum (SPEC_ALL thm))
    with Failure _ -> thm;;



(* ignore domain6 constraints *)

(* expand is in prep_def.hl *)

  let rewrite_to_cpp_library_functions = map strip_domain6 
   exp2;;   

expand_nodomain;;

  let test k = 
    let u = REWRITE_RULE rewrite_to_cpp_library_functions
     (h1 k) in
    let v = REWRITE_RULE (rewrite_to_cpp_library_functions @ [Sphere.rotate2;Sphere.rotate3;Sphere.rotate4;Sphere.rotate5;Sphere.rotate6]) u in
       (concl v);;

  let ptest k = const_names (test k);;


ptest 50;;
map ptest (100--200);;
it;;
sz;;
filter (fun i ->  (ptest i = [])) (0--100);;

ptest 328;;
Sphere.norm2hh_x;;
map (concl o h1) [595;597;599;601;778; 779; 783];;
[595; 597; 599; 601; 778; 779; 783];; (* quad cases *)

  let uu = List.flatten it;;


let cons1 = (map (const_types o test) (100--200));;
let cons = (map (const_types o test) (0--(List.length !Prep.prep_ineqs - 1)));;
let nubcons = Flyspeck_lib.nub cons;;
let z1 = zip !Prep.prep_ineqs cons;;
let z2 = filter (fun (_,c) -> mem "sol_x" c) z1;;
List.length !Prep.prep_ineqs;;
map (fun (t,_) -> t.idv) z2;;

let has_const x i = 
  mem x (const_types (test i));;

filter (has_const "sol_y") (0--30);;

test 1;;

Sphere.hminus;;

(*old*)
  let rewrite_to_cpp_library_functions = map strip_domain6 [
Sphere.ineq;
    Sphere.gchi;
   Functional_equation.uni;
Functional_equation.functional_vol_x;
Functional_equation.functional_dih2_x;
Functional_equation.functional_dih3_x;
Functional_equation.functional_dih4_x;
Functional_equation.functional_dih5_x;
Functional_equation.functional_dih6_x;
Functional_equation.functional_gchi1_x;
Functional_equation.functional_gchi2_x;
Functional_equation.functional_gchi3_x;
Functional_equation.functional_gchi4_x;
Functional_equation.functional_gchi5_x;
Functional_equation.functional_gchi6_x;
Functional_equation.functional_ldih2_x;
Functional_equation.functional_ldih3_x;
Functional_equation.functional_eulerA_x;
Functional_equation.functional_sol156_euler_x_div_sqrtdelta;
Functional_equation.functional_sol246_euler_x_div_sqrtdelta;
Functional_equation.functional_sol345_euler_x_div_sqrtdelta;
   Functional_equation.add6;
   Functional_equation.sub6;
   Functional_equation.mul6;
   Functional_equation.div6;
   Functional_equation.mk_126;
   Functional_equation.mk_135;
   Functional_equation.mk_456;
   Nonlinear_lemma.proj_x1;
   Nonlinear_lemma.proj_x2;
   Nonlinear_lemma.proj_x3;
   Nonlinear_lemma.proj_x4;
   Nonlinear_lemma.proj_x5;
   Nonlinear_lemma.proj_x6;
   Functional_equation.compose6;
   Functional_equation.functional_rotate2;
   Functional_equation.functional_rotate3;
   Functional_equation.functional_rotate4;
   Functional_equation.functional_rotate5;
   Functional_equation.functional_rotate6;
   Functional_equation.proj_y1;
   Functional_equation.functional_proj_y2;
   Functional_equation.functional_proj_y3;
   Functional_equation.functional_proj_y4;
   Functional_equation.functional_proj_y5;
   Functional_equation.functional_proj_y6;
Functional_equation.functional_delta_126_x;
Functional_equation.functional_delta_234_x;
Functional_equation.functional_delta_135_x;
Nonlin_def.flat_term2_135_x;Nonlin_def.flat_term2_234_x;
Functional_equation.functional_mud_135_x;Functional_equation.functional_mud_126_x;
Functional_equation.functional_mud_234_x;
Functional_equation.functional_ldih2_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih3_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih5_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih6_x_div_sqrtdelta_posbranch; 
(*   Sphere.delta_x; *)
Functional_equation.functional_ldih_x_div_sqrtdelta_posbranch;
Functional_equation.functional_sol_euler_x_divsqrtdelta;
Functional_equation.functional_dih_x_div_sqrtdelta_posbranch;
Functional_equation.functional_rhazim_x;
Functional_equation.functional_rhazim2_x;
Functional_equation.functional_rhazim3_x;
    Functional_equation.rh0;
Functional_equation.functional_delta4_squared_x;
Functional_equation.functional_x1_delta_x;
Functional_equation.functional_tau_residual;
Nonlin_def.mu6_x;Functional_equation.taud_x_ALT;
Nonlin_def.taud_D2_num_x;Nonlin_def.taud_D1_num_x;
Functional_equation.functional_edge2_126_x;Functional_equation.functional_edge2_135_x;
Functional_equation.functional_edge2_234_x;
Nonlin_def.flat_term2_126_x;Nonlin_def.flat_term2_135_x;Nonlin_def.flat_term2_234_x;
Functional_equation.functional_delta_x1;
    REWRITE_RULE[Sphere.flat_term] Sphere.flat_term_x;
Functional_equation.functional_rhazim_x_div_sqrt_delta_posbranch;
Functional_equation.functional_rhazim2_x_div_sqrt_delta_posbranch;
Functional_equation.functional_rhazim3_x_div_sqrt_delta_posbranch;
Nonlin_def.mudLs_234_x;Nonlin_def.mudLs_126_x;
Nonlin_def.mudLs_135_x;
Functional_equation.functional_taum_x;
Functional_equation.functional_dnum1;
Nonlinear_lemma.halfbump_x;
Functional_equation.functional_halfbump_x1;
Functional_equation.functional_halfbump_x4;
Functional_equation.functional_asn797k;
Functional_equation.functional_asnFnhk;
Functional_equation.functional_acs_sqrt_x1_d4;
   Sphere.arc_hhn;
Functional_equation.functional_arclength_x1;
REWRITE_RULE[LET_DEF;LET_END_DEF] Functional_equation.functional_arclength_x_123;
Functional_equation.vol3f_456;
Functional_equation.functional_vol3_x_sqrt;
Functional_equation.functional_vol3f_x_sqrt2_lmplus;
Functional_equation.functional_vol3f_x_lfun;
Functional_equation.functional_eta2_135;
Functional_equation.functional_eta2_456;
Functional_equation.gamma3_x;
Functional_equation.gamma23_full8_x;
Functional_equation.gamma23_keep135_x;
Functional_equation.gamma3f_x_div_sqrtdelta_alt;
Functional_equation.functional_dih4_x_div_sqrtdelta_posbranch;
Functional_equation.functional_ldih6_x;
Functional_equation.functional_ldih_x;
   Functional_equation.functional_norm2hh_x;
     Nonlin_def.unit6;Sphere.rad2_x;Sphere.y_of_x;Sphere.rho_x;
(*  Sphere.dih_x; *)
Sphere.const1;Sphere.delta_x4;Nonlin_def.scalar6;
    ];;

(* prep.hl, removed conditional rewrites, delta_x, atn2 *)

  let ready = ["prep-2125338128"; ];;

  let dependency = [("prep-2445657182",["prep-2445657182"])];;
		    
st 2 [`mudLs_135_x`];;
st 5 [def "mu_y"];;
let ineq_4_799_8 =  (REWRITE_CONV[GSYM Nonlinear_lemma.ineq_expand6]) (concl (SPEC_ALL delta_min_corner_4_799_8));;
Nonlinear_lemma.ineq_expand6;;
v

(*
........

let delta_test_1 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 y.   (&0 < y) ==>
   (delta_x x1 x2 x3 x4 x5 x6 + unit6 x1 x2 x3 x4 x5 x6 * -- y < &0 \/
     (&0 < delta_x x1 x2 x3 x4 x5 x6))
   `,
  (* {{{ proof *)
  [
  REWRITE_TAC[Nonlin_def.unit6];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let etest_1 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 y.  &0 < x1 /\ (&0 < y) ==>
   (x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
     delta4_squared_x x1 x2 x3 x4 x5 x6 * -- y <
     &0 \/ (&0 < delta_x x1 x2 x3 x4 x5 x6))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Nonlin_def.unit6];
  st/r
    ...

  ]);;
  (* }}} *)

*)

(*
let etest i = 
  let odom = ([6.;4.;4.;8.;4.;4.],[8.; 7.; 7.; 25.; 7.;7.]) in
  let t = concl (h1 i) in
  let (a,b) = ocaml_domain t in
  let (_,_,fs) = Optimize.dest_ineq t in
    include_domain (a,b) odom && 
   exists (has_match `x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
     delta4_squared_x x1 x2 x3 x4 x5 x6 * -- y <
     &0`) fs;;

let ftest i  = 
  let odom = ([4.;4.;4.;9.;9.;9.],[6.3504; 6.3504; 6.3504; 15.328;15.328;15.328]) in
  let t = concl (h1 i) in
  let (a,b) = ocaml_domain t in
  let (_,_,fs) = Optimize.dest_ineq t in
    include_domain (a,b) odom && 
      exists (has_match `eulerA_x x1 x2 x3 x4 x5 x6 < &0`) fs;;

let delta_x_pos = 
  let dx = `(delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0)` in
  let p1 = !Prep.prep_ineqs in
    filter (fun t ->  
	      let i = t.ineq in
	      let (inq,d,f) = simple_dest_ineq i in
		f = dx) p1;;

map (rhs o concl o REAL_RAT_REDUCE_CONV) (map (fun t -> t.ineq) delta_x_pos);;
REAL_RAT_REDUCE_CONV;;

let h1 = 
  let i1 = map (get_nth) (map (fun t -> Random.int 5070) (0--80)) in
    fun k -> (ASSUME (snd(strip_forall (List.nth i1 k))));;

*)




