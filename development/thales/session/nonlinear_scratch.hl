
(* PROOFS *)

let muR_alt = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6 y7 y8 y9.
         muR y1 y2 y3 y4 y5 y6 y7 y8 y9  =
         cayleyR (y6 * y6) (y5 * y5) (y1 * y1) (y7 * y7) (y4 * y4) (y2 * y2)
         (y8 * y8)
         (y3 * y3)
         (y9 * y9)
         `,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[FUN_EQ_THM;Mur.muR])
  ]);;
  (* }}} *)

let quad_cross_diag2_x_cayleyR = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 x7 x8 x9.  
    &0 <= x1 /\
    &0 <= x2 /\
    &0 <= x3 /\
    &0 <= x4 /\
    &0 <= x5 /\
    &0 <= x6 /\
    &0 <= x7 /\
    &0 <= x8 /\
    &0 <= x9 ==>
    quad_cross_diag2_x x1 x2 x3 x4 x5 x6 x7 x8 x9 = 
	sqrt(quadratic_root_plus (abc_of_quadratic (cayleyR x3 x2 x1 x7 x4 x5 x8 x6 x9)))
`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Enclosed.quad_cross_diag2_x;Enclosed.enclosed;muR_alt];
  BY(SIMP_TAC[Merge_ineq.sqrtpow2])
  ]);;
  (* }}} *)

let quadratic_root_upper_bound = prove_by_refinement(
  `!a b c e x.
    &0 < a /\ &0 < &2 * a * e + b /\ &0 < a * e pow 2 + b * e + c /\
    a * x pow 2 + b * x + c = &0 ==> x < e`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ONCE_REWRITE_TAC[arith `x < e <=> (~ (x = e) /\ ~(e < x))`];
  REPEAT STRIP_TAC;
    (FIRST_X_ASSUM_ST `u = &0` MP_TAC) THEN ASM_REWRITE_TAC[];
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `(a * x pow 2 + b * x + c) - (a * e pow 2 + b * e + c) = a * (x - e) pow 2 + (&2 * a *  e + b) * (x - e)` (C SUBGOAL_THEN MP_TAC);
    BY(REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC (arith `&0 < u /\ &0 < v ==> ~(&0 - u = v)`);
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC (arith `&0 < u /\ &0 < v ==> &0 < u + v`);
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  REWRITE_TAC[GSYM Trigonometry2.NOT_ZERO_EQ_POW2_LT];
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  ASM_REWRITE_TAC[];
  BY(ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let quadratic_square_root_upper_bound = prove_by_refinement(
  `!a b c e x.
    &0 < a /\ &0 < &2 * a * e + b /\ &0 < a * e pow 2 + b * e + c /\
    &0 <= b pow 2 - &4 * a * c /\
    b <= &0 /\ &0 <= e 
    ==> sqrt (quadratic_root_plus (a,b,c))  < sqrt e`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `x = quadratic_root_plus(a,b,c)`;
  INTRO_TAC quadratic_root_upper_bound [`a`;`b`;`c`;`e`;`x`];
  ASM_REWRITE_TAC[];
  ANTS_TAC;
    INTRO_TAC Merge_ineq.quadratic_root_plus_works [`a`;`b`;`c`];
    ASM_REWRITE_TAC[LET_THM];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  DISCH_TAC;
  GMATCH_SIMP_TAC SQRT_MONO_LT_EQ;
  ASM_REWRITE_TAC[];
  FULL_EXPAND_TAC "x";
  REWRITE_TAC[Sphere.quadratic_root_plus];
  GMATCH_SIMP_TAC REAL_LE_DIV;
  CONJ2_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  MATCH_MP_TAC (arith `b <= &0 /\ &0 <= u ==> &0 <= --b + u`);
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC SQRT_POS_LE;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let abc_of_quadratic_cayleyR = prove_by_refinement(
  `!x12 x13 x14 x15 x23 x24 x25 x34 x35.
    abc_of_quadratic (cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35) = 
    (ups_x x12 x13 x23,
     cayleytr x12 x13 x14 x15 x23 x24 x25 x34 x35 (&0),
     cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 (&0)
    )`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 = (\x.  (ups_x x12 x13 x23) * x pow 2 + cayleytr x12 x13 x14 x15 x23 x24 x25 x34 x35 (&0) * x + cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 (&0))` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[FUN_EQ_THM;GSYM Collect_geom.LEMMA50]);
  REWRITE_TAC[Nonlinear_lemma.abc_quadratic;PAIR_EQ];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let cayleyR_disc = prove_by_refinement(
  `!x12 x13 x14 x15 x23 x24 x25 x34 x35.
    (let a = ups_x x12 x13 x23 in
     let b = cayleytr x12 x13 x14 x15 x23 x24 x25 x34 x35 (&0) in
     let c = cayleyR x12 x13 x14 x15 x23 x24 x25 x34 x35 (&0) in
       (b pow 2 - &4 * a * c = &16 * delta x12 x13 x14 x23 x24 x34 *
             delta x12 x13 x15 x23 x25 x35))`,
  (* {{{ proof *)
  [
    REWRITE_TAC[LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC Collect_geom.LEMMA51;
  BY(REWRITE_TAC[GSYM Collect_geom.LEMMA50])
  ]);;
  (* }}} *)

let quad_cross_diag2_x_bound = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 x7 x8 x9 x10.  
    &0 <= x1 /\
    &0 <= x2 /\
    &0 <= x3 /\
    &0 <= x4 /\
    &0 <= x5 /\
    &0 <= x6 /\
    &0 <= x7 /\
    &0 <= x8 /\
    &0 <= x9 /\
    &0 <= x10 /\
    &0 < ups_x x2 x3 x4 /\
    &0 <= delta_x x1 x2 x3 x4 x5 x6 /\
    &0 <= delta_x x7 x2 x3 x4 x8 x9 /\
    &0 < &2 * ups_x x2 x3 x4 * x10 + cayleytr x3 x2 x1 x7 x4 x5 x8 x6 x9 (&0) /\
    &0 < cayleyR x3 x2 x1 x7 x4 x5 x8 x6 x9 x10 /\
    cayleytr x3 x2 x1 x7 x4 x5 x8 x6 x9 (&0) <= &0 
    ==>
    quad_cross_diag2_x x1 x2 x3 x4 x5 x6 x7 x8 x9 < sqrt x10
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[quad_cross_diag2_x_cayleyR];
  REWRITE_TAC[abc_of_quadratic_cayleyR];
  MATCH_MP_TAC quadratic_square_root_upper_bound;
  INTRO_TAC cayleyR_disc [`x3`;`x2`;`x1`;`x7`;`x4`;`x5`;`x8`;`x6`;`x9`];
  ASM_SIMP_TAC[LET_THM];
  DISCH_THEN kill;
  ASM_REWRITE_TAC[GSYM Collect_geom.LEMMA50];
  GMATCH_SIMP_TAC REAL_LE_MUL;
  GMATCH_SIMP_TAC REAL_LE_MUL;
  ASM_REWRITE_TAC[Merge_ineq.delta_delta_x];
  TYPIFY `ups_x x3 x2 x4 = ups_x x2 x3 x4` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[Sphere.ups_x] THEN REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  BY(REPEAT STRIP_TAC THEN REPEAT (FIRST_X_ASSUM_ST `delta_x` MP_TAC) THEN REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let quad_idv = ["9507202313 eta";
	      "9507202313 cayleytr0";
	      "9507202313 cayleytr";
	      "9507202313 cayleyR";
	      "4680581274 delta issue-ups";
	      "4680581274 delta issue-cayleytr0";
	      "4680581274 delta issue-cayleytr";
	      "4680581274 delta issue-cayleyR";
	      "4680581274 1x";
	      "4680581274 2x";
	     ];;

(*
  let get1 s = find (fun t -> (t.idv = s)) (!Ineq.ineqs) ;;
  let ineqs = map get1 quad_idv ;;
  let ineql = map (fun idv -> idv.ineq) ineqs;;
   map Print_types.print_term_types ineql;;
*)

let mk_quad_nonlinear = 
  let get1 s = find (fun t -> (t.idv = s)) (!Ineq.ineqs) in
  let ineqs = map get1 quad_idv in 
  let ineql = map (fun idv -> idv.ineq) ineqs in
  let ineq_conj = end_itlist (curry mk_conj) ineql in
  let u = new_definition (mk_eq (`quad_nonlinear_v2:bool`,ineq_conj)) in
    u;;

let get_quad_nonlinear = 
  let th = mk_quad_nonlinear in 
  let th1 = UNDISCH (MATCH_MP (TAUT `(a <=> b) ==> (a ==> b)`) th) in
  let co1 thm = if (is_conj (concl thm)) then CONJUNCT1 thm else thm in
    fun s ->
      let i = index s quad_idv in
      let th2 = funpow i CONJUNCT2 th1 in
	co1 th2;;

get_quad_nonlinear "9507202313 cayleyR";;

let sq_imp_nn = prove_by_refinement(
  `!c x. c pow 2 <= x ==> &0 <= x`,
  (* {{{ proof *)
  [
    REPEAT WEAKER_STRIP_TAC;
  TYPIFY `&0 <= c pow 2` ENOUGH_TO_SHOW_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  BY(REWRITE_TAC[ REAL_LE_POW_2])
  ]);;
  (* }}} *)


let quad9507202313 = prove_by_refinement(
  `quad_nonlinear_v2 ==> (!x1 x2 x3 x4 x5 x6 x7 x8 x9.
			    &0 <= delta_x x1 x2 x3 x4 x5 x6 /\
			    &0 <= delta_x x7 x2 x3 x4 x8 x9
			     ==>
     ineq
     [ #4.0,x1, #2.0 *  #1.26 *  #2.0 *  #1.26;  #4.0,
                                                x2,
                                                 #2.0 *
                                                 #1.26 *
                                                 #2.0 *
                                                 #1.26;  #4.0,
                                                        x3,
                                                         #2.0 *
                                                         #1.26 *
                                                         #2.0 *
                                                         #1.26;  #3.41 *
                                                                 #3.41,
                                                                x4,
                                                                 #3.634 *
                                                                 #3.634; 
      #4.0,
     x5,
      #4.0;  #6.3504,x6, #6.3504;  #4.0,x7, #2.0 *  #1.26 *  #2.0 *  #1.26; 
      #4.0,
     x8,
      #4.0;  #3.01 *  #3.01,x9, #3.01 *  #3.01]
     (unit6 x1 x2 x3 x4 x5 x6 * &30 + delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0 \/
      quad_cross_diag2_x x1 x2 x3 x4 x5 x6 x7 x8 x9 +
      unit6 x1 x2 x3 x4 x5 x6 * -- #3.01 <
      &0))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq;IMP_IMP_THM;Nonlin_def.unit6;arith `&1 * u = u`];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `&30 + delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  REWRITE_TAC[arith `u + -- v < &0 <=> u < v`];
  TYPIFY `#3.01 = sqrt(#3.01 * #3.01)` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx;
    BY(REAL_ARITH_TAC);
  MATCH_MP_TAC quad_cross_diag2_x_bound;
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[arith `#4.0 <= x ==> &0 <= x`];
  TYPIFY `&0 <= x4 /\ &0 <= x6 /\ &0 <= x9` (C SUBGOAL_THEN ASSUME_TAC);
    RULE_ASSUM_TAC (REWRITE_RULE[arith `x * x = x pow 2`]);
    REPEAT (FIRST_X_ASSUM_ST `pow` (ASSUME_TAC o MATCH_MP sq_imp_nn));
    ASM_REWRITE_TAC[];
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(REAL_ARITH_TAC);
  CONJ_TAC;
    INTRO_TAC (get_quad_nonlinear "9507202313 eta") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`];
    BY(ASM_REWRITE_TAC[Sphere.ineq]);
  CONJ_TAC;
    INTRO_TAC (get_quad_nonlinear "9507202313 cayleytr") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`;`x7`;`x8`;`x9`;`#3.01 * #3.01`];
    ASM_REWRITE_TAC[Sphere.ineq];
    DISCH_THEN MATCH_MP_TAC;
    BY(REAL_ARITH_TAC);
  CONJ_TAC;
    INTRO_TAC (get_quad_nonlinear "9507202313 cayleyR") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`;`x7`;`x8`;`x9`;`#3.01 * #3.01`];
    ASM_REWRITE_TAC[Sphere.ineq];
    DISCH_THEN MATCH_MP_TAC;
    BY(REAL_ARITH_TAC);
  INTRO_TAC (get_quad_nonlinear "9507202313 cayleytr0") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`;`x7`;`x8`;`x9`];
  ASM_REWRITE_TAC[Sphere.ineq];
  ASM_SIMP_TAC[arith `&0 <= u ==> ~(u < &0)`];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let quad_4680581274_delta_issue = prove_by_refinement(
  `quad_nonlinear_v2 ==> (!x1 x2 x3 x4 x5 x6 x7 x8 x9.
    			    &0 <= delta_x x1 x2 x3 x4 x5 x6 /\
			    &0 <= delta_x x7 x2 x3 x4 x8 x9
    ==>
     ineq
     [ #4.0,x1, #2.0 *  #1.26 *  #2.0 *  #1.26;  #4.0,
                                                x2,
                                                 #2.0 *
                                                 #1.26 *
                                                 #2.0 *
                                                 #1.26;  #4.0,
                                                        x3,
                                                         #2.0 *
                                                         #1.26 *
                                                         #2.0 *
                                                         #1.26;  #3.01 *
                                                                 #3.01,
                                                                x4,
                                                                 #3.166 *
                                                                 #3.166; 
      #4.0,
     x5,
      #4.0;  #4.0,x6, #4.0;  #4.0,x7, #2.0 *  #1.26 *  #2.0 *  #1.26; 
      #4.0,
     x8,
      #4.0;  #3.01 *  #3.01,x9, #3.01 *  #3.01]
     (unit6 x1 x2 x3 x4 x5 x6 * &10 + delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0 \/
      delta_x4 x1 x2 x3 x4 x5 x6 * -- &1 < &0 \/
      quad_cross_diag2_x x1 x2 x3 x4 x5 x6 x7 x8 x9 +
      unit6 x1 x2 x3 x4 x5 x6 * -- #3.01 <
      &0))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq;IMP_IMP_THM;Nonlin_def.unit6;arith `&1 * u = u`];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `&10 + delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `delta_x4 x1 x2 x3 x4 x5 x6 * -- &1 < &0` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  REWRITE_TAC[arith `u + -- v < &0 <=> u < v`];
  TYPIFY `#3.01 = sqrt(#3.01 * #3.01)` (C SUBGOAL_THEN SUBST1_TAC);
    GMATCH_SIMP_TAC Nonlinear_lemma.sqrtxx;
    BY(REAL_ARITH_TAC);
  MATCH_MP_TAC quad_cross_diag2_x_bound;
  ASM_REWRITE_TAC[];
  ASM_SIMP_TAC[arith `#4.0 <= x ==> &0 <= x`];
  TYPIFY `&0 <= x4  /\ &0 <= x9` (C SUBGOAL_THEN ASSUME_TAC);
    RULE_ASSUM_TAC (REWRITE_RULE[arith `x * x = x pow 2`]);
    REPEAT (FIRST_X_ASSUM_ST `pow` (ASSUME_TAC o MATCH_MP sq_imp_nn));
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(REAL_ARITH_TAC);
  CONJ_TAC;
    INTRO_TAC (get_quad_nonlinear "4680581274 delta issue-ups") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`];
    BY(ASM_REWRITE_TAC[Sphere.ineq]);
  CONJ_TAC;
    INTRO_TAC (get_quad_nonlinear "4680581274 delta issue-cayleytr") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`;`x7`;`x8`;`x9`;`#3.01 * #3.01`];
    ASM_REWRITE_TAC[Sphere.ineq];
    DISCH_THEN MATCH_MP_TAC;
    BY(REAL_ARITH_TAC);
  CONJ_TAC;
    INTRO_TAC (get_quad_nonlinear "4680581274 delta issue-cayleyR") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`;`x7`;`x8`;`x9`;`#3.01 * #3.01`];
    ASM_REWRITE_TAC[Sphere.ineq];
    DISCH_THEN MATCH_MP_TAC;
    BY(REAL_ARITH_TAC);
  INTRO_TAC (get_quad_nonlinear "4680581274 delta issue-cayleytr0") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`;`x7`;`x8`;`x9`];
  ASM_REWRITE_TAC[Sphere.ineq];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let taum_x_sym = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6. taum_x x1 x3 x2 x4 x6 x5 = taum_x x1 x2 x3 x4 x5 x6`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.taum_x;Sphere.rhazim_x;Sphere.rhazim2_x;Sphere.rhazim3_x];
  REWRITE_TAC[Sphere.rhazim;Sphere.rhazim2;Sphere.rhazim3;Sphere.node2_y;Sphere.node3_y];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC (arith `a = a' /\ b = b' /\ c = c' ==> (a + b + c - p = a' + c' + b' - p)`);
  BY(MESON_TAC[Nonlinear_lemma.dih_y_sym])
  ]);;
  (* }}} *)

let taud_x_taum_x = prove_by_refinement(
  `main_nonlinear_terminal_v11 ==>
    (!x1 x2 x3 x4 x5 x6.
       &4 <= x1 /\ x1 <= (&2 * h0) pow 2 /\
       &4 <= x2 /\ x2 <= (&2 * h0) pow 2 /\
       &4 <= x3 /\ x3 <= (&2 * h0) pow 2 /\
       cstab pow 2 <= x4 /\ x4 <= #3.915 pow 2 /\
       x5 = &4 /\ x6 = &4 /\
	   &0 <= delta_x x1 x2 x3 x4 x5 x6 ==>
	   taud_x x1 x2 x3 x4 x5 x6 <= taum_x x1 x2 x3 x4 x5 x6)
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC (UNDISCH Pent_hex.OWZLKVY4) [`sqrt x1`;`sqrt x2`;`sqrt x3`;`sqrt x4`;`sqrt x5`;`sqrt x6`];
  GMATCH_SIMP_TAC (GSYM Functional_equation.taud_x_taud);
  GMATCH_SIMP_TAC (Terminal.taum_taum_x);
  REWRITE_TAC[Sphere.delta_y;Sphere.y_of_x];
  REPEAT (GMATCH_SIMP_TAC Merge_ineq.sqrtpow2);
  REPEAT (GMATCH_SIMP_TAC SQRT_POS_LE);
  REPEAT (GMATCH_SIMP_TAC REAL_LE_RSQRT);
  REPEAT (GMATCH_SIMP_TAC REAL_LE_LSQRT);
  ASM_REWRITE_TAC[arith `&2 pow 2 = &4`;Collect_geom2.SQRT4_EQ2];
  BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0;Sphere.cstab] THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let quad_4680581274_a = prove_by_refinement(
  `quad_nonlinear_v2 /\ main_nonlinear_terminal_v11 ==> (!x1 x2 x3 x4 x5 x6 x7 x8 x9.
			 // &0 <= delta_x x1 x2 x3 x4 x5 x6 /\
			 // &0 <= delta_x x7 x2 x3 x4 x8 x9 ==>
     ineq
     [ #4.0,x1, #2.0 *  #1.26 *  #2.0 *  #1.26;  #4.0,
                                                x2,
                                                 #2.0 *
                                                 #1.26 *
                                                 #2.0 *
                                                 #1.26;  #4.0,
                                                        x3,
                                                         #2.0 *
                                                         #1.26 *
                                                         #2.0 *
                                                         #1.26;  #3.01 *
                                                                 #3.01,
                                                                x4,
                                                                 #3.166 *
                                                                 #3.166; 
      #4.0,
     x5,
      #4.0;  #4.0,x6, #4.0;  #4.0,x7, #2.0 *  #1.26 *  #2.0 *  #1.26; 
      #4.0,
     x8,
      #4.0;  #3.01 *  #3.01,x9, #3.01 *  #3.01]
     (unit6 x1 x2 x3 x4 x5 x6 *  #0.513 +
      taum_x x1 x2 x3 x4 x5 x6 * -- &1 +
      taum_x x7 x2 x3 x4 x8 x9 * -- &1 <
      &0 \/
      delta_x x1 x2 x3 x4 x5 x6 + unit6 x1 x2 x3 x4 x5 x6 * -- &10 < &0 \/
      delta_x4 x1 x2 x3 x4 x5 x6 * -- &1 < &0 \/
      quad_cross_diag2_x x1 x2 x3 x4 x5 x6 x7 x8 x9 +
      unit6 x1 x2 x3 x4 x5 x6 * -- #3.01 <
      &0))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[TAUT `(a \/ b \/ c \/ d) <=> (~b /\ ~c /\ ~d ==> a)`;Nonlin_def.unit6;arith `&1 * u = u`];
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC (arith `#0.541 < a /\ -- #0.028 < b ==> #0.513 + b * -- &1 + a * -- &1 < &0`);
  CONJ_TAC;
    INTRO_TAC (get_quad_nonlinear "4680581274 2x") [`x7`;`x3`;`x2`;`x4`;`x9`;`x8`];
    ASM_REWRITE_TAC[Sphere.ineq;arith `u > v <=> v < u`;IMP_IMP_THM;Sphere.h0];
    ANTS_TAC;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    BY(MESON_TAC[taum_x_sym]);
  INTRO_TAC (get_quad_nonlinear "4680581274 1x") [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`];
  ASM_REWRITE_TAC[Sphere.ineq;arith `u > v <=> v < u`;IMP_IMP_THM;Sphere.h0];
  ASM_REWRITE_TAC[arith `d < &10 <=> (d + -- &10 < &0)`];
  ANTS_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `taud_x x1 x2 x3 x4 x5 x6 <= taum_x x1 x2 x3 x4 x5 x6` ENOUGH_TO_SHOW_TAC;
    BY(REAL_ARITH_TAC);
  INTRO_TAC (UNDISCH_ALL taud_x_taum_x) [`x1`;`x2`;`x3`;`x4`;`x5`;`x6`];
  DISCH_THEN MATCH_MP_TAC;
  ASM_SIMP_TAC[arith `~(d + -- &10 < &0) ==> &0 <= d`];
  BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0;Sphere.cstab] THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)





1;;

let domain6_assum = prove_by_refinement(
  `!h g f. domain6 h f g ==> (F ==> (f = g))`,
  (* {{{ proof *)
  [
  MESON_TAC[]
  ]);;
  (* }}} *)

  let strip_domain6 thm = 
    try 
      UNDISCH (MATCH_MP domain6_assum (SPEC_ALL thm))
    with Failure _ -> thm;;



(* ignore domain6 constraints *)

(* expand is in prep_def.hl *)

  let rewrite_to_cpp_library_functions = map strip_domain6 
   exp2;;   

expand_nodomain;;

  let test k = 
    let u = REWRITE_RULE rewrite_to_cpp_library_functions
     (h1 k) in
    let v = REWRITE_RULE (rewrite_to_cpp_library_functions @ [Sphere.rotate2;Sphere.rotate3;Sphere.rotate4;Sphere.rotate5;Sphere.rotate6]) u in
       (concl v);;

  let ptest k = const_names (test k);;


ptest 50;;
map ptest (100--200);;
it;;
sz;;
filter (fun i ->  (ptest i = [])) (0--100);;

ptest 328;;
Sphere.norm2hh_x;;
map (concl o h1) [595;597;599;601;778; 779; 783];;
[595; 597; 599; 601; 778; 779; 783];; (* quad cases *)

  let uu = List.flatten it;;


let cons1 = (map (const_types o test) (100--200));;
let cons = (map (const_types o test) (0--(List.length !Prep.prep_ineqs - 1)));;
let nubcons = Flyspeck_lib.nub cons;;
let z1 = zip !Prep.prep_ineqs cons;;
let z2 = filter (fun (_,c) -> mem "sol_x" c) z1;;
List.length !Prep.prep_ineqs;;
map (fun (t,_) -> t.idv) z2;;

let has_const x i = 
  mem x (const_types (test i));;

filter (has_const "sol_y") (0--30);;

test 1;;

Sphere.hminus;;

(*old*)
  let rewrite_to_cpp_library_functions = map strip_domain6 [
Sphere.ineq;
    Sphere.gchi;
   Functional_equation.uni;
Functional_equation.functional_vol_x;
Functional_equation.functional_dih2_x;
Functional_equation.functional_dih3_x;
Functional_equation.functional_dih4_x;
Functional_equation.functional_dih5_x;
Functional_equation.functional_dih6_x;
Functional_equation.functional_gchi1_x;
Functional_equation.functional_gchi2_x;
Functional_equation.functional_gchi3_x;
Functional_equation.functional_gchi4_x;
Functional_equation.functional_gchi5_x;
Functional_equation.functional_gchi6_x;
Functional_equation.functional_ldih2_x;
Functional_equation.functional_ldih3_x;
Functional_equation.functional_eulerA_x;
Functional_equation.functional_sol156_euler_x_div_sqrtdelta;
Functional_equation.functional_sol246_euler_x_div_sqrtdelta;
Functional_equation.functional_sol345_euler_x_div_sqrtdelta;
   Functional_equation.add6;
   Functional_equation.sub6;
   Functional_equation.mul6;
   Functional_equation.div6;
   Functional_equation.mk_126;
   Functional_equation.mk_135;
   Functional_equation.mk_456;
   Nonlinear_lemma.proj_x1;
   Nonlinear_lemma.proj_x2;
   Nonlinear_lemma.proj_x3;
   Nonlinear_lemma.proj_x4;
   Nonlinear_lemma.proj_x5;
   Nonlinear_lemma.proj_x6;
   Functional_equation.compose6;
   Functional_equation.functional_rotate2;
   Functional_equation.functional_rotate3;
   Functional_equation.functional_rotate4;
   Functional_equation.functional_rotate5;
   Functional_equation.functional_rotate6;
   Functional_equation.proj_y1;
   Functional_equation.functional_proj_y2;
   Functional_equation.functional_proj_y3;
   Functional_equation.functional_proj_y4;
   Functional_equation.functional_proj_y5;
   Functional_equation.functional_proj_y6;
Functional_equation.functional_delta_126_x;
Functional_equation.functional_delta_234_x;
Functional_equation.functional_delta_135_x;
Nonlin_def.flat_term2_135_x;Nonlin_def.flat_term2_234_x;
Functional_equation.functional_mud_135_x;Functional_equation.functional_mud_126_x;
Functional_equation.functional_mud_234_x;
Functional_equation.functional_ldih2_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih3_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih5_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih6_x_div_sqrtdelta_posbranch; 
(*   Sphere.delta_x; *)
Functional_equation.functional_ldih_x_div_sqrtdelta_posbranch;
Functional_equation.functional_sol_euler_x_divsqrtdelta;
Functional_equation.functional_dih_x_div_sqrtdelta_posbranch;
Functional_equation.functional_rhazim_x;
Functional_equation.functional_rhazim2_x;
Functional_equation.functional_rhazim3_x;
    Functional_equation.rh0;
Functional_equation.functional_delta4_squared_x;
Functional_equation.functional_x1_delta_x;
Functional_equation.functional_tau_residual;
Nonlin_def.mu6_x;Functional_equation.taud_x_ALT;
Nonlin_def.taud_D2_num_x;Nonlin_def.taud_D1_num_x;
Functional_equation.functional_edge2_126_x;Functional_equation.functional_edge2_135_x;
Functional_equation.functional_edge2_234_x;
Nonlin_def.flat_term2_126_x;Nonlin_def.flat_term2_135_x;Nonlin_def.flat_term2_234_x;
Functional_equation.functional_delta_x1;
    REWRITE_RULE[Sphere.flat_term] Sphere.flat_term_x;
Functional_equation.functional_rhazim_x_div_sqrt_delta_posbranch;
Functional_equation.functional_rhazim2_x_div_sqrt_delta_posbranch;
Functional_equation.functional_rhazim3_x_div_sqrt_delta_posbranch;
Nonlin_def.mudLs_234_x;Nonlin_def.mudLs_126_x;
Nonlin_def.mudLs_135_x;
Functional_equation.functional_taum_x;
Functional_equation.functional_dnum1;
Nonlinear_lemma.halfbump_x;
Functional_equation.functional_halfbump_x1;
Functional_equation.functional_halfbump_x4;
Functional_equation.functional_asn797k;
Functional_equation.functional_asnFnhk;
Functional_equation.functional_acs_sqrt_x1_d4;
   Sphere.arc_hhn;
Functional_equation.functional_arclength_x1;
REWRITE_RULE[LET_DEF;LET_END_DEF] Functional_equation.functional_arclength_x_123;
Functional_equation.vol3f_456;
Functional_equation.functional_vol3_x_sqrt;
Functional_equation.functional_vol3f_x_sqrt2_lmplus;
Functional_equation.functional_vol3f_x_lfun;
Functional_equation.functional_eta2_135;
Functional_equation.functional_eta2_456;
Functional_equation.gamma3_x;
Functional_equation.gamma23_full8_x;
Functional_equation.gamma23_keep135_x;
Functional_equation.gamma3f_x_div_sqrtdelta_alt;
Functional_equation.functional_dih4_x_div_sqrtdelta_posbranch;
Functional_equation.functional_ldih6_x;
Functional_equation.functional_ldih_x;
   Functional_equation.functional_norm2hh_x;
     Nonlin_def.unit6;Sphere.rad2_x;Sphere.y_of_x;Sphere.rho_x;
(*  Sphere.dih_x; *)
Sphere.const1;Sphere.delta_x4;Nonlin_def.scalar6;
    ];;

(* prep.hl, removed conditional rewrites, delta_x, atn2 *)

  let ready = ["prep-2125338128"; ];;

  let dependency = [("prep-2445657182",["prep-2445657182"])];;
		    
st 2 [`mudLs_135_x`];;
st 5 [def "mu_y"];;
let ineq_4_799_8 =  (REWRITE_CONV[GSYM Nonlinear_lemma.ineq_expand6]) (concl (SPEC_ALL delta_min_corner_4_799_8));;
Nonlinear_lemma.ineq_expand6;;
v

(*
........

let delta_test_1 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 y.   (&0 < y) ==>
   (delta_x x1 x2 x3 x4 x5 x6 + unit6 x1 x2 x3 x4 x5 x6 * -- y < &0 \/
     (&0 < delta_x x1 x2 x3 x4 x5 x6))
   `,
  (* {{{ proof *)
  [
  REWRITE_TAC[Nonlin_def.unit6];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let etest_1 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 y.  &0 < x1 /\ (&0 < y) ==>
   (x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
     delta4_squared_x x1 x2 x3 x4 x5 x6 * -- y <
     &0 \/ (&0 < delta_x x1 x2 x3 x4 x5 x6))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Nonlin_def.unit6];
  st/r
    ...

  ]);;
  (* }}} *)

*)

(*
let etest i = 
  let odom = ([6.;4.;4.;8.;4.;4.],[8.; 7.; 7.; 25.; 7.;7.]) in
  let t = concl (h1 i) in
  let (a,b) = ocaml_domain t in
  let (_,_,fs) = Optimize.dest_ineq t in
    include_domain (a,b) odom && 
   exists (has_match `x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
     delta4_squared_x x1 x2 x3 x4 x5 x6 * -- y <
     &0`) fs;;

let ftest i  = 
  let odom = ([4.;4.;4.;9.;9.;9.],[6.3504; 6.3504; 6.3504; 15.328;15.328;15.328]) in
  let t = concl (h1 i) in
  let (a,b) = ocaml_domain t in
  let (_,_,fs) = Optimize.dest_ineq t in
    include_domain (a,b) odom && 
      exists (has_match `eulerA_x x1 x2 x3 x4 x5 x6 < &0`) fs;;

let delta_x_pos = 
  let dx = `(delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0)` in
  let p1 = !Prep.prep_ineqs in
    filter (fun t ->  
	      let i = t.ineq in
	      let (inq,d,f) = simple_dest_ineq i in
		f = dx) p1;;

map (rhs o concl o REAL_RAT_REDUCE_CONV) (map (fun t -> t.ineq) delta_x_pos);;
REAL_RAT_REDUCE_CONV;;

let h1 = 
  let i1 = map (get_nth) (map (fun t -> Random.int 5070) (0--80)) in
    fun k -> (ASSUME (snd(strip_forall (List.nth i1 k))));;

*)




