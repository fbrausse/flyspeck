
(* PROOFS *)

let lindihpi_lt_small = prove_by_refinement(
  `!u x1 x2 x3 x4 x5 x6. abs u < pi/ & 2 /\
    &0 < x1 /\ 
     &0 < delta_x4 x1 x2 x3 x4 x5 x6 ==> (dih_x x1 x2 x3 x4 x5 x6 <  u <=>
    sqrt(&4 * x1 * delta_x x1 x2 x3 x4 x5 x6)  < tan(u) * delta_x4 x1 x2 x3 x4 x5 x6 
    )`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  REWRITE_TAC[Sphere.dih_x;LET_DEF;LET_END_DEF];
  GMATCH_SIMP_TAC (MESON[Trigonometry1.ATN2_BREAKDOWN] `(y < &0 ==> atn2 (x,y) = --(pi / &2) - atn (x / y))`);
  ASM_REWRITE_TAC[arith `-- d < &0 <=> &0 < d`;arith `pi / &2 + -- (pi/ &2) - x =  -- x`];
  REWRITE_TAC[arith `-- a < u <=> -- u < a`];
  GMATCH_SIMP_TAC (GSYM TAN_MONO_LT_EQ);
  REWRITE_TAC[ATN_TAN;ATN_BOUNDS];
  CONJ_TAC;
    FIRST_X_ASSUM_ST `abs` MP_TAC;
    BY((BY(REAL_ARITH_TAC)));
  REWRITE_TAC[TAN_NEG;Tskajxy.REAL_DIV_NEG;arith `-- a < -- b <=> b < a`];
  GMATCH_SIMP_TAC REAL_LT_LDIV_EQ;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let lindihpi_lt_y_small = prove_by_refinement(
  `!b y1 y2 y3 y4 y5 y6.
    &0 < y1 /\
    &0 < b /\
    &0 <= delta_y y1 y2 y3 y4 y5 y6 /\
    &0 < delta4_y y1 y2 y3 y4 y5 y6 ==>
    (
     &4 * x1_delta_y y1 y2 y3 y4 y5 y6  < b * delta4_squared_y y1 y2 y3 y4 y5 y6 <=>
       dih_y y1 y2 y3 y4 y5 y6 <  atn (sqrt b) 
    )`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.delta_y;Sphere.delta4_y;Sphere.dih_y;LET_DEF;LET_END_DEF;Sphere.delta4_squared_y;Sphere.x1_delta_y;Sphere.y_of_x;Sphere.delta4_squared_x;Sphere.x1_delta_x];
  REPEAT WEAKER_STRIP_TAC;
  TYPED_ABBREV_TAC `a = sqrt b`;
  TYPIFY `&0 < a` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "a";
    GMATCH_SIMP_TAC SQRT_POS_LT;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `b = a pow 2` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "a";
    GMATCH_SIMP_TAC SQRT_POW_2;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  INTRO_TAC lindihpi_lt_small [`atn a`;`y1 * y1`;`y2*y2`;`y3*y3`;`y4*y4`;`y5*y5`;`y6*y6`];
  ASM_REWRITE_TAC[ATN_BOUND];
  ANTS_TAC;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  REWRITE_TAC[ATN_TAN];
  DISCH_THEN SUBST1_TAC;
  TYPED_ABBREV_TAC `s =  (&4 *  (y1 * y1) *  delta_x (y1 * y1) (y2 * y2) (y3 * y3) (y4 * y4) (y5 * y5) (y6 * y6))`;
  TYPIFY `&0 <= s` (C SUBGOAL_THEN ASSUME_TAC);
    EXPAND_TAC "s";
    REWRITE_TAC[arith `&0 <= &4 * x <=> &0 <= x`];
    GMATCH_SIMP_TAC REAL_LE_MUL;
    ASM_REWRITE_TAC[];
    BY(REWRITE_TAC[ REAL_LE_SQUARE]);
  REWRITE_TAC[arith `a pow 2 * b pow 2 = (a * b) pow 2`];
  TYPIFY `sqrt s * sqrt s = s` (C SUBGOAL_THEN ASSUME_TAC);
    GMATCH_SIMP_TAC Merge_ineq.sqrtpow2;
    BY(ASM_REWRITE_TAC[]);
  FIRST_ASSUM (SUBST1_TAC o GSYM);
  REWRITE_TAC[arith `a * a = a pow 2`];
  GMATCH_SIMP_TAC (GSYM Pack1.bp_bdt);
  ASM_REWRITE_TAC[arith `a pow 2 = a * a`];
  GMATCH_SIMP_TAC SQRT_POS_LE;
  ASM_REWRITE_TAC[];
  GMATCH_SIMP_TAC REAL_LE_MUL;
  BY(ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let quad_idv = [
               (* deprecated:
		  "9507202313 eta";
	      "9507202313 cayleytr0";
	      "9507202313 cayleytr";
	      "9507202313 cayleyR";
	       *)
          (* moved to main_nonlinear_terminal_v11:
	      "4680581274 delta issue-ups";
	      "4680581274 delta issue-cayleytr0";
	      "4680581274 delta issue-cayleytr";
	      "4680581274 delta issue-cayleyR";
	      "4680581274 1x";
	      "4680581274 2x";
	  *)
	      (* 4240815464 a series: *)
              "6184614449";
	      "6078657299";
	      "8384429938";
	      "9893763499";
	      "5429228381";
	      "3508342905";
	      "2327525027";
	      "1611600345x";
	      "2608321088x";
	      (* 3862621143 revised series: *)
	      "8425800388";
	      "3253650737";
	      "6723997360";
	      "1968758929";
	      "6404645741";
	      "2513405547";
	      "8293089898";
	     ];;

(* map get_main_nonlinear quad_idv;; *)

(*
  let get1 s = find (fun t -> (t.idv = s)) (!Ineq.ineqs) ;;
  let ineqs = map get1 quad_idv ;;
  let ineql = map (fun idv -> idv.ineq) ineqs;;
   map Print_types.print_term_types ineql;;
*)

let quad_nonlinear = 
  let get1 s = find (fun t -> (t.idv = s)) (!Ineq.ineqs) in
  let ineqs = map get1 quad_idv in 
  let ineql = map (fun idv -> idv.ineq) ineqs in
  let ineq_conj = end_itlist (curry mk_conj) ineql in
  let u = new_definition (mk_eq (`quad_nonlinear_v9:bool`,ineq_conj)) in
    u;;

let get_quad_nonlinear = 
  let th = quad_nonlinear in 
  let th1 = UNDISCH (MATCH_MP (TAUT `(a <=> b) ==> (a ==> b)`) th) in
  let co1 thm = if (is_conj (concl thm)) then CONJUNCT1 thm else thm in
    fun s ->
      let i = index s quad_idv in
      let th2 = funpow i CONJUNCT2 th1 in
	co1 th2;;

let dih_y_imp_delta_y_nz = prove_by_refinement(
  `!y1 y2 y3 y4 y5 y6.
    &0 < y1 /\
    dih_y y1 y2 y3 y4 y5 y6 < pi /\
    delta4_y y1 y2 y3 y4 y5 y6 < &0
       ==> ~(delta_y y1 y2 y3 y4 y5 y6 = &0)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC Sphere.dih_y [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`];
  ASM_REWRITE_TAC[LET_THM];
  ASM_REWRITE_TAC[Sphere.dih_x;LET_THM;GSYM Sphere.delta_y];
  REWRITE_TAC[GSYM Sphere.y_of_x;GSYM Sphere.delta4_y];
  REWRITE_TAC[arith `a * b * &0 = &0`;SQRT_0];
  GMATCH_SIMP_TAC (MESON[Merge_ineq.atn2_0] `&0 < y ==> atn2 (&0,y) = (pi/ &2)`);
  BY(ASM_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let atn_sqrt_39609 = prove_by_refinement(
  `#1.621 < pi - atn (sqrt #396.09)`,
  (* {{{ proof *)
  [
    BY(EVAL_THEN Flyspeck_constants.calc `#1.621 < pi - atn (sqrt #396.09)` (unlist REWRITE_TAC))
  ]);;
  (* }}} *)

let quad_4240815464_a = prove_by_refinement(
  `quad_nonlinear_v9 ==>
    (!y1 y2 y3 y4 y5 y6 y7 y8 y9. ineq (dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9)
( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 < #0.206 \/
    y2 + y3 < y4 \/
 tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 + 
   #0.7573 *dih_y y1 y2 y3 y4 y5 y6 - #1.433 > #0.0 \/
 delta_y y1 y2 y3 y4 y5 y6 < &0 
))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.ineq;Ineq.dart_std4];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 < #0.206` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `y2 + y3 < y4` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `#1.621 <= dih_y y1 y2 y3 y4 y5 y6` ASM_CASES_TAC;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `delta_y y1 y2 y3 y4 y5 y6 < &0` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  RULE_ASSUM_TAC(REWRITE_RULE[arith `(~(x <= y) <=> y < x) /\ (~(x < y) <=> y <= x)`]);
  TYPIFY `delta4_y y1 y2 y3 y4 y5 y6 < &0  ==> ~(&4 * x1_delta_y y1 y2 y3 y4 y5 y6 < #396.09 * delta4_squared_y y1 y2 y3 y4 y5 y6)` (C SUBGOAL_THEN ASSUME_TAC);
    DISCH_TAC;
    TYPIFY `#396.09 = (sqrt (#396.09) pow 2)` (C SUBGOAL_THEN SUBST1_TAC);
      GMATCH_SIMP_TAC SQRT_POW_2;
      BY(REAL_ARITH_TAC);
    GMATCH_SIMP_TAC (GSYM Merge_ineq.lindihpi_gt_y);
    ASM_REWRITE_TAC[];
    TYPIFY `~(delta_y y1 y2 y3 y4 y5 y6 = &0)` (C SUBGOAL_THEN ASSUME_TAC);
      MATCH_MP_TAC dih_y_imp_delta_y_nz;
      ASM_REWRITE_TAC[];
      TYPIFY `#1.621 < pi` ENOUGH_TO_SHOW_TAC;
        BY(ASM_TAC THEN REAL_ARITH_TAC);
      MP_TAC Flyspeck_constants.bounds;
      BY(REAL_ARITH_TAC);
    CONJ_TAC;
      GMATCH_SIMP_TAC SQRT_POS_LT;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    MP_TAC atn_sqrt_39609;
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  TYPIFY `#3.36 <= y4` ASM_CASES_TAC;
    INTRO_TAC (get_quad_nonlinear "6184614449") [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`];
    REWRITE_TAC[Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    DISCH_TAC;
    INTRO_TAC (get_quad_nonlinear "6078657299") [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`];
    REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REAL_ARITH_TAC);
    BY(ASM_SIMP_TAC[arith `&0 <= d ==> ~(d < &0)`]);
  TYPIFY `y4 <= #3.01` ASM_CASES_TAC;
    INTRO_TAC (get_quad_nonlinear "1611600345x") [`y7`;`y2`;`y3`;`y4`;`y8`;`y9`];
    REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
    DISCH_TAC;
    INTRO_TAC (get_quad_nonlinear "2608321088x") [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`];
    REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
    ASM_SIMP_TAC[arith `d < x ==> ~(d > x)`];
    REWRITE_TAC[Sphere.tauq];
    TYPIFY `~(y2 < y3)` ASM_CASES_TAC;
      FIRST_X_ASSUM_ST `taum` MP_TAC THEN ASM_REWRITE_TAC[];
      BY(REAL_ARITH_TAC);
    DISCH_THEN kill;
    FIRST_X_ASSUM_ST `taum` kill;
    RULE_ASSUM_TAC(REWRITE_RULE[]);
    INTRO_TAC (get_quad_nonlinear "1611600345x") [`y7`;`y3`;`y2`;`y4`;`y9`;`y8`];
    REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
    ASM_SIMP_TAC[arith `x < y ==> ~(y < x)`];
    DISCH_TAC;
    INTRO_TAC (get_quad_nonlinear "2608321088x") [`y1`;`y3`;`y2`;`y4`;`y6`;`y5`];
    REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
    POP_ASSUM MP_TAC;
    TYPIFY_GOAL_THEN `taum y1 y3 y2 y4 y6 y5 = taum y1 y2 y3 y4 y5 y6 /\ taum y7 y3 y2 y4 y9 y8 = taum y7 y2 y3 y4 y8 y9` (unlist REWRITE_TAC);
      BY(MESON_TAC[Terminal.taum_sym]);
    TYPIFY_GOAL_THEN `dih_y y1 y3 y2 y4 y6 y5 = dih_y y1 y2 y3 y4 y5 y6 /\ dih_y y7 y3 y2 y4 y9 y8 = dih_y y7 y2 y3 y4 y8 y9` (unlist REWRITE_TAC);
      BY(MESON_TAC[Nonlinear_lemma.dih_y_sym]);
    ASM_SIMP_TAC[arith `d < x ==> ~(d > x)`;arith `x < y ==> ~(y < x)`];
    BY(REAL_ARITH_TAC);
  COMMENT "now [3.01,3.36]";
  TYPIFY `~((y_of_x (delta_234_x ((&2 * h0) pow 2) (&4) (&4)) y1 y2 y3 y4 y5 y6 > &98))` ASM_CASES_TAC;
    INTRO_TAC (get_quad_nonlinear "8384429938") [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`];
    REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
    ASM_REWRITE_TAC[];
    DISCH_TAC;
    INTRO_TAC (get_quad_nonlinear "9893763499") [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`];
    REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
    ANTS_TAC;
      BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
    ASM_REWRITE_TAC[];
    BY(ASM_MESON_TAC[]);
  RULE_ASSUM_TAC(REWRITE_RULE[]);
  REWRITE_TAC[Sphere.tauq];
  INTRO_TAC (get_quad_nonlinear "5429228381") [`y7`;`y2`;`y3`;`y4`;`y8`;`y9`];
  REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
  ANTS_TAC;
    BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
  TYPIFY `y_of_x (delta_234_x ((&2 * h0) pow 2) (&4) (&4)) y7 y2 y3 y4 y8 y9 = y_of_x (delta_234_x ((&2 * h0) pow 2) (&4) (&4)) y1 y2 y3 y4 y5 y6` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[Sphere.y_of_x;Sphere.delta_234_x]);
  ASM_SIMP_TAC[arith `x > n ==> ~(x < n)`];
  DISCH_TAC;
  INTRO_TAC (get_quad_nonlinear "3508342905") [`y1`;`y2`;`y3`;`y4`;`y5`;`y6`];
  REWRITE_TAC[LET_THM;Sphere.ineq;IMP_IMP_THM];
  ANTS_TAC;
    BY(ASM_TAC THEN REWRITE_TAC[Sphere.h0] THEN REAL_ARITH_TAC);
  ASM_SIMP_TAC[arith `x > n ==> ~(x < n)`];
  BY(POP_ASSUM MP_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let quad_3862621143_revised = prove_by_refinement(
  `quad_nonlinear_v9
     ==> (!y1 y2 y3 y4 y5 y6 y7 y8 y9. ineq 
	    (dart_std4 y1 y2 y3 y4 y5 y6 y7 y8 y9)
	    (( tauq y1 y2 y3 y4 y5 y6 y7 y8 y9 - #0.453 * dih_y y1 y2 y3 y4 y5 y6 +  #0.777 > #0.0) \/
	       ( enclosed y1 y5 y6 y4 y2 y3 y7 y8 y9 < #3.01 )  \/
	       ( delta_y y1 y2 y3 y4 y5 y6 < &0) \/
	       (y4 < #2.9) \/
	       ( delta_y y7 y2 y3 y4 y8 y9 < &0))`,
  (* {{{ proof *)
  [
  #
  ]);;
  (* }}} *)




111;;


let domain6_assum = prove_by_refinement(
  `!h g f. domain6 h f g ==> (F ==> (f = g))`,
  (* {{{ proof *)
  [
  MESON_TAC[]
  ]);;
  (* }}} *)

  let strip_domain6 thm = 
    try 
      UNDISCH (MATCH_MP domain6_assum (SPEC_ALL thm))
    with Failure _ -> thm;;



(* ignore domain6 constraints *)

(* expand is in prep_def.hl *)

  let rewrite_to_cpp_library_functions = map strip_domain6 
   exp2;;   

expand_nodomain;;

  let test k = 
    let u = REWRITE_RULE rewrite_to_cpp_library_functions
     (h1 k) in
    let v = REWRITE_RULE (rewrite_to_cpp_library_functions @ [Sphere.rotate2;Sphere.rotate3;Sphere.rotate4;Sphere.rotate5;Sphere.rotate6]) u in
       (concl v);;

  let ptest k = const_names (test k);;


ptest 50;;
map ptest (100--200);;
it;;
sz;;
filter (fun i ->  (ptest i = [])) (0--100);;

ptest 328;;
Sphere.norm2hh_x;;
map (concl o h1) [595;597;599;601;778; 779; 783];;
[595; 597; 599; 601; 778; 779; 783];; (* quad cases *)

  let uu = List.flatten it;;


let cons1 = (map (const_types o test) (100--200));;
let cons = (map (const_types o test) (0--(List.length !Prep.prep_ineqs - 1)));;
let nubcons = Flyspeck_lib.nub cons;;
let z1 = zip !Prep.prep_ineqs cons;;
let z2 = filter (fun (_,c) -> mem "sol_x" c) z1;;
List.length !Prep.prep_ineqs;;
map (fun (t,_) -> t.idv) z2;;

let has_const x i = 
  mem x (const_types (test i));;

filter (has_const "sol_y") (0--30);;

test 1;;

Sphere.hminus;;

(*old*)
  let rewrite_to_cpp_library_functions = map strip_domain6 [
Sphere.ineq;
    Sphere.gchi;
   Functional_equation.uni;
Functional_equation.functional_vol_x;
Functional_equation.functional_dih2_x;
Functional_equation.functional_dih3_x;
Functional_equation.functional_dih4_x;
Functional_equation.functional_dih5_x;
Functional_equation.functional_dih6_x;
Functional_equation.functional_gchi1_x;
Functional_equation.functional_gchi2_x;
Functional_equation.functional_gchi3_x;
Functional_equation.functional_gchi4_x;
Functional_equation.functional_gchi5_x;
Functional_equation.functional_gchi6_x;
Functional_equation.functional_ldih2_x;
Functional_equation.functional_ldih3_x;
Functional_equation.functional_eulerA_x;
Functional_equation.functional_sol156_euler_x_div_sqrtdelta;
Functional_equation.functional_sol246_euler_x_div_sqrtdelta;
Functional_equation.functional_sol345_euler_x_div_sqrtdelta;
   Functional_equation.add6;
   Functional_equation.sub6;
   Functional_equation.mul6;
   Functional_equation.div6;
   Functional_equation.mk_126;
   Functional_equation.mk_135;
   Functional_equation.mk_456;
   Nonlinear_lemma.proj_x1;
   Nonlinear_lemma.proj_x2;
   Nonlinear_lemma.proj_x3;
   Nonlinear_lemma.proj_x4;
   Nonlinear_lemma.proj_x5;
   Nonlinear_lemma.proj_x6;
   Functional_equation.compose6;
   Functional_equation.functional_rotate2;
   Functional_equation.functional_rotate3;
   Functional_equation.functional_rotate4;
   Functional_equation.functional_rotate5;
   Functional_equation.functional_rotate6;
   Functional_equation.proj_y1;
   Functional_equation.functional_proj_y2;
   Functional_equation.functional_proj_y3;
   Functional_equation.functional_proj_y4;
   Functional_equation.functional_proj_y5;
   Functional_equation.functional_proj_y6;
Functional_equation.functional_delta_126_x;
Functional_equation.functional_delta_234_x;
Functional_equation.functional_delta_135_x;
Nonlin_def.flat_term2_135_x;Nonlin_def.flat_term2_234_x;
Functional_equation.functional_mud_135_x;Functional_equation.functional_mud_126_x;
Functional_equation.functional_mud_234_x;
Functional_equation.functional_ldih2_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih3_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih5_x_div_sqrtdelta_posbranch; 
Functional_equation.functional_ldih6_x_div_sqrtdelta_posbranch; 
(*   Sphere.delta_x; *)
Functional_equation.functional_ldih_x_div_sqrtdelta_posbranch;
Functional_equation.functional_sol_euler_x_divsqrtdelta;
Functional_equation.functional_dih_x_div_sqrtdelta_posbranch;
Functional_equation.functional_rhazim_x;
Functional_equation.functional_rhazim2_x;
Functional_equation.functional_rhazim3_x;
    Functional_equation.rh0;
Functional_equation.functional_delta4_squared_x;
Functional_equation.functional_x1_delta_x;
Functional_equation.functional_tau_residual;
Nonlin_def.mu6_x;Functional_equation.taud_x_ALT;
Nonlin_def.taud_D2_num_x;Nonlin_def.taud_D1_num_x;
Functional_equation.functional_edge2_126_x;Functional_equation.functional_edge2_135_x;
Functional_equation.functional_edge2_234_x;
Nonlin_def.flat_term2_126_x;Nonlin_def.flat_term2_135_x;Nonlin_def.flat_term2_234_x;
Functional_equation.functional_delta_x1;
    REWRITE_RULE[Sphere.flat_term] Sphere.flat_term_x;
Functional_equation.functional_rhazim_x_div_sqrt_delta_posbranch;
Functional_equation.functional_rhazim2_x_div_sqrt_delta_posbranch;
Functional_equation.functional_rhazim3_x_div_sqrt_delta_posbranch;
Nonlin_def.mudLs_234_x;Nonlin_def.mudLs_126_x;
Nonlin_def.mudLs_135_x;
Functional_equation.functional_taum_x;
Functional_equation.functional_dnum1;
Nonlinear_lemma.halfbump_x;
Functional_equation.functional_halfbump_x1;
Functional_equation.functional_halfbump_x4;
Functional_equation.functional_asn797k;
Functional_equation.functional_asnFnhk;
Functional_equation.functional_acs_sqrt_x1_d4;
   Sphere.arc_hhn;
Functional_equation.functional_arclength_x1;
REWRITE_RULE[LET_DEF;LET_END_DEF] Functional_equation.functional_arclength_x_123;
Functional_equation.vol3f_456;
Functional_equation.functional_vol3_x_sqrt;
Functional_equation.functional_vol3f_x_sqrt2_lmplus;
Functional_equation.functional_vol3f_x_lfun;
Functional_equation.functional_eta2_135;
Functional_equation.functional_eta2_456;
Functional_equation.gamma3_x;
Functional_equation.gamma23_full8_x;
Functional_equation.gamma23_keep135_x;
Functional_equation.gamma3f_x_div_sqrtdelta_alt;
Functional_equation.functional_dih4_x_div_sqrtdelta_posbranch;
Functional_equation.functional_ldih6_x;
Functional_equation.functional_ldih_x;
   Functional_equation.functional_norm2hh_x;
     Nonlin_def.unit6;Sphere.rad2_x;Sphere.y_of_x;Sphere.rho_x;
(*  Sphere.dih_x; *)
Sphere.const1;Sphere.delta_x4;Nonlin_def.scalar6;
    ];;

(* prep.hl, removed conditional rewrites, delta_x, atn2 *)

  let ready = ["prep-2125338128"; ];;

  let dependency = [("prep-2445657182",["prep-2445657182"])];;
		    
st 2 [`mudLs_135_x`];;
st 5 [def "mu_y"];;
let ineq_4_799_8 =  (REWRITE_CONV[GSYM Nonlinear_lemma.ineq_expand6]) (concl (SPEC_ALL delta_min_corner_4_799_8));;
Nonlinear_lemma.ineq_expand6;;
v

(*
........

let delta_test_1 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 y.   (&0 < y) ==>
   (delta_x x1 x2 x3 x4 x5 x6 + unit6 x1 x2 x3 x4 x5 x6 * -- y < &0 \/
     (&0 < delta_x x1 x2 x3 x4 x5 x6))
   `,
  (* {{{ proof *)
  [
  REWRITE_TAC[Nonlin_def.unit6];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let etest_1 = prove_by_refinement(
  `!x1 x2 x3 x4 x5 x6 y.  &0 < x1 /\ (&0 < y) ==>
   (x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
     delta4_squared_x x1 x2 x3 x4 x5 x6 * -- y <
     &0 \/ (&0 < delta_x x1 x2 x3 x4 x5 x6))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Nonlin_def.unit6];
  st/r
    ...

  ]);;
  (* }}} *)

*)

(*
let etest i = 
  let odom = ([6.;4.;4.;8.;4.;4.],[8.; 7.; 7.; 25.; 7.;7.]) in
  let t = concl (h1 i) in
  let (a,b) = ocaml_domain t in
  let (_,_,fs) = Optimize.dest_ineq t in
    include_domain (a,b) odom && 
   exists (has_match `x1_delta_x x1 x2 x3 x4 x5 x6 * &4 +
     delta4_squared_x x1 x2 x3 x4 x5 x6 * -- y <
     &0`) fs;;

let ftest i  = 
  let odom = ([4.;4.;4.;9.;9.;9.],[6.3504; 6.3504; 6.3504; 15.328;15.328;15.328]) in
  let t = concl (h1 i) in
  let (a,b) = ocaml_domain t in
  let (_,_,fs) = Optimize.dest_ineq t in
    include_domain (a,b) odom && 
      exists (has_match `eulerA_x x1 x2 x3 x4 x5 x6 < &0`) fs;;

let delta_x_pos = 
  let dx = `(delta_x x1 x2 x3 x4 x5 x6 * -- &1 < &0)` in
  let p1 = !Prep.prep_ineqs in
    filter (fun t ->  
	      let i = t.ineq in
	      let (inq,d,f) = simple_dest_ineq i in
		f = dx) p1;;

map (rhs o concl o REAL_RAT_REDUCE_CONV) (map (fun t -> t.ineq) delta_x_pos);;
REAL_RAT_REDUCE_CONV;;

let h1 = 
  let i1 = map (get_nth) (map (fun t -> Random.int 5070) (0--80)) in
    fun k -> (ASSUME (snd(strip_forall (List.nth i1 k))));;

*)




