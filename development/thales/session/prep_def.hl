
let FREEZE_SIMP_TAC t = 
  MP_TAC t THEN SIMP_TAC[] THEN DISCH_THEN kill;;
  
let new_definition' t = 
    if has_stv t 
    then (Print_types.print_term_types t; failwith "new_definition has stv") 
    else new_definition t;;

let dihatn_x = new_definition' 
  `!x1 x2 x3 x4 x5 x6.
         dihatn_x x1 x2 x3 x4 x5 x6 =
         (let d_x4 = delta_x4 x1 x2 x3 x4 x5 x6 in
          let d = delta_x x1 x2 x3 x4 x5 x6 in
          pi / &2 + atn ((--d_x4)/sqrt (&4 * x1 * d)))`;;

let dih2atn_x = new_definition' 
  `!x1 x2 x3 x4 x5 x6.
         dih2atn_x x1 x2 x3 x4 x5 x6 =
         (let e = rotate2 delta_x4 x1 x2 x3 x4 x5 x6 in
          let d = delta_x x1 x2 x3 x4 x5 x6 in
          pi / &2 + atn ((--e)/sqrt (&4 * x2 * d)))`;;

let dih3atn_x = new_definition' 
  `!x1 x2 x3 x4 x5 x6.
         dih3atn_x x1 x2 x3 x4 x5 x6 =
         (let e = rotate3 delta_x4 x1 x2 x3 x4 x5 x6 in
          let d = delta_x x1 x2 x3 x4 x5 x6 in
          pi / &2 + atn ((--e)/sqrt (&4 * x3 * d)))`;;

let dih4atn_x = new_definition' 
  `!x1 x2 x3 x4 x5 x6.
         dih4atn_x x1 x2 x3 x4 x5 x6 =
         (let e = rotate4 delta_x4 x1 x2 x3 x4 x5 x6 in
          let d = delta_x x1 x2 x3 x4 x5 x6 in
          pi / &2 + atn ((--e)/sqrt (&4 * x4 * d)))`;;

let dih5atn_x = new_definition' 
  `!x1 x2 x3 x4 x5 x6.
         dih5atn_x x1 x2 x3 x4 x5 x6 =
         (let e = rotate5 delta_x4 x1 x2 x3 x4 x5 x6 in
          let d = delta_x x1 x2 x3 x4 x5 x6 in
          pi / &2 + atn ((--e)/sqrt (&4 * x5 * d)))`;;

let dih6atn_x = new_definition' 
  `!x1 x2 x3 x4 x5 x6.
         dih6atn_x x1 x2 x3 x4 x5 x6 =
         (let e = rotate6 delta_x4 x1 x2 x3 x4 x5 x6 in
          let d = delta_x x1 x2 x3 x4 x5 x6 in
          pi / &2 + atn ((--e)/sqrt (&4 * x6 * d)))`;;


let domain6 = Nonlin_def.domain6;;

let atn2_xpos = prove_by_refinement(
  `!x y. &0 < x ==> atn2 (x,y) = atn (y/x)`,
  (* {{{ proof *)
  [
  MESON_TAC[Trigonometry1.ATN2_BREAKDOWN]
  ]);;
  (* }}} *)

let delta_x_symmetries = prove_by_refinement(

  `
delta_x x2 x1 x3 x5 x4 x6 = delta_x x1 x2 x3 x4 x5 x6 /\
delta_x x3 x1 x2 x6 x4 x5 = delta_x x1 x2 x3 x4 x5 x6 /\
delta_x x4 x2 x6 x1 x5 x3 = delta_x x1 x2 x3 x4 x5 x6 /\
delta_x x5 x3 x4 x2 x6 x1 = delta_x x1 x2 x3 x4 x5 x6 /\
delta_x x6 x1 x5 x3 x4 x2 = delta_x x1 x2 x3 x4 x5 x6
  `,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[Sphere.delta_x] THEN REAL_ARITH_TAC);
  ]);;
  (* }}} *)



let rot2_delta_x = prove_by_refinement(
  `rotate2 delta_x = delta_x`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM;Sphere.rotate2;Sphere.delta_x];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih_x_dihatn_x = prove_by_refinement(
  `    domain6 (\x1 x2 x3 x4 x5 x6. &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < x1)
    dih_x dihatn_x `,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6;Sphere.dih_x;dihatn_x];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[LET_THM];
  GMATCH_SIMP_TAC atn2_xpos;
  GMATCH_SIMP_TAC SQRT_POS_LT;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  nCONJ_TAC 1;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih2_x_dih2atn_x = prove_by_refinement(
  `    domain6 (\x1 x2 x3 x4 x5 x6. &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < x2)
    dih2_x dih2atn_x `,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6;Sphere.dih2_x;dih2atn_x;Sphere.dih_x;Sphere.rotate2];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[LET_THM];
  GMATCH_SIMP_TAC atn2_xpos;
  GMATCH_SIMP_TAC SQRT_POS_LT;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  FREEZE_SIMP_TAC delta_x_symmetries;
  nCONJ_TAC 1;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  CONJ_TAC;
    BY(REAL_ARITH_TAC);
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  REWRITE_TAC[Sphere.delta_x4];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih3_x_dih3atn_x = prove_by_refinement(
  `    domain6 (\x1 x2 x3 x4 x5 x6. &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 < x3)
    dih3_x dih3atn_x `,
  (* {{{ proof *)
  [
  REWRITE_TAC[LET_THM;domain6;Sphere.dih3_x;dih3atn_x;Sphere.dih_x;Sphere.rotate3];
  REPEAT WEAKER_STRIP_TAC;
  FREEZE_SIMP_TAC delta_x_symmetries;
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  GMATCH_SIMP_TAC atn2_xpos;
  GMATCH_SIMP_TAC SQRT_POS_LT;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  nCONJ_TAC 1;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih4_x_dih4atn_x = prove_by_refinement(
  `    domain6 (\x1 x2 x3 x4 x5 x6. &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\ &0 < x4 /\ &0 <= x5 /\ &0 <= x6)
    dih4_x dih4atn_x `,
  (* {{{ proof *)
  [
  INTRO_TAC Functional_equation.functional_dih4_x [];
  REWRITE_TAC[LET_THM;domain6;dih4atn_x;Sphere.dih_x;Sphere.rotate4];
  ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`];
  REWRITE_TAC[Sphere.rotate4;Sphere.dih_x;LET_THM];
  DISCH_THEN kill;
  REPEAT WEAKER_STRIP_TAC;
  FREEZE_SIMP_TAC delta_x_symmetries;
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  GMATCH_SIMP_TAC atn2_xpos;
  GMATCH_SIMP_TAC SQRT_POS_LT;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  nCONJ_TAC 1;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih5_x_dih5atn_x = prove_by_refinement(
  `    domain6 (\x1 x2 x3 x4 x5 x6. &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\ &0 <= x4 /\ &0 < x5 /\ &0 <= x6)
    dih5_x dih5atn_x `,
  (* {{{ proof *)
  [
  INTRO_TAC Functional_equation.functional_dih5_x [];
  REWRITE_TAC[LET_THM;domain6;dih5atn_x;Sphere.dih_x;Sphere.rotate5];
  ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`];
  REWRITE_TAC[Sphere.rotate5;Sphere.dih_x;LET_THM];
  DISCH_THEN kill;
  REPEAT WEAKER_STRIP_TAC;
  FREEZE_SIMP_TAC delta_x_symmetries;
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  GMATCH_SIMP_TAC atn2_xpos;
  GMATCH_SIMP_TAC SQRT_POS_LT;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  nCONJ_TAC 1;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let dih6_x_dih6atn_x = prove_by_refinement(
  `    domain6 (\x1 x2 x3 x4 x5 x6. &0 < delta_x x1 x2 x3 x4 x5 x6 /\
    &0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\ &0 <= x4 /\ &0 <= x5 /\ &0 < x6)
    dih6_x dih6atn_x `,
  (* {{{ proof *)
  [
  INTRO_TAC Functional_equation.functional_dih6_x [];
  REWRITE_TAC[LET_THM;domain6;dih6atn_x;Sphere.dih_x;Sphere.rotate6];
  ASM_SIMP_TAC[arith `&0 < x ==> &0 <= x`];
  REWRITE_TAC[Sphere.rotate6;Sphere.dih_x;LET_THM];
  DISCH_THEN kill;
  REPEAT WEAKER_STRIP_TAC;
  FREEZE_SIMP_TAC delta_x_symmetries;
  REPEAT (AP_TERM_TAC ORELSE AP_THM_TAC);
  GMATCH_SIMP_TAC atn2_xpos;
  GMATCH_SIMP_TAC SQRT_POS_LT;
  GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
  nCONJ_TAC 1;
    GMATCH_SIMP_TAC REAL_LT_MUL_EQ;
    BY(ASM_REWRITE_TAC[]);
  ASM_REWRITE_TAC[];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)



(* no expand *)
let sol0 = Sphere.sol0;;
let tau0 = Sphere.tau0;;
let mm1 = Sphere.mm1;;
let mm2 = Sphere.mm2;;
let const1 = Sphere.const1;;
let h0 = Sphere.h0;;
let rh0 =    Functional_equation.rh0;;


let ineq = Sphere.ineq;;


let constant6  = Functional_equation.constant6;;
let two6 = Nonlin_def.two6;;
let uni =  Functional_equation.uni;;
let compose6 = Functional_equation.compose6;;
let scalar6 = Nonlin_def.scalar6;;

let proj_x1 =   Nonlinear_lemma.proj_x1;;
let proj_x2 =    Nonlinear_lemma.proj_x2;;
let proj_x3 =    Nonlinear_lemma.proj_x3;;
let proj_x4 =    Nonlinear_lemma.proj_x4;;
let proj_x5 =   Nonlinear_lemma.proj_x5;;
let proj_x6 =    Nonlinear_lemma.proj_x6;;

let rotate2 =   Functional_equation.functional_rotate2;;
let rotate3 =   Functional_equation.functional_rotate3;;
let rotate4 =   Functional_equation.functional_rotate4;;
let rotate5 =   Functional_equation.functional_rotate5;;
let rotate6 =   Functional_equation.functional_rotate6;;

let proj_y1 =    Functional_equation.proj_y1;;
let proj_y2 =       Functional_equation.functional_proj_y2;;
let proj_y3 =          Functional_equation.functional_proj_y3;;
let proj_y4 =          Functional_equation.functional_proj_y4;;
let proj_y5 =          Functional_equation.functional_proj_y5;;
let proj_y6 =          Functional_equation.functional_proj_y6;;

let add6 =   Functional_equation.add6;;
let sub6 =    Functional_equation.sub6;;
let mul6 =   Functional_equation.mul6;;
let div6 =    Functional_equation.div6;;

let mk_126 =    Functional_equation.mk_126;;
let mk_135 =    Functional_equation.mk_135;;
let mk_456 =    Functional_equation.mk_456;;


let gchi = Sphere.gchi;;
let vol_x = Functional_equation.functional_vol_x;;
let flat_term_x =     REWRITE_RULE[Sphere.flat_term] Sphere.flat_term_x;;

let unit6 =  Nonlin_def.unit6;;
let rad2_x = Sphere.rad2_x;;
let rho_x = Sphere.rho_x;;

let eulerA_x = Functional_equation.functional_eulerA_x;;
let delta_x4 = Sphere.delta_x4;;

let atn_gchi1_x = prove_by_refinement(
  `domain6 (\x1 x2 x3 x4 x5 x6.
   &0 < delta_x x1 x2 x3 x4 x5 x6 /\ &0 < x1) 
   gchi1_x (mul6 (uni (gchi,proj_y1)) dihatn_x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6;Functional_equation.functional_gchi1_x;dihatn_x;Sphere.rotate2];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[mul6];
  REPEAT AP_TERM_TAC;
  MP_TAC dih_x_dihatn_x;
  REWRITE_TAC[domain6];
  DISCH_THEN MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let atn_gchi2_x = prove_by_refinement(
  `domain6 (\x1 x2 x3 x4 x5 x6.
   &0 < delta_x x1 x2 x3 x4 x5 x6 /\ &0 < x2) 
   gchi2_x (mul6 (uni (gchi,proj_y2)) dih2atn_x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6;Functional_equation.functional_gchi2_x;dihatn_x;Sphere.rotate2];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[mul6];
  REPEAT AP_TERM_TAC;
  MP_TAC dih2_x_dih2atn_x;
  REWRITE_TAC[domain6];
  DISCH_THEN MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let atn_gchi3_x = prove_by_refinement(
  `domain6 (\x1 x2 x3 x4 x5 x6.
   &0 < delta_x x1 x2 x3 x4 x5 x6 /\ &0 < x3) 
   gchi3_x (mul6 (uni (gchi,proj_y3)) dih3atn_x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6;Functional_equation.functional_gchi3_x;dihatn_x;Sphere.rotate2];
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[mul6];
  REPEAT AP_TERM_TAC;
  MP_TAC dih3_x_dih3atn_x;
  REWRITE_TAC[domain6];
  DISCH_THEN MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

Functional_equation.functional_gchi1_x;;
Functional_equation.functional_gchi2_x;;
Functional_equation.functional_gchi3_x;;
Functional_equation.functional_gchi4_x;;
Functional_equation.functional_gchi5_x;;
Functional_equation.functional_gchi6_x;;


Functional_equation.functional_sol156_euler_x_div_sqrtdelta;;
Functional_equation.functional_sol246_euler_x_div_sqrtdelta;;
Functional_equation.functional_sol345_euler_x_div_sqrtdelta;;
   
Functional_equation.functional_delta_126_x;;
Functional_equation.functional_delta_234_x;;
Functional_equation.functional_delta_135_x;;
Nonlin_def.flat_term2_135_x;;
Nonlin_def.flat_term2_234_x;;
Functional_equation.functional_ldih2_x_div_sqrtdelta_posbranch;; 
Functional_equation.functional_ldih3_x_div_sqrtdelta_posbranch;; 
Functional_equation.functional_ldih5_x_div_sqrtdelta_posbranch;; 
Functional_equation.functional_ldih6_x_div_sqrtdelta_posbranch;; 
(*   Sphere.delta_x;; *)

Functional_equation.functional_delta4_squared_x;;
Functional_equation.functional_x1_delta_x;;
Functional_equation.functional_tau_residual;;
Nonlin_def.mu6_x;;Functional_equation.taud_x_ALT;;
Nonlin_def.taud_D2_num_x;;Nonlin_def.taud_D1_num_x;;
Functional_equation.functional_edge2_126_x;;Functional_equation.functional_edge2_135_x;;
Functional_equation.functional_edge2_234_x;;
Nonlin_def.flat_term2_126_x;;Nonlin_def.flat_term2_135_x;;Nonlin_def.flat_term2_234_x;;
Functional_equation.functional_delta_x1;;
    REWRITE_RULE[Sphere.flat_term] Sphere.flat_term_x;;
Functional_equation.functional_rhazim_x_div_sqrt_delta_posbranch;;
Functional_equation.functional_rhazim2_x_div_sqrt_delta_posbranch;;
Functional_equation.functional_rhazim3_x_div_sqrt_delta_posbranch;;
Nonlin_def.mudLs_234_x;;Nonlin_def.mudLs_126_x;;
Nonlin_def.mudLs_135_x;;
Functional_equation.functional_taum_x;;
Functional_equation.functional_dnum1;;
Nonlinear_lemma.halfbump_x;;
Functional_equation.functional_halfbump_x1;;
Functional_equation.functional_halfbump_x4;;
Functional_equation.functional_asn797k;;
Functional_equation.functional_asnFnhk;;
Functional_equation.functional_acs_sqrt_x1_d4;;
   Sphere.arc_hhn;;
Functional_equation.functional_arclength_x1;;
REWRITE_RULE[LET_DEF;;LET_END_DEF] Functional_equation.functional_arclength_x_123;;
Functional_equation.vol3f_456;;
Functional_equation.functional_vol3_x_sqrt;;
Functional_equation.functional_vol3f_x_sqrt2_lmplus;;
Functional_equation.functional_vol3f_x_lfun;;
Functional_equation.functional_eta2_135;;
Functional_equation.functional_eta2_456;;
Functional_equation.gamma3_x;;
Functional_equation.gamma23_full8_x;;
Functional_equation.gamma23_keep135_x;;
Functional_equation.gamma3f_x_div_sqrtdelta_alt;;
Functional_equation.functional_dih4_x_div_sqrtdelta_posbranch;;
Functional_equation.functional_ldih6_x;;
Functional_equation.functional_ldih_x;;
   Functional_equation.functional_norm2hh_x;;
Sphere.y_of_x;;
Sphere.rho_x;;
(*  Sphere.dih_x;; *)





Functional_equation.functional_ldih2_x;;
Functional_equation.functional_ldih3_x;;

(* domain 6 *)
Functional_equation.functional_mud_135_x;;
Functional_equation.functional_mud_126_x;;
Functional_equation.functional_mud_234_x;;
Functional_equation.functional_ldih_x_div_sqrtdelta_posbranch;;
Functional_equation.functional_sol_euler_x_divsqrtdelta;;
Functional_equation.functional_dih_x_div_sqrtdelta_posbranch;;
Functional_equation.functional_rhazim_x;;
Functional_equation.functional_rhazim2_x;;
Functional_equation.functional_rhazim3_x;;
Functional_equation.functional_dih2_x;;
Functional_equation.functional_dih3_x;;
Functional_equation.functional_dih4_x;;
Functional_equation.functional_dih5_x;;
Functional_equation.functional_dih6_x;;

(* atn2 *)
Sphere.dih_x;;

let expand = [LET_THM;
	constant6;two6;uni;compose6;scalar6;
	proj_x1;proj_x2;proj_x3;proj_x4;proj_x5;proj_x6;
        proj_y1;proj_y2;proj_y3;proj_y4;proj_y5;proj_y6;
        add6;sub6;mul6;div6;mk_126;mk_135;mk_456;
	gchi;vol_x;flat_term_x;eulerA_x;
	unit6;rad2_x;rho_x;
   dihatn_x;dih2atn_x;dih3atn_x;dih4atn_x;dih5atn_x;dih6atn_x;
	atn_gchi1_x;atn_gchi2_x;atn_gchi3_x];;
