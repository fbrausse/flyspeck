
needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
(* flyspeck_needs "tame/import_tame_classification.hl";; *)
flyspeck_needs "tame/more_tame_concl.hl";;
flyspeck_needs "tame/tame_defs2.hl";;

module Work_in_progress = struct
end;;

open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Reduction3;;


(* kill fztrans, if_betwn *)

(* DEFS *)

let ftrans = new_definition'
  `!L N r (x:A#A) i. ftrans L N r x i = if i = 0 then SND x else FST (ztrans L N r x (PRE i))`;;


let ifbetwn = new_definition'
  `!s (x:A) y. ifbetwn s x y = if MEM x s /\ MEM y s /\ ~(x=y) then rcons (betwn s x y) y else []`;;

(* END DEFS *)

let dest_triple_full_ifbetwn = prove_by_refinement(
  `!L N r (x:A#A) k. 
    good_list L /\
    good_list_nodes L /\
    marked_list L N r x /\
    ~final_list L r /\
    transform_count L N r x = k /\
    (?w. prev_el (core L r) w,w = x) /\
    is_restricted (hypermap_of_list L)  ==>
      dest_triple_full (core L r) (SND x) (core_triple_v4 L N r x) =
         cat (         (flatten
         (MAP
          (\i. cat (MAP SOME ( (ftrans L N r x i) ::
	ifbetwn (core L r) (ftrans L N r x i) (FST (ytrans L N r x i))))
                (nseq
                 (sizel
                 (betwn (find_face L x) (ytrans L N r x i)
                 (ztrans L N r x i)))
                NONE)
               )
         (iota 0 (k))))) (MAP SOME ( (ftrans L N r x k):: 
	 (ifbetwn (core L r) (ftrans L N r x k) (FST x))))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC dest_triple_full_explicit [`L`;`N`;`r`;`x`;`k`];
  ASM_SIMP_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  ASM_SIMP_TAC[];
  DISCH_THEN kill;
  MATCH_MP_TAC Reduction2.cat_eq;
  TYPIFY `(!i. i <= k ==> MEM (ftrans L N r x i) (core L r))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_ftrans_core]);
  TYPIFY `(!i. i < k ==> MEM (FST (ytrans L N r x i)) (core L r))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_fst_ytrans_core]);
  TYPIFY `uniq (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_list_uniq_core]);
  TYPIFY `MEM (FST x) (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_fst_x_core]);
  TYPIFY `~(k=0)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Reduction3.transform_count_non0]);
  CONJ2_TAC;
    REWRITE_TAC[MAP;CONS_11];
    ASM_SIMP_TAC[ifbetwn;arith `k<=k:num`];
    TYPIFY `FST (ztrans L N r x (PRE k)) = ftrans L N r x k` (C SUBGOAL_THEN SUBST1_TAC);
      BY(ASM_REWRITE_TAC[ftrans]);
    REWRITE_TAC[];
    COND_CASES_TAC THEN ASM_REWRITE_TAC[MAP];
    BY(REWRITE_TAC[lower_case;GSYM Seq.cats1;Seq.map_cat;Seq.map]);
  AP_TERM_TAC;
  MATCH_MP_TAC MAP_EQ;
  REWRITE_TAC[Seq2.ALL_all;GSYM Seq.allP;Seq.mem_iota;arith `0 <= x`;arith `0+k=k`;CONS_11;MAP];
  REPEAT WEAKER_STRIP_TAC;
  ASM_SIMP_TAC[ifbetwn;arith `i < k ==> i <= k`];
  REWRITE_TAC[CONS_11;Seq.cat_cons];
  MATCH_MP_TAC Reduction2.cat_eq THEN REWRITE_TAC[];
  COND_CASES_TAC THEN ASM_REWRITE_TAC[MAP];
  ASM_SIMP_TAC[arith `i < k ==> i <= k:num`];
  BY(REWRITE_TAC[GSYM Seq.cats1;lower_case;Seq.map_cat;Seq.map])
  ]);;
  (* }}} *)

let next_el_subseg = prove_by_refinement(
  `!s t (b:(A)list) i.  s = cat t b /\  
    uniq t /\ 
    SUC i < sizel t ==> next_el s (EL i t) = EL (SUC i) t
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `EL (SUC i) t = next_el t (EL i t) ` (C SUBGOAL_THEN SUBST1_TAC);
    MATCH_MP_TAC (GSYM Aq12.next_el_EL);
    BY(ASM_REWRITE_TAC[]);
  MATCH_MP_TAC next_el_cat1;
  GMATCH_SIMP_TAC mem_el_index;
  GMATCH_SIMP_TAC LAST_EL THEN ASM_SIMP_TAC[GSYM Seq.size_eq0;lower_case];
  GMATCH_SIMP_TAC uniq_el;
  ASM_SIMP_TAC[];
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let next_el_rot = prove_by_refinement(
  ` !s n t b i.  rot n s = cat ( t) b /\ 
    uniq s /\ 
    SUC i < sizel t ==> next_el s (EL i t) = EL (SUC i) t
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC next_el_subseg [`rot n s`;`t`;`b`;`i`];
  REWRITE_TAC[Seq.rot_uniq;Seq.mem_rot];
  SUBANTS_TAC;
    BY(ASM_MESON_TAC[Seq.cat_uniq;Seq.rot_uniq]);
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM (SUBST1_TAC o GSYM);
  BY(ASM_SIMP_TAC[Seq2.next_el_rot_eq])
  ]);;
  (* }}} *)

let next_el_ifbetwn = prove_by_refinement(
  `!s (x:A) y i.  MEM x s /\ MEM y s /\ uniq s /\ 
    SUC i < sizel (x:: ifbetwn s x y) ==>
    (next_el s  (EL i (x :: ifbetwn s x y)) = 
	(EL (SUC i) (x::ifbetwn s x y)))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC next_el_rot;
  TYPIFY `indexl x s` EXISTS_TAC;
  INTRO_TAC (GSYM Pwssrat.rotate_rot_indexl) [`x`;`s`];
  ASM_SIMP_TAC[];
  DISCH_TAC;
  TYPIFY `x = y` ASM_CASES_TAC;
    ASM_REWRITE_TAC[ifbetwn;MEM;EL;HD];
    GEXISTL_TAC [`TL (rotate_to s y)`];
    REWRITE_TAC[Seq.cat0s;Seq.cat1s];
    TYPIFY `~(rotate_to s y = [])` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[rot_eq_nil;List_hypermap.mem_not_nil]);
    BY(ASM_MESON_TAC[CONS_HD_TL;Tame_list.hd_rotate_to]);
  INTRO_TAC post_betwn [`x`;`y`;`rotate_to s x`];
  SUBANTS_TAC;
    ASM_REWRITE_TAC[Tame_list.hd_rotate_to];
    BY(ASM_MESON_TAC[Seq.mem_rot;Seq.rot_uniq]);
  REPEAT WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[MEM;EL;HD];
  ASM_REWRITE_TAC[ifbetwn];
  TYPIFY `post` EXISTS_TAC;
  REWRITE_TAC[Seq.cat0s];
  POP_ASSUM (SUBST1_TAC);
  REWRITE_TAC[Seq.cat0s;Seq.cat_cons;CONS_11];
  TYPIFY `betwn (rotate_to s x) x y = betwn s x y` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[]);
  BY(ASM_MESON_TAC[Seq.index_size;Reduction2.betwn_rot])
  ]);;
  (* }}} *)

let mem_ifbetwn = prove_by_refinement(
  `!x y s u. MEM u (ifbetwn s x y) ==> MEM u s`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ifbetwn];
  REPEAT WEAKER_STRIP_TAC THEN POP_ASSUM MP_TAC THEN COND_CASES_TAC THEN ASM_REWRITE_TAC[];
    REWRITE_TAC[GSYM Seq.cats1;Seq.mem_cat;MEM];
    BY(ASM_MESON_TAC[betwn_mem]);
  BY(REWRITE_TAC[MEM])
  ]);;
  (* }}} *)

let uvns_mem_core = prove_by_refinement(
  `!L N r (x:num#num) k i. 
     good_list L /\
     good_list_nodes L /\
     is_restricted (hypermap_of_list L) /\
     marked_list L N r x /\
     ~final_list L r /\
     (transform_count L N r x = k)  ==>
    (let dtf = dest_triple_full (core L r) (SND x) (core_triple_v4 L N r x) in
        i < sizel dtf /\  isSome (EL i dtf) ==> 
	  MEM (the (EL i dtf)) (core L r) )`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  LET_TAC THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `MEM (the (EL i dtf)) (MAP the (filter isSome dtf))` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC MEMf_MAP;
    REWRITE_TAC[Seq.mem_filter];
    ASM_REWRITE_TAC[];
    BY(ASM_SIMP_TAC[mem_el_index]);
  INTRO_TAC filter_issome_dest_triple_full_alt [`L`;`N`;`r`;`x`;`k`];
  ASM_SIMP_TAC[];
  DISCH_TAC;
  TYPED_ABBREV_TAC `u = the (EL i dtf)`;
  FIRST_X_ASSUM_ST `MEM` MP_TAC THEN ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `MAP` kill;
  TYPIFY `?v. (prev_el (core L r) v,v = x)` (C SUBGOAL_THEN MP_TAC);
    BY(ASM_MESON_TAC[marked_x_exists]);
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM MP_TAC;
  TYPIFY `SND x = v` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_x_exists ;PAIR;FST;SND]);
  COMMENT "mem";
  TYPIFY `MEM v (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_snd_x_core]);
  TYPIFY `(!i. i <= k ==> MEM (ftrans L N r x i) (core L r))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_ftrans_core]);
  TYPIFY `(!i. i < k ==> MEM (FST (ytrans L N r x i)) (core L r))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_fst_ytrans_core]);
  TYPIFY `uniq (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_list_uniq_core]);
  TYPIFY `MEM (FST x) (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_fst_x_core]);
  TYPIFY `~(k=0)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Reduction3.transform_count_non0]);
  TYPIFY `PRE k < k` (C SUBGOAL_THEN ASSUME_TAC);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  REWRITE_TAC[Seq.mem_cat];
  DISCH_THEN DISJ_CASES_TAC;
    POP_ASSUM MP_TAC THEN REWRITE_TAC[Seq2.mem_flatten];
    REWRITE_TAC[MEM_MAP;Seq.mem_iota;arith `0<= i /\ 0 + i = i`];
    REPEAT WEAKER_STRIP_TAC THEN POP_ASSUM MP_TAC THEN ASM_SIMP_TAC[MEM];
    DISCH_THEN DISJ_CASES_TAC THEN ASM_SIMP_TAC[arith `i < k ==> i <= k:num`];
    MATCH_MP_TAC mem_ifbetwn;
    BY(ASM_MESON_TAC[]);
  POP_ASSUM MP_TAC THEN REWRITE_TAC[MEM];
  DISCH_THEN DISJ_CASES_TAC THEN POP_ASSUM MP_TAC THEN ASM_SIMP_TAC[];
    TYPIFY `FST (ztrans L N r x (PRE k)) = ftrans L N r x k` (C SUBGOAL_THEN SUBST1_TAC);
      BY(ASM_SIMP_TAC[ftrans;arith `k<=k:num`]);
    DISCH_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    BY(ARITH_TAC);
  BY(ASM_MESON_TAC[mem_ifbetwn])
  ]);;
  (* }}} *)

let el_cat_nseq_none = prove_by_refinement(
  `!i (a:(A option)list) n. 
    SUC i < sizel (cat a (nseq n NONE)) /\ isSome (EL i (cat a (nseq n NONE))) /\
    isSome (EL (SUC i) (cat a (nseq n NONE)))
  ==> (?j. SUC j < sizel a /\
                  EL i (cat a (nseq n NONE)) = EL j a /\
                  EL (SUC i) (cat a (nseq n NONE)) = EL (SUC j) a)    `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC el_cat_suc [`i`;`a`;`nseq n (NONE:(A)option)`];
  ASM_SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM DISJ_CASES_TAC THEN ASM_REWRITE_TAC[];
  PROOF_BY_CONTR_TAC;
  POP_ASSUM kill;
  POP_ASSUM MP_TAC THEN REWRITE_TAC[NOT_EXISTS_THM;DE_MORGAN_THM];
  CONJ_TAC THEN REPEAT WEAKER_STRIP_TAC;
    TYPIFY `SUC j < sizel (nseq n (NONE:(A)option))` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
    REPEAT (GMATCH_SIMP_TAC Reduction3.el_nseq);
    BY(ASM_MESON_TAC[Ssrbool.isSome;Seq.size_nseq;arith `SUC j < n ==> j < n`]);
  TYPIFY `a = []` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  TYPIFY `nseq n (NONE:(A)option) = []` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
  DISJ2_TAC;
  REWRITE_TAC[GSYM EL];
  GMATCH_SIMP_TAC Reduction3.el_nseq;
  BY(ASM_MESON_TAC[arith `~(n=0) ==> 0 < n`;Ssrbool.isSome;Seq.size_eq0;Seq.size_nseq])
  ]);;
  (* }}} *)

let el_cat_nseq_the_none = prove_by_refinement(
  `!i (a:(A option)list) n. 
    SUC i < sizel (cat a (nseq n NONE)) /\ isSome (EL i (cat a (nseq n NONE))) /\
    isSome (EL (SUC i) (cat a (nseq n NONE)))
  ==> (?j. SUC j < sizel a /\
                  the (EL i (cat a (nseq n NONE))) = EL j (MAP the a) /\
                  the (EL (SUC i) (cat a (nseq n NONE))) = EL (SUC j) (MAP the a))    `,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC el_cat_nseq_none [`i`;`a`;`n`];
  ASM_SIMP_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `j` EXISTS_TAC THEN ASM_SIMP_TAC[];
  BY(REPEAT (GMATCH_SIMP_TAC EL_MAP) THEN ASM_SIMP_TAC[GSYM Seq.size;arith `SUC j < n ==> j < n`])
  ]);;
  (* }}} *)

let nseq_eq_nil = prove_by_refinement(
  `!n x. nseq n x = [] <=> (n=0)`,
  (* {{{ proof *)
  [
    BY(INDUCT_TAC THEN REWRITE_TAC[nseq0;nseq_suc;NOT_CONS_NIL;arith `~(SUC n = 0)`])
  ]);;
  (* }}} *)

let last_nseq = prove_by_refinement(
  `!n x. ~(n=0) ==> LAST (nseq n x) = x`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  GMATCH_SIMP_TAC LAST_EL;
  ASM_REWRITE_TAC[nseq_eq_nil;lower_case];
  GMATCH_SIMP_TAC el_nseq;
  REWRITE_TAC[Seq.size_nseq];
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let final_assumption_uvns = prove_by_refinement(
  `!L N r (x:num#num) k. 
     good_list L /\
     good_list_nodes L /\
     is_restricted (hypermap_of_list L) /\
     marked_list L N r x /\
     ~final_list L r /\
     (transform_count L N r x = k) /\
    (!i. i < k /\  (betwn (find_face L x) (ytrans L N r x i) (ztrans L N r x i) =[]) ==> ~(MEM ((FST (ytrans L N r x i)) ,(FST (ztrans L N r x i))) (list_of_darts (quotient_list L N)))) // new here
  ==>      
    (       
		(!v. (prev_el (core L r) v,v = x) ==>
		   let uvns = core_triple_v4 L N r x in
		   let vs = dest_triple_full (core L r) v uvns in
		       (!i. (let d = the (EL i vs),the (EL (SUC i) vs) in
			       isSome (EL i vs) /\
				 isSome (EL (SUC i) vs) /\
				 SUC i < sizel vs /\
				 MEM d (list_of_darts (quotient_list L N))
			       ==> MEM d (list_pairs (core L r)))))
		) // uvns 
`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[LET_THM];
  TYPED_ABBREV_TAC `dtf = (dest_triple_full (core L r) v (core_triple_v4 L N r x))`;
  REPEAT WEAKER_STRIP_TAC;
  MATCH_MP_TAC next_el_core_list_pairs;
  TYPIFY `N` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  DISCH_TAC;
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[Hypermap.is_restricted]);
  DISCH_TAC;
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  DISCH_TAC;
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[Tame_list.is_restricted_all_uniq]);
  DISCH_TAC;
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[marked_list_uniq_core]);
  DISCH_TAC;
  TYPIFY `SND x = v` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_x_exists ;PAIR;FST;SND]);
  INTRO_TAC uvns_mem_core [`L`;`N`;`r`;`x`;`k`;`i`];
  ASM_SIMP_TAC[LET_THM;arith `SUC i < n ==> i < n`];
  DISCH_TAC;
  PRINT_TAC "mem";
  TYPIFY `MEM v (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_snd_x_core]);
  TYPIFY `(!i. i <= k ==> MEM (ftrans L N r x i) (core L r))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_ftrans_core]);
  TYPIFY `(!i. i < k ==> MEM (FST (ytrans L N r x i)) (core L r))` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_fst_ytrans_core]);
  TYPIFY `uniq (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[marked_list_uniq_core]);
  TYPIFY `MEM (FST x) (core L r)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[mem_fst_x_core]);
  TYPIFY `~(k=0)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[Reduction3.transform_count_non0]);
  TYPIFY `PRE k < k` (C SUBGOAL_THEN ASSUME_TAC);
    BY(POP_ASSUM MP_TAC THEN ARITH_TAC);
  PRINT_TAC "intro";
  INTRO_TAC dest_triple_full_ifbetwn [`L`;`N`;`r`;`x`;`k`];
  ASM_SIMP_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  DISCH_TAC;
  PRINT_TAC "split into cases";
  INTRO_TAC el_cat_suc [`i`;`(flatten  (MAP  (\i. cat       (MAP SOME       (ftrans L N r x i ::        ifbetwn (core L r) (ftrans L N r x i) (FST (ytrans L N r x i))))       (nseq        (sizel (betwn (find_face L x) (ytrans L N r x i) (ztrans L N r x i)))       NONE)) (iota 0 k)))` ;`(MAP SOME (ftrans L N r x k :: ifbetwn (core L r) (ftrans L N r x k) (FST x))) `];
  ASM_SIMP_TAC[];
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  DISCH_THEN DISJ_CASES_TAC THEN POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN ASM_SIMP_TAC[];
    REPEAT (FIRST_X_ASSUM_ST `isSome` MP_TAC) THEN REPEAT (FIRST_X_ASSUM_ST `list_of_darts` MP_TAC) THEN ASM_SIMP_TAC[];
    REPLICATE_TAC 2 (POP_ASSUM kill);
    INTRO_TAC el_flatten [` (MAP  (\i. cat       (MAP SOME       (ftrans L N r x i ::        ifbetwn (core L r) (ftrans L N r x i) (FST (ytrans L N r x i))))       (nseq        (sizel (betwn (find_face L x) (ytrans L N r x i) (ztrans L N r x i)))       NONE)) (iota 0 k)) `;`j`];
    ASM_SIMP_TAC[];
    ANTS_TAC;
      REWRITE_TAC[GSYM Seq.allP;MEM_MAP;Seq.mem_iota;arith `0 <= i /\ 0+i=i`];
      REPEAT WEAKER_STRIP_TAC;
      BY(POP_ASSUM MP_TAC THEN ASM_SIMP_TAC[cat_eq_nil;MAP_EQ_NIL;NOT_CONS_NIL]);
    DISCH_THEN DISJ_CASES_TAC THEN POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN ASM_SIMP_TAC[];
      FIRST_X_ASSUM_ST `MEM r' (MAP f xs)` MP_TAC;
      REWRITE_TAC[MEM_MAP;Seq.mem_iota;arith `0 <= i /\ 0 +i=i`];
      DISCH_THEN (MP_TAC o GSYM);
      REPEAT WEAKER_STRIP_TAC THEN ASM_SIMP_TAC[];
      REPEAT (FIRST_X_ASSUM_ST `isSome` MP_TAC) THEN REPEAT (FIRST_X_ASSUM_ST `list_of_darts` MP_TAC) THEN ASM_SIMP_TAC[];
      REPEAT WEAKER_STRIP_TAC;
      PRINT_TAC "complete first case dest_triple0";
      INTRO_TAC el_cat_nseq_the_none [`j'`;`(MAP SOME      (ftrans L N r x x' ::       ifbetwn (core L r) (ftrans L N r x x') (FST (ytrans L N r x x'))))`;`(sizel (betwn (find_face L x) (ytrans L N r x x') (ztrans L N r x x')))`];
      ASM_SIMP_TAC[];
      REPEAT WEAKER_STRIP_TAC THEN POP_ASSUM MP_TAC THEN ASM_SIMP_TAC[];
      DISCH_THEN kill THEN POP_ASSUM kill;
      REWRITE_TAC[GSYM MAP_o];
      TYPIFY `((the o SOME):(num) -> (num)) = I` (C SUBGOAL_THEN SUBST1_TAC);
        BY(REWRITE_TAC[FUN_EQ_THM;o_THM;the_some;I_THM]);
      REWRITE_TAC[MAP_I;I_THM];
      MATCH_MP_TAC next_el_ifbetwn;
      ASM_SIMP_TAC[arith ` i < n ==> i <= n:num`];
      BY(POP_ASSUM MP_TAC THEN ASM_SIMP_TAC[lower_case;Seq.size_map]);
    (COMMENT "second case last+hd on dest_triple0");
    REPEAT (FIRST_X_ASSUM_ST `isSome` MP_TAC) THEN REPEAT (FIRST_X_ASSUM_ST `list_of_darts` MP_TAC) THEN ASM_SIMP_TAC[];
    REPLICATE_TAC 2 (POP_ASSUM kill);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `SUC j' < n` MP_TAC THEN REWRITE_TAC[REWRITE_RULE[Seq.map_MAP] Seq.size_map;Seq.size_iota];
    DISCH_TAC;
    FIRST_X_ASSUM_ST `list_of_darts` MP_TAC;
    REPEAT (GMATCH_SIMP_TAC EL_MAP) THEN ASM_SIMP_TAC[GSYM Seq.size;Seq.size_iota;arith `SUC j < k ==> j < k`];
    REPEAT (GMATCH_SIMP_TAC el_iota) THEN ASM_SIMP_TAC[arith `SUC j < k ==> j < k`;arith `0 + j = j`];
    REWRITE_TAC[MAP;Seq.cat_cons;HD;the_some];
    TYPIFY `ftrans L N r x (SUC j') = FST (ztrans L N r x j')` (C SUBGOAL_THEN SUBST1_TAC);
      BY(REWRITE_TAC[ftrans;arith `~(SUC j = 0)`;arith `PRE (SUC j) = j`]);
    COMMENT "split again on nseq=[]";
    TYPIFY `(sizel (betwn (find_face L x) (ytrans L N r x j') (ztrans L N r x j'))) = 0` ASM_CASES_TAC THEN ASM_REWRITE_TAC[];
      REWRITE_TAC[Reduction3.nseq0;Seq.cats0];
      TYPIFY `the (LAST (SOME (ftrans L N r x j') ::    (MAP SOME  (ifbetwn (core L r) (ftrans L N r x j') (FST (ytrans L N r x j')))) )) = the (SOME (LAST (ftrans L N r x j' ::   (ifbetwn (core L r) (ftrans L N r x j') (FST (ytrans L N r x j')))) ))` (C SUBGOAL_THEN SUBST1_TAC);
        AP_TERM_TAC;
        BY(MESON_TAC[MAP;EL_MAP;LAST_MAP;NOT_CONS_NIL]);
      REWRITE_TAC[the_some];
      REPEAT (GMATCH_SIMP_TAC last_ifbetwn);
      ASM_SIMP_TAC[arith `SUC j < k ==> j <= k /\ j< k`];
      FIRST_X_ASSUM_ST `list_of_darts` (C INTRO_TAC [`j'`]);
      ASM_REWRITE_TAC[GSYM Seq.size_eq0];
      BY(ASM_SIMP_TAC[arith `SUC j' < k ==> j' < k`]);
    DISCH_THEN kill;
    PROOF_BY_CONTR_TAC THEN POP_ASSUM kill;
    FIRST_X_ASSUM_ST `HD` kill;
    FIRST_X_ASSUM_ST `LAST` MP_TAC;
    REWRITE_TAC[];
    REPEAT (GMATCH_SIMP_TAC EL_MAP) THEN ASM_SIMP_TAC[GSYM Seq.size;Seq.size_iota;arith `SUC j < k ==> j < k`];
    REPEAT (GMATCH_SIMP_TAC el_iota) THEN ASM_SIMP_TAC[arith `SUC j < k ==> j < k`;arith `0 + j = j`];
    GMATCH_SIMP_TAC last_cat;
    ASM_REWRITE_TAC[Seq.size_eq0;nseq_eq_nil];
    GMATCH_SIMP_TAC last_nseq;
    BY(ASM_REWRITE_TAC[Ssrbool.isSome]);
  COMMENT "back to 1";
  POP_ASSUM DISJ_CASES_TAC THEN POP_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC THEN ASM_SIMP_TAC[];
    REPEAT (FIRST_X_ASSUM_ST `isSome` MP_TAC) THEN REPEAT (FIRST_X_ASSUM_ST `list_of_darts` MP_TAC) THEN ASM_SIMP_TAC[];
    REPLICATE_TAC 2 (POP_ASSUM kill);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM_ST `sizel` MP_TAC THEN REWRITE_TAC[REWRITE_RULE[Seq.map_MAP] Seq.size_map];
    DISCH_TAC;
    REPEAT (GMATCH_SIMP_TAC EL_MAP) THEN ASM_SIMP_TAC[GSYM Seq.size;the_some;arith `SUC j < k ==> j < k`];
    MATCH_MP_TAC next_el_ifbetwn;
    BY(ASM_SIMP_TAC[arith `k <= k:num`]);
  COMMENT "last case";
  REPEAT (FIRST_X_ASSUM_ST `isSome` MP_TAC) THEN REPEAT (FIRST_X_ASSUM_ST `list_of_darts` MP_TAC) THEN ASM_SIMP_TAC[];
  REPLICATE_TAC 2 (POP_ASSUM kill);
  SIMP_TAC[MAP;HD;the_some;Ssrbool.isSome];
  REPEAT (GMATCH_SIMP_TAC Aq23.LAST_FLATTEN_2);
  REWRITE_TAC[MAP_EQ_NIL];
  REWRITE_TAC[GSYM CONJ_ASSOC];
  SUBCONJ_TAC;
    BY(ASM_REWRITE_TAC[GSYM Seq.size_eq0;Seq.size_iota]);
  DISCH_TAC;
  REPEAT (GMATCH_SIMP_TAC LAST_MAP) THEN ASM_REWRITE_TAC[GSYM Seq.size;cat_eq_nil;NOT_CONS_NIL];
  DISCH_TAC;
  TYPIFY `LAST (iota 0 k) = PRE k` (C SUBGOAL_THEN SUBST1_TAC);
    BY(GMATCH_SIMP_TAC LAST_EL THEN GMATCH_SIMP_TAC el_iota THEN ASM_SIMP_TAC[GSYM Seq.size_eq0;Seq.size_iota;arith `~(k=0) ==> k-1 = PRE k`;lower_case;arith `0 + j = j`]);
  TYPIFY `(sizel      (betwn (find_face L x) (ytrans L N r x (PRE k))      (ztrans L N r x (PRE k)))) = 0` ASM_CASES_TAC THEN ASM_REWRITE_TAC[nseq0;Seq.cats0];
    TYPIFY `(the  (LAST  (SOME (ftrans L N r x (PRE k)) ::   MAP SOME   (ifbetwn (core L r) (ftrans L N r x (PRE k))   (FST (ytrans L N r x (PRE k))))))) = (the (SOME (LAST ((ftrans L N r x (PRE k)) :: ifbetwn (core L r) (ftrans L N r x (PRE k))   (FST (ytrans L N r x (PRE k)))) )))` (C SUBGOAL_THEN SUBST1_TAC);
      AP_TERM_TAC;
      BY(MESON_TAC[MAP;LAST_EL;LAST_MAP;NOT_CONS_NIL]);
    REWRITE_TAC[the_some];
    REPEAT (GMATCH_SIMP_TAC last_ifbetwn);
    ASM_SIMP_TAC[arith `~(k=0) ==>  PRE k <= k /\ PRE k < k`];
    FIRST_X_ASSUM_ST `list_of_darts` (C INTRO_TAC [`PRE k`]);
    ASM_REWRITE_TAC[GSYM Seq.size_eq0];
    BY(ASM_SIMP_TAC[GSYM Seq.size_eq0;ftrans]);
  DISCH_THEN kill;
  DISCH_TAC;
  PROOF_BY_CONTR_TAC THEN POP_ASSUM kill;
  FIRST_X_ASSUM_ST `LAST` MP_TAC;
  REWRITE_TAC[];
  BY(GMATCH_SIMP_TAC last_cat THEN GMATCH_SIMP_TAC last_nseq THEN ASM_REWRITE_TAC[Ssrbool.isSome;nseq_eq_nil])
  ]);;
  (* }}} *)

let final_assumption_uvns_combined = prove_by_refinement(
  `!L N r (x:num#num) k.
     good_list L /\
     good_list_nodes L /\
     is_restricted (hypermap_of_list L) /\
     marked_list L N r x /\
     ~final_list L r /\
     transform_count L N r x = k /\
     (!i. i < k /\
          betwn (find_face L x) (ytrans L N r x i) (ztrans L N r x i) = []
          ==> ~MEM (FST (ytrans L N r x i),FST (ztrans L N r x i))
               (list_of_darts (quotient_list L N))) /\
     ~MEM (SND x) (ifbetwn (core L r) (FST (ztrans L N r x (PRE k))) (FST x)) /\
     (!i. i < k
          ==> ~MEM (SND x)
               (ifbetwn (core L r) (ftrans L N r x i)
               (FST (ytrans L N r x i)))) /\
     (!i. i < k
          ==> indexf (SND x) (FST (ytrans L N r x i)) (core L r) <
              indexf (SND x) (FST (ztrans L N r x i)) (core L r))
     ==> (!v. prev_el (core L r) v,v = x
              ==> (let uvns = core_triple_v4 L N r x in
                  ( let vs = dest_triple_full (core L r) v uvns in
                  ( let vs' = MAP the (filter isSome vs) in
                   (!i. SUC i < sizel vs'
                        ==> indexf v (EL i vs') (core L r) <
                            indexf v (EL (SUC i) vs') (core L r)) /\
                   (!i. let d = the (EL i vs),the (EL (SUC i) vs) in
                        isSome (EL i vs) /\
                        isSome (EL (SUC i) vs) /\
                        SUC i < sizel vs /\
                        MEM d (list_of_darts (quotient_list L N))
                        ==> MEM d (list_pairs (core L r)))))))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  REPEAT LET_TAC;
  CONJ2_TAC;
    INTRO_TAC final_assumption_uvns [`L`;`N`;`r`;`x`;`k`];
    ASM_REWRITE_TAC[LET_THM];
    BY(ASM_MESON_TAC[]);
  INTRO_TAC final_assumption_uvns_vs' [`L`;`N`;`r`;`x`;`k`;`v`];
  BY(ASM_REWRITE_TAC[LET_THM])
  ]);;
  (* }}} *)


bb 5;;
el_cat_nseq_none;;
el_cat_suc;;




UNFINISHED;;

