
needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
(* flyspeck_needs "tame/import_tame_classification.hl";; *)
flyspeck_needs "tame/more_tame_concl.hl";;
flyspeck_needs "tame/tame_defs2.hl";;

module Work_in_progress = struct
end;;

open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Reduction3;;


(* kill fztrans, if_betwn *)

(* DEFS *)

let ftrans = new_definition'
  `!L N r (x:A#A) i. ftrans L N r x i = if i = 0 then SND x else FST (ztrans L N r x (PRE i))`;;

let ifbetwn = new_definition'
  `!s (x:A) y. ifbetwn s x y = if MEM x s /\ MEM y s /\ ~(x=y) then rcons (betwn s x y) y else []`;;

(* END DEFS *)


let non_r_darts_trans = prove_by_refinement(
    `!L N r x u. 
    good_list L /\
    is_restricted(hypermap_of_list L) /\
    good_list_nodes L /\
    marked_list L N r x /\
    ~final_list L r /\ 
    MEM u (list_of_darts (quotient_list L N)) /\
    ~MEM u r ==>
    MEM u (list_of_darts (quotient_list L (ntrans L N r x 1))) /\
    ~MEM u (rtrans L N r x 1)`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `normal_list L N /\ is_edge_nondegenerate (hypermap_of_list L) /\ all uniq L` (C SUBGOAL_THEN ASSUME_TAC);
    nCONJ_TAC 2;
      BY(ASM_MESON_TAC[is_restricted_all_uniq]);
    nCONJ_TAC 1;
      BY(ASM_MESON_TAC[Hypermap.is_restricted]);
    nCONJ_TAC 0;
      BY(ASM_MESON_TAC[marked_list]);
    BY(ASM_REWRITE_TAC[]);
  SUBCONJ2_TAC;
    INTRO_TAC Aq1.has_snd_norm_list_fliter [`L`;`N`;`r`;`x`];
    ASM_SIMP_TAC[];
    INTRO_TAC (GSYM Reduction3.rtrans1) [`L`;`N`;`r`;`x`];
    ASM_SIMP_TAC[];
    DISCH_THEN kill;
    REWRITE_TAC[GSYM Seq.hasP;NOT_EXISTS_THM;TAUT `~(a /\ b) <=> (a ==> ~b )`];
    DISCH_THEN MATCH_MP_TAC;
    REWRITE_TAC[Seq.mem_filter];
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `list_of_darts` MP_TAC;
    GMATCH_SIMP_TAC Tame_list.mem_list_of_darts_quotient;
    ASM_SIMP_TAC[];
    REWRITE_TAC[Seq2.mem_flatten] THEN REPEAT WEAKER_STRIP_TAC;
    TYPIFY `r'` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    TYPIFY `uniq r' /\ ~(r' = [])` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
    TYPIFY `r' = flatten (parts L r')` (C SUBGOAL_THEN SUBST1_TAC);
      BY(ASM_MESON_TAC[parts_flatten]);
    REWRITE_TAC[Seq2.mem_flatten];
    TYPIFY `p` EXISTS_TAC;
    ASM_REWRITE_TAC[];
    MATCH_MP_TAC MEM_LAST;
    BY(ASM_MESON_TAC[parts_uniq_nonnil]);
  DISCH_TAC;
  FIRST_X_ASSUM_ST `list_of_darts` MP_TAC;
  REPEAT (GMATCH_SIMP_TAC list_of_darts_quotient);
  ASM_SIMP_TAC[];
  TYPIFY `marked_list L (ntrans L N r x 1) (rtrans L N r x 1) x ` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC AQIUNPP;
    BY(ASM_REWRITE_TAC[]);
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  DISCH_TAC;
  REWRITE_TAC[MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `u` FULL_LEFT_EXPAND_TAC;
  POP_ASSUM kill THEN POP_ASSUM MP_TAC THEN REWRITE_TAC[Seq2.mem_flatten;MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `l` FULL_LEFT_EXPAND_TAC;
  TYPIFY `x'` (RENAME_TAC "p");
  TYPIFY `x''` (RENAME_TAC "r'");
  TYPIFY `~(r = r')` ASM_CASES_TAC;
    TYPIFY `p` EXISTS_TAC THEN ASM_SIMP_TAC[];
    TYPIFY `parts L r'` EXISTS_TAC THEN ASM_SIMP_TAC[];
    TYPIFY `r'` EXISTS_TAC THEN ASM_SIMP_TAC[];
    MATCH_MP_TAC Aq9.element_in_ntrans_suc;
    BY(ASM_REWRITE_TAC[]);
  RULE_ASSUM_TAC(REWRITE_RULE[]);
  FULL_EXPAND_TAC "r'";
  PROOF_BY_CONTR_TAC;
  REPEAT (FIRST_X_ASSUM_ST `rtrans` kill);
  FIRST_X_ASSUM_ST `~MEM x r` MP_TAC;
  REWRITE_TAC[];
  TYPIFY `uniq r /\ ~(r = [])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
  TYPIFY `r = flatten (parts L r)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_MESON_TAC[parts_flatten]);
  REWRITE_TAC[Seq2.mem_flatten];
  TYPIFY `p` EXISTS_TAC;
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC MEM_LAST;
  BY(ASM_MESON_TAC[parts_uniq_nonnil])
  ]);;
  (* }}} *)

let non_r_darts_trans_i = prove_by_refinement(
  `!i L N r x u.
    good_list L /\
    is_restricted (hypermap_of_list L) /\
    good_list_nodes L /\
    marked_list L N r x /\
    ~final_list L r /\
    i <= transform_count L N r x /\
    MEM u (list_of_darts (quotient_list L N)) /\
    ~MEM u r
    ==> MEM u (list_of_darts (quotient_list L (ntrans L N r x i))) /\
             ~MEM u (rtrans L N r x i)`,
  (* {{{ proof *)
  [
  INDUCT_TAC THEN ASM_SIMP_TAC[];
    BY(ASM_SIMP_TAC[Reduction2.trans0]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[arith `SUC i = 1 + i`;trans_add];
  MATCH_MP_TAC non_r_darts_trans;
  ASM_SIMP_TAC[];
  SUBCONJ_TAC;
    MATCH_MP_TAC AQIUNPP;
    BY(ASM_REWRITE_TAC[]);
  DISCH_TAC;
  SUBCONJ_TAC;
    MATCH_MP_TAC Kbwpbhq.transform_count_not;
    BY(ASM_SIMP_TAC[arith `SUC i <= k ==> i < k`]);
  DISCH_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  BY(ASM_SIMP_TAC[arith `SUC i <= k ==> i <= k`])
  ]);;
  (* }}} *)

let mem_list_pairs_core = prove_by_refinement(
  `!L N r d.
    normal_list L N /\
            is_edge_nondegenerate (hypermap_of_list L) /\
            good_list L /\
            MEM r N /\
            all uniq L /\
    MEM d (list_pairs (core L r)) ==> MEM d r`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  POP_ASSUM MP_TAC THEN GMATCH_SIMP_TAC list_pairs_core;
  CONJ_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[MEM_MAP] THEN REPEAT WEAKER_STRIP_TAC;
  TYPIFY `d` FULL_LEFT_EXPAND_TAC;
  TYPIFY `x` (RENAME_TAC "p");
  TYPIFY `uniq r /\ ~(r=[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[normal_list_uniq_nonnil]);
  TYPIFY `r = flatten (parts L r)` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_MESON_TAC[parts_flatten]);
  REWRITE_TAC[Seq2.mem_flatten];
  TYPIFY `uniq p /\ ~(p=[])` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_MESON_TAC[parts_uniq_nonnil]);
  BY(ASM_MESON_TAC[MEM_LAST])
  ]);;
  (* }}} *)

let list_of_darts_mem = prove_by_refinement(
  `(!L N r (x:num#num).
          good_list L /\
          good_list_nodes L /\
          is_restricted (hypermap_of_list L) /\
          marked_list L N r x /\
          ~final_list L r /\
          ~MEM (FST (ytrans L N r x 0),FST (ztrans L N r x 0)) r /\
          (betwn (find_face L x) (ytrans L N r x 0) (ztrans L N r x 0) = []
           ==> ~(next_el (core L r) (FST (ytrans L N r x 0)) =
                 FST (ztrans L N r x 0))) /\
          betwn (find_face L x) (ytrans L N r x 0) (ztrans L N r x 0) = []
          ==> ~MEM (FST (ytrans L N r x 0),FST (ztrans L N r x 0))
               (list_of_darts (quotient_list L N)))`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `==>` MP_TAC THEN ASM_REWRITE_TAC[] THEN PROOF_BY_CONTR_TAC;
  TYPED_ABBREV_TAC `d = (FST (ytrans L N r x 0),FST (ztrans L N r x 0))`;
  INTRO_TAC non_r_darts_trans [`L`;`N`;`r`;`x`;`d`];
  ASM_SIMP_TAC[];
  REWRITE_TAC[DE_MORGAN_THM];
  DISJ2_TAC;
  TYPIFY `normal_list L N /\            is_edge_nondegenerate (hypermap_of_list L) /\            all uniq L` (C SUBGOAL_THEN ASSUME_TAC);
    nCONJ_TAC 2;
      BY(ASM_MESON_TAC[is_restricted_all_uniq]);
    nCONJ_TAC 1;
      BY(ASM_MESON_TAC[Hypermap.is_restricted]);
    nCONJ_TAC 0;
      BY(ASM_MESON_TAC[marked_list]);
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `marked_list L (ntrans L N r x 1) (rtrans L N r x 1) x` (C SUBGOAL_THEN ASSUME_TAC);
    MATCH_MP_TAC AQIUNPP;
    BY(ASM_REWRITE_TAC[]);
  TYPIFY `MEM d (list_pairs (core L (rtrans L N r x 1)))` ENOUGH_TO_SHOW_TAC;
    DISCH_TAC;
    MATCH_MP_TAC mem_list_pairs_core;
    GEXISTL_TAC[ `L`;`ntrans L N r x 1` ];
    ASM_SIMP_TAC[];
    BY(ASM_MESON_TAC[marked_list]);
  FULL_EXPAND_TAC "d" THEN MATCH_MP_TAC next_el_core_list_pairs;
  TYPIFY `ntrans L N r x 1` EXISTS_TAC THEN ASM_SIMP_TAC[];
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  DISCH_TAC;
  nCONJ_TAC 0;
    BY(ASM_MESON_TAC[marked_list]);
  nCONJ_TAC 1;
    MATCH_MP_TAC marked_list_uniq_core;
    BY(ASM_MESON_TAC[]);
  TYPIFY `MEM (ytrans L N r x 0) (rtrans L N r x 1)` (C SUBGOAL_THEN ASSUME_TAC);
    ASM_SIMP_TAC[rtrans1];
    INTRO_TAC (GEN_ALL Aq12.y_mem_split_snd) [`l'z L N r x`;`find_face L (l'y L r x)`;`prev_el r (l'z L N r x)`;`l'y L r x`;`(SND     (split_normal_list L r (find_face L (l'y L r x)) (l'y L r x)	(prev_el r (l'z L N r x))))`;`L`;`N`;`r`;`x`];
    BY(ASM_SIMP_TAC[Reduction2.trans0]);
  nCONJ_TAC 2;
    MATCH_MP_TAC mem_fst_core;
    GEXISTL_TAC [`ntrans L N r x 1`;`x`];
    BY(ASM_SIMP_TAC[]);
  ASM_REWRITE_TAC[];
  COMMENT "next_el core";
  MATCH_MP_TAC next_core_ne_FST;
  TYPIFY `ntrans L N r x 1` EXISTS_TAC;
  ASM_SIMP_TAC[];
  SUBCONJ_TAC;
    BY(ASM_MESON_TAC[final_assumption_fst_y_neq_fst_z]);
  DISCH_TAC;
  TYPIFY `uniq (rtrans L N r x 1)` (C SUBGOAL_THEN ASSUME_TAC);
    TYPIFY `all uniq (ntrans L N r x 1)` (C SUBGOAL_THEN ASSUME_TAC);
      BY(ASM_MESON_TAC[uniq_flatten_all_uniq;marked_list;normal_list]);
    POP_ASSUM MP_TAC THEN REWRITE_TAC[GSYM Seq.allP];
    DISCH_THEN MATCH_MP_TAC;
    BY(ASM_MESON_TAC[marked_list]);
  POP_ASSUM MP_TAC;
  ASM_SIMP_TAC[rtrans1];
  ASM_SIMP_TAC[split_normal_list;LET_THM;LAMBDA_PAIR];
  REPEAT (GMATCH_SIMP_TAC Reduction2.find_face_x_eq_y);
  CONJ_TAC;
    BY(ASM_MESON_TAC[]);
  REWRITE_TAC[lower_case];
  REPEAT (GMATCH_SIMP_TAC Seq2.next_prev_id);
  TYPIFY `(betwn (find_face L x) (l'y L r x) (l'z L N r x)) = []` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ASM_MESON_TAC[Reduction2.trans0]);
  REWRITE_TAC[Seq.cats0];
  TYPIFY_GOAL_THEN `l'z L N r x = ztrans L N r x 0 /\ l'y L r x = ytrans L N r x 0` (unlist REWRITE_TAC);
    BY(ASM_MESON_TAC[Reduction2.trans0]);
  TYPED_ABBREV_TAC `p = (cat [ztrans L N r x 0]  (cat (betwn r (ztrans L N r x 0) (ytrans L N r x 0)) [ytrans L N r x 0]))`;
  TYPIFY `~(p = []) /\ ytrans L N r x 0 = LAST p /\ ztrans L N r x 0 = HD p ` (C SUBGOAL_THEN ASSUME_TAC);
    FULL_EXPAND_TAC "p";
    REWRITE_TAC[Seq.cat_cons;HD;NOT_CONS_NIL];
    REWRITE_TAC[GSYM Seq.cat_cons;Seq.catA];
    REWRITE_TAC[Seq.cats1];
    BY(REWRITE_TAC[LAST_rcons]);
  ASM_SIMP_TAC[];
  ASM_SIMP_TAC[Aq4.next_el_last_hd];
  BY(ASM_MESON_TAC[normal_list_uniq_nonnil;marked_list])
  ]);;
  (* }}} *)

let list_of_darts_reduction = prove_by_refinement(
  `(!L N r (x:num#num).
      good_list L /\
      good_list_nodes L /\
      is_restricted (hypermap_of_list L) /\
      marked_list L N r x /\
      ~final_list L r /\
      (betwn (find_face L x) (ytrans L N r x 0)
	 (ztrans L N r x 0) = [])  ==>
      ~(next_el (core L r) (FST (ytrans L N r x 0)) =
	   FST (ztrans L N r x 0))) /\

  (!L N r (x:num#num) k.
      good_list L /\
      good_list_nodes L /\
      is_restricted (hypermap_of_list L) /\
      marked_list L N r x /\
      ~final_list L r /\
      transform_count L N r x  = k ==>
      (!i. i < k /\
                   betwn (find_face L x) (ytrans L N r x i)
                   (ztrans L N r x i) =
                   []
                   ==> ~MEM (FST (ytrans L N r x i),FST (ztrans L N r x i)) r))  

// /\  
//(!L N r (x:num#num).
//    good_list L /\
//    good_list_nodes L /\
//    is_restricted (hypermap_of_list L) /\
//    marked_list L N r x /\
//    ~final_list L r /\
//    ~MEM (FST (ytrans L N r x 0),FST (ztrans L N r x 0)) r /\
//    (  (betwn (find_face L x) (ytrans L N r x 0) (ztrans L N r x 0) = []) ==>
//       ~(next_el (core L r) (FST (ytrans L N r x 0)) =
//	   FST (ztrans L N r x 0))) /\
//   (betwn (find_face L x) (ytrans L N r x 0) (ztrans L N r x 0) = [])
//         ==> ~MEM (FST (ytrans L N r x 0),FST (ztrans L N r x 0))
//         (list_of_darts (quotient_list L N)))

 ==>

(!L N r (x:num#num) k.
    good_list L /\
    good_list_nodes L /\
    is_restricted (hypermap_of_list L) /\
    marked_list L N r x /\
    transform_count L N r x = k /\
    ~final_list L r 

    ==>
   (!i. i < k /\
        betwn (find_face L x) (ytrans L N r x i) (ztrans L N r x i) = []
         ==> ~MEM (FST (ytrans L N r x i),FST (ztrans L N r x i))
         (list_of_darts (quotient_list L N))))`,
  (* {{{ proof *)
  [
    ASSUME_TAC list_of_darts_mem;
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC non_r_darts_trans_i [`i`;`L`;`N`;`r`;`x`];
  ASM_SIMP_TAC[];
  DISCH_TAC;
  TYPIFY `~MEM ((FST (ytrans L N r x i),FST (ztrans L N r x i)) ) r /\ ~MEM (FST (ytrans L N r x i),FST (ztrans L N r x i))     (list_of_darts (quotient_list L (ntrans L N r x i)))` ENOUGH_TO_SHOW_TAC;
    BY(ASM_MESON_TAC[arith `i < k ==> i <= k:num`]);
  POP_ASSUM kill;
  CONJ_TAC;
    BY(ASM_MESON_TAC[]);
  (POP_ASSUM MP_TAC) THEN TYPIFY `i = 0 + i` (C SUBGOAL_THEN SUBST1_TAC);
    BY(ARITH_TAC);
  REWRITE_TAC[trans_add];
  DISCH_TAC;
  TYPIFY `(ntrans L (ntrans L N r x i) (rtrans L N r x i) x 0) = ntrans L N r x i` (C SUBGOAL_THEN SUBST1_TAC);
    BY(REWRITE_TAC[GSYM trans_add;arith `0+i = i`]);
  FIRST_X_ASSUM MATCH_MP_TAC;
  ASM_SIMP_TAC[];
  SUBCONJ_TAC;
    MATCH_MP_TAC AQIUNPP;
    BY(ASM_REWRITE_TAC[]);
  DISCH_TAC;
  SUBCONJ_TAC;
    BY(ASM_SIMP_TAC[Kbwpbhq.transform_count_not]);
  DISCH_TAC;
  SIMP_TAC[];
  CONJ_TAC;
    FIRST_X_ASSUM (C INTRO_TAC [`L`;`ntrans L N r x i`;`rtrans L N r x i`;`x`;`transform_count L (ntrans L N r x i) (rtrans L N r x i) x`]);
    ASM_SIMP_TAC[];
    DISCH_THEN (C INTRO_TAC [`0`]);
    ASM_SIMP_TAC[GSYM trans_add;arith `0+i=i`];
    GMATCH_SIMP_TAC Reduction3.transform_count_add;
    BY(ASM_SIMP_TAC[arith `(i < k ==> i <= k) /\ (i < k ==> 0 < k - i)`]);
  CONJ2_TAC;
    BY(ASM_REWRITE_TAC[GSYM trans_add;arith `0+i =i`]);
  DISCH_TAC;
  FIRST_X_ASSUM MATCH_MP_TAC;
  BY(ASM_SIMP_TAC[])
  ]);;
  (* }}} *)





UNFINISHED;;

