
module Work_in_progress = struct
end;;


open Hales_tactic;;


let LET_THM = CONJ LET_DEF LET_END_DEF;;



(* *************************************************************************** *)
(* COMPLETED LEMMAS *)
(* *************************************************************************** *)

let cos_bounds_0_pi = prove_by_refinement(
  `!z. &0 < z /\ z < pi ==> -- &1 < cos z /\ cos z < &1`,
  (* {{{ proof *)
  [
  REPEAT WEAKER_STRIP_TAC;
  TYPIFY `(&0 < z /\ z < pi / &2) \/ z = pi / &2 \/ (&0 < pi - z /\ pi - z < pi / &2)` (C SUBGOAL_THEN ASSUME_TAC);
    BY(ASM_TAC THEN REAL_ARITH_TAC);
  REPEAT (FIRST_X_ASSUM DISJ_CASES_TAC);
      BY(ASM_MESON_TAC[Counting_spheres.cos_bounds_0_Pi2;arith `&0 < x ==> -- &1 < x`]);
    ASM_REWRITE_TAC[COS_PI2];
    BY(REAL_ARITH_TAC);
  TYPIFY `-- &1 < --cos z /\ --cos z < &1` ENOUGH_TO_SHOW_TAC;
    BY(REAL_ARITH_TAC);
  ONCE_REWRITE_TAC[GSYM COS_NEG];
  REWRITE_TAC[GSYM COS_PERIODIC_PI;arith `--z + pi = pi - z`];
  BY(ASM_MESON_TAC[Counting_spheres.cos_bounds_0_Pi2;arith `&0 < x ==> -- &1 < x`])
  ]);;
  (* }}} *)


(* *************************************************************************** *)
(* WORK IN PROGRESS *)
(* *************************************************************************** *)



(*
let INV_ARCLENGTH = prove_by_refinement(
  `!y1 y3 z. 
   &0 < z /\ z < pi /\ &0 < y1 /\ &0 < y3 ==>
    &0 < y1 pow 2 + y3 pow 2 - &2 * y1  *y3 * cos z /\
    z = arclength y1 y3 (sqrt (y1 pow 2 + y3 pow 2 - &2 * y1 *y3 * cos z))`,
    `,
  (* {{{ proof *)
  [
    st/r
intro cos_bounds_0_pi [`z`]
art[] then st/r
subconj
rt[arith `y1 pow 2 + y3 pow 2 - &2 * y1 * y3 * cos z = (y1 - y3) pow 2 + &2 * y1 *y3 * (&1 - cos z)`]
mmp (arith `&0 <= a /\ &0 < b ==> &0 < a + b`)
fyn
repeat (GMATCH_SIMP_TAC REAL_LT_MUL_EQ)
asm then rat
dt
abbrev `c = sqrt (y1 pow 2 + y3 pow 2 - &2 * y1 * y3 * cos z)`
gm Trigonometry1.ACS_ARCLENGTH
subconj
art[]
conj
expand "c"
fyn
asm then rat
conj
expand "c"
typ `y1 + y3 = sqrt( (y1 + y3) pow 2)` ets
dthen sub1
fyn
conj
fyn
asm then rat
rt[arith `(y1 + y3) pow 2 = y1 pow 2 + y3 pow 2 + &2 * y1 * y3`]

xxd

mmp (arith `&0 <= &2 * y1 * y3 * (&1 - cos z) ==> a + b - &2 * y1 * y3 * cos z <= a + b + &2 * y1 * y3`)

art[]
fyn2
gm Merge_ineq.sqrtpow2
asimp[arith `&0 < x ==> &0 <= x`]

typ `

art[]

  rt[
  ]);;
  (* }}} *)
*)
