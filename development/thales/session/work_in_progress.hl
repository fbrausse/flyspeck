
needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
flyspeck_needs "../tame_archive/tame_archive.hl";;
flyspeck_needs "tame/import_tame_classification.hl";;
flyspeck_needs "tame/more_tame_concl.hl";;
flyspeck_needs "tame/tame_defs2.hl";;


module Work_in_progress = struct
end;;


open Hales_tactic;;
open Tame_defs;;
open Tame_defs2;;
open Tame_list;;
open Hypermap;;


generatePolygon_reduction;;
generatePolygon;;

(* ............... NEW DEFS *)

let subdivFace_reduction = new_definition'
  `subdivFace_reduction <=> (!L N N' g g' p fs f v k r x triples uvns.
          good_list L /\
          good_list_nodes L /\
          is_restricted (hypermap_of_list L) /\
          newvertex_prepped L N r x /\
          marked_list L N r x /\
          ~final_list L r /\
          match_quotient_list g L N /\
          ~finalGraph g /\
          planegraphP p g /\
          (!v. v IN vertices_set2 g
               ==> facesAt g v = FILTER (\f. MEM v (FST f)) (faces g)) /\
          vertices_set2 g = elements_of_list (fgraph g) /\
      triples = triple_data g L N /\
      uvns = MAP (\ (u,v,ns). (FST u,FST v,sizel ns)) triples /\
          fs = nonFinals g /\
          f = minimalFace fs /\
          v = minimalVertex g f /\
          r,x = loop_choice g L N /\
          k = transform_count L N r x /\
          N' = ntrans L N r x k /\
          g' = subdivFaceFinal2 g f uvns
      ==>
      fgraph g' = quotient_list L N' /\ 
      vertices_set2 g' = elements_of_list (fgraph g') /\
      (!v. v IN vertices_set2 g'
       ==> facesAt g' v =
           FILTER (\f. MEM v (FST f)) (faces g'))

   )`;;

subdivFaceFinal2;;
generatePolygon;;
match_quotient_list;;

(* *************************************************************************** *)
(* WORK IN PROGRESS *)
(* *************************************************************************** *)

let subdivFace_generatePolygon_reduction = prove_by_refinement(
  `subdivFace_reduction /\    
    (!(L:((num)list)list). good_list L /\ good_list_nodes L ==>
  	   transform_assumption_v2 L) // AQ
  ==>
    generatePolygon_reduction_v4`,
  (* {{{ proof *)
  [
  rt[generatePolygon_reduction;subdivFace_reduction]
  st/r
  rep 7 (pop (mp o sym))
  st/r
  abbrev       `triples = triple_data g L N`
  abbrev `uvns = MAP (\ (u,v,ns). (FST u,FST v,sizel ns)) triples`
  abbrev `g' = subdivFaceFinal2 g f uvns`
  typ `g'` ex
  fxa (C intro [`L`;`N`;`N'`;`g`;`g'`;`p`;`fs`;`f`;`v`;`k`;`r`;`x`;`triples`;`uvns`])
  art[]
  simp[]
  st/r
  rt[generatePolygon]
  art[match_quotient_list]
  ]);;
  (* }}} *)

subdivFace_reduction;;
