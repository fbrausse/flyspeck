
needs "Library/rstc.ml";;
flyspeck_needs "hypermap/hypermap.hl";;
flyspeck_needs "../formal_lp/hypermap/ssreflect/list_hypermap_iso-compiled.hl";;
flyspeck_needs "../formal_lp/hypermap/computations/list_conversions2.hl";;
flyspeck_needs "../tame_archive/tame_archive.hl";;
flyspeck_needs "tame/import_tame_classification.hl";;
flyspeck_needs "tame/more_tame_concl.hl";;


module Work_in_progress = struct
end;;


open Hypermap;;
open Import_tame_classification;;
open More_tame_concl;;



(* *************************************************************************** *)
(* COMPLETED LEMMAS *)
(* *************************************************************************** *)

(* *************************************************************************** *)
(* WORK IN PROGRESS *)
(* *************************************************************************** *)


(* plane graphs good *)



let PlaneGraphs_induct = prove_by_refinement(
  `!B. ((!p. B (Seed p) /\ (!g g' i. (B g /\ 3 <= i /\ i <= maxGon p /\ 
   (  (let fs = nonFinals g in
     if (fs = []) then F else
       (let f = minimalFace fs in
	let v = minimalVertex g f in
	  (MEM g' (generatePolygon i v f g)))))) ==> B g'))) ==>
    (!g. PlaneGraphs g ==> B g)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[PlaneGraphs];
  REWRITE_TAC[IMAGE;UNIONS;IN_UNIV;IN_ELIM_THM];
  TYPIFY_GOAL_THEN `!g. ((?u. (?x. u = planeGraphsP x) /\ g IN u) <=> (?m. g IN planeGraphsP m))` (unlist REWRITE_TAC);
    BY(MESON_TAC[]);
  REWRITE_TAC[PlaneGraphsP;IN_ELIM_THM;RTranCl;IN;UNCURRY_DEF];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`m`]);
  REPEAT WEAKER_STRIP_TAC;
  INTRO_TAC RTC_INDUCT_L [`(\x y. MEM y (next_plane m x))`;`\ x y. (x = Seed m) ==> B y`];
  REWRITE_TAC[];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ANTS_TAC;
    CONJ_TAC;
      BY(ASM_MESON_TAC[]);
    REPEAT WEAKER_STRIP_TAC;
    FIRST_X_ASSUM MATCH_MP_TAC;
    GEXISTL_TAC [`y`];
    ASM_REWRITE_TAC[];
    FIRST_X_ASSUM_ST `MEM` MP_TAC;
    REWRITE_TAC[next_plane];
    REWRITE_TAC[LET_THM];
    TYPIFY `nonFinals y = []` ASM_CASES_TAC;
      ASM_REWRITE_TAC[];
      BY(ASM_REWRITE_TAC[MEM]);
    ASM_REWRITE_TAC[];
    REWRITE_TAC[Seq2.mem_flatten;MEM_MAP;Import_tame_classification.upt;Seq.mem_iota];
    REPEAT WEAKER_STRIP_TAC;
    GEXISTL_TAC [`x'`];
    FIRST_X_ASSUM_ST `SUC` MP_TAC;
    ASM_SIMP_TAC [arith `3 <= x' ==> (x' < 3 + SUC (maxGon m) - 3 <=> x' <= maxGon m)`];
    BY(ASM_MESON_TAC[]);
  DISCH_THEN (C INTRO_TAC [`Seed m`]) THEN REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  BY(ASM_REWRITE_TAC[])
  ]);;
  (* }}} *)

let subdivFace0_induct = prove_by_refinement(
  `!B vs g f u n.  ((!f' g. B g ==> B(makeFaceFinal f' g)) /\ (!g u v f'' n .
        B g /\ (~(n=0) \/  ~(nextVertex f'' u = v)) ==> 
    (let ws = upt (countVertices g) (countVertices g + n) in
     let (f1,f2,g') = splitFace g u v f'' ws in B g'))) ==>
    (B g ==> (B(subdivFace0 g f u n vs)))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC;
    ASM_REWRITE_TAC[subdivFace0];
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[subdivFace0];
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT LET_TAC;
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  FIRST_X_ASSUM_ST `makeFaceFinal` (C INTRO_TAC [`g'`;`f2`;`v`;`0`]);
  ASM_REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`g`;`u`;`v`;`f`;`n`]);
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  LET_TAC;
  ASM_REWRITE_TAC[];
  LET_TAC;
  BY(REWRITE_TAC[])
  ]);;
  (* }}} *)

let nonFinals_subdivFace0_induct = prove_by_refinement(
  `!B vs g f u n.  ((!f' g. B g ==> B(makeFaceFinal f' g)) /\ (!g u v f'' n .
        B g /\ MEM f'' (nonFinals g) /\ (~(n=0) \/  ~(nextVertex f'' u = v)) ==> 
    (let ws = upt (countVertices g) (countVertices g + n) in
     let (f1,f2,g') = splitFace g u v f'' ws in B g'))) ==>
    (B g /\ MEM f (nonFinals g) ==> (B(subdivFace0 g f u n vs)))`,
  (* {{{ proof *)
  [
  GEN_TAC;
  LIST_INDUCT_TAC;
    ASM_REWRITE_TAC[subdivFace0];
    BY(ASM_MESON_TAC[]);
  REPEAT WEAKER_STRIP_TAC;
  REWRITE_TAC[subdivFace0];
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  REPEAT LET_TAC;
  COND_CASES_TAC;
    BY(ASM_MESON_TAC[]);
  FIRST_X_ASSUM_ST `makeFaceFinal` (C INTRO_TAC [`g'`;`f2`;`v`;`0`]);
  ASM_REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  FIRST_X_ASSUM (C INTRO_TAC [`g`;`u`;`v`;`f`;`n`]);
  ANTS_TAC;
    BY(ASM_MESON_TAC[]);
  ASM_REWRITE_TAC[];
  LET_TAC;
  ASM_REWRITE_TAC[];
  LET_TAC;
  (REWRITE_TAC[]);
  DISCH_TAC;
  ASM_REWRITE_TAC[];
  FIRST_X_ASSUM_ST `splitFace` MP_TAC;
  REWRITE_TAC[splitFace;split_face];
  REPEAT LET_TAC;
  FIRST_X_ASSUM_ST `REVERSE` MP_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  FULL_EXPAND_TAC "g'";
  FIRST_X_ASSUM_ST `nonFinals` MP_TAC;
  REWRITE_TAC[nonFinals];
  REWRITE_TAC[MEM_FILTER];
  REPEAT WEAKER_STRIP_TAC;
  CONJ_TAC;
    EXPAND_TAC "f2";
    EXPAND_TAC "f2'";
    BY(REWRITE_TAC[type_face_SND]);
  REWRITE_TAC[faces_graph];
  FULL_EXPAND_TAC "f2";
  REWRITE_TAC[MEM_APPEND];
  DISJ1_TAC;
  FULL_EXPAND_TAC "fs";
  MATCH_MP_TAC MEM2_replace;
  BY(ASM_REWRITE_TAC[MEM])
  ]);;
  (* }}} *)

let MEM_generatePolygon = prove_by_refinement(
  `!i v f g g'. MEM g' (generatePolygon i v f g) ==> (?e vs.
     MEM e (enumerator i (LENGTH (vertices f))) /\
     ~containsDuplicateEdge g f v e /\
     vs = indexToVertexList f v e /\
     g' = subdivFace g f vs)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[generatePolygon;LET_THM;MEM_MAP;MEM_FILTER];
  BY(MESON_TAC[])
  ]);;
  (* }}} *)


(* now induction good_list *)

let fgraph_graph = prove_by_refinement(
  `!f n a b. fgraph (Graph f n a b) = MAP FST f`,
  (* {{{ proof *)
  [
    BY(REWRITE_TAC[bn_Graph;fgraph;faces;vertices])
  ]);;
  (* }}} *)

let uniq_list_of_darts_seed = prove_by_refinement(
  `!p. uniq(list_of_darts(fgraph (Seed p)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[bn_Seed;graphl;LET_THM;fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_darts_cons;List_hypermap.list_of_darts_nil];
  REWRITE_TAC[Seq.cats0];
  REWRITE_TAC[Seq.cat_uniq];
  GEN_TAC;
  CONJ_TAC;
    MATCH_MP_TAC List_hypermap.uniq_list_pairs;
    REWRITE_TAC[Import_tame_classification.upt];
    BY(REWRITE_TAC[Seq.iota_uniq]);
  CONJ2_TAC;
    MATCH_MP_TAC List_hypermap.uniq_list_pairs;
    REWRITE_TAC[REVERSE_rev];
    REWRITE_TAC[Seq.rev_uniq];
    REWRITE_TAC[Import_tame_classification.upt];
    BY(REWRITE_TAC[Seq.iota_uniq]);
  REWRITE_TAC[GSYM Seq.hasP];
  REWRITE_TAC[NOT_EXISTS_THM];
  GEN_TAC;
  REWRITE_TAC[TAUT `~(a /\ b) <=> (a ==> ~b)`];
  REWRITE_TAC[upt0;maxGon];
  TYPIFY `?i j. x = i,j` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[PAIR_SURJECTIVE]);
  WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[REVERSE_rev;Seq.mem_rev;list_pairs_iota];
  GMATCH_SIMP_TAC list_pairs_rev_iota;
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let all_nonempty_seed = prove_by_refinement(
  `!p. all (\l. ~(l = [])) (fgraph (Seed p))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[bn_Seed;graphl;LET_THM;fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_darts_cons;List_hypermap.list_of_darts_nil];
  REWRITE_TAC[Seq.all];
  REWRITE_TAC[Import_tame_classification.upt;maxGon];
  REWRITE_TAC[GSYM Seq.size_eq0;REVERSE_rev;Seq.size_rev];
  REWRITE_TAC[Seq.size_iota];
  BY(ARITH_TAC)
  ]);;
  (* }}} *)

let mem_transpose_seed = prove_by_refinement(
  `!p d. MEM d (list_of_darts (fgraph (Seed p))) ==> MEM (SND d,FST d) (list_of_darts (fgraph (Seed p)))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[bn_Seed;graphl;LET_THM;fgraph_graph;MAP];
  REWRITE_TAC[List_hypermap.list_of_darts_cons;List_hypermap.list_of_darts_nil];
  REWRITE_TAC[Seq.mem_cat];
  REWRITE_TAC[Import_tame_classification.upt;maxGon;REVERSE_rev];
  REPEAT GEN_TAC;
  TYPIFY_GOAL_THEN `(p+3)-0 = p+3` SUBST1_TAC;
    BY(ARITH_TAC);
  TYPIFY `?i j. d = (i,j)` (C SUBGOAL_THEN MP_TAC);
    BY(MESON_TAC[PAIR_SURJECTIVE]);
  WEAKER_STRIP_TAC;
  ASM_REWRITE_TAC[];
  REWRITE_TAC[list_pairs_iota];
  REPEAT (GMATCH_SIMP_TAC list_pairs_rev_iota);
  REWRITE_TAC[MEM];
  REWRITE_TAC[arith `0 < p + 3 /\ (p+3)- 1 = p+2 /\ (i + 1 = p + 3 <=> i = p+ 2) /\ (i + 1 < p + 3 <=> i < p + 2)`];
  REPEAT STRIP_TAC;
        BY(ASM_TAC THEN ARITH_TAC);
      BY(ASM_REWRITE_TAC[]);
    BY(ASM_REWRITE_TAC[]);
  DISJ1_TAC;
  BY(ASM_TAC THEN ARITH_TAC)
  ]);;
  (* }}} *)

let good_list_seed = prove_by_refinement(
  `!p. good_list (fgraph (Seed p))`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[List_hypermap.good_list;mem_transpose_seed;all_nonempty_seed;uniq_list_of_darts_seed])
  ]);;
  (* }}} *)

let FST_setFinal = prove_by_refinement(
  `!vs f. MAP FST (replace f [setFinal f] vs) = MAP FST vs`,
  (* {{{ proof *)
  [
  LIST_INDUCT_TAC;
    BY(REWRITE_TAC[replace]);
  REWRITE_TAC[replace];
  GEN_TAC;
  REWRITE_TAC[APPEND_SING];
  COND_CASES_TAC;
    ASM_REWRITE_TAC[];
    REWRITE_TAC[MAP];
    BY(REWRITE_TAC[setFinal_ALT;Import_tame_classification.vertices_face_FST]);
  BY(ASM_REWRITE_TAC[MAP])
  ]);;
  (* }}} *)

let fgraph_makeFaceFinal = prove_by_refinement(
  `!g f. fgraph (makeFaceFinal f g) = fgraph g`,
  (* {{{ proof *)
  [
  REWRITE_TAC[makeFaceFinal;fgraph;bn_Graph;faces;makeFaceFinalFaceList;setFinal];
  BY(REWRITE_TAC[FST_setFinal])
  ]);;
  (* }}} *)

let PlaneGraphs_all_nonempty = prove_by_refinement(
 `!g. PlaneGraphs g  ==> all (\(l:(num)list). ~(l = [])) (fgraph g)`,
  (* {{{ proof *)
  [
  MATCH_MP_TAC PlaneGraphs_induct;
  REWRITE_TAC[all_nonempty_seed;LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  COND_CASES_TAC;
    BY(REWRITE_TAC[]);
  DISCH_THEN (MP_TAC o (MATCH_MP MEM_generatePolygon));
  REWRITE_TAC[subdivFace];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM SUBST1_TAC;
  INTRO_TAC subdivFace0_induct [`(all (\ (l:(num)list). ~(l = []))) o fgraph`;`TL vs`;`g`;`(minimalFace (nonFinals g))`;`the (HD vs)`;`0`];
  REWRITE_TAC[o_THM];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM MP_TAC;
  ASM_REWRITE_TAC[];
  DISCH_THEN MATCH_MP_TAC;
  REWRITE_TAC[fgraph_makeFaceFinal];
  REPEAT (FIRST_X_ASSUM kill);
  REPEAT WEAKER_STRIP_TAC;
  REPEAT LET_TAC;
  FIRST_X_ASSUM MP_TAC;
  REWRITE_TAC[splitFace;split_face];
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  EXPAND_TAC "g'";
  REWRITE_TAC[fgraph];
  REWRITE_TAC[faces_graph];
  REWRITE_TAC[MAP_APPEND];
  REWRITE_TAC[APPEND_cat;Seq.all_cat];
  REWRITE_TAC[MAP];
  FIRST_X_ASSUM_ST `Face` MP_TAC;
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  CONJ2_TAC;
    REWRITE_TAC[Seq.all];
    ASM_REWRITE_TAC[];
    TYPIFY `~(vertices (Face (APPEND (REVERSE ws) f1'') F) = [])` ENOUGH_TO_SHOW_TAC;
      BY(ASM_MESON_TAC[]);
    REWRITE_TAC[vertices_face_FST];
    REWRITE_TAC[APPEND_EQ_NIL];
    EXPAND_TAC "f1''";
    REWRITE_TAC[APPEND_EQ_NIL];
    BY(MESON_TAC[NOT_CONS_NIL]);
  COMMENT "last case";
  FULL_EXPAND_TAC "f2";
  FULL_EXPAND_TAC "f2'";
  FULL_EXPAND_TAC "f1";
  FULL_EXPAND_TAC "f1'";
  FULL_EXPAND_TAC "fs";
  FULL_EXPAND_TAC "ws";
  FULL_EXPAND_TAC "f2''";
  REWRITE_TAC[GSYM Seq.map_MAP];
  REWRITE_TAC[GSYM Seq.allP];
  REWRITE_TAC[Seq.map_MAP;MEM_MAP];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `MEM` MP_TAC;
  DISCH_THEN (MP_TAC o (MATCH_MP MEM_replace));
  REWRITE_TAC[MEM];
  DISCH_THEN DISJ_CASES_TAC;
    FIRST_X_ASSUM_ST `all` MP_TAC;
    REWRITE_TAC[fgraph];
    REWRITE_TAC[GSYM Seq.map_MAP;GSYM Seq.allP];
    REWRITE_TAC[Seq.map_MAP;MEM_MAP];
    BY(REPLICATE_TAC 3 (FIRST_X_ASSUM MP_TAC) THEN MESON_TAC[]);
  FIRST_X_ASSUM MP_TAC THEN REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM (ASSUME_TAC o GSYM);
  FULL_EXPAND_TAC "x'";
  FIRST_X_ASSUM kill;
  FIRST_X_ASSUM_ST `upt` MP_TAC;
  REWRITE_TAC[vertices_face_FST];
  ASM_REWRITE_TAC[];
  ONCE_REWRITE_TAC[EQ_SYM_EQ];
  REWRITE_TAC[APPEND_EQ_NIL];
  BY(REWRITE_TAC[NOT_CONS_NIL])
]);;
  (* }}} *)

let mem_minimalFace_nonFinals = prove_by_refinement(
  `!g. ~(nonFinals g = []) ==> MEM (minimalFace (nonFinals g)) (nonFinals g)`,
  (* {{{ proof *)
  [
  GEN_TAC;
  REWRITE_TAC[minimalFace];
  BY(MESON_TAC[mem_bn_minimal])
  ]);;
  (* }}} *)

let planeGraphs_transpose = prove_by_refinement(
   `!g. PlaneGraphs g ==> (!d. MEM d (list_of_darts (fgraph g))
                 ==> MEM (SND d,FST d) (list_of_darts (fgraph g)))`,
  (* {{{ proof *)
  [
  MATCH_MP_TAC PlaneGraphs_induct;
  REWRITE_TAC[mem_transpose_seed;LET_THM];
  REPEAT WEAKER_STRIP_TAC;
  FIRST_X_ASSUM_ST `nonFinals` MP_TAC;
  COND_CASES_TAC;
    BY(REWRITE_TAC[]);
  DISCH_THEN (MP_TAC o (MATCH_MP MEM_generatePolygon));
  REWRITE_TAC[subdivFace];
  REPEAT WEAKER_STRIP_TAC;
  fxa mp
  ort[EQ_SYM_EQ]
  dt
  fxast `list_of_darts` mp
  INTRO_TAC nonFinals_subdivFace0_induct [`(\g. MEM d (list_of_darts(fgraph g)) ==> MEM (SND d, FST d) (list_of_darts(fgraph g)))`]
rt[]
fexp "g'"
dt
rule (  orr[taut `((a ==> a' ==> b ==> c) <=> ((a /\ a') ==> (b ==> c)))`])
fxa mmp
  REWRITE_TAC[fgraph_makeFaceFinal];
art[]
gm mem_minimalFace_nonFinals
art[]
  REPEAT (FIRST_X_ASSUM kill);
  REPEAT WEAKER_STRIP_TAC;
  REPEAT LET_TAC;
dt
comment "next"
fxast `splitFace` mp
  REWRITE_TAC[splitFace;split_face];
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
fxast `Face` mp
  REPEAT LET_TAC;
  REWRITE_TAC[PAIR_EQ];
  REPEAT WEAKER_STRIP_TAC;
  fexp "g'";
fxast `list_of_darts` mp
  REWRITE_TAC[fgraph];
  REWRITE_TAC[faces_graph];
fexp "fs"
repeat (fxast `replacefacesAt` kill)
fxast `REPLICATE` kill
repeat (fxast `betwn vs u v = vs'` kill)
fexp "f2"
fexp "f1"
fxast `faceListAt` kill
fxast `heights` kill
repeat (fxast `x = x` kill)
rt[MAP_APPEND]
fexp "f1'"
rt[MAP]
rt[vertices_face_FST]
rt[APPEND_cat]
rt[List_hypermap.list_of_darts_cat]

xxd...
  #
  ]);;
  (* }}} *)


let tame_good_concl = `!g. PlaneGraphs g /\ tame g ==> good_list (fgraph g)`;;

