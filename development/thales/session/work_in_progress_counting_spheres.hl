open Counting_spheres;;
open Hales_tactic;;

let CALC_ID_TAC = Calc_derivative.CALC_ID_TAC;;
(*
let CALC_ID_TAC (asl,t) =  (MATCH_MP_TAC (Calc_derivative.rational_identity t) (asl,t));;
*)

let DLWCHEM_concl = `!V. packing V /\ packing_ineq_def_a /\
  V SUBSET ball_annulus /\ ~(lmfun_ineq_center V) ==>
   (CARD V = 13 \/ CARD V = 14 \/ CARD V = 15)`;;


let XULJEPR_concl = `!V. packing V /\ V SUBSET ball_annulus /\ packing_ineq_def_a /\
 (?v.  v IN V /\ norm (v) = &2 /\ (!u.  (u IN V) /\ ~(u = v) ==> &2 * h0 <= dist(u,v) ))
==> (lmfun_ineq_center V)`;;

(* ========================================================================== *)
(* WORK IN PROGRESS *)
(* ========================================================================== *)


let rcone_def_alt = prove_by_refinement(
  `!(v:real^A) t p. p IN rcone_gt (vec 0) v t <=> norm p * norm v * t < p dot v`,
  (* {{{ proof *)
  [
  REWRITE_TAC[Sphere.rcone_gt;Sphere.rconesgn;varith `(x:real^A) - vec 0  = x`;IN;IN_ELIM_THM; DIST_0 ];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let rcone_refl = prove_by_refinement(
  `!(v:real^A) t.  t < &1 /\ ~(v = vec 0) ==> v IN rcone_gt (vec 0) v t`,
  (* {{{ proof *)
  [
  REWRITE_TAC[rcone_def_alt];
  REPEAT WEAK_STRIP_TAC;
  REWRITE_TAC[ DOT_SQUARE_NORM ];
  REWRITE_TAC[ arith `x * x * t < x pow 2 <=> &0 < (&1 - t ) * (x * x)`];
  (MATCH_MP_TAC REAL_LT_MUL );
  CONJ_TAC;
    BY(REPEAT (FIRST_X_ASSUM MP_TAC) THEN REAL_ARITH_TAC);
  (MATCH_MP_TAC REAL_LT_MUL);
  BY(ASM_REWRITE_TAC [ NORM_POS_LT ])
  ]);;
  (* }}} *)


let rcone_nz = prove_by_refinement(
  `!(v:real^A) p t.  (&0 < t ) /\ (p IN rcone_gt (vec 0) v t) ==> ~(p = vec 0) /\ ~(v = vec 0)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ rcone_def_alt ];
  REPEAT WEAK_STRIP_TAC;
  BY(CONJ_TAC THEN DISCH_TAC THEN (FIRST_X_ASSUM_ST `norm` MP_TAC) THEN ASM_REWRITE_TAC[ NORM_0 ; DOT_LZERO ; DOT_RZERO ; ] THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let rcone_dot_pos = prove_by_refinement(
  `!(v:real^A) t p.  &0 < t /\
      p IN rcone_gt (vec 0) v t ==> &0 < p dot v`,
  (* {{{ proof *)
  [
  REPEAT WEAK_STRIP_TAC;
  GOAL_TERM (fun w -> (SUBGOAL_THEN ( env w` ~(p = vec 0) /\ ~(v = vec 0)`) ASSUME_TAC));
    BY(ASM_MESON_TAC[rcone_nz]);
  FIRST_X_ASSUM_ST `rcone_gt` MP_TAC;
  REWRITE_TAC[rcone_def_alt];
  REPEAT WEAK_STRIP_TAC;
  MATCH_MP_TAC REAL_LT_TRANS;
  GOAL_TERM (fun w -> (EXISTS_TAC ( env w `norm p * norm v * t`)));
  ASM_REWRITE_TAC[];
  MATCH_MP_TAC REAL_LT_MUL;
  CONJ_TAC;
    BY(ASM_REWRITE_TAC[ NORM_POS_LT ]);
  MATCH_MP_TAC REAL_LT_MUL;
  BY(ASM_REWRITE_TAC [ NORM_POS_LT ])
  ]);;
  (* }}} *)


let rcone_hyperplane = prove_by_refinement(
  `!(v:real^A) t b q p. 
    (&0 < t /\ t < &1) /\
    (p IN rcone_gt (vec 0) v t) /\
     ( ( b / (p dot v)) % p = q) ==>
 	(q dot v = b)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[ rcone_def_alt];
  REPEAT WEAK_STRIP_TAC;
  GOAL_TERM (fun w -> (SUBGOAL_THEN ( env w`&0 < (p dot v)`) ASSUME_TAC));
    MATCH_MP_TAC rcone_dot_pos;
    BY(ASM_MESON_TAC[ rcone_def_alt ]);
  EXPAND_TAC "q";
  REWRITE_TAC[ DOT_LMUL ];
  Calc_derivative.CALC_ID_TAC;
  BY(FIRST_X_ASSUM MP_TAC THEN REAL_ARITH_TAC)
  ]);;
  (* }}} *)


let rcone_gt_arcV = prove_by_refinement(
  `!(v:real^3) g p.
    (&0 < g) /\ (g < pi / &2) /\
    p IN rcone_gt (vec 0) v (cos g) ==>
    arcV (vec 0) p v < g `,
  (* {{{ proof *)
  [
    st/r
sgth (%` ~(p = vec 0) /\ ~(v = vec 0)`) assume
mmp rcone_nz
      amt[COS_POS_PI2]
      fxast `IN` mp
  rt[ rcone_def_alt]
    rt[ ?i ]
      rt[arith `x * y * z < x * y * u <=> &0 < x * y * (u - z)`]

      (* to here *)


      (*chaff *)
      mmp (taut `(~b ==> ~a) ==> (a ==> b)`)
      dt


      gm ?c
      gm ?c
      art[ ?d ]
      ort[arith `&0 < cos x - cos y <=> cos y < cos x`]
      gm ?j
      rt[ ?k ]
   ]);;
  (* }}} *)


let rcone_gt_facet = prove_by_refinement(
  `!gv gw v w q (p:real^A). 
    (&0 < gv /\ gv < pi / &2) /\
    (&0 < gw /\ gw < pi / &2) /\ 
    (p in rcone_gt (vec 0) v (cos (gv))) /\
    (q = (((norm v) * cos (gv)) / (p dot v)) % p) /\
    (gv + gw <= arcV (vec 0) v w) ==>
    (q dot w < norm w * cos gw)`,
  (* {{{ proof *)
  [
  #
  ]);;
  (* }}} *)


(* ========================================================================== *)
(* COMPLETED LEMMAS  *)
(* ========================================================================== *)



