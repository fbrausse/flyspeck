(* May 2012 functional equational definitions of 
   inequality functions *)

open Hales_tactic;;

let GMATCH = Hales_tactic.GMATCH_SIMP_TAC;;

let uni = new_definition `uni(f,x) = (f:A->B) x`;;

let univariate = new_definition `univariate (f,x) = (f:A->B) o x`;;


let uni' = new_definition `uni' (f,x) x1 x2 x3 x4 x5 x6 = 
  (f:A->B) ( x x1 x2 x3 x4 x5 x6)`;;

let constant6 = new_definition `constant6 c x1 x2 x3 x4 x5 x6 = c`;;

let add6 = new_definition `add6 f g x1 x2 x3 x4 x5 x6 = 
  f x1 x2 x3 x4 x5 x6 + g x1 x2 x3 x4 x5 x6`;;

let two6 = new_definition `two6 = constant6 ( &2)`;;

let mk_126 = new_definition `mk_126 f =
  compose6 f proj_x1 proj_x2 two6 two6 two6 proj_x6`;;

let mk_135 = new_definition `mk_135 f = 
  compose6 f proj_x1 two6 proj_x3 two6 proj_x5 two6`;;

let neg6 = new_definition `neg6 f x1 x2 x3 x4 x5 x6 = 
  -- (f x1 x2 x3 x4 x5 x6)`;;

let mul6 = new_definition `mul6 f g x1 x2 x3 x4 x5 x6 = 
  f x1 x2 x3 x4 x5 x6 * g x1 x2 x3 x4 x5 x6`;;

let div6 = new_definition `div6 f g x1 x2 x3 x4 x5 x6 = 
  f x1 x2 x3 x4 x5 x6 / g x1 x2 x3 x4 x5 x6`;;

let sub6 = new_definition `sub6 f g x1 x2 x3 x4 x5 x6 = 
  f x1 x2 x3 x4 x5 x6  -  g x1 x2 x3 x4 x5 x6`;;

let proj_y1 = new_definition `proj_y1 x1 x2 x3 x4 x5 x6 = 
  sqrt(x1)`;;

let proj_y2 = new_definition `proj_y2 x1 x2 x3 x4 x5 x6 = 
  sqrt(x2)`;;

let proj_y3 = new_definition `proj_y3 x1 x2 x3 x4 x5 x6 = 
  sqrt(x3)`;;

let proj_y4 = new_definition `proj_y4 x1 x2 x3 x4 x5 x6 = 
  sqrt(x4)`;;

let proj_y5 = new_definition `proj_y5 x1 x2 x3 x4 x5 x6 = 
  sqrt(x5)`;;

let proj_y6 = new_definition `proj_y6 x1 x2 x3 x4 x5 x6 = 
  sqrt(x6)`;;


let domain6 = new_definition `domain6 h f g = 
  (!x1 x2 x3 x4 x5 x6. h x1 x2 x3 x4 x5 x6 ==>
      (f x1 x2 x3 x4 x5 x6 = g x1 x2 x3 x4 x5 x6))`;;

let rotate234 = new_definition `rotate234 f = 
  compose6 f proj_x2 proj_x3 proj_x4 unit6 unit6 unit6`;;

let rotate126 = new_definition `rotate126 f = 
  compose6 f proj_x1 proj_x2 proj_x6 unit6 unit6 unit6`;;

let rotate345 = new_definition `rotate345 f = 
  compose6 f proj_x3 proj_x4 proj_x5 unit6 unit6 unit6`;;

overload_interface ("+",`add6`);;
overload_interface ("-",`sub6`);;
overload_interface ("/",`div6`);;
overload_interface ("*",`mul6`);;

let proj_x1 = Nonlinear_lemma.proj_x1;;
let proj_x2 = Nonlinear_lemma.proj_x2;;
let proj_x3 = Nonlinear_lemma.proj_x3;;
let proj_x4 = Nonlinear_lemma.proj_x4;;
let proj_x5 = Nonlinear_lemma.proj_x5;;
let proj_x6 = Nonlinear_lemma.proj_x6;;
let unit6 = Nonlinear_lemma.unit6;;
let compose6 = Nonlinear_lemma.compose6;;

let sqrt_sqrt = prove_by_refinement(
  `!x. &0 <= x ==> (sqrt x * sqrt x = x)`,
  (* {{{ proof *)
  [
  MESON_TAC[arith `&0 pow 2 = &0`;(SPEC `&0` Nonlinear_lemma.sq_pow2)];
  ]);;
  (* }}} *)


let functional_x1_delta_x = prove_by_refinement(
  `x1_delta_x = proj_x1 * delta_x`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
   BY(REWRITE_TAC[proj_x1;Sphere.x1_delta_x;mul6])
  ]);;
  (* }}} *)

let functional_delta4_squared_x = prove_by_refinement(
  `delta4_squared_x = uni'(pow2,delta_x4)`,
  (* {{{ proof *)
  [
BY(REWRITE_TAC[FUN_EQ_THM;uni';Nonlinear_lemma.pow2;Sphere.delta4_squared_x])
  ]);;
  (* }}} *)

let functional_vol_x = prove_by_refinement(
  `vol_x = uni'(sqrt,delta_x) / constant6 (&12)`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;uni';Sphere.vol_x;constant6;div6]);
  ]);;
  (* }}} *)

Sphere.delta4_squared_x;;
Sphere.x1_delta_x;;

let functional_dih2_x = prove_by_refinement(
  `dih2_x = rotate2 dih_x`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  REWRITE_TAC[Sphere.dih2_x;Sphere.rotate2];
  BY(MESON_TAC[Nonlinear_lemma.dih_x_sym])
  ]);;
  (* }}} *)

let functional_dih3_x = prove_by_refinement(
  `dih3_x = rotate3 dih_x`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  REWRITE_TAC[Sphere.dih3_x;Sphere.rotate3];
  ]);;
  (* }}} *)

let functional_dih4_x = prove_by_refinement(
  `domain6 (\x1 x2 x3 x4 x5 x6.
   &0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\
       &0 <= x4 /\ &0 <= x5 /\ &0 <= x6)
	      dih4_x  (rotate4 dih_x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6];
  REWRITE_TAC[Sphere.dih4_x;Sphere.rotate4;Sphere.dih4_y;Sphere.dih_y;LET_DEF;LET_END_DEF];
  REPEAT WEAK_STRIP_TAC;
  REPEAT( Hales_tactic.GMATCH_SIMP_TAC (ISPEC `&0` Nonlinear_lemma.sq_pow2));
  BY(ASM_REWRITE_TAC[REAL_ARITH `&0 pow 2 = &0`])
  ]);;
  (* }}} *)

let functional_dih5_x = prove_by_refinement(
  `domain6 (\x1 x2 x3 x4 x5 x6.
   &0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\
       &0 <= x4 /\ &0 <= x5 /\ &0 <= x6)
	      dih5_x  (rotate5 dih_x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6];
  REWRITE_TAC[Sphere.dih5_x;Sphere.rotate5;Sphere.dih5_y;Sphere.dih_y;LET_DEF;LET_END_DEF];
  REPEAT WEAK_STRIP_TAC;
  REPEAT( Hales_tactic.GMATCH_SIMP_TAC (ISPEC `&0` Nonlinear_lemma.sq_pow2));
  (ASM_REWRITE_TAC[REAL_ARITH `&0 pow 2 = &0`]);
    MESON_TAC[Nonlinear_lemma.dih_x_sym;Nonlinear_lemma.dih_x_sym2];
  ]);;
  (* }}} *)

let functional_dih6_x = prove_by_refinement(
  `domain6 (\x1 x2 x3 x4 x5 x6.
   &0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\
       &0 <= x4 /\ &0 <= x5 /\ &0 <= x6)
	      dih6_x  (rotate6 dih_x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6];
  REWRITE_TAC[Sphere.dih6_x;Sphere.rotate6;Sphere.dih6_y;Sphere.dih_y;LET_DEF;LET_END_DEF];
  REPEAT WEAK_STRIP_TAC;
  REPEAT( Hales_tactic.GMATCH_SIMP_TAC (ISPEC `&0` Nonlinear_lemma.sq_pow2));
  (ASM_REWRITE_TAC[REAL_ARITH `&0 pow 2 = &0`]);
  ]);;
  (* }}} *)

let functional_lfun_y1 = prove_by_refinement(
  `lfun_y1 = (unit6 * constant6 h0 + proj_x1 * constant6 (-- &1))*
  (unit6 / (constant6 h0 - unit6))`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM];
    REWRITE_TAC[add6;mul6;div6;sub6;constant6];
    REWRITE_TAC[Sphere.lfun_y1;Sphere.lfun;		Nonlinear_lemma.unit6;Nonlinear_lemma.proj_x1];
REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let functional_ldih_x = prove_by_refinement(
  `ldih_x = 
    (unit6 * constant6 h0 + proj_y1 * constant6 ( -- #0.5))*
    (unit6 / (constant6 h0 - unit6)) * dih_x`,
  (* {{{ proof *)
  [
     REWRITE_TAC[FUN_EQ_THM];
    REWRITE_TAC[add6;mul6;div6;sub6;constant6];
    REWRITE_TAC[proj_y1;Sphere.ldih_x;Nonlinear_lemma.unit6;Sphere.lfun];
    REAL_ARITH_TAC;
  ]);;
  (* }}} *)

let functional_ldih2_x = prove_by_refinement(
  `ldih2_x = rotate2 ldih_x`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM];
  REWRITE_TAC[Sphere.rotate2;Sphere.ldih2_x;Sphere.ldih_x;Sphere.dih2_x];
  MESON_TAC[Nonlinear_lemma.dih_x_sym];
  ]);;
  (* }}} *)

let functional_ldih3_x = prove_by_refinement(
  `ldih3_x = rotate3 ldih_x`,
  (* {{{ proof *)
  [
    REWRITE_TAC[FUN_EQ_THM];
  REWRITE_TAC[Sphere.rotate3;Sphere.ldih3_x;Sphere.ldih_x;Sphere.dih3_x];
  ]);;
  (* }}} *)

let functional_eulerA_x = prove_by_refinement(
  `eulerA_x = proj_y1 * proj_y2 * proj_y3 +
     proj_y1 * (proj_x2 + proj_x3 - proj_x4) * constant6 (#0.5) +
     proj_y2 * (proj_x1 + proj_x3 - proj_x5) * constant6 (#0.5) +
     proj_y3 * (proj_x1 + proj_x2 - proj_x6) * constant6 (#0.5)
    `,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM;mul6;add6;sub6;proj_y1;proj_y2;proj_y3;constant6;proj_x1;proj_x2;proj_x3;proj_x4;proj_x5;proj_x6;Sphere.eulerA_x];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let functional_gchi1_x = prove_by_refinement(
  `gchi1_x = uni' (gchi,proj_y1) * dih_x`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;Sphere.gchi1_x;uni';proj_y1;mul6]);
  ]);;
  (* }}} *)

let functional_gchi2_x = prove_by_refinement(
  `gchi2_x = uni' (gchi,proj_y2) * dih2_x`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;Sphere.gchi2_x;uni';proj_y2;mul6]);
  ]);;
  (* }}} *)

let functional_gchi3_x = prove_by_refinement(
  `gchi3_x = uni' (gchi,proj_y3) * dih3_x`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;Sphere.gchi3_x;uni';proj_y3;mul6]);
  ]);;
  (* }}} *)

let functional_gchi4_x = prove_by_refinement(
  `gchi4_x = uni' (gchi,proj_y4) * dih4_x`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;Sphere.gchi4_x;uni';proj_y4;mul6]);
  ]);;
  (* }}} *)

let functional_gchi5_x = prove_by_refinement(
  `gchi5_x = uni' (gchi,proj_y5) * dih5_x`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;Sphere.gchi5_x;uni';proj_y5;mul6]);
  ]);;
  (* }}} *)

let functional_gchi6_x = prove_by_refinement(
  `gchi6_x = uni' (gchi,proj_y6) * dih6_x`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;Sphere.gchi6_x;uni';proj_y6;mul6]);
  ]);;
  (* }}} *)

let functional_eta2_135 = prove_by_refinement(
  `eta2_135 = rotate3 eta2_126`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM;Sphere.rotate3;Sphere.eta2_135;Sphere.eta2_126];
  BY(MESON_TAC[Collect_geom.ETA_Y_SYYM])
  ]);;
  (* }}} *)

let functional_vol3_x_sqrt = prove_by_refinement(
  `domain6
    (\x1 x2 x3 x4 x5 x6.
       &0 <= x1 /\ &0 <= x2 /\ &0 <=x6)
    vol3_x_sqrt (compose6 vol_x proj_x1 proj_x2 (constant6 (&2)) (constant6 (&2)) (constant6 (&2)) proj_x6)`,
  (* {{{ proof *)
  [
BY(REWRITE_TAC[domain6;constant6;proj_x1;proj_x2;proj_x6;compose6;Nonlinear_lemma.vol3_vol_x])
  ]);;
  (* }}} *)

let functional_vol3f_x_lfun = prove_by_refinement(
  `let two = constant6(&2) in
    (domain6
       (\x1 x2 x3 x4 x5 x6.
	&0 <= x1 /\ &0 <= x2 /\ &0 <=x6)
       vol3f_x_lfun
       (constant6 ( &2 * mm1 / pi ) *
    (two * compose6 dih_x proj_x1 proj_x2 two two two proj_x6 +
       two * compose6 dih2_x proj_x1 proj_x2 two two two proj_x6 +
       two * compose6 dih6_x proj_x1 proj_x2 two two two proj_x6 +
       compose6 dih3_x proj_x1 proj_x2 two two two proj_x6 + 
       compose6 dih4_x proj_x1 proj_x2 two two two proj_x6 + 
       compose6 dih5_x proj_x1 proj_x2 two two two proj_x6 -
       constant6 ( &3 * pi)) 
    - (constant6 (&8 * mm2 / pi)) *
     (compose6 ldih_x proj_x1 proj_x2 two two two proj_x6 +
	compose6 ldih2_x proj_x1 proj_x2 two two two proj_x6 +
	compose6 ldih6_x proj_x1 proj_x2 two two two proj_x6)))
    `,
  (* {{{ proof *)
  [
REWRITE_TAC[LET_DEF;LET_END_DEF;domain6;constant6;mul6;add6;sub6;proj_x1;compose6;proj_x2;proj_x3;proj_x4;proj_x5;proj_x6];
  BY(REWRITE_TAC[Nonlinear_lemma.vol3f_x_lfun_alt])
  ]);;
  (* }}} *)

let functional_vol3f_x_sqrt2_lmplus = prove_by_refinement(
  `let two = constant6(&2) in
    (domain6
       (\x1 x2 x3 x4 x5 x6.
	(&2 * h0) pow 2 <= x1 /\ &0 <= x2 /\ &0 <=x6)
       vol3f_x_sqrt2_lmplus
       (constant6 ( &2 * mm1 / pi ) *
    (two * compose6 dih_x proj_x1 proj_x2 two two two proj_x6 +
       two * compose6 dih2_x proj_x1 proj_x2 two two two proj_x6 +
       two * compose6 dih6_x proj_x1 proj_x2 two two two proj_x6 +
       compose6 dih3_x proj_x1 proj_x2 two two two proj_x6 + 
       compose6 dih4_x proj_x1 proj_x2 two two two proj_x6 + 
       compose6 dih5_x proj_x1 proj_x2 two two two proj_x6 -
       constant6 ( &3 * pi)) 
    - (constant6 (&8 * mm2 / pi)) *
     (compose6 ldih2_x proj_x1 proj_x2 two two two proj_x6 +
	compose6 ldih6_x proj_x1 proj_x2 two two two proj_x6)))`,
  (* {{{ proof *)
  [
REWRITE_TAC[LET_DEF;LET_END_DEF;domain6;constant6;mul6;add6;sub6;proj_x1;compose6;proj_x2;proj_x3;proj_x4;proj_x5;proj_x6];
  BY(REWRITE_TAC[Nonlinear_lemma.vol3f_x_sqrt2_lmplus_alt])
  ]);;
  (* }}} *)

let functional_asn797k = prove_by_refinement(
  `asn797k = 
    proj_x1 * uni'(asn,constant6 (cos(#0.797)) * 
		     uni'(sin, constant6(pi) / proj_x1))`,
  (* {{{ proof *)
  [
  BY(REWRITE_TAC[FUN_EQ_THM;mul6;div6;uni';constant6;proj_x1;Sphere.asn797k]);
  ]);;
  (* }}} *)

let functional_asnFnhk = prove_by_refinement(
  `asnFnhk = 
    proj_x2 * uni'(asn,(proj_x1 * constant6 (sqrt3 / #4.0) +
		     (uni'(sqrt,unit6 - 
			     uni'(pow2,(proj_x1 * constant6 (#0.5))))) *
		     constant6 (#0.5)) * uni'(sin,constant6(pi)/proj_x2))`,
  (* {{{ proof *)
  [
(REWRITE_TAC[FUN_EQ_THM;sub6;mul6;div6;Nonlinear_lemma.pow2;add6;unit6;uni';constant6;proj_x1;proj_x2;Sphere.asnFnhk]);
  BY(REWRITE_TAC[REAL_ARITH `x * #0.5 = x/ &2`])
  ]);;
  (* }}} *)

let functional_acs_sqrt_x1_d4 = prove_by_refinement(
  `acs_sqrt_x1_d4 = uni'(acs,proj_y1 * constant6 (#0.25))`,
  (* {{{ proof *)
  [
BY(REWRITE_TAC[FUN_EQ_THM;uni';mul6;constant6;proj_y1;Sphere.acs_sqrt_x1_d4;arith `x * #0.25 = x/ &4`])
  ]);;
  (* }}} *)


let functional_acs_sqrt_x2_d4 = prove_by_refinement(
  `acs_sqrt_x2_d4 = uni'(acs,proj_y2 * constant6 (#0.25))`,
  (* {{{ proof *)
  [
BY(REWRITE_TAC[FUN_EQ_THM;uni';mul6;constant6;proj_y2;Sphere.acs_sqrt_x2_d4;arith `x * #0.25 = x/ &4`])
  ]);;
  (* }}} *)


searcht 5 [`asn797k`];;
type_of `x1square`;;
searcht 5 [`x1cube`];;
Nonlinear_lemma.vol3f_x_sqrt2_lmplus_alt;;
Nonlinear_lemma.compose6;;
searcht 5 [`vol3f_x_sqrt2_lmplus`];;
searcht 5 [`eta_y a b c = eta_y d e f`];;
Sphere.rotate3;;
Sphere.eta_y;;
Sphere.eta_x;;
Sphere.eta2_126;;
Sphere.eta2_234;;
,eta2_135,eta2_234,eta2_456,
Sphere.gchi4_x;;
searcht 5 [`eta2_456`];;
Nonlinear_lemma.vol3_x_sqrt;;
(* ldih5_x ldih6_x not in HOL Light*)

let functional_arclength_x_123 = prove_by_refinement(
  `let al_num = proj_x1 + proj_x2 + proj_x3 * constant6 (-- &1) in
  let al_den = uni'(sqrt,(proj_x1 * proj_x2) * constant6 ( &4)) in
  let domain = 
    (\x1 x2 x3 x4 x5 x6. (&0 < x1 /\ &0 < x2 /\ &0 <= x3) /\
     (sqrt  x3 <= sqrt x1 + sqrt x2 /\ sqrt x1 <= sqrt x2 + sqrt x3 /\ 
      sqrt x2 <= sqrt x3 + sqrt x1)) in
    domain6 domain (arclength_x_123)  ( uni'(acs, al_num / al_den ) )`,
  (* {{{ proof *)
  [
    REWRITE_TAC[LET_DEF;LET_END_DEF;];
     REWRITE_TAC[domain6];
    REWRITE_TAC[add6;mul6;div6;sub6;constant6;uni'];
    REWRITE_TAC[proj_x1;proj_x2;proj_x3;Sphere.arclength_x_123;];
    REPEAT STRIP_TAC;
    Hales_tactic.GMATCH_SIMP_TAC Trigonometry1.ACS_ARCLENGTH;
   ASM_REWRITE_TAC[];
   ASM_SIMP_TAC[SQRT_POS_LT;SQRT_POS_LE];
   AP_TERM_TAC;
   REPEAT(   Hales_tactic.GMATCH_SIMP_TAC (ISPEC `&0` Nonlinear_lemma.sq_pow2));
   ASM_SIMP_TAC[REAL_ARITH `&0 pow 2 = &0`;REAL_ARITH `&0 < x ==> &0 <= x`;REAL_ARITH `u + x * -- &1 = u - x`];
   AP_TERM_TAC;
   MATCH_MP_TAC EQ_SYM;
   REWRITE_TAC[REAL_ARITH `(x1 * x2)* &4 = x1 * (x2 * (&2 pow 2))`];
   REPEAT (GMATCH SQRT_MUL);
   GMATCH Euler_complement.SQRT_OF_POW_2_LE;
   REPEAT (GMATCH Real_ext.REAL_PROP_NN_MUL2);
   ASM_SIMP_TAC[REAL_ARITH `&0 <= &2 pow 2 /\ &0 <= &2`;REAL_ARITH `&0 < x ==> &0 <= x`];
   REAL_ARITH_TAC;
  ]);;
  (* }}} *)


let functional_arclength_234 = prove_by_refinement(
  `arclength_x_234 = rotate234 arclength_x_123`,
  (* {{{ proof *)
  [
  REWRITE_TAC[rotate234;Sphere.arclength_x_123];
    REWRITE_TAC[FUN_EQ_THM];
    REWRITE_TAC[add6;mul6;div6;sub6;constant6;Nonlinear_lemma.compose6;uni';Nonlinear_lemma.arclength_x_234;Sphere.arclength_x_123;];
    REWRITE_TAC[proj_x1;proj_x2;proj_x3;proj_x4];
  ]);;
  (* }}} *)

let functional_arclength_126 = prove_by_refinement(
  `arclength_x_126 = rotate126 arclength_x_123`,
  (* {{{ proof *)
  [
  REWRITE_TAC[rotate126];
    REWRITE_TAC[FUN_EQ_THM];
    REWRITE_TAC[add6;mul6;div6;sub6;constant6;Nonlinear_lemma.compose6;uni';Nonlinear_lemma.arclength_x_126;Sphere.arclength_x_123;];
    REWRITE_TAC[proj_x1;proj_x2;proj_x3;proj_x6];
  ]);;
  (* }}} *)




 
(* arclength_x_345 deprecated *)

(* this could be rewriten further with eulerA_x *)

let functional_sol_euler_x_divsqrtdelta = prove_by_refinement(
  `let a = uni'(sqrt,proj_x1 * proj_x2 * proj_x3) +
     proj_y1 * (proj_x2 + proj_x3 - proj_x4) * constant6 (#0.5) +
     proj_y2 * (proj_x1 + proj_x3 - proj_x5) * constant6 (#0.5) +
     proj_y3 * (proj_x1 + proj_x2 - proj_x6) * constant6 (#0.5) in
    (sol_euler_x_div_sqrtdelta  =
	(uni'(matan,(delta_x / (a * a * constant6 (&4))))) / a)`,
  (* {{{ proof *)
  [
    LET_TAC;
    FIRST_X_ASSUM MP_TAC;
    REWRITE_TAC[FUN_EQ_THM];
    REWRITE_TAC[uni';Sphere.sol_euler_x_div_sqrtdelta;div6;mul6;add6;sub6;constant6;proj_y1;proj_y2;proj_y3;proj_x1;proj_x2;proj_x3;proj_x4;proj_x5;proj_x6];
    REWRITE_TAC[REAL_ARITH `x * #0.5 = x/ &2`;REAL_ARITH `&4 * a pow 2 = a* a * &4`];
  REPEAT    STRIP_TAC;
  FIRST_X_ASSUM (ASSUME_TAC o (ISPECL [`x:real`;`x':real`;`x'':real`;`x''':real`;`x'''':real`;`x''''':real`]));
    ASM_REWRITE_TAC[];
    REWRITE_TAC[LET_DEF;LET_END_DEF];    
  ]);;
  (* }}} *)


let functional_sol246_euler_x_div_sqrtdelta = prove_by_refinement(
  `sol_euler246_x_div_sqrtdelta = rotate4 sol_euler_x_div_sqrtdelta`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  BY(REWRITE_TAC[Sphere.rotate4;Sphere.sol_euler246_x_div_sqrtdelta])
  ]);;
  (* }}} *)

let functional_sol345_euler_x_div_sqrtdelta = prove_by_refinement(
  `sol_euler345_x_div_sqrtdelta = rotate5 sol_euler_x_div_sqrtdelta`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  BY(REWRITE_TAC[Sphere.rotate5;Sphere.sol_euler345_x_div_sqrtdelta])
  ]);;
  (* }}} *)

let functional_sol156_euler_x_div_sqrtdelta = prove_by_refinement(
  `sol_euler156_x_div_sqrtdelta = rotate6 sol_euler_x_div_sqrtdelta`,
  (* {{{ proof *)
  [
  REWRITE_TAC[FUN_EQ_THM];
  BY(REWRITE_TAC[Sphere.rotate6;Sphere.sol_euler156_x_div_sqrtdelta])
  ]);;
  (* }}} *)

let functional_dih_x_div_sqrtdelta_posbranch = prove_by_refinement(
  `domain6 (\x1 x2 x3 x4 x5 x6. (&0 <= x1))
    dih_x_div_sqrtdelta_posbranch
    ((constant6 (&2) * proj_y1) / (delta_x4) *
      uni'(matan, (constant6 (&4) * proj_x1 * delta_x) / (uni'(pow2,delta_x4))))`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6];
  REWRITE_TAC[proj_y1;constant6;proj_x1;uni';mul6;div6;Sphere.dih_x_div_sqrtdelta_posbranch;];
  REWRITE_TAC[LET_DEF;LET_END_DEF;Nonlinear_lemma.pow2];
  REPEAT WEAK_STRIP_TAC;
  ASM_SIMP_TAC[SQRT_MUL;arith `&0 <= &4`];
  BY(REWRITE_TAC[Collect_geom2.SQRT4_EQ2])
  ]);;
  (* }}} *)


(* dih2_x_div_sqrtdelta_posbranch not defined in HOL-Light *)

let functional_dih3_x_div_sqrtdelta_posbranch = prove_by_refinement(
  `dih3_x_div_sqrtdelta_posbranch = rotate3 dih_x_div_sqrtdelta_posbranch`,
  (* {{{ proof *)
  [
BY(REWRITE_TAC[FUN_EQ_THM;Sphere.rotate3;Sphere.dih3_x_div_sqrtdelta_posbranch]);
  ]);;
  (* }}} *)


let functional_dih5_x_div_sqrtdelta_posbranch = prove_by_refinement(
  `dih5_x_div_sqrtdelta_posbranch = rotate5 dih_x_div_sqrtdelta_posbranch`,
  (* {{{ proof *)
  [
BY(REWRITE_TAC[FUN_EQ_THM;Sphere.rotate5;Sphere.dih5_x_div_sqrtdelta_posbranch]);
  ]);;
  (* }}} *)

let functional_dih_x_126_s2 = prove_by_refinement(
  `domain6
    (\x1 x2 x3 x4 x5 x6.
     &0 <= x1 /\ &0 <= x2 /\ &0 <= x6)
    dih_x_126_s2  (mk_126 dih_x)`,
  (* {{{ proof *)
  [
REWRITE_TAC[domain6;Nonlinear_lemma.dih_x_126_s2;constant6;compose6;mk_126;two6;proj_x1;proj_x2;proj_x6;Sphere.dih_y;LET_DEF;LET_END_DEF;Nonlinear_lemma.sqrt2_sqrt2];
  BY(ASM_SIMP_TAC[sqrt_sqrt])
  ]);;
  (* }}} *)

searcht 5 [`sqrt x * sqrt x`];;
searcht 5 [`sqrt2`];;
searcht 5 [`dih_x_126_s2`];;
type_of `vol3r_126_x`;;
searcht 5 [`dih_x_div_sqrt_posbranch`];;
type_of `dih5_x_div_sqrtdelta_posbranch`;;

let functional_ldih_x_div_sqrtdelta_posbranch = prove_by_refinement(
  `ldih_x_div_sqrtdelta_posbranch = 
    ((constant6 h0 - proj_y1 * constant6 ( #0.5))*constant6 ( &1/ (h0 - &1)))
    * dih_x_div_sqrtdelta_posbranch`,
  (* {{{ proof *)
[
  REWRITE_TAC[FUN_EQ_THM];
  REWRITE_TAC[Sphere.ldih_x_div_sqrtdelta_posbranch];
  REWRITE_TAC[Sphere.ldih_x_div_sqrtdelta_posbranch;Sphere.lfun];
  REWRITE_TAC[Sphere.ldih_x_div_sqrtdelta_posbranch;Sphere.lfun;constant6;mul6;sub6;proj_y1;];
  BY(REAL_ARITH_TAC)
  ]);;
  (* }}} *)

let functional_ldih2_x_div_sqrtdelta_posbranch = 
  Sphere.ldih2_x_div_sqrtdelta_posbranch;;

let functional_ldih3_x_div_sqrtdelta_posbranch = 
  Sphere.ldih3_x_div_sqrtdelta_posbranch;;

let functional_ldih4_x_div_sqrtdelta_posbranch = 
  Sphere.ldih4_x_div_sqrtdelta_posbranch;;

let functional_ldih5_x_div_sqrtdelta_posbranch = 
  Sphere.ldih5_x_div_sqrtdelta_posbranch;;

let functional_ldih6_x_div_sqrtdelta_posbranch = 
  Sphere.ldih6_x_div_sqrtdelta_posbranch;;

(* rhazim_x, rhazim2, rhazim3, currently native in C++ *)

let rho_sqrtx = Nonlinear_lemma.rho_sqrtx;;
Sphere.rhazim;;

let functional_rhazim_x = prove_by_refinement(
  `domain6
    (\x1 x2 x3 x4 x5 x6. &0 <= x1 /\ &0 <= x2 /\ &0 <= x3 /\
       &0 <= x4 /\ &0 <= x5 /\ &0 <= x6)
    rhazim_x  
    (uni' (rho,proj_y1) * dih_x)`,
  (* {{{ proof *)
  [
  REWRITE_TAC[domain6];
  REWRITE_TAC[Sphere.rhazim_x;Sphere.rhazim;uni';proj_y1;mul6;Sphere.dih_y;LET_DEF;LET_END_DEF];
  REPEAT WEAK_STRIP_TAC;
  AP_TERM_TAC;
  REPEAT( Hales_tactic.GMATCH_SIMP_TAC (ISPEC `&0` Nonlinear_lemma.sq_pow2));
  BY(ASM_REWRITE_TAC[REAL_ARITH `&0 pow 2 = &0`;])
  ]);;
  (* }}} *)

let functional_rhazim2_x = prove_by_refinement(
  `rhazim2_x = rotate2 rhazim_x`,
  (* {{{ proof *)
  [
 REWRITE_TAC[FUN_EQ_THM];
  BY(REWRITE_TAC[Sphere.node2_y;Sphere.rotate2;Sphere.rhazim2_x;Sphere.rhazim_x;Sphere.rhazim2])
  ]);;
  (* }}} *)

let functional_rhazim3_x = prove_by_refinement(
  `rhazim3_x = rotate3 rhazim_x`,
  (* {{{ proof *)
  [
 REWRITE_TAC[FUN_EQ_THM];
  BY(REWRITE_TAC[Sphere.node3_y;Sphere.rotate3;Sphere.rhazim3_x;Sphere.rhazim_x;Sphere.rhazim3])
  ]);;
  (* }}} *)

let functional_taum_x = prove_by_refinement(
  `taum_x = rhazim_x + rhazim2_x +
    rhazim3_x - (unit6 + constant6 (const1))*constant6 (pi)`,
  (* {{{ proof *)
  [
 REWRITE_TAC[FUN_EQ_THM];
  (REWRITE_TAC[Sphere.taum_x;add6;sub6;mul6;constant6;unit6]);
  ]);;
  (* }}} *)




Sphere.taum_x;;
Sphere.rhazim2_x;;
Sphere.dih_y;;
Sphere.rho;;
Sphere.rhazim_x;;
Sphere.rhazim;;
type_of `ldih6_x_div_sqrtdelta_posbranch`;;

searcht 5 [`dih_x x1 x2 x3 x4 x5 x6 = dih_x y1 y2 y3 y4 y5 y6`];;
searcht 5 [`dih2_x_div_sqrtdelta_posbranch`];;
searcht 5 [`sqrt(&4)`];;
searcht 5 [`sqrt(x * y) = sqrt(x) * sqrt(y)`];;
searcht 5 [`pow2`];;
searcht 5 [`four`];;
searcht 5 [`sqrt (x pow 2)`];;
searcht 5 [`&0 <= x * y`];;
Nonlinear_lemma.sqrtxx;;
searcht 5 [`a = b ==> b = a`];;
searcht 5 [`a ==> (sqrt (x * y) = u)`];;
searcht 5 [`&0 pow 2`];;
searcht 5 [`sqrt x * sqrt x = x`];;
searcht 5[`&0 <= sqrt x`];;
search[`arcV`;`acs`];;
search[`acs`;`arclength`];;
search[`arcV`;`arclength`];;
