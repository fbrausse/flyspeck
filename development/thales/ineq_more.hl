(* ========================================================================== *)
(* FLYSPECK - BOOK FORMALIZATION                                              *)
(*                                                                            *)
(* Nonlinear Ineqs                                                           *)
(* Author: Thomas C. Hales                                                    *)
(* Date: 2010-04-28                                                           *)
(* ========================================================================== *)




(* flyspeck_needs "general/sphere.hl";; *)



module Ineq_more = struct

  let all_forall = Sphere.all_forall;;
  let ineq = Sphere.ineq;;

  let h0 = new_definition `h0 = #1.26`;;
  let sol0 = new_definition `sol0 = &3 * acs (&1 / &3)  - pi`;;
  let tau0 = new_definition `tau0 = &4 * pi - &20 * sol0`;;
  let mm1 = new_definition `mm1 = sol0 * sqrt(&8)/tau0`;;
  let mm2 = new_definition `mm2 = (&6 * sol0 - pi) * sqrt(&2) /(&6 * tau0)`;;

  let hplus = new_definition `hplus = #1.3254`;;

  let marchal_linear = new_definition `marchal_linear h = 
    (sqrt(&2)-h)*(hplus - h)*(&17*h - &9*(h pow 2) - &3)/
      ((sqrt(&2) - &1)*(hplus - &1))`;;

(*
  let marchal =  new_definition `marchal h =
    (if h <= sqrt (&2)  then marchal_linear h else &0)`;
*)


    let marchal = Pack_defs.marchal;; (* XX temp *)


  let lmfun = new_definition `lmfun h = if (h<=h0) then (h0 - h)/(h0 - &1) else &0`;;

(* Marchal Inequalities *)

 let I_9373340897 (* Flypaper, Packing, HJKDESR_4cell *) = 
  all_forall `ineq
  [ 
    (#2.0,y1,s8);
    (#2.0,y2,s8);
    (#2.0,y3,s8);
    (#2.0,y4,s8);
    (#2.0,y5,s8);
    (#2.0,y6,s8)
  ]
  (vol_x (y1*y1) (y2*y2) (y3*y3) (y4*y4) (y5*y5) (y6*y6)
   - (&2 * mm1 / pi) * 
          (sol_y y1 y2 y3 y4 y5 y6 +
	   sol_y y1 y5 y6 y4 y2 y3 +
	   sol_y y4 y5 y3 y1 y2 y6 +
	   sol_y y4 y2 y6 y1 y5 y3)
    + (&8 * mm2/pi) *
       (marchal_linear(y1/ &2)* dih_y y1 y2 y3 y4 y5 y6 +
	  marchal_linear(y2/ &2)* dih_y y2 y3 y1 y5 y6 y4 +
	  marchal_linear(y3/ &2)* dih_y y3 y1 y2 y6 y4 y5 +
	  marchal_linear(y4/ &2)* dih_y y4 y3 y5 y1 y6 y2 +
	  marchal_linear(y5/ &2)* dih_y y5 y1 y6 y2 y4 y3 +
	  marchal_linear(y6/ &2)* dih_y y6 y1 y5 y3 y4 y2) >= &0)`;;

 let I_1305126631 (* Flypaper, Packing, HJKDESR_3cell *) = 
  all_forall `ineq
  [ 
    (#2.0,y1,s8);
    (#2.0,y2,s8);
    (#2.0,y3,s8)
  ]
((eta_y y1 y2 y3 >= s2) \/
  (vol_x (y1*y1) (y2*y2) (&2) (&2) (&2) (y3*y3)
   - (&2 * mm1 / pi) * 
        (sol_y y1 y2 s2 s2 s2 y3 +
	   sol_y y2 y3 s2 s2 s2 y1 +
	   sol_y y3 y1 s2 s2 s2 y2)
    + (&8 * mm2/pi) *
       (marchal_linear(y1/ &2)* dih_y y1 y2 s2 s2 s2 y3 +
	  marchal_linear(y2/ &2)* dih_y y2 y3 s2 s2 s2 y1 +
	  marchal_linear(y3/ &2)* dih_y y3 y1 s2 s2 s2 y2)
         >= &0))`;;


 let I_3148025108 (* Flypaper, Packing, HJKDESR 2cell *) = 
  all_forall `ineq
  [     (#1.0,h,s2) ]
  ((h*(&2- h pow 2)/ &3)  - (&2 * mm1 / pi) *   (&1- h/ (sqrt (&2)))
    + (&8 * mm2/pi) *marchal_linear h  >= &0)`;;

(* Flypaper, Packing, HJKDESR   0- and 1-cells are calculations of 
constants *)

(* XX Flypaper, Packing, OXLZLEZ, Cell Cluster Estimate *)

end;;
